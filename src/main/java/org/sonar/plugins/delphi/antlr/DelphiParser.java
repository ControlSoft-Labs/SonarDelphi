// $ANTLR null C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g 2020-04-17 08:53:01

/*
 * Sonar Delphi Plugin
 * Copyright (C) 2010 SonarSource
 * dev@sonar.codehaus.org
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
 */

package org.sonar.plugins.delphi.antlr;

/**
* Delphi Parser class generated by Antlr. Provides tokens and tree parsing methods.
**/


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


@SuppressWarnings("all")
public class DelphiParser extends Parser {
	public static final String[] tokenNames = new String[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABSOLUTE", "ABSTRACT", "ADD", 
		"AND", "ANSISTRING", "ARRAY", "AS", "ASM", "ASSEMBLER", "ASSEMBLY", "ASSIGN", 
		"AT", "AT2", "AUTOMATED", "Alpha", "BEGIN", "BREAK", "CASE", "CDECL", 
		"CLASS", "COLON", "COMMA", "COMMENT", "CONST", "CONSTRUCTOR", "CONTAINS", 
		"CONTINUE", "ControlString", "Controlchar", "DEFAULT", "DEPRECATED", "DESTRUCTOR", 
		"DISPID", "DISPINTERFACE", "DIV", "DO", "DOT", "DOTDOT", "DOWNTO", "DQ", 
		"DW", "DYNAMIC", "Digit", "Digitseq", "ELSE", "END", "EQUAL", "EXCEPT", 
		"EXIT", "EXPERIMENTAL", "EXPORT", "EXPORTS", "EXTERNAL", "FALSE", "FAR", 
		"FILE", "FINAL", "FINALIZATION", "FINALLY", "FOR", "FORWARD", "FUNCTION", 
		"GE", "GOTO", "GT", "HELPER", "Hexdigit", "Hexdigitseq", "IF", "IMPLEMENTATION", 
		"IMPLEMENTS", "IN", "INDEX", "INHERITED", "INITIALIZATION", "INLINE", 
		"INTERFACE", "IS", "LABEL", "LBRACK", "LBRACK2", "LCURLY", "LE", "LIBRARY", 
		"LOCAL", "LPAREN", "LT", "MESSAGE", "MINUS", "MOD", "NAME", "NEAR", "NIL", 
		"NODEFAULT", "NOT", "NOT_EQUAL", "OBJECT", "OF", "ON", "OPERATOR", "OR", 
		"OUT", "OVERLOAD", "OVERRIDE", "PACKAGE", "PACKED", "PASCAL", "PLATFORM", 
		"PLUS", "POINTER", "POINTER2", "PRIVATE", "PROCEDURE", "PROGRAM", "PROPERTY", 
		"PROTECTED", "PUBLIC", "PUBLISHED", "QuotedString", "RAISE", "RBRACK", 
		"RBRACK2", "RCURLY", "READ", "READONLY", "RECORD", "REFERENCE", "REGISTER", 
		"REINTRODUCE", "REMOVE", "REPEAT", "REQUIRES", "RESIDENT", "RESOURCESTRING", 
		"RPAREN", "SAFECALL", "SEALED", "SEMI", "SET", "SHL", "SHR", "SLASH", 
		"STAR", "STATIC", "STDCALL", "STORED", "STRICT", "STRING", "THEN", "THREADVAR", 
		"TO", "TRUE", "TRY", "TYPE", "TkAnonymousExpression", "TkClass", "TkClassField", 
		"TkClassOfType", "TkClassParents", "TkCustomAttribute", "TkCustomAttributeArgs", 
		"TkFunctionArgs", "TkFunctionBody", "TkFunctionName", "TkFunctionReturn", 
		"TkGlobalFunction", "TkGuid", "TkHexNum", "TkIdentifier", "TkIntNum", 
		"TkInterface", "TkNewType", "TkObject", "TkRealNum", "TkRecord", "TkRecordHelper", 
		"TkVariableIdents", "TkVariableParam", "TkVariableType", "UNIT", "UNSAFE", 
		"UNTIL", "USES", "UnicodeBOM", "VAR", "VARARGS", "VARIANT", "VIRTUAL", 
		"WHILE", "WITH", "WRITE", "WRITEONLY", "WS", "XOR", "'&'", "'@@'"
	};
	public static final int EOF=-1;
	public static final int T__198=198;
	public static final int T__199=199;
	public static final int ABSOLUTE=4;
	public static final int ABSTRACT=5;
	public static final int ADD=6;
	public static final int AND=7;
	public static final int ANSISTRING=8;
	public static final int ARRAY=9;
	public static final int AS=10;
	public static final int ASM=11;
	public static final int ASSEMBLER=12;
	public static final int ASSEMBLY=13;
	public static final int ASSIGN=14;
	public static final int AT=15;
	public static final int AT2=16;
	public static final int AUTOMATED=17;
	public static final int Alpha=18;
	public static final int BEGIN=19;
	public static final int BREAK=20;
	public static final int CASE=21;
	public static final int CDECL=22;
	public static final int CLASS=23;
	public static final int COLON=24;
	public static final int COMMA=25;
	public static final int COMMENT=26;
	public static final int CONST=27;
	public static final int CONSTRUCTOR=28;
	public static final int CONTAINS=29;
	public static final int CONTINUE=30;
	public static final int ControlString=31;
	public static final int Controlchar=32;
	public static final int DEFAULT=33;
	public static final int DEPRECATED=34;
	public static final int DESTRUCTOR=35;
	public static final int DISPID=36;
	public static final int DISPINTERFACE=37;
	public static final int DIV=38;
	public static final int DO=39;
	public static final int DOT=40;
	public static final int DOTDOT=41;
	public static final int DOWNTO=42;
	public static final int DQ=43;
	public static final int DW=44;
	public static final int DYNAMIC=45;
	public static final int Digit=46;
	public static final int Digitseq=47;
	public static final int ELSE=48;
	public static final int END=49;
	public static final int EQUAL=50;
	public static final int EXCEPT=51;
	public static final int EXIT=52;
	public static final int EXPERIMENTAL=53;
	public static final int EXPORT=54;
	public static final int EXPORTS=55;
	public static final int EXTERNAL=56;
	public static final int FALSE=57;
	public static final int FAR=58;
	public static final int FILE=59;
	public static final int FINAL=60;
	public static final int FINALIZATION=61;
	public static final int FINALLY=62;
	public static final int FOR=63;
	public static final int FORWARD=64;
	public static final int FUNCTION=65;
	public static final int GE=66;
	public static final int GOTO=67;
	public static final int GT=68;
	public static final int HELPER=69;
	public static final int Hexdigit=70;
	public static final int Hexdigitseq=71;
	public static final int IF=72;
	public static final int IMPLEMENTATION=73;
	public static final int IMPLEMENTS=74;
	public static final int IN=75;
	public static final int INDEX=76;
	public static final int INHERITED=77;
	public static final int INITIALIZATION=78;
	public static final int INLINE=79;
	public static final int INTERFACE=80;
	public static final int IS=81;
	public static final int LABEL=82;
	public static final int LBRACK=83;
	public static final int LBRACK2=84;
	public static final int LCURLY=85;
	public static final int LE=86;
	public static final int LIBRARY=87;
	public static final int LOCAL=88;
	public static final int LPAREN=89;
	public static final int LT=90;
	public static final int MESSAGE=91;
	public static final int MINUS=92;
	public static final int MOD=93;
	public static final int NAME=94;
	public static final int NEAR=95;
	public static final int NIL=96;
	public static final int NODEFAULT=97;
	public static final int NOT=98;
	public static final int NOT_EQUAL=99;
	public static final int OBJECT=100;
	public static final int OF=101;
	public static final int ON=102;
	public static final int OPERATOR=103;
	public static final int OR=104;
	public static final int OUT=105;
	public static final int OVERLOAD=106;
	public static final int OVERRIDE=107;
	public static final int PACKAGE=108;
	public static final int PACKED=109;
	public static final int PASCAL=110;
	public static final int PLATFORM=111;
	public static final int PLUS=112;
	public static final int POINTER=113;
	public static final int POINTER2=114;
	public static final int PRIVATE=115;
	public static final int PROCEDURE=116;
	public static final int PROGRAM=117;
	public static final int PROPERTY=118;
	public static final int PROTECTED=119;
	public static final int PUBLIC=120;
	public static final int PUBLISHED=121;
	public static final int QuotedString=122;
	public static final int RAISE=123;
	public static final int RBRACK=124;
	public static final int RBRACK2=125;
	public static final int RCURLY=126;
	public static final int READ=127;
	public static final int READONLY=128;
	public static final int RECORD=129;
	public static final int REFERENCE=130;
	public static final int REGISTER=131;
	public static final int REINTRODUCE=132;
	public static final int REMOVE=133;
	public static final int REPEAT=134;
	public static final int REQUIRES=135;
	public static final int RESIDENT=136;
	public static final int RESOURCESTRING=137;
	public static final int RPAREN=138;
	public static final int SAFECALL=139;
	public static final int SEALED=140;
	public static final int SEMI=141;
	public static final int SET=142;
	public static final int SHL=143;
	public static final int SHR=144;
	public static final int SLASH=145;
	public static final int STAR=146;
	public static final int STATIC=147;
	public static final int STDCALL=148;
	public static final int STORED=149;
	public static final int STRICT=150;
	public static final int STRING=151;
	public static final int THEN=152;
	public static final int THREADVAR=153;
	public static final int TO=154;
	public static final int TRUE=155;
	public static final int TRY=156;
	public static final int TYPE=157;
	public static final int TkAnonymousExpression=158;
	public static final int TkClass=159;
	public static final int TkClassField=160;
	public static final int TkClassOfType=161;
	public static final int TkClassParents=162;
	public static final int TkCustomAttribute=163;
	public static final int TkCustomAttributeArgs=164;
	public static final int TkFunctionArgs=165;
	public static final int TkFunctionBody=166;
	public static final int TkFunctionName=167;
	public static final int TkFunctionReturn=168;
	public static final int TkGlobalFunction=169;
	public static final int TkGuid=170;
	public static final int TkHexNum=171;
	public static final int TkIdentifier=172;
	public static final int TkIntNum=173;
	public static final int TkInterface=174;
	public static final int TkNewType=175;
	public static final int TkObject=176;
	public static final int TkRealNum=177;
	public static final int TkRecord=178;
	public static final int TkRecordHelper=179;
	public static final int TkVariableIdents=180;
	public static final int TkVariableParam=181;
	public static final int TkVariableType=182;
	public static final int UNIT=183;
	public static final int UNSAFE=184;
	public static final int UNTIL=185;
	public static final int USES=186;
	public static final int UnicodeBOM=187;
	public static final int VAR=188;
	public static final int VARARGS=189;
	public static final int VARIANT=190;
	public static final int VIRTUAL=191;
	public static final int WHILE=192;
	public static final int WITH=193;
	public static final int WRITE=194;
	public static final int WRITEONLY=195;
	public static final int WS=196;
	public static final int XOR=197;

	// delegates
	public Parser[] getDelegates() {
		return new Parser[] {};
	}

	// delegators


	public DelphiParser(TokenStream input) {
		this(input, new RecognizerSharedState());
	}
	public DelphiParser(TokenStream input, RecognizerSharedState state) {
		super(input, state);
		this.state.ruleMemo = new HashMap[792+1];


	}

	protected TreeAdaptor adaptor = new CommonTreeAdaptor();

	public void setTreeAdaptor(TreeAdaptor adaptor) {
		this.adaptor = adaptor;
	}
	public TreeAdaptor getTreeAdaptor() {
		return adaptor;
	}
	@Override public String[] getTokenNames() { return DelphiParser.tokenNames; }
	@Override public String getGrammarFileName() { return "C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g"; }


	public static class file_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "file"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:70:1: file : ( program | library | unit | packageE );
	public final DelphiParser.file_return file() throws RecognitionException {
		DelphiParser.file_return retval = new DelphiParser.file_return();
		retval.start = input.LT(1);
		int file_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope program1 =null;
		ParserRuleReturnScope library2 =null;
		ParserRuleReturnScope unit3 =null;
		ParserRuleReturnScope packageE4 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:70:30: ( program | library | unit | packageE )
			int alt1=4;
			switch ( input.LA(1) ) {
			case ASM:
			case BEGIN:
			case CLASS:
			case CONST:
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case DOT:
			case EXPORTS:
			case FUNCTION:
			case LABEL:
			case LBRACK:
			case PROCEDURE:
			case PROGRAM:
			case RESOURCESTRING:
			case THREADVAR:
			case TYPE:
			case USES:
			case VAR:
				{
				alt1=1;
				}
				break;
			case LIBRARY:
				{
				alt1=2;
				}
				break;
			case UNIT:
				{
				alt1=3;
				}
				break;
			case PACKAGE:
				{
				alt1=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 1, 0, input);
				throw nvae;
			}
			switch (alt1) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:70:32: program
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_program_in_file84);
					program1=program();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, program1.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:70:42: library
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_library_in_file88);
					library2=library();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, library2.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:70:52: unit
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_unit_in_file92);
					unit3=unit();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, unit3.getTree());

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:70:59: packageE
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_packageE_in_file96);
					packageE4=packageE();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, packageE4.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 1, file_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "file"


	public static class program_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "program"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:76:1: program : ( programHead )? ( usesFileClause )? block '.' ;
	public final DelphiParser.program_return program() throws RecognitionException {
		DelphiParser.program_return retval = new DelphiParser.program_return();
		retval.start = input.LT(1);
		int program_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal8=null;
		ParserRuleReturnScope programHead5 =null;
		ParserRuleReturnScope usesFileClause6 =null;
		ParserRuleReturnScope block7 =null;

		Object char_literal8_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:76:30: ( ( programHead )? ( usesFileClause )? block '.' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:76:32: ( programHead )? ( usesFileClause )? block '.'
			{
			root_0 = (Object)adaptor.nil();


			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:76:32: ( programHead )?
			int alt2=2;
			int LA2_0 = input.LA(1);
			if ( (LA2_0==PROGRAM) ) {
				alt2=1;
			}
			switch (alt2) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:76:33: programHead
					{
					pushFollow(FOLLOW_programHead_in_program159);
					programHead5=programHead();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, programHead5.getTree());

					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:76:47: ( usesFileClause )?
			int alt3=2;
			int LA3_0 = input.LA(1);
			if ( (LA3_0==USES) ) {
				alt3=1;
			}
			switch (alt3) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:76:48: usesFileClause
					{
					pushFollow(FOLLOW_usesFileClause_in_program164);
					usesFileClause6=usesFileClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, usesFileClause6.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_block_in_program168);
			block7=block();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, block7.getTree());

			char_literal8=(Token)match(input,DOT,FOLLOW_DOT_in_program170); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal8_tree = (Object)adaptor.create(char_literal8);
			adaptor.addChild(root_0, char_literal8_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 2, program_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "program"


	public static class programHead_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "programHead"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:78:1: programHead : 'program' namespaceName ( programParmSeq )? ';' ;
	public final DelphiParser.programHead_return programHead() throws RecognitionException {
		DelphiParser.programHead_return retval = new DelphiParser.programHead_return();
		retval.start = input.LT(1);
		int programHead_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal9=null;
		Token char_literal12=null;
		ParserRuleReturnScope namespaceName10 =null;
		ParserRuleReturnScope programParmSeq11 =null;

		Object string_literal9_tree=null;
		Object char_literal12_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:78:30: ( 'program' namespaceName ( programParmSeq )? ';' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:78:32: 'program' namespaceName ( programParmSeq )? ';'
			{
			root_0 = (Object)adaptor.nil();


			string_literal9=(Token)match(input,PROGRAM,FOLLOW_PROGRAM_in_programHead224); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal9_tree = (Object)adaptor.create(string_literal9);
			adaptor.addChild(root_0, string_literal9_tree);
			}

			pushFollow(FOLLOW_namespaceName_in_programHead226);
			namespaceName10=namespaceName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, namespaceName10.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:78:56: ( programParmSeq )?
			int alt4=2;
			int LA4_0 = input.LA(1);
			if ( (LA4_0==LPAREN) ) {
				alt4=1;
			}
			switch (alt4) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:78:57: programParmSeq
					{
					pushFollow(FOLLOW_programParmSeq_in_programHead229);
					programParmSeq11=programParmSeq();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, programParmSeq11.getTree());

					}
					break;

			}

			char_literal12=(Token)match(input,SEMI,FOLLOW_SEMI_in_programHead233); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal12_tree = (Object)adaptor.create(char_literal12);
			adaptor.addChild(root_0, char_literal12_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 3, programHead_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "programHead"


	public static class programParmSeq_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "programParmSeq"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:80:1: programParmSeq : '(' ( ident ( ',' ident )* )? ')' ;
	public final DelphiParser.programParmSeq_return programParmSeq() throws RecognitionException {
		DelphiParser.programParmSeq_return retval = new DelphiParser.programParmSeq_return();
		retval.start = input.LT(1);
		int programParmSeq_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal13=null;
		Token char_literal15=null;
		Token char_literal17=null;
		ParserRuleReturnScope ident14 =null;
		ParserRuleReturnScope ident16 =null;

		Object char_literal13_tree=null;
		Object char_literal15_tree=null;
		Object char_literal17_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:80:30: ( '(' ( ident ( ',' ident )* )? ')' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:80:32: '(' ( ident ( ',' ident )* )? ')'
			{
			root_0 = (Object)adaptor.nil();


			char_literal13=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_programParmSeq284); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal13_tree = (Object)adaptor.create(char_literal13);
			adaptor.addChild(root_0, char_literal13_tree);
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:80:36: ( ident ( ',' ident )* )?
			int alt6=2;
			int LA6_0 = input.LA(1);
			if ( (LA6_0==ADD||LA6_0==ANSISTRING||LA6_0==AT||LA6_0==BREAK||(LA6_0 >= CONTAINS && LA6_0 <= CONTINUE)||LA6_0==DEFAULT||LA6_0==EXIT||LA6_0==EXPORT||LA6_0==FINAL||LA6_0==IMPLEMENTS||LA6_0==INDEX||LA6_0==LOCAL||LA6_0==MESSAGE||LA6_0==NAME||LA6_0==OBJECT||LA6_0==OPERATOR||LA6_0==OUT||LA6_0==POINTER||(LA6_0 >= READ && LA6_0 <= READONLY)||(LA6_0 >= REFERENCE && LA6_0 <= REGISTER)||LA6_0==REMOVE||LA6_0==STATIC||(LA6_0 >= STORED && LA6_0 <= STRING)||LA6_0==TkIdentifier||LA6_0==UNSAFE||LA6_0==VARIANT||LA6_0==WRITE||LA6_0==198) ) {
				alt6=1;
			}
			switch (alt6) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:80:37: ident ( ',' ident )*
					{
					pushFollow(FOLLOW_ident_in_programParmSeq287);
					ident14=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident14.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:80:43: ( ',' ident )*
					loop5:
					while (true) {
						int alt5=2;
						int LA5_0 = input.LA(1);
						if ( (LA5_0==COMMA) ) {
							alt5=1;
						}

						switch (alt5) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:80:44: ',' ident
							{
							char_literal15=(Token)match(input,COMMA,FOLLOW_COMMA_in_programParmSeq290); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal15_tree = (Object)adaptor.create(char_literal15);
							adaptor.addChild(root_0, char_literal15_tree);
							}

							pushFollow(FOLLOW_ident_in_programParmSeq292);
							ident16=ident();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, ident16.getTree());

							}
							break;

						default :
							break loop5;
						}
					}

					}
					break;

			}

			char_literal17=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_programParmSeq299); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal17_tree = (Object)adaptor.create(char_literal17);
			adaptor.addChild(root_0, char_literal17_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 4, programParmSeq_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "programParmSeq"


	public static class library_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "library"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:82:1: library : libraryHead ( usesFileClause )? block '.' ;
	public final DelphiParser.library_return library() throws RecognitionException {
		DelphiParser.library_return retval = new DelphiParser.library_return();
		retval.start = input.LT(1);
		int library_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal21=null;
		ParserRuleReturnScope libraryHead18 =null;
		ParserRuleReturnScope usesFileClause19 =null;
		ParserRuleReturnScope block20 =null;

		Object char_literal21_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:82:30: ( libraryHead ( usesFileClause )? block '.' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:82:32: libraryHead ( usesFileClause )? block '.'
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_libraryHead_in_library357);
			libraryHead18=libraryHead();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, libraryHead18.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:82:44: ( usesFileClause )?
			int alt7=2;
			int LA7_0 = input.LA(1);
			if ( (LA7_0==USES) ) {
				alt7=1;
			}
			switch (alt7) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:82:45: usesFileClause
					{
					pushFollow(FOLLOW_usesFileClause_in_library360);
					usesFileClause19=usesFileClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, usesFileClause19.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_block_in_library364);
			block20=block();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, block20.getTree());

			char_literal21=(Token)match(input,DOT,FOLLOW_DOT_in_library366); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal21_tree = (Object)adaptor.create(char_literal21);
			adaptor.addChild(root_0, char_literal21_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 5, library_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "library"


	public static class libraryHead_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "libraryHead"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:84:1: libraryHead : 'library' namespaceName ( hintingDirective )* ';' -> ^( 'library' namespaceName ) ;
	public final DelphiParser.libraryHead_return libraryHead() throws RecognitionException {
		DelphiParser.libraryHead_return retval = new DelphiParser.libraryHead_return();
		retval.start = input.LT(1);
		int libraryHead_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal22=null;
		Token char_literal25=null;
		ParserRuleReturnScope namespaceName23 =null;
		ParserRuleReturnScope hintingDirective24 =null;

		Object string_literal22_tree=null;
		Object char_literal25_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_LIBRARY=new RewriteRuleTokenStream(adaptor,"token LIBRARY");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_namespaceName=new RewriteRuleSubtreeStream(adaptor,"rule namespaceName");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:84:30: ( 'library' namespaceName ( hintingDirective )* ';' -> ^( 'library' namespaceName ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:84:32: 'library' namespaceName ( hintingDirective )* ';'
			{
			string_literal22=(Token)match(input,LIBRARY,FOLLOW_LIBRARY_in_libraryHead420); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LIBRARY.add(string_literal22);

			pushFollow(FOLLOW_namespaceName_in_libraryHead422);
			namespaceName23=namespaceName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespaceName.add(namespaceName23.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:84:56: ( hintingDirective )*
			loop8:
			while (true) {
				int alt8=2;
				int LA8_0 = input.LA(1);
				if ( (LA8_0==DEPRECATED||LA8_0==EXPERIMENTAL||LA8_0==LIBRARY||LA8_0==PLATFORM) ) {
					alt8=1;
				}

				switch (alt8) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:84:57: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_libraryHead425);
					hintingDirective24=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective24.getTree());
					}
					break;

				default :
					break loop8;
				}
			}

			char_literal25=(Token)match(input,SEMI,FOLLOW_SEMI_in_libraryHead429); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal25);

			// AST REWRITE
			// elements: LIBRARY, namespaceName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 84:80: -> ^( 'library' namespaceName )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:84:83: ^( 'library' namespaceName )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_LIBRARY.nextNode(), root_1);
				adaptor.addChild(root_1, stream_namespaceName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 6, libraryHead_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "libraryHead"


	public static class packageE_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "packageE"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:86:1: packageE : packageHead requiresClause ( containsClause )? 'end' '.' ;
	public final DelphiParser.packageE_return packageE() throws RecognitionException {
		DelphiParser.packageE_return retval = new DelphiParser.packageE_return();
		retval.start = input.LT(1);
		int packageE_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal29=null;
		Token char_literal30=null;
		ParserRuleReturnScope packageHead26 =null;
		ParserRuleReturnScope requiresClause27 =null;
		ParserRuleReturnScope containsClause28 =null;

		Object string_literal29_tree=null;
		Object char_literal30_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:86:30: ( packageHead requiresClause ( containsClause )? 'end' '.' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:86:32: packageHead requiresClause ( containsClause )? 'end' '.'
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_packageHead_in_packageE494);
			packageHead26=packageHead();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, packageHead26.getTree());

			pushFollow(FOLLOW_requiresClause_in_packageE496);
			requiresClause27=requiresClause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, requiresClause27.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:86:59: ( containsClause )?
			int alt9=2;
			int LA9_0 = input.LA(1);
			if ( (LA9_0==CONTAINS) ) {
				alt9=1;
			}
			switch (alt9) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:86:60: containsClause
					{
					pushFollow(FOLLOW_containsClause_in_packageE499);
					containsClause28=containsClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, containsClause28.getTree());

					}
					break;

			}

			string_literal29=(Token)match(input,END,FOLLOW_END_in_packageE503); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal29_tree = (Object)adaptor.create(string_literal29);
			adaptor.addChild(root_0, string_literal29_tree);
			}

			char_literal30=(Token)match(input,DOT,FOLLOW_DOT_in_packageE505); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal30_tree = (Object)adaptor.create(char_literal30);
			adaptor.addChild(root_0, char_literal30_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 7, packageE_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "packageE"


	public static class packageHead_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "packageHead"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:88:1: packageHead : 'package' namespaceName ';' ;
	public final DelphiParser.packageHead_return packageHead() throws RecognitionException {
		DelphiParser.packageHead_return retval = new DelphiParser.packageHead_return();
		retval.start = input.LT(1);
		int packageHead_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal31=null;
		Token char_literal33=null;
		ParserRuleReturnScope namespaceName32 =null;

		Object string_literal31_tree=null;
		Object char_literal33_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:88:30: ( 'package' namespaceName ';' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:88:32: 'package' namespaceName ';'
			{
			root_0 = (Object)adaptor.nil();


			string_literal31=(Token)match(input,PACKAGE,FOLLOW_PACKAGE_in_packageHead559); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal31_tree = (Object)adaptor.create(string_literal31);
			adaptor.addChild(root_0, string_literal31_tree);
			}

			pushFollow(FOLLOW_namespaceName_in_packageHead561);
			namespaceName32=namespaceName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, namespaceName32.getTree());

			char_literal33=(Token)match(input,SEMI,FOLLOW_SEMI_in_packageHead563); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal33_tree = (Object)adaptor.create(char_literal33);
			adaptor.addChild(root_0, char_literal33_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 8, packageHead_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "packageHead"


	public static class unit_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unit"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:90:1: unit : unitHead unitInterface unitImplementation unitBlock '.' ;
	public final DelphiParser.unit_return unit() throws RecognitionException {
		DelphiParser.unit_return retval = new DelphiParser.unit_return();
		retval.start = input.LT(1);
		int unit_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal38=null;
		ParserRuleReturnScope unitHead34 =null;
		ParserRuleReturnScope unitInterface35 =null;
		ParserRuleReturnScope unitImplementation36 =null;
		ParserRuleReturnScope unitBlock37 =null;

		Object char_literal38_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:90:30: ( unitHead unitInterface unitImplementation unitBlock '.' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:90:32: unitHead unitInterface unitImplementation unitBlock '.'
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_unitHead_in_unit624);
			unitHead34=unitHead();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, unitHead34.getTree());

			pushFollow(FOLLOW_unitInterface_in_unit626);
			unitInterface35=unitInterface();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, unitInterface35.getTree());

			pushFollow(FOLLOW_unitImplementation_in_unit628);
			unitImplementation36=unitImplementation();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, unitImplementation36.getTree());

			pushFollow(FOLLOW_unitBlock_in_unit630);
			unitBlock37=unitBlock();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, unitBlock37.getTree());

			char_literal38=(Token)match(input,DOT,FOLLOW_DOT_in_unit632); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal38_tree = (Object)adaptor.create(char_literal38);
			adaptor.addChild(root_0, char_literal38_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 9, unit_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unit"


	public static class unitHead_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unitHead"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:92:1: unitHead : 'unit' namespaceName ( hintingDirective )* ';' -> ^( 'unit' namespaceName ( hintingDirective )* ) ;
	public final DelphiParser.unitHead_return unitHead() throws RecognitionException {
		DelphiParser.unitHead_return retval = new DelphiParser.unitHead_return();
		retval.start = input.LT(1);
		int unitHead_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal39=null;
		Token char_literal42=null;
		ParserRuleReturnScope namespaceName40 =null;
		ParserRuleReturnScope hintingDirective41 =null;

		Object string_literal39_tree=null;
		Object char_literal42_tree=null;
		RewriteRuleTokenStream stream_UNIT=new RewriteRuleTokenStream(adaptor,"token UNIT");
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_namespaceName=new RewriteRuleSubtreeStream(adaptor,"rule namespaceName");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:92:30: ( 'unit' namespaceName ( hintingDirective )* ';' -> ^( 'unit' namespaceName ( hintingDirective )* ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:92:32: 'unit' namespaceName ( hintingDirective )* ';'
			{
			string_literal39=(Token)match(input,UNIT,FOLLOW_UNIT_in_unitHead689); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_UNIT.add(string_literal39);

			pushFollow(FOLLOW_namespaceName_in_unitHead691);
			namespaceName40=namespaceName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespaceName.add(namespaceName40.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:92:53: ( hintingDirective )*
			loop10:
			while (true) {
				int alt10=2;
				int LA10_0 = input.LA(1);
				if ( (LA10_0==DEPRECATED||LA10_0==EXPERIMENTAL||LA10_0==LIBRARY||LA10_0==PLATFORM) ) {
					alt10=1;
				}

				switch (alt10) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:92:54: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_unitHead694);
					hintingDirective41=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective41.getTree());
					}
					break;

				default :
					break loop10;
				}
			}

			char_literal42=(Token)match(input,SEMI,FOLLOW_SEMI_in_unitHead698); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal42);

			// AST REWRITE
			// elements: hintingDirective, UNIT, namespaceName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 92:77: -> ^( 'unit' namespaceName ( hintingDirective )* )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:92:80: ^( 'unit' namespaceName ( hintingDirective )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_UNIT.nextNode(), root_1);
				adaptor.addChild(root_1, stream_namespaceName.nextTree());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:92:103: ( hintingDirective )*
				while ( stream_hintingDirective.hasNext() ) {
					adaptor.addChild(root_1, stream_hintingDirective.nextTree());
				}
				stream_hintingDirective.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 10, unitHead_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unitHead"


	public static class unitInterface_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unitInterface"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:1: unitInterface : 'interface' ( usesClause )? ( interfaceDecl )* -> ^( 'interface' ( usesClause )? ( interfaceDecl )* ) ;
	public final DelphiParser.unitInterface_return unitInterface() throws RecognitionException {
		DelphiParser.unitInterface_return retval = new DelphiParser.unitInterface_return();
		retval.start = input.LT(1);
		int unitInterface_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal43=null;
		ParserRuleReturnScope usesClause44 =null;
		ParserRuleReturnScope interfaceDecl45 =null;

		Object string_literal43_tree=null;
		RewriteRuleTokenStream stream_INTERFACE=new RewriteRuleTokenStream(adaptor,"token INTERFACE");
		RewriteRuleSubtreeStream stream_interfaceDecl=new RewriteRuleSubtreeStream(adaptor,"rule interfaceDecl");
		RewriteRuleSubtreeStream stream_usesClause=new RewriteRuleSubtreeStream(adaptor,"rule usesClause");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:30: ( 'interface' ( usesClause )? ( interfaceDecl )* -> ^( 'interface' ( usesClause )? ( interfaceDecl )* ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:32: 'interface' ( usesClause )? ( interfaceDecl )*
			{
			string_literal43=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_unitInterface763); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_INTERFACE.add(string_literal43);

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:44: ( usesClause )?
			int alt11=2;
			int LA11_0 = input.LA(1);
			if ( (LA11_0==USES) ) {
				alt11=1;
			}
			switch (alt11) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:45: usesClause
					{
					pushFollow(FOLLOW_usesClause_in_unitInterface766);
					usesClause44=usesClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_usesClause.add(usesClause44.getTree());
					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:58: ( interfaceDecl )*
			loop12:
			while (true) {
				int alt12=2;
				int LA12_0 = input.LA(1);
				if ( (LA12_0==CLASS||(LA12_0 >= CONST && LA12_0 <= CONSTRUCTOR)||LA12_0==DESTRUCTOR||LA12_0==EXPORTS||LA12_0==FUNCTION||LA12_0==LBRACK||LA12_0==PROCEDURE||LA12_0==RESOURCESTRING||LA12_0==THREADVAR||LA12_0==TYPE||LA12_0==VAR) ) {
					alt12=1;
				}

				switch (alt12) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:59: interfaceDecl
					{
					pushFollow(FOLLOW_interfaceDecl_in_unitInterface771);
					interfaceDecl45=interfaceDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_interfaceDecl.add(interfaceDecl45.getTree());
					}
					break;

				default :
					break loop12;
				}
			}

			// AST REWRITE
			// elements: interfaceDecl, usesClause, INTERFACE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 94:75: -> ^( 'interface' ( usesClause )? ( interfaceDecl )* )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:78: ^( 'interface' ( usesClause )? ( interfaceDecl )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_INTERFACE.nextNode(), root_1);
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:92: ( usesClause )?
				if ( stream_usesClause.hasNext() ) {
					adaptor.addChild(root_1, stream_usesClause.nextTree());
				}
				stream_usesClause.reset();

				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:106: ( interfaceDecl )*
				while ( stream_interfaceDecl.hasNext() ) {
					adaptor.addChild(root_1, stream_interfaceDecl.nextTree());
				}
				stream_interfaceDecl.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 11, unitInterface_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unitInterface"


	public static class unitImplementation_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unitImplementation"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:1: unitImplementation : 'implementation' ( usesClause )? ( declSection )* -> ^( 'implementation' ( usesClause )? ( declSection )* ) ;
	public final DelphiParser.unitImplementation_return unitImplementation() throws RecognitionException {
		DelphiParser.unitImplementation_return retval = new DelphiParser.unitImplementation_return();
		retval.start = input.LT(1);
		int unitImplementation_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal46=null;
		ParserRuleReturnScope usesClause47 =null;
		ParserRuleReturnScope declSection48 =null;

		Object string_literal46_tree=null;
		RewriteRuleTokenStream stream_IMPLEMENTATION=new RewriteRuleTokenStream(adaptor,"token IMPLEMENTATION");
		RewriteRuleSubtreeStream stream_declSection=new RewriteRuleSubtreeStream(adaptor,"rule declSection");
		RewriteRuleSubtreeStream stream_usesClause=new RewriteRuleSubtreeStream(adaptor,"rule usesClause");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:30: ( 'implementation' ( usesClause )? ( declSection )* -> ^( 'implementation' ( usesClause )? ( declSection )* ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:32: 'implementation' ( usesClause )? ( declSection )*
			{
			string_literal46=(Token)match(input,IMPLEMENTATION,FOLLOW_IMPLEMENTATION_in_unitImplementation836); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_IMPLEMENTATION.add(string_literal46);

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:49: ( usesClause )?
			int alt13=2;
			int LA13_0 = input.LA(1);
			if ( (LA13_0==USES) ) {
				alt13=1;
			}
			switch (alt13) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:50: usesClause
					{
					pushFollow(FOLLOW_usesClause_in_unitImplementation839);
					usesClause47=usesClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_usesClause.add(usesClause47.getTree());
					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:63: ( declSection )*
			loop14:
			while (true) {
				int alt14=2;
				int LA14_0 = input.LA(1);
				if ( (LA14_0==CLASS||(LA14_0 >= CONST && LA14_0 <= CONSTRUCTOR)||LA14_0==DESTRUCTOR||LA14_0==EXPORTS||LA14_0==FUNCTION||(LA14_0 >= LABEL && LA14_0 <= LBRACK)||LA14_0==PROCEDURE||LA14_0==RESOURCESTRING||LA14_0==THREADVAR||LA14_0==TYPE||LA14_0==VAR) ) {
					alt14=1;
				}

				switch (alt14) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:64: declSection
					{
					pushFollow(FOLLOW_declSection_in_unitImplementation844);
					declSection48=declSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_declSection.add(declSection48.getTree());
					}
					break;

				default :
					break loop14;
				}
			}

			// AST REWRITE
			// elements: usesClause, declSection, IMPLEMENTATION
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 96:78: -> ^( 'implementation' ( usesClause )? ( declSection )* )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:81: ^( 'implementation' ( usesClause )? ( declSection )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_IMPLEMENTATION.nextNode(), root_1);
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:100: ( usesClause )?
				if ( stream_usesClause.hasNext() ) {
					adaptor.addChild(root_1, stream_usesClause.nextTree());
				}
				stream_usesClause.reset();

				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:114: ( declSection )*
				while ( stream_declSection.hasNext() ) {
					adaptor.addChild(root_1, stream_declSection.nextTree());
				}
				stream_declSection.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 12, unitImplementation_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unitImplementation"


	public static class unitBlock_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unitBlock"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:98:1: unitBlock : ( unitInitialization 'end' | compoundStatement | 'end' );
	public final DelphiParser.unitBlock_return unitBlock() throws RecognitionException {
		DelphiParser.unitBlock_return retval = new DelphiParser.unitBlock_return();
		retval.start = input.LT(1);
		int unitBlock_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal50=null;
		Token string_literal52=null;
		ParserRuleReturnScope unitInitialization49 =null;
		ParserRuleReturnScope compoundStatement51 =null;

		Object string_literal50_tree=null;
		Object string_literal52_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:98:30: ( unitInitialization 'end' | compoundStatement | 'end' )
			int alt15=3;
			switch ( input.LA(1) ) {
			case INITIALIZATION:
				{
				alt15=1;
				}
				break;
			case BEGIN:
				{
				alt15=2;
				}
				break;
			case END:
				{
				alt15=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 15, 0, input);
				throw nvae;
			}
			switch (alt15) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:98:32: unitInitialization 'end'
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_unitInitialization_in_unitBlock918);
					unitInitialization49=unitInitialization();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, unitInitialization49.getTree());

					string_literal50=(Token)match(input,END,FOLLOW_END_in_unitBlock920); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal50_tree = (Object)adaptor.create(string_literal50);
					adaptor.addChild(root_0, string_literal50_tree);
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:99:32: compoundStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_compoundStatement_in_unitBlock953);
					compoundStatement51=compoundStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, compoundStatement51.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:100:32: 'end'
					{
					root_0 = (Object)adaptor.nil();


					string_literal52=(Token)match(input,END,FOLLOW_END_in_unitBlock986); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal52_tree = (Object)adaptor.create(string_literal52);
					adaptor.addChild(root_0, string_literal52_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 13, unitBlock_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unitBlock"


	public static class unitInitialization_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unitInitialization"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:102:1: unitInitialization : 'initialization' statementList ( unitFinalization )? ;
	public final DelphiParser.unitInitialization_return unitInitialization() throws RecognitionException {
		DelphiParser.unitInitialization_return retval = new DelphiParser.unitInitialization_return();
		retval.start = input.LT(1);
		int unitInitialization_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal53=null;
		ParserRuleReturnScope statementList54 =null;
		ParserRuleReturnScope unitFinalization55 =null;

		Object string_literal53_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:102:30: ( 'initialization' statementList ( unitFinalization )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:102:32: 'initialization' statementList ( unitFinalization )?
			{
			root_0 = (Object)adaptor.nil();


			string_literal53=(Token)match(input,INITIALIZATION,FOLLOW_INITIALIZATION_in_unitInitialization1033); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal53_tree = (Object)adaptor.create(string_literal53);
			adaptor.addChild(root_0, string_literal53_tree);
			}

			pushFollow(FOLLOW_statementList_in_unitInitialization1035);
			statementList54=statementList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList54.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:102:63: ( unitFinalization )?
			int alt16=2;
			int LA16_0 = input.LA(1);
			if ( (LA16_0==FINALIZATION) ) {
				alt16=1;
			}
			switch (alt16) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:102:64: unitFinalization
					{
					pushFollow(FOLLOW_unitFinalization_in_unitInitialization1038);
					unitFinalization55=unitFinalization();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, unitFinalization55.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 14, unitInitialization_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unitInitialization"


	public static class unitFinalization_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unitFinalization"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:104:1: unitFinalization : 'finalization' statementList ;
	public final DelphiParser.unitFinalization_return unitFinalization() throws RecognitionException {
		DelphiParser.unitFinalization_return retval = new DelphiParser.unitFinalization_return();
		retval.start = input.LT(1);
		int unitFinalization_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal56=null;
		ParserRuleReturnScope statementList57 =null;

		Object string_literal56_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:104:30: ( 'finalization' statementList )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:104:32: 'finalization' statementList
			{
			root_0 = (Object)adaptor.nil();


			string_literal56=(Token)match(input,FINALIZATION,FOLLOW_FINALIZATION_in_unitFinalization1089); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal56_tree = (Object)adaptor.create(string_literal56);
			adaptor.addChild(root_0, string_literal56_tree);
			}

			pushFollow(FOLLOW_statementList_in_unitFinalization1091);
			statementList57=statementList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList57.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 15, unitFinalization_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unitFinalization"


	public static class containsClause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "containsClause"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:109:1: containsClause : 'contains' namespaceFileNameList ;
	public final DelphiParser.containsClause_return containsClause() throws RecognitionException {
		DelphiParser.containsClause_return retval = new DelphiParser.containsClause_return();
		retval.start = input.LT(1);
		int containsClause_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal58=null;
		ParserRuleReturnScope namespaceFileNameList59 =null;

		Object string_literal58_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:109:30: ( 'contains' namespaceFileNameList )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:109:32: 'contains' namespaceFileNameList
			{
			root_0 = (Object)adaptor.nil();


			string_literal58=(Token)match(input,CONTAINS,FOLLOW_CONTAINS_in_containsClause1145); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal58_tree = (Object)adaptor.create(string_literal58);
			adaptor.addChild(root_0, string_literal58_tree);
			}

			pushFollow(FOLLOW_namespaceFileNameList_in_containsClause1147);
			namespaceFileNameList59=namespaceFileNameList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, namespaceFileNameList59.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 16, containsClause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "containsClause"


	public static class requiresClause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "requiresClause"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:111:1: requiresClause : 'requires' namespaceNameList ;
	public final DelphiParser.requiresClause_return requiresClause() throws RecognitionException {
		DelphiParser.requiresClause_return retval = new DelphiParser.requiresClause_return();
		retval.start = input.LT(1);
		int requiresClause_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal60=null;
		ParserRuleReturnScope namespaceNameList61 =null;

		Object string_literal60_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:111:30: ( 'requires' namespaceNameList )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:111:32: 'requires' namespaceNameList
			{
			root_0 = (Object)adaptor.nil();


			string_literal60=(Token)match(input,REQUIRES,FOLLOW_REQUIRES_in_requiresClause1198); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal60_tree = (Object)adaptor.create(string_literal60);
			adaptor.addChild(root_0, string_literal60_tree);
			}

			pushFollow(FOLLOW_namespaceNameList_in_requiresClause1200);
			namespaceNameList61=namespaceNameList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, namespaceNameList61.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 17, requiresClause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "requiresClause"


	public static class usesClause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "usesClause"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:113:1: usesClause : 'uses' namespaceNameList -> ^( 'uses' namespaceNameList ) ;
	public final DelphiParser.usesClause_return usesClause() throws RecognitionException {
		DelphiParser.usesClause_return retval = new DelphiParser.usesClause_return();
		retval.start = input.LT(1);
		int usesClause_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal62=null;
		ParserRuleReturnScope namespaceNameList63 =null;

		Object string_literal62_tree=null;
		RewriteRuleTokenStream stream_USES=new RewriteRuleTokenStream(adaptor,"token USES");
		RewriteRuleSubtreeStream stream_namespaceNameList=new RewriteRuleSubtreeStream(adaptor,"rule namespaceNameList");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:113:30: ( 'uses' namespaceNameList -> ^( 'uses' namespaceNameList ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:113:32: 'uses' namespaceNameList
			{
			string_literal62=(Token)match(input,USES,FOLLOW_USES_in_usesClause1255); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_USES.add(string_literal62);

			pushFollow(FOLLOW_namespaceNameList_in_usesClause1257);
			namespaceNameList63=namespaceNameList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespaceNameList.add(namespaceNameList63.getTree());
			// AST REWRITE
			// elements: namespaceNameList, USES
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 113:57: -> ^( 'uses' namespaceNameList )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:113:60: ^( 'uses' namespaceNameList )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_USES.nextNode(), root_1);
				adaptor.addChild(root_1, stream_namespaceNameList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 18, usesClause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "usesClause"


	public static class usesFileClause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "usesFileClause"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:115:1: usesFileClause : 'uses' namespaceFileNameList -> ^( 'uses' namespaceFileNameList ) ;
	public final DelphiParser.usesFileClause_return usesFileClause() throws RecognitionException {
		DelphiParser.usesFileClause_return retval = new DelphiParser.usesFileClause_return();
		retval.start = input.LT(1);
		int usesFileClause_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal64=null;
		ParserRuleReturnScope namespaceFileNameList65 =null;

		Object string_literal64_tree=null;
		RewriteRuleTokenStream stream_USES=new RewriteRuleTokenStream(adaptor,"token USES");
		RewriteRuleSubtreeStream stream_namespaceFileNameList=new RewriteRuleSubtreeStream(adaptor,"rule namespaceFileNameList");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:115:30: ( 'uses' namespaceFileNameList -> ^( 'uses' namespaceFileNameList ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:115:32: 'uses' namespaceFileNameList
			{
			string_literal64=(Token)match(input,USES,FOLLOW_USES_in_usesFileClause1316); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_USES.add(string_literal64);

			pushFollow(FOLLOW_namespaceFileNameList_in_usesFileClause1318);
			namespaceFileNameList65=namespaceFileNameList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespaceFileNameList.add(namespaceFileNameList65.getTree());
			// AST REWRITE
			// elements: USES, namespaceFileNameList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 115:61: -> ^( 'uses' namespaceFileNameList )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:115:64: ^( 'uses' namespaceFileNameList )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_USES.nextNode(), root_1);
				adaptor.addChild(root_1, stream_namespaceFileNameList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 19, usesFileClause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "usesFileClause"


	public static class namespaceFileNameList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "namespaceFileNameList"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:117:1: namespaceFileNameList : namespaceFileName ( ',' namespaceFileName )* ';' -> namespaceFileName ( namespaceFileName )* ;
	public final DelphiParser.namespaceFileNameList_return namespaceFileNameList() throws RecognitionException {
		DelphiParser.namespaceFileNameList_return retval = new DelphiParser.namespaceFileNameList_return();
		retval.start = input.LT(1);
		int namespaceFileNameList_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal67=null;
		Token char_literal69=null;
		ParserRuleReturnScope namespaceFileName66 =null;
		ParserRuleReturnScope namespaceFileName68 =null;

		Object char_literal67_tree=null;
		Object char_literal69_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_namespaceFileName=new RewriteRuleSubtreeStream(adaptor,"rule namespaceFileName");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:117:30: ( namespaceFileName ( ',' namespaceFileName )* ';' -> namespaceFileName ( namespaceFileName )* )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:117:32: namespaceFileName ( ',' namespaceFileName )* ';'
			{
			pushFollow(FOLLOW_namespaceFileName_in_namespaceFileNameList1370);
			namespaceFileName66=namespaceFileName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespaceFileName.add(namespaceFileName66.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:117:50: ( ',' namespaceFileName )*
			loop17:
			while (true) {
				int alt17=2;
				int LA17_0 = input.LA(1);
				if ( (LA17_0==COMMA) ) {
					alt17=1;
				}

				switch (alt17) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:117:51: ',' namespaceFileName
					{
					char_literal67=(Token)match(input,COMMA,FOLLOW_COMMA_in_namespaceFileNameList1373); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(char_literal67);

					pushFollow(FOLLOW_namespaceFileName_in_namespaceFileNameList1375);
					namespaceFileName68=namespaceFileName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_namespaceFileName.add(namespaceFileName68.getTree());
					}
					break;

				default :
					break loop17;
				}
			}

			char_literal69=(Token)match(input,SEMI,FOLLOW_SEMI_in_namespaceFileNameList1379); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal69);

			// AST REWRITE
			// elements: namespaceFileName, namespaceFileName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 117:79: -> namespaceFileName ( namespaceFileName )*
			{
				adaptor.addChild(root_0, stream_namespaceFileName.nextTree());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:117:100: ( namespaceFileName )*
				while ( stream_namespaceFileName.hasNext() ) {
					adaptor.addChild(root_0, stream_namespaceFileName.nextTree());
				}
				stream_namespaceFileName.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 20, namespaceFileNameList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "namespaceFileNameList"


	public static class namespaceFileName_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "namespaceFileName"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:119:1: namespaceFileName : namespaceName ( 'in' QuotedString )? -> ^( namespaceName ( QuotedString )? ) ;
	public final DelphiParser.namespaceFileName_return namespaceFileName() throws RecognitionException {
		DelphiParser.namespaceFileName_return retval = new DelphiParser.namespaceFileName_return();
		retval.start = input.LT(1);
		int namespaceFileName_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal71=null;
		Token QuotedString72=null;
		ParserRuleReturnScope namespaceName70 =null;

		Object string_literal71_tree=null;
		Object QuotedString72_tree=null;
		RewriteRuleTokenStream stream_IN=new RewriteRuleTokenStream(adaptor,"token IN");
		RewriteRuleTokenStream stream_QuotedString=new RewriteRuleTokenStream(adaptor,"token QuotedString");
		RewriteRuleSubtreeStream stream_namespaceName=new RewriteRuleSubtreeStream(adaptor,"rule namespaceName");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:119:30: ( namespaceName ( 'in' QuotedString )? -> ^( namespaceName ( QuotedString )? ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:119:32: namespaceName ( 'in' QuotedString )?
			{
			pushFollow(FOLLOW_namespaceName_in_namespaceFileName1436);
			namespaceName70=namespaceName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespaceName.add(namespaceName70.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:119:46: ( 'in' QuotedString )?
			int alt18=2;
			int LA18_0 = input.LA(1);
			if ( (LA18_0==IN) ) {
				alt18=1;
			}
			switch (alt18) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:119:47: 'in' QuotedString
					{
					string_literal71=(Token)match(input,IN,FOLLOW_IN_in_namespaceFileName1439); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_IN.add(string_literal71);

					QuotedString72=(Token)match(input,QuotedString,FOLLOW_QuotedString_in_namespaceFileName1441); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_QuotedString.add(QuotedString72);

					}
					break;

			}

			// AST REWRITE
			// elements: namespaceName, QuotedString
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 119:67: -> ^( namespaceName ( QuotedString )? )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:119:70: ^( namespaceName ( QuotedString )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_namespaceName.nextNode(), root_1);
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:119:86: ( QuotedString )?
				if ( stream_QuotedString.hasNext() ) {
					adaptor.addChild(root_1, stream_QuotedString.nextNode());
				}
				stream_QuotedString.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 21, namespaceFileName_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "namespaceFileName"


	public static class namespaceNameList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "namespaceNameList"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:121:1: namespaceNameList : namespaceName ( ',' namespaceName )* ';' -> namespaceName ( namespaceName )* ;
	public final DelphiParser.namespaceNameList_return namespaceNameList() throws RecognitionException {
		DelphiParser.namespaceNameList_return retval = new DelphiParser.namespaceNameList_return();
		retval.start = input.LT(1);
		int namespaceNameList_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal74=null;
		Token char_literal76=null;
		ParserRuleReturnScope namespaceName73 =null;
		ParserRuleReturnScope namespaceName75 =null;

		Object char_literal74_tree=null;
		Object char_literal76_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_namespaceName=new RewriteRuleSubtreeStream(adaptor,"rule namespaceName");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:121:30: ( namespaceName ( ',' namespaceName )* ';' -> namespaceName ( namespaceName )* )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:121:32: namespaceName ( ',' namespaceName )* ';'
			{
			pushFollow(FOLLOW_namespaceName_in_namespaceNameList1502);
			namespaceName73=namespaceName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespaceName.add(namespaceName73.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:121:46: ( ',' namespaceName )*
			loop19:
			while (true) {
				int alt19=2;
				int LA19_0 = input.LA(1);
				if ( (LA19_0==COMMA) ) {
					alt19=1;
				}

				switch (alt19) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:121:47: ',' namespaceName
					{
					char_literal74=(Token)match(input,COMMA,FOLLOW_COMMA_in_namespaceNameList1505); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(char_literal74);

					pushFollow(FOLLOW_namespaceName_in_namespaceNameList1507);
					namespaceName75=namespaceName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_namespaceName.add(namespaceName75.getTree());
					}
					break;

				default :
					break loop19;
				}
			}

			char_literal76=(Token)match(input,SEMI,FOLLOW_SEMI_in_namespaceNameList1511); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal76);

			// AST REWRITE
			// elements: namespaceName, namespaceName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 121:71: -> namespaceName ( namespaceName )*
			{
				adaptor.addChild(root_0, stream_namespaceName.nextTree());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:121:88: ( namespaceName )*
				while ( stream_namespaceName.hasNext() ) {
					adaptor.addChild(root_0, stream_namespaceName.nextTree());
				}
				stream_namespaceName.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 22, namespaceNameList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "namespaceNameList"


	public static class block_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "block"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:1: block : ( declSection )* ( blockBody )? ;
	public final DelphiParser.block_return block() throws RecognitionException {
		DelphiParser.block_return retval = new DelphiParser.block_return();
		retval.start = input.LT(1);
		int block_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope declSection77 =null;
		ParserRuleReturnScope blockBody78 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:30: ( ( declSection )* ( blockBody )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:32: ( declSection )* ( blockBody )?
			{
			root_0 = (Object)adaptor.nil();


			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:32: ( declSection )*
			loop20:
			while (true) {
				int alt20=2;
				switch ( input.LA(1) ) {
				case LABEL:
					{
					int LA20_2 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case CONST:
				case RESOURCESTRING:
					{
					int LA20_3 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case TYPE:
					{
					int LA20_4 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case THREADVAR:
				case VAR:
					{
					int LA20_5 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case PROCEDURE:
					{
					int LA20_6 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case FUNCTION:
					{
					int LA20_7 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case LBRACK:
					{
					int LA20_8 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case CLASS:
					{
					int LA20_9 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case CONSTRUCTOR:
				case DESTRUCTOR:
					{
					int LA20_10 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case EXPORTS:
					{
					int LA20_11 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				}
				switch (alt20) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:33: declSection
					{
					pushFollow(FOLLOW_declSection_in_block1584);
					declSection77=declSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, declSection77.getTree());

					}
					break;

				default :
					break loop20;
				}
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:47: ( blockBody )?
			int alt21=2;
			int LA21_0 = input.LA(1);
			if ( (LA21_0==BEGIN) ) {
				int LA21_1 = input.LA(2);
				if ( (synpred24_Delphi()) ) {
					alt21=1;
				}
			}
			else if ( (LA21_0==ASM) ) {
				int LA21_2 = input.LA(2);
				if ( (synpred24_Delphi()) ) {
					alt21=1;
				}
			}
			switch (alt21) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:48: blockBody
					{
					pushFollow(FOLLOW_blockBody_in_block1589);
					blockBody78=blockBody();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, blockBody78.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 23, block_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "block"


	public static class blockBody_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "blockBody"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:128:1: blockBody : ( compoundStatement | assemblerStatement );
	public final DelphiParser.blockBody_return blockBody() throws RecognitionException {
		DelphiParser.blockBody_return retval = new DelphiParser.blockBody_return();
		retval.start = input.LT(1);
		int blockBody_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope compoundStatement79 =null;
		ParserRuleReturnScope assemblerStatement80 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:128:30: ( compoundStatement | assemblerStatement )
			int alt22=2;
			int LA22_0 = input.LA(1);
			if ( (LA22_0==BEGIN) ) {
				alt22=1;
			}
			else if ( (LA22_0==ASM) ) {
				alt22=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 22, 0, input);
				throw nvae;
			}

			switch (alt22) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:128:32: compoundStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_compoundStatement_in_blockBody1647);
					compoundStatement79=compoundStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, compoundStatement79.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:129:32: assemblerStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_assemblerStatement_in_blockBody1680);
					assemblerStatement80=assemblerStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, assemblerStatement80.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 24, blockBody_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "blockBody"


	public static class declSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "declSection"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:131:1: declSection : ( labelDeclSection | constSection | typeSection | varSection | exportedProcHeading | methodDecl | procDecl | exportsSection );
	public final DelphiParser.declSection_return declSection() throws RecognitionException {
		DelphiParser.declSection_return retval = new DelphiParser.declSection_return();
		retval.start = input.LT(1);
		int declSection_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope labelDeclSection81 =null;
		ParserRuleReturnScope constSection82 =null;
		ParserRuleReturnScope typeSection83 =null;
		ParserRuleReturnScope varSection84 =null;
		ParserRuleReturnScope exportedProcHeading85 =null;
		ParserRuleReturnScope methodDecl86 =null;
		ParserRuleReturnScope procDecl87 =null;
		ParserRuleReturnScope exportsSection88 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:131:30: ( labelDeclSection | constSection | typeSection | varSection | exportedProcHeading | methodDecl | procDecl | exportsSection )
			int alt23=8;
			switch ( input.LA(1) ) {
			case LABEL:
				{
				alt23=1;
				}
				break;
			case CONST:
			case RESOURCESTRING:
				{
				alt23=2;
				}
				break;
			case TYPE:
				{
				alt23=3;
				}
				break;
			case THREADVAR:
			case VAR:
				{
				alt23=4;
				}
				break;
			case PROCEDURE:
				{
				int LA23_5 = input.LA(2);
				if ( (synpred30_Delphi()) ) {
					alt23=5;
				}
				else if ( (synpred31_Delphi()) ) {
					alt23=6;
				}
				else if ( (synpred32_Delphi()) ) {
					alt23=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 23, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case FUNCTION:
				{
				int LA23_6 = input.LA(2);
				if ( (synpred30_Delphi()) ) {
					alt23=5;
				}
				else if ( (synpred31_Delphi()) ) {
					alt23=6;
				}
				else if ( (synpred32_Delphi()) ) {
					alt23=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 23, 6, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LBRACK:
				{
				int LA23_7 = input.LA(2);
				if ( (synpred31_Delphi()) ) {
					alt23=6;
				}
				else if ( (synpred32_Delphi()) ) {
					alt23=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 23, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CLASS:
			case CONSTRUCTOR:
			case DESTRUCTOR:
				{
				alt23=6;
				}
				break;
			case EXPORTS:
				{
				alt23=8;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 23, 0, input);
				throw nvae;
			}
			switch (alt23) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:131:32: labelDeclSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_labelDeclSection_in_declSection1734);
					labelDeclSection81=labelDeclSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, labelDeclSection81.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:132:32: constSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_constSection_in_declSection1767);
					constSection82=constSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constSection82.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:133:32: typeSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_typeSection_in_declSection1800);
					typeSection83=typeSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeSection83.getTree());

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:134:32: varSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_varSection_in_declSection1833);
					varSection84=varSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, varSection84.getTree());

					}
					break;
				case 5 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:135:32: exportedProcHeading
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_exportedProcHeading_in_declSection1866);
					exportedProcHeading85=exportedProcHeading();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exportedProcHeading85.getTree());

					}
					break;
				case 6 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:136:32: methodDecl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_methodDecl_in_declSection1899);
					methodDecl86=methodDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, methodDecl86.getTree());

					}
					break;
				case 7 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:137:32: procDecl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_procDecl_in_declSection1932);
					procDecl87=procDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, procDecl87.getTree());

					}
					break;
				case 8 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:138:32: exportsSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_exportsSection_in_declSection1965);
					exportsSection88=exportsSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exportsSection88.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 25, declSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "declSection"


	public static class interfaceDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "interfaceDecl"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:140:1: interfaceDecl : ( constSection | typeSection | varSection | exportedProcHeading | exportsSection | procDecl | methodDecl );
	public final DelphiParser.interfaceDecl_return interfaceDecl() throws RecognitionException {
		DelphiParser.interfaceDecl_return retval = new DelphiParser.interfaceDecl_return();
		retval.start = input.LT(1);
		int interfaceDecl_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope constSection89 =null;
		ParserRuleReturnScope typeSection90 =null;
		ParserRuleReturnScope varSection91 =null;
		ParserRuleReturnScope exportedProcHeading92 =null;
		ParserRuleReturnScope exportsSection93 =null;
		ParserRuleReturnScope procDecl94 =null;
		ParserRuleReturnScope methodDecl95 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:140:30: ( constSection | typeSection | varSection | exportedProcHeading | exportsSection | procDecl | methodDecl )
			int alt24=7;
			switch ( input.LA(1) ) {
			case CONST:
			case RESOURCESTRING:
				{
				alt24=1;
				}
				break;
			case TYPE:
				{
				alt24=2;
				}
				break;
			case THREADVAR:
			case VAR:
				{
				alt24=3;
				}
				break;
			case PROCEDURE:
				{
				int LA24_4 = input.LA(2);
				if ( (synpred36_Delphi()) ) {
					alt24=4;
				}
				else if ( (synpred38_Delphi()) ) {
					alt24=6;
				}
				else if ( (true) ) {
					alt24=7;
				}

				}
				break;
			case FUNCTION:
				{
				int LA24_5 = input.LA(2);
				if ( (synpred36_Delphi()) ) {
					alt24=4;
				}
				else if ( (synpred38_Delphi()) ) {
					alt24=6;
				}
				else if ( (true) ) {
					alt24=7;
				}

				}
				break;
			case EXPORTS:
				{
				alt24=5;
				}
				break;
			case LBRACK:
				{
				int LA24_7 = input.LA(2);
				if ( (synpred38_Delphi()) ) {
					alt24=6;
				}
				else if ( (true) ) {
					alt24=7;
				}

				}
				break;
			case CLASS:
			case CONSTRUCTOR:
			case DESTRUCTOR:
				{
				alt24=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 24, 0, input);
				throw nvae;
			}
			switch (alt24) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:140:32: constSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_constSection_in_interfaceDecl2017);
					constSection89=constSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constSection89.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:141:32: typeSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_typeSection_in_interfaceDecl2050);
					typeSection90=typeSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeSection90.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:142:32: varSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_varSection_in_interfaceDecl2083);
					varSection91=varSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, varSection91.getTree());

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:143:32: exportedProcHeading
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_exportedProcHeading_in_interfaceDecl2116);
					exportedProcHeading92=exportedProcHeading();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exportedProcHeading92.getTree());

					}
					break;
				case 5 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:144:32: exportsSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_exportsSection_in_interfaceDecl2149);
					exportsSection93=exportsSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exportsSection93.getTree());

					}
					break;
				case 6 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:145:32: procDecl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_procDecl_in_interfaceDecl2182);
					procDecl94=procDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, procDecl94.getTree());

					}
					break;
				case 7 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:146:32: methodDecl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_methodDecl_in_interfaceDecl2215);
					methodDecl95=methodDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, methodDecl95.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 26, interfaceDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interfaceDecl"


	public static class labelDeclSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "labelDeclSection"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:148:1: labelDeclSection : 'label' label ( ',' label )* ';' ;
	public final DelphiParser.labelDeclSection_return labelDeclSection() throws RecognitionException {
		DelphiParser.labelDeclSection_return retval = new DelphiParser.labelDeclSection_return();
		retval.start = input.LT(1);
		int labelDeclSection_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal96=null;
		Token char_literal98=null;
		Token char_literal100=null;
		ParserRuleReturnScope label97 =null;
		ParserRuleReturnScope label99 =null;

		Object string_literal96_tree=null;
		Object char_literal98_tree=null;
		Object char_literal100_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:148:30: ( 'label' label ( ',' label )* ';' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:148:32: 'label' label ( ',' label )* ';'
			{
			root_0 = (Object)adaptor.nil();


			string_literal96=(Token)match(input,LABEL,FOLLOW_LABEL_in_labelDeclSection2264); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal96_tree = (Object)adaptor.create(string_literal96);
			adaptor.addChild(root_0, string_literal96_tree);
			}

			pushFollow(FOLLOW_label_in_labelDeclSection2266);
			label97=label();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, label97.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:148:46: ( ',' label )*
			loop25:
			while (true) {
				int alt25=2;
				int LA25_0 = input.LA(1);
				if ( (LA25_0==COMMA) ) {
					alt25=1;
				}

				switch (alt25) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:148:47: ',' label
					{
					char_literal98=(Token)match(input,COMMA,FOLLOW_COMMA_in_labelDeclSection2269); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal98_tree = (Object)adaptor.create(char_literal98);
					adaptor.addChild(root_0, char_literal98_tree);
					}

					pushFollow(FOLLOW_label_in_labelDeclSection2271);
					label99=label();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, label99.getTree());

					}
					break;

				default :
					break loop25;
				}
			}

			char_literal100=(Token)match(input,SEMI,FOLLOW_SEMI_in_labelDeclSection2275); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal100_tree = (Object)adaptor.create(char_literal100);
			adaptor.addChild(root_0, char_literal100_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 27, labelDeclSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "labelDeclSection"


	public static class constSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "constSection"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:1: constSection : constKey ( constDeclaration )* -> ^( constKey ( constDeclaration )* ) ;
	public final DelphiParser.constSection_return constSection() throws RecognitionException {
		DelphiParser.constSection_return retval = new DelphiParser.constSection_return();
		retval.start = input.LT(1);
		int constSection_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope constKey101 =null;
		ParserRuleReturnScope constDeclaration102 =null;

		RewriteRuleSubtreeStream stream_constDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule constDeclaration");
		RewriteRuleSubtreeStream stream_constKey=new RewriteRuleSubtreeStream(adaptor,"rule constKey");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:30: ( constKey ( constDeclaration )* -> ^( constKey ( constDeclaration )* ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:32: constKey ( constDeclaration )*
			{
			pushFollow(FOLLOW_constKey_in_constSection2328);
			constKey101=constKey();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_constKey.add(constKey101.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:41: ( constDeclaration )*
			loop26:
			while (true) {
				int alt26=2;
				alt26 = dfa26.predict(input);
				switch (alt26) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:42: constDeclaration
					{
					pushFollow(FOLLOW_constDeclaration_in_constSection2331);
					constDeclaration102=constDeclaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_constDeclaration.add(constDeclaration102.getTree());
					}
					break;

				default :
					break loop26;
				}
			}

			// AST REWRITE
			// elements: constDeclaration, constKey
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 150:61: -> ^( constKey ( constDeclaration )* )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:64: ^( constKey ( constDeclaration )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_constKey.nextNode(), root_1);
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:75: ( constDeclaration )*
				while ( stream_constDeclaration.hasNext() ) {
					adaptor.addChild(root_1, stream_constDeclaration.nextTree());
				}
				stream_constDeclaration.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 28, constSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "constSection"


	public static class constKey_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "constKey"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:152:1: constKey : ( 'const' | 'resourcestring' );
	public final DelphiParser.constKey_return constKey() throws RecognitionException {
		DelphiParser.constKey_return retval = new DelphiParser.constKey_return();
		retval.start = input.LT(1);
		int constKey_StartIndex = input.index();

		Object root_0 = null;

		Token set103=null;

		Object set103_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:152:30: ( 'const' | 'resourcestring' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set103=input.LT(1);
			if ( input.LA(1)==CONST||input.LA(1)==RESOURCESTRING ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set103));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 29, constKey_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "constKey"


	public static class constDeclaration_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "constDeclaration"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:1: constDeclaration : ( customAttribute )? ident ( ':' typeDecl )? '=' constExpression ( hintingDirective )* ';' -> ident ( typeDecl )? '=' constExpression ;
	public final DelphiParser.constDeclaration_return constDeclaration() throws RecognitionException {
		DelphiParser.constDeclaration_return retval = new DelphiParser.constDeclaration_return();
		retval.start = input.LT(1);
		int constDeclaration_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal106=null;
		Token char_literal108=null;
		Token char_literal111=null;
		ParserRuleReturnScope customAttribute104 =null;
		ParserRuleReturnScope ident105 =null;
		ParserRuleReturnScope typeDecl107 =null;
		ParserRuleReturnScope constExpression109 =null;
		ParserRuleReturnScope hintingDirective110 =null;

		Object char_literal106_tree=null;
		Object char_literal108_tree=null;
		Object char_literal111_tree=null;
		RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_constExpression=new RewriteRuleSubtreeStream(adaptor,"rule constExpression");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:30: ( ( customAttribute )? ident ( ':' typeDecl )? '=' constExpression ( hintingDirective )* ';' -> ident ( typeDecl )? '=' constExpression )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:32: ( customAttribute )? ident ( ':' typeDecl )? '=' constExpression ( hintingDirective )* ';'
			{
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:32: ( customAttribute )?
			int alt27=2;
			switch ( input.LA(1) ) {
				case LBRACK:
					{
					alt27=1;
					}
					break;
				case TkIdentifier:
					{
					int LA27_2 = input.LA(2);
					if ( (synpred42_Delphi()) ) {
						alt27=1;
					}
					}
					break;
				case 198:
					{
					int LA27_3 = input.LA(2);
					if ( (synpred42_Delphi()) ) {
						alt27=1;
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case EXIT:
				case EXPORT:
				case FINAL:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STATIC:
				case STORED:
				case STRICT:
				case STRING:
				case UNSAFE:
				case VARIANT:
				case WRITE:
					{
					int LA27_4 = input.LA(2);
					if ( (synpred42_Delphi()) ) {
						alt27=1;
					}
					}
					break;
			}
			switch (alt27) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:33: customAttribute
					{
					pushFollow(FOLLOW_customAttribute_in_constDeclaration2486);
					customAttribute104=customAttribute();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute104.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_ident_in_constDeclaration2490);
			ident105=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_ident.add(ident105.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:57: ( ':' typeDecl )?
			int alt28=2;
			int LA28_0 = input.LA(1);
			if ( (LA28_0==COLON) ) {
				alt28=1;
			}
			switch (alt28) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:58: ':' typeDecl
					{
					char_literal106=(Token)match(input,COLON,FOLLOW_COLON_in_constDeclaration2493); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(char_literal106);

					pushFollow(FOLLOW_typeDecl_in_constDeclaration2495);
					typeDecl107=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl107.getTree());
					}
					break;

			}

			char_literal108=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_constDeclaration2499); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_EQUAL.add(char_literal108);

			pushFollow(FOLLOW_constExpression_in_constDeclaration2501);
			constExpression109=constExpression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_constExpression.add(constExpression109.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:93: ( hintingDirective )*
			loop29:
			while (true) {
				int alt29=2;
				int LA29_0 = input.LA(1);
				if ( (LA29_0==DEPRECATED||LA29_0==EXPERIMENTAL||LA29_0==LIBRARY||LA29_0==PLATFORM) ) {
					alt29=1;
				}

				switch (alt29) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:94: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_constDeclaration2504);
					hintingDirective110=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective110.getTree());
					}
					break;

				default :
					break loop29;
				}
			}

			char_literal111=(Token)match(input,SEMI,FOLLOW_SEMI_in_constDeclaration2508); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal111);

			// AST REWRITE
			// elements: EQUAL, typeDecl, ident, constExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 155:117: -> ident ( typeDecl )? '=' constExpression
			{
				adaptor.addChild(root_0, stream_ident.nextTree());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:126: ( typeDecl )?
				if ( stream_typeDecl.hasNext() ) {
					adaptor.addChild(root_0, stream_typeDecl.nextTree());
				}
				stream_typeDecl.reset();

				adaptor.addChild(root_0, stream_EQUAL.nextNode());
				adaptor.addChild(root_0, stream_constExpression.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 30, constDeclaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "constDeclaration"


	public static class typeSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "typeSection"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:1: typeSection : 'type' typeDeclaration ( typeDeclaration )* -> ^( 'type' typeDeclaration ( typeDeclaration )* ) ;
	public final DelphiParser.typeSection_return typeSection() throws RecognitionException {
		DelphiParser.typeSection_return retval = new DelphiParser.typeSection_return();
		retval.start = input.LT(1);
		int typeSection_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal112=null;
		ParserRuleReturnScope typeDeclaration113 =null;
		ParserRuleReturnScope typeDeclaration114 =null;

		Object string_literal112_tree=null;
		RewriteRuleTokenStream stream_TYPE=new RewriteRuleTokenStream(adaptor,"token TYPE");
		RewriteRuleSubtreeStream stream_typeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule typeDeclaration");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:30: ( 'type' typeDeclaration ( typeDeclaration )* -> ^( 'type' typeDeclaration ( typeDeclaration )* ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:32: 'type' typeDeclaration ( typeDeclaration )*
			{
			string_literal112=(Token)match(input,TYPE,FOLLOW_TYPE_in_typeSection2575); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_TYPE.add(string_literal112);

			pushFollow(FOLLOW_typeDeclaration_in_typeSection2577);
			typeDeclaration113=typeDeclaration();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeDeclaration.add(typeDeclaration113.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:55: ( typeDeclaration )*
			loop30:
			while (true) {
				int alt30=2;
				alt30 = dfa30.predict(input);
				switch (alt30) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:56: typeDeclaration
					{
					pushFollow(FOLLOW_typeDeclaration_in_typeSection2580);
					typeDeclaration114=typeDeclaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_typeDeclaration.add(typeDeclaration114.getTree());
					}
					break;

				default :
					break loop30;
				}
			}

			// AST REWRITE
			// elements: typeDeclaration, typeDeclaration, TYPE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 157:74: -> ^( 'type' typeDeclaration ( typeDeclaration )* )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:77: ^( 'type' typeDeclaration ( typeDeclaration )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_TYPE.nextNode(), root_1);
				adaptor.addChild(root_1, stream_typeDeclaration.nextTree());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:102: ( typeDeclaration )*
				while ( stream_typeDeclaration.hasNext() ) {
					adaptor.addChild(root_1, stream_typeDeclaration.nextTree());
				}
				stream_typeDeclaration.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 31, typeSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "typeSection"


	public static class typeDeclaration_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "typeDeclaration"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:1: typeDeclaration : ( customAttribute )? genericTypeIdent '=' typeDecl ( hintingDirective )* ';' -> ^( TkNewType ( customAttribute )? ^( genericTypeIdent typeDecl ( hintingDirective )* ) ) ;
	public final DelphiParser.typeDeclaration_return typeDeclaration() throws RecognitionException {
		DelphiParser.typeDeclaration_return retval = new DelphiParser.typeDeclaration_return();
		retval.start = input.LT(1);
		int typeDeclaration_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal117=null;
		Token char_literal120=null;
		ParserRuleReturnScope customAttribute115 =null;
		ParserRuleReturnScope genericTypeIdent116 =null;
		ParserRuleReturnScope typeDecl118 =null;
		ParserRuleReturnScope hintingDirective119 =null;

		Object char_literal117_tree=null;
		Object char_literal120_tree=null;
		RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_genericTypeIdent=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeIdent");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:30: ( ( customAttribute )? genericTypeIdent '=' typeDecl ( hintingDirective )* ';' -> ^( TkNewType ( customAttribute )? ^( genericTypeIdent typeDecl ( hintingDirective )* ) ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:32: ( customAttribute )? genericTypeIdent '=' typeDecl ( hintingDirective )* ';'
			{
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:32: ( customAttribute )?
			int alt31=2;
			switch ( input.LA(1) ) {
				case LBRACK:
					{
					alt31=1;
					}
					break;
				case TkIdentifier:
					{
					int LA31_2 = input.LA(2);
					if ( (synpred46_Delphi()) ) {
						alt31=1;
					}
					}
					break;
				case 198:
					{
					int LA31_3 = input.LA(2);
					if ( (synpred46_Delphi()) ) {
						alt31=1;
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case EXIT:
				case EXPORT:
				case FINAL:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STATIC:
				case STORED:
				case STRICT:
				case STRING:
				case UNSAFE:
				case VARIANT:
				case WRITE:
					{
					int LA31_4 = input.LA(2);
					if ( (synpred46_Delphi()) ) {
						alt31=1;
					}
					}
					break;
			}
			switch (alt31) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:33: customAttribute
					{
					pushFollow(FOLLOW_customAttribute_in_typeDeclaration2646);
					customAttribute115=customAttribute();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute115.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_genericTypeIdent_in_typeDeclaration2650);
			genericTypeIdent116=genericTypeIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_genericTypeIdent.add(genericTypeIdent116.getTree());
			char_literal117=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_typeDeclaration2652); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_EQUAL.add(char_literal117);

			pushFollow(FOLLOW_typeDecl_in_typeDeclaration2654);
			typeDecl118=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl118.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:81: ( hintingDirective )*
			loop32:
			while (true) {
				int alt32=2;
				int LA32_0 = input.LA(1);
				if ( (LA32_0==DEPRECATED||LA32_0==EXPERIMENTAL||LA32_0==LIBRARY||LA32_0==PLATFORM) ) {
					alt32=1;
				}

				switch (alt32) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:82: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_typeDeclaration2657);
					hintingDirective119=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective119.getTree());
					}
					break;

				default :
					break loop32;
				}
			}

			char_literal120=(Token)match(input,SEMI,FOLLOW_SEMI_in_typeDeclaration2661); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal120);

			// AST REWRITE
			// elements: customAttribute, typeDecl, genericTypeIdent, hintingDirective
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 159:105: -> ^( TkNewType ( customAttribute )? ^( genericTypeIdent typeDecl ( hintingDirective )* ) )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:108: ^( TkNewType ( customAttribute )? ^( genericTypeIdent typeDecl ( hintingDirective )* ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkNewType, "TkNewType"), root_1);
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:120: ( customAttribute )?
				if ( stream_customAttribute.hasNext() ) {
					adaptor.addChild(root_1, stream_customAttribute.nextTree());
				}
				stream_customAttribute.reset();

				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:139: ^( genericTypeIdent typeDecl ( hintingDirective )* )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot(stream_genericTypeIdent.nextNode(), root_2);
				adaptor.addChild(root_2, stream_typeDecl.nextTree());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:167: ( hintingDirective )*
				while ( stream_hintingDirective.hasNext() ) {
					adaptor.addChild(root_2, stream_hintingDirective.nextTree());
				}
				stream_hintingDirective.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 32, typeDeclaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "typeDeclaration"


	public static class varSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "varSection"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:1: varSection : varKey varDeclaration ( varDeclaration )* -> ^( varKey varDeclaration ( varDeclaration )* ) ;
	public final DelphiParser.varSection_return varSection() throws RecognitionException {
		DelphiParser.varSection_return retval = new DelphiParser.varSection_return();
		retval.start = input.LT(1);
		int varSection_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope varKey121 =null;
		ParserRuleReturnScope varDeclaration122 =null;
		ParserRuleReturnScope varDeclaration123 =null;

		RewriteRuleSubtreeStream stream_varDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule varDeclaration");
		RewriteRuleSubtreeStream stream_varKey=new RewriteRuleSubtreeStream(adaptor,"rule varKey");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:30: ( varKey varDeclaration ( varDeclaration )* -> ^( varKey varDeclaration ( varDeclaration )* ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:32: varKey varDeclaration ( varDeclaration )*
			{
			pushFollow(FOLLOW_varKey_in_varSection2738);
			varKey121=varKey();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_varKey.add(varKey121.getTree());
			pushFollow(FOLLOW_varDeclaration_in_varSection2740);
			varDeclaration122=varDeclaration();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_varDeclaration.add(varDeclaration122.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:54: ( varDeclaration )*
			loop33:
			while (true) {
				int alt33=2;
				alt33 = dfa33.predict(input);
				switch (alt33) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:55: varDeclaration
					{
					pushFollow(FOLLOW_varDeclaration_in_varSection2743);
					varDeclaration123=varDeclaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_varDeclaration.add(varDeclaration123.getTree());
					}
					break;

				default :
					break loop33;
				}
			}

			// AST REWRITE
			// elements: varDeclaration, varKey, varDeclaration
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 161:72: -> ^( varKey varDeclaration ( varDeclaration )* )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:75: ^( varKey varDeclaration ( varDeclaration )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_varKey.nextNode(), root_1);
				adaptor.addChild(root_1, stream_varDeclaration.nextTree());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:99: ( varDeclaration )*
				while ( stream_varDeclaration.hasNext() ) {
					adaptor.addChild(root_1, stream_varDeclaration.nextTree());
				}
				stream_varDeclaration.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 33, varSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "varSection"


	public static class varKey_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "varKey"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:1: varKey : ( 'var' | 'threadvar' );
	public final DelphiParser.varKey_return varKey() throws RecognitionException {
		DelphiParser.varKey_return retval = new DelphiParser.varKey_return();
		retval.start = input.LT(1);
		int varKey_StartIndex = input.index();

		Object root_0 = null;

		Token set124=null;

		Object set124_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:30: ( 'var' | 'threadvar' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set124=input.LT(1);
			if ( input.LA(1)==THREADVAR||input.LA(1)==VAR ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set124));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 34, varKey_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "varKey"


	public static class varDeclaration_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "varDeclaration"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:1: varDeclaration : ( customAttribute )? identListFlat ':' typeDecl ( varValueSpec )? ( hintingDirective )* ';' -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType typeDecl ) ;
	public final DelphiParser.varDeclaration_return varDeclaration() throws RecognitionException {
		DelphiParser.varDeclaration_return retval = new DelphiParser.varDeclaration_return();
		retval.start = input.LT(1);
		int varDeclaration_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal127=null;
		Token char_literal131=null;
		ParserRuleReturnScope customAttribute125 =null;
		ParserRuleReturnScope identListFlat126 =null;
		ParserRuleReturnScope typeDecl128 =null;
		ParserRuleReturnScope varValueSpec129 =null;
		ParserRuleReturnScope hintingDirective130 =null;

		Object char_literal127_tree=null;
		Object char_literal131_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_identListFlat=new RewriteRuleSubtreeStream(adaptor,"rule identListFlat");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_varValueSpec=new RewriteRuleSubtreeStream(adaptor,"rule varValueSpec");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:30: ( ( customAttribute )? identListFlat ':' typeDecl ( varValueSpec )? ( hintingDirective )* ';' -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType typeDecl ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:32: ( customAttribute )? identListFlat ':' typeDecl ( varValueSpec )? ( hintingDirective )* ';'
			{
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:32: ( customAttribute )?
			int alt34=2;
			switch ( input.LA(1) ) {
				case LBRACK:
					{
					alt34=1;
					}
					break;
				case TkIdentifier:
					{
					int LA34_2 = input.LA(2);
					if ( (synpred50_Delphi()) ) {
						alt34=1;
					}
					}
					break;
				case 198:
					{
					int LA34_3 = input.LA(2);
					if ( (synpred50_Delphi()) ) {
						alt34=1;
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case EXIT:
				case EXPORT:
				case FINAL:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STATIC:
				case STORED:
				case STRICT:
				case STRING:
				case UNSAFE:
				case VARIANT:
				case WRITE:
					{
					int LA34_4 = input.LA(2);
					if ( (synpred50_Delphi()) ) {
						alt34=1;
					}
					}
					break;
			}
			switch (alt34) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:33: customAttribute
					{
					pushFollow(FOLLOW_customAttribute_in_varDeclaration2903);
					customAttribute125=customAttribute();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute125.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_identListFlat_in_varDeclaration2907);
			identListFlat126=identListFlat();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identListFlat.add(identListFlat126.getTree());
			char_literal127=(Token)match(input,COLON,FOLLOW_COLON_in_varDeclaration2909); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_COLON.add(char_literal127);

			pushFollow(FOLLOW_typeDecl_in_varDeclaration2911);
			typeDecl128=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl128.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:78: ( varValueSpec )?
			int alt35=2;
			int LA35_0 = input.LA(1);
			if ( (LA35_0==ABSOLUTE||LA35_0==EQUAL) ) {
				alt35=1;
			}
			switch (alt35) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:79: varValueSpec
					{
					pushFollow(FOLLOW_varValueSpec_in_varDeclaration2914);
					varValueSpec129=varValueSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_varValueSpec.add(varValueSpec129.getTree());
					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:94: ( hintingDirective )*
			loop36:
			while (true) {
				int alt36=2;
				int LA36_0 = input.LA(1);
				if ( (LA36_0==DEPRECATED||LA36_0==EXPERIMENTAL||LA36_0==LIBRARY||LA36_0==PLATFORM) ) {
					alt36=1;
				}

				switch (alt36) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:95: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_varDeclaration2919);
					hintingDirective130=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective130.getTree());
					}
					break;

				default :
					break loop36;
				}
			}

			char_literal131=(Token)match(input,SEMI,FOLLOW_SEMI_in_varDeclaration2923); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal131);

			// AST REWRITE
			// elements: customAttribute, identListFlat, typeDecl
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 167:118: -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType typeDecl )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:121: ( customAttribute )?
				if ( stream_customAttribute.hasNext() ) {
					adaptor.addChild(root_0, stream_customAttribute.nextTree());
				}
				stream_customAttribute.reset();

				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:140: ^( TkVariableIdents identListFlat )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableIdents, "TkVariableIdents"), root_1);
				adaptor.addChild(root_1, stream_identListFlat.nextTree());
				adaptor.addChild(root_0, root_1);
				}

				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:174: ^( TkVariableType typeDecl )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableType, "TkVariableType"), root_1);
				adaptor.addChild(root_1, stream_typeDecl.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 35, varDeclaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "varDeclaration"


	public static class varValueSpec_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "varValueSpec"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:1: varValueSpec : ( 'absolute' ident | 'absolute' constExpression | '=' constExpression );
	public final DelphiParser.varValueSpec_return varValueSpec() throws RecognitionException {
		DelphiParser.varValueSpec_return retval = new DelphiParser.varValueSpec_return();
		retval.start = input.LT(1);
		int varValueSpec_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal132=null;
		Token string_literal134=null;
		Token char_literal136=null;
		ParserRuleReturnScope ident133 =null;
		ParserRuleReturnScope constExpression135 =null;
		ParserRuleReturnScope constExpression137 =null;

		Object string_literal132_tree=null;
		Object string_literal134_tree=null;
		Object char_literal136_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:30: ( 'absolute' ident | 'absolute' constExpression | '=' constExpression )
			int alt37=3;
			int LA37_0 = input.LA(1);
			if ( (LA37_0==ABSOLUTE) ) {
				switch ( input.LA(2) ) {
				case TkIdentifier:
					{
					int LA37_3 = input.LA(3);
					if ( (synpred53_Delphi()) ) {
						alt37=1;
					}
					else if ( (synpred54_Delphi()) ) {
						alt37=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 37, 3, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case 198:
					{
					int LA37_4 = input.LA(3);
					if ( (LA37_4==TkIdentifier) ) {
						int LA37_8 = input.LA(4);
						if ( (synpred53_Delphi()) ) {
							alt37=1;
						}
						else if ( (synpred54_Delphi()) ) {
							alt37=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 37, 8, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}
					else if ( ((LA37_4 >= ABSOLUTE && LA37_4 <= ASSEMBLY)||LA37_4==AT||LA37_4==AUTOMATED||(LA37_4 >= BEGIN && LA37_4 <= CLASS)||(LA37_4 >= CONST && LA37_4 <= CONTINUE)||(LA37_4 >= DEFAULT && LA37_4 <= DO)||(LA37_4 >= DOWNTO && LA37_4 <= DYNAMIC)||(LA37_4 >= ELSE && LA37_4 <= END)||(LA37_4 >= EXCEPT && LA37_4 <= FUNCTION)||LA37_4==GOTO||LA37_4==HELPER||(LA37_4 >= IF && LA37_4 <= LABEL)||(LA37_4 >= LIBRARY && LA37_4 <= LOCAL)||LA37_4==MESSAGE||(LA37_4 >= MOD && LA37_4 <= NOT)||(LA37_4 >= OBJECT && LA37_4 <= PLATFORM)||LA37_4==POINTER||(LA37_4 >= PRIVATE && LA37_4 <= PUBLISHED)||LA37_4==RAISE||(LA37_4 >= READ && LA37_4 <= RESOURCESTRING)||(LA37_4 >= SAFECALL && LA37_4 <= SEALED)||(LA37_4 >= SET && LA37_4 <= SHR)||(LA37_4 >= STATIC && LA37_4 <= TYPE)||(LA37_4 >= UNIT && LA37_4 <= USES)||(LA37_4 >= VAR && LA37_4 <= WRITEONLY)||LA37_4==XOR) ) {
						int LA37_9 = input.LA(4);
						if ( (synpred53_Delphi()) ) {
							alt37=1;
						}
						else if ( (synpred54_Delphi()) ) {
							alt37=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 37, 9, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 37, 4, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case EXIT:
				case EXPORT:
				case FINAL:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STATIC:
				case STORED:
				case STRICT:
				case STRING:
				case UNSAFE:
				case VARIANT:
				case WRITE:
					{
					int LA37_5 = input.LA(3);
					if ( (synpred53_Delphi()) ) {
						alt37=1;
					}
					else if ( (synpred54_Delphi()) ) {
						alt37=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 37, 5, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case EOF:
				case AND:
				case AS:
				case AT2:
				case ControlString:
				case DEPRECATED:
				case DIV:
				case DOT:
				case EQUAL:
				case EXPERIMENTAL:
				case FALSE:
				case FUNCTION:
				case GE:
				case GT:
				case IN:
				case INHERITED:
				case IS:
				case LBRACK:
				case LE:
				case LIBRARY:
				case LPAREN:
				case LT:
				case MINUS:
				case MOD:
				case NIL:
				case NOT:
				case NOT_EQUAL:
				case OR:
				case PLATFORM:
				case PLUS:
				case POINTER2:
				case PROCEDURE:
				case QuotedString:
				case SEMI:
				case SHL:
				case SHR:
				case SLASH:
				case STAR:
				case TRUE:
				case TkHexNum:
				case TkIntNum:
				case TkRealNum:
				case XOR:
				case 199:
					{
					alt37=2;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 37, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
			}
			else if ( (LA37_0==EQUAL) ) {
				alt37=3;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 37, 0, input);
				throw nvae;
			}

			switch (alt37) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:32: 'absolute' ident
					{
					root_0 = (Object)adaptor.nil();


					string_literal132=(Token)match(input,ABSOLUTE,FOLLOW_ABSOLUTE_in_varValueSpec2995); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal132_tree = (Object)adaptor.create(string_literal132);
					adaptor.addChild(root_0, string_literal132_tree);
					}

					pushFollow(FOLLOW_ident_in_varValueSpec2997);
					ident133=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident133.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:170:32: 'absolute' constExpression
					{
					root_0 = (Object)adaptor.nil();


					string_literal134=(Token)match(input,ABSOLUTE,FOLLOW_ABSOLUTE_in_varValueSpec3030); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal134_tree = (Object)adaptor.create(string_literal134);
					adaptor.addChild(root_0, string_literal134_tree);
					}

					pushFollow(FOLLOW_constExpression_in_varValueSpec3032);
					constExpression135=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression135.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:171:32: '=' constExpression
					{
					root_0 = (Object)adaptor.nil();


					char_literal136=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_varValueSpec3065); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal136_tree = (Object)adaptor.create(char_literal136);
					adaptor.addChild(root_0, char_literal136_tree);
					}

					pushFollow(FOLLOW_constExpression_in_varValueSpec3067);
					constExpression137=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression137.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 36, varValueSpec_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "varValueSpec"


	public static class exportsSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "exportsSection"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:173:1: exportsSection : 'exports' ident exportItem ( ',' ident exportItem )* ';' ;
	public final DelphiParser.exportsSection_return exportsSection() throws RecognitionException {
		DelphiParser.exportsSection_return retval = new DelphiParser.exportsSection_return();
		retval.start = input.LT(1);
		int exportsSection_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal138=null;
		Token char_literal141=null;
		Token char_literal144=null;
		ParserRuleReturnScope ident139 =null;
		ParserRuleReturnScope exportItem140 =null;
		ParserRuleReturnScope ident142 =null;
		ParserRuleReturnScope exportItem143 =null;

		Object string_literal138_tree=null;
		Object char_literal141_tree=null;
		Object char_literal144_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:173:30: ( 'exports' ident exportItem ( ',' ident exportItem )* ';' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:173:32: 'exports' ident exportItem ( ',' ident exportItem )* ';'
			{
			root_0 = (Object)adaptor.nil();


			string_literal138=(Token)match(input,EXPORTS,FOLLOW_EXPORTS_in_exportsSection3118); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal138_tree = (Object)adaptor.create(string_literal138);
			adaptor.addChild(root_0, string_literal138_tree);
			}

			pushFollow(FOLLOW_ident_in_exportsSection3120);
			ident139=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident139.getTree());

			pushFollow(FOLLOW_exportItem_in_exportsSection3122);
			exportItem140=exportItem();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, exportItem140.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:173:59: ( ',' ident exportItem )*
			loop38:
			while (true) {
				int alt38=2;
				int LA38_0 = input.LA(1);
				if ( (LA38_0==COMMA) ) {
					alt38=1;
				}

				switch (alt38) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:173:60: ',' ident exportItem
					{
					char_literal141=(Token)match(input,COMMA,FOLLOW_COMMA_in_exportsSection3125); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal141_tree = (Object)adaptor.create(char_literal141);
					adaptor.addChild(root_0, char_literal141_tree);
					}

					pushFollow(FOLLOW_ident_in_exportsSection3127);
					ident142=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident142.getTree());

					pushFollow(FOLLOW_exportItem_in_exportsSection3129);
					exportItem143=exportItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exportItem143.getTree());

					}
					break;

				default :
					break loop38;
				}
			}

			char_literal144=(Token)match(input,SEMI,FOLLOW_SEMI_in_exportsSection3133); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal144_tree = (Object)adaptor.create(char_literal144);
			adaptor.addChild(root_0, char_literal144_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 37, exportsSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "exportsSection"


	public static class exportItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "exportItem"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:1: exportItem : ( '(' ( formalParameterList )? ')' )? ( INDEX expression )? ( NAME expression )? ( 'resident' )? ;
	public final DelphiParser.exportItem_return exportItem() throws RecognitionException {
		DelphiParser.exportItem_return retval = new DelphiParser.exportItem_return();
		retval.start = input.LT(1);
		int exportItem_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal145=null;
		Token char_literal147=null;
		Token INDEX148=null;
		Token NAME150=null;
		Token string_literal152=null;
		ParserRuleReturnScope formalParameterList146 =null;
		ParserRuleReturnScope expression149 =null;
		ParserRuleReturnScope expression151 =null;

		Object char_literal145_tree=null;
		Object char_literal147_tree=null;
		Object INDEX148_tree=null;
		Object NAME150_tree=null;
		Object string_literal152_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:30: ( ( '(' ( formalParameterList )? ')' )? ( INDEX expression )? ( NAME expression )? ( 'resident' )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:32: ( '(' ( formalParameterList )? ')' )? ( INDEX expression )? ( NAME expression )? ( 'resident' )?
			{
			root_0 = (Object)adaptor.nil();


			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:32: ( '(' ( formalParameterList )? ')' )?
			int alt40=2;
			int LA40_0 = input.LA(1);
			if ( (LA40_0==LPAREN) ) {
				alt40=1;
			}
			switch (alt40) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:33: '(' ( formalParameterList )? ')'
					{
					char_literal145=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_exportItem3189); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal145_tree = (Object)adaptor.create(char_literal145);
					adaptor.addChild(root_0, char_literal145_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:37: ( formalParameterList )?
					int alt39=2;
					int LA39_0 = input.LA(1);
					if ( (LA39_0==ADD||LA39_0==ANSISTRING||LA39_0==AT||LA39_0==BREAK||LA39_0==CONST||(LA39_0 >= CONTAINS && LA39_0 <= CONTINUE)||LA39_0==DEFAULT||LA39_0==EXIT||LA39_0==EXPORT||LA39_0==FINAL||LA39_0==IMPLEMENTS||LA39_0==INDEX||LA39_0==LBRACK||LA39_0==LOCAL||LA39_0==MESSAGE||LA39_0==NAME||LA39_0==OBJECT||LA39_0==OPERATOR||LA39_0==OUT||LA39_0==POINTER||(LA39_0 >= READ && LA39_0 <= READONLY)||(LA39_0 >= REFERENCE && LA39_0 <= REGISTER)||LA39_0==REMOVE||LA39_0==STATIC||(LA39_0 >= STORED && LA39_0 <= STRING)||LA39_0==TkIdentifier||LA39_0==UNSAFE||LA39_0==VAR||LA39_0==VARIANT||LA39_0==WRITE||LA39_0==198) ) {
						alt39=1;
					}
					switch (alt39) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:38: formalParameterList
							{
							pushFollow(FOLLOW_formalParameterList_in_exportItem3192);
							formalParameterList146=formalParameterList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterList146.getTree());

							}
							break;

					}

					char_literal147=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_exportItem3196); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal147_tree = (Object)adaptor.create(char_literal147);
					adaptor.addChild(root_0, char_literal147_tree);
					}

					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:66: ( INDEX expression )?
			int alt41=2;
			int LA41_0 = input.LA(1);
			if ( (LA41_0==INDEX) ) {
				alt41=1;
			}
			switch (alt41) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:67: INDEX expression
					{
					INDEX148=(Token)match(input,INDEX,FOLLOW_INDEX_in_exportItem3201); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INDEX148_tree = (Object)adaptor.create(INDEX148);
					adaptor.addChild(root_0, INDEX148_tree);
					}

					pushFollow(FOLLOW_expression_in_exportItem3203);
					expression149=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression149.getTree());

					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:86: ( NAME expression )?
			int alt42=2;
			int LA42_0 = input.LA(1);
			if ( (LA42_0==NAME) ) {
				alt42=1;
			}
			switch (alt42) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:87: NAME expression
					{
					NAME150=(Token)match(input,NAME,FOLLOW_NAME_in_exportItem3208); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NAME150_tree = (Object)adaptor.create(NAME150);
					adaptor.addChild(root_0, NAME150_tree);
					}

					pushFollow(FOLLOW_expression_in_exportItem3210);
					expression151=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression151.getTree());

					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:105: ( 'resident' )?
			int alt43=2;
			int LA43_0 = input.LA(1);
			if ( (LA43_0==RESIDENT) ) {
				alt43=1;
			}
			switch (alt43) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:106: 'resident'
					{
					string_literal152=(Token)match(input,RESIDENT,FOLLOW_RESIDENT_in_exportItem3215); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal152_tree = (Object)adaptor.create(string_literal152);
					adaptor.addChild(root_0, string_literal152_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 38, exportItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "exportItem"


	public static class typeDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "typeDecl"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:180:1: typeDecl : ( strucType | pointerType | stringType | procedureType | variantType | ( 'type' )? typeId ( genericPostfix )? ( '.' typeDecl )* ( paranthesePostfix )? | simpleType );
	public final DelphiParser.typeDecl_return typeDecl() throws RecognitionException {
		DelphiParser.typeDecl_return retval = new DelphiParser.typeDecl_return();
		retval.start = input.LT(1);
		int typeDecl_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal158=null;
		Token char_literal161=null;
		ParserRuleReturnScope strucType153 =null;
		ParserRuleReturnScope pointerType154 =null;
		ParserRuleReturnScope stringType155 =null;
		ParserRuleReturnScope procedureType156 =null;
		ParserRuleReturnScope variantType157 =null;
		ParserRuleReturnScope typeId159 =null;
		ParserRuleReturnScope genericPostfix160 =null;
		ParserRuleReturnScope typeDecl162 =null;
		ParserRuleReturnScope paranthesePostfix163 =null;
		ParserRuleReturnScope simpleType164 =null;

		Object string_literal158_tree=null;
		Object char_literal161_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:180:30: ( strucType | pointerType | stringType | procedureType | variantType | ( 'type' )? typeId ( genericPostfix )? ( '.' typeDecl )* ( paranthesePostfix )? | simpleType )
			int alt48=7;
			alt48 = dfa48.predict(input);
			switch (alt48) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:180:32: strucType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_strucType_in_typeDecl3277);
					strucType153=strucType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, strucType153.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:181:32: pointerType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_pointerType_in_typeDecl3310);
					pointerType154=pointerType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pointerType154.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:182:32: stringType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_stringType_in_typeDecl3343);
					stringType155=stringType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, stringType155.getTree());

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:183:32: procedureType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_procedureType_in_typeDecl3376);
					procedureType156=procedureType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureType156.getTree());

					}
					break;
				case 5 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:184:32: variantType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_variantType_in_typeDecl3409);
					variantType157=variantType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, variantType157.getTree());

					}
					break;
				case 6 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:32: ( 'type' )? typeId ( genericPostfix )? ( '.' typeDecl )* ( paranthesePostfix )?
					{
					root_0 = (Object)adaptor.nil();


					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:32: ( 'type' )?
					int alt44=2;
					int LA44_0 = input.LA(1);
					if ( (LA44_0==TYPE) ) {
						alt44=1;
					}
					switch (alt44) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:33: 'type'
							{
							string_literal158=(Token)match(input,TYPE,FOLLOW_TYPE_in_typeDecl3443); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal158_tree = (Object)adaptor.create(string_literal158);
							adaptor.addChild(root_0, string_literal158_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_typeId_in_typeDecl3447);
					typeId159=typeId();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeId159.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:49: ( genericPostfix )?
					int alt45=2;
					int LA45_0 = input.LA(1);
					if ( (LA45_0==LT) ) {
						int LA45_1 = input.LA(2);
						if ( (synpred67_Delphi()) ) {
							alt45=1;
						}
					}
					switch (alt45) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:50: genericPostfix
							{
							pushFollow(FOLLOW_genericPostfix_in_typeDecl3450);
							genericPostfix160=genericPostfix();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, genericPostfix160.getTree());

							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:67: ( '.' typeDecl )*
					loop46:
					while (true) {
						int alt46=2;
						int LA46_0 = input.LA(1);
						if ( (LA46_0==DOT) ) {
							int LA46_2 = input.LA(2);
							if ( (synpred68_Delphi()) ) {
								alt46=1;
							}

						}

						switch (alt46) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:68: '.' typeDecl
							{
							char_literal161=(Token)match(input,DOT,FOLLOW_DOT_in_typeDecl3455); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal161_tree = (Object)adaptor.create(char_literal161);
							adaptor.addChild(root_0, char_literal161_tree);
							}

							pushFollow(FOLLOW_typeDecl_in_typeDecl3457);
							typeDecl162=typeDecl();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl162.getTree());

							}
							break;

						default :
							break loop46;
						}
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:83: ( paranthesePostfix )?
					int alt47=2;
					int LA47_0 = input.LA(1);
					if ( (LA47_0==LPAREN) ) {
						int LA47_1 = input.LA(2);
						if ( (synpred69_Delphi()) ) {
							alt47=1;
						}
					}
					switch (alt47) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:84: paranthesePostfix
							{
							pushFollow(FOLLOW_paranthesePostfix_in_typeDecl3462);
							paranthesePostfix163=paranthesePostfix();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, paranthesePostfix163.getTree());

							}
							break;

					}

					}
					break;
				case 7 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:186:32: simpleType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_simpleType_in_typeDecl3497);
					simpleType164=simpleType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleType164.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 39, typeDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "typeDecl"


	public static class strucType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "strucType"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:188:1: strucType : ( 'packed' )? strucTypePart -> strucTypePart ;
	public final DelphiParser.strucType_return strucType() throws RecognitionException {
		DelphiParser.strucType_return retval = new DelphiParser.strucType_return();
		retval.start = input.LT(1);
		int strucType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal165=null;
		ParserRuleReturnScope strucTypePart166 =null;

		Object string_literal165_tree=null;
		RewriteRuleTokenStream stream_PACKED=new RewriteRuleTokenStream(adaptor,"token PACKED");
		RewriteRuleSubtreeStream stream_strucTypePart=new RewriteRuleSubtreeStream(adaptor,"rule strucTypePart");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:188:30: ( ( 'packed' )? strucTypePart -> strucTypePart )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:188:32: ( 'packed' )? strucTypePart
			{
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:188:32: ( 'packed' )?
			int alt49=2;
			int LA49_0 = input.LA(1);
			if ( (LA49_0==PACKED) ) {
				alt49=1;
			}
			switch (alt49) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:188:33: 'packed'
					{
					string_literal165=(Token)match(input,PACKED,FOLLOW_PACKED_in_strucType3583); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_PACKED.add(string_literal165);

					}
					break;

			}

			pushFollow(FOLLOW_strucTypePart_in_strucType3587);
			strucTypePart166=strucTypePart();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_strucTypePart.add(strucTypePart166.getTree());
			// AST REWRITE
			// elements: strucTypePart
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 188:58: -> strucTypePart
			{
				adaptor.addChild(root_0, stream_strucTypePart.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 40, strucType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "strucType"


	public static class strucTypePart_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "strucTypePart"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:190:1: strucTypePart : ( arrayType | setType | fileType | classDecl );
	public final DelphiParser.strucTypePart_return strucTypePart() throws RecognitionException {
		DelphiParser.strucTypePart_return retval = new DelphiParser.strucTypePart_return();
		retval.start = input.LT(1);
		int strucTypePart_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope arrayType167 =null;
		ParserRuleReturnScope setType168 =null;
		ParserRuleReturnScope fileType169 =null;
		ParserRuleReturnScope classDecl170 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:190:30: ( arrayType | setType | fileType | classDecl )
			int alt50=4;
			switch ( input.LA(1) ) {
			case ARRAY:
				{
				alt50=1;
				}
				break;
			case SET:
				{
				alt50=2;
				}
				break;
			case FILE:
				{
				alt50=3;
				}
				break;
			case CLASS:
			case DISPINTERFACE:
			case INTERFACE:
			case OBJECT:
			case RECORD:
				{
				alt50=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 50, 0, input);
				throw nvae;
			}
			switch (alt50) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:190:32: arrayType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_arrayType_in_strucTypePart3643);
					arrayType167=arrayType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayType167.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:191:32: setType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_setType_in_strucTypePart3676);
					setType168=setType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, setType168.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:192:32: fileType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_fileType_in_strucTypePart3709);
					fileType169=fileType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, fileType169.getTree());

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:193:32: classDecl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classDecl_in_strucTypePart3742);
					classDecl170=classDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classDecl170.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 41, strucTypePart_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "strucTypePart"


	public static class arrayType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "arrayType"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:1: arrayType : 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? 'of' arraySubType -> ^( arraySubType 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? ) ;
	public final DelphiParser.arrayType_return arrayType() throws RecognitionException {
		DelphiParser.arrayType_return retval = new DelphiParser.arrayType_return();
		retval.start = input.LT(1);
		int arrayType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal171=null;
		Token char_literal172=null;
		Token char_literal174=null;
		Token char_literal176=null;
		Token string_literal177=null;
		ParserRuleReturnScope arrayIndex173 =null;
		ParserRuleReturnScope arrayIndex175 =null;
		ParserRuleReturnScope arraySubType178 =null;

		Object string_literal171_tree=null;
		Object char_literal172_tree=null;
		Object char_literal174_tree=null;
		Object char_literal176_tree=null;
		Object string_literal177_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
		RewriteRuleTokenStream stream_ARRAY=new RewriteRuleTokenStream(adaptor,"token ARRAY");
		RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
		RewriteRuleTokenStream stream_OF=new RewriteRuleTokenStream(adaptor,"token OF");
		RewriteRuleSubtreeStream stream_arraySubType=new RewriteRuleSubtreeStream(adaptor,"rule arraySubType");
		RewriteRuleSubtreeStream stream_arrayIndex=new RewriteRuleSubtreeStream(adaptor,"rule arrayIndex");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:30: ( 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? 'of' arraySubType -> ^( arraySubType 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:33: 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? 'of' arraySubType
			{
			string_literal171=(Token)match(input,ARRAY,FOLLOW_ARRAY_in_arrayType3800); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_ARRAY.add(string_literal171);

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:41: ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )?
			int alt54=2;
			int LA54_0 = input.LA(1);
			if ( (LA54_0==LBRACK) ) {
				alt54=1;
			}
			switch (alt54) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:42: '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']'
					{
					char_literal172=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_arrayType3803); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LBRACK.add(char_literal172);

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:46: ( arrayIndex )?
					int alt51=2;
					int LA51_0 = input.LA(1);
					if ( ((LA51_0 >= ADD && LA51_0 <= ANSISTRING)||LA51_0==AS||(LA51_0 >= AT && LA51_0 <= AT2)||LA51_0==BREAK||(LA51_0 >= CONTAINS && LA51_0 <= ControlString)||LA51_0==DEFAULT||LA51_0==DIV||(LA51_0 >= DOT && LA51_0 <= DOTDOT)||LA51_0==EQUAL||LA51_0==EXIT||LA51_0==EXPORT||LA51_0==FALSE||LA51_0==FINAL||(LA51_0 >= FUNCTION && LA51_0 <= GE)||LA51_0==GT||(LA51_0 >= IMPLEMENTS && LA51_0 <= INHERITED)||LA51_0==IS||LA51_0==LBRACK||LA51_0==LE||(LA51_0 >= LOCAL && LA51_0 <= NAME)||LA51_0==NIL||(LA51_0 >= NOT && LA51_0 <= OBJECT)||(LA51_0 >= OPERATOR && LA51_0 <= OUT)||(LA51_0 >= PLUS && LA51_0 <= POINTER2)||LA51_0==PROCEDURE||LA51_0==QuotedString||(LA51_0 >= READ && LA51_0 <= READONLY)||(LA51_0 >= REFERENCE && LA51_0 <= REGISTER)||LA51_0==REMOVE||(LA51_0 >= SHL && LA51_0 <= STATIC)||(LA51_0 >= STORED && LA51_0 <= STRING)||LA51_0==TRUE||(LA51_0 >= TkHexNum && LA51_0 <= TkIntNum)||LA51_0==TkRealNum||LA51_0==UNSAFE||LA51_0==VARIANT||LA51_0==WRITE||(LA51_0 >= XOR && LA51_0 <= 199)) ) {
						alt51=1;
					}
					switch (alt51) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:47: arrayIndex
							{
							pushFollow(FOLLOW_arrayIndex_in_arrayType3806);
							arrayIndex173=arrayIndex();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_arrayIndex.add(arrayIndex173.getTree());
							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:60: ( ',' ( arrayIndex )? )*
					loop53:
					while (true) {
						int alt53=2;
						int LA53_0 = input.LA(1);
						if ( (LA53_0==COMMA) ) {
							alt53=1;
						}

						switch (alt53) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:61: ',' ( arrayIndex )?
							{
							char_literal174=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayType3811); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(char_literal174);

							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:65: ( arrayIndex )?
							int alt52=2;
							int LA52_0 = input.LA(1);
							if ( ((LA52_0 >= ADD && LA52_0 <= ANSISTRING)||LA52_0==AS||(LA52_0 >= AT && LA52_0 <= AT2)||LA52_0==BREAK||(LA52_0 >= CONTAINS && LA52_0 <= ControlString)||LA52_0==DEFAULT||LA52_0==DIV||(LA52_0 >= DOT && LA52_0 <= DOTDOT)||LA52_0==EQUAL||LA52_0==EXIT||LA52_0==EXPORT||LA52_0==FALSE||LA52_0==FINAL||(LA52_0 >= FUNCTION && LA52_0 <= GE)||LA52_0==GT||(LA52_0 >= IMPLEMENTS && LA52_0 <= INHERITED)||LA52_0==IS||LA52_0==LBRACK||LA52_0==LE||(LA52_0 >= LOCAL && LA52_0 <= NAME)||LA52_0==NIL||(LA52_0 >= NOT && LA52_0 <= OBJECT)||(LA52_0 >= OPERATOR && LA52_0 <= OUT)||(LA52_0 >= PLUS && LA52_0 <= POINTER2)||LA52_0==PROCEDURE||LA52_0==QuotedString||(LA52_0 >= READ && LA52_0 <= READONLY)||(LA52_0 >= REFERENCE && LA52_0 <= REGISTER)||LA52_0==REMOVE||(LA52_0 >= SHL && LA52_0 <= STATIC)||(LA52_0 >= STORED && LA52_0 <= STRING)||LA52_0==TRUE||(LA52_0 >= TkHexNum && LA52_0 <= TkIntNum)||LA52_0==TkRealNum||LA52_0==UNSAFE||LA52_0==VARIANT||LA52_0==WRITE||(LA52_0 >= XOR && LA52_0 <= 199)) ) {
								alt52=1;
							}
							switch (alt52) {
								case 1 :
									// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:66: arrayIndex
									{
									pushFollow(FOLLOW_arrayIndex_in_arrayType3814);
									arrayIndex175=arrayIndex();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_arrayIndex.add(arrayIndex175.getTree());
									}
									break;

							}

							}
							break;

						default :
							break loop53;
						}
					}

					char_literal176=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_arrayType3820); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RBRACK.add(char_literal176);

					}
					break;

			}

			string_literal177=(Token)match(input,OF,FOLLOW_OF_in_arrayType3824); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_OF.add(string_literal177);

			pushFollow(FOLLOW_arraySubType_in_arrayType3826);
			arraySubType178=arraySubType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_arraySubType.add(arraySubType178.getTree());
			// AST REWRITE
			// elements: arrayIndex, ARRAY, COMMA, arrayIndex, RBRACK, arraySubType, LBRACK
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 197:30: -> ^( arraySubType 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:33: ^( arraySubType 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_arraySubType.nextNode(), root_1);
				adaptor.addChild(root_1, stream_ARRAY.nextNode());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:56: ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )?
				if ( stream_COMMA.hasNext()||stream_arrayIndex.hasNext()||stream_RBRACK.hasNext()||stream_LBRACK.hasNext() ) {
					adaptor.addChild(root_1, stream_LBRACK.nextNode());
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:61: ( arrayIndex )?
					if ( stream_arrayIndex.hasNext() ) {
						adaptor.addChild(root_1, stream_arrayIndex.nextTree());
					}
					stream_arrayIndex.reset();

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:75: ( ',' ( arrayIndex )? )*
					while ( stream_COMMA.hasNext() ) {
						adaptor.addChild(root_1, stream_COMMA.nextNode());
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:80: ( arrayIndex )?
						if ( stream_arrayIndex.hasNext() ) {
							adaptor.addChild(root_1, stream_arrayIndex.nextTree());
						}
						stream_arrayIndex.reset();

					}
					stream_COMMA.reset();

					adaptor.addChild(root_1, stream_RBRACK.nextNode());
				}
				stream_COMMA.reset();
				stream_arrayIndex.reset();
				stream_RBRACK.reset();
				stream_LBRACK.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 42, arrayType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "arrayType"


	public static class arrayIndex_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "arrayIndex"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:200:1: arrayIndex : ( typeId | expression '..' expression );
	public final DelphiParser.arrayIndex_return arrayIndex() throws RecognitionException {
		DelphiParser.arrayIndex_return retval = new DelphiParser.arrayIndex_return();
		retval.start = input.LT(1);
		int arrayIndex_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal181=null;
		ParserRuleReturnScope typeId179 =null;
		ParserRuleReturnScope expression180 =null;
		ParserRuleReturnScope expression182 =null;

		Object string_literal181_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:200:30: ( typeId | expression '..' expression )
			int alt55=2;
			alt55 = dfa55.predict(input);
			switch (alt55) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:200:32: typeId
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_typeId_in_arrayIndex3952);
					typeId179=typeId();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeId179.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:201:32: expression '..' expression
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_expression_in_arrayIndex3985);
					expression180=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression180.getTree());

					string_literal181=(Token)match(input,DOTDOT,FOLLOW_DOTDOT_in_arrayIndex3987); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal181_tree = (Object)adaptor.create(string_literal181);
					adaptor.addChild(root_0, string_literal181_tree);
					}

					pushFollow(FOLLOW_expression_in_arrayIndex3989);
					expression182=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression182.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 43, arrayIndex_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "arrayIndex"


	public static class arraySubType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "arraySubType"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:204:1: arraySubType : ( 'const' | typeDecl );
	public final DelphiParser.arraySubType_return arraySubType() throws RecognitionException {
		DelphiParser.arraySubType_return retval = new DelphiParser.arraySubType_return();
		retval.start = input.LT(1);
		int arraySubType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal183=null;
		ParserRuleReturnScope typeDecl184 =null;

		Object string_literal183_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:204:30: ( 'const' | typeDecl )
			int alt56=2;
			int LA56_0 = input.LA(1);
			if ( (LA56_0==CONST) ) {
				int LA56_1 = input.LA(2);
				if ( (synpred80_Delphi()) ) {
					alt56=1;
				}
				else if ( (true) ) {
					alt56=2;
				}

			}
			else if ( (LA56_0==EOF||LA56_0==ABSOLUTE||(LA56_0 >= ADD && LA56_0 <= ASSEMBLER)||(LA56_0 >= AT && LA56_0 <= AUTOMATED)||(LA56_0 >= BEGIN && LA56_0 <= COMMA)||(LA56_0 >= CONSTRUCTOR && LA56_0 <= ControlString)||(LA56_0 >= DEFAULT && LA56_0 <= DOWNTO)||(LA56_0 >= ELSE && LA56_0 <= FINALLY)||(LA56_0 >= FUNCTION && LA56_0 <= GE)||LA56_0==GT||(LA56_0 >= IMPLEMENTATION && LA56_0 <= LBRACK)||(LA56_0 >= LE && LA56_0 <= OVERLOAD)||(LA56_0 >= PACKED && LA56_0 <= PROCEDURE)||(LA56_0 >= PROPERTY && LA56_0 <= QuotedString)||LA56_0==RBRACK||(LA56_0 >= READ && LA56_0 <= REGISTER)||LA56_0==REMOVE||(LA56_0 >= RESIDENT && LA56_0 <= SAFECALL)||(LA56_0 >= SEMI && LA56_0 <= TRUE)||LA56_0==TYPE||(LA56_0 >= TkHexNum && LA56_0 <= TkIntNum)||LA56_0==TkRealNum||(LA56_0 >= UNSAFE && LA56_0 <= UNTIL)||(LA56_0 >= VAR && LA56_0 <= VARIANT)||(LA56_0 >= WRITE && LA56_0 <= WRITEONLY)||(LA56_0 >= XOR && LA56_0 <= 199)) ) {
				alt56=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 56, 0, input);
				throw nvae;
			}

			switch (alt56) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:204:32: 'const'
					{
					root_0 = (Object)adaptor.nil();


					string_literal183=(Token)match(input,CONST,FOLLOW_CONST_in_arraySubType4043); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal183_tree = (Object)adaptor.create(string_literal183);
					adaptor.addChild(root_0, string_literal183_tree);
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:205:32: typeDecl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_typeDecl_in_arraySubType4076);
					typeDecl184=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl184.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 44, arraySubType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "arraySubType"


	public static class setType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "setType"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:207:1: setType : 'set' 'of' typeDecl -> 'set' typeDecl ;
	public final DelphiParser.setType_return setType() throws RecognitionException {
		DelphiParser.setType_return retval = new DelphiParser.setType_return();
		retval.start = input.LT(1);
		int setType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal185=null;
		Token string_literal186=null;
		ParserRuleReturnScope typeDecl187 =null;

		Object string_literal185_tree=null;
		Object string_literal186_tree=null;
		RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
		RewriteRuleTokenStream stream_OF=new RewriteRuleTokenStream(adaptor,"token OF");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:207:30: ( 'set' 'of' typeDecl -> 'set' typeDecl )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:207:32: 'set' 'of' typeDecl
			{
			string_literal185=(Token)match(input,SET,FOLLOW_SET_in_setType4134); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SET.add(string_literal185);

			string_literal186=(Token)match(input,OF,FOLLOW_OF_in_setType4136); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_OF.add(string_literal186);

			pushFollow(FOLLOW_typeDecl_in_setType4138);
			typeDecl187=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl187.getTree());
			// AST REWRITE
			// elements: typeDecl, SET
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 207:52: -> 'set' typeDecl
			{
				adaptor.addChild(root_0, stream_SET.nextNode());
				adaptor.addChild(root_0, stream_typeDecl.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 45, setType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "setType"


	public static class fileType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "fileType"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:210:1: fileType : 'file' ( 'of' typeDecl )? ;
	public final DelphiParser.fileType_return fileType() throws RecognitionException {
		DelphiParser.fileType_return retval = new DelphiParser.fileType_return();
		retval.start = input.LT(1);
		int fileType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal188=null;
		Token string_literal189=null;
		ParserRuleReturnScope typeDecl190 =null;

		Object string_literal188_tree=null;
		Object string_literal189_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:210:30: ( 'file' ( 'of' typeDecl )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:210:32: 'file' ( 'of' typeDecl )?
			{
			root_0 = (Object)adaptor.nil();


			string_literal188=(Token)match(input,FILE,FOLLOW_FILE_in_fileType4212); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal188_tree = (Object)adaptor.create(string_literal188);
			adaptor.addChild(root_0, string_literal188_tree);
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:210:39: ( 'of' typeDecl )?
			int alt57=2;
			int LA57_0 = input.LA(1);
			if ( (LA57_0==OF) ) {
				int LA57_1 = input.LA(2);
				if ( (synpred81_Delphi()) ) {
					alt57=1;
				}
			}
			switch (alt57) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:210:40: 'of' typeDecl
					{
					string_literal189=(Token)match(input,OF,FOLLOW_OF_in_fileType4215); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal189_tree = (Object)adaptor.create(string_literal189);
					adaptor.addChild(root_0, string_literal189_tree);
					}

					pushFollow(FOLLOW_typeDecl_in_fileType4217);
					typeDecl190=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl190.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 46, fileType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "fileType"


	public static class pointerType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "pointerType"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:212:1: pointerType : ( '^' typeDecl | 'pointer' );
	public final DelphiParser.pointerType_return pointerType() throws RecognitionException {
		DelphiParser.pointerType_return retval = new DelphiParser.pointerType_return();
		retval.start = input.LT(1);
		int pointerType_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal191=null;
		Token string_literal193=null;
		ParserRuleReturnScope typeDecl192 =null;

		Object char_literal191_tree=null;
		Object string_literal193_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:212:30: ( '^' typeDecl | 'pointer' )
			int alt58=2;
			int LA58_0 = input.LA(1);
			if ( (LA58_0==POINTER2) ) {
				alt58=1;
			}
			else if ( (LA58_0==POINTER) ) {
				alt58=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 58, 0, input);
				throw nvae;
			}

			switch (alt58) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:212:32: '^' typeDecl
					{
					root_0 = (Object)adaptor.nil();


					char_literal191=(Token)match(input,POINTER2,FOLLOW_POINTER2_in_pointerType4273); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal191_tree = (Object)adaptor.create(char_literal191);
					adaptor.addChild(root_0, char_literal191_tree);
					}

					pushFollow(FOLLOW_typeDecl_in_pointerType4275);
					typeDecl192=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl192.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:213:32: 'pointer'
					{
					root_0 = (Object)adaptor.nil();


					string_literal193=(Token)match(input,POINTER,FOLLOW_POINTER_in_pointerType4308); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal193_tree = (Object)adaptor.create(string_literal193);
					adaptor.addChild(root_0, string_literal193_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 47, pointerType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "pointerType"


	public static class stringType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "stringType"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:215:1: stringType : ( 'string' ( '[' expression ']' )? -> 'string' | ( 'type' )? ANSISTRING ( codePageNumber )? );
	public final DelphiParser.stringType_return stringType() throws RecognitionException {
		DelphiParser.stringType_return retval = new DelphiParser.stringType_return();
		retval.start = input.LT(1);
		int stringType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal194=null;
		Token char_literal195=null;
		Token char_literal197=null;
		Token string_literal198=null;
		Token ANSISTRING199=null;
		ParserRuleReturnScope expression196 =null;
		ParserRuleReturnScope codePageNumber200 =null;

		Object string_literal194_tree=null;
		Object char_literal195_tree=null;
		Object char_literal197_tree=null;
		Object string_literal198_tree=null;
		Object ANSISTRING199_tree=null;
		RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
		RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
		RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:215:30: ( 'string' ( '[' expression ']' )? -> 'string' | ( 'type' )? ANSISTRING ( codePageNumber )? )
			int alt62=2;
			int LA62_0 = input.LA(1);
			if ( (LA62_0==STRING) ) {
				alt62=1;
			}
			else if ( (LA62_0==ANSISTRING||LA62_0==TYPE) ) {
				alt62=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 62, 0, input);
				throw nvae;
			}

			switch (alt62) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:215:32: 'string' ( '[' expression ']' )?
					{
					string_literal194=(Token)match(input,STRING,FOLLOW_STRING_in_stringType4363); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_STRING.add(string_literal194);

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:215:41: ( '[' expression ']' )?
					int alt59=2;
					alt59 = dfa59.predict(input);
					switch (alt59) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:215:42: '[' expression ']'
							{
							char_literal195=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_stringType4366); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LBRACK.add(char_literal195);

							pushFollow(FOLLOW_expression_in_stringType4368);
							expression196=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_expression.add(expression196.getTree());
							char_literal197=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_stringType4370); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_RBRACK.add(char_literal197);

							}
							break;

					}

					// AST REWRITE
					// elements: STRING
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 215:63: -> 'string'
					{
						adaptor.addChild(root_0, stream_STRING.nextNode());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:216:32: ( 'type' )? ANSISTRING ( codePageNumber )?
					{
					root_0 = (Object)adaptor.nil();


					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:216:32: ( 'type' )?
					int alt60=2;
					int LA60_0 = input.LA(1);
					if ( (LA60_0==TYPE) ) {
						alt60=1;
					}
					switch (alt60) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:216:33: 'type'
							{
							string_literal198=(Token)match(input,TYPE,FOLLOW_TYPE_in_stringType4410); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal198_tree = (Object)adaptor.create(string_literal198);
							adaptor.addChild(root_0, string_literal198_tree);
							}

							}
							break;

					}

					ANSISTRING199=(Token)match(input,ANSISTRING,FOLLOW_ANSISTRING_in_stringType4414); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ANSISTRING199_tree = (Object)adaptor.create(ANSISTRING199);
					adaptor.addChild(root_0, ANSISTRING199_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:216:53: ( codePageNumber )?
					int alt61=2;
					int LA61_0 = input.LA(1);
					if ( (LA61_0==LPAREN) ) {
						int LA61_1 = input.LA(2);
						if ( (LA61_1==TkHexNum||LA61_1==TkIntNum) ) {
							int LA61_3 = input.LA(3);
							if ( (LA61_3==RPAREN) ) {
								int LA61_4 = input.LA(4);
								if ( (synpred86_Delphi()) ) {
									alt61=1;
								}
							}
						}
					}
					switch (alt61) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:216:54: codePageNumber
							{
							pushFollow(FOLLOW_codePageNumber_in_stringType4417);
							codePageNumber200=codePageNumber();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, codePageNumber200.getTree());

							}
							break;

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 48, stringType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "stringType"


	public static class codePageNumber_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "codePageNumber"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:218:1: codePageNumber : '(' intNum ')' ;
	public final DelphiParser.codePageNumber_return codePageNumber() throws RecognitionException {
		DelphiParser.codePageNumber_return retval = new DelphiParser.codePageNumber_return();
		retval.start = input.LT(1);
		int codePageNumber_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal201=null;
		Token char_literal203=null;
		ParserRuleReturnScope intNum202 =null;

		Object char_literal201_tree=null;
		Object char_literal203_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:218:30: ( '(' intNum ')' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:218:32: '(' intNum ')'
			{
			root_0 = (Object)adaptor.nil();


			char_literal201=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_codePageNumber4470); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal201_tree = (Object)adaptor.create(char_literal201);
			adaptor.addChild(root_0, char_literal201_tree);
			}

			pushFollow(FOLLOW_intNum_in_codePageNumber4472);
			intNum202=intNum();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, intNum202.getTree());

			char_literal203=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_codePageNumber4474); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal203_tree = (Object)adaptor.create(char_literal203);
			adaptor.addChild(root_0, char_literal203_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 49, codePageNumber_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "codePageNumber"


	public static class procedureType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "procedureType"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:220:1: procedureType : ( methodType | simpleProcedureType | procedureReference );
	public final DelphiParser.procedureType_return procedureType() throws RecognitionException {
		DelphiParser.procedureType_return retval = new DelphiParser.procedureType_return();
		retval.start = input.LT(1);
		int procedureType_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope methodType204 =null;
		ParserRuleReturnScope simpleProcedureType205 =null;
		ParserRuleReturnScope procedureReference206 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:220:30: ( methodType | simpleProcedureType | procedureReference )
			int alt63=3;
			switch ( input.LA(1) ) {
			case FUNCTION:
				{
				int LA63_1 = input.LA(2);
				if ( (synpred87_Delphi()) ) {
					alt63=1;
				}
				else if ( (synpred88_Delphi()) ) {
					alt63=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 63, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PROCEDURE:
				{
				int LA63_2 = input.LA(2);
				if ( (synpred87_Delphi()) ) {
					alt63=1;
				}
				else if ( (synpred88_Delphi()) ) {
					alt63=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 63, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case REFERENCE:
				{
				alt63=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 63, 0, input);
				throw nvae;
			}
			switch (alt63) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:220:32: methodType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_methodType_in_procedureType4526);
					methodType204=methodType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, methodType204.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:221:32: simpleProcedureType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_simpleProcedureType_in_procedureType4559);
					simpleProcedureType205=simpleProcedureType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleProcedureType205.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:222:32: procedureReference
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_procedureReference_in_procedureType4592);
					procedureReference206=procedureReference();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureReference206.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 50, procedureType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "procedureType"


	public static class methodType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodType"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:224:1: methodType : procedureTypeHeading 'of' 'object' ;
	public final DelphiParser.methodType_return methodType() throws RecognitionException {
		DelphiParser.methodType_return retval = new DelphiParser.methodType_return();
		retval.start = input.LT(1);
		int methodType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal208=null;
		Token string_literal209=null;
		ParserRuleReturnScope procedureTypeHeading207 =null;

		Object string_literal208_tree=null;
		Object string_literal209_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:224:30: ( procedureTypeHeading 'of' 'object' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:224:32: procedureTypeHeading 'of' 'object'
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_procedureTypeHeading_in_methodType4647);
			procedureTypeHeading207=procedureTypeHeading();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureTypeHeading207.getTree());

			string_literal208=(Token)match(input,OF,FOLLOW_OF_in_methodType4649); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal208_tree = (Object)adaptor.create(string_literal208);
			adaptor.addChild(root_0, string_literal208_tree);
			}

			string_literal209=(Token)match(input,OBJECT,FOLLOW_OBJECT_in_methodType4651); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal209_tree = (Object)adaptor.create(string_literal209);
			adaptor.addChild(root_0, string_literal209_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 51, methodType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodType"


	public static class simpleProcedureType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "simpleProcedureType"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:1: simpleProcedureType : procedureTypeHeading ( ( ';' )? callConventionNoSemi )? ;
	public final DelphiParser.simpleProcedureType_return simpleProcedureType() throws RecognitionException {
		DelphiParser.simpleProcedureType_return retval = new DelphiParser.simpleProcedureType_return();
		retval.start = input.LT(1);
		int simpleProcedureType_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal211=null;
		ParserRuleReturnScope procedureTypeHeading210 =null;
		ParserRuleReturnScope callConventionNoSemi212 =null;

		Object char_literal211_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:30: ( procedureTypeHeading ( ( ';' )? callConventionNoSemi )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:32: procedureTypeHeading ( ( ';' )? callConventionNoSemi )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_procedureTypeHeading_in_simpleProcedureType4697);
			procedureTypeHeading210=procedureTypeHeading();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureTypeHeading210.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:53: ( ( ';' )? callConventionNoSemi )?
			int alt65=2;
			switch ( input.LA(1) ) {
				case SEMI:
					{
					int LA65_1 = input.LA(2);
					if ( (synpred90_Delphi()) ) {
						alt65=1;
					}
					}
					break;
				case REGISTER:
					{
					int LA65_2 = input.LA(2);
					if ( (synpred90_Delphi()) ) {
						alt65=1;
					}
					}
					break;
				case CDECL:
					{
					int LA65_4 = input.LA(2);
					if ( (synpred90_Delphi()) ) {
						alt65=1;
					}
					}
					break;
				case PASCAL:
					{
					int LA65_5 = input.LA(2);
					if ( (synpred90_Delphi()) ) {
						alt65=1;
					}
					}
					break;
				case SAFECALL:
					{
					int LA65_6 = input.LA(2);
					if ( (synpred90_Delphi()) ) {
						alt65=1;
					}
					}
					break;
				case EXPORT:
					{
					int LA65_7 = input.LA(2);
					if ( (synpred90_Delphi()) ) {
						alt65=1;
					}
					}
					break;
				case STDCALL:
					{
					int LA65_8 = input.LA(2);
					if ( (synpred90_Delphi()) ) {
						alt65=1;
					}
					}
					break;
			}
			switch (alt65) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:55: ( ';' )? callConventionNoSemi
					{
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:55: ( ';' )?
					int alt64=2;
					int LA64_0 = input.LA(1);
					if ( (LA64_0==SEMI) ) {
						alt64=1;
					}
					switch (alt64) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:56: ';'
							{
							char_literal211=(Token)match(input,SEMI,FOLLOW_SEMI_in_simpleProcedureType4702); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal211_tree = (Object)adaptor.create(char_literal211);
							adaptor.addChild(root_0, char_literal211_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_callConventionNoSemi_in_simpleProcedureType4706);
					callConventionNoSemi212=callConventionNoSemi();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, callConventionNoSemi212.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 52, simpleProcedureType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "simpleProcedureType"


	public static class procedureReference_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "procedureReference"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:228:1: procedureReference : 'reference' 'to' procedureTypeHeading ;
	public final DelphiParser.procedureReference_return procedureReference() throws RecognitionException {
		DelphiParser.procedureReference_return retval = new DelphiParser.procedureReference_return();
		retval.start = input.LT(1);
		int procedureReference_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal213=null;
		Token string_literal214=null;
		ParserRuleReturnScope procedureTypeHeading215 =null;

		Object string_literal213_tree=null;
		Object string_literal214_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:228:30: ( 'reference' 'to' procedureTypeHeading )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:228:32: 'reference' 'to' procedureTypeHeading
			{
			root_0 = (Object)adaptor.nil();


			string_literal213=(Token)match(input,REFERENCE,FOLLOW_REFERENCE_in_procedureReference4755); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal213_tree = (Object)adaptor.create(string_literal213);
			adaptor.addChild(root_0, string_literal213_tree);
			}

			string_literal214=(Token)match(input,TO,FOLLOW_TO_in_procedureReference4757); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal214_tree = (Object)adaptor.create(string_literal214);
			adaptor.addChild(root_0, string_literal214_tree);
			}

			pushFollow(FOLLOW_procedureTypeHeading_in_procedureReference4759);
			procedureTypeHeading215=procedureTypeHeading();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureTypeHeading215.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 53, procedureReference_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "procedureReference"


	public static class procedureTypeHeading_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "procedureTypeHeading"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:1: procedureTypeHeading : ( 'function' ( formalParameterSection )? ':' ( customAttribute )? typeDecl -> 'function' ( formalParameterSection )? ^( TkFunctionReturn typeDecl ) | 'procedure' ( formalParameterSection )? );
	public final DelphiParser.procedureTypeHeading_return procedureTypeHeading() throws RecognitionException {
		DelphiParser.procedureTypeHeading_return retval = new DelphiParser.procedureTypeHeading_return();
		retval.start = input.LT(1);
		int procedureTypeHeading_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal216=null;
		Token char_literal218=null;
		Token string_literal221=null;
		ParserRuleReturnScope formalParameterSection217 =null;
		ParserRuleReturnScope customAttribute219 =null;
		ParserRuleReturnScope typeDecl220 =null;
		ParserRuleReturnScope formalParameterSection222 =null;

		Object string_literal216_tree=null;
		Object char_literal218_tree=null;
		Object string_literal221_tree=null;
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_formalParameterSection=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterSection");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:30: ( 'function' ( formalParameterSection )? ':' ( customAttribute )? typeDecl -> 'function' ( formalParameterSection )? ^( TkFunctionReturn typeDecl ) | 'procedure' ( formalParameterSection )? )
			int alt69=2;
			int LA69_0 = input.LA(1);
			if ( (LA69_0==FUNCTION) ) {
				alt69=1;
			}
			else if ( (LA69_0==PROCEDURE) ) {
				alt69=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 69, 0, input);
				throw nvae;
			}

			switch (alt69) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:32: 'function' ( formalParameterSection )? ':' ( customAttribute )? typeDecl
					{
					string_literal216=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_procedureTypeHeading4804); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_FUNCTION.add(string_literal216);

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:43: ( formalParameterSection )?
					int alt66=2;
					int LA66_0 = input.LA(1);
					if ( (LA66_0==LPAREN) ) {
						alt66=1;
					}
					switch (alt66) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:44: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_procedureTypeHeading4807);
							formalParameterSection217=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection217.getTree());
							}
							break;

					}

					char_literal218=(Token)match(input,COLON,FOLLOW_COLON_in_procedureTypeHeading4811); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(char_literal218);

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:73: ( customAttribute )?
					int alt67=2;
					alt67 = dfa67.predict(input);
					switch (alt67) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:74: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_procedureTypeHeading4814);
							customAttribute219=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute219.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_typeDecl_in_procedureTypeHeading4818);
					typeDecl220=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl220.getTree());
					// AST REWRITE
					// elements: typeDecl, FUNCTION, formalParameterSection
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 230:101: -> 'function' ( formalParameterSection )? ^( TkFunctionReturn typeDecl )
					{
						adaptor.addChild(root_0, stream_FUNCTION.nextNode());
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:115: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_0, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:141: ^( TkFunctionReturn typeDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionReturn, "TkFunctionReturn"), root_1);
						adaptor.addChild(root_1, stream_typeDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:231:32: 'procedure' ( formalParameterSection )?
					{
					root_0 = (Object)adaptor.nil();


					string_literal221=(Token)match(input,PROCEDURE,FOLLOW_PROCEDURE_in_procedureTypeHeading4866); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal221_tree = (Object)adaptor.create(string_literal221);
					adaptor.addChild(root_0, string_literal221_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:231:44: ( formalParameterSection )?
					int alt68=2;
					alt68 = dfa68.predict(input);
					switch (alt68) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:231:45: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_procedureTypeHeading4869);
							formalParameterSection222=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterSection222.getTree());

							}
							break;

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 54, procedureTypeHeading_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "procedureTypeHeading"


	public static class variantType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "variantType"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:233:1: variantType : 'variant' ;
	public final DelphiParser.variantType_return variantType() throws RecognitionException {
		DelphiParser.variantType_return retval = new DelphiParser.variantType_return();
		retval.start = input.LT(1);
		int variantType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal223=null;

		Object string_literal223_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:233:30: ( 'variant' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:233:32: 'variant'
			{
			root_0 = (Object)adaptor.nil();


			string_literal223=(Token)match(input,VARIANT,FOLLOW_VARIANT_in_variantType4925); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal223_tree = (Object)adaptor.create(string_literal223);
			adaptor.addChild(root_0, string_literal223_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 55, variantType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "variantType"


	public static class simpleType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "simpleType"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:235:1: simpleType : ( ident | subRangeType | enumType );
	public final DelphiParser.simpleType_return simpleType() throws RecognitionException {
		DelphiParser.simpleType_return retval = new DelphiParser.simpleType_return();
		retval.start = input.LT(1);
		int simpleType_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope ident224 =null;
		ParserRuleReturnScope subRangeType225 =null;
		ParserRuleReturnScope enumType226 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:235:30: ( ident | subRangeType | enumType )
			int alt70=3;
			alt70 = dfa70.predict(input);
			switch (alt70) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:235:32: ident
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_ident_in_simpleType4981);
					ident224=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident224.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:236:32: subRangeType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_subRangeType_in_simpleType5014);
					subRangeType225=subRangeType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, subRangeType225.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:237:32: enumType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_enumType_in_simpleType5047);
					enumType226=enumType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, enumType226.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 56, simpleType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "simpleType"


	public static class subRangeType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "subRangeType"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:239:1: subRangeType : constExpression ( '..' constExpression )? ;
	public final DelphiParser.subRangeType_return subRangeType() throws RecognitionException {
		DelphiParser.subRangeType_return retval = new DelphiParser.subRangeType_return();
		retval.start = input.LT(1);
		int subRangeType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal228=null;
		ParserRuleReturnScope constExpression227 =null;
		ParserRuleReturnScope constExpression229 =null;

		Object string_literal228_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:239:30: ( constExpression ( '..' constExpression )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:239:32: constExpression ( '..' constExpression )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_constExpression_in_subRangeType5100);
			constExpression227=constExpression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression227.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:239:48: ( '..' constExpression )?
			int alt71=2;
			int LA71_0 = input.LA(1);
			if ( (LA71_0==DOTDOT) ) {
				int LA71_1 = input.LA(2);
				if ( (synpred97_Delphi()) ) {
					alt71=1;
				}
			}
			switch (alt71) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:239:49: '..' constExpression
					{
					string_literal228=(Token)match(input,DOTDOT,FOLLOW_DOTDOT_in_subRangeType5103); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal228_tree = (Object)adaptor.create(string_literal228);
					adaptor.addChild(root_0, string_literal228_tree);
					}

					pushFollow(FOLLOW_constExpression_in_subRangeType5105);
					constExpression229=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression229.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 57, subRangeType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "subRangeType"


	public static class enumType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "enumType"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:241:1: enumType : '(' ident ( '=' expression )? ( ',' ident ( '=' expression )? )* ')' ;
	public final DelphiParser.enumType_return enumType() throws RecognitionException {
		DelphiParser.enumType_return retval = new DelphiParser.enumType_return();
		retval.start = input.LT(1);
		int enumType_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal230=null;
		Token char_literal232=null;
		Token char_literal234=null;
		Token char_literal236=null;
		Token char_literal238=null;
		ParserRuleReturnScope ident231 =null;
		ParserRuleReturnScope expression233 =null;
		ParserRuleReturnScope ident235 =null;
		ParserRuleReturnScope expression237 =null;

		Object char_literal230_tree=null;
		Object char_literal232_tree=null;
		Object char_literal234_tree=null;
		Object char_literal236_tree=null;
		Object char_literal238_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:241:30: ( '(' ident ( '=' expression )? ( ',' ident ( '=' expression )? )* ')' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:241:32: '(' ident ( '=' expression )? ( ',' ident ( '=' expression )? )* ')'
			{
			root_0 = (Object)adaptor.nil();


			char_literal230=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_enumType5164); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal230_tree = (Object)adaptor.create(char_literal230);
			adaptor.addChild(root_0, char_literal230_tree);
			}

			pushFollow(FOLLOW_ident_in_enumType5166);
			ident231=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident231.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:241:42: ( '=' expression )?
			int alt72=2;
			int LA72_0 = input.LA(1);
			if ( (LA72_0==EQUAL) ) {
				alt72=1;
			}
			switch (alt72) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:241:43: '=' expression
					{
					char_literal232=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_enumType5169); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal232_tree = (Object)adaptor.create(char_literal232);
					adaptor.addChild(root_0, char_literal232_tree);
					}

					pushFollow(FOLLOW_expression_in_enumType5171);
					expression233=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression233.getTree());

					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:241:60: ( ',' ident ( '=' expression )? )*
			loop74:
			while (true) {
				int alt74=2;
				int LA74_0 = input.LA(1);
				if ( (LA74_0==COMMA) ) {
					alt74=1;
				}

				switch (alt74) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:241:61: ',' ident ( '=' expression )?
					{
					char_literal234=(Token)match(input,COMMA,FOLLOW_COMMA_in_enumType5176); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal234_tree = (Object)adaptor.create(char_literal234);
					adaptor.addChild(root_0, char_literal234_tree);
					}

					pushFollow(FOLLOW_ident_in_enumType5178);
					ident235=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident235.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:241:71: ( '=' expression )?
					int alt73=2;
					int LA73_0 = input.LA(1);
					if ( (LA73_0==EQUAL) ) {
						alt73=1;
					}
					switch (alt73) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:241:72: '=' expression
							{
							char_literal236=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_enumType5181); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal236_tree = (Object)adaptor.create(char_literal236);
							adaptor.addChild(root_0, char_literal236_tree);
							}

							pushFollow(FOLLOW_expression_in_enumType5183);
							expression237=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression237.getTree());

							}
							break;

					}

					}
					break;

				default :
					break loop74;
				}
			}

			char_literal238=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_enumType5190); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal238_tree = (Object)adaptor.create(char_literal238);
			adaptor.addChild(root_0, char_literal238_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 58, enumType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "enumType"


	public static class typeId_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "typeId"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:243:1: typeId : namespacedQualifiedIdent ;
	public final DelphiParser.typeId_return typeId() throws RecognitionException {
		DelphiParser.typeId_return retval = new DelphiParser.typeId_return();
		retval.start = input.LT(1);
		int typeId_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope namespacedQualifiedIdent239 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:243:30: ( namespacedQualifiedIdent )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:243:32: namespacedQualifiedIdent
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_namespacedQualifiedIdent_in_typeId5249);
			namespacedQualifiedIdent239=namespacedQualifiedIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, namespacedQualifiedIdent239.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 59, typeId_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "typeId"


	public static class genericTypeIdent_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "genericTypeIdent"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:248:1: genericTypeIdent : qualifiedIdent ( genericDefinition )? -> qualifiedIdent ;
	public final DelphiParser.genericTypeIdent_return genericTypeIdent() throws RecognitionException {
		DelphiParser.genericTypeIdent_return retval = new DelphiParser.genericTypeIdent_return();
		retval.start = input.LT(1);
		int genericTypeIdent_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope qualifiedIdent240 =null;
		ParserRuleReturnScope genericDefinition241 =null;

		RewriteRuleSubtreeStream stream_genericDefinition=new RewriteRuleSubtreeStream(adaptor,"rule genericDefinition");
		RewriteRuleSubtreeStream stream_qualifiedIdent=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdent");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:248:30: ( qualifiedIdent ( genericDefinition )? -> qualifiedIdent )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:248:32: qualifiedIdent ( genericDefinition )?
			{
			pushFollow(FOLLOW_qualifiedIdent_in_genericTypeIdent5301);
			qualifiedIdent240=qualifiedIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_qualifiedIdent.add(qualifiedIdent240.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:248:47: ( genericDefinition )?
			int alt75=2;
			int LA75_0 = input.LA(1);
			if ( (LA75_0==LT) ) {
				alt75=1;
			}
			switch (alt75) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:248:48: genericDefinition
					{
					pushFollow(FOLLOW_genericDefinition_in_genericTypeIdent5304);
					genericDefinition241=genericDefinition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_genericDefinition.add(genericDefinition241.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: qualifiedIdent
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 248:68: -> qualifiedIdent
			{
				adaptor.addChild(root_0, stream_qualifiedIdent.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 60, genericTypeIdent_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "genericTypeIdent"


	public static class genericDefinition_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "genericDefinition"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:250:1: genericDefinition : '<' innerGeneric ( ';' innerGeneric )* '>' ;
	public final DelphiParser.genericDefinition_return genericDefinition() throws RecognitionException {
		DelphiParser.genericDefinition_return retval = new DelphiParser.genericDefinition_return();
		retval.start = input.LT(1);
		int genericDefinition_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal242=null;
		Token char_literal244=null;
		Token char_literal246=null;
		ParserRuleReturnScope innerGeneric243 =null;
		ParserRuleReturnScope innerGeneric245 =null;

		Object char_literal242_tree=null;
		Object char_literal244_tree=null;
		Object char_literal246_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:250:29: ( '<' innerGeneric ( ';' innerGeneric )* '>' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:250:31: '<' innerGeneric ( ';' innerGeneric )* '>'
			{
			root_0 = (Object)adaptor.nil();


			char_literal242=(Token)match(input,LT,FOLLOW_LT_in_genericDefinition5361); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal242_tree = (Object)adaptor.create(char_literal242);
			adaptor.addChild(root_0, char_literal242_tree);
			}

			pushFollow(FOLLOW_innerGeneric_in_genericDefinition5363);
			innerGeneric243=innerGeneric();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, innerGeneric243.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:250:48: ( ';' innerGeneric )*
			loop76:
			while (true) {
				int alt76=2;
				int LA76_0 = input.LA(1);
				if ( (LA76_0==SEMI) ) {
					alt76=1;
				}

				switch (alt76) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:250:49: ';' innerGeneric
					{
					char_literal244=(Token)match(input,SEMI,FOLLOW_SEMI_in_genericDefinition5366); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal244_tree = (Object)adaptor.create(char_literal244);
					adaptor.addChild(root_0, char_literal244_tree);
					}

					pushFollow(FOLLOW_innerGeneric_in_genericDefinition5368);
					innerGeneric245=innerGeneric();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, innerGeneric245.getTree());

					}
					break;

				default :
					break loop76;
				}
			}

			char_literal246=(Token)match(input,GT,FOLLOW_GT_in_genericDefinition5372); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal246_tree = (Object)adaptor.create(char_literal246);
			adaptor.addChild(root_0, char_literal246_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 61, genericDefinition_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "genericDefinition"


	public static class innerGeneric_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "innerGeneric"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:252:1: innerGeneric : genericTypeIdent ( ',' genericTypeIdent )* ( ':' genericConstraint ( ',' genericConstraint )* )? ;
	public final DelphiParser.innerGeneric_return innerGeneric() throws RecognitionException {
		DelphiParser.innerGeneric_return retval = new DelphiParser.innerGeneric_return();
		retval.start = input.LT(1);
		int innerGeneric_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal248=null;
		Token char_literal250=null;
		Token char_literal252=null;
		ParserRuleReturnScope genericTypeIdent247 =null;
		ParserRuleReturnScope genericTypeIdent249 =null;
		ParserRuleReturnScope genericConstraint251 =null;
		ParserRuleReturnScope genericConstraint253 =null;

		Object char_literal248_tree=null;
		Object char_literal250_tree=null;
		Object char_literal252_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:252:30: ( genericTypeIdent ( ',' genericTypeIdent )* ( ':' genericConstraint ( ',' genericConstraint )* )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:252:32: genericTypeIdent ( ',' genericTypeIdent )* ( ':' genericConstraint ( ',' genericConstraint )* )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_genericTypeIdent_in_innerGeneric5425);
			genericTypeIdent247=genericTypeIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeIdent247.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:252:49: ( ',' genericTypeIdent )*
			loop77:
			while (true) {
				int alt77=2;
				int LA77_0 = input.LA(1);
				if ( (LA77_0==COMMA) ) {
					alt77=1;
				}

				switch (alt77) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:252:50: ',' genericTypeIdent
					{
					char_literal248=(Token)match(input,COMMA,FOLLOW_COMMA_in_innerGeneric5428); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal248_tree = (Object)adaptor.create(char_literal248);
					adaptor.addChild(root_0, char_literal248_tree);
					}

					pushFollow(FOLLOW_genericTypeIdent_in_innerGeneric5430);
					genericTypeIdent249=genericTypeIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeIdent249.getTree());

					}
					break;

				default :
					break loop77;
				}
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:252:73: ( ':' genericConstraint ( ',' genericConstraint )* )?
			int alt79=2;
			int LA79_0 = input.LA(1);
			if ( (LA79_0==COLON) ) {
				alt79=1;
			}
			switch (alt79) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:252:74: ':' genericConstraint ( ',' genericConstraint )*
					{
					char_literal250=(Token)match(input,COLON,FOLLOW_COLON_in_innerGeneric5435); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal250_tree = (Object)adaptor.create(char_literal250);
					adaptor.addChild(root_0, char_literal250_tree);
					}

					pushFollow(FOLLOW_genericConstraint_in_innerGeneric5437);
					genericConstraint251=genericConstraint();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, genericConstraint251.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:252:96: ( ',' genericConstraint )*
					loop78:
					while (true) {
						int alt78=2;
						int LA78_0 = input.LA(1);
						if ( (LA78_0==COMMA) ) {
							alt78=1;
						}

						switch (alt78) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:252:97: ',' genericConstraint
							{
							char_literal252=(Token)match(input,COMMA,FOLLOW_COMMA_in_innerGeneric5440); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal252_tree = (Object)adaptor.create(char_literal252);
							adaptor.addChild(root_0, char_literal252_tree);
							}

							pushFollow(FOLLOW_genericConstraint_in_innerGeneric5442);
							genericConstraint253=genericConstraint();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, genericConstraint253.getTree());

							}
							break;

						default :
							break loop78;
						}
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 62, innerGeneric_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "innerGeneric"


	public static class genericConstraint_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "genericConstraint"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:254:1: genericConstraint : ( genericTypeIdent | 'record' | 'class' | 'constructor' );
	public final DelphiParser.genericConstraint_return genericConstraint() throws RecognitionException {
		DelphiParser.genericConstraint_return retval = new DelphiParser.genericConstraint_return();
		retval.start = input.LT(1);
		int genericConstraint_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal255=null;
		Token string_literal256=null;
		Token string_literal257=null;
		ParserRuleReturnScope genericTypeIdent254 =null;

		Object string_literal255_tree=null;
		Object string_literal256_tree=null;
		Object string_literal257_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:254:30: ( genericTypeIdent | 'record' | 'class' | 'constructor' )
			int alt80=4;
			switch ( input.LA(1) ) {
			case ADD:
			case ANSISTRING:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case EXIT:
			case EXPORT:
			case FINAL:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STATIC:
			case STORED:
			case STRICT:
			case STRING:
			case TkIdentifier:
			case UNSAFE:
			case VARIANT:
			case WRITE:
			case 198:
				{
				alt80=1;
				}
				break;
			case RECORD:
				{
				alt80=2;
				}
				break;
			case CLASS:
				{
				alt80=3;
				}
				break;
			case CONSTRUCTOR:
				{
				alt80=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 80, 0, input);
				throw nvae;
			}
			switch (alt80) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:254:32: genericTypeIdent
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_genericTypeIdent_in_genericConstraint5494);
					genericTypeIdent254=genericTypeIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeIdent254.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:255:32: 'record'
					{
					root_0 = (Object)adaptor.nil();


					string_literal255=(Token)match(input,RECORD,FOLLOW_RECORD_in_genericConstraint5527); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal255_tree = (Object)adaptor.create(string_literal255);
					adaptor.addChild(root_0, string_literal255_tree);
					}

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:256:32: 'class'
					{
					root_0 = (Object)adaptor.nil();


					string_literal256=(Token)match(input,CLASS,FOLLOW_CLASS_in_genericConstraint5560); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal256_tree = (Object)adaptor.create(string_literal256);
					adaptor.addChild(root_0, string_literal256_tree);
					}

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:257:32: 'constructor'
					{
					root_0 = (Object)adaptor.nil();


					string_literal257=(Token)match(input,CONSTRUCTOR,FOLLOW_CONSTRUCTOR_in_genericConstraint5593); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal257_tree = (Object)adaptor.create(string_literal257);
					adaptor.addChild(root_0, string_literal257_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 63, genericConstraint_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "genericConstraint"


	public static class genericPostfix_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "genericPostfix"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:259:1: genericPostfix : '<' typeDecl ( ',' typeDecl )* '>' ;
	public final DelphiParser.genericPostfix_return genericPostfix() throws RecognitionException {
		DelphiParser.genericPostfix_return retval = new DelphiParser.genericPostfix_return();
		retval.start = input.LT(1);
		int genericPostfix_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal258=null;
		Token char_literal260=null;
		Token char_literal262=null;
		ParserRuleReturnScope typeDecl259 =null;
		ParserRuleReturnScope typeDecl261 =null;

		Object char_literal258_tree=null;
		Object char_literal260_tree=null;
		Object char_literal262_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:259:30: ( '<' typeDecl ( ',' typeDecl )* '>' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:259:32: '<' typeDecl ( ',' typeDecl )* '>'
			{
			root_0 = (Object)adaptor.nil();


			char_literal258=(Token)match(input,LT,FOLLOW_LT_in_genericPostfix5644); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal258_tree = (Object)adaptor.create(char_literal258);
			adaptor.addChild(root_0, char_literal258_tree);
			}

			pushFollow(FOLLOW_typeDecl_in_genericPostfix5646);
			typeDecl259=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl259.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:259:45: ( ',' typeDecl )*
			loop81:
			while (true) {
				int alt81=2;
				int LA81_0 = input.LA(1);
				if ( (LA81_0==COMMA) ) {
					alt81=1;
				}

				switch (alt81) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:259:46: ',' typeDecl
					{
					char_literal260=(Token)match(input,COMMA,FOLLOW_COMMA_in_genericPostfix5649); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal260_tree = (Object)adaptor.create(char_literal260);
					adaptor.addChild(root_0, char_literal260_tree);
					}

					pushFollow(FOLLOW_typeDecl_in_genericPostfix5651);
					typeDecl261=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl261.getTree());

					}
					break;

				default :
					break loop81;
				}
			}

			char_literal262=(Token)match(input,GT,FOLLOW_GT_in_genericPostfix5655); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal262_tree = (Object)adaptor.create(char_literal262);
			adaptor.addChild(root_0, char_literal262_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 64, genericPostfix_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "genericPostfix"


	public static class paranthesePostfix_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "paranthesePostfix"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:261:1: paranthesePostfix : '(' intRealNum ')' ;
	public final DelphiParser.paranthesePostfix_return paranthesePostfix() throws RecognitionException {
		DelphiParser.paranthesePostfix_return retval = new DelphiParser.paranthesePostfix_return();
		retval.start = input.LT(1);
		int paranthesePostfix_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal263=null;
		Token char_literal265=null;
		ParserRuleReturnScope intRealNum264 =null;

		Object char_literal263_tree=null;
		Object char_literal265_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:261:30: ( '(' intRealNum ')' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:261:32: '(' intRealNum ')'
			{
			root_0 = (Object)adaptor.nil();


			char_literal263=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_paranthesePostfix5703); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal263_tree = (Object)adaptor.create(char_literal263);
			adaptor.addChild(root_0, char_literal263_tree);
			}

			pushFollow(FOLLOW_intRealNum_in_paranthesePostfix5705);
			intRealNum264=intRealNum();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, intRealNum264.getTree());

			char_literal265=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_paranthesePostfix5707); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal265_tree = (Object)adaptor.create(char_literal265);
			adaptor.addChild(root_0, char_literal265_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 65, paranthesePostfix_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "paranthesePostfix"


	public static class classDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classDecl"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:266:1: classDecl : ( classTypeTypeDecl | classTypeDecl -> ^( TkClass classTypeDecl ) | classHelperDecl -> ^( TkClass classHelperDecl ) | interfaceTypeDecl -> ^( TkInterface interfaceTypeDecl ) | objectDecl -> ^( TkObject objectDecl ) | recordDecl -> ^( TkRecord recordDecl ) | recordHelperDecl -> ^( TkRecordHelper recordHelperDecl ) );
	public final DelphiParser.classDecl_return classDecl() throws RecognitionException {
		DelphiParser.classDecl_return retval = new DelphiParser.classDecl_return();
		retval.start = input.LT(1);
		int classDecl_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope classTypeTypeDecl266 =null;
		ParserRuleReturnScope classTypeDecl267 =null;
		ParserRuleReturnScope classHelperDecl268 =null;
		ParserRuleReturnScope interfaceTypeDecl269 =null;
		ParserRuleReturnScope objectDecl270 =null;
		ParserRuleReturnScope recordDecl271 =null;
		ParserRuleReturnScope recordHelperDecl272 =null;

		RewriteRuleSubtreeStream stream_interfaceTypeDecl=new RewriteRuleSubtreeStream(adaptor,"rule interfaceTypeDecl");
		RewriteRuleSubtreeStream stream_recordHelperDecl=new RewriteRuleSubtreeStream(adaptor,"rule recordHelperDecl");
		RewriteRuleSubtreeStream stream_objectDecl=new RewriteRuleSubtreeStream(adaptor,"rule objectDecl");
		RewriteRuleSubtreeStream stream_classHelperDecl=new RewriteRuleSubtreeStream(adaptor,"rule classHelperDecl");
		RewriteRuleSubtreeStream stream_recordDecl=new RewriteRuleSubtreeStream(adaptor,"rule recordDecl");
		RewriteRuleSubtreeStream stream_classTypeDecl=new RewriteRuleSubtreeStream(adaptor,"rule classTypeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:266:30: ( classTypeTypeDecl | classTypeDecl -> ^( TkClass classTypeDecl ) | classHelperDecl -> ^( TkClass classHelperDecl ) | interfaceTypeDecl -> ^( TkInterface interfaceTypeDecl ) | objectDecl -> ^( TkObject objectDecl ) | recordDecl -> ^( TkRecord recordDecl ) | recordHelperDecl -> ^( TkRecordHelper recordHelperDecl ) )
			int alt82=7;
			switch ( input.LA(1) ) {
			case CLASS:
				{
				switch ( input.LA(2) ) {
				case OF:
					{
					switch ( input.LA(3) ) {
					case OBJECT:
						{
						int LA82_10 = input.LA(4);
						if ( (synpred110_Delphi()) ) {
							alt82=1;
						}
						else if ( (synpred111_Delphi()) ) {
							alt82=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 82, 10, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case TkIdentifier:
						{
						int LA82_11 = input.LA(4);
						if ( (synpred110_Delphi()) ) {
							alt82=1;
						}
						else if ( (synpred111_Delphi()) ) {
							alt82=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 82, 11, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case 198:
						{
						int LA82_12 = input.LA(4);
						if ( (LA82_12==TkIdentifier) ) {
							int LA82_15 = input.LA(5);
							if ( (synpred110_Delphi()) ) {
								alt82=1;
							}
							else if ( (synpred111_Delphi()) ) {
								alt82=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 82, 15, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}
						else if ( ((LA82_12 >= ABSOLUTE && LA82_12 <= ASSEMBLY)||LA82_12==AT||LA82_12==AUTOMATED||(LA82_12 >= BEGIN && LA82_12 <= CLASS)||(LA82_12 >= CONST && LA82_12 <= CONTINUE)||(LA82_12 >= DEFAULT && LA82_12 <= DO)||(LA82_12 >= DOWNTO && LA82_12 <= DYNAMIC)||(LA82_12 >= ELSE && LA82_12 <= END)||(LA82_12 >= EXCEPT && LA82_12 <= FUNCTION)||LA82_12==GOTO||LA82_12==HELPER||(LA82_12 >= IF && LA82_12 <= LABEL)||(LA82_12 >= LIBRARY && LA82_12 <= LOCAL)||LA82_12==MESSAGE||(LA82_12 >= MOD && LA82_12 <= NOT)||(LA82_12 >= OBJECT && LA82_12 <= PLATFORM)||LA82_12==POINTER||(LA82_12 >= PRIVATE && LA82_12 <= PUBLISHED)||LA82_12==RAISE||(LA82_12 >= READ && LA82_12 <= RESOURCESTRING)||(LA82_12 >= SAFECALL && LA82_12 <= SEALED)||(LA82_12 >= SET && LA82_12 <= SHR)||(LA82_12 >= STATIC && LA82_12 <= TYPE)||(LA82_12 >= UNIT && LA82_12 <= USES)||(LA82_12 >= VAR && LA82_12 <= WRITEONLY)||LA82_12==XOR) ) {
							int LA82_16 = input.LA(5);
							if ( (synpred110_Delphi()) ) {
								alt82=1;
							}
							else if ( (synpred111_Delphi()) ) {
								alt82=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 82, 16, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 82, 12, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case ADD:
					case ANSISTRING:
					case AT:
					case BREAK:
					case CONTAINS:
					case CONTINUE:
					case DEFAULT:
					case EXIT:
					case EXPORT:
					case FINAL:
					case IMPLEMENTS:
					case INDEX:
					case LOCAL:
					case MESSAGE:
					case NAME:
					case OPERATOR:
					case OUT:
					case POINTER:
					case READ:
					case READONLY:
					case REFERENCE:
					case REGISTER:
					case REMOVE:
					case STATIC:
					case STORED:
					case STRICT:
					case STRING:
					case UNSAFE:
					case VARIANT:
					case WRITE:
						{
						int LA82_13 = input.LA(4);
						if ( (synpred110_Delphi()) ) {
							alt82=1;
						}
						else if ( (synpred111_Delphi()) ) {
							alt82=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 82, 13, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case AND:
					case AS:
					case AT2:
					case COLON:
					case COMMA:
					case ControlString:
					case DIV:
					case DOT:
					case DOTDOT:
					case ELSE:
					case END:
					case EQUAL:
					case FALSE:
					case FUNCTION:
					case GE:
					case GT:
					case IN:
					case INHERITED:
					case IS:
					case LBRACK:
					case LE:
					case LPAREN:
					case LT:
					case MINUS:
					case MOD:
					case NIL:
					case NOT:
					case NOT_EQUAL:
					case OR:
					case PLUS:
					case POINTER2:
					case PROCEDURE:
					case QuotedString:
					case SEMI:
					case SHL:
					case SHR:
					case SLASH:
					case STAR:
					case TRUE:
					case TkHexNum:
					case TkIntNum:
					case TkRealNum:
					case XOR:
					case 199:
						{
						alt82=2;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 82, 5, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}
					}
					break;
				case HELPER:
					{
					alt82=3;
					}
					break;
				case EOF:
				case ABSOLUTE:
				case ABSTRACT:
				case ADD:
				case AND:
				case ANSISTRING:
				case AS:
				case ASM:
				case ASSEMBLER:
				case AT:
				case AT2:
				case AUTOMATED:
				case BEGIN:
				case BREAK:
				case CASE:
				case CDECL:
				case CLASS:
				case COLON:
				case COMMA:
				case CONST:
				case CONSTRUCTOR:
				case CONTAINS:
				case CONTINUE:
				case ControlString:
				case DEFAULT:
				case DEPRECATED:
				case DESTRUCTOR:
				case DISPID:
				case DIV:
				case DO:
				case DOT:
				case DOTDOT:
				case DOWNTO:
				case ELSE:
				case END:
				case EQUAL:
				case EXCEPT:
				case EXIT:
				case EXPERIMENTAL:
				case EXPORT:
				case EXPORTS:
				case EXTERNAL:
				case FALSE:
				case FAR:
				case FINAL:
				case FINALIZATION:
				case FINALLY:
				case FUNCTION:
				case GE:
				case GT:
				case IMPLEMENTATION:
				case IMPLEMENTS:
				case IN:
				case INDEX:
				case INHERITED:
				case INITIALIZATION:
				case INLINE:
				case IS:
				case LABEL:
				case LBRACK:
				case LE:
				case LIBRARY:
				case LOCAL:
				case LPAREN:
				case LT:
				case MESSAGE:
				case MINUS:
				case MOD:
				case NAME:
				case NEAR:
				case NIL:
				case NODEFAULT:
				case NOT:
				case NOT_EQUAL:
				case OBJECT:
				case ON:
				case OPERATOR:
				case OR:
				case OUT:
				case OVERLOAD:
				case PASCAL:
				case PLATFORM:
				case PLUS:
				case POINTER:
				case POINTER2:
				case PRIVATE:
				case PROCEDURE:
				case PROPERTY:
				case PROTECTED:
				case PUBLIC:
				case PUBLISHED:
				case QuotedString:
				case RBRACK:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case RESIDENT:
				case RESOURCESTRING:
				case RPAREN:
				case SAFECALL:
				case SEALED:
				case SEMI:
				case SHL:
				case SHR:
				case SLASH:
				case STAR:
				case STATIC:
				case STDCALL:
				case STORED:
				case STRICT:
				case STRING:
				case THEN:
				case THREADVAR:
				case TO:
				case TRUE:
				case TYPE:
				case TkHexNum:
				case TkIdentifier:
				case TkIntNum:
				case TkRealNum:
				case UNSAFE:
				case UNTIL:
				case VAR:
				case VARARGS:
				case VARIANT:
				case WRITE:
				case WRITEONLY:
				case XOR:
				case 198:
				case 199:
					{
					alt82=2;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 82, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case DISPINTERFACE:
			case INTERFACE:
				{
				alt82=4;
				}
				break;
			case OBJECT:
				{
				alt82=5;
				}
				break;
			case RECORD:
				{
				int LA82_4 = input.LA(2);
				if ( (LA82_4==HELPER) ) {
					alt82=7;
				}
				else if ( (LA82_4==ADD||LA82_4==ANSISTRING||LA82_4==AT||LA82_4==AUTOMATED||(LA82_4 >= BREAK && LA82_4 <= CASE)||LA82_4==CLASS||(LA82_4 >= CONST && LA82_4 <= CONTINUE)||LA82_4==DEFAULT||LA82_4==DESTRUCTOR||LA82_4==END||LA82_4==EXIT||LA82_4==EXPORT||LA82_4==FINAL||LA82_4==FUNCTION||LA82_4==IMPLEMENTS||LA82_4==INDEX||LA82_4==LBRACK||LA82_4==LOCAL||LA82_4==MESSAGE||LA82_4==NAME||LA82_4==OBJECT||LA82_4==OPERATOR||LA82_4==OUT||LA82_4==POINTER||(LA82_4 >= PRIVATE && LA82_4 <= PROCEDURE)||(LA82_4 >= PROPERTY && LA82_4 <= PUBLISHED)||(LA82_4 >= READ && LA82_4 <= READONLY)||(LA82_4 >= REFERENCE && LA82_4 <= REGISTER)||LA82_4==REMOVE||LA82_4==RESOURCESTRING||LA82_4==STATIC||(LA82_4 >= STORED && LA82_4 <= STRING)||LA82_4==THREADVAR||LA82_4==TYPE||LA82_4==TkIdentifier||LA82_4==UNSAFE||LA82_4==VAR||LA82_4==VARIANT||LA82_4==WRITE||LA82_4==198) ) {
					alt82=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 82, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 82, 0, input);
				throw nvae;
			}
			switch (alt82) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:266:32: classTypeTypeDecl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classTypeTypeDecl_in_classDecl5767);
					classTypeTypeDecl266=classTypeTypeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classTypeTypeDecl266.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:267:32: classTypeDecl
					{
					pushFollow(FOLLOW_classTypeDecl_in_classDecl5800);
					classTypeDecl267=classTypeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classTypeDecl.add(classTypeDecl267.getTree());
					// AST REWRITE
					// elements: classTypeDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 267:46: -> ^( TkClass classTypeDecl )
					{
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:267:49: ^( TkClass classTypeDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClass, "TkClass"), root_1);
						adaptor.addChild(root_1, stream_classTypeDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:268:32: classHelperDecl
					{
					pushFollow(FOLLOW_classHelperDecl_in_classDecl5841);
					classHelperDecl268=classHelperDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classHelperDecl.add(classHelperDecl268.getTree());
					// AST REWRITE
					// elements: classHelperDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 268:48: -> ^( TkClass classHelperDecl )
					{
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:268:51: ^( TkClass classHelperDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClass, "TkClass"), root_1);
						adaptor.addChild(root_1, stream_classHelperDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:269:32: interfaceTypeDecl
					{
					pushFollow(FOLLOW_interfaceTypeDecl_in_classDecl5882);
					interfaceTypeDecl269=interfaceTypeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_interfaceTypeDecl.add(interfaceTypeDecl269.getTree());
					// AST REWRITE
					// elements: interfaceTypeDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 269:50: -> ^( TkInterface interfaceTypeDecl )
					{
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:269:53: ^( TkInterface interfaceTypeDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkInterface, "TkInterface"), root_1);
						adaptor.addChild(root_1, stream_interfaceTypeDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 5 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:270:32: objectDecl
					{
					pushFollow(FOLLOW_objectDecl_in_classDecl5923);
					objectDecl270=objectDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_objectDecl.add(objectDecl270.getTree());
					// AST REWRITE
					// elements: objectDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 270:43: -> ^( TkObject objectDecl )
					{
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:270:46: ^( TkObject objectDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkObject, "TkObject"), root_1);
						adaptor.addChild(root_1, stream_objectDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 6 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:271:32: recordDecl
					{
					pushFollow(FOLLOW_recordDecl_in_classDecl5964);
					recordDecl271=recordDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_recordDecl.add(recordDecl271.getTree());
					// AST REWRITE
					// elements: recordDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 271:43: -> ^( TkRecord recordDecl )
					{
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:271:46: ^( TkRecord recordDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkRecord, "TkRecord"), root_1);
						adaptor.addChild(root_1, stream_recordDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 7 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:272:32: recordHelperDecl
					{
					pushFollow(FOLLOW_recordHelperDecl_in_classDecl6005);
					recordHelperDecl272=recordHelperDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_recordHelperDecl.add(recordHelperDecl272.getTree());
					// AST REWRITE
					// elements: recordHelperDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 272:49: -> ^( TkRecordHelper recordHelperDecl )
					{
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:272:52: ^( TkRecordHelper recordHelperDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkRecordHelper, "TkRecordHelper"), root_1);
						adaptor.addChild(root_1, stream_recordHelperDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 66, classDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classDecl"


	public static class classTypeTypeDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classTypeTypeDecl"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:274:1: classTypeTypeDecl : 'class' 'of' typeId -> ^( TkClassOfType typeId ) ;
	public final DelphiParser.classTypeTypeDecl_return classTypeTypeDecl() throws RecognitionException {
		DelphiParser.classTypeTypeDecl_return retval = new DelphiParser.classTypeTypeDecl_return();
		retval.start = input.LT(1);
		int classTypeTypeDecl_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal273=null;
		Token string_literal274=null;
		ParserRuleReturnScope typeId275 =null;

		Object string_literal273_tree=null;
		Object string_literal274_tree=null;
		RewriteRuleTokenStream stream_OF=new RewriteRuleTokenStream(adaptor,"token OF");
		RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
		RewriteRuleSubtreeStream stream_typeId=new RewriteRuleSubtreeStream(adaptor,"rule typeId");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:274:30: ( 'class' 'of' typeId -> ^( TkClassOfType typeId ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:274:32: 'class' 'of' typeId
			{
			string_literal273=(Token)match(input,CLASS,FOLLOW_CLASS_in_classTypeTypeDecl6061); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_CLASS.add(string_literal273);

			string_literal274=(Token)match(input,OF,FOLLOW_OF_in_classTypeTypeDecl6063); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_OF.add(string_literal274);

			pushFollow(FOLLOW_typeId_in_classTypeTypeDecl6065);
			typeId275=typeId();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeId.add(typeId275.getTree());
			// AST REWRITE
			// elements: typeId
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 274:52: -> ^( TkClassOfType typeId )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:274:55: ^( TkClassOfType typeId )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClassOfType, "TkClassOfType"), root_1);
				adaptor.addChild(root_1, stream_typeId.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 67, classTypeTypeDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classTypeTypeDecl"


	public static class classTypeDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classTypeDecl"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:276:1: classTypeDecl : ( 'class' ( classState )? ( classParent )? ( classItem )* 'end' -> 'class' ^( TkClassParents ( classParent )? ) ( classItem )* | 'class' ( classParent )? -> 'class' ^( TkClassParents ( classParent )? ) );
	public final DelphiParser.classTypeDecl_return classTypeDecl() throws RecognitionException {
		DelphiParser.classTypeDecl_return retval = new DelphiParser.classTypeDecl_return();
		retval.start = input.LT(1);
		int classTypeDecl_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal276=null;
		Token string_literal280=null;
		Token string_literal281=null;
		ParserRuleReturnScope classState277 =null;
		ParserRuleReturnScope classParent278 =null;
		ParserRuleReturnScope classItem279 =null;
		ParserRuleReturnScope classParent282 =null;

		Object string_literal276_tree=null;
		Object string_literal280_tree=null;
		Object string_literal281_tree=null;
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
		RewriteRuleSubtreeStream stream_classState=new RewriteRuleSubtreeStream(adaptor,"rule classState");
		RewriteRuleSubtreeStream stream_classParent=new RewriteRuleSubtreeStream(adaptor,"rule classParent");
		RewriteRuleSubtreeStream stream_classItem=new RewriteRuleSubtreeStream(adaptor,"rule classItem");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:276:30: ( 'class' ( classState )? ( classParent )? ( classItem )* 'end' -> 'class' ^( TkClassParents ( classParent )? ) ( classItem )* | 'class' ( classParent )? -> 'class' ^( TkClassParents ( classParent )? ) )
			int alt87=2;
			int LA87_0 = input.LA(1);
			if ( (LA87_0==CLASS) ) {
				int LA87_1 = input.LA(2);
				if ( (synpred119_Delphi()) ) {
					alt87=1;
				}
				else if ( (true) ) {
					alt87=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 87, 0, input);
				throw nvae;
			}

			switch (alt87) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:276:32: 'class' ( classState )? ( classParent )? ( classItem )* 'end'
					{
					string_literal276=(Token)match(input,CLASS,FOLLOW_CLASS_in_classTypeDecl6125); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_CLASS.add(string_literal276);

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:276:40: ( classState )?
					int alt83=2;
					int LA83_0 = input.LA(1);
					if ( (LA83_0==ABSTRACT||LA83_0==SEALED) ) {
						alt83=1;
					}
					switch (alt83) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:276:41: classState
							{
							pushFollow(FOLLOW_classState_in_classTypeDecl6128);
							classState277=classState();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_classState.add(classState277.getTree());
							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:276:54: ( classParent )?
					int alt84=2;
					int LA84_0 = input.LA(1);
					if ( (LA84_0==LPAREN) ) {
						alt84=1;
					}
					switch (alt84) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:276:55: classParent
							{
							pushFollow(FOLLOW_classParent_in_classTypeDecl6133);
							classParent278=classParent();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_classParent.add(classParent278.getTree());
							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:276:69: ( classItem )*
					loop85:
					while (true) {
						int alt85=2;
						int LA85_0 = input.LA(1);
						if ( (LA85_0==ADD||LA85_0==ANSISTRING||LA85_0==AT||LA85_0==AUTOMATED||LA85_0==BREAK||LA85_0==CLASS||(LA85_0 >= CONST && LA85_0 <= CONTINUE)||LA85_0==DEFAULT||LA85_0==DESTRUCTOR||LA85_0==EXIT||LA85_0==EXPORT||LA85_0==FINAL||LA85_0==FUNCTION||LA85_0==IMPLEMENTS||LA85_0==INDEX||LA85_0==LBRACK||LA85_0==LOCAL||LA85_0==MESSAGE||LA85_0==NAME||LA85_0==OBJECT||LA85_0==OPERATOR||LA85_0==OUT||LA85_0==POINTER||(LA85_0 >= PRIVATE && LA85_0 <= PROCEDURE)||(LA85_0 >= PROPERTY && LA85_0 <= PUBLISHED)||(LA85_0 >= READ && LA85_0 <= READONLY)||(LA85_0 >= REFERENCE && LA85_0 <= REGISTER)||LA85_0==REMOVE||LA85_0==RESOURCESTRING||LA85_0==STATIC||(LA85_0 >= STORED && LA85_0 <= STRING)||LA85_0==THREADVAR||LA85_0==TYPE||LA85_0==TkIdentifier||LA85_0==UNSAFE||LA85_0==VAR||LA85_0==VARIANT||LA85_0==WRITE||LA85_0==198) ) {
							alt85=1;
						}

						switch (alt85) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:276:70: classItem
							{
							pushFollow(FOLLOW_classItem_in_classTypeDecl6138);
							classItem279=classItem();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_classItem.add(classItem279.getTree());
							}
							break;

						default :
							break loop85;
						}
					}

					string_literal280=(Token)match(input,END,FOLLOW_END_in_classTypeDecl6142); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_END.add(string_literal280);

					// AST REWRITE
					// elements: classParent, CLASS, classItem
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 276:88: -> 'class' ^( TkClassParents ( classParent )? ) ( classItem )*
					{
						adaptor.addChild(root_0, stream_CLASS.nextNode());
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:276:99: ^( TkClassParents ( classParent )? )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClassParents, "TkClassParents"), root_1);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:276:116: ( classParent )?
						if ( stream_classParent.hasNext() ) {
							adaptor.addChild(root_1, stream_classParent.nextTree());
						}
						stream_classParent.reset();

						adaptor.addChild(root_0, root_1);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:276:132: ( classItem )*
						while ( stream_classItem.hasNext() ) {
							adaptor.addChild(root_0, stream_classItem.nextTree());
						}
						stream_classItem.reset();

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:277:32: 'class' ( classParent )?
					{
					string_literal281=(Token)match(input,CLASS,FOLLOW_CLASS_in_classTypeDecl6193); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_CLASS.add(string_literal281);

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:277:40: ( classParent )?
					int alt86=2;
					alt86 = dfa86.predict(input);
					switch (alt86) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:277:41: classParent
							{
							pushFollow(FOLLOW_classParent_in_classTypeDecl6196);
							classParent282=classParent();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_classParent.add(classParent282.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: classParent, CLASS
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 277:55: -> 'class' ^( TkClassParents ( classParent )? )
					{
						adaptor.addChild(root_0, stream_CLASS.nextNode());
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:277:66: ^( TkClassParents ( classParent )? )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClassParents, "TkClassParents"), root_1);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:277:83: ( classParent )?
						if ( stream_classParent.hasNext() ) {
							adaptor.addChild(root_1, stream_classParent.nextTree());
						}
						stream_classParent.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 68, classTypeDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classTypeDecl"


	public static class classState_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classState"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:279:1: classState : ( 'sealed' | 'abstract' );
	public final DelphiParser.classState_return classState() throws RecognitionException {
		DelphiParser.classState_return retval = new DelphiParser.classState_return();
		retval.start = input.LT(1);
		int classState_StartIndex = input.index();

		Object root_0 = null;

		Token set283=null;

		Object set283_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:279:30: ( 'sealed' | 'abstract' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set283=input.LT(1);
			if ( input.LA(1)==ABSTRACT||input.LA(1)==SEALED ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set283));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 69, classState_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classState"


	public static class classParent_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classParent"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:1: classParent : '(' genericTypeIdent ( ',' genericTypeIdent )* ')' -> genericTypeIdent ( genericTypeIdent )* ;
	public final DelphiParser.classParent_return classParent() throws RecognitionException {
		DelphiParser.classParent_return retval = new DelphiParser.classParent_return();
		retval.start = input.LT(1);
		int classParent_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal284=null;
		Token char_literal286=null;
		Token char_literal288=null;
		ParserRuleReturnScope genericTypeIdent285 =null;
		ParserRuleReturnScope genericTypeIdent287 =null;

		Object char_literal284_tree=null;
		Object char_literal286_tree=null;
		Object char_literal288_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_genericTypeIdent=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeIdent");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:30: ( '(' genericTypeIdent ( ',' genericTypeIdent )* ')' -> genericTypeIdent ( genericTypeIdent )* )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:32: '(' genericTypeIdent ( ',' genericTypeIdent )* ')'
			{
			char_literal284=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_classParent6353); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(char_literal284);

			pushFollow(FOLLOW_genericTypeIdent_in_classParent6355);
			genericTypeIdent285=genericTypeIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_genericTypeIdent.add(genericTypeIdent285.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:53: ( ',' genericTypeIdent )*
			loop88:
			while (true) {
				int alt88=2;
				int LA88_0 = input.LA(1);
				if ( (LA88_0==COMMA) ) {
					alt88=1;
				}

				switch (alt88) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:54: ',' genericTypeIdent
					{
					char_literal286=(Token)match(input,COMMA,FOLLOW_COMMA_in_classParent6358); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(char_literal286);

					pushFollow(FOLLOW_genericTypeIdent_in_classParent6360);
					genericTypeIdent287=genericTypeIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_genericTypeIdent.add(genericTypeIdent287.getTree());
					}
					break;

				default :
					break loop88;
				}
			}

			char_literal288=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_classParent6364); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(char_literal288);

			// AST REWRITE
			// elements: genericTypeIdent, genericTypeIdent
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 282:81: -> genericTypeIdent ( genericTypeIdent )*
			{
				adaptor.addChild(root_0, stream_genericTypeIdent.nextTree());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:101: ( genericTypeIdent )*
				while ( stream_genericTypeIdent.hasNext() ) {
					adaptor.addChild(root_0, stream_genericTypeIdent.nextTree());
				}
				stream_genericTypeIdent.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 70, classParent_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classParent"


	public static class classItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classItem"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:1: classItem : ( visibility | classMethod | classField | classProperty | constSection | typeSection | ( 'class' )? varSection );
	public final DelphiParser.classItem_return classItem() throws RecognitionException {
		DelphiParser.classItem_return retval = new DelphiParser.classItem_return();
		retval.start = input.LT(1);
		int classItem_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal295=null;
		ParserRuleReturnScope visibility289 =null;
		ParserRuleReturnScope classMethod290 =null;
		ParserRuleReturnScope classField291 =null;
		ParserRuleReturnScope classProperty292 =null;
		ParserRuleReturnScope constSection293 =null;
		ParserRuleReturnScope typeSection294 =null;
		ParserRuleReturnScope varSection296 =null;

		Object string_literal295_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:30: ( visibility | classMethod | classField | classProperty | constSection | typeSection | ( 'class' )? varSection )
			int alt90=7;
			switch ( input.LA(1) ) {
			case STRICT:
				{
				int LA90_1 = input.LA(2);
				if ( (synpred123_Delphi()) ) {
					alt90=1;
				}
				else if ( (synpred125_Delphi()) ) {
					alt90=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 90, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AUTOMATED:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case PUBLISHED:
				{
				alt90=1;
				}
				break;
			case LBRACK:
				{
				int LA90_7 = input.LA(2);
				if ( (synpred124_Delphi()) ) {
					alt90=2;
				}
				else if ( (synpred125_Delphi()) ) {
					alt90=3;
				}
				else if ( (synpred126_Delphi()) ) {
					alt90=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 90, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CLASS:
				{
				int LA90_8 = input.LA(2);
				if ( (synpred124_Delphi()) ) {
					alt90=2;
				}
				else if ( (synpred126_Delphi()) ) {
					alt90=4;
				}
				else if ( (true) ) {
					alt90=7;
				}

				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case FUNCTION:
			case PROCEDURE:
				{
				alt90=2;
				}
				break;
			case OPERATOR:
				{
				int LA90_11 = input.LA(2);
				if ( (synpred124_Delphi()) ) {
					alt90=2;
				}
				else if ( (synpred125_Delphi()) ) {
					alt90=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 90, 11, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ADD:
			case ANSISTRING:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case EXIT:
			case EXPORT:
			case FINAL:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OUT:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STATIC:
			case STORED:
			case STRING:
			case TkIdentifier:
			case UNSAFE:
			case VARIANT:
			case WRITE:
			case 198:
				{
				alt90=3;
				}
				break;
			case PROPERTY:
				{
				alt90=4;
				}
				break;
			case CONST:
			case RESOURCESTRING:
				{
				alt90=5;
				}
				break;
			case TYPE:
				{
				alt90=6;
				}
				break;
			case THREADVAR:
			case VAR:
				{
				alt90=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 90, 0, input);
				throw nvae;
			}
			switch (alt90) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:32: visibility
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_visibility_in_classItem6432);
					visibility289=visibility();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, visibility289.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:285:32: classMethod
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classMethod_in_classItem6465);
					classMethod290=classMethod();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classMethod290.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:286:32: classField
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classField_in_classItem6498);
					classField291=classField();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classField291.getTree());

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:287:32: classProperty
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classProperty_in_classItem6531);
					classProperty292=classProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classProperty292.getTree());

					}
					break;
				case 5 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:288:32: constSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_constSection_in_classItem6564);
					constSection293=constSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constSection293.getTree());

					}
					break;
				case 6 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:289:32: typeSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_typeSection_in_classItem6597);
					typeSection294=typeSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeSection294.getTree());

					}
					break;
				case 7 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:290:32: ( 'class' )? varSection
					{
					root_0 = (Object)adaptor.nil();


					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:290:32: ( 'class' )?
					int alt89=2;
					int LA89_0 = input.LA(1);
					if ( (LA89_0==CLASS) ) {
						alt89=1;
					}
					switch (alt89) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:290:33: 'class'
							{
							string_literal295=(Token)match(input,CLASS,FOLLOW_CLASS_in_classItem6631); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal295_tree = (Object)adaptor.create(string_literal295);
							adaptor.addChild(root_0, string_literal295_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_varSection_in_classItem6635);
					varSection296=varSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, varSection296.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 71, classItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classItem"


	public static class classHelperDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classHelperDecl"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:292:1: classHelperDecl : 'class' 'helper' ( classParent )? 'for' typeId ( classHelperItem )* 'end' -> ^( 'class' typeId ) ( classHelperItem )* ;
	public final DelphiParser.classHelperDecl_return classHelperDecl() throws RecognitionException {
		DelphiParser.classHelperDecl_return retval = new DelphiParser.classHelperDecl_return();
		retval.start = input.LT(1);
		int classHelperDecl_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal297=null;
		Token string_literal298=null;
		Token string_literal300=null;
		Token string_literal303=null;
		ParserRuleReturnScope classParent299 =null;
		ParserRuleReturnScope typeId301 =null;
		ParserRuleReturnScope classHelperItem302 =null;

		Object string_literal297_tree=null;
		Object string_literal298_tree=null;
		Object string_literal300_tree=null;
		Object string_literal303_tree=null;
		RewriteRuleTokenStream stream_HELPER=new RewriteRuleTokenStream(adaptor,"token HELPER");
		RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
		RewriteRuleSubtreeStream stream_classHelperItem=new RewriteRuleSubtreeStream(adaptor,"rule classHelperItem");
		RewriteRuleSubtreeStream stream_typeId=new RewriteRuleSubtreeStream(adaptor,"rule typeId");
		RewriteRuleSubtreeStream stream_classParent=new RewriteRuleSubtreeStream(adaptor,"rule classParent");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:292:30: ( 'class' 'helper' ( classParent )? 'for' typeId ( classHelperItem )* 'end' -> ^( 'class' typeId ) ( classHelperItem )* )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:292:32: 'class' 'helper' ( classParent )? 'for' typeId ( classHelperItem )* 'end'
			{
			string_literal297=(Token)match(input,CLASS,FOLLOW_CLASS_in_classHelperDecl6685); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_CLASS.add(string_literal297);

			string_literal298=(Token)match(input,HELPER,FOLLOW_HELPER_in_classHelperDecl6687); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_HELPER.add(string_literal298);

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:292:49: ( classParent )?
			int alt91=2;
			int LA91_0 = input.LA(1);
			if ( (LA91_0==LPAREN) ) {
				alt91=1;
			}
			switch (alt91) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:292:50: classParent
					{
					pushFollow(FOLLOW_classParent_in_classHelperDecl6690);
					classParent299=classParent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classParent.add(classParent299.getTree());
					}
					break;

			}

			string_literal300=(Token)match(input,FOR,FOLLOW_FOR_in_classHelperDecl6694); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_FOR.add(string_literal300);

			pushFollow(FOLLOW_typeId_in_classHelperDecl6696);
			typeId301=typeId();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeId.add(typeId301.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:292:77: ( classHelperItem )*
			loop92:
			while (true) {
				int alt92=2;
				int LA92_0 = input.LA(1);
				if ( (LA92_0==AUTOMATED||LA92_0==CLASS||(LA92_0 >= CONST && LA92_0 <= CONSTRUCTOR)||LA92_0==DESTRUCTOR||LA92_0==FUNCTION||LA92_0==LBRACK||LA92_0==OPERATOR||(LA92_0 >= PRIVATE && LA92_0 <= PROCEDURE)||(LA92_0 >= PROPERTY && LA92_0 <= PUBLISHED)||LA92_0==RESOURCESTRING||LA92_0==STRICT||LA92_0==THREADVAR||LA92_0==TYPE||LA92_0==VAR) ) {
					alt92=1;
				}

				switch (alt92) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:292:78: classHelperItem
					{
					pushFollow(FOLLOW_classHelperItem_in_classHelperDecl6699);
					classHelperItem302=classHelperItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classHelperItem.add(classHelperItem302.getTree());
					}
					break;

				default :
					break loop92;
				}
			}

			string_literal303=(Token)match(input,END,FOLLOW_END_in_classHelperDecl6703); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_END.add(string_literal303);

			// AST REWRITE
			// elements: typeId, CLASS, classHelperItem
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 292:102: -> ^( 'class' typeId ) ( classHelperItem )*
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:292:105: ^( 'class' typeId )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_CLASS.nextNode(), root_1);
				adaptor.addChild(root_1, stream_typeId.nextTree());
				adaptor.addChild(root_0, root_1);
				}

				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:292:124: ( classHelperItem )*
				while ( stream_classHelperItem.hasNext() ) {
					adaptor.addChild(root_0, stream_classHelperItem.nextTree());
				}
				stream_classHelperItem.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 72, classHelperDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classHelperDecl"


	public static class classHelperItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classHelperItem"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:294:1: classHelperItem : ( visibility | classMethod | classProperty | constSection | typeSection | ( 'class' )? varSection );
	public final DelphiParser.classHelperItem_return classHelperItem() throws RecognitionException {
		DelphiParser.classHelperItem_return retval = new DelphiParser.classHelperItem_return();
		retval.start = input.LT(1);
		int classHelperItem_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal309=null;
		ParserRuleReturnScope visibility304 =null;
		ParserRuleReturnScope classMethod305 =null;
		ParserRuleReturnScope classProperty306 =null;
		ParserRuleReturnScope constSection307 =null;
		ParserRuleReturnScope typeSection308 =null;
		ParserRuleReturnScope varSection310 =null;

		Object string_literal309_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:294:30: ( visibility | classMethod | classProperty | constSection | typeSection | ( 'class' )? varSection )
			int alt94=6;
			switch ( input.LA(1) ) {
			case AUTOMATED:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case PUBLISHED:
			case STRICT:
				{
				alt94=1;
				}
				break;
			case LBRACK:
				{
				int LA94_7 = input.LA(2);
				if ( (synpred133_Delphi()) ) {
					alt94=2;
				}
				else if ( (synpred134_Delphi()) ) {
					alt94=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 94, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CLASS:
				{
				int LA94_8 = input.LA(2);
				if ( (synpred133_Delphi()) ) {
					alt94=2;
				}
				else if ( (synpred134_Delphi()) ) {
					alt94=3;
				}
				else if ( (true) ) {
					alt94=6;
				}

				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case FUNCTION:
			case OPERATOR:
			case PROCEDURE:
				{
				alt94=2;
				}
				break;
			case PROPERTY:
				{
				alt94=3;
				}
				break;
			case CONST:
			case RESOURCESTRING:
				{
				alt94=4;
				}
				break;
			case TYPE:
				{
				alt94=5;
				}
				break;
			case THREADVAR:
			case VAR:
				{
				alt94=6;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 94, 0, input);
				throw nvae;
			}
			switch (alt94) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:294:32: visibility
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_visibility_in_classHelperItem6768);
					visibility304=visibility();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, visibility304.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:295:32: classMethod
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classMethod_in_classHelperItem6801);
					classMethod305=classMethod();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classMethod305.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:296:32: classProperty
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classProperty_in_classHelperItem6834);
					classProperty306=classProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classProperty306.getTree());

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:297:32: constSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_constSection_in_classHelperItem6867);
					constSection307=constSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constSection307.getTree());

					}
					break;
				case 5 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:298:32: typeSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_typeSection_in_classHelperItem6900);
					typeSection308=typeSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeSection308.getTree());

					}
					break;
				case 6 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:299:32: ( 'class' )? varSection
					{
					root_0 = (Object)adaptor.nil();


					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:299:32: ( 'class' )?
					int alt93=2;
					int LA93_0 = input.LA(1);
					if ( (LA93_0==CLASS) ) {
						alt93=1;
					}
					switch (alt93) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:299:33: 'class'
							{
							string_literal309=(Token)match(input,CLASS,FOLLOW_CLASS_in_classHelperItem6934); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal309_tree = (Object)adaptor.create(string_literal309);
							adaptor.addChild(root_0, string_literal309_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_varSection_in_classHelperItem6938);
					varSection310=varSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, varSection310.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 73, classHelperItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classHelperItem"


	public static class interfaceTypeDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "interfaceTypeDecl"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:301:1: interfaceTypeDecl : ( interfaceKey ( classParent )? ( interfaceGuid )? ( interfaceItem )* 'end' -> interfaceKey ^( TkClassParents ( classParent )? ) ^( TkGuid ( interfaceGuid )? ) ( interfaceItem )* | interfaceKey ( classParent )? -> interfaceKey ^( TkClassParents ( classParent )? ) );
	public final DelphiParser.interfaceTypeDecl_return interfaceTypeDecl() throws RecognitionException {
		DelphiParser.interfaceTypeDecl_return retval = new DelphiParser.interfaceTypeDecl_return();
		retval.start = input.LT(1);
		int interfaceTypeDecl_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal315=null;
		ParserRuleReturnScope interfaceKey311 =null;
		ParserRuleReturnScope classParent312 =null;
		ParserRuleReturnScope interfaceGuid313 =null;
		ParserRuleReturnScope interfaceItem314 =null;
		ParserRuleReturnScope interfaceKey316 =null;
		ParserRuleReturnScope classParent317 =null;

		Object string_literal315_tree=null;
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleSubtreeStream stream_interfaceItem=new RewriteRuleSubtreeStream(adaptor,"rule interfaceItem");
		RewriteRuleSubtreeStream stream_interfaceKey=new RewriteRuleSubtreeStream(adaptor,"rule interfaceKey");
		RewriteRuleSubtreeStream stream_classParent=new RewriteRuleSubtreeStream(adaptor,"rule classParent");
		RewriteRuleSubtreeStream stream_interfaceGuid=new RewriteRuleSubtreeStream(adaptor,"rule interfaceGuid");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:301:30: ( interfaceKey ( classParent )? ( interfaceGuid )? ( interfaceItem )* 'end' -> interfaceKey ^( TkClassParents ( classParent )? ) ^( TkGuid ( interfaceGuid )? ) ( interfaceItem )* | interfaceKey ( classParent )? -> interfaceKey ^( TkClassParents ( classParent )? ) )
			int alt99=2;
			int LA99_0 = input.LA(1);
			if ( (LA99_0==DISPINTERFACE||LA99_0==INTERFACE) ) {
				int LA99_1 = input.LA(2);
				if ( (synpred141_Delphi()) ) {
					alt99=1;
				}
				else if ( (true) ) {
					alt99=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 99, 0, input);
				throw nvae;
			}

			switch (alt99) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:301:32: interfaceKey ( classParent )? ( interfaceGuid )? ( interfaceItem )* 'end'
					{
					pushFollow(FOLLOW_interfaceKey_in_interfaceTypeDecl6986);
					interfaceKey311=interfaceKey();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_interfaceKey.add(interfaceKey311.getTree());
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:301:45: ( classParent )?
					int alt95=2;
					int LA95_0 = input.LA(1);
					if ( (LA95_0==LPAREN) ) {
						alt95=1;
					}
					switch (alt95) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:301:46: classParent
							{
							pushFollow(FOLLOW_classParent_in_interfaceTypeDecl6989);
							classParent312=classParent();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_classParent.add(classParent312.getTree());
							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:301:60: ( interfaceGuid )?
					int alt96=2;
					int LA96_0 = input.LA(1);
					if ( (LA96_0==LBRACK) ) {
						int LA96_1 = input.LA(2);
						if ( (LA96_1==QuotedString) ) {
							alt96=1;
						}
					}
					switch (alt96) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:301:61: interfaceGuid
							{
							pushFollow(FOLLOW_interfaceGuid_in_interfaceTypeDecl6994);
							interfaceGuid313=interfaceGuid();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_interfaceGuid.add(interfaceGuid313.getTree());
							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:301:77: ( interfaceItem )*
					loop97:
					while (true) {
						int alt97=2;
						int LA97_0 = input.LA(1);
						if ( (LA97_0==CLASS||LA97_0==CONSTRUCTOR||LA97_0==DESTRUCTOR||LA97_0==FUNCTION||LA97_0==LBRACK||LA97_0==OPERATOR||LA97_0==PROCEDURE||LA97_0==PROPERTY) ) {
							alt97=1;
						}

						switch (alt97) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:301:78: interfaceItem
							{
							pushFollow(FOLLOW_interfaceItem_in_interfaceTypeDecl6999);
							interfaceItem314=interfaceItem();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_interfaceItem.add(interfaceItem314.getTree());
							}
							break;

						default :
							break loop97;
						}
					}

					string_literal315=(Token)match(input,END,FOLLOW_END_in_interfaceTypeDecl7003); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_END.add(string_literal315);

					// AST REWRITE
					// elements: interfaceKey, classParent, interfaceGuid, interfaceItem
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 302:31: -> interfaceKey ^( TkClassParents ( classParent )? ) ^( TkGuid ( interfaceGuid )? ) ( interfaceItem )*
					{
						adaptor.addChild(root_0, stream_interfaceKey.nextTree());
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:302:47: ^( TkClassParents ( classParent )? )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClassParents, "TkClassParents"), root_1);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:302:64: ( classParent )?
						if ( stream_classParent.hasNext() ) {
							adaptor.addChild(root_1, stream_classParent.nextTree());
						}
						stream_classParent.reset();

						adaptor.addChild(root_0, root_1);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:302:81: ^( TkGuid ( interfaceGuid )? )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkGuid, "TkGuid"), root_1);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:302:90: ( interfaceGuid )?
						if ( stream_interfaceGuid.hasNext() ) {
							adaptor.addChild(root_1, stream_interfaceGuid.nextTree());
						}
						stream_interfaceGuid.reset();

						adaptor.addChild(root_0, root_1);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:302:108: ( interfaceItem )*
						while ( stream_interfaceItem.hasNext() ) {
							adaptor.addChild(root_0, stream_interfaceItem.nextTree());
						}
						stream_interfaceItem.reset();

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:303:32: interfaceKey ( classParent )?
					{
					pushFollow(FOLLOW_interfaceKey_in_interfaceTypeDecl7094);
					interfaceKey316=interfaceKey();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_interfaceKey.add(interfaceKey316.getTree());
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:303:45: ( classParent )?
					int alt98=2;
					alt98 = dfa98.predict(input);
					switch (alt98) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:303:46: classParent
							{
							pushFollow(FOLLOW_classParent_in_interfaceTypeDecl7097);
							classParent317=classParent();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_classParent.add(classParent317.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: classParent, interfaceKey
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 304:31: -> interfaceKey ^( TkClassParents ( classParent )? )
					{
						adaptor.addChild(root_0, stream_interfaceKey.nextTree());
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:304:47: ^( TkClassParents ( classParent )? )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClassParents, "TkClassParents"), root_1);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:304:64: ( classParent )?
						if ( stream_classParent.hasNext() ) {
							adaptor.addChild(root_1, stream_classParent.nextTree());
						}
						stream_classParent.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 74, interfaceTypeDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interfaceTypeDecl"


	public static class interfaceKey_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "interfaceKey"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:306:1: interfaceKey : ( 'interface' | 'dispinterface' );
	public final DelphiParser.interfaceKey_return interfaceKey() throws RecognitionException {
		DelphiParser.interfaceKey_return retval = new DelphiParser.interfaceKey_return();
		retval.start = input.LT(1);
		int interfaceKey_StartIndex = input.index();

		Object root_0 = null;

		Token set318=null;

		Object set318_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:306:30: ( 'interface' | 'dispinterface' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set318=input.LT(1);
			if ( input.LA(1)==DISPINTERFACE||input.LA(1)==INTERFACE ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set318));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 75, interfaceKey_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interfaceKey"


	public static class interfaceGuid_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "interfaceGuid"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:309:1: interfaceGuid : '[' QuotedString ']' -> QuotedString ;
	public final DelphiParser.interfaceGuid_return interfaceGuid() throws RecognitionException {
		DelphiParser.interfaceGuid_return retval = new DelphiParser.interfaceGuid_return();
		retval.start = input.LT(1);
		int interfaceGuid_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal319=null;
		Token QuotedString320=null;
		Token char_literal321=null;

		Object char_literal319_tree=null;
		Object QuotedString320_tree=null;
		Object char_literal321_tree=null;
		RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
		RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
		RewriteRuleTokenStream stream_QuotedString=new RewriteRuleTokenStream(adaptor,"token QuotedString");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:309:30: ( '[' QuotedString ']' -> QuotedString )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:309:32: '[' QuotedString ']'
			{
			char_literal319=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_interfaceGuid7280); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LBRACK.add(char_literal319);

			QuotedString320=(Token)match(input,QuotedString,FOLLOW_QuotedString_in_interfaceGuid7282); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_QuotedString.add(QuotedString320);

			char_literal321=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_interfaceGuid7284); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RBRACK.add(char_literal321);

			// AST REWRITE
			// elements: QuotedString
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 309:53: -> QuotedString
			{
				adaptor.addChild(root_0, stream_QuotedString.nextNode());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 76, interfaceGuid_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interfaceGuid"


	public static class interfaceItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "interfaceItem"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:311:1: interfaceItem : ( classMethod | ( 'class' )? classProperty );
	public final DelphiParser.interfaceItem_return interfaceItem() throws RecognitionException {
		DelphiParser.interfaceItem_return retval = new DelphiParser.interfaceItem_return();
		retval.start = input.LT(1);
		int interfaceItem_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal323=null;
		ParserRuleReturnScope classMethod322 =null;
		ParserRuleReturnScope classProperty324 =null;

		Object string_literal323_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:311:30: ( classMethod | ( 'class' )? classProperty )
			int alt101=2;
			switch ( input.LA(1) ) {
			case LBRACK:
				{
				int LA101_1 = input.LA(2);
				if ( (synpred144_Delphi()) ) {
					alt101=1;
				}
				else if ( (true) ) {
					alt101=2;
				}

				}
				break;
			case CLASS:
				{
				int LA101_2 = input.LA(2);
				if ( (synpred144_Delphi()) ) {
					alt101=1;
				}
				else if ( (true) ) {
					alt101=2;
				}

				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case FUNCTION:
			case OPERATOR:
			case PROCEDURE:
				{
				alt101=1;
				}
				break;
			case PROPERTY:
				{
				alt101=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 101, 0, input);
				throw nvae;
			}
			switch (alt101) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:311:32: classMethod
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classMethod_in_interfaceItem7340);
					classMethod322=classMethod();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classMethod322.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:312:32: ( 'class' )? classProperty
					{
					root_0 = (Object)adaptor.nil();


					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:312:32: ( 'class' )?
					int alt100=2;
					int LA100_0 = input.LA(1);
					if ( (LA100_0==CLASS) ) {
						int LA100_1 = input.LA(2);
						if ( (synpred145_Delphi()) ) {
							alt100=1;
						}
					}
					switch (alt100) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:312:33: 'class'
							{
							string_literal323=(Token)match(input,CLASS,FOLLOW_CLASS_in_interfaceItem7374); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal323_tree = (Object)adaptor.create(string_literal323);
							adaptor.addChild(root_0, string_literal323_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_classProperty_in_interfaceItem7378);
					classProperty324=classProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classProperty324.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 77, interfaceItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interfaceItem"


	public static class objectDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "objectDecl"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:314:1: objectDecl : 'object' ( classParent )? ( objectItem )* 'end' -> 'object' ( classParent )? ( objectItem )* ;
	public final DelphiParser.objectDecl_return objectDecl() throws RecognitionException {
		DelphiParser.objectDecl_return retval = new DelphiParser.objectDecl_return();
		retval.start = input.LT(1);
		int objectDecl_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal325=null;
		Token string_literal328=null;
		ParserRuleReturnScope classParent326 =null;
		ParserRuleReturnScope objectItem327 =null;

		Object string_literal325_tree=null;
		Object string_literal328_tree=null;
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleTokenStream stream_OBJECT=new RewriteRuleTokenStream(adaptor,"token OBJECT");
		RewriteRuleSubtreeStream stream_objectItem=new RewriteRuleSubtreeStream(adaptor,"rule objectItem");
		RewriteRuleSubtreeStream stream_classParent=new RewriteRuleSubtreeStream(adaptor,"rule classParent");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:314:30: ( 'object' ( classParent )? ( objectItem )* 'end' -> 'object' ( classParent )? ( objectItem )* )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:314:32: 'object' ( classParent )? ( objectItem )* 'end'
			{
			string_literal325=(Token)match(input,OBJECT,FOLLOW_OBJECT_in_objectDecl7433); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_OBJECT.add(string_literal325);

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:314:41: ( classParent )?
			int alt102=2;
			int LA102_0 = input.LA(1);
			if ( (LA102_0==LPAREN) ) {
				alt102=1;
			}
			switch (alt102) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:314:42: classParent
					{
					pushFollow(FOLLOW_classParent_in_objectDecl7436);
					classParent326=classParent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classParent.add(classParent326.getTree());
					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:314:56: ( objectItem )*
			loop103:
			while (true) {
				int alt103=2;
				int LA103_0 = input.LA(1);
				if ( (LA103_0==ADD||LA103_0==ANSISTRING||LA103_0==AT||LA103_0==AUTOMATED||LA103_0==BREAK||LA103_0==CLASS||(LA103_0 >= CONSTRUCTOR && LA103_0 <= CONTINUE)||LA103_0==DEFAULT||LA103_0==DESTRUCTOR||LA103_0==EXIT||LA103_0==EXPORT||LA103_0==FINAL||LA103_0==FUNCTION||LA103_0==IMPLEMENTS||LA103_0==INDEX||LA103_0==LBRACK||LA103_0==LOCAL||LA103_0==MESSAGE||LA103_0==NAME||LA103_0==OBJECT||LA103_0==OPERATOR||LA103_0==OUT||LA103_0==POINTER||(LA103_0 >= PRIVATE && LA103_0 <= PROCEDURE)||(LA103_0 >= PROTECTED && LA103_0 <= PUBLISHED)||(LA103_0 >= READ && LA103_0 <= READONLY)||(LA103_0 >= REFERENCE && LA103_0 <= REGISTER)||LA103_0==REMOVE||LA103_0==STATIC||(LA103_0 >= STORED && LA103_0 <= STRING)||LA103_0==TkIdentifier||LA103_0==UNSAFE||LA103_0==VARIANT||LA103_0==WRITE||LA103_0==198) ) {
					alt103=1;
				}

				switch (alt103) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:314:57: objectItem
					{
					pushFollow(FOLLOW_objectItem_in_objectDecl7441);
					objectItem327=objectItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_objectItem.add(objectItem327.getTree());
					}
					break;

				default :
					break loop103;
				}
			}

			string_literal328=(Token)match(input,END,FOLLOW_END_in_objectDecl7445); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_END.add(string_literal328);

			// AST REWRITE
			// elements: objectItem, classParent, OBJECT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 314:76: -> 'object' ( classParent )? ( objectItem )*
			{
				adaptor.addChild(root_0, stream_OBJECT.nextNode());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:314:88: ( classParent )?
				if ( stream_classParent.hasNext() ) {
					adaptor.addChild(root_0, stream_classParent.nextTree());
				}
				stream_classParent.reset();

				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:314:103: ( objectItem )*
				while ( stream_objectItem.hasNext() ) {
					adaptor.addChild(root_0, stream_objectItem.nextTree());
				}
				stream_objectItem.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 78, objectDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "objectDecl"


	public static class objectItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "objectItem"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:316:1: objectItem : ( visibility | classMethod | classField );
	public final DelphiParser.objectItem_return objectItem() throws RecognitionException {
		DelphiParser.objectItem_return retval = new DelphiParser.objectItem_return();
		retval.start = input.LT(1);
		int objectItem_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope visibility329 =null;
		ParserRuleReturnScope classMethod330 =null;
		ParserRuleReturnScope classField331 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:316:30: ( visibility | classMethod | classField )
			int alt104=3;
			switch ( input.LA(1) ) {
			case STRICT:
				{
				int LA104_1 = input.LA(2);
				if ( (synpred148_Delphi()) ) {
					alt104=1;
				}
				else if ( (true) ) {
					alt104=3;
				}

				}
				break;
			case AUTOMATED:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case PUBLISHED:
				{
				alt104=1;
				}
				break;
			case LBRACK:
				{
				int LA104_7 = input.LA(2);
				if ( (synpred149_Delphi()) ) {
					alt104=2;
				}
				else if ( (true) ) {
					alt104=3;
				}

				}
				break;
			case CLASS:
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case FUNCTION:
			case PROCEDURE:
				{
				alt104=2;
				}
				break;
			case OPERATOR:
				{
				int LA104_11 = input.LA(2);
				if ( (synpred149_Delphi()) ) {
					alt104=2;
				}
				else if ( (true) ) {
					alt104=3;
				}

				}
				break;
			case ADD:
			case ANSISTRING:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case EXIT:
			case EXPORT:
			case FINAL:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OUT:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STATIC:
			case STORED:
			case STRING:
			case TkIdentifier:
			case UNSAFE:
			case VARIANT:
			case WRITE:
			case 198:
				{
				alt104=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 104, 0, input);
				throw nvae;
			}
			switch (alt104) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:316:32: visibility
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_visibility_in_objectItem7514);
					visibility329=visibility();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, visibility329.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:317:32: classMethod
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classMethod_in_objectItem7547);
					classMethod330=classMethod();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classMethod330.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:318:32: classField
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classField_in_objectItem7580);
					classField331=classField();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classField331.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 79, objectItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "objectItem"


	public static class recordDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordDecl"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:320:1: recordDecl : ( simpleRecord | variantRecord );
	public final DelphiParser.recordDecl_return recordDecl() throws RecognitionException {
		DelphiParser.recordDecl_return retval = new DelphiParser.recordDecl_return();
		retval.start = input.LT(1);
		int recordDecl_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope simpleRecord332 =null;
		ParserRuleReturnScope variantRecord333 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:320:30: ( simpleRecord | variantRecord )
			int alt105=2;
			int LA105_0 = input.LA(1);
			if ( (LA105_0==RECORD) ) {
				int LA105_1 = input.LA(2);
				if ( (synpred150_Delphi()) ) {
					alt105=1;
				}
				else if ( (true) ) {
					alt105=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 105, 0, input);
				throw nvae;
			}

			switch (alt105) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:320:32: simpleRecord
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_simpleRecord_in_recordDecl7635);
					simpleRecord332=simpleRecord();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleRecord332.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:321:32: variantRecord
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_variantRecord_in_recordDecl7668);
					variantRecord333=variantRecord();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, variantRecord333.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 80, recordDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordDecl"


	public static class simpleRecord_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "simpleRecord"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:323:1: simpleRecord : 'record' ( recordField )* ( recordItem )* 'end' -> 'record' ( recordField )* ( recordItem )* ;
	public final DelphiParser.simpleRecord_return simpleRecord() throws RecognitionException {
		DelphiParser.simpleRecord_return retval = new DelphiParser.simpleRecord_return();
		retval.start = input.LT(1);
		int simpleRecord_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal334=null;
		Token string_literal337=null;
		ParserRuleReturnScope recordField335 =null;
		ParserRuleReturnScope recordItem336 =null;

		Object string_literal334_tree=null;
		Object string_literal337_tree=null;
		RewriteRuleTokenStream stream_RECORD=new RewriteRuleTokenStream(adaptor,"token RECORD");
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleSubtreeStream stream_recordField=new RewriteRuleSubtreeStream(adaptor,"rule recordField");
		RewriteRuleSubtreeStream stream_recordItem=new RewriteRuleSubtreeStream(adaptor,"rule recordItem");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:323:30: ( 'record' ( recordField )* ( recordItem )* 'end' -> 'record' ( recordField )* ( recordItem )* )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:323:32: 'record' ( recordField )* ( recordItem )* 'end'
			{
			string_literal334=(Token)match(input,RECORD,FOLLOW_RECORD_in_simpleRecord7721); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RECORD.add(string_literal334);

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:323:41: ( recordField )*
			loop106:
			while (true) {
				int alt106=2;
				alt106 = dfa106.predict(input);
				switch (alt106) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:323:42: recordField
					{
					pushFollow(FOLLOW_recordField_in_simpleRecord7724);
					recordField335=recordField();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_recordField.add(recordField335.getTree());
					}
					break;

				default :
					break loop106;
				}
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:323:56: ( recordItem )*
			loop107:
			while (true) {
				int alt107=2;
				int LA107_0 = input.LA(1);
				if ( (LA107_0==ADD||LA107_0==ANSISTRING||LA107_0==AT||LA107_0==AUTOMATED||LA107_0==BREAK||LA107_0==CLASS||(LA107_0 >= CONST && LA107_0 <= CONTINUE)||LA107_0==DEFAULT||LA107_0==DESTRUCTOR||LA107_0==EXIT||LA107_0==EXPORT||LA107_0==FINAL||LA107_0==FUNCTION||LA107_0==IMPLEMENTS||LA107_0==INDEX||LA107_0==LBRACK||LA107_0==LOCAL||LA107_0==MESSAGE||LA107_0==NAME||LA107_0==OBJECT||LA107_0==OPERATOR||LA107_0==OUT||LA107_0==POINTER||(LA107_0 >= PRIVATE && LA107_0 <= PROCEDURE)||(LA107_0 >= PROPERTY && LA107_0 <= PUBLISHED)||(LA107_0 >= READ && LA107_0 <= READONLY)||(LA107_0 >= REFERENCE && LA107_0 <= REGISTER)||LA107_0==REMOVE||LA107_0==RESOURCESTRING||LA107_0==STATIC||(LA107_0 >= STORED && LA107_0 <= STRING)||LA107_0==THREADVAR||LA107_0==TYPE||LA107_0==TkIdentifier||LA107_0==UNSAFE||LA107_0==VAR||LA107_0==VARIANT||LA107_0==WRITE||LA107_0==198) ) {
					alt107=1;
				}

				switch (alt107) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:323:57: recordItem
					{
					pushFollow(FOLLOW_recordItem_in_simpleRecord7729);
					recordItem336=recordItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_recordItem.add(recordItem336.getTree());
					}
					break;

				default :
					break loop107;
				}
			}

			string_literal337=(Token)match(input,END,FOLLOW_END_in_simpleRecord7733); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_END.add(string_literal337);

			// AST REWRITE
			// elements: RECORD, recordField, recordItem
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 323:76: -> 'record' ( recordField )* ( recordItem )*
			{
				adaptor.addChild(root_0, stream_RECORD.nextNode());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:323:88: ( recordField )*
				while ( stream_recordField.hasNext() ) {
					adaptor.addChild(root_0, stream_recordField.nextTree());
				}
				stream_recordField.reset();

				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:323:103: ( recordItem )*
				while ( stream_recordItem.hasNext() ) {
					adaptor.addChild(root_0, stream_recordItem.nextTree());
				}
				stream_recordItem.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 81, simpleRecord_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "simpleRecord"


	public static class variantRecord_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "variantRecord"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:325:1: variantRecord : 'record' ( recordField )* recordVariantSection 'end' -> 'record' ( recordField )* recordVariantSection ;
	public final DelphiParser.variantRecord_return variantRecord() throws RecognitionException {
		DelphiParser.variantRecord_return retval = new DelphiParser.variantRecord_return();
		retval.start = input.LT(1);
		int variantRecord_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal338=null;
		Token string_literal341=null;
		ParserRuleReturnScope recordField339 =null;
		ParserRuleReturnScope recordVariantSection340 =null;

		Object string_literal338_tree=null;
		Object string_literal341_tree=null;
		RewriteRuleTokenStream stream_RECORD=new RewriteRuleTokenStream(adaptor,"token RECORD");
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleSubtreeStream stream_recordVariantSection=new RewriteRuleSubtreeStream(adaptor,"rule recordVariantSection");
		RewriteRuleSubtreeStream stream_recordField=new RewriteRuleSubtreeStream(adaptor,"rule recordField");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:325:30: ( 'record' ( recordField )* recordVariantSection 'end' -> 'record' ( recordField )* recordVariantSection )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:325:32: 'record' ( recordField )* recordVariantSection 'end'
			{
			string_literal338=(Token)match(input,RECORD,FOLLOW_RECORD_in_variantRecord7799); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RECORD.add(string_literal338);

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:325:41: ( recordField )*
			loop108:
			while (true) {
				int alt108=2;
				int LA108_0 = input.LA(1);
				if ( (LA108_0==ADD||LA108_0==ANSISTRING||LA108_0==AT||LA108_0==BREAK||(LA108_0 >= CONTAINS && LA108_0 <= CONTINUE)||LA108_0==DEFAULT||LA108_0==EXIT||LA108_0==EXPORT||LA108_0==FINAL||LA108_0==IMPLEMENTS||LA108_0==INDEX||LA108_0==LOCAL||LA108_0==MESSAGE||LA108_0==NAME||LA108_0==OBJECT||LA108_0==OPERATOR||LA108_0==OUT||LA108_0==POINTER||(LA108_0 >= READ && LA108_0 <= READONLY)||(LA108_0 >= REFERENCE && LA108_0 <= REGISTER)||LA108_0==REMOVE||LA108_0==STATIC||(LA108_0 >= STORED && LA108_0 <= STRING)||LA108_0==TkIdentifier||LA108_0==UNSAFE||LA108_0==VARIANT||LA108_0==WRITE||LA108_0==198) ) {
					alt108=1;
				}

				switch (alt108) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:325:42: recordField
					{
					pushFollow(FOLLOW_recordField_in_variantRecord7802);
					recordField339=recordField();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_recordField.add(recordField339.getTree());
					}
					break;

				default :
					break loop108;
				}
			}

			pushFollow(FOLLOW_recordVariantSection_in_variantRecord7806);
			recordVariantSection340=recordVariantSection();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_recordVariantSection.add(recordVariantSection340.getTree());
			string_literal341=(Token)match(input,END,FOLLOW_END_in_variantRecord7808); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_END.add(string_literal341);

			// AST REWRITE
			// elements: RECORD, recordField, recordVariantSection
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 325:83: -> 'record' ( recordField )* recordVariantSection
			{
				adaptor.addChild(root_0, stream_RECORD.nextNode());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:325:95: ( recordField )*
				while ( stream_recordField.hasNext() ) {
					adaptor.addChild(root_0, stream_recordField.nextTree());
				}
				stream_recordField.reset();

				adaptor.addChild(root_0, stream_recordVariantSection.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 82, variantRecord_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "variantRecord"


	public static class recordItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordItem"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:327:1: recordItem : ( visibility | classMethod | classProperty | constSection | typeSection | recordField | ( 'class' )? varSection );
	public final DelphiParser.recordItem_return recordItem() throws RecognitionException {
		DelphiParser.recordItem_return retval = new DelphiParser.recordItem_return();
		retval.start = input.LT(1);
		int recordItem_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal348=null;
		ParserRuleReturnScope visibility342 =null;
		ParserRuleReturnScope classMethod343 =null;
		ParserRuleReturnScope classProperty344 =null;
		ParserRuleReturnScope constSection345 =null;
		ParserRuleReturnScope typeSection346 =null;
		ParserRuleReturnScope recordField347 =null;
		ParserRuleReturnScope varSection349 =null;

		Object string_literal348_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:327:30: ( visibility | classMethod | classProperty | constSection | typeSection | recordField | ( 'class' )? varSection )
			int alt110=7;
			switch ( input.LA(1) ) {
			case STRICT:
				{
				int LA110_1 = input.LA(2);
				if ( (synpred154_Delphi()) ) {
					alt110=1;
				}
				else if ( (synpred159_Delphi()) ) {
					alt110=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 110, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AUTOMATED:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case PUBLISHED:
				{
				alt110=1;
				}
				break;
			case LBRACK:
				{
				int LA110_7 = input.LA(2);
				if ( (synpred155_Delphi()) ) {
					alt110=2;
				}
				else if ( (synpred156_Delphi()) ) {
					alt110=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 110, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CLASS:
				{
				int LA110_8 = input.LA(2);
				if ( (synpred155_Delphi()) ) {
					alt110=2;
				}
				else if ( (synpred156_Delphi()) ) {
					alt110=3;
				}
				else if ( (true) ) {
					alt110=7;
				}

				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case FUNCTION:
			case PROCEDURE:
				{
				alt110=2;
				}
				break;
			case OPERATOR:
				{
				int LA110_11 = input.LA(2);
				if ( (synpred155_Delphi()) ) {
					alt110=2;
				}
				else if ( (synpred159_Delphi()) ) {
					alt110=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 110, 11, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PROPERTY:
				{
				alt110=3;
				}
				break;
			case CONST:
			case RESOURCESTRING:
				{
				alt110=4;
				}
				break;
			case TYPE:
				{
				alt110=5;
				}
				break;
			case ADD:
			case ANSISTRING:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case EXIT:
			case EXPORT:
			case FINAL:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OUT:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STATIC:
			case STORED:
			case STRING:
			case TkIdentifier:
			case UNSAFE:
			case VARIANT:
			case WRITE:
			case 198:
				{
				alt110=6;
				}
				break;
			case THREADVAR:
			case VAR:
				{
				alt110=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 110, 0, input);
				throw nvae;
			}
			switch (alt110) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:327:32: visibility
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_visibility_in_recordItem7874);
					visibility342=visibility();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, visibility342.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:328:32: classMethod
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classMethod_in_recordItem7912);
					classMethod343=classMethod();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classMethod343.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:329:32: classProperty
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classProperty_in_recordItem7945);
					classProperty344=classProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classProperty344.getTree());

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:330:32: constSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_constSection_in_recordItem7978);
					constSection345=constSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constSection345.getTree());

					}
					break;
				case 5 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:331:32: typeSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_typeSection_in_recordItem8011);
					typeSection346=typeSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeSection346.getTree());

					}
					break;
				case 6 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:332:32: recordField
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_recordField_in_recordItem8044);
					recordField347=recordField();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, recordField347.getTree());

					}
					break;
				case 7 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:333:32: ( 'class' )? varSection
					{
					root_0 = (Object)adaptor.nil();


					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:333:32: ( 'class' )?
					int alt109=2;
					int LA109_0 = input.LA(1);
					if ( (LA109_0==CLASS) ) {
						alt109=1;
					}
					switch (alt109) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:333:33: 'class'
							{
							string_literal348=(Token)match(input,CLASS,FOLLOW_CLASS_in_recordItem8078); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal348_tree = (Object)adaptor.create(string_literal348);
							adaptor.addChild(root_0, string_literal348_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_varSection_in_recordItem8082);
					varSection349=varSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, varSection349.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 83, recordItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordItem"


	public static class recordField_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordField"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:335:1: recordField : identList ':' typeDecl ( hintingDirective )* ( ';' )? -> identList ^( TkVariableType typeDecl ) ;
	public final DelphiParser.recordField_return recordField() throws RecognitionException {
		DelphiParser.recordField_return retval = new DelphiParser.recordField_return();
		retval.start = input.LT(1);
		int recordField_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal351=null;
		Token char_literal354=null;
		ParserRuleReturnScope identList350 =null;
		ParserRuleReturnScope typeDecl352 =null;
		ParserRuleReturnScope hintingDirective353 =null;

		Object char_literal351_tree=null;
		Object char_literal354_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_identList=new RewriteRuleSubtreeStream(adaptor,"rule identList");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:335:30: ( identList ':' typeDecl ( hintingDirective )* ( ';' )? -> identList ^( TkVariableType typeDecl ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:335:32: identList ':' typeDecl ( hintingDirective )* ( ';' )?
			{
			pushFollow(FOLLOW_identList_in_recordField8136);
			identList350=identList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identList.add(identList350.getTree());
			char_literal351=(Token)match(input,COLON,FOLLOW_COLON_in_recordField8138); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_COLON.add(char_literal351);

			pushFollow(FOLLOW_typeDecl_in_recordField8140);
			typeDecl352=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl352.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:335:55: ( hintingDirective )*
			loop111:
			while (true) {
				int alt111=2;
				int LA111_0 = input.LA(1);
				if ( (LA111_0==DEPRECATED||LA111_0==EXPERIMENTAL||LA111_0==LIBRARY||LA111_0==PLATFORM) ) {
					alt111=1;
				}

				switch (alt111) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:335:56: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_recordField8143);
					hintingDirective353=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective353.getTree());
					}
					break;

				default :
					break loop111;
				}
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:335:75: ( ';' )?
			int alt112=2;
			int LA112_0 = input.LA(1);
			if ( (LA112_0==SEMI) ) {
				alt112=1;
			}
			switch (alt112) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:335:76: ';'
					{
					char_literal354=(Token)match(input,SEMI,FOLLOW_SEMI_in_recordField8148); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMI.add(char_literal354);

					}
					break;

			}

			// AST REWRITE
			// elements: identList, typeDecl
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 336:30: -> identList ^( TkVariableType typeDecl )
			{
				adaptor.addChild(root_0, stream_identList.nextTree());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:336:43: ^( TkVariableType typeDecl )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableType, "TkVariableType"), root_1);
				adaptor.addChild(root_1, stream_typeDecl.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 84, recordField_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordField"


	public static class recordVariantField_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordVariantField"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:338:1: recordVariantField : identList ':' typeDecl ( hintingDirective )* ( ';' )? -> identList ^( TkVariableType typeDecl ) ;
	public final DelphiParser.recordVariantField_return recordVariantField() throws RecognitionException {
		DelphiParser.recordVariantField_return retval = new DelphiParser.recordVariantField_return();
		retval.start = input.LT(1);
		int recordVariantField_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal356=null;
		Token char_literal359=null;
		ParserRuleReturnScope identList355 =null;
		ParserRuleReturnScope typeDecl357 =null;
		ParserRuleReturnScope hintingDirective358 =null;

		Object char_literal356_tree=null;
		Object char_literal359_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_identList=new RewriteRuleSubtreeStream(adaptor,"rule identList");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:338:30: ( identList ':' typeDecl ( hintingDirective )* ( ';' )? -> identList ^( TkVariableType typeDecl ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:338:32: identList ':' typeDecl ( hintingDirective )* ( ';' )?
			{
			pushFollow(FOLLOW_identList_in_recordVariantField8238);
			identList355=identList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identList.add(identList355.getTree());
			char_literal356=(Token)match(input,COLON,FOLLOW_COLON_in_recordVariantField8240); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_COLON.add(char_literal356);

			pushFollow(FOLLOW_typeDecl_in_recordVariantField8242);
			typeDecl357=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl357.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:338:55: ( hintingDirective )*
			loop113:
			while (true) {
				int alt113=2;
				int LA113_0 = input.LA(1);
				if ( (LA113_0==DEPRECATED||LA113_0==EXPERIMENTAL||LA113_0==LIBRARY||LA113_0==PLATFORM) ) {
					alt113=1;
				}

				switch (alt113) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:338:56: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_recordVariantField8245);
					hintingDirective358=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective358.getTree());
					}
					break;

				default :
					break loop113;
				}
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:338:75: ( ';' )?
			int alt114=2;
			int LA114_0 = input.LA(1);
			if ( (LA114_0==SEMI) ) {
				alt114=1;
			}
			switch (alt114) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:338:76: ';'
					{
					char_literal359=(Token)match(input,SEMI,FOLLOW_SEMI_in_recordVariantField8250); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMI.add(char_literal359);

					}
					break;

			}

			// AST REWRITE
			// elements: typeDecl, identList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 339:30: -> identList ^( TkVariableType typeDecl )
			{
				adaptor.addChild(root_0, stream_identList.nextTree());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:339:43: ^( TkVariableType typeDecl )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableType, "TkVariableType"), root_1);
				adaptor.addChild(root_1, stream_typeDecl.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 85, recordVariantField_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordVariantField"


	public static class recordVariantSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordVariantSection"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:341:1: recordVariantSection : 'case' ( ident ':' )? typeDecl 'of' ( recordVariant | ';' ) ( recordVariant | ';' )* ;
	public final DelphiParser.recordVariantSection_return recordVariantSection() throws RecognitionException {
		DelphiParser.recordVariantSection_return retval = new DelphiParser.recordVariantSection_return();
		retval.start = input.LT(1);
		int recordVariantSection_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal360=null;
		Token char_literal362=null;
		Token string_literal364=null;
		Token char_literal366=null;
		Token char_literal368=null;
		ParserRuleReturnScope ident361 =null;
		ParserRuleReturnScope typeDecl363 =null;
		ParserRuleReturnScope recordVariant365 =null;
		ParserRuleReturnScope recordVariant367 =null;

		Object string_literal360_tree=null;
		Object char_literal362_tree=null;
		Object string_literal364_tree=null;
		Object char_literal366_tree=null;
		Object char_literal368_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:341:30: ( 'case' ( ident ':' )? typeDecl 'of' ( recordVariant | ';' ) ( recordVariant | ';' )* )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:341:32: 'case' ( ident ':' )? typeDecl 'of' ( recordVariant | ';' ) ( recordVariant | ';' )*
			{
			root_0 = (Object)adaptor.nil();


			string_literal360=(Token)match(input,CASE,FOLLOW_CASE_in_recordVariantSection8337); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal360_tree = (Object)adaptor.create(string_literal360);
			adaptor.addChild(root_0, string_literal360_tree);
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:341:39: ( ident ':' )?
			int alt115=2;
			switch ( input.LA(1) ) {
				case TkIdentifier:
					{
					int LA115_1 = input.LA(2);
					if ( (LA115_1==COLON) ) {
						alt115=1;
					}
					}
					break;
				case 198:
					{
					int LA115_2 = input.LA(2);
					if ( (LA115_2==TkIdentifier) ) {
						int LA115_12 = input.LA(3);
						if ( (LA115_12==COLON) ) {
							alt115=1;
						}
					}
					else if ( ((LA115_2 >= ABSOLUTE && LA115_2 <= ASSEMBLY)||LA115_2==AT||LA115_2==AUTOMATED||(LA115_2 >= BEGIN && LA115_2 <= CLASS)||(LA115_2 >= CONST && LA115_2 <= CONTINUE)||(LA115_2 >= DEFAULT && LA115_2 <= DO)||(LA115_2 >= DOWNTO && LA115_2 <= DYNAMIC)||(LA115_2 >= ELSE && LA115_2 <= END)||(LA115_2 >= EXCEPT && LA115_2 <= FUNCTION)||LA115_2==GOTO||LA115_2==HELPER||(LA115_2 >= IF && LA115_2 <= LABEL)||(LA115_2 >= LIBRARY && LA115_2 <= LOCAL)||LA115_2==MESSAGE||(LA115_2 >= MOD && LA115_2 <= NOT)||(LA115_2 >= OBJECT && LA115_2 <= PLATFORM)||LA115_2==POINTER||(LA115_2 >= PRIVATE && LA115_2 <= PUBLISHED)||LA115_2==RAISE||(LA115_2 >= READ && LA115_2 <= RESOURCESTRING)||(LA115_2 >= SAFECALL && LA115_2 <= SEALED)||(LA115_2 >= SET && LA115_2 <= SHR)||(LA115_2 >= STATIC && LA115_2 <= TYPE)||(LA115_2 >= UNIT && LA115_2 <= USES)||(LA115_2 >= VAR && LA115_2 <= WRITEONLY)||LA115_2==XOR) ) {
						int LA115_13 = input.LA(3);
						if ( (LA115_13==COLON) ) {
							alt115=1;
						}
					}
					}
					break;
				case OBJECT:
					{
					int LA115_3 = input.LA(2);
					if ( (LA115_3==COLON) ) {
						alt115=1;
					}
					}
					break;
				case POINTER:
					{
					int LA115_5 = input.LA(2);
					if ( (LA115_5==COLON) ) {
						alt115=1;
					}
					}
					break;
				case STRING:
					{
					int LA115_6 = input.LA(2);
					if ( (LA115_6==COLON) ) {
						alt115=1;
					}
					}
					break;
				case ANSISTRING:
					{
					int LA115_7 = input.LA(2);
					if ( (LA115_7==COLON) ) {
						alt115=1;
					}
					}
					break;
				case REFERENCE:
					{
					int LA115_8 = input.LA(2);
					if ( (LA115_8==COLON) ) {
						alt115=1;
					}
					}
					break;
				case VARIANT:
					{
					int LA115_9 = input.LA(2);
					if ( (LA115_9==COLON) ) {
						alt115=1;
					}
					}
					break;
				case ADD:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case EXIT:
				case EXPORT:
				case FINAL:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OPERATOR:
				case OUT:
				case READ:
				case READONLY:
				case REGISTER:
				case REMOVE:
				case STATIC:
				case STORED:
				case STRICT:
				case UNSAFE:
				case WRITE:
					{
					int LA115_10 = input.LA(2);
					if ( (LA115_10==COLON) ) {
						alt115=1;
					}
					}
					break;
			}
			switch (alt115) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:341:40: ident ':'
					{
					pushFollow(FOLLOW_ident_in_recordVariantSection8340);
					ident361=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident361.getTree());

					char_literal362=(Token)match(input,COLON,FOLLOW_COLON_in_recordVariantSection8342); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal362_tree = (Object)adaptor.create(char_literal362);
					adaptor.addChild(root_0, char_literal362_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_typeDecl_in_recordVariantSection8346);
			typeDecl363=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl363.getTree());

			string_literal364=(Token)match(input,OF,FOLLOW_OF_in_recordVariantSection8348); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal364_tree = (Object)adaptor.create(string_literal364);
			adaptor.addChild(root_0, string_literal364_tree);
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:341:66: ( recordVariant | ';' )
			int alt116=2;
			int LA116_0 = input.LA(1);
			if ( ((LA116_0 >= ADD && LA116_0 <= ANSISTRING)||LA116_0==AS||(LA116_0 >= AT && LA116_0 <= AT2)||LA116_0==BREAK||(LA116_0 >= COLON && LA116_0 <= COMMA)||(LA116_0 >= CONTAINS && LA116_0 <= ControlString)||LA116_0==DEFAULT||LA116_0==DIV||LA116_0==DOT||LA116_0==EQUAL||LA116_0==EXIT||LA116_0==EXPORT||LA116_0==FALSE||LA116_0==FINAL||(LA116_0 >= FUNCTION && LA116_0 <= GE)||LA116_0==GT||(LA116_0 >= IMPLEMENTS && LA116_0 <= INHERITED)||LA116_0==IS||LA116_0==LBRACK||LA116_0==LE||(LA116_0 >= LOCAL && LA116_0 <= NAME)||LA116_0==NIL||(LA116_0 >= NOT && LA116_0 <= OBJECT)||(LA116_0 >= OPERATOR && LA116_0 <= OUT)||(LA116_0 >= PLUS && LA116_0 <= POINTER2)||LA116_0==PROCEDURE||LA116_0==QuotedString||(LA116_0 >= READ && LA116_0 <= READONLY)||(LA116_0 >= REFERENCE && LA116_0 <= REGISTER)||LA116_0==REMOVE||(LA116_0 >= SHL && LA116_0 <= STATIC)||(LA116_0 >= STORED && LA116_0 <= STRING)||LA116_0==TRUE||(LA116_0 >= TkHexNum && LA116_0 <= TkIntNum)||LA116_0==TkRealNum||LA116_0==UNSAFE||LA116_0==VARIANT||LA116_0==WRITE||(LA116_0 >= XOR && LA116_0 <= 199)) ) {
				alt116=1;
			}
			else if ( (LA116_0==SEMI) ) {
				alt116=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 116, 0, input);
				throw nvae;
			}

			switch (alt116) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:341:67: recordVariant
					{
					pushFollow(FOLLOW_recordVariant_in_recordVariantSection8351);
					recordVariant365=recordVariant();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, recordVariant365.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:341:83: ';'
					{
					char_literal366=(Token)match(input,SEMI,FOLLOW_SEMI_in_recordVariantSection8355); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal366_tree = (Object)adaptor.create(char_literal366);
					adaptor.addChild(root_0, char_literal366_tree);
					}

					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:341:88: ( recordVariant | ';' )*
			loop117:
			while (true) {
				int alt117=3;
				int LA117_0 = input.LA(1);
				if ( ((LA117_0 >= ADD && LA117_0 <= ANSISTRING)||LA117_0==AS||(LA117_0 >= AT && LA117_0 <= AT2)||LA117_0==BREAK||(LA117_0 >= COLON && LA117_0 <= COMMA)||(LA117_0 >= CONTAINS && LA117_0 <= ControlString)||LA117_0==DEFAULT||LA117_0==DIV||LA117_0==DOT||LA117_0==EQUAL||LA117_0==EXIT||LA117_0==EXPORT||LA117_0==FALSE||LA117_0==FINAL||(LA117_0 >= FUNCTION && LA117_0 <= GE)||LA117_0==GT||(LA117_0 >= IMPLEMENTS && LA117_0 <= INHERITED)||LA117_0==IS||LA117_0==LBRACK||LA117_0==LE||(LA117_0 >= LOCAL && LA117_0 <= NAME)||LA117_0==NIL||(LA117_0 >= NOT && LA117_0 <= OBJECT)||(LA117_0 >= OPERATOR && LA117_0 <= OUT)||(LA117_0 >= PLUS && LA117_0 <= POINTER2)||LA117_0==PROCEDURE||LA117_0==QuotedString||(LA117_0 >= READ && LA117_0 <= READONLY)||(LA117_0 >= REFERENCE && LA117_0 <= REGISTER)||LA117_0==REMOVE||(LA117_0 >= SHL && LA117_0 <= STATIC)||(LA117_0 >= STORED && LA117_0 <= STRING)||LA117_0==TRUE||(LA117_0 >= TkHexNum && LA117_0 <= TkIntNum)||LA117_0==TkRealNum||LA117_0==UNSAFE||LA117_0==VARIANT||LA117_0==WRITE||(LA117_0 >= XOR && LA117_0 <= 199)) ) {
					alt117=1;
				}
				else if ( (LA117_0==SEMI) ) {
					alt117=2;
				}

				switch (alt117) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:341:89: recordVariant
					{
					pushFollow(FOLLOW_recordVariant_in_recordVariantSection8359);
					recordVariant367=recordVariant();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, recordVariant367.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:341:105: ';'
					{
					char_literal368=(Token)match(input,SEMI,FOLLOW_SEMI_in_recordVariantSection8363); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal368_tree = (Object)adaptor.create(char_literal368);
					adaptor.addChild(root_0, char_literal368_tree);
					}

					}
					break;

				default :
					break loop117;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 86, recordVariantSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordVariantSection"


	public static class recordVariant_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordVariant"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:343:1: recordVariant : constExpression ( ',' constExpression )* ':' '(' ( recordVariantField )* ')' ;
	public final DelphiParser.recordVariant_return recordVariant() throws RecognitionException {
		DelphiParser.recordVariant_return retval = new DelphiParser.recordVariant_return();
		retval.start = input.LT(1);
		int recordVariant_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal370=null;
		Token char_literal372=null;
		Token char_literal373=null;
		Token char_literal375=null;
		ParserRuleReturnScope constExpression369 =null;
		ParserRuleReturnScope constExpression371 =null;
		ParserRuleReturnScope recordVariantField374 =null;

		Object char_literal370_tree=null;
		Object char_literal372_tree=null;
		Object char_literal373_tree=null;
		Object char_literal375_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:343:30: ( constExpression ( ',' constExpression )* ':' '(' ( recordVariantField )* ')' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:343:32: constExpression ( ',' constExpression )* ':' '(' ( recordVariantField )* ')'
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_constExpression_in_recordVariant8417);
			constExpression369=constExpression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression369.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:343:48: ( ',' constExpression )*
			loop118:
			while (true) {
				int alt118=2;
				int LA118_0 = input.LA(1);
				if ( (LA118_0==COMMA) ) {
					alt118=1;
				}

				switch (alt118) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:343:49: ',' constExpression
					{
					char_literal370=(Token)match(input,COMMA,FOLLOW_COMMA_in_recordVariant8420); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal370_tree = (Object)adaptor.create(char_literal370);
					adaptor.addChild(root_0, char_literal370_tree);
					}

					pushFollow(FOLLOW_constExpression_in_recordVariant8422);
					constExpression371=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression371.getTree());

					}
					break;

				default :
					break loop118;
				}
			}

			char_literal372=(Token)match(input,COLON,FOLLOW_COLON_in_recordVariant8426); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal372_tree = (Object)adaptor.create(char_literal372);
			adaptor.addChild(root_0, char_literal372_tree);
			}

			char_literal373=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_recordVariant8428); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal373_tree = (Object)adaptor.create(char_literal373);
			adaptor.addChild(root_0, char_literal373_tree);
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:343:79: ( recordVariantField )*
			loop119:
			while (true) {
				int alt119=2;
				int LA119_0 = input.LA(1);
				if ( (LA119_0==ADD||LA119_0==ANSISTRING||LA119_0==AT||LA119_0==BREAK||(LA119_0 >= CONTAINS && LA119_0 <= CONTINUE)||LA119_0==DEFAULT||LA119_0==EXIT||LA119_0==EXPORT||LA119_0==FINAL||LA119_0==IMPLEMENTS||LA119_0==INDEX||LA119_0==LOCAL||LA119_0==MESSAGE||LA119_0==NAME||LA119_0==OBJECT||LA119_0==OPERATOR||LA119_0==OUT||LA119_0==POINTER||(LA119_0 >= READ && LA119_0 <= READONLY)||(LA119_0 >= REFERENCE && LA119_0 <= REGISTER)||LA119_0==REMOVE||LA119_0==STATIC||(LA119_0 >= STORED && LA119_0 <= STRING)||LA119_0==TkIdentifier||LA119_0==UNSAFE||LA119_0==VARIANT||LA119_0==WRITE||LA119_0==198) ) {
					alt119=1;
				}

				switch (alt119) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:343:80: recordVariantField
					{
					pushFollow(FOLLOW_recordVariantField_in_recordVariant8431);
					recordVariantField374=recordVariantField();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, recordVariantField374.getTree());

					}
					break;

				default :
					break loop119;
				}
			}

			char_literal375=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_recordVariant8435); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal375_tree = (Object)adaptor.create(char_literal375);
			adaptor.addChild(root_0, char_literal375_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 87, recordVariant_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordVariant"


	public static class recordHelperDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordHelperDecl"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:345:1: recordHelperDecl : 'record' 'helper' 'for' typeId ( recordHelperItem )* 'end' ;
	public final DelphiParser.recordHelperDecl_return recordHelperDecl() throws RecognitionException {
		DelphiParser.recordHelperDecl_return retval = new DelphiParser.recordHelperDecl_return();
		retval.start = input.LT(1);
		int recordHelperDecl_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal376=null;
		Token string_literal377=null;
		Token string_literal378=null;
		Token string_literal381=null;
		ParserRuleReturnScope typeId379 =null;
		ParserRuleReturnScope recordHelperItem380 =null;

		Object string_literal376_tree=null;
		Object string_literal377_tree=null;
		Object string_literal378_tree=null;
		Object string_literal381_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:345:30: ( 'record' 'helper' 'for' typeId ( recordHelperItem )* 'end' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:345:32: 'record' 'helper' 'for' typeId ( recordHelperItem )* 'end'
			{
			root_0 = (Object)adaptor.nil();


			string_literal376=(Token)match(input,RECORD,FOLLOW_RECORD_in_recordHelperDecl8487); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal376_tree = (Object)adaptor.create(string_literal376);
			adaptor.addChild(root_0, string_literal376_tree);
			}

			string_literal377=(Token)match(input,HELPER,FOLLOW_HELPER_in_recordHelperDecl8489); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal377_tree = (Object)adaptor.create(string_literal377);
			adaptor.addChild(root_0, string_literal377_tree);
			}

			string_literal378=(Token)match(input,FOR,FOLLOW_FOR_in_recordHelperDecl8491); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal378_tree = (Object)adaptor.create(string_literal378);
			adaptor.addChild(root_0, string_literal378_tree);
			}

			pushFollow(FOLLOW_typeId_in_recordHelperDecl8493);
			typeId379=typeId();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, typeId379.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:345:63: ( recordHelperItem )*
			loop120:
			while (true) {
				int alt120=2;
				int LA120_0 = input.LA(1);
				if ( (LA120_0==AUTOMATED||LA120_0==CLASS||LA120_0==CONSTRUCTOR||LA120_0==DESTRUCTOR||LA120_0==FUNCTION||LA120_0==LBRACK||LA120_0==OPERATOR||(LA120_0 >= PRIVATE && LA120_0 <= PROCEDURE)||(LA120_0 >= PROPERTY && LA120_0 <= PUBLISHED)||LA120_0==STRICT) ) {
					alt120=1;
				}

				switch (alt120) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:345:64: recordHelperItem
					{
					pushFollow(FOLLOW_recordHelperItem_in_recordHelperDecl8496);
					recordHelperItem380=recordHelperItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, recordHelperItem380.getTree());

					}
					break;

				default :
					break loop120;
				}
			}

			string_literal381=(Token)match(input,END,FOLLOW_END_in_recordHelperDecl8500); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal381_tree = (Object)adaptor.create(string_literal381);
			adaptor.addChild(root_0, string_literal381_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 88, recordHelperDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordHelperDecl"


	public static class recordHelperItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordHelperItem"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:347:1: recordHelperItem : ( visibility | classMethod | classProperty );
	public final DelphiParser.recordHelperItem_return recordHelperItem() throws RecognitionException {
		DelphiParser.recordHelperItem_return retval = new DelphiParser.recordHelperItem_return();
		retval.start = input.LT(1);
		int recordHelperItem_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope visibility382 =null;
		ParserRuleReturnScope classMethod383 =null;
		ParserRuleReturnScope classProperty384 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:347:30: ( visibility | classMethod | classProperty )
			int alt121=3;
			switch ( input.LA(1) ) {
			case AUTOMATED:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case PUBLISHED:
			case STRICT:
				{
				alt121=1;
				}
				break;
			case LBRACK:
				{
				int LA121_7 = input.LA(2);
				if ( (synpred173_Delphi()) ) {
					alt121=2;
				}
				else if ( (true) ) {
					alt121=3;
				}

				}
				break;
			case CLASS:
				{
				int LA121_8 = input.LA(2);
				if ( (synpred173_Delphi()) ) {
					alt121=2;
				}
				else if ( (true) ) {
					alt121=3;
				}

				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case FUNCTION:
			case OPERATOR:
			case PROCEDURE:
				{
				alt121=2;
				}
				break;
			case PROPERTY:
				{
				alt121=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 121, 0, input);
				throw nvae;
			}
			switch (alt121) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:347:32: visibility
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_visibility_in_recordHelperItem8549);
					visibility382=visibility();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, visibility382.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:348:32: classMethod
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classMethod_in_recordHelperItem8582);
					classMethod383=classMethod();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classMethod383.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:349:32: classProperty
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classProperty_in_recordHelperItem8615);
					classProperty384=classProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classProperty384.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 89, recordHelperItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordHelperItem"


	public static class classMethod_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classMethod"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:1: classMethod : ( ( customAttribute )? ( 'class' )? methodKey ident ( genericDefinition )? ( formalParameterSection )? ';' ( methodDirective )* -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( methodDirective )* ) | ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( methodDirective )* -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? ^( TkFunctionReturn typeDecl ) ( methodDirective )* ) | ( customAttribute )? ( 'class' )? 'operator' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' -> ( customAttribute )? ( 'class' )? ^( 'operator' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? typeDecl ) | ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? '.' ident '=' ident ';' | ( customAttribute )? ( 'class' )? 'procedure' ident ( genericDefinition )? '.' ident '=' ident ';' );
	public final DelphiParser.classMethod_return classMethod() throws RecognitionException {
		DelphiParser.classMethod_return retval = new DelphiParser.classMethod_return();
		retval.start = input.LT(1);
		int classMethod_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal386=null;
		Token char_literal391=null;
		Token string_literal394=null;
		Token string_literal395=null;
		Token char_literal399=null;
		Token char_literal402=null;
		Token string_literal405=null;
		Token string_literal406=null;
		Token char_literal410=null;
		Token char_literal413=null;
		Token string_literal415=null;
		Token string_literal416=null;
		Token char_literal419=null;
		Token char_literal421=null;
		Token char_literal423=null;
		Token string_literal425=null;
		Token string_literal426=null;
		Token char_literal429=null;
		Token char_literal431=null;
		Token char_literal433=null;
		ParserRuleReturnScope customAttribute385 =null;
		ParserRuleReturnScope methodKey387 =null;
		ParserRuleReturnScope ident388 =null;
		ParserRuleReturnScope genericDefinition389 =null;
		ParserRuleReturnScope formalParameterSection390 =null;
		ParserRuleReturnScope methodDirective392 =null;
		ParserRuleReturnScope customAttribute393 =null;
		ParserRuleReturnScope ident396 =null;
		ParserRuleReturnScope genericDefinition397 =null;
		ParserRuleReturnScope formalParameterSection398 =null;
		ParserRuleReturnScope customAttribute400 =null;
		ParserRuleReturnScope typeDecl401 =null;
		ParserRuleReturnScope methodDirective403 =null;
		ParserRuleReturnScope customAttribute404 =null;
		ParserRuleReturnScope ident407 =null;
		ParserRuleReturnScope genericDefinition408 =null;
		ParserRuleReturnScope formalParameterSection409 =null;
		ParserRuleReturnScope customAttribute411 =null;
		ParserRuleReturnScope typeDecl412 =null;
		ParserRuleReturnScope customAttribute414 =null;
		ParserRuleReturnScope ident417 =null;
		ParserRuleReturnScope genericDefinition418 =null;
		ParserRuleReturnScope ident420 =null;
		ParserRuleReturnScope ident422 =null;
		ParserRuleReturnScope customAttribute424 =null;
		ParserRuleReturnScope ident427 =null;
		ParserRuleReturnScope genericDefinition428 =null;
		ParserRuleReturnScope ident430 =null;
		ParserRuleReturnScope ident432 =null;

		Object string_literal386_tree=null;
		Object char_literal391_tree=null;
		Object string_literal394_tree=null;
		Object string_literal395_tree=null;
		Object char_literal399_tree=null;
		Object char_literal402_tree=null;
		Object string_literal405_tree=null;
		Object string_literal406_tree=null;
		Object char_literal410_tree=null;
		Object char_literal413_tree=null;
		Object string_literal415_tree=null;
		Object string_literal416_tree=null;
		Object char_literal419_tree=null;
		Object char_literal421_tree=null;
		Object char_literal423_tree=null;
		Object string_literal425_tree=null;
		Object string_literal426_tree=null;
		Object char_literal429_tree=null;
		Object char_literal431_tree=null;
		Object char_literal433_tree=null;
		RewriteRuleTokenStream stream_OPERATOR=new RewriteRuleTokenStream(adaptor,"token OPERATOR");
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
		RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_methodKey=new RewriteRuleSubtreeStream(adaptor,"rule methodKey");
		RewriteRuleSubtreeStream stream_genericDefinition=new RewriteRuleSubtreeStream(adaptor,"rule genericDefinition");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_formalParameterSection=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterSection");
		RewriteRuleSubtreeStream stream_methodDirective=new RewriteRuleSubtreeStream(adaptor,"rule methodDirective");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:30: ( ( customAttribute )? ( 'class' )? methodKey ident ( genericDefinition )? ( formalParameterSection )? ';' ( methodDirective )* -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( methodDirective )* ) | ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( methodDirective )* -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? ^( TkFunctionReturn typeDecl ) ( methodDirective )* ) | ( customAttribute )? ( 'class' )? 'operator' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' -> ( customAttribute )? ( 'class' )? ^( 'operator' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? typeDecl ) | ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? '.' ident '=' ident ';' | ( customAttribute )? ( 'class' )? 'procedure' ident ( genericDefinition )? '.' ident '=' ident ';' )
			int alt144=5;
			switch ( input.LA(1) ) {
			case LBRACK:
				{
				int LA144_1 = input.LA(2);
				if ( (synpred179_Delphi()) ) {
					alt144=1;
				}
				else if ( (synpred186_Delphi()) ) {
					alt144=2;
				}
				else if ( (synpred192_Delphi()) ) {
					alt144=3;
				}
				else if ( (synpred196_Delphi()) ) {
					alt144=4;
				}
				else if ( (true) ) {
					alt144=5;
				}

				}
				break;
			case CLASS:
				{
				int LA144_2 = input.LA(2);
				if ( (synpred179_Delphi()) ) {
					alt144=1;
				}
				else if ( (synpred186_Delphi()) ) {
					alt144=2;
				}
				else if ( (synpred192_Delphi()) ) {
					alt144=3;
				}
				else if ( (synpred196_Delphi()) ) {
					alt144=4;
				}
				else if ( (true) ) {
					alt144=5;
				}

				}
				break;
			case PROCEDURE:
				{
				int LA144_3 = input.LA(2);
				if ( (synpred179_Delphi()) ) {
					alt144=1;
				}
				else if ( (true) ) {
					alt144=5;
				}

				}
				break;
			case FUNCTION:
				{
				int LA144_4 = input.LA(2);
				if ( (synpred186_Delphi()) ) {
					alt144=2;
				}
				else if ( (synpred196_Delphi()) ) {
					alt144=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 144, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case OPERATOR:
				{
				alt144=3;
				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
				{
				alt144=1;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 144, 0, input);
				throw nvae;
			}
			switch (alt144) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:32: ( customAttribute )? ( 'class' )? methodKey ident ( genericDefinition )? ( formalParameterSection )? ';' ( methodDirective )*
					{
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:32: ( customAttribute )?
					int alt122=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							alt122=1;
							}
							break;
						case CLASS:
							{
							int LA122_2 = input.LA(2);
							if ( (synpred174_Delphi()) ) {
								alt122=1;
							}
							}
							break;
						case CONSTRUCTOR:
						case DESTRUCTOR:
						case PROCEDURE:
							{
							int LA122_3 = input.LA(2);
							if ( (synpred174_Delphi()) ) {
								alt122=1;
							}
							}
							break;
					}
					switch (alt122) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_classMethod8670);
							customAttribute385=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute385.getTree());
							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:51: ( 'class' )?
					int alt123=2;
					int LA123_0 = input.LA(1);
					if ( (LA123_0==CLASS) ) {
						alt123=1;
					}
					switch (alt123) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:52: 'class'
							{
							string_literal386=(Token)match(input,CLASS,FOLLOW_CLASS_in_classMethod8675); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_CLASS.add(string_literal386);

							}
							break;

					}

					pushFollow(FOLLOW_methodKey_in_classMethod8679);
					methodKey387=methodKey();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodKey.add(methodKey387.getTree());
					pushFollow(FOLLOW_ident_in_classMethod8681);
					ident388=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident388.getTree());
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:78: ( genericDefinition )?
					int alt124=2;
					int LA124_0 = input.LA(1);
					if ( (LA124_0==LT) ) {
						alt124=1;
					}
					switch (alt124) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:79: genericDefinition
							{
							pushFollow(FOLLOW_genericDefinition_in_classMethod8684);
							genericDefinition389=genericDefinition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_genericDefinition.add(genericDefinition389.getTree());
							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:99: ( formalParameterSection )?
					int alt125=2;
					int LA125_0 = input.LA(1);
					if ( (LA125_0==LPAREN) ) {
						alt125=1;
					}
					switch (alt125) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:100: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_classMethod8689);
							formalParameterSection390=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection390.getTree());
							}
							break;

					}

					char_literal391=(Token)match(input,SEMI,FOLLOW_SEMI_in_classMethod8693); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMI.add(char_literal391);

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:129: ( methodDirective )*
					loop126:
					while (true) {
						int alt126=2;
						switch ( input.LA(1) ) {
						case MESSAGE:
							{
							int LA126_2 = input.LA(2);
							if ( ((LA126_2 >= ADD && LA126_2 <= ANSISTRING)||LA126_2==AS||(LA126_2 >= AT && LA126_2 <= AT2)||LA126_2==BREAK||(LA126_2 >= CONTAINS && LA126_2 <= ControlString)||LA126_2==DEFAULT||LA126_2==DIV||LA126_2==DOT||LA126_2==EQUAL||LA126_2==EXIT||LA126_2==EXPORT||LA126_2==FALSE||LA126_2==FINAL||(LA126_2 >= FUNCTION && LA126_2 <= GE)||LA126_2==GT||(LA126_2 >= IMPLEMENTS && LA126_2 <= INHERITED)||LA126_2==IS||LA126_2==LBRACK||LA126_2==LE||(LA126_2 >= LOCAL && LA126_2 <= NAME)||LA126_2==NIL||(LA126_2 >= NOT && LA126_2 <= OBJECT)||(LA126_2 >= OPERATOR && LA126_2 <= OUT)||(LA126_2 >= PLUS && LA126_2 <= POINTER2)||LA126_2==PROCEDURE||LA126_2==QuotedString||(LA126_2 >= READ && LA126_2 <= READONLY)||(LA126_2 >= REFERENCE && LA126_2 <= REGISTER)||LA126_2==REMOVE||LA126_2==SEMI||(LA126_2 >= SHL && LA126_2 <= STATIC)||(LA126_2 >= STORED && LA126_2 <= STRING)||LA126_2==TRUE||(LA126_2 >= TkHexNum && LA126_2 <= TkIntNum)||LA126_2==TkRealNum||LA126_2==UNSAFE||LA126_2==VARIANT||LA126_2==WRITE||(LA126_2 >= XOR && LA126_2 <= 199)) ) {
								alt126=1;
							}

							}
							break;
						case ABSTRACT:
						case ASSEMBLER:
						case CDECL:
						case DEPRECATED:
						case DISPID:
						case DYNAMIC:
						case EXPERIMENTAL:
						case FAR:
						case INLINE:
						case LIBRARY:
						case NEAR:
						case OVERLOAD:
						case OVERRIDE:
						case PASCAL:
						case PLATFORM:
						case REINTRODUCE:
						case SAFECALL:
						case STDCALL:
						case VIRTUAL:
							{
							alt126=1;
							}
							break;
						case STATIC:
							{
							int LA126_4 = input.LA(2);
							if ( (LA126_4==SEMI) ) {
								alt126=1;
							}

							}
							break;
						case FINAL:
							{
							int LA126_5 = input.LA(2);
							if ( (LA126_5==SEMI) ) {
								alt126=1;
							}

							}
							break;
						case REGISTER:
							{
							int LA126_6 = input.LA(2);
							if ( (LA126_6==SEMI) ) {
								alt126=1;
							}

							}
							break;
						case EXPORT:
							{
							int LA126_7 = input.LA(2);
							if ( (LA126_7==SEMI) ) {
								alt126=1;
							}

							}
							break;
						case LOCAL:
							{
							int LA126_8 = input.LA(2);
							if ( (LA126_8==SEMI) ) {
								alt126=1;
							}

							}
							break;
						}
						switch (alt126) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:130: methodDirective
							{
							pushFollow(FOLLOW_methodDirective_in_classMethod8696);
							methodDirective392=methodDirective();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_methodDirective.add(methodDirective392.getTree());
							}
							break;

						default :
							break loop126;
						}
					}

					// AST REWRITE
					// elements: genericDefinition, methodKey, methodDirective, customAttribute, formalParameterSection, CLASS, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 352:30: -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( methodDirective )* )
					{
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:34: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_0, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:53: ( 'class' )?
						if ( stream_CLASS.hasNext() ) {
							adaptor.addChild(root_0, stream_CLASS.nextNode());
						}
						stream_CLASS.reset();

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:64: ^( methodKey ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( methodDirective )* )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_methodKey.nextNode(), root_1);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:76: ^( TkFunctionName ident )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_ident.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:100: ( genericDefinition )?
						if ( stream_genericDefinition.hasNext() ) {
							adaptor.addChild(root_1, stream_genericDefinition.nextTree());
						}
						stream_genericDefinition.reset();

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:121: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:138: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:165: ( methodDirective )*
						while ( stream_methodDirective.hasNext() ) {
							adaptor.addChild(root_1, stream_methodDirective.nextTree());
						}
						stream_methodDirective.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:32: ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( methodDirective )*
					{
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:32: ( customAttribute )?
					int alt127=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							alt127=1;
							}
							break;
						case CLASS:
							{
							int LA127_2 = input.LA(2);
							if ( (synpred180_Delphi()) ) {
								alt127=1;
							}
							}
							break;
						case FUNCTION:
							{
							int LA127_3 = input.LA(2);
							if ( (synpred180_Delphi()) ) {
								alt127=1;
							}
							}
							break;
					}
					switch (alt127) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_classMethod8804);
							customAttribute393=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute393.getTree());
							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:51: ( 'class' )?
					int alt128=2;
					int LA128_0 = input.LA(1);
					if ( (LA128_0==CLASS) ) {
						alt128=1;
					}
					switch (alt128) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:52: 'class'
							{
							string_literal394=(Token)match(input,CLASS,FOLLOW_CLASS_in_classMethod8809); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_CLASS.add(string_literal394);

							}
							break;

					}

					string_literal395=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_classMethod8813); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_FUNCTION.add(string_literal395);

					pushFollow(FOLLOW_ident_in_classMethod8815);
					ident396=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident396.getTree());
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:79: ( genericDefinition )?
					int alt129=2;
					int LA129_0 = input.LA(1);
					if ( (LA129_0==LT) ) {
						alt129=1;
					}
					switch (alt129) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:80: genericDefinition
							{
							pushFollow(FOLLOW_genericDefinition_in_classMethod8818);
							genericDefinition397=genericDefinition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_genericDefinition.add(genericDefinition397.getTree());
							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:100: ( formalParameterSection )?
					int alt130=2;
					int LA130_0 = input.LA(1);
					if ( (LA130_0==LPAREN) ) {
						alt130=1;
					}
					switch (alt130) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:101: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_classMethod8823);
							formalParameterSection398=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection398.getTree());
							}
							break;

					}

					char_literal399=(Token)match(input,COLON,FOLLOW_COLON_in_classMethod8827); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(char_literal399);

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:130: ( customAttribute )?
					int alt131=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							int LA131_1 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case PACKED:
							{
							int LA131_2 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case ARRAY:
							{
							int LA131_3 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case SET:
							{
							int LA131_4 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case FILE:
							{
							int LA131_5 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case CLASS:
							{
							int LA131_6 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case DISPINTERFACE:
						case INTERFACE:
							{
							int LA131_7 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case OBJECT:
							{
							int LA131_8 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case RECORD:
							{
							int LA131_9 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case POINTER2:
							{
							int LA131_10 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case POINTER:
							{
							int LA131_11 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case STRING:
							{
							int LA131_12 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case TYPE:
							{
							int LA131_13 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case ANSISTRING:
							{
							int LA131_14 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case FUNCTION:
							{
							int LA131_15 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case PROCEDURE:
							{
							int LA131_16 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case REFERENCE:
							{
							int LA131_17 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case VARIANT:
							{
							int LA131_18 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case TkIdentifier:
							{
							int LA131_19 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case 198:
							{
							int LA131_20 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case ADD:
						case AT:
						case BREAK:
						case CONTAINS:
						case CONTINUE:
						case DEFAULT:
						case EXIT:
						case EXPORT:
						case FINAL:
						case IMPLEMENTS:
						case INDEX:
						case LOCAL:
						case MESSAGE:
						case NAME:
						case OPERATOR:
						case OUT:
						case READ:
						case READONLY:
						case REGISTER:
						case REMOVE:
						case STATIC:
						case STORED:
						case STRICT:
						case UNSAFE:
						case WRITE:
							{
							int LA131_21 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case LPAREN:
							{
							int LA131_22 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case AT2:
							{
							int LA131_23 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case 199:
							{
							int LA131_24 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case NOT:
							{
							int LA131_25 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case PLUS:
							{
							int LA131_26 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case MINUS:
							{
							int LA131_27 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case TkRealNum:
							{
							int LA131_28 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case TkHexNum:
						case TkIntNum:
							{
							int LA131_29 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case TRUE:
							{
							int LA131_30 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case FALSE:
							{
							int LA131_31 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case NIL:
							{
							int LA131_32 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case ControlString:
							{
							int LA131_33 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case QuotedString:
							{
							int LA131_34 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case INHERITED:
							{
							int LA131_35 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case DOT:
							{
							int LA131_36 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case LT:
							{
							int LA131_37 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case AND:
						case AS:
						case DIV:
						case MOD:
						case OR:
						case SHL:
						case SHR:
						case SLASH:
						case STAR:
						case XOR:
							{
							int LA131_38 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case EQUAL:
							{
							int LA131_39 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case GE:
						case GT:
						case IN:
						case IS:
						case LE:
						case NOT_EQUAL:
							{
							int LA131_40 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case DOTDOT:
							{
							int LA131_41 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case SEMI:
							{
							int LA131_42 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt131=1;
							}
							}
							break;
					}
					switch (alt131) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:131: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_classMethod8830);
							customAttribute400=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute400.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_typeDecl_in_classMethod8834);
					typeDecl401=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl401.getTree());
					char_literal402=(Token)match(input,SEMI,FOLLOW_SEMI_in_classMethod8836); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMI.add(char_literal402);

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:162: ( methodDirective )*
					loop132:
					while (true) {
						int alt132=2;
						switch ( input.LA(1) ) {
						case MESSAGE:
							{
							int LA132_2 = input.LA(2);
							if ( ((LA132_2 >= ADD && LA132_2 <= ANSISTRING)||LA132_2==AS||(LA132_2 >= AT && LA132_2 <= AT2)||LA132_2==BREAK||(LA132_2 >= CONTAINS && LA132_2 <= ControlString)||LA132_2==DEFAULT||LA132_2==DIV||LA132_2==DOT||LA132_2==EQUAL||LA132_2==EXIT||LA132_2==EXPORT||LA132_2==FALSE||LA132_2==FINAL||(LA132_2 >= FUNCTION && LA132_2 <= GE)||LA132_2==GT||(LA132_2 >= IMPLEMENTS && LA132_2 <= INHERITED)||LA132_2==IS||LA132_2==LBRACK||LA132_2==LE||(LA132_2 >= LOCAL && LA132_2 <= NAME)||LA132_2==NIL||(LA132_2 >= NOT && LA132_2 <= OBJECT)||(LA132_2 >= OPERATOR && LA132_2 <= OUT)||(LA132_2 >= PLUS && LA132_2 <= POINTER2)||LA132_2==PROCEDURE||LA132_2==QuotedString||(LA132_2 >= READ && LA132_2 <= READONLY)||(LA132_2 >= REFERENCE && LA132_2 <= REGISTER)||LA132_2==REMOVE||LA132_2==SEMI||(LA132_2 >= SHL && LA132_2 <= STATIC)||(LA132_2 >= STORED && LA132_2 <= STRING)||LA132_2==TRUE||(LA132_2 >= TkHexNum && LA132_2 <= TkIntNum)||LA132_2==TkRealNum||LA132_2==UNSAFE||LA132_2==VARIANT||LA132_2==WRITE||(LA132_2 >= XOR && LA132_2 <= 199)) ) {
								alt132=1;
							}

							}
							break;
						case ABSTRACT:
						case ASSEMBLER:
						case CDECL:
						case DEPRECATED:
						case DISPID:
						case DYNAMIC:
						case EXPERIMENTAL:
						case FAR:
						case INLINE:
						case LIBRARY:
						case NEAR:
						case OVERLOAD:
						case OVERRIDE:
						case PASCAL:
						case PLATFORM:
						case REINTRODUCE:
						case SAFECALL:
						case STDCALL:
						case VIRTUAL:
							{
							alt132=1;
							}
							break;
						case STATIC:
							{
							int LA132_4 = input.LA(2);
							if ( (LA132_4==SEMI) ) {
								alt132=1;
							}

							}
							break;
						case FINAL:
							{
							int LA132_5 = input.LA(2);
							if ( (LA132_5==SEMI) ) {
								alt132=1;
							}

							}
							break;
						case REGISTER:
							{
							int LA132_6 = input.LA(2);
							if ( (LA132_6==SEMI) ) {
								alt132=1;
							}

							}
							break;
						case EXPORT:
							{
							int LA132_7 = input.LA(2);
							if ( (LA132_7==SEMI) ) {
								alt132=1;
							}

							}
							break;
						case LOCAL:
							{
							int LA132_8 = input.LA(2);
							if ( (LA132_8==SEMI) ) {
								alt132=1;
							}

							}
							break;
						}
						switch (alt132) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:163: methodDirective
							{
							pushFollow(FOLLOW_methodDirective_in_classMethod8839);
							methodDirective403=methodDirective();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_methodDirective.add(methodDirective403.getTree());
							}
							break;

						default :
							break loop132;
						}
					}

					// AST REWRITE
					// elements: CLASS, methodDirective, genericDefinition, customAttribute, FUNCTION, ident, typeDecl, customAttribute, formalParameterSection
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 354:30: -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? ^( TkFunctionReturn typeDecl ) ( methodDirective )* )
					{
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:33: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_0, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:52: ( 'class' )?
						if ( stream_CLASS.hasNext() ) {
							adaptor.addChild(root_0, stream_CLASS.nextNode());
						}
						stream_CLASS.reset();

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:63: ^( 'function' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? ^( TkFunctionReturn typeDecl ) ( methodDirective )* )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_FUNCTION.nextNode(), root_1);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:76: ^( TkFunctionName ident )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_ident.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:100: ( genericDefinition )?
						if ( stream_genericDefinition.hasNext() ) {
							adaptor.addChild(root_1, stream_genericDefinition.nextTree());
						}
						stream_genericDefinition.reset();

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:121: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:138: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:165: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_1, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:184: ^( TkFunctionReturn typeDecl )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionReturn, "TkFunctionReturn"), root_2);
						adaptor.addChild(root_2, stream_typeDecl.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:213: ( methodDirective )*
						while ( stream_methodDirective.hasNext() ) {
							adaptor.addChild(root_1, stream_methodDirective.nextTree());
						}
						stream_methodDirective.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:32: ( customAttribute )? ( 'class' )? 'operator' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';'
					{
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:32: ( customAttribute )?
					int alt133=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							alt133=1;
							}
							break;
						case CLASS:
							{
							int LA133_2 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt133=1;
							}
							}
							break;
						case OPERATOR:
							{
							int LA133_3 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt133=1;
							}
							}
							break;
					}
					switch (alt133) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_classMethod8956);
							customAttribute404=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute404.getTree());
							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:51: ( 'class' )?
					int alt134=2;
					int LA134_0 = input.LA(1);
					if ( (LA134_0==CLASS) ) {
						alt134=1;
					}
					switch (alt134) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:52: 'class'
							{
							string_literal405=(Token)match(input,CLASS,FOLLOW_CLASS_in_classMethod8961); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_CLASS.add(string_literal405);

							}
							break;

					}

					string_literal406=(Token)match(input,OPERATOR,FOLLOW_OPERATOR_in_classMethod8965); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_OPERATOR.add(string_literal406);

					pushFollow(FOLLOW_ident_in_classMethod8967);
					ident407=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident407.getTree());
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:79: ( genericDefinition )?
					int alt135=2;
					int LA135_0 = input.LA(1);
					if ( (LA135_0==LT) ) {
						alt135=1;
					}
					switch (alt135) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:80: genericDefinition
							{
							pushFollow(FOLLOW_genericDefinition_in_classMethod8970);
							genericDefinition408=genericDefinition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_genericDefinition.add(genericDefinition408.getTree());
							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:100: ( formalParameterSection )?
					int alt136=2;
					int LA136_0 = input.LA(1);
					if ( (LA136_0==LPAREN) ) {
						alt136=1;
					}
					switch (alt136) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:101: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_classMethod8975);
							formalParameterSection409=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection409.getTree());
							}
							break;

					}

					char_literal410=(Token)match(input,COLON,FOLLOW_COLON_in_classMethod8979); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(char_literal410);

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:130: ( customAttribute )?
					int alt137=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							int LA137_1 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case PACKED:
							{
							int LA137_2 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case ARRAY:
							{
							int LA137_3 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case SET:
							{
							int LA137_4 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case FILE:
							{
							int LA137_5 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case CLASS:
							{
							int LA137_6 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case DISPINTERFACE:
						case INTERFACE:
							{
							int LA137_7 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case OBJECT:
							{
							int LA137_8 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case RECORD:
							{
							int LA137_9 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case POINTER2:
							{
							int LA137_10 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case POINTER:
							{
							int LA137_11 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case STRING:
							{
							int LA137_12 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case TYPE:
							{
							int LA137_13 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case ANSISTRING:
							{
							int LA137_14 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case FUNCTION:
							{
							int LA137_15 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case PROCEDURE:
							{
							int LA137_16 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case REFERENCE:
							{
							int LA137_17 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case VARIANT:
							{
							int LA137_18 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case TkIdentifier:
							{
							int LA137_19 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case 198:
							{
							int LA137_20 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case ADD:
						case AT:
						case BREAK:
						case CONTAINS:
						case CONTINUE:
						case DEFAULT:
						case EXIT:
						case EXPORT:
						case FINAL:
						case IMPLEMENTS:
						case INDEX:
						case LOCAL:
						case MESSAGE:
						case NAME:
						case OPERATOR:
						case OUT:
						case READ:
						case READONLY:
						case REGISTER:
						case REMOVE:
						case STATIC:
						case STORED:
						case STRICT:
						case UNSAFE:
						case WRITE:
							{
							int LA137_21 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case LPAREN:
							{
							int LA137_22 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case AT2:
							{
							int LA137_23 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case 199:
							{
							int LA137_24 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case NOT:
							{
							int LA137_25 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case PLUS:
							{
							int LA137_26 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case MINUS:
							{
							int LA137_27 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case TkRealNum:
							{
							int LA137_28 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case TkHexNum:
						case TkIntNum:
							{
							int LA137_29 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case TRUE:
							{
							int LA137_30 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case FALSE:
							{
							int LA137_31 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case NIL:
							{
							int LA137_32 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case ControlString:
							{
							int LA137_33 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case QuotedString:
							{
							int LA137_34 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case INHERITED:
							{
							int LA137_35 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case DOT:
							{
							int LA137_36 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case LT:
							{
							int LA137_37 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case AND:
						case AS:
						case DIV:
						case MOD:
						case OR:
						case SHL:
						case SHR:
						case SLASH:
						case STAR:
						case XOR:
							{
							int LA137_38 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case EQUAL:
							{
							int LA137_39 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case GE:
						case GT:
						case IN:
						case IS:
						case LE:
						case NOT_EQUAL:
							{
							int LA137_40 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case DOTDOT:
							{
							int LA137_41 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case SEMI:
							{
							int LA137_42 = input.LA(2);
							if ( (synpred191_Delphi()) ) {
								alt137=1;
							}
							}
							break;
					}
					switch (alt137) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:131: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_classMethod8982);
							customAttribute411=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute411.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_typeDecl_in_classMethod8986);
					typeDecl412=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl412.getTree());
					char_literal413=(Token)match(input,SEMI,FOLLOW_SEMI_in_classMethod8988); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMI.add(char_literal413);

					// AST REWRITE
					// elements: OPERATOR, customAttribute, CLASS, ident, typeDecl, genericDefinition, formalParameterSection, customAttribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 356:30: -> ( customAttribute )? ( 'class' )? ^( 'operator' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? typeDecl )
					{
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:33: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_0, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:52: ( 'class' )?
						if ( stream_CLASS.hasNext() ) {
							adaptor.addChild(root_0, stream_CLASS.nextNode());
						}
						stream_CLASS.reset();

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:63: ^( 'operator' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? typeDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_OPERATOR.nextNode(), root_1);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:76: ^( TkFunctionName ident )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_ident.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:100: ( genericDefinition )?
						if ( stream_genericDefinition.hasNext() ) {
							adaptor.addChild(root_1, stream_genericDefinition.nextTree());
						}
						stream_genericDefinition.reset();

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:121: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:138: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:165: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_1, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						adaptor.addChild(root_1, stream_typeDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:32: ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? '.' ident '=' ident ';'
					{
					root_0 = (Object)adaptor.nil();


					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:32: ( customAttribute )?
					int alt138=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							alt138=1;
							}
							break;
						case CLASS:
							{
							int LA138_2 = input.LA(2);
							if ( (synpred193_Delphi()) ) {
								alt138=1;
							}
							}
							break;
						case FUNCTION:
							{
							int LA138_3 = input.LA(2);
							if ( (synpred193_Delphi()) ) {
								alt138=1;
							}
							}
							break;
					}
					switch (alt138) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_classMethod9095);
							customAttribute414=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, customAttribute414.getTree());

							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:51: ( 'class' )?
					int alt139=2;
					int LA139_0 = input.LA(1);
					if ( (LA139_0==CLASS) ) {
						alt139=1;
					}
					switch (alt139) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:52: 'class'
							{
							string_literal415=(Token)match(input,CLASS,FOLLOW_CLASS_in_classMethod9100); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal415_tree = (Object)adaptor.create(string_literal415);
							adaptor.addChild(root_0, string_literal415_tree);
							}

							}
							break;

					}

					string_literal416=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_classMethod9104); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal416_tree = (Object)adaptor.create(string_literal416);
					adaptor.addChild(root_0, string_literal416_tree);
					}

					pushFollow(FOLLOW_ident_in_classMethod9106);
					ident417=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident417.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:79: ( genericDefinition )?
					int alt140=2;
					int LA140_0 = input.LA(1);
					if ( (LA140_0==LT) ) {
						alt140=1;
					}
					switch (alt140) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:80: genericDefinition
							{
							pushFollow(FOLLOW_genericDefinition_in_classMethod9109);
							genericDefinition418=genericDefinition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, genericDefinition418.getTree());

							}
							break;

					}

					char_literal419=(Token)match(input,DOT,FOLLOW_DOT_in_classMethod9113); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal419_tree = (Object)adaptor.create(char_literal419);
					adaptor.addChild(root_0, char_literal419_tree);
					}

					pushFollow(FOLLOW_ident_in_classMethod9115);
					ident420=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident420.getTree());

					char_literal421=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_classMethod9117); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal421_tree = (Object)adaptor.create(char_literal421);
					adaptor.addChild(root_0, char_literal421_tree);
					}

					pushFollow(FOLLOW_ident_in_classMethod9119);
					ident422=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident422.getTree());

					char_literal423=(Token)match(input,SEMI,FOLLOW_SEMI_in_classMethod9121); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal423_tree = (Object)adaptor.create(char_literal423);
					adaptor.addChild(root_0, char_literal423_tree);
					}

					}
					break;
				case 5 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:32: ( customAttribute )? ( 'class' )? 'procedure' ident ( genericDefinition )? '.' ident '=' ident ';'
					{
					root_0 = (Object)adaptor.nil();


					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:32: ( customAttribute )?
					int alt141=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							alt141=1;
							}
							break;
						case CLASS:
							{
							int LA141_2 = input.LA(2);
							if ( (synpred197_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case PROCEDURE:
							{
							int LA141_3 = input.LA(2);
							if ( (synpred197_Delphi()) ) {
								alt141=1;
							}
							}
							break;
					}
					switch (alt141) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_classMethod9155);
							customAttribute424=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, customAttribute424.getTree());

							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:51: ( 'class' )?
					int alt142=2;
					int LA142_0 = input.LA(1);
					if ( (LA142_0==CLASS) ) {
						alt142=1;
					}
					switch (alt142) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:52: 'class'
							{
							string_literal425=(Token)match(input,CLASS,FOLLOW_CLASS_in_classMethod9160); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal425_tree = (Object)adaptor.create(string_literal425);
							adaptor.addChild(root_0, string_literal425_tree);
							}

							}
							break;

					}

					string_literal426=(Token)match(input,PROCEDURE,FOLLOW_PROCEDURE_in_classMethod9164); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal426_tree = (Object)adaptor.create(string_literal426);
					adaptor.addChild(root_0, string_literal426_tree);
					}

					pushFollow(FOLLOW_ident_in_classMethod9166);
					ident427=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident427.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:80: ( genericDefinition )?
					int alt143=2;
					int LA143_0 = input.LA(1);
					if ( (LA143_0==LT) ) {
						alt143=1;
					}
					switch (alt143) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:81: genericDefinition
							{
							pushFollow(FOLLOW_genericDefinition_in_classMethod9169);
							genericDefinition428=genericDefinition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, genericDefinition428.getTree());

							}
							break;

					}

					char_literal429=(Token)match(input,DOT,FOLLOW_DOT_in_classMethod9173); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal429_tree = (Object)adaptor.create(char_literal429);
					adaptor.addChild(root_0, char_literal429_tree);
					}

					pushFollow(FOLLOW_ident_in_classMethod9175);
					ident430=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident430.getTree());

					char_literal431=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_classMethod9177); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal431_tree = (Object)adaptor.create(char_literal431);
					adaptor.addChild(root_0, char_literal431_tree);
					}

					pushFollow(FOLLOW_ident_in_classMethod9179);
					ident432=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident432.getTree());

					char_literal433=(Token)match(input,SEMI,FOLLOW_SEMI_in_classMethod9181); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal433_tree = (Object)adaptor.create(char_literal433);
					adaptor.addChild(root_0, char_literal433_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 90, classMethod_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classMethod"


	public static class classField_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classField"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:360:1: classField : ( customAttribute )? identList ':' typeDecl ';' ( hintingDirective )* -> ( customAttribute )? ^( TkClassField ^( TkVariableIdents identList ) ^( TkVariableType typeDecl ) ) ;
	public final DelphiParser.classField_return classField() throws RecognitionException {
		DelphiParser.classField_return retval = new DelphiParser.classField_return();
		retval.start = input.LT(1);
		int classField_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal436=null;
		Token char_literal438=null;
		ParserRuleReturnScope customAttribute434 =null;
		ParserRuleReturnScope identList435 =null;
		ParserRuleReturnScope typeDecl437 =null;
		ParserRuleReturnScope hintingDirective439 =null;

		Object char_literal436_tree=null;
		Object char_literal438_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_identList=new RewriteRuleSubtreeStream(adaptor,"rule identList");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:360:30: ( ( customAttribute )? identList ':' typeDecl ';' ( hintingDirective )* -> ( customAttribute )? ^( TkClassField ^( TkVariableIdents identList ) ^( TkVariableType typeDecl ) ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:360:32: ( customAttribute )? identList ':' typeDecl ';' ( hintingDirective )*
			{
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:360:32: ( customAttribute )?
			int alt145=2;
			switch ( input.LA(1) ) {
				case LBRACK:
					{
					alt145=1;
					}
					break;
				case TkIdentifier:
					{
					int LA145_2 = input.LA(2);
					if ( (synpred200_Delphi()) ) {
						alt145=1;
					}
					}
					break;
				case 198:
					{
					int LA145_3 = input.LA(2);
					if ( (synpred200_Delphi()) ) {
						alt145=1;
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case EXIT:
				case EXPORT:
				case FINAL:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STATIC:
				case STORED:
				case STRICT:
				case STRING:
				case UNSAFE:
				case VARIANT:
				case WRITE:
					{
					int LA145_4 = input.LA(2);
					if ( (synpred200_Delphi()) ) {
						alt145=1;
					}
					}
					break;
			}
			switch (alt145) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:360:33: customAttribute
					{
					pushFollow(FOLLOW_customAttribute_in_classField9237);
					customAttribute434=customAttribute();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute434.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_identList_in_classField9241);
			identList435=identList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identList.add(identList435.getTree());
			char_literal436=(Token)match(input,COLON,FOLLOW_COLON_in_classField9243); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_COLON.add(char_literal436);

			pushFollow(FOLLOW_typeDecl_in_classField9245);
			typeDecl437=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl437.getTree());
			char_literal438=(Token)match(input,SEMI,FOLLOW_SEMI_in_classField9247); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal438);

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:360:78: ( hintingDirective )*
			loop146:
			while (true) {
				int alt146=2;
				int LA146_0 = input.LA(1);
				if ( (LA146_0==DEPRECATED||LA146_0==EXPERIMENTAL||LA146_0==LIBRARY||LA146_0==PLATFORM) ) {
					alt146=1;
				}

				switch (alt146) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:360:79: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_classField9250);
					hintingDirective439=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective439.getTree());
					}
					break;

				default :
					break loop146;
				}
			}

			// AST REWRITE
			// elements: identList, typeDecl, customAttribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 361:30: -> ( customAttribute )? ^( TkClassField ^( TkVariableIdents identList ) ^( TkVariableType typeDecl ) )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:33: ( customAttribute )?
				if ( stream_customAttribute.hasNext() ) {
					adaptor.addChild(root_0, stream_customAttribute.nextTree());
				}
				stream_customAttribute.reset();

				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:52: ^( TkClassField ^( TkVariableIdents identList ) ^( TkVariableType typeDecl ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClassField, "TkClassField"), root_1);
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:67: ^( TkVariableIdents identList )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableIdents, "TkVariableIdents"), root_2);
				adaptor.addChild(root_2, stream_identList.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:97: ^( TkVariableType typeDecl )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableType, "TkVariableType"), root_2);
				adaptor.addChild(root_2, stream_typeDecl.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 91, classField_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classField"


	public static class classProperty_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classProperty"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:1: classProperty : ( customAttribute )? ( 'class' )? 'property' ident ( classPropertyArray )? ( ':' genericTypeIdent )? ( classPropertyIndex )? ( classPropertySpecifier )* ';' ( classPropertyEndSpecifier )* -> ^( 'property' ^( TkVariableIdents ident ) ^( TkVariableType ( genericTypeIdent )? ) ( classPropertySpecifier )* ) ;
	public final DelphiParser.classProperty_return classProperty() throws RecognitionException {
		DelphiParser.classProperty_return retval = new DelphiParser.classProperty_return();
		retval.start = input.LT(1);
		int classProperty_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal441=null;
		Token string_literal442=null;
		Token char_literal445=null;
		Token char_literal449=null;
		ParserRuleReturnScope customAttribute440 =null;
		ParserRuleReturnScope ident443 =null;
		ParserRuleReturnScope classPropertyArray444 =null;
		ParserRuleReturnScope genericTypeIdent446 =null;
		ParserRuleReturnScope classPropertyIndex447 =null;
		ParserRuleReturnScope classPropertySpecifier448 =null;
		ParserRuleReturnScope classPropertyEndSpecifier450 =null;

		Object string_literal441_tree=null;
		Object string_literal442_tree=null;
		Object char_literal445_tree=null;
		Object char_literal449_tree=null;
		RewriteRuleTokenStream stream_PROPERTY=new RewriteRuleTokenStream(adaptor,"token PROPERTY");
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_classPropertyEndSpecifier=new RewriteRuleSubtreeStream(adaptor,"rule classPropertyEndSpecifier");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_genericTypeIdent=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeIdent");
		RewriteRuleSubtreeStream stream_classPropertyIndex=new RewriteRuleSubtreeStream(adaptor,"rule classPropertyIndex");
		RewriteRuleSubtreeStream stream_classPropertyArray=new RewriteRuleSubtreeStream(adaptor,"rule classPropertyArray");
		RewriteRuleSubtreeStream stream_classPropertySpecifier=new RewriteRuleSubtreeStream(adaptor,"rule classPropertySpecifier");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:30: ( ( customAttribute )? ( 'class' )? 'property' ident ( classPropertyArray )? ( ':' genericTypeIdent )? ( classPropertyIndex )? ( classPropertySpecifier )* ';' ( classPropertyEndSpecifier )* -> ^( 'property' ^( TkVariableIdents ident ) ^( TkVariableType ( genericTypeIdent )? ) ( classPropertySpecifier )* ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:32: ( customAttribute )? ( 'class' )? 'property' ident ( classPropertyArray )? ( ':' genericTypeIdent )? ( classPropertyIndex )? ( classPropertySpecifier )* ';' ( classPropertyEndSpecifier )*
			{
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:32: ( customAttribute )?
			int alt147=2;
			switch ( input.LA(1) ) {
				case LBRACK:
					{
					alt147=1;
					}
					break;
				case CLASS:
					{
					int LA147_2 = input.LA(2);
					if ( (synpred202_Delphi()) ) {
						alt147=1;
					}
					}
					break;
				case PROPERTY:
					{
					int LA147_3 = input.LA(2);
					if ( (synpred202_Delphi()) ) {
						alt147=1;
					}
					}
					break;
			}
			switch (alt147) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:33: customAttribute
					{
					pushFollow(FOLLOW_customAttribute_in_classProperty9357);
					customAttribute440=customAttribute();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute440.getTree());
					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:51: ( 'class' )?
			int alt148=2;
			int LA148_0 = input.LA(1);
			if ( (LA148_0==CLASS) ) {
				alt148=1;
			}
			switch (alt148) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:52: 'class'
					{
					string_literal441=(Token)match(input,CLASS,FOLLOW_CLASS_in_classProperty9362); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_CLASS.add(string_literal441);

					}
					break;

			}

			string_literal442=(Token)match(input,PROPERTY,FOLLOW_PROPERTY_in_classProperty9366); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_PROPERTY.add(string_literal442);

			pushFollow(FOLLOW_ident_in_classProperty9368);
			ident443=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_ident.add(ident443.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:79: ( classPropertyArray )?
			int alt149=2;
			int LA149_0 = input.LA(1);
			if ( (LA149_0==LBRACK) ) {
				alt149=1;
			}
			switch (alt149) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:80: classPropertyArray
					{
					pushFollow(FOLLOW_classPropertyArray_in_classProperty9371);
					classPropertyArray444=classPropertyArray();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classPropertyArray.add(classPropertyArray444.getTree());
					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:101: ( ':' genericTypeIdent )?
			int alt150=2;
			int LA150_0 = input.LA(1);
			if ( (LA150_0==COLON) ) {
				alt150=1;
			}
			switch (alt150) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:102: ':' genericTypeIdent
					{
					char_literal445=(Token)match(input,COLON,FOLLOW_COLON_in_classProperty9376); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(char_literal445);

					pushFollow(FOLLOW_genericTypeIdent_in_classProperty9378);
					genericTypeIdent446=genericTypeIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_genericTypeIdent.add(genericTypeIdent446.getTree());
					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:125: ( classPropertyIndex )?
			int alt151=2;
			int LA151_0 = input.LA(1);
			if ( (LA151_0==INDEX) ) {
				alt151=1;
			}
			switch (alt151) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:126: classPropertyIndex
					{
					pushFollow(FOLLOW_classPropertyIndex_in_classProperty9383);
					classPropertyIndex447=classPropertyIndex();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classPropertyIndex.add(classPropertyIndex447.getTree());
					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:147: ( classPropertySpecifier )*
			loop152:
			while (true) {
				int alt152=2;
				int LA152_0 = input.LA(1);
				if ( (LA152_0==DEFAULT||LA152_0==DISPID||LA152_0==IMPLEMENTS||LA152_0==NODEFAULT||(LA152_0 >= READ && LA152_0 <= READONLY)||LA152_0==STORED||(LA152_0 >= WRITE && LA152_0 <= WRITEONLY)) ) {
					alt152=1;
				}

				switch (alt152) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:148: classPropertySpecifier
					{
					pushFollow(FOLLOW_classPropertySpecifier_in_classProperty9388);
					classPropertySpecifier448=classPropertySpecifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classPropertySpecifier.add(classPropertySpecifier448.getTree());
					}
					break;

				default :
					break loop152;
				}
			}

			char_literal449=(Token)match(input,SEMI,FOLLOW_SEMI_in_classProperty9392); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal449);

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:177: ( classPropertyEndSpecifier )*
			loop153:
			while (true) {
				int alt153=2;
				switch ( input.LA(1) ) {
				case STORED:
					{
					int LA153_2 = input.LA(2);
					if ( ((LA153_2 >= ADD && LA153_2 <= ANSISTRING)||LA153_2==AS||(LA153_2 >= AT && LA153_2 <= AT2)||LA153_2==BREAK||(LA153_2 >= CONTAINS && LA153_2 <= ControlString)||LA153_2==DEFAULT||LA153_2==DIV||LA153_2==DOT||LA153_2==EQUAL||LA153_2==EXIT||LA153_2==EXPORT||LA153_2==FALSE||LA153_2==FINAL||(LA153_2 >= FUNCTION && LA153_2 <= GE)||LA153_2==GT||(LA153_2 >= IMPLEMENTS && LA153_2 <= INHERITED)||LA153_2==IS||LA153_2==LBRACK||LA153_2==LE||(LA153_2 >= LOCAL && LA153_2 <= NAME)||LA153_2==NIL||(LA153_2 >= NOT && LA153_2 <= OBJECT)||(LA153_2 >= OPERATOR && LA153_2 <= OUT)||(LA153_2 >= PLUS && LA153_2 <= POINTER2)||LA153_2==PROCEDURE||LA153_2==QuotedString||(LA153_2 >= READ && LA153_2 <= READONLY)||(LA153_2 >= REFERENCE && LA153_2 <= REGISTER)||LA153_2==REMOVE||LA153_2==SEMI||(LA153_2 >= SHL && LA153_2 <= STATIC)||(LA153_2 >= STORED && LA153_2 <= STRING)||LA153_2==TRUE||(LA153_2 >= TkHexNum && LA153_2 <= TkIntNum)||LA153_2==TkRealNum||LA153_2==UNSAFE||LA153_2==VARIANT||LA153_2==WRITE||(LA153_2 >= XOR && LA153_2 <= 199)) ) {
						alt153=1;
					}

					}
					break;
				case DEFAULT:
					{
					int LA153_3 = input.LA(2);
					if ( ((LA153_3 >= ADD && LA153_3 <= ANSISTRING)||LA153_3==AS||(LA153_3 >= AT && LA153_3 <= AT2)||LA153_3==BREAK||(LA153_3 >= CONTAINS && LA153_3 <= ControlString)||LA153_3==DEFAULT||LA153_3==DIV||LA153_3==DOT||LA153_3==EQUAL||LA153_3==EXIT||LA153_3==EXPORT||LA153_3==FALSE||LA153_3==FINAL||(LA153_3 >= FUNCTION && LA153_3 <= GE)||LA153_3==GT||(LA153_3 >= IMPLEMENTS && LA153_3 <= INHERITED)||LA153_3==IS||LA153_3==LBRACK||LA153_3==LE||(LA153_3 >= LOCAL && LA153_3 <= NAME)||LA153_3==NIL||(LA153_3 >= NOT && LA153_3 <= OBJECT)||(LA153_3 >= OPERATOR && LA153_3 <= OUT)||(LA153_3 >= PLUS && LA153_3 <= POINTER2)||LA153_3==PROCEDURE||LA153_3==QuotedString||(LA153_3 >= READ && LA153_3 <= READONLY)||(LA153_3 >= REFERENCE && LA153_3 <= REGISTER)||LA153_3==REMOVE||LA153_3==SEMI||(LA153_3 >= SHL && LA153_3 <= STATIC)||(LA153_3 >= STORED && LA153_3 <= STRING)||LA153_3==TRUE||(LA153_3 >= TkHexNum && LA153_3 <= TkIntNum)||LA153_3==TkRealNum||LA153_3==UNSAFE||LA153_3==VARIANT||LA153_3==WRITE||(LA153_3 >= XOR && LA153_3 <= 199)) ) {
						alt153=1;
					}

					}
					break;
				case NODEFAULT:
					{
					alt153=1;
					}
					break;
				}
				switch (alt153) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:178: classPropertyEndSpecifier
					{
					pushFollow(FOLLOW_classPropertyEndSpecifier_in_classProperty9395);
					classPropertyEndSpecifier450=classPropertyEndSpecifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classPropertyEndSpecifier.add(classPropertyEndSpecifier450.getTree());
					}
					break;

				default :
					break loop153;
				}
			}

			// AST REWRITE
			// elements: PROPERTY, genericTypeIdent, classPropertySpecifier, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 364:31: -> ^( 'property' ^( TkVariableIdents ident ) ^( TkVariableType ( genericTypeIdent )? ) ( classPropertySpecifier )* )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:34: ^( 'property' ^( TkVariableIdents ident ) ^( TkVariableType ( genericTypeIdent )? ) ( classPropertySpecifier )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_PROPERTY.nextNode(), root_1);
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:47: ^( TkVariableIdents ident )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableIdents, "TkVariableIdents"), root_2);
				adaptor.addChild(root_2, stream_ident.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:73: ^( TkVariableType ( genericTypeIdent )? )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableType, "TkVariableType"), root_2);
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:90: ( genericTypeIdent )?
				if ( stream_genericTypeIdent.hasNext() ) {
					adaptor.addChild(root_2, stream_genericTypeIdent.nextTree());
				}
				stream_genericTypeIdent.reset();

				adaptor.addChild(root_1, root_2);
				}

				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:109: ( classPropertySpecifier )*
				while ( stream_classPropertySpecifier.hasNext() ) {
					adaptor.addChild(root_1, stream_classPropertySpecifier.nextTree());
				}
				stream_classPropertySpecifier.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 92, classProperty_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classProperty"


	public static class classPropertyArray_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classPropertyArray"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:368:1: classPropertyArray : '[' formalParameterList ']' ;
	public final DelphiParser.classPropertyArray_return classPropertyArray() throws RecognitionException {
		DelphiParser.classPropertyArray_return retval = new DelphiParser.classPropertyArray_return();
		retval.start = input.LT(1);
		int classPropertyArray_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal451=null;
		Token char_literal453=null;
		ParserRuleReturnScope formalParameterList452 =null;

		Object char_literal451_tree=null;
		Object char_literal453_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:368:30: ( '[' formalParameterList ']' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:368:32: '[' formalParameterList ']'
			{
			root_0 = (Object)adaptor.nil();


			char_literal451=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_classPropertyArray9561); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal451_tree = (Object)adaptor.create(char_literal451);
			adaptor.addChild(root_0, char_literal451_tree);
			}

			pushFollow(FOLLOW_formalParameterList_in_classPropertyArray9563);
			formalParameterList452=formalParameterList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterList452.getTree());

			char_literal453=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_classPropertyArray9565); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal453_tree = (Object)adaptor.create(char_literal453);
			adaptor.addChild(root_0, char_literal453_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 93, classPropertyArray_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classPropertyArray"


	public static class classPropertyIndex_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classPropertyIndex"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:370:1: classPropertyIndex : 'index' expression ( ';' )? ;
	public final DelphiParser.classPropertyIndex_return classPropertyIndex() throws RecognitionException {
		DelphiParser.classPropertyIndex_return retval = new DelphiParser.classPropertyIndex_return();
		retval.start = input.LT(1);
		int classPropertyIndex_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal454=null;
		Token char_literal456=null;
		ParserRuleReturnScope expression455 =null;

		Object string_literal454_tree=null;
		Object char_literal456_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:370:30: ( 'index' expression ( ';' )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:370:32: 'index' expression ( ';' )?
			{
			root_0 = (Object)adaptor.nil();


			string_literal454=(Token)match(input,INDEX,FOLLOW_INDEX_in_classPropertyIndex9612); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal454_tree = (Object)adaptor.create(string_literal454);
			adaptor.addChild(root_0, string_literal454_tree);
			}

			pushFollow(FOLLOW_expression_in_classPropertyIndex9614);
			expression455=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression455.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:370:51: ( ';' )?
			int alt154=2;
			int LA154_0 = input.LA(1);
			if ( (LA154_0==SEMI) ) {
				int LA154_1 = input.LA(2);
				if ( (synpred209_Delphi()) ) {
					alt154=1;
				}
			}
			switch (alt154) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:370:52: ';'
					{
					char_literal456=(Token)match(input,SEMI,FOLLOW_SEMI_in_classPropertyIndex9617); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal456_tree = (Object)adaptor.create(char_literal456);
					adaptor.addChild(root_0, char_literal456_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 94, classPropertyIndex_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classPropertyIndex"


	public static class classPropertySpecifier_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classPropertySpecifier"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:372:1: classPropertySpecifier : ( classPropertyReadWrite | classPropertyDispInterface | STORED expression | 'default' expression | 'default' | 'nodefault' | IMPLEMENTS typeId );
	public final DelphiParser.classPropertySpecifier_return classPropertySpecifier() throws RecognitionException {
		DelphiParser.classPropertySpecifier_return retval = new DelphiParser.classPropertySpecifier_return();
		retval.start = input.LT(1);
		int classPropertySpecifier_StartIndex = input.index();

		Object root_0 = null;

		Token STORED459=null;
		Token string_literal461=null;
		Token string_literal463=null;
		Token string_literal464=null;
		Token IMPLEMENTS465=null;
		ParserRuleReturnScope classPropertyReadWrite457 =null;
		ParserRuleReturnScope classPropertyDispInterface458 =null;
		ParserRuleReturnScope expression460 =null;
		ParserRuleReturnScope expression462 =null;
		ParserRuleReturnScope typeId466 =null;

		Object STORED459_tree=null;
		Object string_literal461_tree=null;
		Object string_literal463_tree=null;
		Object string_literal464_tree=null;
		Object IMPLEMENTS465_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:372:30: ( classPropertyReadWrite | classPropertyDispInterface | STORED expression | 'default' expression | 'default' | 'nodefault' | IMPLEMENTS typeId )
			int alt155=7;
			switch ( input.LA(1) ) {
			case READ:
			case WRITE:
				{
				alt155=1;
				}
				break;
			case DISPID:
			case READONLY:
			case WRITEONLY:
				{
				alt155=2;
				}
				break;
			case STORED:
				{
				alt155=3;
				}
				break;
			case DEFAULT:
				{
				int LA155_4 = input.LA(2);
				if ( (synpred213_Delphi()) ) {
					alt155=4;
				}
				else if ( (synpred214_Delphi()) ) {
					alt155=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 155, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case NODEFAULT:
				{
				alt155=6;
				}
				break;
			case IMPLEMENTS:
				{
				alt155=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 155, 0, input);
				throw nvae;
			}
			switch (alt155) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:372:32: classPropertyReadWrite
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classPropertyReadWrite_in_classPropertySpecifier9664);
					classPropertyReadWrite457=classPropertyReadWrite();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classPropertyReadWrite457.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:373:32: classPropertyDispInterface
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classPropertyDispInterface_in_classPropertySpecifier9700);
					classPropertyDispInterface458=classPropertyDispInterface();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classPropertyDispInterface458.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:374:32: STORED expression
					{
					root_0 = (Object)adaptor.nil();


					STORED459=(Token)match(input,STORED,FOLLOW_STORED_in_classPropertySpecifier9733); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					STORED459_tree = (Object)adaptor.create(STORED459);
					adaptor.addChild(root_0, STORED459_tree);
					}

					pushFollow(FOLLOW_expression_in_classPropertySpecifier9735);
					expression460=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression460.getTree());

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:375:32: 'default' expression
					{
					root_0 = (Object)adaptor.nil();


					string_literal461=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_classPropertySpecifier9768); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal461_tree = (Object)adaptor.create(string_literal461);
					adaptor.addChild(root_0, string_literal461_tree);
					}

					pushFollow(FOLLOW_expression_in_classPropertySpecifier9770);
					expression462=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression462.getTree());

					}
					break;
				case 5 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:376:32: 'default'
					{
					root_0 = (Object)adaptor.nil();


					string_literal463=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_classPropertySpecifier9803); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal463_tree = (Object)adaptor.create(string_literal463);
					adaptor.addChild(root_0, string_literal463_tree);
					}

					}
					break;
				case 6 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:377:32: 'nodefault'
					{
					root_0 = (Object)adaptor.nil();


					string_literal464=(Token)match(input,NODEFAULT,FOLLOW_NODEFAULT_in_classPropertySpecifier9852); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal464_tree = (Object)adaptor.create(string_literal464);
					adaptor.addChild(root_0, string_literal464_tree);
					}

					}
					break;
				case 7 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:378:32: IMPLEMENTS typeId
					{
					root_0 = (Object)adaptor.nil();


					IMPLEMENTS465=(Token)match(input,IMPLEMENTS,FOLLOW_IMPLEMENTS_in_classPropertySpecifier9885); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IMPLEMENTS465_tree = (Object)adaptor.create(IMPLEMENTS465);
					adaptor.addChild(root_0, IMPLEMENTS465_tree);
					}

					pushFollow(FOLLOW_typeId_in_classPropertySpecifier9887);
					typeId466=typeId();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeId466.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 95, classPropertySpecifier_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classPropertySpecifier"


	public static class classPropertyEndSpecifier_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classPropertyEndSpecifier"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:380:1: classPropertyEndSpecifier : ( STORED expression ';' | 'default' expression ';' | 'default' ';' | 'nodefault' ';' );
	public final DelphiParser.classPropertyEndSpecifier_return classPropertyEndSpecifier() throws RecognitionException {
		DelphiParser.classPropertyEndSpecifier_return retval = new DelphiParser.classPropertyEndSpecifier_return();
		retval.start = input.LT(1);
		int classPropertyEndSpecifier_StartIndex = input.index();

		Object root_0 = null;

		Token STORED467=null;
		Token char_literal469=null;
		Token string_literal470=null;
		Token char_literal472=null;
		Token string_literal473=null;
		Token char_literal474=null;
		Token string_literal475=null;
		Token char_literal476=null;
		ParserRuleReturnScope expression468 =null;
		ParserRuleReturnScope expression471 =null;

		Object STORED467_tree=null;
		Object char_literal469_tree=null;
		Object string_literal470_tree=null;
		Object char_literal472_tree=null;
		Object string_literal473_tree=null;
		Object char_literal474_tree=null;
		Object string_literal475_tree=null;
		Object char_literal476_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:380:30: ( STORED expression ';' | 'default' expression ';' | 'default' ';' | 'nodefault' ';' )
			int alt156=4;
			switch ( input.LA(1) ) {
			case STORED:
				{
				alt156=1;
				}
				break;
			case DEFAULT:
				{
				int LA156_2 = input.LA(2);
				if ( (LA156_2==SEMI) ) {
					int LA156_4 = input.LA(3);
					if ( (synpred217_Delphi()) ) {
						alt156=2;
					}
					else if ( (synpred218_Delphi()) ) {
						alt156=3;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 156, 4, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}
				else if ( ((LA156_2 >= ADD && LA156_2 <= ANSISTRING)||LA156_2==AS||(LA156_2 >= AT && LA156_2 <= AT2)||LA156_2==BREAK||(LA156_2 >= CONTAINS && LA156_2 <= ControlString)||LA156_2==DEFAULT||LA156_2==DIV||LA156_2==DOT||LA156_2==EQUAL||LA156_2==EXIT||LA156_2==EXPORT||LA156_2==FALSE||LA156_2==FINAL||(LA156_2 >= FUNCTION && LA156_2 <= GE)||LA156_2==GT||(LA156_2 >= IMPLEMENTS && LA156_2 <= INHERITED)||LA156_2==IS||LA156_2==LBRACK||LA156_2==LE||(LA156_2 >= LOCAL && LA156_2 <= NAME)||LA156_2==NIL||(LA156_2 >= NOT && LA156_2 <= OBJECT)||(LA156_2 >= OPERATOR && LA156_2 <= OUT)||(LA156_2 >= PLUS && LA156_2 <= POINTER2)||LA156_2==PROCEDURE||LA156_2==QuotedString||(LA156_2 >= READ && LA156_2 <= READONLY)||(LA156_2 >= REFERENCE && LA156_2 <= REGISTER)||LA156_2==REMOVE||(LA156_2 >= SHL && LA156_2 <= STATIC)||(LA156_2 >= STORED && LA156_2 <= STRING)||LA156_2==TRUE||(LA156_2 >= TkHexNum && LA156_2 <= TkIntNum)||LA156_2==TkRealNum||LA156_2==UNSAFE||LA156_2==VARIANT||LA156_2==WRITE||(LA156_2 >= XOR && LA156_2 <= 199)) ) {
					alt156=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 156, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case NODEFAULT:
				{
				alt156=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 156, 0, input);
				throw nvae;
			}
			switch (alt156) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:380:32: STORED expression ';'
					{
					root_0 = (Object)adaptor.nil();


					STORED467=(Token)match(input,STORED,FOLLOW_STORED_in_classPropertyEndSpecifier9927); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					STORED467_tree = (Object)adaptor.create(STORED467);
					adaptor.addChild(root_0, STORED467_tree);
					}

					pushFollow(FOLLOW_expression_in_classPropertyEndSpecifier9929);
					expression468=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression468.getTree());

					char_literal469=(Token)match(input,SEMI,FOLLOW_SEMI_in_classPropertyEndSpecifier9931); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal469_tree = (Object)adaptor.create(char_literal469);
					adaptor.addChild(root_0, char_literal469_tree);
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:381:32: 'default' expression ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal470=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_classPropertyEndSpecifier9968); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal470_tree = (Object)adaptor.create(string_literal470);
					adaptor.addChild(root_0, string_literal470_tree);
					}

					pushFollow(FOLLOW_expression_in_classPropertyEndSpecifier9970);
					expression471=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression471.getTree());

					char_literal472=(Token)match(input,SEMI,FOLLOW_SEMI_in_classPropertyEndSpecifier9972); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal472_tree = (Object)adaptor.create(char_literal472);
					adaptor.addChild(root_0, char_literal472_tree);
					}

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:382:32: 'default' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal473=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_classPropertyEndSpecifier10005); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal473_tree = (Object)adaptor.create(string_literal473);
					adaptor.addChild(root_0, string_literal473_tree);
					}

					char_literal474=(Token)match(input,SEMI,FOLLOW_SEMI_in_classPropertyEndSpecifier10007); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal474_tree = (Object)adaptor.create(char_literal474);
					adaptor.addChild(root_0, char_literal474_tree);
					}

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:383:32: 'nodefault' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal475=(Token)match(input,NODEFAULT,FOLLOW_NODEFAULT_in_classPropertyEndSpecifier10040); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal475_tree = (Object)adaptor.create(string_literal475);
					adaptor.addChild(root_0, string_literal475_tree);
					}

					char_literal476=(Token)match(input,SEMI,FOLLOW_SEMI_in_classPropertyEndSpecifier10042); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal476_tree = (Object)adaptor.create(char_literal476);
					adaptor.addChild(root_0, char_literal476_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 96, classPropertyEndSpecifier_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classPropertyEndSpecifier"


	public static class classPropertyReadWrite_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classPropertyReadWrite"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:386:1: classPropertyReadWrite : ( 'read' qualifiedIdent ( '[' expression ']' )? -> ^( 'read' qualifiedIdent ) | 'write' qualifiedIdent ( '[' expression ']' )? -> ^( 'write' qualifiedIdent ) );
	public final DelphiParser.classPropertyReadWrite_return classPropertyReadWrite() throws RecognitionException {
		DelphiParser.classPropertyReadWrite_return retval = new DelphiParser.classPropertyReadWrite_return();
		retval.start = input.LT(1);
		int classPropertyReadWrite_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal477=null;
		Token char_literal479=null;
		Token char_literal481=null;
		Token string_literal482=null;
		Token char_literal484=null;
		Token char_literal486=null;
		ParserRuleReturnScope qualifiedIdent478 =null;
		ParserRuleReturnScope expression480 =null;
		ParserRuleReturnScope qualifiedIdent483 =null;
		ParserRuleReturnScope expression485 =null;

		Object string_literal477_tree=null;
		Object char_literal479_tree=null;
		Object char_literal481_tree=null;
		Object string_literal482_tree=null;
		Object char_literal484_tree=null;
		Object char_literal486_tree=null;
		RewriteRuleTokenStream stream_READ=new RewriteRuleTokenStream(adaptor,"token READ");
		RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
		RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
		RewriteRuleTokenStream stream_WRITE=new RewriteRuleTokenStream(adaptor,"token WRITE");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_qualifiedIdent=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdent");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:386:30: ( 'read' qualifiedIdent ( '[' expression ']' )? -> ^( 'read' qualifiedIdent ) | 'write' qualifiedIdent ( '[' expression ']' )? -> ^( 'write' qualifiedIdent ) )
			int alt159=2;
			int LA159_0 = input.LA(1);
			if ( (LA159_0==READ) ) {
				alt159=1;
			}
			else if ( (LA159_0==WRITE) ) {
				alt159=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 159, 0, input);
				throw nvae;
			}

			switch (alt159) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:386:32: 'read' qualifiedIdent ( '[' expression ']' )?
					{
					string_literal477=(Token)match(input,READ,FOLLOW_READ_in_classPropertyReadWrite10086); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_READ.add(string_literal477);

					pushFollow(FOLLOW_qualifiedIdent_in_classPropertyReadWrite10088);
					qualifiedIdent478=qualifiedIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_qualifiedIdent.add(qualifiedIdent478.getTree());
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:386:54: ( '[' expression ']' )?
					int alt157=2;
					int LA157_0 = input.LA(1);
					if ( (LA157_0==LBRACK) ) {
						alt157=1;
					}
					switch (alt157) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:386:55: '[' expression ']'
							{
							char_literal479=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_classPropertyReadWrite10091); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LBRACK.add(char_literal479);

							pushFollow(FOLLOW_expression_in_classPropertyReadWrite10093);
							expression480=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_expression.add(expression480.getTree());
							char_literal481=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_classPropertyReadWrite10095); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_RBRACK.add(char_literal481);

							}
							break;

					}

					// AST REWRITE
					// elements: READ, qualifiedIdent
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 387:30: -> ^( 'read' qualifiedIdent )
					{
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:387:33: ^( 'read' qualifiedIdent )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_READ.nextNode(), root_1);
						adaptor.addChild(root_1, stream_qualifiedIdent.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:388:32: 'write' qualifiedIdent ( '[' expression ']' )?
					{
					string_literal482=(Token)match(input,WRITE,FOLLOW_WRITE_in_classPropertyReadWrite10169); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_WRITE.add(string_literal482);

					pushFollow(FOLLOW_qualifiedIdent_in_classPropertyReadWrite10171);
					qualifiedIdent483=qualifiedIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_qualifiedIdent.add(qualifiedIdent483.getTree());
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:388:55: ( '[' expression ']' )?
					int alt158=2;
					int LA158_0 = input.LA(1);
					if ( (LA158_0==LBRACK) ) {
						alt158=1;
					}
					switch (alt158) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:388:56: '[' expression ']'
							{
							char_literal484=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_classPropertyReadWrite10174); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LBRACK.add(char_literal484);

							pushFollow(FOLLOW_expression_in_classPropertyReadWrite10176);
							expression485=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_expression.add(expression485.getTree());
							char_literal486=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_classPropertyReadWrite10178); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_RBRACK.add(char_literal486);

							}
							break;

					}

					// AST REWRITE
					// elements: qualifiedIdent, WRITE
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 389:30: -> ^( 'write' qualifiedIdent )
					{
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:389:33: ^( 'write' qualifiedIdent )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_WRITE.nextNode(), root_1);
						adaptor.addChild(root_1, stream_qualifiedIdent.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 97, classPropertyReadWrite_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classPropertyReadWrite"


	public static class classPropertyDispInterface_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classPropertyDispInterface"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:391:1: classPropertyDispInterface : ( 'readonly' ';' | 'writeonly' ';' | dispIDDirective );
	public final DelphiParser.classPropertyDispInterface_return classPropertyDispInterface() throws RecognitionException {
		DelphiParser.classPropertyDispInterface_return retval = new DelphiParser.classPropertyDispInterface_return();
		retval.start = input.LT(1);
		int classPropertyDispInterface_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal487=null;
		Token char_literal488=null;
		Token string_literal489=null;
		Token char_literal490=null;
		ParserRuleReturnScope dispIDDirective491 =null;

		Object string_literal487_tree=null;
		Object char_literal488_tree=null;
		Object string_literal489_tree=null;
		Object char_literal490_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:391:30: ( 'readonly' ';' | 'writeonly' ';' | dispIDDirective )
			int alt160=3;
			switch ( input.LA(1) ) {
			case READONLY:
				{
				alt160=1;
				}
				break;
			case WRITEONLY:
				{
				alt160=2;
				}
				break;
			case DISPID:
				{
				alt160=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 160, 0, input);
				throw nvae;
			}
			switch (alt160) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:391:32: 'readonly' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal487=(Token)match(input,READONLY,FOLLOW_READONLY_in_classPropertyDispInterface10257); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal487_tree = (Object)adaptor.create(string_literal487);
					adaptor.addChild(root_0, string_literal487_tree);
					}

					char_literal488=(Token)match(input,SEMI,FOLLOW_SEMI_in_classPropertyDispInterface10259); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal488_tree = (Object)adaptor.create(char_literal488);
					adaptor.addChild(root_0, char_literal488_tree);
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:392:32: 'writeonly' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal489=(Token)match(input,WRITEONLY,FOLLOW_WRITEONLY_in_classPropertyDispInterface10292); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal489_tree = (Object)adaptor.create(string_literal489);
					adaptor.addChild(root_0, string_literal489_tree);
					}

					char_literal490=(Token)match(input,SEMI,FOLLOW_SEMI_in_classPropertyDispInterface10294); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal490_tree = (Object)adaptor.create(char_literal490);
					adaptor.addChild(root_0, char_literal490_tree);
					}

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:393:32: dispIDDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_dispIDDirective_in_classPropertyDispInterface10327);
					dispIDDirective491=dispIDDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dispIDDirective491.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 98, classPropertyDispInterface_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classPropertyDispInterface"


	public static class visibility_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "visibility"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:395:1: visibility : ( ( STRICT )? 'protected' | ( STRICT )? 'private' | 'public' | 'published' | 'automated' );
	public final DelphiParser.visibility_return visibility() throws RecognitionException {
		DelphiParser.visibility_return retval = new DelphiParser.visibility_return();
		retval.start = input.LT(1);
		int visibility_StartIndex = input.index();

		Object root_0 = null;

		Token STRICT492=null;
		Token string_literal493=null;
		Token STRICT494=null;
		Token string_literal495=null;
		Token string_literal496=null;
		Token string_literal497=null;
		Token string_literal498=null;

		Object STRICT492_tree=null;
		Object string_literal493_tree=null;
		Object STRICT494_tree=null;
		Object string_literal495_tree=null;
		Object string_literal496_tree=null;
		Object string_literal497_tree=null;
		Object string_literal498_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:395:30: ( ( STRICT )? 'protected' | ( STRICT )? 'private' | 'public' | 'published' | 'automated' )
			int alt163=5;
			switch ( input.LA(1) ) {
			case STRICT:
				{
				int LA163_1 = input.LA(2);
				if ( (LA163_1==PROTECTED) ) {
					alt163=1;
				}
				else if ( (LA163_1==PRIVATE) ) {
					alt163=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 163, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PROTECTED:
				{
				alt163=1;
				}
				break;
			case PRIVATE:
				{
				alt163=2;
				}
				break;
			case PUBLIC:
				{
				alt163=3;
				}
				break;
			case PUBLISHED:
				{
				alt163=4;
				}
				break;
			case AUTOMATED:
				{
				alt163=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 163, 0, input);
				throw nvae;
			}
			switch (alt163) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:395:32: ( STRICT )? 'protected'
					{
					root_0 = (Object)adaptor.nil();


					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:395:32: ( STRICT )?
					int alt161=2;
					int LA161_0 = input.LA(1);
					if ( (LA161_0==STRICT) ) {
						alt161=1;
					}
					switch (alt161) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:395:33: STRICT
							{
							STRICT492=(Token)match(input,STRICT,FOLLOW_STRICT_in_visibility10383); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							STRICT492_tree = (Object)adaptor.create(STRICT492);
							adaptor.addChild(root_0, STRICT492_tree);
							}

							}
							break;

					}

					string_literal493=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_visibility10387); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal493_tree = (Object)adaptor.create(string_literal493);
					adaptor.addChild(root_0, string_literal493_tree);
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:396:32: ( STRICT )? 'private'
					{
					root_0 = (Object)adaptor.nil();


					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:396:32: ( STRICT )?
					int alt162=2;
					int LA162_0 = input.LA(1);
					if ( (LA162_0==STRICT) ) {
						alt162=1;
					}
					switch (alt162) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:396:33: STRICT
							{
							STRICT494=(Token)match(input,STRICT,FOLLOW_STRICT_in_visibility10421); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							STRICT494_tree = (Object)adaptor.create(STRICT494);
							adaptor.addChild(root_0, STRICT494_tree);
							}

							}
							break;

					}

					string_literal495=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_visibility10425); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal495_tree = (Object)adaptor.create(string_literal495);
					adaptor.addChild(root_0, string_literal495_tree);
					}

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:397:32: 'public'
					{
					root_0 = (Object)adaptor.nil();


					string_literal496=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_visibility10458); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal496_tree = (Object)adaptor.create(string_literal496);
					adaptor.addChild(root_0, string_literal496_tree);
					}

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:398:32: 'published'
					{
					root_0 = (Object)adaptor.nil();


					string_literal497=(Token)match(input,PUBLISHED,FOLLOW_PUBLISHED_in_visibility10491); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal497_tree = (Object)adaptor.create(string_literal497);
					adaptor.addChild(root_0, string_literal497_tree);
					}

					}
					break;
				case 5 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:399:32: 'automated'
					{
					root_0 = (Object)adaptor.nil();


					string_literal498=(Token)match(input,AUTOMATED,FOLLOW_AUTOMATED_in_visibility10524); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal498_tree = (Object)adaptor.create(string_literal498);
					adaptor.addChild(root_0, string_literal498_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 99, visibility_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "visibility"


	public static class exportedProcHeading_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "exportedProcHeading"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:404:1: exportedProcHeading : ( 'procedure' ident ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( functionDirective )* | 'function' ident ( formalParameterSection )? ';' ( functionDirective )* );
	public final DelphiParser.exportedProcHeading_return exportedProcHeading() throws RecognitionException {
		DelphiParser.exportedProcHeading_return retval = new DelphiParser.exportedProcHeading_return();
		retval.start = input.LT(1);
		int exportedProcHeading_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal499=null;
		Token char_literal502=null;
		Token char_literal505=null;
		Token string_literal507=null;
		Token char_literal510=null;
		ParserRuleReturnScope ident500 =null;
		ParserRuleReturnScope formalParameterSection501 =null;
		ParserRuleReturnScope customAttribute503 =null;
		ParserRuleReturnScope typeDecl504 =null;
		ParserRuleReturnScope functionDirective506 =null;
		ParserRuleReturnScope ident508 =null;
		ParserRuleReturnScope formalParameterSection509 =null;
		ParserRuleReturnScope functionDirective511 =null;

		Object string_literal499_tree=null;
		Object char_literal502_tree=null;
		Object char_literal505_tree=null;
		Object string_literal507_tree=null;
		Object char_literal510_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:404:30: ( 'procedure' ident ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( functionDirective )* | 'function' ident ( formalParameterSection )? ';' ( functionDirective )* )
			int alt169=2;
			int LA169_0 = input.LA(1);
			if ( (LA169_0==PROCEDURE) ) {
				alt169=1;
			}
			else if ( (LA169_0==FUNCTION) ) {
				alt169=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 169, 0, input);
				throw nvae;
			}

			switch (alt169) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:404:32: 'procedure' ident ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( functionDirective )*
					{
					root_0 = (Object)adaptor.nil();


					string_literal499=(Token)match(input,PROCEDURE,FOLLOW_PROCEDURE_in_exportedProcHeading10578); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal499_tree = (Object)adaptor.create(string_literal499);
					adaptor.addChild(root_0, string_literal499_tree);
					}

					pushFollow(FOLLOW_ident_in_exportedProcHeading10580);
					ident500=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident500.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:404:50: ( formalParameterSection )?
					int alt164=2;
					int LA164_0 = input.LA(1);
					if ( (LA164_0==LPAREN) ) {
						alt164=1;
					}
					switch (alt164) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:404:51: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_exportedProcHeading10583);
							formalParameterSection501=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterSection501.getTree());

							}
							break;

					}

					char_literal502=(Token)match(input,COLON,FOLLOW_COLON_in_exportedProcHeading10587); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal502_tree = (Object)adaptor.create(char_literal502);
					adaptor.addChild(root_0, char_literal502_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:404:80: ( customAttribute )?
					int alt165=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							int LA165_1 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case PACKED:
							{
							int LA165_2 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case ARRAY:
							{
							int LA165_3 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case SET:
							{
							int LA165_4 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case FILE:
							{
							int LA165_5 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case CLASS:
							{
							int LA165_6 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case DISPINTERFACE:
						case INTERFACE:
							{
							int LA165_7 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case OBJECT:
							{
							int LA165_8 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case RECORD:
							{
							int LA165_9 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case POINTER2:
							{
							int LA165_10 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case POINTER:
							{
							int LA165_11 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case STRING:
							{
							int LA165_12 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case TYPE:
							{
							int LA165_13 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case ANSISTRING:
							{
							int LA165_14 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case FUNCTION:
							{
							int LA165_15 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case PROCEDURE:
							{
							int LA165_16 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case REFERENCE:
							{
							int LA165_17 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case VARIANT:
							{
							int LA165_18 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case TkIdentifier:
							{
							int LA165_19 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case 198:
							{
							int LA165_20 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case ADD:
						case AT:
						case BREAK:
						case CONTAINS:
						case CONTINUE:
						case DEFAULT:
						case EXIT:
						case EXPORT:
						case FINAL:
						case IMPLEMENTS:
						case INDEX:
						case LOCAL:
						case MESSAGE:
						case NAME:
						case OPERATOR:
						case OUT:
						case READ:
						case READONLY:
						case REGISTER:
						case REMOVE:
						case STATIC:
						case STORED:
						case STRICT:
						case UNSAFE:
						case WRITE:
							{
							int LA165_21 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case LPAREN:
							{
							int LA165_22 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case AT2:
							{
							int LA165_23 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case 199:
							{
							int LA165_24 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case NOT:
							{
							int LA165_25 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case PLUS:
							{
							int LA165_26 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case MINUS:
							{
							int LA165_27 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case TkRealNum:
							{
							int LA165_28 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case TkHexNum:
						case TkIntNum:
							{
							int LA165_29 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case TRUE:
							{
							int LA165_30 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case FALSE:
							{
							int LA165_31 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case NIL:
							{
							int LA165_32 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case ControlString:
							{
							int LA165_33 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case QuotedString:
							{
							int LA165_34 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case INHERITED:
							{
							int LA165_35 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case DOT:
							{
							int LA165_36 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case LT:
							{
							int LA165_37 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case AND:
						case AS:
						case DIV:
						case MOD:
						case OR:
						case SHL:
						case SHR:
						case SLASH:
						case STAR:
						case XOR:
							{
							int LA165_38 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case EQUAL:
							{
							int LA165_39 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case GE:
						case GT:
						case IN:
						case IS:
						case LE:
						case NOT_EQUAL:
							{
							int LA165_40 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case DOTDOT:
							{
							int LA165_41 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case SEMI:
							{
							int LA165_42 = input.LA(2);
							if ( (synpred231_Delphi()) ) {
								alt165=1;
							}
							}
							break;
					}
					switch (alt165) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:404:81: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_exportedProcHeading10590);
							customAttribute503=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, customAttribute503.getTree());

							}
							break;

					}

					pushFollow(FOLLOW_typeDecl_in_exportedProcHeading10594);
					typeDecl504=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl504.getTree());

					char_literal505=(Token)match(input,SEMI,FOLLOW_SEMI_in_exportedProcHeading10596); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal505_tree = (Object)adaptor.create(char_literal505);
					adaptor.addChild(root_0, char_literal505_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:404:112: ( functionDirective )*
					loop166:
					while (true) {
						int alt166=2;
						alt166 = dfa166.predict(input);
						switch (alt166) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:404:113: functionDirective
							{
							pushFollow(FOLLOW_functionDirective_in_exportedProcHeading10599);
							functionDirective506=functionDirective();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, functionDirective506.getTree());

							}
							break;

						default :
							break loop166;
						}
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:405:32: 'function' ident ( formalParameterSection )? ';' ( functionDirective )*
					{
					root_0 = (Object)adaptor.nil();


					string_literal507=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_exportedProcHeading10634); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal507_tree = (Object)adaptor.create(string_literal507);
					adaptor.addChild(root_0, string_literal507_tree);
					}

					pushFollow(FOLLOW_ident_in_exportedProcHeading10636);
					ident508=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident508.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:405:49: ( formalParameterSection )?
					int alt167=2;
					int LA167_0 = input.LA(1);
					if ( (LA167_0==LPAREN) ) {
						alt167=1;
					}
					switch (alt167) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:405:50: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_exportedProcHeading10639);
							formalParameterSection509=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterSection509.getTree());

							}
							break;

					}

					char_literal510=(Token)match(input,SEMI,FOLLOW_SEMI_in_exportedProcHeading10643); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal510_tree = (Object)adaptor.create(char_literal510);
					adaptor.addChild(root_0, char_literal510_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:405:79: ( functionDirective )*
					loop168:
					while (true) {
						int alt168=2;
						alt168 = dfa168.predict(input);
						switch (alt168) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:405:80: functionDirective
							{
							pushFollow(FOLLOW_functionDirective_in_exportedProcHeading10646);
							functionDirective511=functionDirective();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, functionDirective511.getTree());

							}
							break;

						default :
							break loop168;
						}
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 100, exportedProcHeading_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "exportedProcHeading"


	public static class methodDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodDecl"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:407:1: methodDecl : methodDeclHeading ';' ( methodDirective )* ( methodBody )? -> methodDeclHeading ( methodBody )? ;
	public final DelphiParser.methodDecl_return methodDecl() throws RecognitionException {
		DelphiParser.methodDecl_return retval = new DelphiParser.methodDecl_return();
		retval.start = input.LT(1);
		int methodDecl_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal513=null;
		ParserRuleReturnScope methodDeclHeading512 =null;
		ParserRuleReturnScope methodDirective514 =null;
		ParserRuleReturnScope methodBody515 =null;

		Object char_literal513_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_methodBody=new RewriteRuleSubtreeStream(adaptor,"rule methodBody");
		RewriteRuleSubtreeStream stream_methodDirective=new RewriteRuleSubtreeStream(adaptor,"rule methodDirective");
		RewriteRuleSubtreeStream stream_methodDeclHeading=new RewriteRuleSubtreeStream(adaptor,"rule methodDeclHeading");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:407:30: ( methodDeclHeading ';' ( methodDirective )* ( methodBody )? -> methodDeclHeading ( methodBody )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:407:32: methodDeclHeading ';' ( methodDirective )* ( methodBody )?
			{
			pushFollow(FOLLOW_methodDeclHeading_in_methodDecl10703);
			methodDeclHeading512=methodDeclHeading();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_methodDeclHeading.add(methodDeclHeading512.getTree());
			char_literal513=(Token)match(input,SEMI,FOLLOW_SEMI_in_methodDecl10705); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal513);

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:407:54: ( methodDirective )*
			loop170:
			while (true) {
				int alt170=2;
				alt170 = dfa170.predict(input);
				switch (alt170) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:407:55: methodDirective
					{
					pushFollow(FOLLOW_methodDirective_in_methodDecl10708);
					methodDirective514=methodDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodDirective.add(methodDirective514.getTree());
					}
					break;

				default :
					break loop170;
				}
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:407:73: ( methodBody )?
			int alt171=2;
			switch ( input.LA(1) ) {
				case LABEL:
					{
					int LA171_1 = input.LA(2);
					if ( (synpred237_Delphi()) ) {
						alt171=1;
					}
					}
					break;
				case CONST:
				case RESOURCESTRING:
					{
					int LA171_2 = input.LA(2);
					if ( (synpred237_Delphi()) ) {
						alt171=1;
					}
					}
					break;
				case TYPE:
					{
					int LA171_3 = input.LA(2);
					if ( (synpred237_Delphi()) ) {
						alt171=1;
					}
					}
					break;
				case THREADVAR:
				case VAR:
					{
					int LA171_4 = input.LA(2);
					if ( (synpred237_Delphi()) ) {
						alt171=1;
					}
					}
					break;
				case PROCEDURE:
					{
					int LA171_5 = input.LA(2);
					if ( (synpred237_Delphi()) ) {
						alt171=1;
					}
					}
					break;
				case FUNCTION:
					{
					int LA171_6 = input.LA(2);
					if ( (synpred237_Delphi()) ) {
						alt171=1;
					}
					}
					break;
				case LBRACK:
					{
					int LA171_7 = input.LA(2);
					if ( (synpred237_Delphi()) ) {
						alt171=1;
					}
					}
					break;
				case CLASS:
					{
					int LA171_8 = input.LA(2);
					if ( (synpred237_Delphi()) ) {
						alt171=1;
					}
					}
					break;
				case CONSTRUCTOR:
				case DESTRUCTOR:
					{
					int LA171_9 = input.LA(2);
					if ( (synpred237_Delphi()) ) {
						alt171=1;
					}
					}
					break;
				case EXPORTS:
					{
					int LA171_10 = input.LA(2);
					if ( (synpred237_Delphi()) ) {
						alt171=1;
					}
					}
					break;
				case BEGIN:
					{
					int LA171_11 = input.LA(2);
					if ( (synpred237_Delphi()) ) {
						alt171=1;
					}
					}
					break;
				case ASM:
					{
					int LA171_12 = input.LA(2);
					if ( (synpred237_Delphi()) ) {
						alt171=1;
					}
					}
					break;
				case SEMI:
					{
					int LA171_13 = input.LA(2);
					if ( (synpred237_Delphi()) ) {
						alt171=1;
					}
					}
					break;
			}
			switch (alt171) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:407:74: methodBody
					{
					pushFollow(FOLLOW_methodBody_in_methodDecl10713);
					methodBody515=methodBody();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodBody.add(methodBody515.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: methodBody, methodDeclHeading
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 407:87: -> methodDeclHeading ( methodBody )?
			{
				adaptor.addChild(root_0, stream_methodDeclHeading.nextTree());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:407:108: ( methodBody )?
				if ( stream_methodBody.hasNext() ) {
					adaptor.addChild(root_0, stream_methodBody.nextTree());
				}
				stream_methodBody.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 101, methodDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodDecl"


	public static class methodDeclHeading_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodDeclHeading"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:1: methodDeclHeading : ( ( customAttribute )? ( 'class' )? methodKey methodName ( formalParameterSection )? -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ) | ( customAttribute )? ( 'class' )? 'function' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )? -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) ) | ( customAttribute )? 'class' 'operator' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )? -> ( customAttribute )? 'class' ^( 'operator' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) ) );
	public final DelphiParser.methodDeclHeading_return methodDeclHeading() throws RecognitionException {
		DelphiParser.methodDeclHeading_return retval = new DelphiParser.methodDeclHeading_return();
		retval.start = input.LT(1);
		int methodDeclHeading_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal517=null;
		Token string_literal522=null;
		Token string_literal523=null;
		Token char_literal526=null;
		Token string_literal530=null;
		Token string_literal531=null;
		Token char_literal534=null;
		ParserRuleReturnScope customAttribute516 =null;
		ParserRuleReturnScope methodKey518 =null;
		ParserRuleReturnScope methodName519 =null;
		ParserRuleReturnScope formalParameterSection520 =null;
		ParserRuleReturnScope customAttribute521 =null;
		ParserRuleReturnScope methodName524 =null;
		ParserRuleReturnScope formalParameterSection525 =null;
		ParserRuleReturnScope customAttribute527 =null;
		ParserRuleReturnScope typeDecl528 =null;
		ParserRuleReturnScope customAttribute529 =null;
		ParserRuleReturnScope methodName532 =null;
		ParserRuleReturnScope formalParameterSection533 =null;
		ParserRuleReturnScope customAttribute535 =null;
		ParserRuleReturnScope typeDecl536 =null;

		Object string_literal517_tree=null;
		Object string_literal522_tree=null;
		Object string_literal523_tree=null;
		Object char_literal526_tree=null;
		Object string_literal530_tree=null;
		Object string_literal531_tree=null;
		Object char_literal534_tree=null;
		RewriteRuleTokenStream stream_OPERATOR=new RewriteRuleTokenStream(adaptor,"token OPERATOR");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
		RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_methodKey=new RewriteRuleSubtreeStream(adaptor,"rule methodKey");
		RewriteRuleSubtreeStream stream_formalParameterSection=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterSection");
		RewriteRuleSubtreeStream stream_methodName=new RewriteRuleSubtreeStream(adaptor,"rule methodName");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:30: ( ( customAttribute )? ( 'class' )? methodKey methodName ( formalParameterSection )? -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ) | ( customAttribute )? ( 'class' )? 'function' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )? -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) ) | ( customAttribute )? 'class' 'operator' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )? -> ( customAttribute )? 'class' ^( 'operator' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) ) )
			int alt184=3;
			switch ( input.LA(1) ) {
			case LBRACK:
				{
				int LA184_1 = input.LA(2);
				if ( (synpred241_Delphi()) ) {
					alt184=1;
				}
				else if ( (synpred247_Delphi()) ) {
					alt184=2;
				}
				else if ( (true) ) {
					alt184=3;
				}

				}
				break;
			case CLASS:
				{
				int LA184_2 = input.LA(2);
				if ( (synpred241_Delphi()) ) {
					alt184=1;
				}
				else if ( (synpred247_Delphi()) ) {
					alt184=2;
				}
				else if ( (true) ) {
					alt184=3;
				}

				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case PROCEDURE:
				{
				alt184=1;
				}
				break;
			case FUNCTION:
				{
				alt184=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 184, 0, input);
				throw nvae;
			}
			switch (alt184) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:32: ( customAttribute )? ( 'class' )? methodKey methodName ( formalParameterSection )?
					{
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:32: ( customAttribute )?
					int alt172=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							alt172=1;
							}
							break;
						case CLASS:
							{
							int LA172_2 = input.LA(2);
							if ( (synpred238_Delphi()) ) {
								alt172=1;
							}
							}
							break;
						case CONSTRUCTOR:
						case DESTRUCTOR:
						case PROCEDURE:
							{
							int LA172_3 = input.LA(2);
							if ( (synpred238_Delphi()) ) {
								alt172=1;
							}
							}
							break;
					}
					switch (alt172) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_methodDeclHeading10773);
							customAttribute516=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute516.getTree());
							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:51: ( 'class' )?
					int alt173=2;
					int LA173_0 = input.LA(1);
					if ( (LA173_0==CLASS) ) {
						alt173=1;
					}
					switch (alt173) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:52: 'class'
							{
							string_literal517=(Token)match(input,CLASS,FOLLOW_CLASS_in_methodDeclHeading10778); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_CLASS.add(string_literal517);

							}
							break;

					}

					pushFollow(FOLLOW_methodKey_in_methodDeclHeading10783);
					methodKey518=methodKey();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodKey.add(methodKey518.getTree());
					pushFollow(FOLLOW_methodName_in_methodDeclHeading10785);
					methodName519=methodName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodName.add(methodName519.getTree());
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:84: ( formalParameterSection )?
					int alt174=2;
					int LA174_0 = input.LA(1);
					if ( (LA174_0==LPAREN) ) {
						alt174=1;
					}
					switch (alt174) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:85: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_methodDeclHeading10788);
							formalParameterSection520=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection520.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: formalParameterSection, methodName, methodKey, customAttribute, CLASS
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 410:30: -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) )
					{
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:33: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_0, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:52: ( 'class' )?
						if ( stream_CLASS.hasNext() ) {
							adaptor.addChild(root_0, stream_CLASS.nextNode());
						}
						stream_CLASS.reset();

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:64: ^( methodKey ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_methodKey.nextNode(), root_1);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:76: ^( TkFunctionName methodName )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_methodName.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:105: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:122: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:32: ( customAttribute )? ( 'class' )? 'function' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )?
					{
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:32: ( customAttribute )?
					int alt175=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							alt175=1;
							}
							break;
						case CLASS:
							{
							int LA175_2 = input.LA(2);
							if ( (synpred242_Delphi()) ) {
								alt175=1;
							}
							}
							break;
						case FUNCTION:
							{
							int LA175_3 = input.LA(2);
							if ( (synpred242_Delphi()) ) {
								alt175=1;
							}
							}
							break;
					}
					switch (alt175) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_methodDeclHeading10886);
							customAttribute521=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute521.getTree());
							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:51: ( 'class' )?
					int alt176=2;
					int LA176_0 = input.LA(1);
					if ( (LA176_0==CLASS) ) {
						alt176=1;
					}
					switch (alt176) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:52: 'class'
							{
							string_literal522=(Token)match(input,CLASS,FOLLOW_CLASS_in_methodDeclHeading10891); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_CLASS.add(string_literal522);

							}
							break;

					}

					string_literal523=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_methodDeclHeading10895); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_FUNCTION.add(string_literal523);

					pushFollow(FOLLOW_methodName_in_methodDeclHeading10897);
					methodName524=methodName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodName.add(methodName524.getTree());
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:84: ( formalParameterSection )?
					int alt177=2;
					int LA177_0 = input.LA(1);
					if ( (LA177_0==LPAREN) ) {
						alt177=1;
					}
					switch (alt177) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:85: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_methodDeclHeading10900);
							formalParameterSection525=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection525.getTree());
							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:110: ( ':' ( customAttribute )? typeDecl )?
					int alt179=2;
					int LA179_0 = input.LA(1);
					if ( (LA179_0==COLON) ) {
						alt179=1;
					}
					switch (alt179) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:111: ':' ( customAttribute )? typeDecl
							{
							char_literal526=(Token)match(input,COLON,FOLLOW_COLON_in_methodDeclHeading10905); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COLON.add(char_literal526);

							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:115: ( customAttribute )?
							int alt178=2;
							switch ( input.LA(1) ) {
								case LBRACK:
									{
									int LA178_1 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case PACKED:
									{
									int LA178_2 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case ARRAY:
									{
									int LA178_3 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case SET:
									{
									int LA178_4 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case FILE:
									{
									int LA178_5 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case CLASS:
									{
									int LA178_6 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case DISPINTERFACE:
								case INTERFACE:
									{
									int LA178_7 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case OBJECT:
									{
									int LA178_8 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case RECORD:
									{
									int LA178_9 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case POINTER2:
									{
									int LA178_10 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case POINTER:
									{
									int LA178_11 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case STRING:
									{
									int LA178_12 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case TYPE:
									{
									int LA178_13 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case ANSISTRING:
									{
									int LA178_14 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case FUNCTION:
									{
									int LA178_15 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case PROCEDURE:
									{
									int LA178_16 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case REFERENCE:
									{
									int LA178_17 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case VARIANT:
									{
									int LA178_18 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case TkIdentifier:
									{
									int LA178_19 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case 198:
									{
									int LA178_20 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case ADD:
								case AT:
								case BREAK:
								case CONTAINS:
								case CONTINUE:
								case DEFAULT:
								case EXIT:
								case EXPORT:
								case FINAL:
								case IMPLEMENTS:
								case INDEX:
								case LOCAL:
								case MESSAGE:
								case NAME:
								case OPERATOR:
								case OUT:
								case READ:
								case READONLY:
								case REGISTER:
								case REMOVE:
								case STATIC:
								case STORED:
								case STRICT:
								case UNSAFE:
								case WRITE:
									{
									int LA178_21 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case LPAREN:
									{
									int LA178_22 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case AT2:
									{
									int LA178_23 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case 199:
									{
									int LA178_24 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case NOT:
									{
									int LA178_25 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case PLUS:
									{
									int LA178_26 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case MINUS:
									{
									int LA178_27 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case TkRealNum:
									{
									int LA178_28 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case TkHexNum:
								case TkIntNum:
									{
									int LA178_29 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case TRUE:
									{
									int LA178_30 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case FALSE:
									{
									int LA178_31 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case NIL:
									{
									int LA178_32 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case ControlString:
									{
									int LA178_33 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case QuotedString:
									{
									int LA178_34 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case INHERITED:
									{
									int LA178_35 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case DOT:
									{
									int LA178_36 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case LT:
									{
									int LA178_37 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case AND:
								case AS:
								case DIV:
								case MOD:
								case OR:
								case SHL:
								case SHR:
								case SLASH:
								case STAR:
								case XOR:
									{
									int LA178_38 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case EQUAL:
									{
									int LA178_39 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case GE:
								case GT:
								case IN:
								case IS:
								case LE:
								case NOT_EQUAL:
									{
									int LA178_40 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case DOTDOT:
									{
									int LA178_41 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case SEMI:
									{
									int LA178_42 = input.LA(2);
									if ( (synpred245_Delphi()) ) {
										alt178=1;
									}
									}
									break;
							}
							switch (alt178) {
								case 1 :
									// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:116: customAttribute
									{
									pushFollow(FOLLOW_customAttribute_in_methodDeclHeading10908);
									customAttribute527=customAttribute();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute527.getTree());
									}
									break;

							}

							pushFollow(FOLLOW_typeDecl_in_methodDeclHeading10912);
							typeDecl528=typeDecl();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl528.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: FUNCTION, typeDecl, customAttribute, customAttribute, CLASS, formalParameterSection, methodName
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 412:30: -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) )
					{
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:33: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_0, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:52: ( 'class' )?
						if ( stream_CLASS.hasNext() ) {
							adaptor.addChild(root_0, stream_CLASS.nextNode());
						}
						stream_CLASS.reset();

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:63: ^( 'function' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_FUNCTION.nextNode(), root_1);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:76: ^( TkFunctionName methodName )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_methodName.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:105: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:122: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:149: ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionReturn, "TkFunctionReturn"), root_2);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:168: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_2, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:187: ( typeDecl )?
						if ( stream_typeDecl.hasNext() ) {
							adaptor.addChild(root_2, stream_typeDecl.nextTree());
						}
						stream_typeDecl.reset();

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:32: ( customAttribute )? 'class' 'operator' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )?
					{
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:32: ( customAttribute )?
					int alt180=2;
					int LA180_0 = input.LA(1);
					if ( (LA180_0==LBRACK) ) {
						alt180=1;
					}
					else if ( (LA180_0==CLASS) ) {
						int LA180_2 = input.LA(2);
						if ( (synpred248_Delphi()) ) {
							alt180=1;
						}
					}
					switch (alt180) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_methodDeclHeading11021);
							customAttribute529=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute529.getTree());
							}
							break;

					}

					string_literal530=(Token)match(input,CLASS,FOLLOW_CLASS_in_methodDeclHeading11025); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_CLASS.add(string_literal530);

					string_literal531=(Token)match(input,OPERATOR,FOLLOW_OPERATOR_in_methodDeclHeading11027); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_OPERATOR.add(string_literal531);

					pushFollow(FOLLOW_methodName_in_methodDeclHeading11029);
					methodName532=methodName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodName.add(methodName532.getTree());
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:81: ( formalParameterSection )?
					int alt181=2;
					int LA181_0 = input.LA(1);
					if ( (LA181_0==LPAREN) ) {
						alt181=1;
					}
					switch (alt181) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:82: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_methodDeclHeading11032);
							formalParameterSection533=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection533.getTree());
							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:107: ( ':' ( customAttribute )? typeDecl )?
					int alt183=2;
					int LA183_0 = input.LA(1);
					if ( (LA183_0==COLON) ) {
						alt183=1;
					}
					switch (alt183) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:108: ':' ( customAttribute )? typeDecl
							{
							char_literal534=(Token)match(input,COLON,FOLLOW_COLON_in_methodDeclHeading11037); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COLON.add(char_literal534);

							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:112: ( customAttribute )?
							int alt182=2;
							switch ( input.LA(1) ) {
								case LBRACK:
									{
									int LA182_1 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case PACKED:
									{
									int LA182_2 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case ARRAY:
									{
									int LA182_3 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case SET:
									{
									int LA182_4 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case FILE:
									{
									int LA182_5 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case CLASS:
									{
									int LA182_6 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case DISPINTERFACE:
								case INTERFACE:
									{
									int LA182_7 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case OBJECT:
									{
									int LA182_8 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case RECORD:
									{
									int LA182_9 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case POINTER2:
									{
									int LA182_10 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case POINTER:
									{
									int LA182_11 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case STRING:
									{
									int LA182_12 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case TYPE:
									{
									int LA182_13 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case ANSISTRING:
									{
									int LA182_14 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case FUNCTION:
									{
									int LA182_15 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case PROCEDURE:
									{
									int LA182_16 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case REFERENCE:
									{
									int LA182_17 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case VARIANT:
									{
									int LA182_18 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case TkIdentifier:
									{
									int LA182_19 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case 198:
									{
									int LA182_20 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case ADD:
								case AT:
								case BREAK:
								case CONTAINS:
								case CONTINUE:
								case DEFAULT:
								case EXIT:
								case EXPORT:
								case FINAL:
								case IMPLEMENTS:
								case INDEX:
								case LOCAL:
								case MESSAGE:
								case NAME:
								case OPERATOR:
								case OUT:
								case READ:
								case READONLY:
								case REGISTER:
								case REMOVE:
								case STATIC:
								case STORED:
								case STRICT:
								case UNSAFE:
								case WRITE:
									{
									int LA182_21 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case LPAREN:
									{
									int LA182_22 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case AT2:
									{
									int LA182_23 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case 199:
									{
									int LA182_24 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case NOT:
									{
									int LA182_25 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case PLUS:
									{
									int LA182_26 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case MINUS:
									{
									int LA182_27 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case TkRealNum:
									{
									int LA182_28 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case TkHexNum:
								case TkIntNum:
									{
									int LA182_29 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case TRUE:
									{
									int LA182_30 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case FALSE:
									{
									int LA182_31 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case NIL:
									{
									int LA182_32 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case ControlString:
									{
									int LA182_33 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case QuotedString:
									{
									int LA182_34 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case INHERITED:
									{
									int LA182_35 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case DOT:
									{
									int LA182_36 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case LT:
									{
									int LA182_37 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case AND:
								case AS:
								case DIV:
								case MOD:
								case OR:
								case SHL:
								case SHR:
								case SLASH:
								case STAR:
								case XOR:
									{
									int LA182_38 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case EQUAL:
									{
									int LA182_39 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case GE:
								case GT:
								case IN:
								case IS:
								case LE:
								case NOT_EQUAL:
									{
									int LA182_40 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case DOTDOT:
									{
									int LA182_41 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case SEMI:
									{
									int LA182_42 = input.LA(2);
									if ( (synpred250_Delphi()) ) {
										alt182=1;
									}
									}
									break;
							}
							switch (alt182) {
								case 1 :
									// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:113: customAttribute
									{
									pushFollow(FOLLOW_customAttribute_in_methodDeclHeading11040);
									customAttribute535=customAttribute();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute535.getTree());
									}
									break;

							}

							pushFollow(FOLLOW_typeDecl_in_methodDeclHeading11044);
							typeDecl536=typeDecl();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl536.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: customAttribute, CLASS, formalParameterSection, methodName, customAttribute, OPERATOR, typeDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 414:30: -> ( customAttribute )? 'class' ^( 'operator' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) )
					{
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:414:33: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_0, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						adaptor.addChild(root_0, stream_CLASS.nextNode());
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:414:60: ^( 'operator' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_OPERATOR.nextNode(), root_1);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:414:73: ^( TkFunctionName methodName )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_methodName.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:414:102: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:414:119: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:414:146: ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionReturn, "TkFunctionReturn"), root_2);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:414:165: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_2, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:414:184: ( typeDecl )?
						if ( stream_typeDecl.hasNext() ) {
							adaptor.addChild(root_2, stream_typeDecl.nextTree());
						}
						stream_typeDecl.reset();

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 102, methodDeclHeading_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodDeclHeading"


	public static class methodKey_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodKey"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:416:1: methodKey : ( 'procedure' | 'constructor' | 'destructor' );
	public final DelphiParser.methodKey_return methodKey() throws RecognitionException {
		DelphiParser.methodKey_return retval = new DelphiParser.methodKey_return();
		retval.start = input.LT(1);
		int methodKey_StartIndex = input.index();

		Object root_0 = null;

		Token set537=null;

		Object set537_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:416:30: ( 'procedure' | 'constructor' | 'destructor' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set537=input.LT(1);
			if ( input.LA(1)==CONSTRUCTOR||input.LA(1)==DESTRUCTOR||input.LA(1)==PROCEDURE ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set537));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 103, methodKey_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodKey"


	public static class methodName_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodName"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:420:1: methodName : ident ( genericDefinition )? ( '.' ident ( genericDefinition )? )* ;
	public final DelphiParser.methodName_return methodName() throws RecognitionException {
		DelphiParser.methodName_return retval = new DelphiParser.methodName_return();
		retval.start = input.LT(1);
		int methodName_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal540=null;
		ParserRuleReturnScope ident538 =null;
		ParserRuleReturnScope genericDefinition539 =null;
		ParserRuleReturnScope ident541 =null;
		ParserRuleReturnScope genericDefinition542 =null;

		Object char_literal540_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:420:30: ( ident ( genericDefinition )? ( '.' ident ( genericDefinition )? )* )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:420:32: ident ( genericDefinition )? ( '.' ident ( genericDefinition )? )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_ident_in_methodName11293);
			ident538=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident538.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:420:38: ( genericDefinition )?
			int alt185=2;
			int LA185_0 = input.LA(1);
			if ( (LA185_0==LT) ) {
				alt185=1;
			}
			switch (alt185) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:420:39: genericDefinition
					{
					pushFollow(FOLLOW_genericDefinition_in_methodName11296);
					genericDefinition539=genericDefinition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, genericDefinition539.getTree());

					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:420:59: ( '.' ident ( genericDefinition )? )*
			loop187:
			while (true) {
				int alt187=2;
				int LA187_0 = input.LA(1);
				if ( (LA187_0==DOT) ) {
					alt187=1;
				}

				switch (alt187) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:420:60: '.' ident ( genericDefinition )?
					{
					char_literal540=(Token)match(input,DOT,FOLLOW_DOT_in_methodName11301); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal540_tree = (Object)adaptor.create(char_literal540);
					adaptor.addChild(root_0, char_literal540_tree);
					}

					pushFollow(FOLLOW_ident_in_methodName11303);
					ident541=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident541.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:420:70: ( genericDefinition )?
					int alt186=2;
					int LA186_0 = input.LA(1);
					if ( (LA186_0==LT) ) {
						alt186=1;
					}
					switch (alt186) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:420:71: genericDefinition
							{
							pushFollow(FOLLOW_genericDefinition_in_methodName11306);
							genericDefinition542=genericDefinition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, genericDefinition542.getTree());

							}
							break;

					}

					}
					break;

				default :
					break loop187;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 104, methodName_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodName"


	public static class procDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "procDecl"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:1: procDecl : procDeclHeading ';' ( functionDirective )* ( procBody )? -> procDeclHeading ( procBody )? ;
	public final DelphiParser.procDecl_return procDecl() throws RecognitionException {
		DelphiParser.procDecl_return retval = new DelphiParser.procDecl_return();
		retval.start = input.LT(1);
		int procDecl_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal544=null;
		ParserRuleReturnScope procDeclHeading543 =null;
		ParserRuleReturnScope functionDirective545 =null;
		ParserRuleReturnScope procBody546 =null;

		Object char_literal544_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_procDeclHeading=new RewriteRuleSubtreeStream(adaptor,"rule procDeclHeading");
		RewriteRuleSubtreeStream stream_functionDirective=new RewriteRuleSubtreeStream(adaptor,"rule functionDirective");
		RewriteRuleSubtreeStream stream_procBody=new RewriteRuleSubtreeStream(adaptor,"rule procBody");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:30: ( procDeclHeading ';' ( functionDirective )* ( procBody )? -> procDeclHeading ( procBody )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:32: procDeclHeading ';' ( functionDirective )* ( procBody )?
			{
			pushFollow(FOLLOW_procDeclHeading_in_procDecl11367);
			procDeclHeading543=procDeclHeading();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_procDeclHeading.add(procDeclHeading543.getTree());
			char_literal544=(Token)match(input,SEMI,FOLLOW_SEMI_in_procDecl11369); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal544);

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:52: ( functionDirective )*
			loop188:
			while (true) {
				int alt188=2;
				alt188 = dfa188.predict(input);
				switch (alt188) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:53: functionDirective
					{
					pushFollow(FOLLOW_functionDirective_in_procDecl11372);
					functionDirective545=functionDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_functionDirective.add(functionDirective545.getTree());
					}
					break;

				default :
					break loop188;
				}
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:73: ( procBody )?
			int alt189=2;
			switch ( input.LA(1) ) {
				case FORWARD:
					{
					alt189=1;
					}
					break;
				case EXTERNAL:
					{
					int LA189_2 = input.LA(2);
					if ( (synpred258_Delphi()) ) {
						alt189=1;
					}
					}
					break;
				case LABEL:
					{
					int LA189_3 = input.LA(2);
					if ( (synpred258_Delphi()) ) {
						alt189=1;
					}
					}
					break;
				case CONST:
				case RESOURCESTRING:
					{
					int LA189_4 = input.LA(2);
					if ( (synpred258_Delphi()) ) {
						alt189=1;
					}
					}
					break;
				case TYPE:
					{
					int LA189_5 = input.LA(2);
					if ( (synpred258_Delphi()) ) {
						alt189=1;
					}
					}
					break;
				case THREADVAR:
				case VAR:
					{
					int LA189_6 = input.LA(2);
					if ( (synpred258_Delphi()) ) {
						alt189=1;
					}
					}
					break;
				case PROCEDURE:
					{
					int LA189_7 = input.LA(2);
					if ( (synpred258_Delphi()) ) {
						alt189=1;
					}
					}
					break;
				case FUNCTION:
					{
					int LA189_8 = input.LA(2);
					if ( (synpred258_Delphi()) ) {
						alt189=1;
					}
					}
					break;
				case LBRACK:
					{
					int LA189_9 = input.LA(2);
					if ( (synpred258_Delphi()) ) {
						alt189=1;
					}
					}
					break;
				case CLASS:
					{
					int LA189_10 = input.LA(2);
					if ( (synpred258_Delphi()) ) {
						alt189=1;
					}
					}
					break;
				case CONSTRUCTOR:
				case DESTRUCTOR:
					{
					int LA189_11 = input.LA(2);
					if ( (synpred258_Delphi()) ) {
						alt189=1;
					}
					}
					break;
				case EXPORTS:
					{
					int LA189_12 = input.LA(2);
					if ( (synpred258_Delphi()) ) {
						alt189=1;
					}
					}
					break;
				case BEGIN:
					{
					int LA189_13 = input.LA(2);
					if ( (synpred258_Delphi()) ) {
						alt189=1;
					}
					}
					break;
				case ASM:
					{
					int LA189_14 = input.LA(2);
					if ( (synpred258_Delphi()) ) {
						alt189=1;
					}
					}
					break;
				case SEMI:
					{
					int LA189_15 = input.LA(2);
					if ( (synpred258_Delphi()) ) {
						alt189=1;
					}
					}
					break;
			}
			switch (alt189) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:74: procBody
					{
					pushFollow(FOLLOW_procBody_in_procDecl11377);
					procBody546=procBody();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_procBody.add(procBody546.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: procBody, procDeclHeading
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 422:85: -> procDeclHeading ( procBody )?
			{
				adaptor.addChild(root_0, stream_procDeclHeading.nextTree());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:104: ( procBody )?
				if ( stream_procBody.hasNext() ) {
					adaptor.addChild(root_0, stream_procBody.nextTree());
				}
				stream_procBody.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 105, procDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "procDecl"


	public static class procDeclHeading_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "procDeclHeading"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:1: procDeclHeading : ( ( customAttribute )? 'procedure' ident ( formalParameterSection )? -> ^( 'procedure' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ) | ( customAttribute )? 'function' ident ( formalParameterSection )? ':' typeDecl -> ^( 'function' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn typeDecl ) ) );
	public final DelphiParser.procDeclHeading_return procDeclHeading() throws RecognitionException {
		DelphiParser.procDeclHeading_return retval = new DelphiParser.procDeclHeading_return();
		retval.start = input.LT(1);
		int procDeclHeading_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal548=null;
		Token string_literal552=null;
		Token char_literal555=null;
		ParserRuleReturnScope customAttribute547 =null;
		ParserRuleReturnScope ident549 =null;
		ParserRuleReturnScope formalParameterSection550 =null;
		ParserRuleReturnScope customAttribute551 =null;
		ParserRuleReturnScope ident553 =null;
		ParserRuleReturnScope formalParameterSection554 =null;
		ParserRuleReturnScope typeDecl556 =null;

		Object string_literal548_tree=null;
		Object string_literal552_tree=null;
		Object char_literal555_tree=null;
		RewriteRuleTokenStream stream_PROCEDURE=new RewriteRuleTokenStream(adaptor,"token PROCEDURE");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_formalParameterSection=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterSection");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:30: ( ( customAttribute )? 'procedure' ident ( formalParameterSection )? -> ^( 'procedure' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ) | ( customAttribute )? 'function' ident ( formalParameterSection )? ':' typeDecl -> ^( 'function' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn typeDecl ) ) )
			int alt194=2;
			switch ( input.LA(1) ) {
			case LBRACK:
				{
				int LA194_1 = input.LA(2);
				if ( (synpred261_Delphi()) ) {
					alt194=1;
				}
				else if ( (true) ) {
					alt194=2;
				}

				}
				break;
			case PROCEDURE:
				{
				alt194=1;
				}
				break;
			case FUNCTION:
				{
				alt194=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 194, 0, input);
				throw nvae;
			}
			switch (alt194) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:32: ( customAttribute )? 'procedure' ident ( formalParameterSection )?
					{
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:32: ( customAttribute )?
					int alt190=2;
					int LA190_0 = input.LA(1);
					if ( (LA190_0==LBRACK) ) {
						alt190=1;
					}
					else if ( (LA190_0==PROCEDURE) ) {
						int LA190_2 = input.LA(2);
						if ( (synpred259_Delphi()) ) {
							alt190=1;
						}
					}
					switch (alt190) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_procDeclHeading11443);
							customAttribute547=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute547.getTree());
							}
							break;

					}

					string_literal548=(Token)match(input,PROCEDURE,FOLLOW_PROCEDURE_in_procDeclHeading11447); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_PROCEDURE.add(string_literal548);

					pushFollow(FOLLOW_ident_in_procDeclHeading11449);
					ident549=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident549.getTree());
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:69: ( formalParameterSection )?
					int alt191=2;
					int LA191_0 = input.LA(1);
					if ( (LA191_0==LPAREN) ) {
						alt191=1;
					}
					switch (alt191) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:70: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_procDeclHeading11452);
							formalParameterSection550=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection550.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: ident, formalParameterSection, PROCEDURE
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 425:30: -> ^( 'procedure' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) )
					{
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:33: ^( 'procedure' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_PROCEDURE.nextNode(), root_1);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:47: ^( TkFunctionName ident )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_ident.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:71: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:88: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:32: ( customAttribute )? 'function' ident ( formalParameterSection )? ':' typeDecl
					{
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:32: ( customAttribute )?
					int alt192=2;
					int LA192_0 = input.LA(1);
					if ( (LA192_0==LBRACK) ) {
						alt192=1;
					}
					else if ( (LA192_0==FUNCTION) ) {
						int LA192_2 = input.LA(2);
						if ( (synpred262_Delphi()) ) {
							alt192=1;
						}
					}
					switch (alt192) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_procDeclHeading11552);
							customAttribute551=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute551.getTree());
							}
							break;

					}

					string_literal552=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_procDeclHeading11556); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_FUNCTION.add(string_literal552);

					pushFollow(FOLLOW_ident_in_procDeclHeading11558);
					ident553=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident553.getTree());
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:68: ( formalParameterSection )?
					int alt193=2;
					int LA193_0 = input.LA(1);
					if ( (LA193_0==LPAREN) ) {
						alt193=1;
					}
					switch (alt193) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:69: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_procDeclHeading11561);
							formalParameterSection554=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection554.getTree());
							}
							break;

					}

					char_literal555=(Token)match(input,COLON,FOLLOW_COLON_in_procDeclHeading11565); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(char_literal555);

					pushFollow(FOLLOW_typeDecl_in_procDeclHeading11567);
					typeDecl556=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl556.getTree());
					// AST REWRITE
					// elements: typeDecl, FUNCTION, formalParameterSection, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 427:30: -> ^( 'function' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn typeDecl ) )
					{
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:427:33: ^( 'function' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn typeDecl ) )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_FUNCTION.nextNode(), root_1);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:427:46: ^( TkFunctionName ident )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_ident.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:427:70: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:427:87: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:427:114: ^( TkFunctionReturn typeDecl )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionReturn, "TkFunctionReturn"), root_2);
						adaptor.addChild(root_2, stream_typeDecl.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 106, procDeclHeading_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "procDeclHeading"


	public static class formalParameterSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "formalParameterSection"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:429:1: formalParameterSection : '(' ( formalParameterList )? ')' -> ( formalParameterList )? ;
	public final DelphiParser.formalParameterSection_return formalParameterSection() throws RecognitionException {
		DelphiParser.formalParameterSection_return retval = new DelphiParser.formalParameterSection_return();
		retval.start = input.LT(1);
		int formalParameterSection_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal557=null;
		Token char_literal559=null;
		ParserRuleReturnScope formalParameterList558 =null;

		Object char_literal557_tree=null;
		Object char_literal559_tree=null;
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:429:30: ( '(' ( formalParameterList )? ')' -> ( formalParameterList )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:429:32: '(' ( formalParameterList )? ')'
			{
			char_literal557=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_formalParameterSection11667); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(char_literal557);

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:429:36: ( formalParameterList )?
			int alt195=2;
			int LA195_0 = input.LA(1);
			if ( (LA195_0==ADD||LA195_0==ANSISTRING||LA195_0==AT||LA195_0==BREAK||LA195_0==CONST||(LA195_0 >= CONTAINS && LA195_0 <= CONTINUE)||LA195_0==DEFAULT||LA195_0==EXIT||LA195_0==EXPORT||LA195_0==FINAL||LA195_0==IMPLEMENTS||LA195_0==INDEX||LA195_0==LBRACK||LA195_0==LOCAL||LA195_0==MESSAGE||LA195_0==NAME||LA195_0==OBJECT||LA195_0==OPERATOR||LA195_0==OUT||LA195_0==POINTER||(LA195_0 >= READ && LA195_0 <= READONLY)||(LA195_0 >= REFERENCE && LA195_0 <= REGISTER)||LA195_0==REMOVE||LA195_0==STATIC||(LA195_0 >= STORED && LA195_0 <= STRING)||LA195_0==TkIdentifier||LA195_0==UNSAFE||LA195_0==VAR||LA195_0==VARIANT||LA195_0==WRITE||LA195_0==198) ) {
				alt195=1;
			}
			switch (alt195) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:429:37: formalParameterList
					{
					pushFollow(FOLLOW_formalParameterList_in_formalParameterSection11670);
					formalParameterList558=formalParameterList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList558.getTree());
					}
					break;

			}

			char_literal559=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_formalParameterSection11674); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(char_literal559);

			// AST REWRITE
			// elements: formalParameterList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 429:63: -> ( formalParameterList )?
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:429:66: ( formalParameterList )?
				if ( stream_formalParameterList.hasNext() ) {
					adaptor.addChild(root_0, stream_formalParameterList.nextTree());
				}
				stream_formalParameterList.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 107, formalParameterSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "formalParameterSection"


	public static class formalParameterList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "formalParameterList"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:431:1: formalParameterList : formalParameter ( ';' formalParameter )* -> formalParameter ( formalParameter )* ;
	public final DelphiParser.formalParameterList_return formalParameterList() throws RecognitionException {
		DelphiParser.formalParameterList_return retval = new DelphiParser.formalParameterList_return();
		retval.start = input.LT(1);
		int formalParameterList_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal561=null;
		ParserRuleReturnScope formalParameter560 =null;
		ParserRuleReturnScope formalParameter562 =null;

		Object char_literal561_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_formalParameter=new RewriteRuleSubtreeStream(adaptor,"rule formalParameter");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:431:30: ( formalParameter ( ';' formalParameter )* -> formalParameter ( formalParameter )* )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:431:32: formalParameter ( ';' formalParameter )*
			{
			pushFollow(FOLLOW_formalParameter_in_formalParameterList11727);
			formalParameter560=formalParameter();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_formalParameter.add(formalParameter560.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:431:48: ( ';' formalParameter )*
			loop196:
			while (true) {
				int alt196=2;
				int LA196_0 = input.LA(1);
				if ( (LA196_0==SEMI) ) {
					alt196=1;
				}

				switch (alt196) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:431:49: ';' formalParameter
					{
					char_literal561=(Token)match(input,SEMI,FOLLOW_SEMI_in_formalParameterList11730); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMI.add(char_literal561);

					pushFollow(FOLLOW_formalParameter_in_formalParameterList11732);
					formalParameter562=formalParameter();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_formalParameter.add(formalParameter562.getTree());
					}
					break;

				default :
					break loop196;
				}
			}

			// AST REWRITE
			// elements: formalParameter, formalParameter
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 431:71: -> formalParameter ( formalParameter )*
			{
				adaptor.addChild(root_0, stream_formalParameter.nextTree());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:431:90: ( formalParameter )*
				while ( stream_formalParameter.hasNext() ) {
					adaptor.addChild(root_0, stream_formalParameter.nextTree());
				}
				stream_formalParameter.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 108, formalParameterList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "formalParameterList"


	public static class formalParameter_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "formalParameter"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:433:1: formalParameter : ( customAttribute )? ( parmType )? identListFlat ( ':' typeDecl )? ( '=' expression )? -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType ( typeDecl )? ) ( ^( TkVariableParam parmType ) )? ;
	public final DelphiParser.formalParameter_return formalParameter() throws RecognitionException {
		DelphiParser.formalParameter_return retval = new DelphiParser.formalParameter_return();
		retval.start = input.LT(1);
		int formalParameter_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal566=null;
		Token char_literal568=null;
		ParserRuleReturnScope customAttribute563 =null;
		ParserRuleReturnScope parmType564 =null;
		ParserRuleReturnScope identListFlat565 =null;
		ParserRuleReturnScope typeDecl567 =null;
		ParserRuleReturnScope expression569 =null;

		Object char_literal566_tree=null;
		Object char_literal568_tree=null;
		RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_identListFlat=new RewriteRuleSubtreeStream(adaptor,"rule identListFlat");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_parmType=new RewriteRuleSubtreeStream(adaptor,"rule parmType");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:433:30: ( ( customAttribute )? ( parmType )? identListFlat ( ':' typeDecl )? ( '=' expression )? -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType ( typeDecl )? ) ( ^( TkVariableParam parmType ) )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:433:32: ( customAttribute )? ( parmType )? identListFlat ( ':' typeDecl )? ( '=' expression )?
			{
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:433:32: ( customAttribute )?
			int alt197=2;
			switch ( input.LA(1) ) {
				case LBRACK:
					{
					alt197=1;
					}
					break;
				case OUT:
					{
					int LA197_2 = input.LA(2);
					if ( (synpred266_Delphi()) ) {
						alt197=1;
					}
					}
					break;
				case TkIdentifier:
					{
					int LA197_3 = input.LA(2);
					if ( (synpred266_Delphi()) ) {
						alt197=1;
					}
					}
					break;
				case 198:
					{
					int LA197_4 = input.LA(2);
					if ( (synpred266_Delphi()) ) {
						alt197=1;
					}
					}
					break;
				case CONST:
				case VAR:
					{
					int LA197_5 = input.LA(2);
					if ( (synpred266_Delphi()) ) {
						alt197=1;
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case EXIT:
				case EXPORT:
				case FINAL:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STATIC:
				case STORED:
				case STRICT:
				case STRING:
				case UNSAFE:
				case VARIANT:
				case WRITE:
					{
					int LA197_6 = input.LA(2);
					if ( (synpred266_Delphi()) ) {
						alt197=1;
					}
					}
					break;
			}
			switch (alt197) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:433:33: customAttribute
					{
					pushFollow(FOLLOW_customAttribute_in_formalParameter11794);
					customAttribute563=customAttribute();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute563.getTree());
					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:433:51: ( parmType )?
			int alt198=2;
			int LA198_0 = input.LA(1);
			if ( (LA198_0==OUT) ) {
				int LA198_1 = input.LA(2);
				if ( (LA198_1==ADD||LA198_1==ANSISTRING||LA198_1==AT||LA198_1==BREAK||(LA198_1 >= CONTAINS && LA198_1 <= CONTINUE)||LA198_1==DEFAULT||LA198_1==EXIT||LA198_1==EXPORT||LA198_1==FINAL||LA198_1==IMPLEMENTS||LA198_1==INDEX||LA198_1==LOCAL||LA198_1==MESSAGE||LA198_1==NAME||LA198_1==OBJECT||LA198_1==OPERATOR||LA198_1==OUT||LA198_1==POINTER||(LA198_1 >= READ && LA198_1 <= READONLY)||(LA198_1 >= REFERENCE && LA198_1 <= REGISTER)||LA198_1==REMOVE||LA198_1==STATIC||(LA198_1 >= STORED && LA198_1 <= STRING)||LA198_1==TkIdentifier||LA198_1==UNSAFE||LA198_1==VARIANT||LA198_1==WRITE||LA198_1==198) ) {
					alt198=1;
				}
			}
			else if ( (LA198_0==CONST||LA198_0==VAR) ) {
				alt198=1;
			}
			switch (alt198) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:433:52: parmType
					{
					pushFollow(FOLLOW_parmType_in_formalParameter11799);
					parmType564=parmType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_parmType.add(parmType564.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_identListFlat_in_formalParameter11803);
			identListFlat565=identListFlat();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identListFlat.add(identListFlat565.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:433:77: ( ':' typeDecl )?
			int alt199=2;
			int LA199_0 = input.LA(1);
			if ( (LA199_0==COLON) ) {
				alt199=1;
			}
			switch (alt199) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:433:78: ':' typeDecl
					{
					char_literal566=(Token)match(input,COLON,FOLLOW_COLON_in_formalParameter11806); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(char_literal566);

					pushFollow(FOLLOW_typeDecl_in_formalParameter11808);
					typeDecl567=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl567.getTree());
					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:433:93: ( '=' expression )?
			int alt200=2;
			int LA200_0 = input.LA(1);
			if ( (LA200_0==EQUAL) ) {
				alt200=1;
			}
			switch (alt200) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:433:94: '=' expression
					{
					char_literal568=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_formalParameter11813); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_EQUAL.add(char_literal568);

					pushFollow(FOLLOW_expression_in_formalParameter11815);
					expression569=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expression.add(expression569.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: parmType, customAttribute, identListFlat, typeDecl
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 433:111: -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType ( typeDecl )? ) ( ^( TkVariableParam parmType ) )?
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:433:114: ( customAttribute )?
				if ( stream_customAttribute.hasNext() ) {
					adaptor.addChild(root_0, stream_customAttribute.nextTree());
				}
				stream_customAttribute.reset();

				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:433:133: ^( TkVariableIdents identListFlat )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableIdents, "TkVariableIdents"), root_1);
				adaptor.addChild(root_1, stream_identListFlat.nextTree());
				adaptor.addChild(root_0, root_1);
				}

				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:433:167: ^( TkVariableType ( typeDecl )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableType, "TkVariableType"), root_1);
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:433:184: ( typeDecl )?
				if ( stream_typeDecl.hasNext() ) {
					adaptor.addChild(root_1, stream_typeDecl.nextTree());
				}
				stream_typeDecl.reset();

				adaptor.addChild(root_0, root_1);
				}

				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:433:195: ( ^( TkVariableParam parmType ) )?
				if ( stream_parmType.hasNext() ) {
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:433:195: ^( TkVariableParam parmType )
					{
					Object root_1 = (Object)adaptor.nil();
					root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableParam, "TkVariableParam"), root_1);
					adaptor.addChild(root_1, stream_parmType.nextTree());
					adaptor.addChild(root_0, root_1);
					}

				}
				stream_parmType.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 109, formalParameter_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "formalParameter"


	public static class parmType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "parmType"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:436:1: parmType : ( 'const' | 'var' | 'out' );
	public final DelphiParser.parmType_return parmType() throws RecognitionException {
		DelphiParser.parmType_return retval = new DelphiParser.parmType_return();
		retval.start = input.LT(1);
		int parmType_StartIndex = input.index();

		Object root_0 = null;

		Token set570=null;

		Object set570_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:436:30: ( 'const' | 'var' | 'out' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set570=input.LT(1);
			if ( input.LA(1)==CONST||input.LA(1)==OUT||input.LA(1)==VAR ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set570));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 110, parmType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "parmType"


	public static class methodBody_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodBody"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:440:1: methodBody : block ';' -> block ;
	public final DelphiParser.methodBody_return methodBody() throws RecognitionException {
		DelphiParser.methodBody_return retval = new DelphiParser.methodBody_return();
		retval.start = input.LT(1);
		int methodBody_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal572=null;
		ParserRuleReturnScope block571 =null;

		Object char_literal572_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:440:30: ( block ';' -> block )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:440:32: block ';'
			{
			pushFollow(FOLLOW_block_in_methodBody12038);
			block571=block();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_block.add(block571.getTree());
			char_literal572=(Token)match(input,SEMI,FOLLOW_SEMI_in_methodBody12040); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal572);

			// AST REWRITE
			// elements: block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 440:42: -> block
			{
				adaptor.addChild(root_0, stream_block.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 111, methodBody_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodBody"


	public static class procBody_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "procBody"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:442:1: procBody : ( 'forward' ';' ( functionDirective )* | 'external' ( 'name' expression | 'index' expression )* ( functionDirective )* | block ';' );
	public final DelphiParser.procBody_return procBody() throws RecognitionException {
		DelphiParser.procBody_return retval = new DelphiParser.procBody_return();
		retval.start = input.LT(1);
		int procBody_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal573=null;
		Token char_literal574=null;
		Token string_literal576=null;
		Token string_literal577=null;
		Token string_literal579=null;
		Token char_literal583=null;
		ParserRuleReturnScope functionDirective575 =null;
		ParserRuleReturnScope expression578 =null;
		ParserRuleReturnScope expression580 =null;
		ParserRuleReturnScope functionDirective581 =null;
		ParserRuleReturnScope block582 =null;

		Object string_literal573_tree=null;
		Object char_literal574_tree=null;
		Object string_literal576_tree=null;
		Object string_literal577_tree=null;
		Object string_literal579_tree=null;
		Object char_literal583_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:442:30: ( 'forward' ';' ( functionDirective )* | 'external' ( 'name' expression | 'index' expression )* ( functionDirective )* | block ';' )
			int alt204=3;
			switch ( input.LA(1) ) {
			case FORWARD:
				{
				alt204=1;
				}
				break;
			case EXTERNAL:
				{
				alt204=2;
				}
				break;
			case ASM:
			case BEGIN:
			case CLASS:
			case CONST:
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case EXPORTS:
			case FUNCTION:
			case LABEL:
			case LBRACK:
			case PROCEDURE:
			case RESOURCESTRING:
			case SEMI:
			case THREADVAR:
			case TYPE:
			case VAR:
				{
				alt204=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 204, 0, input);
				throw nvae;
			}
			switch (alt204) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:442:32: 'forward' ';' ( functionDirective )*
					{
					root_0 = (Object)adaptor.nil();


					string_literal573=(Token)match(input,FORWARD,FOLLOW_FORWARD_in_procBody12101); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal573_tree = (Object)adaptor.create(string_literal573);
					adaptor.addChild(root_0, string_literal573_tree);
					}

					char_literal574=(Token)match(input,SEMI,FOLLOW_SEMI_in_procBody12103); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal574_tree = (Object)adaptor.create(char_literal574);
					adaptor.addChild(root_0, char_literal574_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:442:46: ( functionDirective )*
					loop201:
					while (true) {
						int alt201=2;
						alt201 = dfa201.predict(input);
						switch (alt201) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:442:47: functionDirective
							{
							pushFollow(FOLLOW_functionDirective_in_procBody12106);
							functionDirective575=functionDirective();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, functionDirective575.getTree());

							}
							break;

						default :
							break loop201;
						}
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:443:32: 'external' ( 'name' expression | 'index' expression )* ( functionDirective )*
					{
					root_0 = (Object)adaptor.nil();


					string_literal576=(Token)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_procBody12144); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal576_tree = (Object)adaptor.create(string_literal576);
					adaptor.addChild(root_0, string_literal576_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:443:43: ( 'name' expression | 'index' expression )*
					loop202:
					while (true) {
						int alt202=3;
						int LA202_0 = input.LA(1);
						if ( (LA202_0==NAME) ) {
							int LA202_2 = input.LA(2);
							if ( (synpred274_Delphi()) ) {
								alt202=1;
							}

						}
						else if ( (LA202_0==INDEX) ) {
							int LA202_3 = input.LA(2);
							if ( (synpred275_Delphi()) ) {
								alt202=2;
							}

						}

						switch (alt202) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:443:44: 'name' expression
							{
							string_literal577=(Token)match(input,NAME,FOLLOW_NAME_in_procBody12147); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal577_tree = (Object)adaptor.create(string_literal577);
							adaptor.addChild(root_0, string_literal577_tree);
							}

							pushFollow(FOLLOW_expression_in_procBody12149);
							expression578=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression578.getTree());

							}
							break;
						case 2 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:443:64: 'index' expression
							{
							string_literal579=(Token)match(input,INDEX,FOLLOW_INDEX_in_procBody12153); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal579_tree = (Object)adaptor.create(string_literal579);
							adaptor.addChild(root_0, string_literal579_tree);
							}

							pushFollow(FOLLOW_expression_in_procBody12155);
							expression580=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression580.getTree());

							}
							break;

						default :
							break loop202;
						}
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:443:85: ( functionDirective )*
					loop203:
					while (true) {
						int alt203=2;
						switch ( input.LA(1) ) {
						case OVERLOAD:
							{
							int LA203_2 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case INLINE:
							{
							int LA203_3 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case ASSEMBLER:
							{
							int LA203_4 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case CDECL:
							{
							int LA203_5 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case PASCAL:
							{
							int LA203_6 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case REGISTER:
							{
							int LA203_7 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case SAFECALL:
							{
							int LA203_8 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case STDCALL:
							{
							int LA203_9 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case EXPORT:
							{
							int LA203_10 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case FAR:
							{
							int LA203_11 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case LOCAL:
							{
							int LA203_12 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case NEAR:
							{
							int LA203_13 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case DEPRECATED:
							{
							int LA203_14 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case EXPERIMENTAL:
							{
							int LA203_15 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case PLATFORM:
							{
							int LA203_16 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case LIBRARY:
							{
							int LA203_17 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case VARARGS:
							{
							int LA203_18 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case EXTERNAL:
							{
							int LA203_19 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case UNSAFE:
							{
							int LA203_20 = input.LA(2);
							if ( (synpred276_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						}
						switch (alt203) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:443:86: functionDirective
							{
							pushFollow(FOLLOW_functionDirective_in_procBody12160);
							functionDirective581=functionDirective();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, functionDirective581.getTree());

							}
							break;

						default :
							break loop203;
						}
					}

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:444:32: block ';'
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_block_in_procBody12196);
					block582=block();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, block582.getTree());

					char_literal583=(Token)match(input,SEMI,FOLLOW_SEMI_in_procBody12198); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal583_tree = (Object)adaptor.create(char_literal583);
					adaptor.addChild(root_0, char_literal583_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 112, procBody_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "procBody"


	public static class customAttribute_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "customAttribute"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:449:1: customAttribute : customAttributeList ;
	public final DelphiParser.customAttribute_return customAttribute() throws RecognitionException {
		DelphiParser.customAttribute_return retval = new DelphiParser.customAttribute_return();
		retval.start = input.LT(1);
		int customAttribute_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope customAttributeList584 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:449:30: ( customAttributeList )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:449:32: customAttributeList
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_customAttributeList_in_customAttribute12251);
			customAttributeList584=customAttributeList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, customAttributeList584.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 113, customAttribute_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "customAttribute"


	public static class customAttributeList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "customAttributeList"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:451:1: customAttributeList : ( customAttributeDecl )* ;
	public final DelphiParser.customAttributeList_return customAttributeList() throws RecognitionException {
		DelphiParser.customAttributeList_return retval = new DelphiParser.customAttributeList_return();
		retval.start = input.LT(1);
		int customAttributeList_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope customAttributeDecl585 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:451:30: ( ( customAttributeDecl )* )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:451:32: ( customAttributeDecl )*
			{
			root_0 = (Object)adaptor.nil();


			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:451:32: ( customAttributeDecl )*
			loop205:
			while (true) {
				int alt205=2;
				int LA205_0 = input.LA(1);
				if ( (LA205_0==LBRACK) ) {
					int LA205_2 = input.LA(2);
					if ( (synpred278_Delphi()) ) {
						alt205=1;
					}

				}

				switch (alt205) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:451:33: customAttributeDecl
					{
					pushFollow(FOLLOW_customAttributeDecl_in_customAttributeList12298);
					customAttributeDecl585=customAttributeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, customAttributeDecl585.getTree());

					}
					break;

				default :
					break loop205;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 114, customAttributeList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "customAttributeList"


	public static class customAttributeDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "customAttributeDecl"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:453:1: customAttributeDecl : '[' customAttributeIdent ( '(' ( expressionList )? ')' )? ']' -> ^( TkCustomAttribute '[' customAttributeIdent ( '(' ( expressionList )? ')' )? ']' ) ;
	public final DelphiParser.customAttributeDecl_return customAttributeDecl() throws RecognitionException {
		DelphiParser.customAttributeDecl_return retval = new DelphiParser.customAttributeDecl_return();
		retval.start = input.LT(1);
		int customAttributeDecl_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal586=null;
		Token char_literal588=null;
		Token char_literal590=null;
		Token char_literal591=null;
		ParserRuleReturnScope customAttributeIdent587 =null;
		ParserRuleReturnScope expressionList589 =null;

		Object char_literal586_tree=null;
		Object char_literal588_tree=null;
		Object char_literal590_tree=null;
		Object char_literal591_tree=null;
		RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
		RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
		RewriteRuleSubtreeStream stream_customAttributeIdent=new RewriteRuleSubtreeStream(adaptor,"rule customAttributeIdent");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:453:30: ( '[' customAttributeIdent ( '(' ( expressionList )? ')' )? ']' -> ^( TkCustomAttribute '[' customAttributeIdent ( '(' ( expressionList )? ')' )? ']' ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:453:32: '[' customAttributeIdent ( '(' ( expressionList )? ')' )? ']'
			{
			char_literal586=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_customAttributeDecl12346); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LBRACK.add(char_literal586);

			pushFollow(FOLLOW_customAttributeIdent_in_customAttributeDecl12348);
			customAttributeIdent587=customAttributeIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_customAttributeIdent.add(customAttributeIdent587.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:453:57: ( '(' ( expressionList )? ')' )?
			int alt207=2;
			int LA207_0 = input.LA(1);
			if ( (LA207_0==LPAREN) ) {
				alt207=1;
			}
			switch (alt207) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:453:58: '(' ( expressionList )? ')'
					{
					char_literal588=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_customAttributeDecl12351); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(char_literal588);

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:453:62: ( expressionList )?
					int alt206=2;
					int LA206_0 = input.LA(1);
					if ( ((LA206_0 >= ADD && LA206_0 <= ANSISTRING)||LA206_0==AS||(LA206_0 >= AT && LA206_0 <= AT2)||LA206_0==BREAK||LA206_0==COMMA||(LA206_0 >= CONTAINS && LA206_0 <= ControlString)||LA206_0==DEFAULT||LA206_0==DIV||LA206_0==DOT||LA206_0==EQUAL||LA206_0==EXIT||LA206_0==EXPORT||LA206_0==FALSE||LA206_0==FINAL||(LA206_0 >= FUNCTION && LA206_0 <= GE)||LA206_0==GT||(LA206_0 >= IMPLEMENTS && LA206_0 <= INHERITED)||LA206_0==IS||LA206_0==LBRACK||LA206_0==LE||(LA206_0 >= LOCAL && LA206_0 <= NAME)||LA206_0==NIL||(LA206_0 >= NOT && LA206_0 <= OBJECT)||(LA206_0 >= OPERATOR && LA206_0 <= OUT)||(LA206_0 >= PLUS && LA206_0 <= POINTER2)||LA206_0==PROCEDURE||LA206_0==QuotedString||(LA206_0 >= READ && LA206_0 <= READONLY)||(LA206_0 >= REFERENCE && LA206_0 <= REGISTER)||LA206_0==REMOVE||(LA206_0 >= SHL && LA206_0 <= STATIC)||(LA206_0 >= STORED && LA206_0 <= STRING)||LA206_0==TRUE||(LA206_0 >= TkHexNum && LA206_0 <= TkIntNum)||LA206_0==TkRealNum||LA206_0==UNSAFE||LA206_0==VARIANT||LA206_0==WRITE||(LA206_0 >= XOR && LA206_0 <= 199)) ) {
						alt206=1;
					}
					else if ( (LA206_0==RPAREN) ) {
						int LA206_2 = input.LA(2);
						if ( (synpred279_Delphi()) ) {
							alt206=1;
						}
					}
					switch (alt206) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:453:63: expressionList
							{
							pushFollow(FOLLOW_expressionList_in_customAttributeDecl12354);
							expressionList589=expressionList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_expressionList.add(expressionList589.getTree());
							}
							break;

					}

					char_literal590=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_customAttributeDecl12358); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(char_literal590);

					}
					break;

			}

			char_literal591=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_customAttributeDecl12362); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RBRACK.add(char_literal591);

			// AST REWRITE
			// elements: expressionList, RBRACK, customAttributeIdent, RPAREN, LPAREN, LBRACK
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 453:91: -> ^( TkCustomAttribute '[' customAttributeIdent ( '(' ( expressionList )? ')' )? ']' )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:453:94: ^( TkCustomAttribute '[' customAttributeIdent ( '(' ( expressionList )? ')' )? ']' )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkCustomAttribute, "TkCustomAttribute"), root_1);
				adaptor.addChild(root_1, stream_LBRACK.nextNode());
				adaptor.addChild(root_1, stream_customAttributeIdent.nextTree());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:453:139: ( '(' ( expressionList )? ')' )?
				if ( stream_expressionList.hasNext()||stream_RPAREN.hasNext()||stream_LPAREN.hasNext() ) {
					adaptor.addChild(root_1, stream_LPAREN.nextNode());
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:453:144: ( expressionList )?
					if ( stream_expressionList.hasNext() ) {
						adaptor.addChild(root_1, stream_expressionList.nextTree());
					}
					stream_expressionList.reset();

					adaptor.addChild(root_1, stream_RPAREN.nextNode());
				}
				stream_expressionList.reset();
				stream_RPAREN.reset();
				stream_LPAREN.reset();

				adaptor.addChild(root_1, stream_RBRACK.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 115, customAttributeDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "customAttributeDecl"


	public static class customAttributeIdent_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "customAttributeIdent"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:455:1: customAttributeIdent : namespacedQualifiedIdent ( ':' namespacedQualifiedIdent )? ;
	public final DelphiParser.customAttributeIdent_return customAttributeIdent() throws RecognitionException {
		DelphiParser.customAttributeIdent_return retval = new DelphiParser.customAttributeIdent_return();
		retval.start = input.LT(1);
		int customAttributeIdent_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal593=null;
		ParserRuleReturnScope namespacedQualifiedIdent592 =null;
		ParserRuleReturnScope namespacedQualifiedIdent594 =null;

		Object char_literal593_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:455:30: ( namespacedQualifiedIdent ( ':' namespacedQualifiedIdent )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:455:32: namespacedQualifiedIdent ( ':' namespacedQualifiedIdent )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_namespacedQualifiedIdent_in_customAttributeIdent12432);
			namespacedQualifiedIdent592=namespacedQualifiedIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, namespacedQualifiedIdent592.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:455:57: ( ':' namespacedQualifiedIdent )?
			int alt208=2;
			int LA208_0 = input.LA(1);
			if ( (LA208_0==COLON) ) {
				alt208=1;
			}
			switch (alt208) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:455:58: ':' namespacedQualifiedIdent
					{
					char_literal593=(Token)match(input,COLON,FOLLOW_COLON_in_customAttributeIdent12435); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal593_tree = (Object)adaptor.create(char_literal593);
					adaptor.addChild(root_0, char_literal593_tree);
					}

					pushFollow(FOLLOW_namespacedQualifiedIdent_in_customAttributeIdent12437);
					namespacedQualifiedIdent594=namespacedQualifiedIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, namespacedQualifiedIdent594.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 116, customAttributeIdent_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "customAttributeIdent"


	public static class expression_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "expression"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:460:1: expression : ( anonymousExpression -> ^( TkAnonymousExpression anonymousExpression ) | simpleExpression ( relOp simpleExpression )? ( '=' expression )? );
	public final DelphiParser.expression_return expression() throws RecognitionException {
		DelphiParser.expression_return retval = new DelphiParser.expression_return();
		retval.start = input.LT(1);
		int expression_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal599=null;
		ParserRuleReturnScope anonymousExpression595 =null;
		ParserRuleReturnScope simpleExpression596 =null;
		ParserRuleReturnScope relOp597 =null;
		ParserRuleReturnScope simpleExpression598 =null;
		ParserRuleReturnScope expression600 =null;

		Object char_literal599_tree=null;
		RewriteRuleSubtreeStream stream_anonymousExpression=new RewriteRuleSubtreeStream(adaptor,"rule anonymousExpression");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:460:30: ( anonymousExpression -> ^( TkAnonymousExpression anonymousExpression ) | simpleExpression ( relOp simpleExpression )? ( '=' expression )? )
			int alt211=2;
			switch ( input.LA(1) ) {
			case PROCEDURE:
				{
				int LA211_1 = input.LA(2);
				if ( (synpred282_Delphi()) ) {
					alt211=1;
				}
				else if ( (true) ) {
					alt211=2;
				}

				}
				break;
			case FUNCTION:
				{
				int LA211_2 = input.LA(2);
				if ( (synpred282_Delphi()) ) {
					alt211=1;
				}
				else if ( (true) ) {
					alt211=2;
				}

				}
				break;
			case EOF:
			case ABSOLUTE:
			case ADD:
			case AND:
			case ANSISTRING:
			case AS:
			case ASM:
			case ASSEMBLER:
			case AT:
			case AT2:
			case AUTOMATED:
			case BEGIN:
			case BREAK:
			case CASE:
			case CDECL:
			case CLASS:
			case COLON:
			case COMMA:
			case CONST:
			case CONSTRUCTOR:
			case CONTAINS:
			case CONTINUE:
			case ControlString:
			case DEFAULT:
			case DEPRECATED:
			case DESTRUCTOR:
			case DISPID:
			case DIV:
			case DO:
			case DOT:
			case DOTDOT:
			case DOWNTO:
			case ELSE:
			case END:
			case EQUAL:
			case EXCEPT:
			case EXIT:
			case EXPERIMENTAL:
			case EXPORT:
			case EXPORTS:
			case EXTERNAL:
			case FALSE:
			case FAR:
			case FINAL:
			case FINALIZATION:
			case FINALLY:
			case GE:
			case GT:
			case IMPLEMENTATION:
			case IMPLEMENTS:
			case IN:
			case INDEX:
			case INHERITED:
			case INITIALIZATION:
			case INLINE:
			case IS:
			case LABEL:
			case LBRACK:
			case LE:
			case LIBRARY:
			case LOCAL:
			case LPAREN:
			case LT:
			case MESSAGE:
			case MINUS:
			case MOD:
			case NAME:
			case NEAR:
			case NIL:
			case NODEFAULT:
			case NOT:
			case NOT_EQUAL:
			case OBJECT:
			case OF:
			case ON:
			case OPERATOR:
			case OR:
			case OUT:
			case OVERLOAD:
			case PASCAL:
			case PLATFORM:
			case PLUS:
			case POINTER:
			case POINTER2:
			case PRIVATE:
			case PROPERTY:
			case PROTECTED:
			case PUBLIC:
			case PUBLISHED:
			case QuotedString:
			case RBRACK:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case RESIDENT:
			case RESOURCESTRING:
			case RPAREN:
			case SAFECALL:
			case SEMI:
			case SHL:
			case SHR:
			case SLASH:
			case STAR:
			case STATIC:
			case STDCALL:
			case STORED:
			case STRICT:
			case STRING:
			case THEN:
			case THREADVAR:
			case TO:
			case TRUE:
			case TYPE:
			case TkHexNum:
			case TkIdentifier:
			case TkIntNum:
			case TkRealNum:
			case UNSAFE:
			case UNTIL:
			case VAR:
			case VARARGS:
			case VARIANT:
			case WRITE:
			case WRITEONLY:
			case XOR:
			case 198:
			case 199:
				{
				alt211=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 211, 0, input);
				throw nvae;
			}
			switch (alt211) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:460:32: anonymousExpression
					{
					pushFollow(FOLLOW_anonymousExpression_in_expression12497);
					anonymousExpression595=anonymousExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_anonymousExpression.add(anonymousExpression595.getTree());
					// AST REWRITE
					// elements: anonymousExpression
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 460:52: -> ^( TkAnonymousExpression anonymousExpression )
					{
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:460:55: ^( TkAnonymousExpression anonymousExpression )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkAnonymousExpression, "TkAnonymousExpression"), root_1);
						adaptor.addChild(root_1, stream_anonymousExpression.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:32: simpleExpression ( relOp simpleExpression )? ( '=' expression )?
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_simpleExpression_in_expression12538);
					simpleExpression596=simpleExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleExpression596.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:49: ( relOp simpleExpression )?
					int alt209=2;
					switch ( input.LA(1) ) {
						case EQUAL:
							{
							int LA209_1 = input.LA(2);
							if ( (synpred283_Delphi()) ) {
								alt209=1;
							}
							}
							break;
						case LT:
							{
							int LA209_2 = input.LA(2);
							if ( (synpred283_Delphi()) ) {
								alt209=1;
							}
							}
							break;
						case GT:
							{
							int LA209_4 = input.LA(2);
							if ( (synpred283_Delphi()) ) {
								alt209=1;
							}
							}
							break;
						case GE:
						case IN:
						case IS:
						case LE:
						case NOT_EQUAL:
							{
							int LA209_5 = input.LA(2);
							if ( (synpred283_Delphi()) ) {
								alt209=1;
							}
							}
							break;
					}
					switch (alt209) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:50: relOp simpleExpression
							{
							pushFollow(FOLLOW_relOp_in_expression12541);
							relOp597=relOp();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, relOp597.getTree());

							pushFollow(FOLLOW_simpleExpression_in_expression12543);
							simpleExpression598=simpleExpression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleExpression598.getTree());

							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:75: ( '=' expression )?
					int alt210=2;
					int LA210_0 = input.LA(1);
					if ( (LA210_0==EQUAL) ) {
						int LA210_1 = input.LA(2);
						if ( (synpred284_Delphi()) ) {
							alt210=1;
						}
					}
					switch (alt210) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:76: '=' expression
							{
							char_literal599=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_expression12548); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal599_tree = (Object)adaptor.create(char_literal599);
							adaptor.addChild(root_0, char_literal599_tree);
							}

							pushFollow(FOLLOW_expression_in_expression12550);
							expression600=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression600.getTree());

							}
							break;

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 117, expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "expression"


	public static class anonymousExpression_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "anonymousExpression"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:463:1: anonymousExpression : ( 'procedure' ( formalParameterSection )? block | 'function' ( formalParameterSection )? ':' typeDecl block );
	public final DelphiParser.anonymousExpression_return anonymousExpression() throws RecognitionException {
		DelphiParser.anonymousExpression_return retval = new DelphiParser.anonymousExpression_return();
		retval.start = input.LT(1);
		int anonymousExpression_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal601=null;
		Token string_literal604=null;
		Token char_literal606=null;
		ParserRuleReturnScope formalParameterSection602 =null;
		ParserRuleReturnScope block603 =null;
		ParserRuleReturnScope formalParameterSection605 =null;
		ParserRuleReturnScope typeDecl607 =null;
		ParserRuleReturnScope block608 =null;

		Object string_literal601_tree=null;
		Object string_literal604_tree=null;
		Object char_literal606_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:463:30: ( 'procedure' ( formalParameterSection )? block | 'function' ( formalParameterSection )? ':' typeDecl block )
			int alt214=2;
			int LA214_0 = input.LA(1);
			if ( (LA214_0==PROCEDURE) ) {
				alt214=1;
			}
			else if ( (LA214_0==FUNCTION) ) {
				alt214=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 214, 0, input);
				throw nvae;
			}

			switch (alt214) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:463:32: 'procedure' ( formalParameterSection )? block
					{
					root_0 = (Object)adaptor.nil();


					string_literal601=(Token)match(input,PROCEDURE,FOLLOW_PROCEDURE_in_anonymousExpression12601); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal601_tree = (Object)adaptor.create(string_literal601);
					adaptor.addChild(root_0, string_literal601_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:463:44: ( formalParameterSection )?
					int alt212=2;
					alt212 = dfa212.predict(input);
					switch (alt212) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:463:45: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_anonymousExpression12604);
							formalParameterSection602=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterSection602.getTree());

							}
							break;

					}

					pushFollow(FOLLOW_block_in_anonymousExpression12608);
					block603=block();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, block603.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:464:32: 'function' ( formalParameterSection )? ':' typeDecl block
					{
					root_0 = (Object)adaptor.nil();


					string_literal604=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_anonymousExpression12641); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal604_tree = (Object)adaptor.create(string_literal604);
					adaptor.addChild(root_0, string_literal604_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:464:43: ( formalParameterSection )?
					int alt213=2;
					int LA213_0 = input.LA(1);
					if ( (LA213_0==LPAREN) ) {
						alt213=1;
					}
					switch (alt213) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:464:44: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_anonymousExpression12644);
							formalParameterSection605=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterSection605.getTree());

							}
							break;

					}

					char_literal606=(Token)match(input,COLON,FOLLOW_COLON_in_anonymousExpression12648); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal606_tree = (Object)adaptor.create(char_literal606);
					adaptor.addChild(root_0, char_literal606_tree);
					}

					pushFollow(FOLLOW_typeDecl_in_anonymousExpression12650);
					typeDecl607=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl607.getTree());

					pushFollow(FOLLOW_block_in_anonymousExpression12652);
					block608=block();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, block608.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 118, anonymousExpression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "anonymousExpression"


	public static class simpleExpression_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "simpleExpression"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:466:1: simpleExpression : factor ( operator factor )* ;
	public final DelphiParser.simpleExpression_return simpleExpression() throws RecognitionException {
		DelphiParser.simpleExpression_return retval = new DelphiParser.simpleExpression_return();
		retval.start = input.LT(1);
		int simpleExpression_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope factor609 =null;
		ParserRuleReturnScope operator610 =null;
		ParserRuleReturnScope factor611 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:466:30: ( factor ( operator factor )* )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:466:32: factor ( operator factor )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_factor_in_simpleExpression12701);
			factor609=factor();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, factor609.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:466:39: ( operator factor )*
			loop215:
			while (true) {
				int alt215=2;
				switch ( input.LA(1) ) {
				case PLUS:
					{
					int LA215_2 = input.LA(2);
					if ( (synpred288_Delphi()) ) {
						alt215=1;
					}

					}
					break;
				case MINUS:
					{
					int LA215_3 = input.LA(2);
					if ( (synpred288_Delphi()) ) {
						alt215=1;
					}

					}
					break;
				case AND:
				case AS:
				case DIV:
				case MOD:
				case OR:
				case SHL:
				case SHR:
				case SLASH:
				case STAR:
				case XOR:
					{
					int LA215_4 = input.LA(2);
					if ( (synpred288_Delphi()) ) {
						alt215=1;
					}

					}
					break;
				}
				switch (alt215) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:466:40: operator factor
					{
					pushFollow(FOLLOW_operator_in_simpleExpression12704);
					operator610=operator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, operator610.getTree());

					pushFollow(FOLLOW_factor_in_simpleExpression12706);
					factor611=factor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor611.getTree());

					}
					break;

				default :
					break loop215;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 119, simpleExpression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "simpleExpression"


	public static class factor_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "factor"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:468:1: factor : ( '@' factor | '@@' factor | 'not' factor | '+' factor | '-' factor | '^' ident | intRealNum | 'true' | 'false' | 'nil' | '(' expression ')' ( '^' )? ( '.' expression )? | stringFactor ( '.' simpleExpression )? | setSection | designator | typeId '(' expression ')' );
	public final DelphiParser.factor_return factor() throws RecognitionException {
		DelphiParser.factor_return retval = new DelphiParser.factor_return();
		retval.start = input.LT(1);
		int factor_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal612=null;
		Token string_literal614=null;
		Token string_literal616=null;
		Token char_literal618=null;
		Token char_literal620=null;
		Token char_literal622=null;
		Token string_literal625=null;
		Token string_literal626=null;
		Token string_literal627=null;
		Token char_literal628=null;
		Token char_literal630=null;
		Token char_literal631=null;
		Token char_literal632=null;
		Token char_literal635=null;
		Token char_literal640=null;
		Token char_literal642=null;
		ParserRuleReturnScope factor613 =null;
		ParserRuleReturnScope factor615 =null;
		ParserRuleReturnScope factor617 =null;
		ParserRuleReturnScope factor619 =null;
		ParserRuleReturnScope factor621 =null;
		ParserRuleReturnScope ident623 =null;
		ParserRuleReturnScope intRealNum624 =null;
		ParserRuleReturnScope expression629 =null;
		ParserRuleReturnScope expression633 =null;
		ParserRuleReturnScope stringFactor634 =null;
		ParserRuleReturnScope simpleExpression636 =null;
		ParserRuleReturnScope setSection637 =null;
		ParserRuleReturnScope designator638 =null;
		ParserRuleReturnScope typeId639 =null;
		ParserRuleReturnScope expression641 =null;

		Object char_literal612_tree=null;
		Object string_literal614_tree=null;
		Object string_literal616_tree=null;
		Object char_literal618_tree=null;
		Object char_literal620_tree=null;
		Object char_literal622_tree=null;
		Object string_literal625_tree=null;
		Object string_literal626_tree=null;
		Object string_literal627_tree=null;
		Object char_literal628_tree=null;
		Object char_literal630_tree=null;
		Object char_literal631_tree=null;
		Object char_literal632_tree=null;
		Object char_literal635_tree=null;
		Object char_literal640_tree=null;
		Object char_literal642_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:468:30: ( '@' factor | '@@' factor | 'not' factor | '+' factor | '-' factor | '^' ident | intRealNum | 'true' | 'false' | 'nil' | '(' expression ')' ( '^' )? ( '.' expression )? | stringFactor ( '.' simpleExpression )? | setSection | designator | typeId '(' expression ')' )
			int alt219=15;
			alt219 = dfa219.predict(input);
			switch (alt219) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:468:32: '@' factor
					{
					root_0 = (Object)adaptor.nil();


					char_literal612=(Token)match(input,AT2,FOLLOW_AT2_in_factor12767); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal612_tree = (Object)adaptor.create(char_literal612);
					adaptor.addChild(root_0, char_literal612_tree);
					}

					pushFollow(FOLLOW_factor_in_factor12769);
					factor613=factor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor613.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:469:32: '@@' factor
					{
					root_0 = (Object)adaptor.nil();


					string_literal614=(Token)match(input,199,FOLLOW_199_in_factor12802); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal614_tree = (Object)adaptor.create(string_literal614);
					adaptor.addChild(root_0, string_literal614_tree);
					}

					pushFollow(FOLLOW_factor_in_factor12804);
					factor615=factor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor615.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:470:32: 'not' factor
					{
					root_0 = (Object)adaptor.nil();


					string_literal616=(Token)match(input,NOT,FOLLOW_NOT_in_factor12844); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal616_tree = (Object)adaptor.create(string_literal616);
					adaptor.addChild(root_0, string_literal616_tree);
					}

					pushFollow(FOLLOW_factor_in_factor12846);
					factor617=factor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor617.getTree());

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:471:32: '+' factor
					{
					root_0 = (Object)adaptor.nil();


					char_literal618=(Token)match(input,PLUS,FOLLOW_PLUS_in_factor12879); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal618_tree = (Object)adaptor.create(char_literal618);
					adaptor.addChild(root_0, char_literal618_tree);
					}

					pushFollow(FOLLOW_factor_in_factor12881);
					factor619=factor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor619.getTree());

					}
					break;
				case 5 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:472:32: '-' factor
					{
					root_0 = (Object)adaptor.nil();


					char_literal620=(Token)match(input,MINUS,FOLLOW_MINUS_in_factor12914); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal620_tree = (Object)adaptor.create(char_literal620);
					adaptor.addChild(root_0, char_literal620_tree);
					}

					pushFollow(FOLLOW_factor_in_factor12916);
					factor621=factor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor621.getTree());

					}
					break;
				case 6 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:473:32: '^' ident
					{
					root_0 = (Object)adaptor.nil();


					char_literal622=(Token)match(input,POINTER2,FOLLOW_POINTER2_in_factor12949); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal622_tree = (Object)adaptor.create(char_literal622);
					adaptor.addChild(root_0, char_literal622_tree);
					}

					pushFollow(FOLLOW_ident_in_factor12951);
					ident623=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident623.getTree());

					}
					break;
				case 7 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:474:32: intRealNum
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_intRealNum_in_factor12995);
					intRealNum624=intRealNum();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, intRealNum624.getTree());

					}
					break;
				case 8 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:475:32: 'true'
					{
					root_0 = (Object)adaptor.nil();


					string_literal625=(Token)match(input,TRUE,FOLLOW_TRUE_in_factor13028); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal625_tree = (Object)adaptor.create(string_literal625);
					adaptor.addChild(root_0, string_literal625_tree);
					}

					}
					break;
				case 9 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:476:32: 'false'
					{
					root_0 = (Object)adaptor.nil();


					string_literal626=(Token)match(input,FALSE,FOLLOW_FALSE_in_factor13061); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal626_tree = (Object)adaptor.create(string_literal626);
					adaptor.addChild(root_0, string_literal626_tree);
					}

					}
					break;
				case 10 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:477:32: 'nil'
					{
					root_0 = (Object)adaptor.nil();


					string_literal627=(Token)match(input,NIL,FOLLOW_NIL_in_factor13094); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal627_tree = (Object)adaptor.create(string_literal627);
					adaptor.addChild(root_0, string_literal627_tree);
					}

					}
					break;
				case 11 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:32: '(' expression ')' ( '^' )? ( '.' expression )?
					{
					root_0 = (Object)adaptor.nil();


					char_literal628=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_factor13127); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal628_tree = (Object)adaptor.create(char_literal628);
					adaptor.addChild(root_0, char_literal628_tree);
					}

					pushFollow(FOLLOW_expression_in_factor13129);
					expression629=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression629.getTree());

					char_literal630=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_factor13131); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal630_tree = (Object)adaptor.create(char_literal630);
					adaptor.addChild(root_0, char_literal630_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:51: ( '^' )?
					int alt216=2;
					int LA216_0 = input.LA(1);
					if ( (LA216_0==POINTER2) ) {
						int LA216_1 = input.LA(2);
						if ( (synpred299_Delphi()) ) {
							alt216=1;
						}
					}
					switch (alt216) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:52: '^'
							{
							char_literal631=(Token)match(input,POINTER2,FOLLOW_POINTER2_in_factor13134); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal631_tree = (Object)adaptor.create(char_literal631);
							adaptor.addChild(root_0, char_literal631_tree);
							}

							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:58: ( '.' expression )?
					int alt217=2;
					int LA217_0 = input.LA(1);
					if ( (LA217_0==DOT) ) {
						int LA217_1 = input.LA(2);
						if ( (synpred300_Delphi()) ) {
							alt217=1;
						}
					}
					switch (alt217) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:59: '.' expression
							{
							char_literal632=(Token)match(input,DOT,FOLLOW_DOT_in_factor13139); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal632_tree = (Object)adaptor.create(char_literal632);
							adaptor.addChild(root_0, char_literal632_tree);
							}

							pushFollow(FOLLOW_expression_in_factor13141);
							expression633=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression633.getTree());

							}
							break;

					}

					}
					break;
				case 12 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:479:32: stringFactor ( '.' simpleExpression )?
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_stringFactor_in_factor13184);
					stringFactor634=stringFactor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, stringFactor634.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:479:45: ( '.' simpleExpression )?
					int alt218=2;
					int LA218_0 = input.LA(1);
					if ( (LA218_0==DOT) ) {
						int LA218_1 = input.LA(2);
						if ( (synpred302_Delphi()) ) {
							alt218=1;
						}
					}
					switch (alt218) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:479:46: '.' simpleExpression
							{
							char_literal635=(Token)match(input,DOT,FOLLOW_DOT_in_factor13187); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal635_tree = (Object)adaptor.create(char_literal635);
							adaptor.addChild(root_0, char_literal635_tree);
							}

							pushFollow(FOLLOW_simpleExpression_in_factor13189);
							simpleExpression636=simpleExpression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleExpression636.getTree());

							}
							break;

					}

					}
					break;
				case 13 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:480:32: setSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_setSection_in_factor13224);
					setSection637=setSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, setSection637.getTree());

					}
					break;
				case 14 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:481:32: designator
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_designator_in_factor13257);
					designator638=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator638.getTree());

					}
					break;
				case 15 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:482:32: typeId '(' expression ')'
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_typeId_in_factor13290);
					typeId639=typeId();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeId639.getTree());

					char_literal640=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_factor13292); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal640_tree = (Object)adaptor.create(char_literal640);
					adaptor.addChild(root_0, char_literal640_tree);
					}

					pushFollow(FOLLOW_expression_in_factor13294);
					expression641=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression641.getTree());

					char_literal642=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_factor13296); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal642_tree = (Object)adaptor.create(char_literal642);
					adaptor.addChild(root_0, char_literal642_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 120, factor_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "factor"


	public static class stringFactor_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "stringFactor"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:484:1: stringFactor : ( ControlString ( QuotedString ControlString )* ( QuotedString )? | QuotedString ( ControlString QuotedString )* ( ControlString )? );
	public final DelphiParser.stringFactor_return stringFactor() throws RecognitionException {
		DelphiParser.stringFactor_return retval = new DelphiParser.stringFactor_return();
		retval.start = input.LT(1);
		int stringFactor_StartIndex = input.index();

		Object root_0 = null;

		Token ControlString643=null;
		Token QuotedString644=null;
		Token ControlString645=null;
		Token QuotedString646=null;
		Token QuotedString647=null;
		Token ControlString648=null;
		Token QuotedString649=null;
		Token ControlString650=null;

		Object ControlString643_tree=null;
		Object QuotedString644_tree=null;
		Object ControlString645_tree=null;
		Object QuotedString646_tree=null;
		Object QuotedString647_tree=null;
		Object ControlString648_tree=null;
		Object QuotedString649_tree=null;
		Object ControlString650_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:484:30: ( ControlString ( QuotedString ControlString )* ( QuotedString )? | QuotedString ( ControlString QuotedString )* ( ControlString )? )
			int alt224=2;
			int LA224_0 = input.LA(1);
			if ( (LA224_0==ControlString) ) {
				alt224=1;
			}
			else if ( (LA224_0==QuotedString) ) {
				alt224=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 224, 0, input);
				throw nvae;
			}

			switch (alt224) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:484:32: ControlString ( QuotedString ControlString )* ( QuotedString )?
					{
					root_0 = (Object)adaptor.nil();


					ControlString643=(Token)match(input,ControlString,FOLLOW_ControlString_in_stringFactor13349); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ControlString643_tree = (Object)adaptor.create(ControlString643);
					adaptor.addChild(root_0, ControlString643_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:484:46: ( QuotedString ControlString )*
					loop220:
					while (true) {
						int alt220=2;
						int LA220_0 = input.LA(1);
						if ( (LA220_0==QuotedString) ) {
							int LA220_1 = input.LA(2);
							if ( (LA220_1==ControlString) ) {
								int LA220_3 = input.LA(3);
								if ( (synpred306_Delphi()) ) {
									alt220=1;
								}

							}

						}

						switch (alt220) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:484:47: QuotedString ControlString
							{
							QuotedString644=(Token)match(input,QuotedString,FOLLOW_QuotedString_in_stringFactor13352); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							QuotedString644_tree = (Object)adaptor.create(QuotedString644);
							adaptor.addChild(root_0, QuotedString644_tree);
							}

							ControlString645=(Token)match(input,ControlString,FOLLOW_ControlString_in_stringFactor13354); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ControlString645_tree = (Object)adaptor.create(ControlString645);
							adaptor.addChild(root_0, ControlString645_tree);
							}

							}
							break;

						default :
							break loop220;
						}
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:484:76: ( QuotedString )?
					int alt221=2;
					int LA221_0 = input.LA(1);
					if ( (LA221_0==QuotedString) ) {
						int LA221_1 = input.LA(2);
						if ( (synpred307_Delphi()) ) {
							alt221=1;
						}
					}
					switch (alt221) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:484:77: QuotedString
							{
							QuotedString646=(Token)match(input,QuotedString,FOLLOW_QuotedString_in_stringFactor13359); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							QuotedString646_tree = (Object)adaptor.create(QuotedString646);
							adaptor.addChild(root_0, QuotedString646_tree);
							}

							}
							break;

					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:485:32: QuotedString ( ControlString QuotedString )* ( ControlString )?
					{
					root_0 = (Object)adaptor.nil();


					QuotedString647=(Token)match(input,QuotedString,FOLLOW_QuotedString_in_stringFactor13394); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					QuotedString647_tree = (Object)adaptor.create(QuotedString647);
					adaptor.addChild(root_0, QuotedString647_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:485:45: ( ControlString QuotedString )*
					loop222:
					while (true) {
						int alt222=2;
						int LA222_0 = input.LA(1);
						if ( (LA222_0==ControlString) ) {
							int LA222_1 = input.LA(2);
							if ( (LA222_1==QuotedString) ) {
								int LA222_3 = input.LA(3);
								if ( (synpred309_Delphi()) ) {
									alt222=1;
								}

							}

						}

						switch (alt222) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:485:46: ControlString QuotedString
							{
							ControlString648=(Token)match(input,ControlString,FOLLOW_ControlString_in_stringFactor13397); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ControlString648_tree = (Object)adaptor.create(ControlString648);
							adaptor.addChild(root_0, ControlString648_tree);
							}

							QuotedString649=(Token)match(input,QuotedString,FOLLOW_QuotedString_in_stringFactor13399); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							QuotedString649_tree = (Object)adaptor.create(QuotedString649);
							adaptor.addChild(root_0, QuotedString649_tree);
							}

							}
							break;

						default :
							break loop222;
						}
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:485:75: ( ControlString )?
					int alt223=2;
					int LA223_0 = input.LA(1);
					if ( (LA223_0==ControlString) ) {
						int LA223_1 = input.LA(2);
						if ( (synpred310_Delphi()) ) {
							alt223=1;
						}
					}
					switch (alt223) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:485:76: ControlString
							{
							ControlString650=(Token)match(input,ControlString,FOLLOW_ControlString_in_stringFactor13404); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ControlString650_tree = (Object)adaptor.create(ControlString650);
							adaptor.addChild(root_0, ControlString650_tree);
							}

							}
							break;

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 121, stringFactor_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "stringFactor"


	public static class setSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "setSection"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:1: setSection : '[' ( expression ( ( ',' | '..' ) expression )* )? ']' ;
	public final DelphiParser.setSection_return setSection() throws RecognitionException {
		DelphiParser.setSection_return retval = new DelphiParser.setSection_return();
		retval.start = input.LT(1);
		int setSection_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal651=null;
		Token set653=null;
		Token char_literal655=null;
		ParserRuleReturnScope expression652 =null;
		ParserRuleReturnScope expression654 =null;

		Object char_literal651_tree=null;
		Object set653_tree=null;
		Object char_literal655_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:30: ( '[' ( expression ( ( ',' | '..' ) expression )* )? ']' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:32: '[' ( expression ( ( ',' | '..' ) expression )* )? ']'
			{
			root_0 = (Object)adaptor.nil();


			char_literal651=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_setSection13461); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal651_tree = (Object)adaptor.create(char_literal651);
			adaptor.addChild(root_0, char_literal651_tree);
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:36: ( expression ( ( ',' | '..' ) expression )* )?
			int alt226=2;
			int LA226_0 = input.LA(1);
			if ( ((LA226_0 >= ADD && LA226_0 <= ANSISTRING)||LA226_0==AS||(LA226_0 >= AT && LA226_0 <= AT2)||LA226_0==BREAK||LA226_0==COMMA||(LA226_0 >= CONTAINS && LA226_0 <= ControlString)||LA226_0==DEFAULT||LA226_0==DIV||(LA226_0 >= DOT && LA226_0 <= DOTDOT)||LA226_0==EQUAL||LA226_0==EXIT||LA226_0==EXPORT||LA226_0==FALSE||LA226_0==FINAL||(LA226_0 >= FUNCTION && LA226_0 <= GE)||LA226_0==GT||(LA226_0 >= IMPLEMENTS && LA226_0 <= INHERITED)||LA226_0==IS||LA226_0==LBRACK||LA226_0==LE||(LA226_0 >= LOCAL && LA226_0 <= NAME)||LA226_0==NIL||(LA226_0 >= NOT && LA226_0 <= OBJECT)||(LA226_0 >= OPERATOR && LA226_0 <= OUT)||(LA226_0 >= PLUS && LA226_0 <= POINTER2)||LA226_0==PROCEDURE||LA226_0==QuotedString||(LA226_0 >= READ && LA226_0 <= READONLY)||(LA226_0 >= REFERENCE && LA226_0 <= REGISTER)||LA226_0==REMOVE||(LA226_0 >= SHL && LA226_0 <= STATIC)||(LA226_0 >= STORED && LA226_0 <= STRING)||LA226_0==TRUE||(LA226_0 >= TkHexNum && LA226_0 <= TkIntNum)||LA226_0==TkRealNum||LA226_0==UNSAFE||LA226_0==VARIANT||LA226_0==WRITE||(LA226_0 >= XOR && LA226_0 <= 199)) ) {
				alt226=1;
			}
			else if ( (LA226_0==RBRACK) ) {
				int LA226_2 = input.LA(2);
				if ( (synpred313_Delphi()) ) {
					alt226=1;
				}
			}
			switch (alt226) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:37: expression ( ( ',' | '..' ) expression )*
					{
					pushFollow(FOLLOW_expression_in_setSection13464);
					expression652=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression652.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:48: ( ( ',' | '..' ) expression )*
					loop225:
					while (true) {
						int alt225=2;
						int LA225_0 = input.LA(1);
						if ( (LA225_0==COMMA||LA225_0==DOTDOT) ) {
							alt225=1;
						}

						switch (alt225) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:49: ( ',' | '..' ) expression
							{
							set653=input.LT(1);
							if ( input.LA(1)==COMMA||input.LA(1)==DOTDOT ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set653));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							pushFollow(FOLLOW_expression_in_setSection13475);
							expression654=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression654.getTree());

							}
							break;

						default :
							break loop225;
						}
					}

					}
					break;

			}

			char_literal655=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_setSection13481); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal655_tree = (Object)adaptor.create(char_literal655);
			adaptor.addChild(root_0, char_literal655_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 122, setSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "setSection"


	public static class designator_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "designator"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:1: designator : ( 'inherited' )? ( ( namespacedQualifiedIdent | typeId ) )? ( designatorItem )* ;
	public final DelphiParser.designator_return designator() throws RecognitionException {
		DelphiParser.designator_return retval = new DelphiParser.designator_return();
		retval.start = input.LT(1);
		int designator_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal656=null;
		ParserRuleReturnScope namespacedQualifiedIdent657 =null;
		ParserRuleReturnScope typeId658 =null;
		ParserRuleReturnScope designatorItem659 =null;

		Object string_literal656_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:30: ( ( 'inherited' )? ( ( namespacedQualifiedIdent | typeId ) )? ( designatorItem )* )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:32: ( 'inherited' )? ( ( namespacedQualifiedIdent | typeId ) )? ( designatorItem )*
			{
			root_0 = (Object)adaptor.nil();


			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:32: ( 'inherited' )?
			int alt227=2;
			int LA227_0 = input.LA(1);
			if ( (LA227_0==INHERITED) ) {
				int LA227_1 = input.LA(2);
				if ( (synpred314_Delphi()) ) {
					alt227=1;
				}
			}
			switch (alt227) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:33: 'inherited'
					{
					string_literal656=(Token)match(input,INHERITED,FOLLOW_INHERITED_in_designator13538); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal656_tree = (Object)adaptor.create(string_literal656);
					adaptor.addChild(root_0, string_literal656_tree);
					}

					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:47: ( ( namespacedQualifiedIdent | typeId ) )?
			int alt229=2;
			switch ( input.LA(1) ) {
				case TkIdentifier:
					{
					int LA229_1 = input.LA(2);
					if ( (synpred316_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case 198:
					{
					int LA229_2 = input.LA(2);
					if ( (synpred316_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case NAME:
					{
					int LA229_3 = input.LA(2);
					if ( (synpred316_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case READ:
					{
					int LA229_5 = input.LA(2);
					if ( (synpred316_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case WRITE:
					{
					int LA229_6 = input.LA(2);
					if ( (synpred316_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case READONLY:
					{
					int LA229_7 = input.LA(2);
					if ( (synpred316_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case STORED:
					{
					int LA229_8 = input.LA(2);
					if ( (synpred316_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case DEFAULT:
					{
					int LA229_9 = input.LA(2);
					if ( (synpred316_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case IMPLEMENTS:
					{
					int LA229_10 = input.LA(2);
					if ( (synpred316_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case REGISTER:
					{
					int LA229_11 = input.LA(2);
					if ( (synpred316_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case EXPORT:
					{
					int LA229_12 = input.LA(2);
					if ( (synpred316_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case LOCAL:
					{
					int LA229_13 = input.LA(2);
					if ( (synpred316_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case UNSAFE:
					{
					int LA229_14 = input.LA(2);
					if ( (synpred316_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case INDEX:
					{
					int LA229_15 = input.LA(2);
					if ( (synpred316_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case STRICT:
					{
					int LA229_16 = input.LA(2);
					if ( (synpred316_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case OPERATOR:
					{
					int LA229_17 = input.LA(2);
					if ( (synpred316_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case AT:
					{
					int LA229_18 = input.LA(2);
					if ( (synpred316_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case EXIT:
				case FINAL:
				case MESSAGE:
				case OBJECT:
				case OUT:
				case POINTER:
				case REFERENCE:
				case REMOVE:
				case STATIC:
				case STRING:
				case VARIANT:
					{
					int LA229_19 = input.LA(2);
					if ( (synpred316_Delphi()) ) {
						alt229=1;
					}
					}
					break;
			}
			switch (alt229) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:49: ( namespacedQualifiedIdent | typeId )
					{
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:49: ( namespacedQualifiedIdent | typeId )
					int alt228=2;
					switch ( input.LA(1) ) {
					case TkIdentifier:
						{
						int LA228_1 = input.LA(2);
						if ( (synpred315_Delphi()) ) {
							alt228=1;
						}
						else if ( (true) ) {
							alt228=2;
						}

						}
						break;
					case 198:
						{
						int LA228_2 = input.LA(2);
						if ( (LA228_2==TkIdentifier) ) {
							int LA228_6 = input.LA(3);
							if ( (synpred315_Delphi()) ) {
								alt228=1;
							}
							else if ( (true) ) {
								alt228=2;
							}

						}
						else if ( ((LA228_2 >= ABSOLUTE && LA228_2 <= ASSEMBLY)||LA228_2==AT||LA228_2==AUTOMATED||(LA228_2 >= BEGIN && LA228_2 <= CLASS)||(LA228_2 >= CONST && LA228_2 <= CONTINUE)||(LA228_2 >= DEFAULT && LA228_2 <= DO)||(LA228_2 >= DOWNTO && LA228_2 <= DYNAMIC)||(LA228_2 >= ELSE && LA228_2 <= END)||(LA228_2 >= EXCEPT && LA228_2 <= FUNCTION)||LA228_2==GOTO||LA228_2==HELPER||(LA228_2 >= IF && LA228_2 <= LABEL)||(LA228_2 >= LIBRARY && LA228_2 <= LOCAL)||LA228_2==MESSAGE||(LA228_2 >= MOD && LA228_2 <= NOT)||(LA228_2 >= OBJECT && LA228_2 <= PLATFORM)||LA228_2==POINTER||(LA228_2 >= PRIVATE && LA228_2 <= PUBLISHED)||LA228_2==RAISE||(LA228_2 >= READ && LA228_2 <= RESOURCESTRING)||(LA228_2 >= SAFECALL && LA228_2 <= SEALED)||(LA228_2 >= SET && LA228_2 <= SHR)||(LA228_2 >= STATIC && LA228_2 <= TYPE)||(LA228_2 >= UNIT && LA228_2 <= USES)||(LA228_2 >= VAR && LA228_2 <= WRITEONLY)||LA228_2==XOR) ) {
							int LA228_7 = input.LA(3);
							if ( (synpred315_Delphi()) ) {
								alt228=1;
							}
							else if ( (true) ) {
								alt228=2;
							}

						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 228, 2, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case ADD:
					case ANSISTRING:
					case AT:
					case BREAK:
					case CONTAINS:
					case CONTINUE:
					case DEFAULT:
					case EXIT:
					case EXPORT:
					case FINAL:
					case IMPLEMENTS:
					case INDEX:
					case LOCAL:
					case MESSAGE:
					case NAME:
					case OBJECT:
					case OPERATOR:
					case OUT:
					case POINTER:
					case READ:
					case READONLY:
					case REFERENCE:
					case REGISTER:
					case REMOVE:
					case STATIC:
					case STORED:
					case STRICT:
					case STRING:
					case UNSAFE:
					case VARIANT:
					case WRITE:
						{
						int LA228_3 = input.LA(2);
						if ( (synpred315_Delphi()) ) {
							alt228=1;
						}
						else if ( (true) ) {
							alt228=2;
						}

						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 228, 0, input);
						throw nvae;
					}
					switch (alt228) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:50: namespacedQualifiedIdent
							{
							pushFollow(FOLLOW_namespacedQualifiedIdent_in_designator13545);
							namespacedQualifiedIdent657=namespacedQualifiedIdent();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, namespacedQualifiedIdent657.getTree());

							}
							break;
						case 2 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:77: typeId
							{
							pushFollow(FOLLOW_typeId_in_designator13549);
							typeId658=typeId();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, typeId658.getTree());

							}
							break;

					}

					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:88: ( designatorItem )*
			loop230:
			while (true) {
				int alt230=2;
				alt230 = dfa230.predict(input);
				switch (alt230) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:89: designatorItem
					{
					pushFollow(FOLLOW_designatorItem_in_designator13556);
					designatorItem659=designatorItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designatorItem659.getTree());

					}
					break;

				default :
					break loop230;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 123, designator_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "designator"


	public static class designatorItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "designatorItem"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:492:1: designatorItem : ( '^' | ( '.' | '@' ) ident | ( '<' genericTypeIdent ( ',' genericTypeIdent )* '>' ) | '[' expressionList ']' | '(' ( expression ( colonConstruct )? ( ',' expression ( colonConstruct )? )* )? ')' -> '(' ( expression ( colonConstruct )? ( expression ( colonConstruct )? )* )? ')' );
	public final DelphiParser.designatorItem_return designatorItem() throws RecognitionException {
		DelphiParser.designatorItem_return retval = new DelphiParser.designatorItem_return();
		retval.start = input.LT(1);
		int designatorItem_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal660=null;
		Token set661=null;
		Token char_literal663=null;
		Token char_literal665=null;
		Token char_literal667=null;
		Token char_literal668=null;
		Token char_literal670=null;
		Token char_literal671=null;
		Token char_literal674=null;
		Token char_literal677=null;
		ParserRuleReturnScope ident662 =null;
		ParserRuleReturnScope genericTypeIdent664 =null;
		ParserRuleReturnScope genericTypeIdent666 =null;
		ParserRuleReturnScope expressionList669 =null;
		ParserRuleReturnScope expression672 =null;
		ParserRuleReturnScope colonConstruct673 =null;
		ParserRuleReturnScope expression675 =null;
		ParserRuleReturnScope colonConstruct676 =null;

		Object char_literal660_tree=null;
		Object set661_tree=null;
		Object char_literal663_tree=null;
		Object char_literal665_tree=null;
		Object char_literal667_tree=null;
		Object char_literal668_tree=null;
		Object char_literal670_tree=null;
		Object char_literal671_tree=null;
		Object char_literal674_tree=null;
		Object char_literal677_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_colonConstruct=new RewriteRuleSubtreeStream(adaptor,"rule colonConstruct");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:492:30: ( '^' | ( '.' | '@' ) ident | ( '<' genericTypeIdent ( ',' genericTypeIdent )* '>' ) | '[' expressionList ']' | '(' ( expression ( colonConstruct )? ( ',' expression ( colonConstruct )? )* )? ')' -> '(' ( expression ( colonConstruct )? ( expression ( colonConstruct )? )* )? ')' )
			int alt236=5;
			switch ( input.LA(1) ) {
			case POINTER2:
				{
				alt236=1;
				}
				break;
			case AT2:
			case DOT:
				{
				alt236=2;
				}
				break;
			case LT:
				{
				alt236=3;
				}
				break;
			case LBRACK:
				{
				alt236=4;
				}
				break;
			case LPAREN:
				{
				alt236=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 236, 0, input);
				throw nvae;
			}
			switch (alt236) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:492:32: '^'
					{
					root_0 = (Object)adaptor.nil();


					char_literal660=(Token)match(input,POINTER2,FOLLOW_POINTER2_in_designatorItem13609); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal660_tree = (Object)adaptor.create(char_literal660);
					adaptor.addChild(root_0, char_literal660_tree);
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:32: ( '.' | '@' ) ident
					{
					root_0 = (Object)adaptor.nil();


					set661=input.LT(1);
					if ( input.LA(1)==AT2||input.LA(1)==DOT ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set661));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					pushFollow(FOLLOW_ident_in_designatorItem13650);
					ident662=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident662.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:494:32: ( '<' genericTypeIdent ( ',' genericTypeIdent )* '>' )
					{
					root_0 = (Object)adaptor.nil();


					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:494:32: ( '<' genericTypeIdent ( ',' genericTypeIdent )* '>' )
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:494:33: '<' genericTypeIdent ( ',' genericTypeIdent )* '>'
					{
					char_literal663=(Token)match(input,LT,FOLLOW_LT_in_designatorItem13698); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal663_tree = (Object)adaptor.create(char_literal663);
					adaptor.addChild(root_0, char_literal663_tree);
					}

					pushFollow(FOLLOW_genericTypeIdent_in_designatorItem13700);
					genericTypeIdent664=genericTypeIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeIdent664.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:494:54: ( ',' genericTypeIdent )*
					loop231:
					while (true) {
						int alt231=2;
						int LA231_0 = input.LA(1);
						if ( (LA231_0==COMMA) ) {
							alt231=1;
						}

						switch (alt231) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:494:55: ',' genericTypeIdent
							{
							char_literal665=(Token)match(input,COMMA,FOLLOW_COMMA_in_designatorItem13703); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal665_tree = (Object)adaptor.create(char_literal665);
							adaptor.addChild(root_0, char_literal665_tree);
							}

							pushFollow(FOLLOW_genericTypeIdent_in_designatorItem13705);
							genericTypeIdent666=genericTypeIdent();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeIdent666.getTree());

							}
							break;

						default :
							break loop231;
						}
					}

					char_literal667=(Token)match(input,GT,FOLLOW_GT_in_designatorItem13709); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal667_tree = (Object)adaptor.create(char_literal667);
					adaptor.addChild(root_0, char_literal667_tree);
					}

					}

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:495:32: '[' expressionList ']'
					{
					root_0 = (Object)adaptor.nil();


					char_literal668=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_designatorItem13750); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal668_tree = (Object)adaptor.create(char_literal668);
					adaptor.addChild(root_0, char_literal668_tree);
					}

					pushFollow(FOLLOW_expressionList_in_designatorItem13752);
					expressionList669=expressionList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList669.getTree());

					char_literal670=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_designatorItem13754); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal670_tree = (Object)adaptor.create(char_literal670);
					adaptor.addChild(root_0, char_literal670_tree);
					}

					}
					break;
				case 5 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:32: '(' ( expression ( colonConstruct )? ( ',' expression ( colonConstruct )? )* )? ')'
					{
					char_literal671=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_designatorItem13787); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(char_literal671);

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:36: ( expression ( colonConstruct )? ( ',' expression ( colonConstruct )? )* )?
					int alt235=2;
					int LA235_0 = input.LA(1);
					if ( ((LA235_0 >= ADD && LA235_0 <= ANSISTRING)||LA235_0==AS||(LA235_0 >= AT && LA235_0 <= AT2)||LA235_0==BREAK||(LA235_0 >= COLON && LA235_0 <= COMMA)||(LA235_0 >= CONTAINS && LA235_0 <= ControlString)||LA235_0==DEFAULT||LA235_0==DIV||LA235_0==DOT||LA235_0==EQUAL||LA235_0==EXIT||LA235_0==EXPORT||LA235_0==FALSE||LA235_0==FINAL||(LA235_0 >= FUNCTION && LA235_0 <= GE)||LA235_0==GT||(LA235_0 >= IMPLEMENTS && LA235_0 <= INHERITED)||LA235_0==IS||LA235_0==LBRACK||LA235_0==LE||(LA235_0 >= LOCAL && LA235_0 <= NAME)||LA235_0==NIL||(LA235_0 >= NOT && LA235_0 <= OBJECT)||(LA235_0 >= OPERATOR && LA235_0 <= OUT)||(LA235_0 >= PLUS && LA235_0 <= POINTER2)||LA235_0==PROCEDURE||LA235_0==QuotedString||(LA235_0 >= READ && LA235_0 <= READONLY)||(LA235_0 >= REFERENCE && LA235_0 <= REGISTER)||LA235_0==REMOVE||(LA235_0 >= SHL && LA235_0 <= STATIC)||(LA235_0 >= STORED && LA235_0 <= STRING)||LA235_0==TRUE||(LA235_0 >= TkHexNum && LA235_0 <= TkIntNum)||LA235_0==TkRealNum||LA235_0==UNSAFE||LA235_0==VARIANT||LA235_0==WRITE||(LA235_0 >= XOR && LA235_0 <= 199)) ) {
						alt235=1;
					}
					else if ( (LA235_0==RPAREN) ) {
						int LA235_2 = input.LA(2);
						if ( (synpred327_Delphi()) ) {
							alt235=1;
						}
					}
					switch (alt235) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:37: expression ( colonConstruct )? ( ',' expression ( colonConstruct )? )*
							{
							pushFollow(FOLLOW_expression_in_designatorItem13790);
							expression672=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_expression.add(expression672.getTree());
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:48: ( colonConstruct )?
							int alt232=2;
							int LA232_0 = input.LA(1);
							if ( (LA232_0==COLON) ) {
								alt232=1;
							}
							switch (alt232) {
								case 1 :
									// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:49: colonConstruct
									{
									pushFollow(FOLLOW_colonConstruct_in_designatorItem13793);
									colonConstruct673=colonConstruct();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_colonConstruct.add(colonConstruct673.getTree());
									}
									break;

							}

							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:66: ( ',' expression ( colonConstruct )? )*
							loop234:
							while (true) {
								int alt234=2;
								int LA234_0 = input.LA(1);
								if ( (LA234_0==COMMA) ) {
									alt234=1;
								}

								switch (alt234) {
								case 1 :
									// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:67: ',' expression ( colonConstruct )?
									{
									char_literal674=(Token)match(input,COMMA,FOLLOW_COMMA_in_designatorItem13798); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_COMMA.add(char_literal674);

									pushFollow(FOLLOW_expression_in_designatorItem13800);
									expression675=expression();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_expression.add(expression675.getTree());
									// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:82: ( colonConstruct )?
									int alt233=2;
									int LA233_0 = input.LA(1);
									if ( (LA233_0==COLON) ) {
										alt233=1;
									}
									switch (alt233) {
										case 1 :
											// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:83: colonConstruct
											{
											pushFollow(FOLLOW_colonConstruct_in_designatorItem13803);
											colonConstruct676=colonConstruct();
											state._fsp--;
											if (state.failed) return retval;
											if ( state.backtracking==0 ) stream_colonConstruct.add(colonConstruct676.getTree());
											}
											break;

									}

									}
									break;

								default :
									break loop234;
								}
							}

							}
							break;

					}

					char_literal677=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_designatorItem13811); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(char_literal677);

					// AST REWRITE
					// elements: RPAREN, LPAREN, colonConstruct, expression, expression, colonConstruct
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 496:108: -> '(' ( expression ( colonConstruct )? ( expression ( colonConstruct )? )* )? ')'
					{
						adaptor.addChild(root_0, stream_LPAREN.nextNode());
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:115: ( expression ( colonConstruct )? ( expression ( colonConstruct )? )* )?
						if ( stream_expression.hasNext()||stream_expression.hasNext()||stream_colonConstruct.hasNext() ) {
							adaptor.addChild(root_0, stream_expression.nextTree());
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:127: ( colonConstruct )?
							if ( stream_colonConstruct.hasNext() ) {
								adaptor.addChild(root_0, stream_colonConstruct.nextTree());
							}
							stream_colonConstruct.reset();

							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:145: ( expression ( colonConstruct )? )*
							while ( stream_expression.hasNext() ) {
								adaptor.addChild(root_0, stream_expression.nextTree());
								// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:157: ( colonConstruct )?
								if ( stream_colonConstruct.hasNext() ) {
									adaptor.addChild(root_0, stream_colonConstruct.nextTree());
								}
								stream_colonConstruct.reset();

							}
							stream_expression.reset();

						}
						stream_expression.reset();
						stream_expression.reset();
						stream_colonConstruct.reset();

						adaptor.addChild(root_0, stream_RPAREN.nextNode());
					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 124, designatorItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "designatorItem"


	public static class expressionList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "expressionList"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:1: expressionList : expression ( ',' expression )* ;
	public final DelphiParser.expressionList_return expressionList() throws RecognitionException {
		DelphiParser.expressionList_return retval = new DelphiParser.expressionList_return();
		retval.start = input.LT(1);
		int expressionList_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal679=null;
		ParserRuleReturnScope expression678 =null;
		ParserRuleReturnScope expression680 =null;

		Object char_literal679_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:30: ( expression ( ',' expression )* )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:32: expression ( ',' expression )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_expression_in_expressionList13888);
			expression678=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression678.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:43: ( ',' expression )*
			loop237:
			while (true) {
				int alt237=2;
				int LA237_0 = input.LA(1);
				if ( (LA237_0==COMMA) ) {
					alt237=1;
				}

				switch (alt237) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:44: ',' expression
					{
					char_literal679=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList13891); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal679_tree = (Object)adaptor.create(char_literal679);
					adaptor.addChild(root_0, char_literal679_tree);
					}

					pushFollow(FOLLOW_expression_in_expressionList13893);
					expression680=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression680.getTree());

					}
					break;

				default :
					break loop237;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 125, expressionList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "expressionList"


	public static class colonConstruct_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "colonConstruct"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:500:1: colonConstruct : ':' expression ( ':' expression )? ;
	public final DelphiParser.colonConstruct_return colonConstruct() throws RecognitionException {
		DelphiParser.colonConstruct_return retval = new DelphiParser.colonConstruct_return();
		retval.start = input.LT(1);
		int colonConstruct_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal681=null;
		Token char_literal683=null;
		ParserRuleReturnScope expression682 =null;
		ParserRuleReturnScope expression684 =null;

		Object char_literal681_tree=null;
		Object char_literal683_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:500:30: ( ':' expression ( ':' expression )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:500:32: ':' expression ( ':' expression )?
			{
			root_0 = (Object)adaptor.nil();


			char_literal681=(Token)match(input,COLON,FOLLOW_COLON_in_colonConstruct13946); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal681_tree = (Object)adaptor.create(char_literal681);
			adaptor.addChild(root_0, char_literal681_tree);
			}

			pushFollow(FOLLOW_expression_in_colonConstruct13948);
			expression682=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression682.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:500:47: ( ':' expression )?
			int alt238=2;
			int LA238_0 = input.LA(1);
			if ( (LA238_0==COLON) ) {
				alt238=1;
			}
			switch (alt238) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:500:48: ':' expression
					{
					char_literal683=(Token)match(input,COLON,FOLLOW_COLON_in_colonConstruct13951); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal683_tree = (Object)adaptor.create(char_literal683);
					adaptor.addChild(root_0, char_literal683_tree);
					}

					pushFollow(FOLLOW_expression_in_colonConstruct13953);
					expression684=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression684.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 126, colonConstruct_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "colonConstruct"


	public static class operator_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "operator"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:503:1: operator : ( '+' | '-' | 'or' | 'xor' | '*' | '/' | 'div' | 'mod' | 'and' | 'shl' | 'shr' | 'as' );
	public final DelphiParser.operator_return operator() throws RecognitionException {
		DelphiParser.operator_return retval = new DelphiParser.operator_return();
		retval.start = input.LT(1);
		int operator_StartIndex = input.index();

		Object root_0 = null;

		Token set685=null;

		Object set685_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:503:30: ( '+' | '-' | 'or' | 'xor' | '*' | '/' | 'div' | 'mod' | 'and' | 'shl' | 'shr' | 'as' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set685=input.LT(1);
			if ( input.LA(1)==AND||input.LA(1)==AS||input.LA(1)==DIV||(input.LA(1) >= MINUS && input.LA(1) <= MOD)||input.LA(1)==OR||input.LA(1)==PLUS||(input.LA(1) >= SHL && input.LA(1) <= STAR)||input.LA(1)==XOR ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set685));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 127, operator_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "operator"


	public static class relOp_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "relOp"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:516:1: relOp : ( '<' | '>' | '<=' | '>=' | '<>' | '=' | 'in' | 'is' );
	public final DelphiParser.relOp_return relOp() throws RecognitionException {
		DelphiParser.relOp_return retval = new DelphiParser.relOp_return();
		retval.start = input.LT(1);
		int relOp_StartIndex = input.index();

		Object root_0 = null;

		Token set686=null;

		Object set686_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:516:30: ( '<' | '>' | '<=' | '>=' | '<>' | '=' | 'in' | 'is' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set686=input.LT(1);
			if ( input.LA(1)==EQUAL||input.LA(1)==GE||input.LA(1)==GT||input.LA(1)==IN||input.LA(1)==IS||input.LA(1)==LE||input.LA(1)==LT||input.LA(1)==NOT_EQUAL ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set686));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 128, relOp_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "relOp"


	public static class statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "statement"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:529:1: statement : ( ifStatement | caseStatement | repeatStatement | whileStatement | forStatement | withStatement | tryStatement | raiseStatement | assemblerStatement | compoundStatement | label ':' statement | simpleStatement );
	public final DelphiParser.statement_return statement() throws RecognitionException {
		DelphiParser.statement_return retval = new DelphiParser.statement_return();
		retval.start = input.LT(1);
		int statement_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal698=null;
		ParserRuleReturnScope ifStatement687 =null;
		ParserRuleReturnScope caseStatement688 =null;
		ParserRuleReturnScope repeatStatement689 =null;
		ParserRuleReturnScope whileStatement690 =null;
		ParserRuleReturnScope forStatement691 =null;
		ParserRuleReturnScope withStatement692 =null;
		ParserRuleReturnScope tryStatement693 =null;
		ParserRuleReturnScope raiseStatement694 =null;
		ParserRuleReturnScope assemblerStatement695 =null;
		ParserRuleReturnScope compoundStatement696 =null;
		ParserRuleReturnScope label697 =null;
		ParserRuleReturnScope statement699 =null;
		ParserRuleReturnScope simpleStatement700 =null;

		Object char_literal698_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:529:30: ( ifStatement | caseStatement | repeatStatement | whileStatement | forStatement | withStatement | tryStatement | raiseStatement | assemblerStatement | compoundStatement | label ':' statement | simpleStatement )
			int alt239=12;
			switch ( input.LA(1) ) {
			case IF:
				{
				alt239=1;
				}
				break;
			case CASE:
				{
				alt239=2;
				}
				break;
			case REPEAT:
				{
				alt239=3;
				}
				break;
			case WHILE:
				{
				alt239=4;
				}
				break;
			case FOR:
				{
				alt239=5;
				}
				break;
			case WITH:
				{
				alt239=6;
				}
				break;
			case TRY:
				{
				alt239=7;
				}
				break;
			case RAISE:
				{
				alt239=8;
				}
				break;
			case ASM:
				{
				alt239=9;
				}
				break;
			case BEGIN:
				{
				alt239=10;
				}
				break;
			case TkIdentifier:
				{
				int LA239_11 = input.LA(2);
				if ( (LA239_11==COLON) ) {
					int LA239_19 = input.LA(3);
					if ( (synpred358_Delphi()) ) {
						alt239=11;
					}
					else if ( (true) ) {
						alt239=12;
					}

				}
				else if ( (LA239_11==EOF||(LA239_11 >= ADD && LA239_11 <= ANSISTRING)||LA239_11==AS||(LA239_11 >= ASSIGN && LA239_11 <= AT2)||LA239_11==BREAK||LA239_11==COMMA||(LA239_11 >= CONTAINS && LA239_11 <= ControlString)||LA239_11==DEFAULT||LA239_11==DIV||(LA239_11 >= DOT && LA239_11 <= DOTDOT)||(LA239_11 >= ELSE && LA239_11 <= EXIT)||LA239_11==EXPORT||LA239_11==FALSE||(LA239_11 >= FINAL && LA239_11 <= FINALLY)||(LA239_11 >= FUNCTION && LA239_11 <= GE)||LA239_11==GT||(LA239_11 >= IMPLEMENTS && LA239_11 <= INHERITED)||LA239_11==IS||LA239_11==LBRACK||LA239_11==LE||(LA239_11 >= LOCAL && LA239_11 <= NAME)||LA239_11==NIL||(LA239_11 >= NOT && LA239_11 <= OBJECT)||(LA239_11 >= ON && LA239_11 <= OUT)||(LA239_11 >= PLUS && LA239_11 <= POINTER2)||LA239_11==PROCEDURE||LA239_11==QuotedString||(LA239_11 >= READ && LA239_11 <= READONLY)||(LA239_11 >= REFERENCE && LA239_11 <= REGISTER)||LA239_11==REMOVE||LA239_11==SEMI||(LA239_11 >= SHL && LA239_11 <= STATIC)||(LA239_11 >= STORED && LA239_11 <= STRING)||LA239_11==TRUE||(LA239_11 >= TkHexNum && LA239_11 <= TkIntNum)||LA239_11==TkRealNum||(LA239_11 >= UNSAFE && LA239_11 <= UNTIL)||LA239_11==VARIANT||LA239_11==WRITE||(LA239_11 >= XOR && LA239_11 <= 199)) ) {
					alt239=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 239, 11, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TkIntNum:
				{
				int LA239_12 = input.LA(2);
				if ( (LA239_12==COLON) ) {
					int LA239_20 = input.LA(3);
					if ( (synpred358_Delphi()) ) {
						alt239=11;
					}
					else if ( (true) ) {
						alt239=12;
					}

				}
				else if ( (LA239_12==AND||LA239_12==AS||LA239_12==COMMA||LA239_12==DIV||LA239_12==DOTDOT||LA239_12==EQUAL||LA239_12==GE||LA239_12==GT||LA239_12==IN||LA239_12==IS||LA239_12==LE||LA239_12==LT||(LA239_12 >= MINUS && LA239_12 <= MOD)||LA239_12==NOT_EQUAL||LA239_12==OR||LA239_12==PLUS||(LA239_12 >= SHL && LA239_12 <= STAR)||LA239_12==XOR) ) {
					alt239=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 239, 12, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TkHexNum:
				{
				int LA239_13 = input.LA(2);
				if ( (LA239_13==COLON) ) {
					int LA239_21 = input.LA(3);
					if ( (synpred358_Delphi()) ) {
						alt239=11;
					}
					else if ( (true) ) {
						alt239=12;
					}

				}
				else if ( (LA239_13==AND||LA239_13==AS||LA239_13==COMMA||LA239_13==DIV||LA239_13==DOTDOT||LA239_13==EQUAL||LA239_13==GE||LA239_13==GT||LA239_13==IN||LA239_13==IS||LA239_13==LE||LA239_13==LT||(LA239_13 >= MINUS && LA239_13 <= MOD)||LA239_13==NOT_EQUAL||LA239_13==OR||LA239_13==PLUS||(LA239_13 >= SHL && LA239_13 <= STAR)||LA239_13==XOR) ) {
					alt239=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 239, 13, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EXIT:
				{
				int LA239_14 = input.LA(2);
				if ( (LA239_14==COLON) ) {
					int LA239_22 = input.LA(3);
					if ( (synpred358_Delphi()) ) {
						alt239=11;
					}
					else if ( (true) ) {
						alt239=12;
					}

				}
				else if ( (LA239_14==EOF||(LA239_14 >= ADD && LA239_14 <= ANSISTRING)||LA239_14==AS||(LA239_14 >= ASSIGN && LA239_14 <= AT2)||LA239_14==BREAK||LA239_14==COMMA||(LA239_14 >= CONTAINS && LA239_14 <= ControlString)||LA239_14==DEFAULT||LA239_14==DIV||(LA239_14 >= DOT && LA239_14 <= DOTDOT)||(LA239_14 >= ELSE && LA239_14 <= EXIT)||LA239_14==EXPORT||LA239_14==FALSE||(LA239_14 >= FINAL && LA239_14 <= FINALLY)||(LA239_14 >= FUNCTION && LA239_14 <= GE)||LA239_14==GT||(LA239_14 >= IMPLEMENTS && LA239_14 <= INHERITED)||LA239_14==IS||LA239_14==LBRACK||LA239_14==LE||(LA239_14 >= LOCAL && LA239_14 <= NAME)||LA239_14==NIL||(LA239_14 >= NOT && LA239_14 <= OBJECT)||(LA239_14 >= ON && LA239_14 <= OUT)||(LA239_14 >= PLUS && LA239_14 <= POINTER2)||LA239_14==PROCEDURE||LA239_14==QuotedString||(LA239_14 >= READ && LA239_14 <= READONLY)||(LA239_14 >= REFERENCE && LA239_14 <= REGISTER)||LA239_14==REMOVE||LA239_14==SEMI||(LA239_14 >= SHL && LA239_14 <= STATIC)||(LA239_14 >= STORED && LA239_14 <= STRING)||LA239_14==TRUE||(LA239_14 >= TkHexNum && LA239_14 <= TkIntNum)||LA239_14==TkRealNum||(LA239_14 >= UNSAFE && LA239_14 <= UNTIL)||LA239_14==VARIANT||LA239_14==WRITE||(LA239_14 >= XOR && LA239_14 <= 199)) ) {
					alt239=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 239, 14, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EOF:
			case AND:
			case AS:
			case ASSIGN:
			case AT2:
			case COLON:
			case COMMA:
			case ControlString:
			case DIV:
			case DOT:
			case DOTDOT:
			case ELSE:
			case END:
			case EQUAL:
			case EXCEPT:
			case FALSE:
			case FINALIZATION:
			case FINALLY:
			case FUNCTION:
			case GE:
			case GOTO:
			case GT:
			case IN:
			case INHERITED:
			case IS:
			case LBRACK:
			case LE:
			case LPAREN:
			case LT:
			case MINUS:
			case MOD:
			case NIL:
			case NOT:
			case NOT_EQUAL:
			case ON:
			case OR:
			case PLUS:
			case POINTER2:
			case PROCEDURE:
			case QuotedString:
			case SEMI:
			case SHL:
			case SHR:
			case SLASH:
			case STAR:
			case TRUE:
			case TkRealNum:
			case UNTIL:
			case XOR:
			case 198:
			case 199:
				{
				alt239=12;
				}
				break;
			case BREAK:
				{
				int LA239_16 = input.LA(2);
				if ( (LA239_16==COLON) ) {
					int LA239_23 = input.LA(3);
					if ( (synpred358_Delphi()) ) {
						alt239=11;
					}
					else if ( (true) ) {
						alt239=12;
					}

				}
				else if ( (LA239_16==EOF||(LA239_16 >= ADD && LA239_16 <= ANSISTRING)||LA239_16==AS||(LA239_16 >= ASSIGN && LA239_16 <= AT2)||LA239_16==BREAK||LA239_16==COMMA||(LA239_16 >= CONTAINS && LA239_16 <= ControlString)||LA239_16==DEFAULT||LA239_16==DIV||(LA239_16 >= DOT && LA239_16 <= DOTDOT)||(LA239_16 >= ELSE && LA239_16 <= EXIT)||LA239_16==EXPORT||LA239_16==FALSE||(LA239_16 >= FINAL && LA239_16 <= FINALLY)||(LA239_16 >= FUNCTION && LA239_16 <= GE)||LA239_16==GT||(LA239_16 >= IMPLEMENTS && LA239_16 <= INHERITED)||LA239_16==IS||LA239_16==LBRACK||LA239_16==LE||(LA239_16 >= LOCAL && LA239_16 <= NAME)||LA239_16==NIL||(LA239_16 >= NOT && LA239_16 <= OBJECT)||(LA239_16 >= ON && LA239_16 <= OUT)||(LA239_16 >= PLUS && LA239_16 <= POINTER2)||LA239_16==PROCEDURE||LA239_16==QuotedString||(LA239_16 >= READ && LA239_16 <= READONLY)||(LA239_16 >= REFERENCE && LA239_16 <= REGISTER)||LA239_16==REMOVE||LA239_16==SEMI||(LA239_16 >= SHL && LA239_16 <= STATIC)||(LA239_16 >= STORED && LA239_16 <= STRING)||LA239_16==TRUE||(LA239_16 >= TkHexNum && LA239_16 <= TkIntNum)||LA239_16==TkRealNum||(LA239_16 >= UNSAFE && LA239_16 <= UNTIL)||LA239_16==VARIANT||LA239_16==WRITE||(LA239_16 >= XOR && LA239_16 <= 199)) ) {
					alt239=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 239, 16, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CONTINUE:
				{
				int LA239_17 = input.LA(2);
				if ( (LA239_17==COLON) ) {
					int LA239_24 = input.LA(3);
					if ( (synpred358_Delphi()) ) {
						alt239=11;
					}
					else if ( (true) ) {
						alt239=12;
					}

				}
				else if ( (LA239_17==EOF||(LA239_17 >= ADD && LA239_17 <= ANSISTRING)||LA239_17==AS||(LA239_17 >= ASSIGN && LA239_17 <= AT2)||LA239_17==BREAK||LA239_17==COMMA||(LA239_17 >= CONTAINS && LA239_17 <= ControlString)||LA239_17==DEFAULT||LA239_17==DIV||(LA239_17 >= DOT && LA239_17 <= DOTDOT)||(LA239_17 >= ELSE && LA239_17 <= EXIT)||LA239_17==EXPORT||LA239_17==FALSE||(LA239_17 >= FINAL && LA239_17 <= FINALLY)||(LA239_17 >= FUNCTION && LA239_17 <= GE)||LA239_17==GT||(LA239_17 >= IMPLEMENTS && LA239_17 <= INHERITED)||LA239_17==IS||LA239_17==LBRACK||LA239_17==LE||(LA239_17 >= LOCAL && LA239_17 <= NAME)||LA239_17==NIL||(LA239_17 >= NOT && LA239_17 <= OBJECT)||(LA239_17 >= ON && LA239_17 <= OUT)||(LA239_17 >= PLUS && LA239_17 <= POINTER2)||LA239_17==PROCEDURE||LA239_17==QuotedString||(LA239_17 >= READ && LA239_17 <= READONLY)||(LA239_17 >= REFERENCE && LA239_17 <= REGISTER)||LA239_17==REMOVE||LA239_17==SEMI||(LA239_17 >= SHL && LA239_17 <= STATIC)||(LA239_17 >= STORED && LA239_17 <= STRING)||LA239_17==TRUE||(LA239_17 >= TkHexNum && LA239_17 <= TkIntNum)||LA239_17==TkRealNum||(LA239_17 >= UNSAFE && LA239_17 <= UNTIL)||LA239_17==VARIANT||LA239_17==WRITE||(LA239_17 >= XOR && LA239_17 <= 199)) ) {
					alt239=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 239, 17, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ADD:
			case ANSISTRING:
			case AT:
			case CONTAINS:
			case DEFAULT:
			case EXPORT:
			case FINAL:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STATIC:
			case STORED:
			case STRICT:
			case STRING:
			case UNSAFE:
			case VARIANT:
			case WRITE:
				{
				int LA239_18 = input.LA(2);
				if ( (LA239_18==COLON) ) {
					int LA239_25 = input.LA(3);
					if ( (synpred358_Delphi()) ) {
						alt239=11;
					}
					else if ( (true) ) {
						alt239=12;
					}

				}
				else if ( (LA239_18==EOF||(LA239_18 >= ADD && LA239_18 <= ANSISTRING)||LA239_18==AS||(LA239_18 >= ASSIGN && LA239_18 <= AT2)||LA239_18==BREAK||LA239_18==COMMA||(LA239_18 >= CONTAINS && LA239_18 <= ControlString)||LA239_18==DEFAULT||LA239_18==DIV||(LA239_18 >= DOT && LA239_18 <= DOTDOT)||(LA239_18 >= ELSE && LA239_18 <= EXIT)||LA239_18==EXPORT||LA239_18==FALSE||(LA239_18 >= FINAL && LA239_18 <= FINALLY)||(LA239_18 >= FUNCTION && LA239_18 <= GE)||LA239_18==GT||(LA239_18 >= IMPLEMENTS && LA239_18 <= INHERITED)||LA239_18==IS||LA239_18==LBRACK||LA239_18==LE||(LA239_18 >= LOCAL && LA239_18 <= NAME)||LA239_18==NIL||(LA239_18 >= NOT && LA239_18 <= OBJECT)||(LA239_18 >= ON && LA239_18 <= OUT)||(LA239_18 >= PLUS && LA239_18 <= POINTER2)||LA239_18==PROCEDURE||LA239_18==QuotedString||(LA239_18 >= READ && LA239_18 <= READONLY)||(LA239_18 >= REFERENCE && LA239_18 <= REGISTER)||LA239_18==REMOVE||LA239_18==SEMI||(LA239_18 >= SHL && LA239_18 <= STATIC)||(LA239_18 >= STORED && LA239_18 <= STRING)||LA239_18==TRUE||(LA239_18 >= TkHexNum && LA239_18 <= TkIntNum)||LA239_18==TkRealNum||(LA239_18 >= UNSAFE && LA239_18 <= UNTIL)||LA239_18==VARIANT||LA239_18==WRITE||(LA239_18 >= XOR && LA239_18 <= 199)) ) {
					alt239=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 239, 18, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 239, 0, input);
				throw nvae;
			}
			switch (alt239) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:529:32: ifStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_ifStatement_in_statement14727);
					ifStatement687=ifStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ifStatement687.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:530:32: caseStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_caseStatement_in_statement14760);
					caseStatement688=caseStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, caseStatement688.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:531:32: repeatStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_repeatStatement_in_statement14793);
					repeatStatement689=repeatStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, repeatStatement689.getTree());

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:532:32: whileStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_whileStatement_in_statement14826);
					whileStatement690=whileStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, whileStatement690.getTree());

					}
					break;
				case 5 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:533:32: forStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_forStatement_in_statement14859);
					forStatement691=forStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, forStatement691.getTree());

					}
					break;
				case 6 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:534:32: withStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_withStatement_in_statement14892);
					withStatement692=withStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, withStatement692.getTree());

					}
					break;
				case 7 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:535:32: tryStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_tryStatement_in_statement14925);
					tryStatement693=tryStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, tryStatement693.getTree());

					}
					break;
				case 8 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:536:32: raiseStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_raiseStatement_in_statement14958);
					raiseStatement694=raiseStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, raiseStatement694.getTree());

					}
					break;
				case 9 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:537:32: assemblerStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_assemblerStatement_in_statement14991);
					assemblerStatement695=assemblerStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, assemblerStatement695.getTree());

					}
					break;
				case 10 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:538:32: compoundStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_compoundStatement_in_statement15024);
					compoundStatement696=compoundStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, compoundStatement696.getTree());

					}
					break;
				case 11 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:539:32: label ':' statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_label_in_statement15057);
					label697=label();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, label697.getTree());

					char_literal698=(Token)match(input,COLON,FOLLOW_COLON_in_statement15059); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal698_tree = (Object)adaptor.create(char_literal698);
					adaptor.addChild(root_0, char_literal698_tree);
					}

					pushFollow(FOLLOW_statement_in_statement15061);
					statement699=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statement699.getTree());

					}
					break;
				case 12 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:540:32: simpleStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_simpleStatement_in_statement15094);
					simpleStatement700=simpleStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleStatement700.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 129, statement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "statement"


	public static class ifStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "ifStatement"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:542:1: ifStatement : 'if' expression 'then' statement ( 'else' statement )? ;
	public final DelphiParser.ifStatement_return ifStatement() throws RecognitionException {
		DelphiParser.ifStatement_return retval = new DelphiParser.ifStatement_return();
		retval.start = input.LT(1);
		int ifStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal701=null;
		Token string_literal703=null;
		Token string_literal705=null;
		ParserRuleReturnScope expression702 =null;
		ParserRuleReturnScope statement704 =null;
		ParserRuleReturnScope statement706 =null;

		Object string_literal701_tree=null;
		Object string_literal703_tree=null;
		Object string_literal705_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:542:30: ( 'if' expression 'then' statement ( 'else' statement )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:542:32: 'if' expression 'then' statement ( 'else' statement )?
			{
			root_0 = (Object)adaptor.nil();


			string_literal701=(Token)match(input,IF,FOLLOW_IF_in_ifStatement15148); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal701_tree = (Object)adaptor.create(string_literal701);
			adaptor.addChild(root_0, string_literal701_tree);
			}

			pushFollow(FOLLOW_expression_in_ifStatement15150);
			expression702=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression702.getTree());

			string_literal703=(Token)match(input,THEN,FOLLOW_THEN_in_ifStatement15152); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal703_tree = (Object)adaptor.create(string_literal703);
			adaptor.addChild(root_0, string_literal703_tree);
			}

			pushFollow(FOLLOW_statement_in_ifStatement15154);
			statement704=statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, statement704.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:542:65: ( 'else' statement )?
			int alt240=2;
			int LA240_0 = input.LA(1);
			if ( (LA240_0==ELSE) ) {
				int LA240_1 = input.LA(2);
				if ( (synpred359_Delphi()) ) {
					alt240=1;
				}
			}
			switch (alt240) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:542:66: 'else' statement
					{
					string_literal705=(Token)match(input,ELSE,FOLLOW_ELSE_in_ifStatement15157); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal705_tree = (Object)adaptor.create(string_literal705);
					adaptor.addChild(root_0, string_literal705_tree);
					}

					pushFollow(FOLLOW_statement_in_ifStatement15159);
					statement706=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statement706.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 130, ifStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "ifStatement"


	public static class caseStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "caseStatement"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:544:1: caseStatement : 'case' expression 'of' ( caseItem )* ( 'else' statementList ( ';' )? )? 'end' ;
	public final DelphiParser.caseStatement_return caseStatement() throws RecognitionException {
		DelphiParser.caseStatement_return retval = new DelphiParser.caseStatement_return();
		retval.start = input.LT(1);
		int caseStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal707=null;
		Token string_literal709=null;
		Token string_literal711=null;
		Token char_literal713=null;
		Token string_literal714=null;
		ParserRuleReturnScope expression708 =null;
		ParserRuleReturnScope caseItem710 =null;
		ParserRuleReturnScope statementList712 =null;

		Object string_literal707_tree=null;
		Object string_literal709_tree=null;
		Object string_literal711_tree=null;
		Object char_literal713_tree=null;
		Object string_literal714_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:544:30: ( 'case' expression 'of' ( caseItem )* ( 'else' statementList ( ';' )? )? 'end' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:544:32: 'case' expression 'of' ( caseItem )* ( 'else' statementList ( ';' )? )? 'end'
			{
			root_0 = (Object)adaptor.nil();


			string_literal707=(Token)match(input,CASE,FOLLOW_CASE_in_caseStatement15213); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal707_tree = (Object)adaptor.create(string_literal707);
			adaptor.addChild(root_0, string_literal707_tree);
			}

			pushFollow(FOLLOW_expression_in_caseStatement15215);
			expression708=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression708.getTree());

			string_literal709=(Token)match(input,OF,FOLLOW_OF_in_caseStatement15217); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal709_tree = (Object)adaptor.create(string_literal709);
			adaptor.addChild(root_0, string_literal709_tree);
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:544:55: ( caseItem )*
			loop241:
			while (true) {
				int alt241=2;
				int LA241_0 = input.LA(1);
				if ( ((LA241_0 >= ADD && LA241_0 <= ANSISTRING)||LA241_0==AS||(LA241_0 >= AT && LA241_0 <= AT2)||LA241_0==BREAK||(LA241_0 >= COLON && LA241_0 <= COMMA)||(LA241_0 >= CONTAINS && LA241_0 <= ControlString)||LA241_0==DEFAULT||LA241_0==DIV||(LA241_0 >= DOT && LA241_0 <= DOTDOT)||LA241_0==EQUAL||LA241_0==EXIT||LA241_0==EXPORT||LA241_0==FALSE||LA241_0==FINAL||(LA241_0 >= FUNCTION && LA241_0 <= GE)||LA241_0==GT||(LA241_0 >= IMPLEMENTS && LA241_0 <= INHERITED)||LA241_0==IS||LA241_0==LBRACK||LA241_0==LE||(LA241_0 >= LOCAL && LA241_0 <= NAME)||LA241_0==NIL||(LA241_0 >= NOT && LA241_0 <= OBJECT)||(LA241_0 >= OPERATOR && LA241_0 <= OUT)||(LA241_0 >= PLUS && LA241_0 <= POINTER2)||LA241_0==PROCEDURE||LA241_0==QuotedString||(LA241_0 >= READ && LA241_0 <= READONLY)||(LA241_0 >= REFERENCE && LA241_0 <= REGISTER)||LA241_0==REMOVE||(LA241_0 >= SHL && LA241_0 <= STATIC)||(LA241_0 >= STORED && LA241_0 <= STRING)||LA241_0==TRUE||(LA241_0 >= TkHexNum && LA241_0 <= TkIntNum)||LA241_0==TkRealNum||LA241_0==UNSAFE||LA241_0==VARIANT||LA241_0==WRITE||(LA241_0 >= XOR && LA241_0 <= 199)) ) {
					alt241=1;
				}

				switch (alt241) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:544:56: caseItem
					{
					pushFollow(FOLLOW_caseItem_in_caseStatement15220);
					caseItem710=caseItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, caseItem710.getTree());

					}
					break;

				default :
					break loop241;
				}
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:544:67: ( 'else' statementList ( ';' )? )?
			int alt243=2;
			int LA243_0 = input.LA(1);
			if ( (LA243_0==ELSE) ) {
				alt243=1;
			}
			switch (alt243) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:544:68: 'else' statementList ( ';' )?
					{
					string_literal711=(Token)match(input,ELSE,FOLLOW_ELSE_in_caseStatement15225); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal711_tree = (Object)adaptor.create(string_literal711);
					adaptor.addChild(root_0, string_literal711_tree);
					}

					pushFollow(FOLLOW_statementList_in_caseStatement15227);
					statementList712=statementList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList712.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:544:89: ( ';' )?
					int alt242=2;
					int LA242_0 = input.LA(1);
					if ( (LA242_0==SEMI) ) {
						alt242=1;
					}
					switch (alt242) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:544:90: ';'
							{
							char_literal713=(Token)match(input,SEMI,FOLLOW_SEMI_in_caseStatement15230); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal713_tree = (Object)adaptor.create(char_literal713);
							adaptor.addChild(root_0, char_literal713_tree);
							}

							}
							break;

					}

					}
					break;

			}

			string_literal714=(Token)match(input,END,FOLLOW_END_in_caseStatement15236); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal714_tree = (Object)adaptor.create(string_literal714);
			adaptor.addChild(root_0, string_literal714_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 131, caseStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "caseStatement"


	public static class caseItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "caseItem"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:546:1: caseItem : caseLabel ( ',' caseLabel )* ':' statement ( ';' )? ;
	public final DelphiParser.caseItem_return caseItem() throws RecognitionException {
		DelphiParser.caseItem_return retval = new DelphiParser.caseItem_return();
		retval.start = input.LT(1);
		int caseItem_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal716=null;
		Token char_literal718=null;
		Token char_literal720=null;
		ParserRuleReturnScope caseLabel715 =null;
		ParserRuleReturnScope caseLabel717 =null;
		ParserRuleReturnScope statement719 =null;

		Object char_literal716_tree=null;
		Object char_literal718_tree=null;
		Object char_literal720_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:546:30: ( caseLabel ( ',' caseLabel )* ':' statement ( ';' )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:546:32: caseLabel ( ',' caseLabel )* ':' statement ( ';' )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_caseLabel_in_caseItem15293);
			caseLabel715=caseLabel();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, caseLabel715.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:546:42: ( ',' caseLabel )*
			loop244:
			while (true) {
				int alt244=2;
				int LA244_0 = input.LA(1);
				if ( (LA244_0==COMMA) ) {
					alt244=1;
				}

				switch (alt244) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:546:43: ',' caseLabel
					{
					char_literal716=(Token)match(input,COMMA,FOLLOW_COMMA_in_caseItem15296); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal716_tree = (Object)adaptor.create(char_literal716);
					adaptor.addChild(root_0, char_literal716_tree);
					}

					pushFollow(FOLLOW_caseLabel_in_caseItem15298);
					caseLabel717=caseLabel();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, caseLabel717.getTree());

					}
					break;

				default :
					break loop244;
				}
			}

			char_literal718=(Token)match(input,COLON,FOLLOW_COLON_in_caseItem15302); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal718_tree = (Object)adaptor.create(char_literal718);
			adaptor.addChild(root_0, char_literal718_tree);
			}

			pushFollow(FOLLOW_statement_in_caseItem15304);
			statement719=statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, statement719.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:546:73: ( ';' )?
			int alt245=2;
			int LA245_0 = input.LA(1);
			if ( (LA245_0==SEMI) ) {
				alt245=1;
			}
			switch (alt245) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:546:74: ';'
					{
					char_literal720=(Token)match(input,SEMI,FOLLOW_SEMI_in_caseItem15307); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal720_tree = (Object)adaptor.create(char_literal720);
					adaptor.addChild(root_0, char_literal720_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 132, caseItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "caseItem"


	public static class caseLabel_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "caseLabel"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:548:1: caseLabel : expression ( '..' expression )? ;
	public final DelphiParser.caseLabel_return caseLabel() throws RecognitionException {
		DelphiParser.caseLabel_return retval = new DelphiParser.caseLabel_return();
		retval.start = input.LT(1);
		int caseLabel_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal722=null;
		ParserRuleReturnScope expression721 =null;
		ParserRuleReturnScope expression723 =null;

		Object string_literal722_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:548:30: ( expression ( '..' expression )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:548:32: expression ( '..' expression )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_expression_in_caseLabel15366);
			expression721=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression721.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:548:43: ( '..' expression )?
			int alt246=2;
			int LA246_0 = input.LA(1);
			if ( (LA246_0==DOTDOT) ) {
				alt246=1;
			}
			switch (alt246) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:548:44: '..' expression
					{
					string_literal722=(Token)match(input,DOTDOT,FOLLOW_DOTDOT_in_caseLabel15369); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal722_tree = (Object)adaptor.create(string_literal722);
					adaptor.addChild(root_0, string_literal722_tree);
					}

					pushFollow(FOLLOW_expression_in_caseLabel15371);
					expression723=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression723.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 133, caseLabel_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "caseLabel"


	public static class repeatStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "repeatStatement"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:550:1: repeatStatement : 'repeat' ( statementList )? 'until' expression ;
	public final DelphiParser.repeatStatement_return repeatStatement() throws RecognitionException {
		DelphiParser.repeatStatement_return retval = new DelphiParser.repeatStatement_return();
		retval.start = input.LT(1);
		int repeatStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal724=null;
		Token string_literal726=null;
		ParserRuleReturnScope statementList725 =null;
		ParserRuleReturnScope expression727 =null;

		Object string_literal724_tree=null;
		Object string_literal726_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:550:30: ( 'repeat' ( statementList )? 'until' expression )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:550:32: 'repeat' ( statementList )? 'until' expression
			{
			root_0 = (Object)adaptor.nil();


			string_literal724=(Token)match(input,REPEAT,FOLLOW_REPEAT_in_repeatStatement15423); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal724_tree = (Object)adaptor.create(string_literal724);
			adaptor.addChild(root_0, string_literal724_tree);
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:550:41: ( statementList )?
			int alt247=2;
			int LA247_0 = input.LA(1);
			if ( (LA247_0==ADD||LA247_0==ANSISTRING||LA247_0==ASM||(LA247_0 >= ASSIGN && LA247_0 <= AT2)||(LA247_0 >= BEGIN && LA247_0 <= CASE)||(LA247_0 >= CONTAINS && LA247_0 <= CONTINUE)||LA247_0==DEFAULT||LA247_0==DOT||LA247_0==EXIT||LA247_0==EXPORT||LA247_0==FINAL||LA247_0==FOR||LA247_0==GOTO||LA247_0==IF||LA247_0==IMPLEMENTS||(LA247_0 >= INDEX && LA247_0 <= INHERITED)||LA247_0==LBRACK||(LA247_0 >= LOCAL && LA247_0 <= MESSAGE)||LA247_0==NAME||LA247_0==OBJECT||LA247_0==OPERATOR||LA247_0==OUT||(LA247_0 >= POINTER && LA247_0 <= POINTER2)||LA247_0==RAISE||(LA247_0 >= READ && LA247_0 <= READONLY)||(LA247_0 >= REFERENCE && LA247_0 <= REGISTER)||(LA247_0 >= REMOVE && LA247_0 <= REPEAT)||LA247_0==SEMI||LA247_0==STATIC||(LA247_0 >= STORED && LA247_0 <= STRING)||LA247_0==TRY||(LA247_0 >= TkHexNum && LA247_0 <= TkIntNum)||LA247_0==UNSAFE||LA247_0==VARIANT||(LA247_0 >= WHILE && LA247_0 <= WRITE)||LA247_0==198) ) {
				alt247=1;
			}
			else if ( (LA247_0==UNTIL) ) {
				int LA247_2 = input.LA(2);
				if ( (synpred366_Delphi()) ) {
					alt247=1;
				}
			}
			switch (alt247) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:550:42: statementList
					{
					pushFollow(FOLLOW_statementList_in_repeatStatement15426);
					statementList725=statementList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList725.getTree());

					}
					break;

			}

			string_literal726=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_repeatStatement15430); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal726_tree = (Object)adaptor.create(string_literal726);
			adaptor.addChild(root_0, string_literal726_tree);
			}

			pushFollow(FOLLOW_expression_in_repeatStatement15432);
			expression727=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression727.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 134, repeatStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "repeatStatement"


	public static class whileStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "whileStatement"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:552:1: whileStatement : 'while' expression 'do' statement ;
	public final DelphiParser.whileStatement_return whileStatement() throws RecognitionException {
		DelphiParser.whileStatement_return retval = new DelphiParser.whileStatement_return();
		retval.start = input.LT(1);
		int whileStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal728=null;
		Token string_literal730=null;
		ParserRuleReturnScope expression729 =null;
		ParserRuleReturnScope statement731 =null;

		Object string_literal728_tree=null;
		Object string_literal730_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:552:30: ( 'while' expression 'do' statement )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:552:32: 'while' expression 'do' statement
			{
			root_0 = (Object)adaptor.nil();


			string_literal728=(Token)match(input,WHILE,FOLLOW_WHILE_in_whileStatement15483); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal728_tree = (Object)adaptor.create(string_literal728);
			adaptor.addChild(root_0, string_literal728_tree);
			}

			pushFollow(FOLLOW_expression_in_whileStatement15485);
			expression729=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression729.getTree());

			string_literal730=(Token)match(input,DO,FOLLOW_DO_in_whileStatement15487); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal730_tree = (Object)adaptor.create(string_literal730);
			adaptor.addChild(root_0, string_literal730_tree);
			}

			pushFollow(FOLLOW_statement_in_whileStatement15489);
			statement731=statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, statement731.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 135, whileStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "whileStatement"


	public static class forStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "forStatement"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:554:1: forStatement : ( 'for' designator ':=' expression 'to' expression 'do' statement | 'for' designator ':=' expression 'downto' expression 'do' statement | 'for' designator 'in' expression 'do' statement );
	public final DelphiParser.forStatement_return forStatement() throws RecognitionException {
		DelphiParser.forStatement_return retval = new DelphiParser.forStatement_return();
		retval.start = input.LT(1);
		int forStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal732=null;
		Token string_literal734=null;
		Token string_literal736=null;
		Token string_literal738=null;
		Token string_literal740=null;
		Token string_literal742=null;
		Token string_literal744=null;
		Token string_literal746=null;
		Token string_literal748=null;
		Token string_literal750=null;
		Token string_literal752=null;
		ParserRuleReturnScope designator733 =null;
		ParserRuleReturnScope expression735 =null;
		ParserRuleReturnScope expression737 =null;
		ParserRuleReturnScope statement739 =null;
		ParserRuleReturnScope designator741 =null;
		ParserRuleReturnScope expression743 =null;
		ParserRuleReturnScope expression745 =null;
		ParserRuleReturnScope statement747 =null;
		ParserRuleReturnScope designator749 =null;
		ParserRuleReturnScope expression751 =null;
		ParserRuleReturnScope statement753 =null;

		Object string_literal732_tree=null;
		Object string_literal734_tree=null;
		Object string_literal736_tree=null;
		Object string_literal738_tree=null;
		Object string_literal740_tree=null;
		Object string_literal742_tree=null;
		Object string_literal744_tree=null;
		Object string_literal746_tree=null;
		Object string_literal748_tree=null;
		Object string_literal750_tree=null;
		Object string_literal752_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:554:30: ( 'for' designator ':=' expression 'to' expression 'do' statement | 'for' designator ':=' expression 'downto' expression 'do' statement | 'for' designator 'in' expression 'do' statement )
			int alt248=3;
			int LA248_0 = input.LA(1);
			if ( (LA248_0==FOR) ) {
				int LA248_1 = input.LA(2);
				if ( (synpred367_Delphi()) ) {
					alt248=1;
				}
				else if ( (synpred368_Delphi()) ) {
					alt248=2;
				}
				else if ( (true) ) {
					alt248=3;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 248, 0, input);
				throw nvae;
			}

			switch (alt248) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:554:32: 'for' designator ':=' expression 'to' expression 'do' statement
					{
					root_0 = (Object)adaptor.nil();


					string_literal732=(Token)match(input,FOR,FOLLOW_FOR_in_forStatement15542); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal732_tree = (Object)adaptor.create(string_literal732);
					adaptor.addChild(root_0, string_literal732_tree);
					}

					pushFollow(FOLLOW_designator_in_forStatement15544);
					designator733=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator733.getTree());

					string_literal734=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_forStatement15546); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal734_tree = (Object)adaptor.create(string_literal734);
					adaptor.addChild(root_0, string_literal734_tree);
					}

					pushFollow(FOLLOW_expression_in_forStatement15548);
					expression735=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression735.getTree());

					string_literal736=(Token)match(input,TO,FOLLOW_TO_in_forStatement15550); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal736_tree = (Object)adaptor.create(string_literal736);
					adaptor.addChild(root_0, string_literal736_tree);
					}

					pushFollow(FOLLOW_expression_in_forStatement15552);
					expression737=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression737.getTree());

					string_literal738=(Token)match(input,DO,FOLLOW_DO_in_forStatement15554); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal738_tree = (Object)adaptor.create(string_literal738);
					adaptor.addChild(root_0, string_literal738_tree);
					}

					pushFollow(FOLLOW_statement_in_forStatement15556);
					statement739=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statement739.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:555:32: 'for' designator ':=' expression 'downto' expression 'do' statement
					{
					root_0 = (Object)adaptor.nil();


					string_literal740=(Token)match(input,FOR,FOLLOW_FOR_in_forStatement15589); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal740_tree = (Object)adaptor.create(string_literal740);
					adaptor.addChild(root_0, string_literal740_tree);
					}

					pushFollow(FOLLOW_designator_in_forStatement15591);
					designator741=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator741.getTree());

					string_literal742=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_forStatement15593); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal742_tree = (Object)adaptor.create(string_literal742);
					adaptor.addChild(root_0, string_literal742_tree);
					}

					pushFollow(FOLLOW_expression_in_forStatement15595);
					expression743=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression743.getTree());

					string_literal744=(Token)match(input,DOWNTO,FOLLOW_DOWNTO_in_forStatement15597); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal744_tree = (Object)adaptor.create(string_literal744);
					adaptor.addChild(root_0, string_literal744_tree);
					}

					pushFollow(FOLLOW_expression_in_forStatement15599);
					expression745=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression745.getTree());

					string_literal746=(Token)match(input,DO,FOLLOW_DO_in_forStatement15601); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal746_tree = (Object)adaptor.create(string_literal746);
					adaptor.addChild(root_0, string_literal746_tree);
					}

					pushFollow(FOLLOW_statement_in_forStatement15603);
					statement747=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statement747.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:556:32: 'for' designator 'in' expression 'do' statement
					{
					root_0 = (Object)adaptor.nil();


					string_literal748=(Token)match(input,FOR,FOLLOW_FOR_in_forStatement15636); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal748_tree = (Object)adaptor.create(string_literal748);
					adaptor.addChild(root_0, string_literal748_tree);
					}

					pushFollow(FOLLOW_designator_in_forStatement15638);
					designator749=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator749.getTree());

					string_literal750=(Token)match(input,IN,FOLLOW_IN_in_forStatement15640); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal750_tree = (Object)adaptor.create(string_literal750);
					adaptor.addChild(root_0, string_literal750_tree);
					}

					pushFollow(FOLLOW_expression_in_forStatement15642);
					expression751=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression751.getTree());

					string_literal752=(Token)match(input,DO,FOLLOW_DO_in_forStatement15644); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal752_tree = (Object)adaptor.create(string_literal752);
					adaptor.addChild(root_0, string_literal752_tree);
					}

					pushFollow(FOLLOW_statement_in_forStatement15646);
					statement753=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statement753.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 136, forStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "forStatement"


	public static class withStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "withStatement"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:558:1: withStatement : 'with' withItemList 'do' statement ;
	public final DelphiParser.withStatement_return withStatement() throws RecognitionException {
		DelphiParser.withStatement_return retval = new DelphiParser.withStatement_return();
		retval.start = input.LT(1);
		int withStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal754=null;
		Token string_literal756=null;
		ParserRuleReturnScope withItemList755 =null;
		ParserRuleReturnScope statement757 =null;

		Object string_literal754_tree=null;
		Object string_literal756_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:558:30: ( 'with' withItemList 'do' statement )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:558:32: 'with' withItemList 'do' statement
			{
			root_0 = (Object)adaptor.nil();


			string_literal754=(Token)match(input,WITH,FOLLOW_WITH_in_withStatement15698); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal754_tree = (Object)adaptor.create(string_literal754);
			adaptor.addChild(root_0, string_literal754_tree);
			}

			pushFollow(FOLLOW_withItemList_in_withStatement15700);
			withItemList755=withItemList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, withItemList755.getTree());

			string_literal756=(Token)match(input,DO,FOLLOW_DO_in_withStatement15702); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal756_tree = (Object)adaptor.create(string_literal756);
			adaptor.addChild(root_0, string_literal756_tree);
			}

			pushFollow(FOLLOW_statement_in_withStatement15704);
			statement757=statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, statement757.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 137, withStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "withStatement"


	public static class withItemList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "withItemList"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:560:1: withItemList : withItem ( ',' withItem )* ;
	public final DelphiParser.withItemList_return withItemList() throws RecognitionException {
		DelphiParser.withItemList_return retval = new DelphiParser.withItemList_return();
		retval.start = input.LT(1);
		int withItemList_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal759=null;
		ParserRuleReturnScope withItem758 =null;
		ParserRuleReturnScope withItem760 =null;

		Object char_literal759_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:560:30: ( withItem ( ',' withItem )* )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:560:32: withItem ( ',' withItem )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_withItem_in_withItemList15757);
			withItem758=withItem();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, withItem758.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:560:41: ( ',' withItem )*
			loop249:
			while (true) {
				int alt249=2;
				int LA249_0 = input.LA(1);
				if ( (LA249_0==COMMA) ) {
					alt249=1;
				}

				switch (alt249) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:560:42: ',' withItem
					{
					char_literal759=(Token)match(input,COMMA,FOLLOW_COMMA_in_withItemList15760); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal759_tree = (Object)adaptor.create(char_literal759);
					adaptor.addChild(root_0, char_literal759_tree);
					}

					pushFollow(FOLLOW_withItem_in_withItemList15762);
					withItem760=withItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, withItem760.getTree());

					}
					break;

				default :
					break loop249;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 138, withItemList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "withItemList"


	public static class withItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "withItem"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:562:1: withItem : designator ( 'as' designator )? ;
	public final DelphiParser.withItem_return withItem() throws RecognitionException {
		DelphiParser.withItem_return retval = new DelphiParser.withItem_return();
		retval.start = input.LT(1);
		int withItem_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal762=null;
		ParserRuleReturnScope designator761 =null;
		ParserRuleReturnScope designator763 =null;

		Object string_literal762_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:562:30: ( designator ( 'as' designator )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:562:32: designator ( 'as' designator )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_designator_in_withItem15821);
			designator761=designator();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, designator761.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:562:43: ( 'as' designator )?
			int alt250=2;
			int LA250_0 = input.LA(1);
			if ( (LA250_0==AS) ) {
				alt250=1;
			}
			switch (alt250) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:562:44: 'as' designator
					{
					string_literal762=(Token)match(input,AS,FOLLOW_AS_in_withItem15824); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal762_tree = (Object)adaptor.create(string_literal762);
					adaptor.addChild(root_0, string_literal762_tree);
					}

					pushFollow(FOLLOW_designator_in_withItem15826);
					designator763=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator763.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 139, withItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "withItem"


	public static class compoundStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "compoundStatement"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:564:1: compoundStatement : 'begin' ( statementList )? 'end' -> ^( 'begin' ( statementList )? 'end' ) ;
	public final DelphiParser.compoundStatement_return compoundStatement() throws RecognitionException {
		DelphiParser.compoundStatement_return retval = new DelphiParser.compoundStatement_return();
		retval.start = input.LT(1);
		int compoundStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal764=null;
		Token string_literal766=null;
		ParserRuleReturnScope statementList765 =null;

		Object string_literal764_tree=null;
		Object string_literal766_tree=null;
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleTokenStream stream_BEGIN=new RewriteRuleTokenStream(adaptor,"token BEGIN");
		RewriteRuleSubtreeStream stream_statementList=new RewriteRuleSubtreeStream(adaptor,"rule statementList");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:564:30: ( 'begin' ( statementList )? 'end' -> ^( 'begin' ( statementList )? 'end' ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:564:32: 'begin' ( statementList )? 'end'
			{
			string_literal764=(Token)match(input,BEGIN,FOLLOW_BEGIN_in_compoundStatement15876); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_BEGIN.add(string_literal764);

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:564:40: ( statementList )?
			int alt251=2;
			int LA251_0 = input.LA(1);
			if ( (LA251_0==ADD||LA251_0==ANSISTRING||LA251_0==ASM||(LA251_0 >= ASSIGN && LA251_0 <= AT2)||(LA251_0 >= BEGIN && LA251_0 <= CASE)||(LA251_0 >= CONTAINS && LA251_0 <= CONTINUE)||LA251_0==DEFAULT||LA251_0==DOT||LA251_0==EXIT||LA251_0==EXPORT||LA251_0==FINAL||LA251_0==FOR||LA251_0==GOTO||LA251_0==IF||LA251_0==IMPLEMENTS||(LA251_0 >= INDEX && LA251_0 <= INHERITED)||LA251_0==LBRACK||(LA251_0 >= LOCAL && LA251_0 <= MESSAGE)||LA251_0==NAME||LA251_0==OBJECT||LA251_0==OPERATOR||LA251_0==OUT||(LA251_0 >= POINTER && LA251_0 <= POINTER2)||LA251_0==RAISE||(LA251_0 >= READ && LA251_0 <= READONLY)||(LA251_0 >= REFERENCE && LA251_0 <= REGISTER)||(LA251_0 >= REMOVE && LA251_0 <= REPEAT)||LA251_0==SEMI||LA251_0==STATIC||(LA251_0 >= STORED && LA251_0 <= STRING)||LA251_0==TRY||(LA251_0 >= TkHexNum && LA251_0 <= TkIntNum)||LA251_0==UNSAFE||LA251_0==VARIANT||(LA251_0 >= WHILE && LA251_0 <= WRITE)||LA251_0==198) ) {
				alt251=1;
			}
			else if ( (LA251_0==END) ) {
				int LA251_2 = input.LA(2);
				if ( (synpred371_Delphi()) ) {
					alt251=1;
				}
			}
			switch (alt251) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:564:41: statementList
					{
					pushFollow(FOLLOW_statementList_in_compoundStatement15879);
					statementList765=statementList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_statementList.add(statementList765.getTree());
					}
					break;

			}

			string_literal766=(Token)match(input,END,FOLLOW_END_in_compoundStatement15883); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_END.add(string_literal766);

			// AST REWRITE
			// elements: statementList, BEGIN, END
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 564:63: -> ^( 'begin' ( statementList )? 'end' )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:564:66: ^( 'begin' ( statementList )? 'end' )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_BEGIN.nextNode(), root_1);
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:564:76: ( statementList )?
				if ( stream_statementList.hasNext() ) {
					adaptor.addChild(root_1, stream_statementList.nextTree());
				}
				stream_statementList.reset();

				adaptor.addChild(root_1, stream_END.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 140, compoundStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "compoundStatement"


	public static class statementList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "statementList"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:566:1: statementList : ( statement )? ( ';' ( statement )? )* ;
	public final DelphiParser.statementList_return statementList() throws RecognitionException {
		DelphiParser.statementList_return retval = new DelphiParser.statementList_return();
		retval.start = input.LT(1);
		int statementList_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal768=null;
		ParserRuleReturnScope statement767 =null;
		ParserRuleReturnScope statement769 =null;

		Object char_literal768_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:566:30: ( ( statement )? ( ';' ( statement )? )* )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:566:32: ( statement )? ( ';' ( statement )? )*
			{
			root_0 = (Object)adaptor.nil();


			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:566:32: ( statement )?
			int alt252=2;
			switch ( input.LA(1) ) {
				case ADD:
				case ANSISTRING:
				case ASM:
				case ASSIGN:
				case AT:
				case AT2:
				case BEGIN:
				case BREAK:
				case CASE:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DOT:
				case EXIT:
				case EXPORT:
				case FINAL:
				case FOR:
				case GOTO:
				case IF:
				case IMPLEMENTS:
				case INDEX:
				case INHERITED:
				case LBRACK:
				case LOCAL:
				case LPAREN:
				case LT:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case POINTER2:
				case RAISE:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case REPEAT:
				case STATIC:
				case STORED:
				case STRICT:
				case STRING:
				case TRY:
				case TkHexNum:
				case TkIdentifier:
				case TkIntNum:
				case UNSAFE:
				case VARIANT:
				case WHILE:
				case WITH:
				case WRITE:
				case 198:
					{
					alt252=1;
					}
					break;
				case SEMI:
					{
					int LA252_2 = input.LA(2);
					if ( (synpred372_Delphi()) ) {
						alt252=1;
					}
					}
					break;
				case FINALIZATION:
					{
					int LA252_3 = input.LA(2);
					if ( (synpred372_Delphi()) ) {
						alt252=1;
					}
					}
					break;
				case END:
					{
					int LA252_4 = input.LA(2);
					if ( (synpred372_Delphi()) ) {
						alt252=1;
					}
					}
					break;
				case EOF:
					{
					int LA252_5 = input.LA(2);
					if ( (synpred372_Delphi()) ) {
						alt252=1;
					}
					}
					break;
				case UNTIL:
					{
					int LA252_6 = input.LA(2);
					if ( (synpred372_Delphi()) ) {
						alt252=1;
					}
					}
					break;
				case EXCEPT:
					{
					int LA252_7 = input.LA(2);
					if ( (synpred372_Delphi()) ) {
						alt252=1;
					}
					}
					break;
				case FINALLY:
					{
					int LA252_8 = input.LA(2);
					if ( (synpred372_Delphi()) ) {
						alt252=1;
					}
					}
					break;
			}
			switch (alt252) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:566:33: statement
					{
					pushFollow(FOLLOW_statement_in_statementList15949);
					statement767=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statement767.getTree());

					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:566:45: ( ';' ( statement )? )*
			loop254:
			while (true) {
				int alt254=2;
				int LA254_0 = input.LA(1);
				if ( (LA254_0==SEMI) ) {
					int LA254_2 = input.LA(2);
					if ( (synpred374_Delphi()) ) {
						alt254=1;
					}

				}

				switch (alt254) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:566:46: ';' ( statement )?
					{
					char_literal768=(Token)match(input,SEMI,FOLLOW_SEMI_in_statementList15954); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal768_tree = (Object)adaptor.create(char_literal768);
					adaptor.addChild(root_0, char_literal768_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:566:50: ( statement )?
					int alt253=2;
					switch ( input.LA(1) ) {
						case ADD:
						case ANSISTRING:
						case ASM:
						case ASSIGN:
						case AT:
						case AT2:
						case BEGIN:
						case BREAK:
						case CASE:
						case CONTAINS:
						case CONTINUE:
						case DEFAULT:
						case DOT:
						case EXIT:
						case EXPORT:
						case FINAL:
						case FOR:
						case GOTO:
						case IF:
						case IMPLEMENTS:
						case INDEX:
						case INHERITED:
						case LBRACK:
						case LOCAL:
						case LPAREN:
						case LT:
						case MESSAGE:
						case NAME:
						case OBJECT:
						case OPERATOR:
						case OUT:
						case POINTER:
						case POINTER2:
						case RAISE:
						case READ:
						case READONLY:
						case REFERENCE:
						case REGISTER:
						case REMOVE:
						case REPEAT:
						case STATIC:
						case STORED:
						case STRICT:
						case STRING:
						case TRY:
						case TkHexNum:
						case TkIdentifier:
						case TkIntNum:
						case UNSAFE:
						case VARIANT:
						case WHILE:
						case WITH:
						case WRITE:
						case 198:
							{
							alt253=1;
							}
							break;
						case FINALIZATION:
							{
							int LA253_2 = input.LA(2);
							if ( (synpred373_Delphi()) ) {
								alt253=1;
							}
							}
							break;
						case END:
							{
							int LA253_3 = input.LA(2);
							if ( (synpred373_Delphi()) ) {
								alt253=1;
							}
							}
							break;
						case EOF:
							{
							int LA253_4 = input.LA(2);
							if ( (synpred373_Delphi()) ) {
								alt253=1;
							}
							}
							break;
						case SEMI:
							{
							int LA253_5 = input.LA(2);
							if ( (synpred373_Delphi()) ) {
								alt253=1;
							}
							}
							break;
						case UNTIL:
							{
							int LA253_6 = input.LA(2);
							if ( (synpred373_Delphi()) ) {
								alt253=1;
							}
							}
							break;
						case EXCEPT:
							{
							int LA253_7 = input.LA(2);
							if ( (synpred373_Delphi()) ) {
								alt253=1;
							}
							}
							break;
						case FINALLY:
							{
							int LA253_8 = input.LA(2);
							if ( (synpred373_Delphi()) ) {
								alt253=1;
							}
							}
							break;
					}
					switch (alt253) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:566:51: statement
							{
							pushFollow(FOLLOW_statement_in_statementList15957);
							statement769=statement();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, statement769.getTree());

							}
							break;

					}

					}
					break;

				default :
					break loop254;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 141, statementList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "statementList"


	public static class simpleStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "simpleStatement"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:568:1: simpleStatement : ( designator ':=' expression | designator | gotoStatement );
	public final DelphiParser.simpleStatement_return simpleStatement() throws RecognitionException {
		DelphiParser.simpleStatement_return retval = new DelphiParser.simpleStatement_return();
		retval.start = input.LT(1);
		int simpleStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal771=null;
		ParserRuleReturnScope designator770 =null;
		ParserRuleReturnScope expression772 =null;
		ParserRuleReturnScope designator773 =null;
		ParserRuleReturnScope gotoStatement774 =null;

		Object string_literal771_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:568:30: ( designator ':=' expression | designator | gotoStatement )
			int alt255=3;
			switch ( input.LA(1) ) {
			case INHERITED:
				{
				int LA255_1 = input.LA(2);
				if ( (synpred375_Delphi()) ) {
					alt255=1;
				}
				else if ( (synpred376_Delphi()) ) {
					alt255=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 255, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TkIdentifier:
				{
				int LA255_2 = input.LA(2);
				if ( (synpred375_Delphi()) ) {
					alt255=1;
				}
				else if ( (synpred376_Delphi()) ) {
					alt255=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 255, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case 198:
				{
				int LA255_3 = input.LA(2);
				if ( (synpred375_Delphi()) ) {
					alt255=1;
				}
				else if ( (synpred376_Delphi()) ) {
					alt255=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 255, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EXIT:
				{
				int LA255_4 = input.LA(2);
				if ( (synpred375_Delphi()) ) {
					alt255=1;
				}
				else if ( (synpred376_Delphi()) ) {
					alt255=2;
				}
				else if ( (true) ) {
					alt255=3;
				}

				}
				break;
			case POINTER2:
				{
				int LA255_5 = input.LA(2);
				if ( (synpred375_Delphi()) ) {
					alt255=1;
				}
				else if ( (synpred376_Delphi()) ) {
					alt255=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 255, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT2:
				{
				int LA255_6 = input.LA(2);
				if ( (synpred375_Delphi()) ) {
					alt255=1;
				}
				else if ( (synpred376_Delphi()) ) {
					alt255=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 255, 6, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LT:
				{
				int LA255_7 = input.LA(2);
				if ( (synpred375_Delphi()) ) {
					alt255=1;
				}
				else if ( (synpred376_Delphi()) ) {
					alt255=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 255, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LBRACK:
				{
				int LA255_8 = input.LA(2);
				if ( (synpred375_Delphi()) ) {
					alt255=1;
				}
				else if ( (synpred376_Delphi()) ) {
					alt255=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 255, 8, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LPAREN:
				{
				int LA255_9 = input.LA(2);
				if ( (synpred375_Delphi()) ) {
					alt255=1;
				}
				else if ( (synpred376_Delphi()) ) {
					alt255=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 255, 9, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ASSIGN:
				{
				alt255=1;
				}
				break;
			case EOF:
			case AND:
			case AS:
			case COLON:
			case COMMA:
			case ControlString:
			case DIV:
			case DOTDOT:
			case ELSE:
			case END:
			case EQUAL:
			case EXCEPT:
			case FALSE:
			case FINALIZATION:
			case FINALLY:
			case FUNCTION:
			case GE:
			case GT:
			case IN:
			case IS:
			case LE:
			case MINUS:
			case MOD:
			case NIL:
			case NOT:
			case NOT_EQUAL:
			case ON:
			case OR:
			case PLUS:
			case PROCEDURE:
			case QuotedString:
			case SEMI:
			case SHL:
			case SHR:
			case SLASH:
			case STAR:
			case TRUE:
			case TkHexNum:
			case TkIntNum:
			case TkRealNum:
			case UNTIL:
			case XOR:
			case 199:
				{
				alt255=2;
				}
				break;
			case DOT:
				{
				int LA255_17 = input.LA(2);
				if ( (synpred375_Delphi()) ) {
					alt255=1;
				}
				else if ( (synpred376_Delphi()) ) {
					alt255=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 255, 17, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case GOTO:
				{
				alt255=3;
				}
				break;
			case BREAK:
				{
				int LA255_41 = input.LA(2);
				if ( (synpred375_Delphi()) ) {
					alt255=1;
				}
				else if ( (synpred376_Delphi()) ) {
					alt255=2;
				}
				else if ( (true) ) {
					alt255=3;
				}

				}
				break;
			case CONTINUE:
				{
				int LA255_42 = input.LA(2);
				if ( (synpred375_Delphi()) ) {
					alt255=1;
				}
				else if ( (synpred376_Delphi()) ) {
					alt255=2;
				}
				else if ( (true) ) {
					alt255=3;
				}

				}
				break;
			case ADD:
			case ANSISTRING:
			case AT:
			case CONTAINS:
			case DEFAULT:
			case EXPORT:
			case FINAL:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STATIC:
			case STORED:
			case STRICT:
			case STRING:
			case UNSAFE:
			case VARIANT:
			case WRITE:
				{
				int LA255_43 = input.LA(2);
				if ( (synpred375_Delphi()) ) {
					alt255=1;
				}
				else if ( (synpred376_Delphi()) ) {
					alt255=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 255, 43, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 255, 0, input);
				throw nvae;
			}
			switch (alt255) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:568:32: designator ':=' expression
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_designator_in_simpleStatement16011);
					designator770=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator770.getTree());

					string_literal771=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_simpleStatement16013); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal771_tree = (Object)adaptor.create(string_literal771);
					adaptor.addChild(root_0, string_literal771_tree);
					}

					pushFollow(FOLLOW_expression_in_simpleStatement16015);
					expression772=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression772.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:569:32: designator
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_designator_in_simpleStatement16048);
					designator773=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator773.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:570:32: gotoStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_gotoStatement_in_simpleStatement16082);
					gotoStatement774=gotoStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, gotoStatement774.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 142, simpleStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "simpleStatement"


	public static class gotoStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "gotoStatement"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:572:1: gotoStatement : ( 'goto' label | 'exit' ( '(' expression ')' )? | 'break' | 'continue' );
	public final DelphiParser.gotoStatement_return gotoStatement() throws RecognitionException {
		DelphiParser.gotoStatement_return retval = new DelphiParser.gotoStatement_return();
		retval.start = input.LT(1);
		int gotoStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal775=null;
		Token string_literal777=null;
		Token char_literal778=null;
		Token char_literal780=null;
		Token string_literal781=null;
		Token string_literal782=null;
		ParserRuleReturnScope label776 =null;
		ParserRuleReturnScope expression779 =null;

		Object string_literal775_tree=null;
		Object string_literal777_tree=null;
		Object char_literal778_tree=null;
		Object char_literal780_tree=null;
		Object string_literal781_tree=null;
		Object string_literal782_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:572:30: ( 'goto' label | 'exit' ( '(' expression ')' )? | 'break' | 'continue' )
			int alt257=4;
			switch ( input.LA(1) ) {
			case GOTO:
				{
				alt257=1;
				}
				break;
			case EXIT:
				{
				alt257=2;
				}
				break;
			case BREAK:
				{
				alt257=3;
				}
				break;
			case CONTINUE:
				{
				alt257=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 257, 0, input);
				throw nvae;
			}
			switch (alt257) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:572:32: 'goto' label
					{
					root_0 = (Object)adaptor.nil();


					string_literal775=(Token)match(input,GOTO,FOLLOW_GOTO_in_gotoStatement16134); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal775_tree = (Object)adaptor.create(string_literal775);
					adaptor.addChild(root_0, string_literal775_tree);
					}

					pushFollow(FOLLOW_label_in_gotoStatement16136);
					label776=label();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, label776.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:573:32: 'exit' ( '(' expression ')' )?
					{
					root_0 = (Object)adaptor.nil();


					string_literal777=(Token)match(input,EXIT,FOLLOW_EXIT_in_gotoStatement16169); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal777_tree = (Object)adaptor.create(string_literal777);
					adaptor.addChild(root_0, string_literal777_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:573:39: ( '(' expression ')' )?
					int alt256=2;
					int LA256_0 = input.LA(1);
					if ( (LA256_0==LPAREN) ) {
						int LA256_1 = input.LA(2);
						if ( (synpred378_Delphi()) ) {
							alt256=1;
						}
					}
					switch (alt256) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:573:40: '(' expression ')'
							{
							char_literal778=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_gotoStatement16172); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal778_tree = (Object)adaptor.create(char_literal778);
							adaptor.addChild(root_0, char_literal778_tree);
							}

							pushFollow(FOLLOW_expression_in_gotoStatement16174);
							expression779=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression779.getTree());

							char_literal780=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_gotoStatement16176); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal780_tree = (Object)adaptor.create(char_literal780);
							adaptor.addChild(root_0, char_literal780_tree);
							}

							}
							break;

					}

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:574:32: 'break'
					{
					root_0 = (Object)adaptor.nil();


					string_literal781=(Token)match(input,BREAK,FOLLOW_BREAK_in_gotoStatement16211); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal781_tree = (Object)adaptor.create(string_literal781);
					adaptor.addChild(root_0, string_literal781_tree);
					}

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:575:32: 'continue'
					{
					root_0 = (Object)adaptor.nil();


					string_literal782=(Token)match(input,CONTINUE,FOLLOW_CONTINUE_in_gotoStatement16244); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal782_tree = (Object)adaptor.create(string_literal782);
					adaptor.addChild(root_0, string_literal782_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 143, gotoStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "gotoStatement"


	public static class constExpression_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "constExpression"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:1: constExpression : ( '(' recordConstExpression ( ';' recordConstExpression )* ')' | '(' constExpression ( ',' constExpression )* ')' ( constExpression )? | expression );
	public final DelphiParser.constExpression_return constExpression() throws RecognitionException {
		DelphiParser.constExpression_return retval = new DelphiParser.constExpression_return();
		retval.start = input.LT(1);
		int constExpression_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal783=null;
		Token char_literal785=null;
		Token char_literal787=null;
		Token char_literal788=null;
		Token char_literal790=null;
		Token char_literal792=null;
		ParserRuleReturnScope recordConstExpression784 =null;
		ParserRuleReturnScope recordConstExpression786 =null;
		ParserRuleReturnScope constExpression789 =null;
		ParserRuleReturnScope constExpression791 =null;
		ParserRuleReturnScope constExpression793 =null;
		ParserRuleReturnScope expression794 =null;

		Object char_literal783_tree=null;
		Object char_literal785_tree=null;
		Object char_literal787_tree=null;
		Object char_literal788_tree=null;
		Object char_literal790_tree=null;
		Object char_literal792_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:30: ( '(' recordConstExpression ( ';' recordConstExpression )* ')' | '(' constExpression ( ',' constExpression )* ')' ( constExpression )? | expression )
			int alt261=3;
			alt261 = dfa261.predict(input);
			switch (alt261) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:32: '(' recordConstExpression ( ';' recordConstExpression )* ')'
					{
					root_0 = (Object)adaptor.nil();


					char_literal783=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_constExpression16297); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal783_tree = (Object)adaptor.create(char_literal783);
					adaptor.addChild(root_0, char_literal783_tree);
					}

					pushFollow(FOLLOW_recordConstExpression_in_constExpression16299);
					recordConstExpression784=recordConstExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, recordConstExpression784.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:58: ( ';' recordConstExpression )*
					loop258:
					while (true) {
						int alt258=2;
						int LA258_0 = input.LA(1);
						if ( (LA258_0==SEMI) ) {
							alt258=1;
						}

						switch (alt258) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:59: ';' recordConstExpression
							{
							char_literal785=(Token)match(input,SEMI,FOLLOW_SEMI_in_constExpression16302); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal785_tree = (Object)adaptor.create(char_literal785);
							adaptor.addChild(root_0, char_literal785_tree);
							}

							pushFollow(FOLLOW_recordConstExpression_in_constExpression16304);
							recordConstExpression786=recordConstExpression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, recordConstExpression786.getTree());

							}
							break;

						default :
							break loop258;
						}
					}

					char_literal787=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_constExpression16308); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal787_tree = (Object)adaptor.create(char_literal787);
					adaptor.addChild(root_0, char_literal787_tree);
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:581:32: '(' constExpression ( ',' constExpression )* ')' ( constExpression )?
					{
					root_0 = (Object)adaptor.nil();


					char_literal788=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_constExpression16342); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal788_tree = (Object)adaptor.create(char_literal788);
					adaptor.addChild(root_0, char_literal788_tree);
					}

					pushFollow(FOLLOW_constExpression_in_constExpression16344);
					constExpression789=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression789.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:581:52: ( ',' constExpression )*
					loop259:
					while (true) {
						int alt259=2;
						int LA259_0 = input.LA(1);
						if ( (LA259_0==COMMA) ) {
							alt259=1;
						}

						switch (alt259) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:581:53: ',' constExpression
							{
							char_literal790=(Token)match(input,COMMA,FOLLOW_COMMA_in_constExpression16347); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal790_tree = (Object)adaptor.create(char_literal790);
							adaptor.addChild(root_0, char_literal790_tree);
							}

							pushFollow(FOLLOW_constExpression_in_constExpression16349);
							constExpression791=constExpression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression791.getTree());

							}
							break;

						default :
							break loop259;
						}
					}

					char_literal792=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_constExpression16353); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal792_tree = (Object)adaptor.create(char_literal792);
					adaptor.addChild(root_0, char_literal792_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:581:79: ( constExpression )?
					int alt260=2;
					alt260 = dfa260.predict(input);
					switch (alt260) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:581:80: constExpression
							{
							pushFollow(FOLLOW_constExpression_in_constExpression16356);
							constExpression793=constExpression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression793.getTree());

							}
							break;

					}

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:582:32: expression
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_expression_in_constExpression16391);
					expression794=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression794.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 144, constExpression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "constExpression"


	public static class recordConstExpression_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordConstExpression"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:584:1: recordConstExpression : ident ':' constExpression ;
	public final DelphiParser.recordConstExpression_return recordConstExpression() throws RecognitionException {
		DelphiParser.recordConstExpression_return retval = new DelphiParser.recordConstExpression_return();
		retval.start = input.LT(1);
		int recordConstExpression_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal796=null;
		ParserRuleReturnScope ident795 =null;
		ParserRuleReturnScope constExpression797 =null;

		Object char_literal796_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:584:30: ( ident ':' constExpression )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:584:32: ident ':' constExpression
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_ident_in_recordConstExpression16435);
			ident795=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident795.getTree());

			char_literal796=(Token)match(input,COLON,FOLLOW_COLON_in_recordConstExpression16437); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal796_tree = (Object)adaptor.create(char_literal796);
			adaptor.addChild(root_0, char_literal796_tree);
			}

			pushFollow(FOLLOW_constExpression_in_recordConstExpression16439);
			constExpression797=constExpression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression797.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 145, recordConstExpression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordConstExpression"


	public static class tryStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "tryStatement"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:1: tryStatement : ( 'try' ( statementList )? 'except' handlerList 'end' | 'try' ( statementList )? 'finally' ( statementList )? 'end' );
	public final DelphiParser.tryStatement_return tryStatement() throws RecognitionException {
		DelphiParser.tryStatement_return retval = new DelphiParser.tryStatement_return();
		retval.start = input.LT(1);
		int tryStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal798=null;
		Token string_literal800=null;
		Token string_literal802=null;
		Token string_literal803=null;
		Token string_literal805=null;
		Token string_literal807=null;
		ParserRuleReturnScope statementList799 =null;
		ParserRuleReturnScope handlerList801 =null;
		ParserRuleReturnScope statementList804 =null;
		ParserRuleReturnScope statementList806 =null;

		Object string_literal798_tree=null;
		Object string_literal800_tree=null;
		Object string_literal802_tree=null;
		Object string_literal803_tree=null;
		Object string_literal805_tree=null;
		Object string_literal807_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 146) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:30: ( 'try' ( statementList )? 'except' handlerList 'end' | 'try' ( statementList )? 'finally' ( statementList )? 'end' )
			int alt265=2;
			int LA265_0 = input.LA(1);
			if ( (LA265_0==TRY) ) {
				int LA265_1 = input.LA(2);
				if ( (synpred387_Delphi()) ) {
					alt265=1;
				}
				else if ( (true) ) {
					alt265=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 265, 0, input);
				throw nvae;
			}

			switch (alt265) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:32: 'try' ( statementList )? 'except' handlerList 'end'
					{
					root_0 = (Object)adaptor.nil();


					string_literal798=(Token)match(input,TRY,FOLLOW_TRY_in_tryStatement16495); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal798_tree = (Object)adaptor.create(string_literal798);
					adaptor.addChild(root_0, string_literal798_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:38: ( statementList )?
					int alt262=2;
					int LA262_0 = input.LA(1);
					if ( (LA262_0==ADD||LA262_0==ANSISTRING||LA262_0==ASM||(LA262_0 >= ASSIGN && LA262_0 <= AT2)||(LA262_0 >= BEGIN && LA262_0 <= CASE)||(LA262_0 >= CONTAINS && LA262_0 <= CONTINUE)||LA262_0==DEFAULT||LA262_0==DOT||LA262_0==EXIT||LA262_0==EXPORT||LA262_0==FINAL||LA262_0==FOR||LA262_0==GOTO||LA262_0==IF||LA262_0==IMPLEMENTS||(LA262_0 >= INDEX && LA262_0 <= INHERITED)||LA262_0==LBRACK||(LA262_0 >= LOCAL && LA262_0 <= MESSAGE)||LA262_0==NAME||LA262_0==OBJECT||LA262_0==OPERATOR||LA262_0==OUT||(LA262_0 >= POINTER && LA262_0 <= POINTER2)||LA262_0==RAISE||(LA262_0 >= READ && LA262_0 <= READONLY)||(LA262_0 >= REFERENCE && LA262_0 <= REGISTER)||(LA262_0 >= REMOVE && LA262_0 <= REPEAT)||LA262_0==SEMI||LA262_0==STATIC||(LA262_0 >= STORED && LA262_0 <= STRING)||LA262_0==TRY||(LA262_0 >= TkHexNum && LA262_0 <= TkIntNum)||LA262_0==UNSAFE||LA262_0==VARIANT||(LA262_0 >= WHILE && LA262_0 <= WRITE)||LA262_0==198) ) {
						alt262=1;
					}
					else if ( (LA262_0==EXCEPT) ) {
						int LA262_2 = input.LA(2);
						if ( (synpred386_Delphi()) ) {
							alt262=1;
						}
					}
					switch (alt262) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:39: statementList
							{
							pushFollow(FOLLOW_statementList_in_tryStatement16498);
							statementList799=statementList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList799.getTree());

							}
							break;

					}

					string_literal800=(Token)match(input,EXCEPT,FOLLOW_EXCEPT_in_tryStatement16502); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal800_tree = (Object)adaptor.create(string_literal800);
					adaptor.addChild(root_0, string_literal800_tree);
					}

					pushFollow(FOLLOW_handlerList_in_tryStatement16504);
					handlerList801=handlerList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, handlerList801.getTree());

					string_literal802=(Token)match(input,END,FOLLOW_END_in_tryStatement16506); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal802_tree = (Object)adaptor.create(string_literal802);
					adaptor.addChild(root_0, string_literal802_tree);
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:590:32: 'try' ( statementList )? 'finally' ( statementList )? 'end'
					{
					root_0 = (Object)adaptor.nil();


					string_literal803=(Token)match(input,TRY,FOLLOW_TRY_in_tryStatement16539); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal803_tree = (Object)adaptor.create(string_literal803);
					adaptor.addChild(root_0, string_literal803_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:590:38: ( statementList )?
					int alt263=2;
					int LA263_0 = input.LA(1);
					if ( (LA263_0==ADD||LA263_0==ANSISTRING||LA263_0==ASM||(LA263_0 >= ASSIGN && LA263_0 <= AT2)||(LA263_0 >= BEGIN && LA263_0 <= CASE)||(LA263_0 >= CONTAINS && LA263_0 <= CONTINUE)||LA263_0==DEFAULT||LA263_0==DOT||LA263_0==EXIT||LA263_0==EXPORT||LA263_0==FINAL||LA263_0==FOR||LA263_0==GOTO||LA263_0==IF||LA263_0==IMPLEMENTS||(LA263_0 >= INDEX && LA263_0 <= INHERITED)||LA263_0==LBRACK||(LA263_0 >= LOCAL && LA263_0 <= MESSAGE)||LA263_0==NAME||LA263_0==OBJECT||LA263_0==OPERATOR||LA263_0==OUT||(LA263_0 >= POINTER && LA263_0 <= POINTER2)||LA263_0==RAISE||(LA263_0 >= READ && LA263_0 <= READONLY)||(LA263_0 >= REFERENCE && LA263_0 <= REGISTER)||(LA263_0 >= REMOVE && LA263_0 <= REPEAT)||LA263_0==SEMI||LA263_0==STATIC||(LA263_0 >= STORED && LA263_0 <= STRING)||LA263_0==TRY||(LA263_0 >= TkHexNum && LA263_0 <= TkIntNum)||LA263_0==UNSAFE||LA263_0==VARIANT||(LA263_0 >= WHILE && LA263_0 <= WRITE)||LA263_0==198) ) {
						alt263=1;
					}
					else if ( (LA263_0==FINALLY) ) {
						int LA263_2 = input.LA(2);
						if ( (synpred388_Delphi()) ) {
							alt263=1;
						}
					}
					switch (alt263) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:590:39: statementList
							{
							pushFollow(FOLLOW_statementList_in_tryStatement16542);
							statementList804=statementList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList804.getTree());

							}
							break;

					}

					string_literal805=(Token)match(input,FINALLY,FOLLOW_FINALLY_in_tryStatement16546); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal805_tree = (Object)adaptor.create(string_literal805);
					adaptor.addChild(root_0, string_literal805_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:590:65: ( statementList )?
					int alt264=2;
					int LA264_0 = input.LA(1);
					if ( (LA264_0==ADD||LA264_0==ANSISTRING||LA264_0==ASM||(LA264_0 >= ASSIGN && LA264_0 <= AT2)||(LA264_0 >= BEGIN && LA264_0 <= CASE)||(LA264_0 >= CONTAINS && LA264_0 <= CONTINUE)||LA264_0==DEFAULT||LA264_0==DOT||LA264_0==EXIT||LA264_0==EXPORT||LA264_0==FINAL||LA264_0==FOR||LA264_0==GOTO||LA264_0==IF||LA264_0==IMPLEMENTS||(LA264_0 >= INDEX && LA264_0 <= INHERITED)||LA264_0==LBRACK||(LA264_0 >= LOCAL && LA264_0 <= MESSAGE)||LA264_0==NAME||LA264_0==OBJECT||LA264_0==OPERATOR||LA264_0==OUT||(LA264_0 >= POINTER && LA264_0 <= POINTER2)||LA264_0==RAISE||(LA264_0 >= READ && LA264_0 <= READONLY)||(LA264_0 >= REFERENCE && LA264_0 <= REGISTER)||(LA264_0 >= REMOVE && LA264_0 <= REPEAT)||LA264_0==SEMI||LA264_0==STATIC||(LA264_0 >= STORED && LA264_0 <= STRING)||LA264_0==TRY||(LA264_0 >= TkHexNum && LA264_0 <= TkIntNum)||LA264_0==UNSAFE||LA264_0==VARIANT||(LA264_0 >= WHILE && LA264_0 <= WRITE)||LA264_0==198) ) {
						alt264=1;
					}
					else if ( (LA264_0==END) ) {
						int LA264_2 = input.LA(2);
						if ( (synpred389_Delphi()) ) {
							alt264=1;
						}
					}
					switch (alt264) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:590:66: statementList
							{
							pushFollow(FOLLOW_statementList_in_tryStatement16549);
							statementList806=statementList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList806.getTree());

							}
							break;

					}

					string_literal807=(Token)match(input,END,FOLLOW_END_in_tryStatement16553); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal807_tree = (Object)adaptor.create(string_literal807);
					adaptor.addChild(root_0, string_literal807_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 146, tryStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "tryStatement"


	public static class handlerList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "handlerList"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:592:1: handlerList : ( ( handler )* ( 'else' statementList )? | statementList );
	public final DelphiParser.handlerList_return handlerList() throws RecognitionException {
		DelphiParser.handlerList_return retval = new DelphiParser.handlerList_return();
		retval.start = input.LT(1);
		int handlerList_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal809=null;
		ParserRuleReturnScope handler808 =null;
		ParserRuleReturnScope statementList810 =null;
		ParserRuleReturnScope statementList811 =null;

		Object string_literal809_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 147) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:592:30: ( ( handler )* ( 'else' statementList )? | statementList )
			int alt268=2;
			switch ( input.LA(1) ) {
			case ELSE:
			case ON:
				{
				alt268=1;
				}
				break;
			case END:
				{
				int LA268_2 = input.LA(2);
				if ( (synpred392_Delphi()) ) {
					alt268=1;
				}
				else if ( (true) ) {
					alt268=2;
				}

				}
				break;
			case ADD:
			case ANSISTRING:
			case ASM:
			case ASSIGN:
			case AT:
			case AT2:
			case BEGIN:
			case BREAK:
			case CASE:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case DOT:
			case EXIT:
			case EXPORT:
			case FINAL:
			case FOR:
			case GOTO:
			case IF:
			case IMPLEMENTS:
			case INDEX:
			case INHERITED:
			case LBRACK:
			case LOCAL:
			case LPAREN:
			case LT:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case POINTER:
			case POINTER2:
			case RAISE:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case REPEAT:
			case SEMI:
			case STATIC:
			case STORED:
			case STRICT:
			case STRING:
			case TRY:
			case TkHexNum:
			case TkIdentifier:
			case TkIntNum:
			case UNSAFE:
			case VARIANT:
			case WHILE:
			case WITH:
			case WRITE:
			case 198:
				{
				alt268=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 268, 0, input);
				throw nvae;
			}
			switch (alt268) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:592:32: ( handler )* ( 'else' statementList )?
					{
					root_0 = (Object)adaptor.nil();


					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:592:32: ( handler )*
					loop266:
					while (true) {
						int alt266=2;
						int LA266_0 = input.LA(1);
						if ( (LA266_0==ON) ) {
							alt266=1;
						}

						switch (alt266) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:592:33: handler
							{
							pushFollow(FOLLOW_handler_in_handlerList16608);
							handler808=handler();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, handler808.getTree());

							}
							break;

						default :
							break loop266;
						}
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:592:43: ( 'else' statementList )?
					int alt267=2;
					int LA267_0 = input.LA(1);
					if ( (LA267_0==ELSE) ) {
						alt267=1;
					}
					switch (alt267) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:592:44: 'else' statementList
							{
							string_literal809=(Token)match(input,ELSE,FOLLOW_ELSE_in_handlerList16613); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal809_tree = (Object)adaptor.create(string_literal809);
							adaptor.addChild(root_0, string_literal809_tree);
							}

							pushFollow(FOLLOW_statementList_in_handlerList16615);
							statementList810=statementList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList810.getTree());

							}
							break;

					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:593:32: statementList
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_statementList_in_handlerList16650);
					statementList811=statementList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList811.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 147, handlerList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "handlerList"


	public static class handler_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "handler"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:595:1: handler : 'on' ( handlerIdent )? typeId 'do' handlerStatement ;
	public final DelphiParser.handler_return handler() throws RecognitionException {
		DelphiParser.handler_return retval = new DelphiParser.handler_return();
		retval.start = input.LT(1);
		int handler_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal812=null;
		Token string_literal815=null;
		ParserRuleReturnScope handlerIdent813 =null;
		ParserRuleReturnScope typeId814 =null;
		ParserRuleReturnScope handlerStatement816 =null;

		Object string_literal812_tree=null;
		Object string_literal815_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 148) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:595:30: ( 'on' ( handlerIdent )? typeId 'do' handlerStatement )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:595:32: 'on' ( handlerIdent )? typeId 'do' handlerStatement
			{
			root_0 = (Object)adaptor.nil();


			string_literal812=(Token)match(input,ON,FOLLOW_ON_in_handler16708); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal812_tree = (Object)adaptor.create(string_literal812);
			adaptor.addChild(root_0, string_literal812_tree);
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:595:37: ( handlerIdent )?
			int alt269=2;
			switch ( input.LA(1) ) {
				case TkIdentifier:
					{
					int LA269_1 = input.LA(2);
					if ( (LA269_1==COLON) ) {
						alt269=1;
					}
					}
					break;
				case 198:
					{
					int LA269_2 = input.LA(2);
					if ( (LA269_2==TkIdentifier) ) {
						int LA269_6 = input.LA(3);
						if ( (LA269_6==COLON) ) {
							alt269=1;
						}
					}
					else if ( ((LA269_2 >= ABSOLUTE && LA269_2 <= ASSEMBLY)||LA269_2==AT||LA269_2==AUTOMATED||(LA269_2 >= BEGIN && LA269_2 <= CLASS)||(LA269_2 >= CONST && LA269_2 <= CONTINUE)||(LA269_2 >= DEFAULT && LA269_2 <= DO)||(LA269_2 >= DOWNTO && LA269_2 <= DYNAMIC)||(LA269_2 >= ELSE && LA269_2 <= END)||(LA269_2 >= EXCEPT && LA269_2 <= FUNCTION)||LA269_2==GOTO||LA269_2==HELPER||(LA269_2 >= IF && LA269_2 <= LABEL)||(LA269_2 >= LIBRARY && LA269_2 <= LOCAL)||LA269_2==MESSAGE||(LA269_2 >= MOD && LA269_2 <= NOT)||(LA269_2 >= OBJECT && LA269_2 <= PLATFORM)||LA269_2==POINTER||(LA269_2 >= PRIVATE && LA269_2 <= PUBLISHED)||LA269_2==RAISE||(LA269_2 >= READ && LA269_2 <= RESOURCESTRING)||(LA269_2 >= SAFECALL && LA269_2 <= SEALED)||(LA269_2 >= SET && LA269_2 <= SHR)||(LA269_2 >= STATIC && LA269_2 <= TYPE)||(LA269_2 >= UNIT && LA269_2 <= USES)||(LA269_2 >= VAR && LA269_2 <= WRITEONLY)||LA269_2==XOR) ) {
						int LA269_7 = input.LA(3);
						if ( (LA269_7==COLON) ) {
							alt269=1;
						}
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case EXIT:
				case EXPORT:
				case FINAL:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STATIC:
				case STORED:
				case STRICT:
				case STRING:
				case UNSAFE:
				case VARIANT:
				case WRITE:
					{
					int LA269_3 = input.LA(2);
					if ( (LA269_3==COLON) ) {
						alt269=1;
					}
					}
					break;
			}
			switch (alt269) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:595:38: handlerIdent
					{
					pushFollow(FOLLOW_handlerIdent_in_handler16711);
					handlerIdent813=handlerIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, handlerIdent813.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_typeId_in_handler16715);
			typeId814=typeId();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, typeId814.getTree());

			string_literal815=(Token)match(input,DO,FOLLOW_DO_in_handler16717); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal815_tree = (Object)adaptor.create(string_literal815);
			adaptor.addChild(root_0, string_literal815_tree);
			}

			pushFollow(FOLLOW_handlerStatement_in_handler16719);
			handlerStatement816=handlerStatement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, handlerStatement816.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 148, handler_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "handler"


	public static class handlerIdent_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "handlerIdent"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:597:1: handlerIdent : ident ':' ;
	public final DelphiParser.handlerIdent_return handlerIdent() throws RecognitionException {
		DelphiParser.handlerIdent_return retval = new DelphiParser.handlerIdent_return();
		retval.start = input.LT(1);
		int handlerIdent_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal818=null;
		ParserRuleReturnScope ident817 =null;

		Object char_literal818_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 149) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:597:30: ( ident ':' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:597:32: ident ':'
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_ident_in_handlerIdent16774);
			ident817=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident817.getTree());

			char_literal818=(Token)match(input,COLON,FOLLOW_COLON_in_handlerIdent16776); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal818_tree = (Object)adaptor.create(char_literal818);
			adaptor.addChild(root_0, char_literal818_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 149, handlerIdent_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "handlerIdent"


	public static class handlerStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "handlerStatement"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:599:1: handlerStatement : ( statement ( ';' )? | ';' );
	public final DelphiParser.handlerStatement_return handlerStatement() throws RecognitionException {
		DelphiParser.handlerStatement_return retval = new DelphiParser.handlerStatement_return();
		retval.start = input.LT(1);
		int handlerStatement_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal820=null;
		Token char_literal821=null;
		ParserRuleReturnScope statement819 =null;

		Object char_literal820_tree=null;
		Object char_literal821_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 150) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:599:30: ( statement ( ';' )? | ';' )
			int alt271=2;
			int LA271_0 = input.LA(1);
			if ( (LA271_0==EOF||LA271_0==ADD||LA271_0==ANSISTRING||LA271_0==ASM||(LA271_0 >= ASSIGN && LA271_0 <= AT2)||(LA271_0 >= BEGIN && LA271_0 <= CASE)||(LA271_0 >= CONTAINS && LA271_0 <= CONTINUE)||LA271_0==DEFAULT||LA271_0==DOT||(LA271_0 >= ELSE && LA271_0 <= END)||LA271_0==EXIT||LA271_0==EXPORT||LA271_0==FINAL||LA271_0==FOR||LA271_0==GOTO||LA271_0==IF||LA271_0==IMPLEMENTS||(LA271_0 >= INDEX && LA271_0 <= INHERITED)||LA271_0==LBRACK||(LA271_0 >= LOCAL && LA271_0 <= MESSAGE)||LA271_0==NAME||LA271_0==OBJECT||(LA271_0 >= ON && LA271_0 <= OPERATOR)||LA271_0==OUT||(LA271_0 >= POINTER && LA271_0 <= POINTER2)||LA271_0==RAISE||(LA271_0 >= READ && LA271_0 <= READONLY)||(LA271_0 >= REFERENCE && LA271_0 <= REGISTER)||(LA271_0 >= REMOVE && LA271_0 <= REPEAT)||LA271_0==STATIC||(LA271_0 >= STORED && LA271_0 <= STRING)||LA271_0==TRY||(LA271_0 >= TkHexNum && LA271_0 <= TkIntNum)||LA271_0==UNSAFE||LA271_0==VARIANT||(LA271_0 >= WHILE && LA271_0 <= WRITE)||LA271_0==198) ) {
				alt271=1;
			}
			else if ( (LA271_0==SEMI) ) {
				int LA271_2 = input.LA(2);
				if ( (synpred395_Delphi()) ) {
					alt271=1;
				}
				else if ( (true) ) {
					alt271=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 271, 0, input);
				throw nvae;
			}

			switch (alt271) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:599:32: statement ( ';' )?
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_statement_in_handlerStatement16825);
					statement819=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statement819.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:599:42: ( ';' )?
					int alt270=2;
					int LA270_0 = input.LA(1);
					if ( (LA270_0==SEMI) ) {
						alt270=1;
					}
					switch (alt270) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:599:43: ';'
							{
							char_literal820=(Token)match(input,SEMI,FOLLOW_SEMI_in_handlerStatement16828); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal820_tree = (Object)adaptor.create(char_literal820);
							adaptor.addChild(root_0, char_literal820_tree);
							}

							}
							break;

					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:600:32: ';'
					{
					root_0 = (Object)adaptor.nil();


					char_literal821=(Token)match(input,SEMI,FOLLOW_SEMI_in_handlerStatement16863); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal821_tree = (Object)adaptor.create(char_literal821);
					adaptor.addChild(root_0, char_literal821_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 150, handlerStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "handlerStatement"


	public static class raiseStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "raiseStatement"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:602:1: raiseStatement : 'raise' ( designator )? ( AT designator )? ;
	public final DelphiParser.raiseStatement_return raiseStatement() throws RecognitionException {
		DelphiParser.raiseStatement_return retval = new DelphiParser.raiseStatement_return();
		retval.start = input.LT(1);
		int raiseStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal822=null;
		Token AT824=null;
		ParserRuleReturnScope designator823 =null;
		ParserRuleReturnScope designator825 =null;

		Object string_literal822_tree=null;
		Object AT824_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 151) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:602:30: ( 'raise' ( designator )? ( AT designator )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:602:32: 'raise' ( designator )? ( AT designator )?
			{
			root_0 = (Object)adaptor.nil();


			string_literal822=(Token)match(input,RAISE,FOLLOW_RAISE_in_raiseStatement16914); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal822_tree = (Object)adaptor.create(string_literal822);
			adaptor.addChild(root_0, string_literal822_tree);
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:602:40: ( designator )?
			int alt272=2;
			switch ( input.LA(1) ) {
				case INHERITED:
					{
					int LA272_1 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case TkIdentifier:
					{
					int LA272_2 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case 198:
					{
					int LA272_3 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case AT:
					{
					int LA272_4 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case POINTER2:
					{
					int LA272_5 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case AT2:
					{
					int LA272_6 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case LT:
					{
					int LA272_7 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case LBRACK:
					{
					int LA272_8 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case LPAREN:
					{
					int LA272_9 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case EXIT:
				case EXPORT:
				case FINAL:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STATIC:
				case STORED:
				case STRICT:
				case STRING:
				case UNSAFE:
				case VARIANT:
				case WRITE:
					{
					int LA272_10 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case ELSE:
					{
					int LA272_11 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case EOF:
					{
					int LA272_12 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case SEMI:
					{
					int LA272_13 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case END:
					{
					int LA272_14 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case PROCEDURE:
					{
					int LA272_15 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case FUNCTION:
					{
					int LA272_16 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case DOT:
					{
					int LA272_17 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case 199:
					{
					int LA272_18 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case NOT:
					{
					int LA272_19 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case PLUS:
					{
					int LA272_20 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case MINUS:
					{
					int LA272_21 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case TkRealNum:
					{
					int LA272_22 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case TkHexNum:
				case TkIntNum:
					{
					int LA272_23 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case TRUE:
					{
					int LA272_24 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case FALSE:
					{
					int LA272_25 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case NIL:
					{
					int LA272_26 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case ControlString:
					{
					int LA272_27 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case QuotedString:
					{
					int LA272_28 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case AND:
				case AS:
				case DIV:
				case MOD:
				case OR:
				case SHL:
				case SHR:
				case SLASH:
				case STAR:
				case XOR:
					{
					int LA272_29 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case EQUAL:
					{
					int LA272_30 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case GE:
				case GT:
				case IN:
				case IS:
				case LE:
				case NOT_EQUAL:
					{
					int LA272_31 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case DOTDOT:
					{
					int LA272_32 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case COMMA:
					{
					int LA272_33 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case COLON:
					{
					int LA272_34 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case FINALIZATION:
					{
					int LA272_35 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case UNTIL:
					{
					int LA272_36 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case EXCEPT:
					{
					int LA272_37 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case FINALLY:
					{
					int LA272_38 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case ON:
					{
					int LA272_39 = input.LA(2);
					if ( (synpred396_Delphi()) ) {
						alt272=1;
					}
					}
					break;
			}
			switch (alt272) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:602:41: designator
					{
					pushFollow(FOLLOW_designator_in_raiseStatement16917);
					designator823=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator823.getTree());

					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:602:54: ( AT designator )?
			int alt273=2;
			int LA273_0 = input.LA(1);
			if ( (LA273_0==AT) ) {
				int LA273_1 = input.LA(2);
				if ( (synpred397_Delphi()) ) {
					alt273=1;
				}
			}
			switch (alt273) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:602:55: AT designator
					{
					AT824=(Token)match(input,AT,FOLLOW_AT_in_raiseStatement16922); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					AT824_tree = (Object)adaptor.create(AT824);
					adaptor.addChild(root_0, AT824_tree);
					}

					pushFollow(FOLLOW_designator_in_raiseStatement16924);
					designator825=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator825.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 151, raiseStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "raiseStatement"


	public static class assemblerStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "assemblerStatement"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:607:1: assemblerStatement : 'asm' (~ ( 'end' ) )* 'end' ;
	public final DelphiParser.assemblerStatement_return assemblerStatement() throws RecognitionException {
		DelphiParser.assemblerStatement_return retval = new DelphiParser.assemblerStatement_return();
		retval.start = input.LT(1);
		int assemblerStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal826=null;
		Token set827=null;
		Token string_literal828=null;

		Object string_literal826_tree=null;
		Object set827_tree=null;
		Object string_literal828_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:607:30: ( 'asm' (~ ( 'end' ) )* 'end' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:607:32: 'asm' (~ ( 'end' ) )* 'end'
			{
			root_0 = (Object)adaptor.nil();


			string_literal826=(Token)match(input,ASM,FOLLOW_ASM_in_assemblerStatement16977); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal826_tree = (Object)adaptor.create(string_literal826);
			adaptor.addChild(root_0, string_literal826_tree);
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:607:38: (~ ( 'end' ) )*
			loop274:
			while (true) {
				int alt274=2;
				int LA274_0 = input.LA(1);
				if ( ((LA274_0 >= ABSOLUTE && LA274_0 <= ELSE)||(LA274_0 >= EQUAL && LA274_0 <= 199)) ) {
					alt274=1;
				}

				switch (alt274) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
					{
					set827=input.LT(1);
					if ( (input.LA(1) >= ABSOLUTE && input.LA(1) <= ELSE)||(input.LA(1) >= EQUAL && input.LA(1) <= 199) ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set827));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

				default :
					break loop274;
				}
			}

			string_literal828=(Token)match(input,END,FOLLOW_END_in_assemblerStatement16985); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal828_tree = (Object)adaptor.create(string_literal828);
			adaptor.addChild(root_0, string_literal828_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 152, assemblerStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "assemblerStatement"


	public static class methodDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodDirective"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:612:1: methodDirective : ( reintroduceDirective | overloadDirective | bindingDirective | abstractDirective | inlineDirective | callConvention | hintingDirective ';' | oldCallConventionDirective | dispIDDirective );
	public final DelphiParser.methodDirective_return methodDirective() throws RecognitionException {
		DelphiParser.methodDirective_return retval = new DelphiParser.methodDirective_return();
		retval.start = input.LT(1);
		int methodDirective_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal836=null;
		ParserRuleReturnScope reintroduceDirective829 =null;
		ParserRuleReturnScope overloadDirective830 =null;
		ParserRuleReturnScope bindingDirective831 =null;
		ParserRuleReturnScope abstractDirective832 =null;
		ParserRuleReturnScope inlineDirective833 =null;
		ParserRuleReturnScope callConvention834 =null;
		ParserRuleReturnScope hintingDirective835 =null;
		ParserRuleReturnScope oldCallConventionDirective837 =null;
		ParserRuleReturnScope dispIDDirective838 =null;

		Object char_literal836_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 153) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:612:30: ( reintroduceDirective | overloadDirective | bindingDirective | abstractDirective | inlineDirective | callConvention | hintingDirective ';' | oldCallConventionDirective | dispIDDirective )
			int alt275=9;
			switch ( input.LA(1) ) {
			case REINTRODUCE:
				{
				alt275=1;
				}
				break;
			case OVERLOAD:
				{
				alt275=2;
				}
				break;
			case DYNAMIC:
			case MESSAGE:
			case OVERRIDE:
			case STATIC:
			case VIRTUAL:
				{
				alt275=3;
				}
				break;
			case ABSTRACT:
			case FINAL:
				{
				alt275=4;
				}
				break;
			case ASSEMBLER:
			case INLINE:
				{
				alt275=5;
				}
				break;
			case CDECL:
			case EXPORT:
			case PASCAL:
			case REGISTER:
			case SAFECALL:
			case STDCALL:
				{
				alt275=6;
				}
				break;
			case DEPRECATED:
			case EXPERIMENTAL:
			case LIBRARY:
			case PLATFORM:
				{
				alt275=7;
				}
				break;
			case FAR:
			case LOCAL:
			case NEAR:
				{
				alt275=8;
				}
				break;
			case DISPID:
				{
				alt275=9;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 275, 0, input);
				throw nvae;
			}
			switch (alt275) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:612:32: reintroduceDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_reintroduceDirective_in_methodDirective17058);
					reintroduceDirective829=reintroduceDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, reintroduceDirective829.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:613:32: overloadDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_overloadDirective_in_methodDirective17100);
					overloadDirective830=overloadDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, overloadDirective830.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:614:32: bindingDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_bindingDirective_in_methodDirective17145);
					bindingDirective831=bindingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bindingDirective831.getTree());

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:615:32: abstractDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_abstractDirective_in_methodDirective17191);
					abstractDirective832=abstractDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, abstractDirective832.getTree());

					}
					break;
				case 5 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:616:32: inlineDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_inlineDirective_in_methodDirective17236);
					inlineDirective833=inlineDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineDirective833.getTree());

					}
					break;
				case 6 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:617:32: callConvention
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_callConvention_in_methodDirective17283);
					callConvention834=callConvention();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, callConvention834.getTree());

					}
					break;
				case 7 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:618:32: hintingDirective ';'
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_hintingDirective_in_methodDirective17331);
					hintingDirective835=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, hintingDirective835.getTree());

					char_literal836=(Token)match(input,SEMI,FOLLOW_SEMI_in_methodDirective17333); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal836_tree = (Object)adaptor.create(char_literal836);
					adaptor.addChild(root_0, char_literal836_tree);
					}

					}
					break;
				case 8 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:619:32: oldCallConventionDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_oldCallConventionDirective_in_methodDirective17375);
					oldCallConventionDirective837=oldCallConventionDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, oldCallConventionDirective837.getTree());

					}
					break;
				case 9 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:620:32: dispIDDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_dispIDDirective_in_methodDirective17411);
					dispIDDirective838=dispIDDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dispIDDirective838.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 153, methodDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodDirective"


	public static class functionDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "functionDirective"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:622:1: functionDirective : ( overloadDirective | inlineDirective | callConvention | oldCallConventionDirective | hintingDirective ';' | ( callConventionNoSemi )? externalDirective | 'unsafe' ';' );
	public final DelphiParser.functionDirective_return functionDirective() throws RecognitionException {
		DelphiParser.functionDirective_return retval = new DelphiParser.functionDirective_return();
		retval.start = input.LT(1);
		int functionDirective_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal844=null;
		Token string_literal847=null;
		Token char_literal848=null;
		ParserRuleReturnScope overloadDirective839 =null;
		ParserRuleReturnScope inlineDirective840 =null;
		ParserRuleReturnScope callConvention841 =null;
		ParserRuleReturnScope oldCallConventionDirective842 =null;
		ParserRuleReturnScope hintingDirective843 =null;
		ParserRuleReturnScope callConventionNoSemi845 =null;
		ParserRuleReturnScope externalDirective846 =null;

		Object char_literal844_tree=null;
		Object string_literal847_tree=null;
		Object char_literal848_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:622:30: ( overloadDirective | inlineDirective | callConvention | oldCallConventionDirective | hintingDirective ';' | ( callConventionNoSemi )? externalDirective | 'unsafe' ';' )
			int alt277=7;
			switch ( input.LA(1) ) {
			case OVERLOAD:
				{
				alt277=1;
				}
				break;
			case ASSEMBLER:
			case INLINE:
				{
				alt277=2;
				}
				break;
			case CDECL:
				{
				int LA277_3 = input.LA(2);
				if ( (LA277_3==SEMI) ) {
					alt277=3;
				}
				else if ( (LA277_3==EXTERNAL||LA277_3==VARARGS) ) {
					alt277=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 277, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PASCAL:
				{
				int LA277_4 = input.LA(2);
				if ( (LA277_4==SEMI) ) {
					alt277=3;
				}
				else if ( (LA277_4==EXTERNAL||LA277_4==VARARGS) ) {
					alt277=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 277, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case REGISTER:
				{
				int LA277_5 = input.LA(2);
				if ( (LA277_5==SEMI) ) {
					alt277=3;
				}
				else if ( (LA277_5==EXTERNAL||LA277_5==VARARGS) ) {
					alt277=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 277, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SAFECALL:
				{
				int LA277_6 = input.LA(2);
				if ( (LA277_6==SEMI) ) {
					alt277=3;
				}
				else if ( (LA277_6==EXTERNAL||LA277_6==VARARGS) ) {
					alt277=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 277, 6, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case STDCALL:
				{
				int LA277_7 = input.LA(2);
				if ( (LA277_7==SEMI) ) {
					alt277=3;
				}
				else if ( (LA277_7==EXTERNAL||LA277_7==VARARGS) ) {
					alt277=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 277, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EXPORT:
				{
				int LA277_8 = input.LA(2);
				if ( (LA277_8==SEMI) ) {
					alt277=3;
				}
				else if ( (LA277_8==EXTERNAL||LA277_8==VARARGS) ) {
					alt277=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 277, 8, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case FAR:
			case LOCAL:
			case NEAR:
				{
				alt277=4;
				}
				break;
			case DEPRECATED:
			case EXPERIMENTAL:
			case LIBRARY:
			case PLATFORM:
				{
				alt277=5;
				}
				break;
			case EXTERNAL:
			case VARARGS:
				{
				alt277=6;
				}
				break;
			case UNSAFE:
				{
				alt277=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 277, 0, input);
				throw nvae;
			}
			switch (alt277) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:622:32: overloadDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_overloadDirective_in_functionDirective17459);
					overloadDirective839=overloadDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, overloadDirective839.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:623:32: inlineDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_inlineDirective_in_functionDirective17502);
					inlineDirective840=inlineDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineDirective840.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:624:32: callConvention
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_callConvention_in_functionDirective17547);
					callConvention841=callConvention();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, callConvention841.getTree());

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:625:32: oldCallConventionDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_oldCallConventionDirective_in_functionDirective17593);
					oldCallConventionDirective842=oldCallConventionDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, oldCallConventionDirective842.getTree());

					}
					break;
				case 5 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:626:32: hintingDirective ';'
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_hintingDirective_in_functionDirective17627);
					hintingDirective843=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, hintingDirective843.getTree());

					char_literal844=(Token)match(input,SEMI,FOLLOW_SEMI_in_functionDirective17629); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal844_tree = (Object)adaptor.create(char_literal844);
					adaptor.addChild(root_0, char_literal844_tree);
					}

					}
					break;
				case 6 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:627:32: ( callConventionNoSemi )? externalDirective
					{
					root_0 = (Object)adaptor.nil();


					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:627:32: ( callConventionNoSemi )?
					int alt276=2;
					int LA276_0 = input.LA(1);
					if ( (LA276_0==CDECL||LA276_0==EXPORT||LA276_0==PASCAL||LA276_0==REGISTER||LA276_0==SAFECALL||LA276_0==STDCALL) ) {
						alt276=1;
					}
					switch (alt276) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:627:33: callConventionNoSemi
							{
							pushFollow(FOLLOW_callConventionNoSemi_in_functionDirective17670);
							callConventionNoSemi845=callConventionNoSemi();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, callConventionNoSemi845.getTree());

							}
							break;

					}

					pushFollow(FOLLOW_externalDirective_in_functionDirective17674);
					externalDirective846=externalDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, externalDirective846.getTree());

					}
					break;
				case 7 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:628:32: 'unsafe' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal847=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_functionDirective17717); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal847_tree = (Object)adaptor.create(string_literal847);
					adaptor.addChild(root_0, string_literal847_tree);
					}

					char_literal848=(Token)match(input,SEMI,FOLLOW_SEMI_in_functionDirective17719); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal848_tree = (Object)adaptor.create(char_literal848);
					adaptor.addChild(root_0, char_literal848_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 154, functionDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "functionDirective"


	public static class reintroduceDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "reintroduceDirective"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:630:1: reintroduceDirective : 'reintroduce' ';' ;
	public final DelphiParser.reintroduceDirective_return reintroduceDirective() throws RecognitionException {
		DelphiParser.reintroduceDirective_return retval = new DelphiParser.reintroduceDirective_return();
		retval.start = input.LT(1);
		int reintroduceDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal849=null;
		Token char_literal850=null;

		Object string_literal849_tree=null;
		Object char_literal850_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 155) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:630:30: ( 'reintroduce' ';' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:630:32: 'reintroduce' ';'
			{
			root_0 = (Object)adaptor.nil();


			string_literal849=(Token)match(input,REINTRODUCE,FOLLOW_REINTRODUCE_in_reintroduceDirective17779); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal849_tree = (Object)adaptor.create(string_literal849);
			adaptor.addChild(root_0, string_literal849_tree);
			}

			char_literal850=(Token)match(input,SEMI,FOLLOW_SEMI_in_reintroduceDirective17781); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal850_tree = (Object)adaptor.create(char_literal850);
			adaptor.addChild(root_0, char_literal850_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 155, reintroduceDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "reintroduceDirective"


	public static class overloadDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "overloadDirective"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:632:1: overloadDirective : 'overload' ( ';' )? ;
	public final DelphiParser.overloadDirective_return overloadDirective() throws RecognitionException {
		DelphiParser.overloadDirective_return retval = new DelphiParser.overloadDirective_return();
		retval.start = input.LT(1);
		int overloadDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal851=null;
		Token char_literal852=null;

		Object string_literal851_tree=null;
		Object char_literal852_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 156) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:632:30: ( 'overload' ( ';' )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:632:32: 'overload' ( ';' )?
			{
			root_0 = (Object)adaptor.nil();


			string_literal851=(Token)match(input,OVERLOAD,FOLLOW_OVERLOAD_in_overloadDirective17829); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal851_tree = (Object)adaptor.create(string_literal851);
			adaptor.addChild(root_0, string_literal851_tree);
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:632:43: ( ';' )?
			int alt278=2;
			int LA278_0 = input.LA(1);
			if ( (LA278_0==SEMI) ) {
				int LA278_1 = input.LA(2);
				if ( (synpred415_Delphi()) ) {
					alt278=1;
				}
			}
			switch (alt278) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:632:44: ';'
					{
					char_literal852=(Token)match(input,SEMI,FOLLOW_SEMI_in_overloadDirective17832); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal852_tree = (Object)adaptor.create(char_literal852);
					adaptor.addChild(root_0, char_literal852_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 156, overloadDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "overloadDirective"


	public static class bindingDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "bindingDirective"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:634:1: bindingDirective : ( 'message' expression ';' | 'static' ';' | 'dynamic' ';' | 'override' ';' | 'virtual' ';' );
	public final DelphiParser.bindingDirective_return bindingDirective() throws RecognitionException {
		DelphiParser.bindingDirective_return retval = new DelphiParser.bindingDirective_return();
		retval.start = input.LT(1);
		int bindingDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal853=null;
		Token char_literal855=null;
		Token string_literal856=null;
		Token char_literal857=null;
		Token string_literal858=null;
		Token char_literal859=null;
		Token string_literal860=null;
		Token char_literal861=null;
		Token string_literal862=null;
		Token char_literal863=null;
		ParserRuleReturnScope expression854 =null;

		Object string_literal853_tree=null;
		Object char_literal855_tree=null;
		Object string_literal856_tree=null;
		Object char_literal857_tree=null;
		Object string_literal858_tree=null;
		Object char_literal859_tree=null;
		Object string_literal860_tree=null;
		Object char_literal861_tree=null;
		Object string_literal862_tree=null;
		Object char_literal863_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 157) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:634:30: ( 'message' expression ';' | 'static' ';' | 'dynamic' ';' | 'override' ';' | 'virtual' ';' )
			int alt279=5;
			switch ( input.LA(1) ) {
			case MESSAGE:
				{
				alt279=1;
				}
				break;
			case STATIC:
				{
				alt279=2;
				}
				break;
			case DYNAMIC:
				{
				alt279=3;
				}
				break;
			case OVERRIDE:
				{
				alt279=4;
				}
				break;
			case VIRTUAL:
				{
				alt279=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 279, 0, input);
				throw nvae;
			}
			switch (alt279) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:634:32: 'message' expression ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal853=(Token)match(input,MESSAGE,FOLLOW_MESSAGE_in_bindingDirective17887); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal853_tree = (Object)adaptor.create(string_literal853);
					adaptor.addChild(root_0, string_literal853_tree);
					}

					pushFollow(FOLLOW_expression_in_bindingDirective17889);
					expression854=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression854.getTree());

					char_literal855=(Token)match(input,SEMI,FOLLOW_SEMI_in_bindingDirective17891); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal855_tree = (Object)adaptor.create(char_literal855);
					adaptor.addChild(root_0, char_literal855_tree);
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:635:32: 'static' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal856=(Token)match(input,STATIC,FOLLOW_STATIC_in_bindingDirective17924); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal856_tree = (Object)adaptor.create(string_literal856);
					adaptor.addChild(root_0, string_literal856_tree);
					}

					char_literal857=(Token)match(input,SEMI,FOLLOW_SEMI_in_bindingDirective17926); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal857_tree = (Object)adaptor.create(char_literal857);
					adaptor.addChild(root_0, char_literal857_tree);
					}

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:636:32: 'dynamic' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal858=(Token)match(input,DYNAMIC,FOLLOW_DYNAMIC_in_bindingDirective17959); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal858_tree = (Object)adaptor.create(string_literal858);
					adaptor.addChild(root_0, string_literal858_tree);
					}

					char_literal859=(Token)match(input,SEMI,FOLLOW_SEMI_in_bindingDirective17961); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal859_tree = (Object)adaptor.create(char_literal859);
					adaptor.addChild(root_0, char_literal859_tree);
					}

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:637:32: 'override' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal860=(Token)match(input,OVERRIDE,FOLLOW_OVERRIDE_in_bindingDirective17994); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal860_tree = (Object)adaptor.create(string_literal860);
					adaptor.addChild(root_0, string_literal860_tree);
					}

					char_literal861=(Token)match(input,SEMI,FOLLOW_SEMI_in_bindingDirective17996); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal861_tree = (Object)adaptor.create(char_literal861);
					adaptor.addChild(root_0, char_literal861_tree);
					}

					}
					break;
				case 5 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:638:32: 'virtual' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal862=(Token)match(input,VIRTUAL,FOLLOW_VIRTUAL_in_bindingDirective18029); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal862_tree = (Object)adaptor.create(string_literal862);
					adaptor.addChild(root_0, string_literal862_tree);
					}

					char_literal863=(Token)match(input,SEMI,FOLLOW_SEMI_in_bindingDirective18031); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal863_tree = (Object)adaptor.create(char_literal863);
					adaptor.addChild(root_0, char_literal863_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 157, bindingDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "bindingDirective"


	public static class abstractDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "abstractDirective"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:640:1: abstractDirective : ( 'abstract' ';' | 'final' ';' );
	public final DelphiParser.abstractDirective_return abstractDirective() throws RecognitionException {
		DelphiParser.abstractDirective_return retval = new DelphiParser.abstractDirective_return();
		retval.start = input.LT(1);
		int abstractDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal864=null;
		Token char_literal865=null;
		Token string_literal866=null;
		Token char_literal867=null;

		Object string_literal864_tree=null;
		Object char_literal865_tree=null;
		Object string_literal866_tree=null;
		Object char_literal867_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 158) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:640:30: ( 'abstract' ';' | 'final' ';' )
			int alt280=2;
			int LA280_0 = input.LA(1);
			if ( (LA280_0==ABSTRACT) ) {
				alt280=1;
			}
			else if ( (LA280_0==FINAL) ) {
				alt280=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 280, 0, input);
				throw nvae;
			}

			switch (alt280) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:640:32: 'abstract' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal864=(Token)match(input,ABSTRACT,FOLLOW_ABSTRACT_in_abstractDirective18079); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal864_tree = (Object)adaptor.create(string_literal864);
					adaptor.addChild(root_0, string_literal864_tree);
					}

					char_literal865=(Token)match(input,SEMI,FOLLOW_SEMI_in_abstractDirective18081); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal865_tree = (Object)adaptor.create(char_literal865);
					adaptor.addChild(root_0, char_literal865_tree);
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:641:32: 'final' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal866=(Token)match(input,FINAL,FOLLOW_FINAL_in_abstractDirective18114); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal866_tree = (Object)adaptor.create(string_literal866);
					adaptor.addChild(root_0, string_literal866_tree);
					}

					char_literal867=(Token)match(input,SEMI,FOLLOW_SEMI_in_abstractDirective18116); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal867_tree = (Object)adaptor.create(char_literal867);
					adaptor.addChild(root_0, char_literal867_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 158, abstractDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "abstractDirective"


	public static class inlineDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "inlineDirective"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:643:1: inlineDirective : ( 'inline' ';' | 'assembler' ';' );
	public final DelphiParser.inlineDirective_return inlineDirective() throws RecognitionException {
		DelphiParser.inlineDirective_return retval = new DelphiParser.inlineDirective_return();
		retval.start = input.LT(1);
		int inlineDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal868=null;
		Token char_literal869=null;
		Token string_literal870=null;
		Token char_literal871=null;

		Object string_literal868_tree=null;
		Object char_literal869_tree=null;
		Object string_literal870_tree=null;
		Object char_literal871_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 159) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:643:30: ( 'inline' ';' | 'assembler' ';' )
			int alt281=2;
			int LA281_0 = input.LA(1);
			if ( (LA281_0==INLINE) ) {
				alt281=1;
			}
			else if ( (LA281_0==ASSEMBLER) ) {
				alt281=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 281, 0, input);
				throw nvae;
			}

			switch (alt281) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:643:32: 'inline' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal868=(Token)match(input,INLINE,FOLLOW_INLINE_in_inlineDirective18166); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal868_tree = (Object)adaptor.create(string_literal868);
					adaptor.addChild(root_0, string_literal868_tree);
					}

					char_literal869=(Token)match(input,SEMI,FOLLOW_SEMI_in_inlineDirective18168); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal869_tree = (Object)adaptor.create(char_literal869);
					adaptor.addChild(root_0, char_literal869_tree);
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:644:32: 'assembler' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal870=(Token)match(input,ASSEMBLER,FOLLOW_ASSEMBLER_in_inlineDirective18201); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal870_tree = (Object)adaptor.create(string_literal870);
					adaptor.addChild(root_0, string_literal870_tree);
					}

					char_literal871=(Token)match(input,SEMI,FOLLOW_SEMI_in_inlineDirective18203); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal871_tree = (Object)adaptor.create(char_literal871);
					adaptor.addChild(root_0, char_literal871_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 159, inlineDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "inlineDirective"


	public static class callConvention_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "callConvention"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:646:1: callConvention : ( 'cdecl' ';' | 'pascal' ';' | 'register' ';' | 'safecall' ';' | 'stdcall' ';' | 'export' ';' );
	public final DelphiParser.callConvention_return callConvention() throws RecognitionException {
		DelphiParser.callConvention_return retval = new DelphiParser.callConvention_return();
		retval.start = input.LT(1);
		int callConvention_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal872=null;
		Token char_literal873=null;
		Token string_literal874=null;
		Token char_literal875=null;
		Token string_literal876=null;
		Token char_literal877=null;
		Token string_literal878=null;
		Token char_literal879=null;
		Token string_literal880=null;
		Token char_literal881=null;
		Token string_literal882=null;
		Token char_literal883=null;

		Object string_literal872_tree=null;
		Object char_literal873_tree=null;
		Object string_literal874_tree=null;
		Object char_literal875_tree=null;
		Object string_literal876_tree=null;
		Object char_literal877_tree=null;
		Object string_literal878_tree=null;
		Object char_literal879_tree=null;
		Object string_literal880_tree=null;
		Object char_literal881_tree=null;
		Object string_literal882_tree=null;
		Object char_literal883_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 160) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:646:30: ( 'cdecl' ';' | 'pascal' ';' | 'register' ';' | 'safecall' ';' | 'stdcall' ';' | 'export' ';' )
			int alt282=6;
			switch ( input.LA(1) ) {
			case CDECL:
				{
				alt282=1;
				}
				break;
			case PASCAL:
				{
				alt282=2;
				}
				break;
			case REGISTER:
				{
				alt282=3;
				}
				break;
			case SAFECALL:
				{
				alt282=4;
				}
				break;
			case STDCALL:
				{
				alt282=5;
				}
				break;
			case EXPORT:
				{
				alt282=6;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 282, 0, input);
				throw nvae;
			}
			switch (alt282) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:646:32: 'cdecl' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal872=(Token)match(input,CDECL,FOLLOW_CDECL_in_callConvention18255); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal872_tree = (Object)adaptor.create(string_literal872);
					adaptor.addChild(root_0, string_literal872_tree);
					}

					char_literal873=(Token)match(input,SEMI,FOLLOW_SEMI_in_callConvention18257); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal873_tree = (Object)adaptor.create(char_literal873);
					adaptor.addChild(root_0, char_literal873_tree);
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:647:32: 'pascal' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal874=(Token)match(input,PASCAL,FOLLOW_PASCAL_in_callConvention18294); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal874_tree = (Object)adaptor.create(string_literal874);
					adaptor.addChild(root_0, string_literal874_tree);
					}

					char_literal875=(Token)match(input,SEMI,FOLLOW_SEMI_in_callConvention18296); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal875_tree = (Object)adaptor.create(char_literal875);
					adaptor.addChild(root_0, char_literal875_tree);
					}

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:648:32: 'register' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal876=(Token)match(input,REGISTER,FOLLOW_REGISTER_in_callConvention18332); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal876_tree = (Object)adaptor.create(string_literal876);
					adaptor.addChild(root_0, string_literal876_tree);
					}

					char_literal877=(Token)match(input,SEMI,FOLLOW_SEMI_in_callConvention18334); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal877_tree = (Object)adaptor.create(char_literal877);
					adaptor.addChild(root_0, char_literal877_tree);
					}

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:649:32: 'safecall' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal878=(Token)match(input,SAFECALL,FOLLOW_SAFECALL_in_callConvention18368); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal878_tree = (Object)adaptor.create(string_literal878);
					adaptor.addChild(root_0, string_literal878_tree);
					}

					char_literal879=(Token)match(input,SEMI,FOLLOW_SEMI_in_callConvention18370); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal879_tree = (Object)adaptor.create(char_literal879);
					adaptor.addChild(root_0, char_literal879_tree);
					}

					}
					break;
				case 5 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:650:32: 'stdcall' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal880=(Token)match(input,STDCALL,FOLLOW_STDCALL_in_callConvention18404); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal880_tree = (Object)adaptor.create(string_literal880);
					adaptor.addChild(root_0, string_literal880_tree);
					}

					char_literal881=(Token)match(input,SEMI,FOLLOW_SEMI_in_callConvention18406); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal881_tree = (Object)adaptor.create(char_literal881);
					adaptor.addChild(root_0, char_literal881_tree);
					}

					}
					break;
				case 6 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:651:32: 'export' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal882=(Token)match(input,EXPORT,FOLLOW_EXPORT_in_callConvention18441); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal882_tree = (Object)adaptor.create(string_literal882);
					adaptor.addChild(root_0, string_literal882_tree);
					}

					char_literal883=(Token)match(input,SEMI,FOLLOW_SEMI_in_callConvention18443); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal883_tree = (Object)adaptor.create(char_literal883);
					adaptor.addChild(root_0, char_literal883_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 160, callConvention_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "callConvention"


	public static class callConventionNoSemi_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "callConventionNoSemi"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:653:1: callConventionNoSemi : ( 'cdecl' | 'pascal' | 'register' | 'safecall' | 'stdcall' | 'export' );
	public final DelphiParser.callConventionNoSemi_return callConventionNoSemi() throws RecognitionException {
		DelphiParser.callConventionNoSemi_return retval = new DelphiParser.callConventionNoSemi_return();
		retval.start = input.LT(1);
		int callConventionNoSemi_StartIndex = input.index();

		Object root_0 = null;

		Token set884=null;

		Object set884_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 161) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:653:30: ( 'cdecl' | 'pascal' | 'register' | 'safecall' | 'stdcall' | 'export' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set884=input.LT(1);
			if ( input.LA(1)==CDECL||input.LA(1)==EXPORT||input.LA(1)==PASCAL||input.LA(1)==REGISTER||input.LA(1)==SAFECALL||input.LA(1)==STDCALL ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set884));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 161, callConventionNoSemi_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "callConventionNoSemi"


	public static class oldCallConventionDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "oldCallConventionDirective"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:660:1: oldCallConventionDirective : ( 'far' ';' | 'local' ';' | 'near' ';' );
	public final DelphiParser.oldCallConventionDirective_return oldCallConventionDirective() throws RecognitionException {
		DelphiParser.oldCallConventionDirective_return retval = new DelphiParser.oldCallConventionDirective_return();
		retval.start = input.LT(1);
		int oldCallConventionDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal885=null;
		Token char_literal886=null;
		Token string_literal887=null;
		Token char_literal888=null;
		Token string_literal889=null;
		Token char_literal890=null;

		Object string_literal885_tree=null;
		Object char_literal886_tree=null;
		Object string_literal887_tree=null;
		Object char_literal888_tree=null;
		Object string_literal889_tree=null;
		Object char_literal890_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 162) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:660:30: ( 'far' ';' | 'local' ';' | 'near' ';' )
			int alt283=3;
			switch ( input.LA(1) ) {
			case FAR:
				{
				alt283=1;
				}
				break;
			case LOCAL:
				{
				alt283=2;
				}
				break;
			case NEAR:
				{
				alt283=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 283, 0, input);
				throw nvae;
			}
			switch (alt283) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:660:32: 'far' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal885=(Token)match(input,FAR,FOLLOW_FAR_in_oldCallConventionDirective18709); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal885_tree = (Object)adaptor.create(string_literal885);
					adaptor.addChild(root_0, string_literal885_tree);
					}

					char_literal886=(Token)match(input,SEMI,FOLLOW_SEMI_in_oldCallConventionDirective18711); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal886_tree = (Object)adaptor.create(char_literal886);
					adaptor.addChild(root_0, char_literal886_tree);
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:661:32: 'local' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal887=(Token)match(input,LOCAL,FOLLOW_LOCAL_in_oldCallConventionDirective18750); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal887_tree = (Object)adaptor.create(string_literal887);
					adaptor.addChild(root_0, string_literal887_tree);
					}

					char_literal888=(Token)match(input,SEMI,FOLLOW_SEMI_in_oldCallConventionDirective18752); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal888_tree = (Object)adaptor.create(char_literal888);
					adaptor.addChild(root_0, char_literal888_tree);
					}

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:662:32: 'near' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal889=(Token)match(input,NEAR,FOLLOW_NEAR_in_oldCallConventionDirective18789); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal889_tree = (Object)adaptor.create(string_literal889);
					adaptor.addChild(root_0, string_literal889_tree);
					}

					char_literal890=(Token)match(input,SEMI,FOLLOW_SEMI_in_oldCallConventionDirective18791); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal890_tree = (Object)adaptor.create(char_literal890);
					adaptor.addChild(root_0, char_literal890_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 162, oldCallConventionDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "oldCallConventionDirective"


	public static class hintingDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "hintingDirective"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:664:1: hintingDirective : ( 'deprecated' ( stringFactor )? | 'experimental' | 'platform' | 'library' );
	public final DelphiParser.hintingDirective_return hintingDirective() throws RecognitionException {
		DelphiParser.hintingDirective_return retval = new DelphiParser.hintingDirective_return();
		retval.start = input.LT(1);
		int hintingDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal891=null;
		Token string_literal893=null;
		Token string_literal894=null;
		Token string_literal895=null;
		ParserRuleReturnScope stringFactor892 =null;

		Object string_literal891_tree=null;
		Object string_literal893_tree=null;
		Object string_literal894_tree=null;
		Object string_literal895_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 163) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:664:30: ( 'deprecated' ( stringFactor )? | 'experimental' | 'platform' | 'library' )
			int alt285=4;
			switch ( input.LA(1) ) {
			case DEPRECATED:
				{
				alt285=1;
				}
				break;
			case EXPERIMENTAL:
				{
				alt285=2;
				}
				break;
			case PLATFORM:
				{
				alt285=3;
				}
				break;
			case LIBRARY:
				{
				alt285=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 285, 0, input);
				throw nvae;
			}
			switch (alt285) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:664:32: 'deprecated' ( stringFactor )?
					{
					root_0 = (Object)adaptor.nil();


					string_literal891=(Token)match(input,DEPRECATED,FOLLOW_DEPRECATED_in_hintingDirective18845); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal891_tree = (Object)adaptor.create(string_literal891);
					adaptor.addChild(root_0, string_literal891_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:664:45: ( stringFactor )?
					int alt284=2;
					int LA284_0 = input.LA(1);
					if ( (LA284_0==ControlString||LA284_0==QuotedString) ) {
						alt284=1;
					}
					switch (alt284) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:664:46: stringFactor
							{
							pushFollow(FOLLOW_stringFactor_in_hintingDirective18848);
							stringFactor892=stringFactor();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, stringFactor892.getTree());

							}
							break;

					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:665:32: 'experimental'
					{
					root_0 = (Object)adaptor.nil();


					string_literal893=(Token)match(input,EXPERIMENTAL,FOLLOW_EXPERIMENTAL_in_hintingDirective18883); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal893_tree = (Object)adaptor.create(string_literal893);
					adaptor.addChild(root_0, string_literal893_tree);
					}

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:666:32: 'platform'
					{
					root_0 = (Object)adaptor.nil();


					string_literal894=(Token)match(input,PLATFORM,FOLLOW_PLATFORM_in_hintingDirective18918); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal894_tree = (Object)adaptor.create(string_literal894);
					adaptor.addChild(root_0, string_literal894_tree);
					}

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:667:32: 'library'
					{
					root_0 = (Object)adaptor.nil();


					string_literal895=(Token)match(input,LIBRARY,FOLLOW_LIBRARY_in_hintingDirective18951); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal895_tree = (Object)adaptor.create(string_literal895);
					adaptor.addChild(root_0, string_literal895_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 163, hintingDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "hintingDirective"


	public static class externalDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "externalDirective"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:669:1: externalDirective : ( 'varargs' ';' | 'external' ';' | 'external' constExpression ( externalSpecifier )* ';' );
	public final DelphiParser.externalDirective_return externalDirective() throws RecognitionException {
		DelphiParser.externalDirective_return retval = new DelphiParser.externalDirective_return();
		retval.start = input.LT(1);
		int externalDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal896=null;
		Token char_literal897=null;
		Token string_literal898=null;
		Token char_literal899=null;
		Token string_literal900=null;
		Token char_literal903=null;
		ParserRuleReturnScope constExpression901 =null;
		ParserRuleReturnScope externalSpecifier902 =null;

		Object string_literal896_tree=null;
		Object char_literal897_tree=null;
		Object string_literal898_tree=null;
		Object char_literal899_tree=null;
		Object string_literal900_tree=null;
		Object char_literal903_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 164) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:669:30: ( 'varargs' ';' | 'external' ';' | 'external' constExpression ( externalSpecifier )* ';' )
			int alt287=3;
			int LA287_0 = input.LA(1);
			if ( (LA287_0==VARARGS) ) {
				alt287=1;
			}
			else if ( (LA287_0==EXTERNAL) ) {
				int LA287_2 = input.LA(2);
				if ( (LA287_2==SEMI) ) {
					int LA287_3 = input.LA(3);
					if ( (synpred439_Delphi()) ) {
						alt287=2;
					}
					else if ( (true) ) {
						alt287=3;
					}

				}
				else if ( ((LA287_2 >= ADD && LA287_2 <= ANSISTRING)||LA287_2==AS||(LA287_2 >= AT && LA287_2 <= AT2)||LA287_2==BREAK||(LA287_2 >= CONTAINS && LA287_2 <= ControlString)||LA287_2==DEFAULT||LA287_2==DIV||LA287_2==DOT||LA287_2==EQUAL||LA287_2==EXIT||LA287_2==EXPORT||LA287_2==FALSE||LA287_2==FINAL||(LA287_2 >= FUNCTION && LA287_2 <= GE)||LA287_2==GT||(LA287_2 >= IMPLEMENTS && LA287_2 <= INHERITED)||LA287_2==IS||LA287_2==LBRACK||LA287_2==LE||(LA287_2 >= LOCAL && LA287_2 <= NAME)||LA287_2==NIL||(LA287_2 >= NOT && LA287_2 <= OBJECT)||(LA287_2 >= OPERATOR && LA287_2 <= OUT)||(LA287_2 >= PLUS && LA287_2 <= POINTER2)||LA287_2==PROCEDURE||LA287_2==QuotedString||(LA287_2 >= READ && LA287_2 <= READONLY)||(LA287_2 >= REFERENCE && LA287_2 <= REGISTER)||LA287_2==REMOVE||(LA287_2 >= SHL && LA287_2 <= STATIC)||(LA287_2 >= STORED && LA287_2 <= STRING)||LA287_2==TRUE||(LA287_2 >= TkHexNum && LA287_2 <= TkIntNum)||LA287_2==TkRealNum||LA287_2==UNSAFE||LA287_2==VARIANT||LA287_2==WRITE||(LA287_2 >= XOR && LA287_2 <= 199)) ) {
					alt287=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 287, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 287, 0, input);
				throw nvae;
			}

			switch (alt287) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:669:32: 'varargs' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal896=(Token)match(input,VARARGS,FOLLOW_VARARGS_in_externalDirective18999); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal896_tree = (Object)adaptor.create(string_literal896);
					adaptor.addChild(root_0, string_literal896_tree);
					}

					char_literal897=(Token)match(input,SEMI,FOLLOW_SEMI_in_externalDirective19001); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal897_tree = (Object)adaptor.create(char_literal897);
					adaptor.addChild(root_0, char_literal897_tree);
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:670:32: 'external' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal898=(Token)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_externalDirective19037); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal898_tree = (Object)adaptor.create(string_literal898);
					adaptor.addChild(root_0, string_literal898_tree);
					}

					char_literal899=(Token)match(input,SEMI,FOLLOW_SEMI_in_externalDirective19039); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal899_tree = (Object)adaptor.create(char_literal899);
					adaptor.addChild(root_0, char_literal899_tree);
					}

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:671:32: 'external' constExpression ( externalSpecifier )* ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal900=(Token)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_externalDirective19072); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal900_tree = (Object)adaptor.create(string_literal900);
					adaptor.addChild(root_0, string_literal900_tree);
					}

					pushFollow(FOLLOW_constExpression_in_externalDirective19074);
					constExpression901=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression901.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:671:59: ( externalSpecifier )*
					loop286:
					while (true) {
						int alt286=2;
						int LA286_0 = input.LA(1);
						if ( (LA286_0==INDEX||LA286_0==NAME) ) {
							alt286=1;
						}

						switch (alt286) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:671:60: externalSpecifier
							{
							pushFollow(FOLLOW_externalSpecifier_in_externalDirective19077);
							externalSpecifier902=externalSpecifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, externalSpecifier902.getTree());

							}
							break;

						default :
							break loop286;
						}
					}

					char_literal903=(Token)match(input,SEMI,FOLLOW_SEMI_in_externalDirective19081); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal903_tree = (Object)adaptor.create(char_literal903);
					adaptor.addChild(root_0, char_literal903_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 164, externalDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "externalDirective"


	public static class externalSpecifier_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "externalSpecifier"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:673:1: externalSpecifier : ( 'name' constExpression | 'index' constExpression );
	public final DelphiParser.externalSpecifier_return externalSpecifier() throws RecognitionException {
		DelphiParser.externalSpecifier_return retval = new DelphiParser.externalSpecifier_return();
		retval.start = input.LT(1);
		int externalSpecifier_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal904=null;
		Token string_literal906=null;
		ParserRuleReturnScope constExpression905 =null;
		ParserRuleReturnScope constExpression907 =null;

		Object string_literal904_tree=null;
		Object string_literal906_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 165) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:673:30: ( 'name' constExpression | 'index' constExpression )
			int alt288=2;
			int LA288_0 = input.LA(1);
			if ( (LA288_0==NAME) ) {
				alt288=1;
			}
			else if ( (LA288_0==INDEX) ) {
				alt288=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 288, 0, input);
				throw nvae;
			}

			switch (alt288) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:673:32: 'name' constExpression
					{
					root_0 = (Object)adaptor.nil();


					string_literal904=(Token)match(input,NAME,FOLLOW_NAME_in_externalSpecifier19130); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal904_tree = (Object)adaptor.create(string_literal904);
					adaptor.addChild(root_0, string_literal904_tree);
					}

					pushFollow(FOLLOW_constExpression_in_externalSpecifier19132);
					constExpression905=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression905.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:674:32: 'index' constExpression
					{
					root_0 = (Object)adaptor.nil();


					string_literal906=(Token)match(input,INDEX,FOLLOW_INDEX_in_externalSpecifier19165); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal906_tree = (Object)adaptor.create(string_literal906);
					adaptor.addChild(root_0, string_literal906_tree);
					}

					pushFollow(FOLLOW_constExpression_in_externalSpecifier19167);
					constExpression907=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression907.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 165, externalSpecifier_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "externalSpecifier"


	public static class dispIDDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "dispIDDirective"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:676:1: dispIDDirective : 'dispid' expression ';' ;
	public final DelphiParser.dispIDDirective_return dispIDDirective() throws RecognitionException {
		DelphiParser.dispIDDirective_return retval = new DelphiParser.dispIDDirective_return();
		retval.start = input.LT(1);
		int dispIDDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal908=null;
		Token char_literal910=null;
		ParserRuleReturnScope expression909 =null;

		Object string_literal908_tree=null;
		Object char_literal910_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 166) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:676:30: ( 'dispid' expression ';' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:676:32: 'dispid' expression ';'
			{
			root_0 = (Object)adaptor.nil();


			string_literal908=(Token)match(input,DISPID,FOLLOW_DISPID_in_dispIDDirective19220); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal908_tree = (Object)adaptor.create(string_literal908);
			adaptor.addChild(root_0, string_literal908_tree);
			}

			pushFollow(FOLLOW_expression_in_dispIDDirective19222);
			expression909=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression909.getTree());

			char_literal910=(Token)match(input,SEMI,FOLLOW_SEMI_in_dispIDDirective19224); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal910_tree = (Object)adaptor.create(char_literal910);
			adaptor.addChild(root_0, char_literal910_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 166, dispIDDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "dispIDDirective"


	public static class ident_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "ident"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:681:1: ident : ( TkIdentifier | '&' TkIdentifier -> TkIdentifier | '&' keywordsAsIdentifier -> keywordsAsIdentifier | usedKeywordsAsNames );
	public final DelphiParser.ident_return ident() throws RecognitionException {
		DelphiParser.ident_return retval = new DelphiParser.ident_return();
		retval.start = input.LT(1);
		int ident_StartIndex = input.index();

		Object root_0 = null;

		Token TkIdentifier911=null;
		Token char_literal912=null;
		Token TkIdentifier913=null;
		Token char_literal914=null;
		ParserRuleReturnScope keywordsAsIdentifier915 =null;
		ParserRuleReturnScope usedKeywordsAsNames916 =null;

		Object TkIdentifier911_tree=null;
		Object char_literal912_tree=null;
		Object TkIdentifier913_tree=null;
		Object char_literal914_tree=null;
		RewriteRuleTokenStream stream_198=new RewriteRuleTokenStream(adaptor,"token 198");
		RewriteRuleTokenStream stream_TkIdentifier=new RewriteRuleTokenStream(adaptor,"token TkIdentifier");
		RewriteRuleSubtreeStream stream_keywordsAsIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule keywordsAsIdentifier");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 167) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:681:30: ( TkIdentifier | '&' TkIdentifier -> TkIdentifier | '&' keywordsAsIdentifier -> keywordsAsIdentifier | usedKeywordsAsNames )
			int alt289=4;
			switch ( input.LA(1) ) {
			case TkIdentifier:
				{
				alt289=1;
				}
				break;
			case 198:
				{
				int LA289_2 = input.LA(2);
				if ( (LA289_2==TkIdentifier) ) {
					alt289=2;
				}
				else if ( ((LA289_2 >= ABSOLUTE && LA289_2 <= ASSEMBLY)||LA289_2==AT||LA289_2==AUTOMATED||(LA289_2 >= BEGIN && LA289_2 <= CLASS)||(LA289_2 >= CONST && LA289_2 <= CONTINUE)||(LA289_2 >= DEFAULT && LA289_2 <= DO)||(LA289_2 >= DOWNTO && LA289_2 <= DYNAMIC)||(LA289_2 >= ELSE && LA289_2 <= END)||(LA289_2 >= EXCEPT && LA289_2 <= FUNCTION)||LA289_2==GOTO||LA289_2==HELPER||(LA289_2 >= IF && LA289_2 <= LABEL)||(LA289_2 >= LIBRARY && LA289_2 <= LOCAL)||LA289_2==MESSAGE||(LA289_2 >= MOD && LA289_2 <= NOT)||(LA289_2 >= OBJECT && LA289_2 <= PLATFORM)||LA289_2==POINTER||(LA289_2 >= PRIVATE && LA289_2 <= PUBLISHED)||LA289_2==RAISE||(LA289_2 >= READ && LA289_2 <= RESOURCESTRING)||(LA289_2 >= SAFECALL && LA289_2 <= SEALED)||(LA289_2 >= SET && LA289_2 <= SHR)||(LA289_2 >= STATIC && LA289_2 <= TYPE)||(LA289_2 >= UNIT && LA289_2 <= USES)||(LA289_2 >= VAR && LA289_2 <= WRITEONLY)||LA289_2==XOR) ) {
					alt289=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 289, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ADD:
			case ANSISTRING:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case EXIT:
			case EXPORT:
			case FINAL:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STATIC:
			case STORED:
			case STRICT:
			case STRING:
			case UNSAFE:
			case VARIANT:
			case WRITE:
				{
				alt289=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 289, 0, input);
				throw nvae;
			}
			switch (alt289) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:681:32: TkIdentifier
					{
					root_0 = (Object)adaptor.nil();


					TkIdentifier911=(Token)match(input,TkIdentifier,FOLLOW_TkIdentifier_in_ident19287); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TkIdentifier911_tree = (Object)adaptor.create(TkIdentifier911);
					adaptor.addChild(root_0, TkIdentifier911_tree);
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:682:32: '&' TkIdentifier
					{
					char_literal912=(Token)match(input,198,FOLLOW_198_in_ident19320); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_198.add(char_literal912);

					TkIdentifier913=(Token)match(input,TkIdentifier,FOLLOW_TkIdentifier_in_ident19322); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_TkIdentifier.add(TkIdentifier913);

					// AST REWRITE
					// elements: TkIdentifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 682:49: -> TkIdentifier
					{
						adaptor.addChild(root_0, stream_TkIdentifier.nextNode());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:683:32: '&' keywordsAsIdentifier
					{
					char_literal914=(Token)match(input,198,FOLLOW_198_in_ident19359); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_198.add(char_literal914);

					pushFollow(FOLLOW_keywordsAsIdentifier_in_ident19361);
					keywordsAsIdentifier915=keywordsAsIdentifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_keywordsAsIdentifier.add(keywordsAsIdentifier915.getTree());
					// AST REWRITE
					// elements: keywordsAsIdentifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 683:57: -> keywordsAsIdentifier
					{
						adaptor.addChild(root_0, stream_keywordsAsIdentifier.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:684:32: usedKeywordsAsNames
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_usedKeywordsAsNames_in_ident19398);
					usedKeywordsAsNames916=usedKeywordsAsNames();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, usedKeywordsAsNames916.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 167, ident_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "ident"


	public static class usedKeywordsAsNames_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "usedKeywordsAsNames"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:686:1: usedKeywordsAsNames : ( ( NAME | READONLY | ADD | AT | MESSAGE | POINTER | INDEX | DEFAULT | STRING | CONTINUE ) | ( READ | WRITE | REGISTER | VARIANT | OPERATOR | REMOVE | LOCAL | REFERENCE | CONTAINS | FINAL ) | ( BREAK | EXIT | STRICT | OUT | OBJECT | EXPORT | ANSISTRING | IMPLEMENTS | STORED ) | ( UNSAFE | STATIC ) );
	public final DelphiParser.usedKeywordsAsNames_return usedKeywordsAsNames() throws RecognitionException {
		DelphiParser.usedKeywordsAsNames_return retval = new DelphiParser.usedKeywordsAsNames_return();
		retval.start = input.LT(1);
		int usedKeywordsAsNames_StartIndex = input.index();

		Object root_0 = null;

		Token set917=null;

		Object set917_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 168) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:686:30: ( ( NAME | READONLY | ADD | AT | MESSAGE | POINTER | INDEX | DEFAULT | STRING | CONTINUE ) | ( READ | WRITE | REGISTER | VARIANT | OPERATOR | REMOVE | LOCAL | REFERENCE | CONTAINS | FINAL ) | ( BREAK | EXIT | STRICT | OUT | OBJECT | EXPORT | ANSISTRING | IMPLEMENTS | STORED ) | ( UNSAFE | STATIC ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set917=input.LT(1);
			if ( input.LA(1)==ADD||input.LA(1)==ANSISTRING||input.LA(1)==AT||input.LA(1)==BREAK||(input.LA(1) >= CONTAINS && input.LA(1) <= CONTINUE)||input.LA(1)==DEFAULT||input.LA(1)==EXIT||input.LA(1)==EXPORT||input.LA(1)==FINAL||input.LA(1)==IMPLEMENTS||input.LA(1)==INDEX||input.LA(1)==LOCAL||input.LA(1)==MESSAGE||input.LA(1)==NAME||input.LA(1)==OBJECT||input.LA(1)==OPERATOR||input.LA(1)==OUT||input.LA(1)==POINTER||(input.LA(1) >= READ && input.LA(1) <= READONLY)||(input.LA(1) >= REFERENCE && input.LA(1) <= REGISTER)||input.LA(1)==REMOVE||input.LA(1)==STATIC||(input.LA(1) >= STORED && input.LA(1) <= STRING)||input.LA(1)==UNSAFE||input.LA(1)==VARIANT||input.LA(1)==WRITE ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set917));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 168, usedKeywordsAsNames_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "usedKeywordsAsNames"


	public static class keywordsAsIdentifier_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "keywordsAsIdentifier"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:691:1: keywordsAsIdentifier : ( ( ABSOLUTE | ABSTRACT | ADD | AND | ANSISTRING | ARRAY | AS | ASM | ASSEMBLER | ASSEMBLY ) | ( AT | AUTOMATED | BEGIN | BREAK | CASE | CDECL | CLASS | CONST | CONSTRUCTOR | CONTAINS ) | ( CONTINUE | DEFAULT | DEPRECATED | DESTRUCTOR | DISPID | DISPINTERFACE | DIV | DO | DOWNTO ) | ( DQ | DW | DYNAMIC | ELSE | END | EXCEPT | EXIT | EXPERIMENTAL | EXPORT | EXPORTS | EXTERNAL ) | ( FAR | FILE | FINAL | FINALIZATION | FINALLY | FOR | FORWARD | FUNCTION | GOTO | HELPER | IF ) | ( IMPLEMENTATION | IMPLEMENTS | IN | INDEX | INHERITED | INITIALIZATION | INLINE | INTERFACE ) | ( IS | LABEL | LIBRARY | LOCAL | MESSAGE | MOD | NAME | NEAR | NIL | NODEFAULT | NOT | OBJECT ) | ( OF | ON | OPERATOR | OR | OUT | OVERLOAD | OVERRIDE | PACKAGE | PACKED | PASCAL | PLATFORM ) | ( POINTER | PRIVATE | PROCEDURE | PROGRAM | PROPERTY | PROTECTED | PUBLIC | PUBLISHED | RAISE ) | ( READ | READONLY | RECORD | REFERENCE | REGISTER | REINTRODUCE | REMOVE | REPEAT | REQUIRES ) | ( RESIDENT | RESOURCESTRING | SAFECALL | SEALED | SET | SHL | SHR | STATIC | STDCALL | STORED ) | ( STRICT | STRING | THEN | THREADVAR | TO | TRY | TYPE | UNIT | UNSAFE | UNTIL | USES | VAR ) | ( VARARGS | VARIANT | VIRTUAL | WHILE | WITH | WRITE | WRITEONLY | XOR | FALSE | TRUE ) );
	public final DelphiParser.keywordsAsIdentifier_return keywordsAsIdentifier() throws RecognitionException {
		DelphiParser.keywordsAsIdentifier_return retval = new DelphiParser.keywordsAsIdentifier_return();
		retval.start = input.LT(1);
		int keywordsAsIdentifier_StartIndex = input.index();

		Object root_0 = null;

		Token set918=null;

		Object set918_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 169) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:691:30: ( ( ABSOLUTE | ABSTRACT | ADD | AND | ANSISTRING | ARRAY | AS | ASM | ASSEMBLER | ASSEMBLY ) | ( AT | AUTOMATED | BEGIN | BREAK | CASE | CDECL | CLASS | CONST | CONSTRUCTOR | CONTAINS ) | ( CONTINUE | DEFAULT | DEPRECATED | DESTRUCTOR | DISPID | DISPINTERFACE | DIV | DO | DOWNTO ) | ( DQ | DW | DYNAMIC | ELSE | END | EXCEPT | EXIT | EXPERIMENTAL | EXPORT | EXPORTS | EXTERNAL ) | ( FAR | FILE | FINAL | FINALIZATION | FINALLY | FOR | FORWARD | FUNCTION | GOTO | HELPER | IF ) | ( IMPLEMENTATION | IMPLEMENTS | IN | INDEX | INHERITED | INITIALIZATION | INLINE | INTERFACE ) | ( IS | LABEL | LIBRARY | LOCAL | MESSAGE | MOD | NAME | NEAR | NIL | NODEFAULT | NOT | OBJECT ) | ( OF | ON | OPERATOR | OR | OUT | OVERLOAD | OVERRIDE | PACKAGE | PACKED | PASCAL | PLATFORM ) | ( POINTER | PRIVATE | PROCEDURE | PROGRAM | PROPERTY | PROTECTED | PUBLIC | PUBLISHED | RAISE ) | ( READ | READONLY | RECORD | REFERENCE | REGISTER | REINTRODUCE | REMOVE | REPEAT | REQUIRES ) | ( RESIDENT | RESOURCESTRING | SAFECALL | SEALED | SET | SHL | SHR | STATIC | STDCALL | STORED ) | ( STRICT | STRING | THEN | THREADVAR | TO | TRY | TYPE | UNIT | UNSAFE | UNTIL | USES | VAR ) | ( VARARGS | VARIANT | VIRTUAL | WHILE | WITH | WRITE | WRITEONLY | XOR | FALSE | TRUE ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set918=input.LT(1);
			if ( (input.LA(1) >= ABSOLUTE && input.LA(1) <= ASSEMBLY)||input.LA(1)==AT||input.LA(1)==AUTOMATED||(input.LA(1) >= BEGIN && input.LA(1) <= CLASS)||(input.LA(1) >= CONST && input.LA(1) <= CONTINUE)||(input.LA(1) >= DEFAULT && input.LA(1) <= DO)||(input.LA(1) >= DOWNTO && input.LA(1) <= DYNAMIC)||(input.LA(1) >= ELSE && input.LA(1) <= END)||(input.LA(1) >= EXCEPT && input.LA(1) <= FUNCTION)||input.LA(1)==GOTO||input.LA(1)==HELPER||(input.LA(1) >= IF && input.LA(1) <= LABEL)||(input.LA(1) >= LIBRARY && input.LA(1) <= LOCAL)||input.LA(1)==MESSAGE||(input.LA(1) >= MOD && input.LA(1) <= NOT)||(input.LA(1) >= OBJECT && input.LA(1) <= PLATFORM)||input.LA(1)==POINTER||(input.LA(1) >= PRIVATE && input.LA(1) <= PUBLISHED)||input.LA(1)==RAISE||(input.LA(1) >= READ && input.LA(1) <= RESOURCESTRING)||(input.LA(1) >= SAFECALL && input.LA(1) <= SEALED)||(input.LA(1) >= SET && input.LA(1) <= SHR)||(input.LA(1) >= STATIC && input.LA(1) <= TYPE)||(input.LA(1) >= UNIT && input.LA(1) <= USES)||(input.LA(1) >= VAR && input.LA(1) <= WRITEONLY)||input.LA(1)==XOR ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set918));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 169, keywordsAsIdentifier_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "keywordsAsIdentifier"


	public static class identList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "identList"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:705:1: identList : ident ( ',' ident )* -> ^( ident ( ident )* ) ;
	public final DelphiParser.identList_return identList() throws RecognitionException {
		DelphiParser.identList_return retval = new DelphiParser.identList_return();
		retval.start = input.LT(1);
		int identList_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal920=null;
		ParserRuleReturnScope ident919 =null;
		ParserRuleReturnScope ident921 =null;

		Object char_literal920_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 170) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:705:30: ( ident ( ',' ident )* -> ^( ident ( ident )* ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:705:32: ident ( ',' ident )*
			{
			pushFollow(FOLLOW_ident_in_identList20659);
			ident919=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_ident.add(ident919.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:705:38: ( ',' ident )*
			loop290:
			while (true) {
				int alt290=2;
				int LA290_0 = input.LA(1);
				if ( (LA290_0==COMMA) ) {
					alt290=1;
				}

				switch (alt290) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:705:39: ',' ident
					{
					char_literal920=(Token)match(input,COMMA,FOLLOW_COMMA_in_identList20662); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(char_literal920);

					pushFollow(FOLLOW_ident_in_identList20664);
					ident921=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident921.getTree());
					}
					break;

				default :
					break loop290;
				}
			}

			// AST REWRITE
			// elements: ident, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 705:51: -> ^( ident ( ident )* )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:705:54: ^( ident ( ident )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_ident.nextNode(), root_1);
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:705:62: ( ident )*
				while ( stream_ident.hasNext() ) {
					adaptor.addChild(root_1, stream_ident.nextTree());
				}
				stream_ident.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 170, identList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "identList"


	public static class identListFlat_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "identListFlat"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:707:1: identListFlat : ident ( ',' ident )* -> ident ( ident )* ;
	public final DelphiParser.identListFlat_return identListFlat() throws RecognitionException {
		DelphiParser.identListFlat_return retval = new DelphiParser.identListFlat_return();
		retval.start = input.LT(1);
		int identListFlat_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal923=null;
		ParserRuleReturnScope ident922 =null;
		ParserRuleReturnScope ident924 =null;

		Object char_literal923_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 171) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:707:30: ( ident ( ',' ident )* -> ident ( ident )* )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:707:32: ident ( ',' ident )*
			{
			pushFollow(FOLLOW_ident_in_identListFlat20729);
			ident922=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_ident.add(ident922.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:707:38: ( ',' ident )*
			loop291:
			while (true) {
				int alt291=2;
				int LA291_0 = input.LA(1);
				if ( (LA291_0==COMMA) ) {
					alt291=1;
				}

				switch (alt291) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:707:39: ',' ident
					{
					char_literal923=(Token)match(input,COMMA,FOLLOW_COMMA_in_identListFlat20732); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(char_literal923);

					pushFollow(FOLLOW_ident_in_identListFlat20734);
					ident924=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident924.getTree());
					}
					break;

				default :
					break loop291;
				}
			}

			// AST REWRITE
			// elements: ident, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 707:51: -> ident ( ident )*
			{
				adaptor.addChild(root_0, stream_ident.nextTree());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:707:60: ( ident )*
				while ( stream_ident.hasNext() ) {
					adaptor.addChild(root_0, stream_ident.nextTree());
				}
				stream_ident.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 171, identListFlat_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "identListFlat"


	public static class label_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "label"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:709:1: label : ( TkIdentifier | TkIntNum | TkHexNum | usedKeywordsAsNames );
	public final DelphiParser.label_return label() throws RecognitionException {
		DelphiParser.label_return retval = new DelphiParser.label_return();
		retval.start = input.LT(1);
		int label_StartIndex = input.index();

		Object root_0 = null;

		Token TkIdentifier925=null;
		Token TkIntNum926=null;
		Token TkHexNum927=null;
		ParserRuleReturnScope usedKeywordsAsNames928 =null;

		Object TkIdentifier925_tree=null;
		Object TkIntNum926_tree=null;
		Object TkHexNum927_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 172) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:709:30: ( TkIdentifier | TkIntNum | TkHexNum | usedKeywordsAsNames )
			int alt292=4;
			switch ( input.LA(1) ) {
			case TkIdentifier:
				{
				alt292=1;
				}
				break;
			case TkIntNum:
				{
				alt292=2;
				}
				break;
			case TkHexNum:
				{
				alt292=3;
				}
				break;
			case ADD:
			case ANSISTRING:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case EXIT:
			case EXPORT:
			case FINAL:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STATIC:
			case STORED:
			case STRICT:
			case STRING:
			case UNSAFE:
			case VARIANT:
			case WRITE:
				{
				alt292=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 292, 0, input);
				throw nvae;
			}
			switch (alt292) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:709:32: TkIdentifier
					{
					root_0 = (Object)adaptor.nil();


					TkIdentifier925=(Token)match(input,TkIdentifier,FOLLOW_TkIdentifier_in_label20808); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TkIdentifier925_tree = (Object)adaptor.create(TkIdentifier925);
					adaptor.addChild(root_0, TkIdentifier925_tree);
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:710:32: TkIntNum
					{
					root_0 = (Object)adaptor.nil();


					TkIntNum926=(Token)match(input,TkIntNum,FOLLOW_TkIntNum_in_label20841); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TkIntNum926_tree = (Object)adaptor.create(TkIntNum926);
					adaptor.addChild(root_0, TkIntNum926_tree);
					}

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:711:32: TkHexNum
					{
					root_0 = (Object)adaptor.nil();


					TkHexNum927=(Token)match(input,TkHexNum,FOLLOW_TkHexNum_in_label20874); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TkHexNum927_tree = (Object)adaptor.create(TkHexNum927);
					adaptor.addChild(root_0, TkHexNum927_tree);
					}

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:712:32: usedKeywordsAsNames
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_usedKeywordsAsNames_in_label20907);
					usedKeywordsAsNames928=usedKeywordsAsNames();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, usedKeywordsAsNames928.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 172, label_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "label"


	public static class intRealNum_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "intRealNum"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:714:1: intRealNum : ( TkRealNum | intNum );
	public final DelphiParser.intRealNum_return intRealNum() throws RecognitionException {
		DelphiParser.intRealNum_return retval = new DelphiParser.intRealNum_return();
		retval.start = input.LT(1);
		int intRealNum_StartIndex = input.index();

		Object root_0 = null;

		Token TkRealNum929=null;
		ParserRuleReturnScope intNum930 =null;

		Object TkRealNum929_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 173) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:714:30: ( TkRealNum | intNum )
			int alt293=2;
			int LA293_0 = input.LA(1);
			if ( (LA293_0==TkRealNum) ) {
				alt293=1;
			}
			else if ( (LA293_0==TkHexNum||LA293_0==TkIntNum) ) {
				alt293=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 293, 0, input);
				throw nvae;
			}

			switch (alt293) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:714:32: TkRealNum
					{
					root_0 = (Object)adaptor.nil();


					TkRealNum929=(Token)match(input,TkRealNum,FOLLOW_TkRealNum_in_intRealNum20962); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TkRealNum929_tree = (Object)adaptor.create(TkRealNum929);
					adaptor.addChild(root_0, TkRealNum929_tree);
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:715:32: intNum
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_intNum_in_intRealNum20995);
					intNum930=intNum();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, intNum930.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 173, intRealNum_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "intRealNum"


	public static class intNum_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "intNum"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:717:1: intNum : ( TkIntNum | TkHexNum );
	public final DelphiParser.intNum_return intNum() throws RecognitionException {
		DelphiParser.intNum_return retval = new DelphiParser.intNum_return();
		retval.start = input.LT(1);
		int intNum_StartIndex = input.index();

		Object root_0 = null;

		Token set931=null;

		Object set931_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 174) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:717:30: ( TkIntNum | TkHexNum )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set931=input.LT(1);
			if ( input.LA(1)==TkHexNum||input.LA(1)==TkIntNum ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set931));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 174, intNum_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "intNum"


	public static class namespacedQualifiedIdent_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "namespacedQualifiedIdent"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:720:1: namespacedQualifiedIdent : ( namespaceName '.' )? qualifiedIdent ;
	public final DelphiParser.namespacedQualifiedIdent_return namespacedQualifiedIdent() throws RecognitionException {
		DelphiParser.namespacedQualifiedIdent_return retval = new DelphiParser.namespacedQualifiedIdent_return();
		retval.start = input.LT(1);
		int namespacedQualifiedIdent_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal933=null;
		ParserRuleReturnScope namespaceName932 =null;
		ParserRuleReturnScope qualifiedIdent934 =null;

		Object char_literal933_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 175) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:720:30: ( ( namespaceName '.' )? qualifiedIdent )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:720:32: ( namespaceName '.' )? qualifiedIdent
			{
			root_0 = (Object)adaptor.nil();


			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:720:32: ( namespaceName '.' )?
			int alt294=2;
			switch ( input.LA(1) ) {
				case TkIdentifier:
					{
					int LA294_1 = input.LA(2);
					if ( (LA294_1==DOT) ) {
						int LA294_4 = input.LA(3);
						if ( (synpred613_Delphi()) ) {
							alt294=1;
						}
					}
					}
					break;
				case 198:
					{
					int LA294_2 = input.LA(2);
					if ( (LA294_2==TkIdentifier) ) {
						int LA294_6 = input.LA(3);
						if ( (LA294_6==DOT) ) {
							int LA294_10 = input.LA(4);
							if ( (synpred613_Delphi()) ) {
								alt294=1;
							}
						}
					}
					else if ( ((LA294_2 >= ABSOLUTE && LA294_2 <= ASSEMBLY)||LA294_2==AT||LA294_2==AUTOMATED||(LA294_2 >= BEGIN && LA294_2 <= CLASS)||(LA294_2 >= CONST && LA294_2 <= CONTINUE)||(LA294_2 >= DEFAULT && LA294_2 <= DO)||(LA294_2 >= DOWNTO && LA294_2 <= DYNAMIC)||(LA294_2 >= ELSE && LA294_2 <= END)||(LA294_2 >= EXCEPT && LA294_2 <= FUNCTION)||LA294_2==GOTO||LA294_2==HELPER||(LA294_2 >= IF && LA294_2 <= LABEL)||(LA294_2 >= LIBRARY && LA294_2 <= LOCAL)||LA294_2==MESSAGE||(LA294_2 >= MOD && LA294_2 <= NOT)||(LA294_2 >= OBJECT && LA294_2 <= PLATFORM)||LA294_2==POINTER||(LA294_2 >= PRIVATE && LA294_2 <= PUBLISHED)||LA294_2==RAISE||(LA294_2 >= READ && LA294_2 <= RESOURCESTRING)||(LA294_2 >= SAFECALL && LA294_2 <= SEALED)||(LA294_2 >= SET && LA294_2 <= SHR)||(LA294_2 >= STATIC && LA294_2 <= TYPE)||(LA294_2 >= UNIT && LA294_2 <= USES)||(LA294_2 >= VAR && LA294_2 <= WRITEONLY)||LA294_2==XOR) ) {
						int LA294_7 = input.LA(3);
						if ( (LA294_7==DOT) ) {
							int LA294_11 = input.LA(4);
							if ( (synpred613_Delphi()) ) {
								alt294=1;
							}
						}
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case EXIT:
				case EXPORT:
				case FINAL:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STATIC:
				case STORED:
				case STRICT:
				case STRING:
				case UNSAFE:
				case VARIANT:
				case WRITE:
					{
					int LA294_3 = input.LA(2);
					if ( (LA294_3==DOT) ) {
						int LA294_8 = input.LA(3);
						if ( (synpred613_Delphi()) ) {
							alt294=1;
						}
					}
					}
					break;
			}
			switch (alt294) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:720:33: namespaceName '.'
					{
					pushFollow(FOLLOW_namespaceName_in_namespacedQualifiedIdent21129);
					namespaceName932=namespaceName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, namespaceName932.getTree());

					char_literal933=(Token)match(input,DOT,FOLLOW_DOT_in_namespacedQualifiedIdent21131); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal933_tree = (Object)adaptor.create(char_literal933);
					adaptor.addChild(root_0, char_literal933_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_qualifiedIdent_in_namespacedQualifiedIdent21135);
			qualifiedIdent934=qualifiedIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdent934.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 175, namespacedQualifiedIdent_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "namespacedQualifiedIdent"


	public static class namespaceName_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "namespaceName"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:722:1: namespaceName : ident ( '.' ident )* ;
	public final DelphiParser.namespaceName_return namespaceName() throws RecognitionException {
		DelphiParser.namespaceName_return retval = new DelphiParser.namespaceName_return();
		retval.start = input.LT(1);
		int namespaceName_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal936=null;
		ParserRuleReturnScope ident935 =null;
		ParserRuleReturnScope ident937 =null;

		Object char_literal936_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 176) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:722:30: ( ident ( '.' ident )* )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:722:32: ident ( '.' ident )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_ident_in_namespaceName21187);
			ident935=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident935.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:722:38: ( '.' ident )*
			loop295:
			while (true) {
				int alt295=2;
				alt295 = dfa295.predict(input);
				switch (alt295) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:722:39: '.' ident
					{
					char_literal936=(Token)match(input,DOT,FOLLOW_DOT_in_namespaceName21190); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal936_tree = (Object)adaptor.create(char_literal936);
					adaptor.addChild(root_0, char_literal936_tree);
					}

					pushFollow(FOLLOW_ident_in_namespaceName21192);
					ident937=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident937.getTree());

					}
					break;

				default :
					break loop295;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 176, namespaceName_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "namespaceName"


	public static class qualifiedIdent_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "qualifiedIdent"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:724:1: qualifiedIdent : ( ident '.' )* ident ;
	public final DelphiParser.qualifiedIdent_return qualifiedIdent() throws RecognitionException {
		DelphiParser.qualifiedIdent_return retval = new DelphiParser.qualifiedIdent_return();
		retval.start = input.LT(1);
		int qualifiedIdent_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal939=null;
		ParserRuleReturnScope ident938 =null;
		ParserRuleReturnScope ident940 =null;

		Object char_literal939_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 177) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:724:30: ( ( ident '.' )* ident )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:724:33: ( ident '.' )* ident
			{
			root_0 = (Object)adaptor.nil();


			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:724:33: ( ident '.' )*
			loop296:
			while (true) {
				int alt296=2;
				switch ( input.LA(1) ) {
				case TkIdentifier:
					{
					int LA296_1 = input.LA(2);
					if ( (LA296_1==DOT) ) {
						int LA296_5 = input.LA(3);
						if ( (synpred615_Delphi()) ) {
							alt296=1;
						}

					}

					}
					break;
				case 198:
					{
					int LA296_2 = input.LA(2);
					if ( (LA296_2==TkIdentifier) ) {
						int LA296_6 = input.LA(3);
						if ( (LA296_6==DOT) ) {
							int LA296_10 = input.LA(4);
							if ( (synpred615_Delphi()) ) {
								alt296=1;
							}

						}

					}
					else if ( ((LA296_2 >= ABSOLUTE && LA296_2 <= ASSEMBLY)||LA296_2==AT||LA296_2==AUTOMATED||(LA296_2 >= BEGIN && LA296_2 <= CLASS)||(LA296_2 >= CONST && LA296_2 <= CONTINUE)||(LA296_2 >= DEFAULT && LA296_2 <= DO)||(LA296_2 >= DOWNTO && LA296_2 <= DYNAMIC)||(LA296_2 >= ELSE && LA296_2 <= END)||(LA296_2 >= EXCEPT && LA296_2 <= FUNCTION)||LA296_2==GOTO||LA296_2==HELPER||(LA296_2 >= IF && LA296_2 <= LABEL)||(LA296_2 >= LIBRARY && LA296_2 <= LOCAL)||LA296_2==MESSAGE||(LA296_2 >= MOD && LA296_2 <= NOT)||(LA296_2 >= OBJECT && LA296_2 <= PLATFORM)||LA296_2==POINTER||(LA296_2 >= PRIVATE && LA296_2 <= PUBLISHED)||LA296_2==RAISE||(LA296_2 >= READ && LA296_2 <= RESOURCESTRING)||(LA296_2 >= SAFECALL && LA296_2 <= SEALED)||(LA296_2 >= SET && LA296_2 <= SHR)||(LA296_2 >= STATIC && LA296_2 <= TYPE)||(LA296_2 >= UNIT && LA296_2 <= USES)||(LA296_2 >= VAR && LA296_2 <= WRITEONLY)||LA296_2==XOR) ) {
						int LA296_7 = input.LA(3);
						if ( (LA296_7==DOT) ) {
							int LA296_11 = input.LA(4);
							if ( (synpred615_Delphi()) ) {
								alt296=1;
							}

						}

					}

					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case EXIT:
				case EXPORT:
				case FINAL:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STATIC:
				case STORED:
				case STRICT:
				case STRING:
				case UNSAFE:
				case VARIANT:
				case WRITE:
					{
					int LA296_3 = input.LA(2);
					if ( (LA296_3==DOT) ) {
						int LA296_8 = input.LA(3);
						if ( (synpred615_Delphi()) ) {
							alt296=1;
						}

					}

					}
					break;
				}
				switch (alt296) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:724:34: ident '.'
					{
					pushFollow(FOLLOW_ident_in_qualifiedIdent21247);
					ident938=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident938.getTree());

					char_literal939=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedIdent21249); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal939_tree = (Object)adaptor.create(char_literal939);
					adaptor.addChild(root_0, char_literal939_tree);
					}

					}
					break;

				default :
					break loop296;
				}
			}

			pushFollow(FOLLOW_ident_in_qualifiedIdent21254);
			ident940=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident940.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 177, qualifiedIdent_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "qualifiedIdent"

	// $ANTLR start synpred23_Delphi
	public final void synpred23_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:33: ( declSection )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:33: declSection
		{
		pushFollow(FOLLOW_declSection_in_synpred23_Delphi1584);
		declSection();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred23_Delphi

	// $ANTLR start synpred24_Delphi
	public final void synpred24_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:48: ( blockBody )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:48: blockBody
		{
		pushFollow(FOLLOW_blockBody_in_synpred24_Delphi1589);
		blockBody();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred24_Delphi

	// $ANTLR start synpred30_Delphi
	public final void synpred30_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:135:32: ( exportedProcHeading )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:135:32: exportedProcHeading
		{
		pushFollow(FOLLOW_exportedProcHeading_in_synpred30_Delphi1866);
		exportedProcHeading();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred30_Delphi

	// $ANTLR start synpred31_Delphi
	public final void synpred31_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:136:32: ( methodDecl )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:136:32: methodDecl
		{
		pushFollow(FOLLOW_methodDecl_in_synpred31_Delphi1899);
		methodDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred31_Delphi

	// $ANTLR start synpred32_Delphi
	public final void synpred32_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:137:32: ( procDecl )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:137:32: procDecl
		{
		pushFollow(FOLLOW_procDecl_in_synpred32_Delphi1932);
		procDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred32_Delphi

	// $ANTLR start synpred36_Delphi
	public final void synpred36_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:143:32: ( exportedProcHeading )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:143:32: exportedProcHeading
		{
		pushFollow(FOLLOW_exportedProcHeading_in_synpred36_Delphi2116);
		exportedProcHeading();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred36_Delphi

	// $ANTLR start synpred38_Delphi
	public final void synpred38_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:145:32: ( procDecl )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:145:32: procDecl
		{
		pushFollow(FOLLOW_procDecl_in_synpred38_Delphi2182);
		procDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred38_Delphi

	// $ANTLR start synpred40_Delphi
	public final void synpred40_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:42: ( constDeclaration )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:42: constDeclaration
		{
		pushFollow(FOLLOW_constDeclaration_in_synpred40_Delphi2331);
		constDeclaration();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred40_Delphi

	// $ANTLR start synpred42_Delphi
	public final void synpred42_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:33: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred42_Delphi2486);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred42_Delphi

	// $ANTLR start synpred45_Delphi
	public final void synpred45_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:56: ( typeDeclaration )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:56: typeDeclaration
		{
		pushFollow(FOLLOW_typeDeclaration_in_synpred45_Delphi2580);
		typeDeclaration();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred45_Delphi

	// $ANTLR start synpred46_Delphi
	public final void synpred46_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:33: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred46_Delphi2646);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred46_Delphi

	// $ANTLR start synpred48_Delphi
	public final void synpred48_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:55: ( varDeclaration )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:55: varDeclaration
		{
		pushFollow(FOLLOW_varDeclaration_in_synpred48_Delphi2743);
		varDeclaration();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred48_Delphi

	// $ANTLR start synpred50_Delphi
	public final void synpred50_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:33: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred50_Delphi2903);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred50_Delphi

	// $ANTLR start synpred53_Delphi
	public final void synpred53_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:32: ( 'absolute' ident )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:32: 'absolute' ident
		{
		match(input,ABSOLUTE,FOLLOW_ABSOLUTE_in_synpred53_Delphi2995); if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred53_Delphi2997);
		ident();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred53_Delphi

	// $ANTLR start synpred54_Delphi
	public final void synpred54_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:170:32: ( 'absolute' constExpression )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:170:32: 'absolute' constExpression
		{
		match(input,ABSOLUTE,FOLLOW_ABSOLUTE_in_synpred54_Delphi3030); if (state.failed) return;

		pushFollow(FOLLOW_constExpression_in_synpred54_Delphi3032);
		constExpression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred54_Delphi

	// $ANTLR start synpred61_Delphi
	public final void synpred61_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:180:32: ( strucType )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:180:32: strucType
		{
		pushFollow(FOLLOW_strucType_in_synpred61_Delphi3277);
		strucType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred61_Delphi

	// $ANTLR start synpred62_Delphi
	public final void synpred62_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:181:32: ( pointerType )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:181:32: pointerType
		{
		pushFollow(FOLLOW_pointerType_in_synpred62_Delphi3310);
		pointerType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred62_Delphi

	// $ANTLR start synpred63_Delphi
	public final void synpred63_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:182:32: ( stringType )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:182:32: stringType
		{
		pushFollow(FOLLOW_stringType_in_synpred63_Delphi3343);
		stringType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred63_Delphi

	// $ANTLR start synpred64_Delphi
	public final void synpred64_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:183:32: ( procedureType )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:183:32: procedureType
		{
		pushFollow(FOLLOW_procedureType_in_synpred64_Delphi3376);
		procedureType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred64_Delphi

	// $ANTLR start synpred65_Delphi
	public final void synpred65_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:184:32: ( variantType )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:184:32: variantType
		{
		pushFollow(FOLLOW_variantType_in_synpred65_Delphi3409);
		variantType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred65_Delphi

	// $ANTLR start synpred67_Delphi
	public final void synpred67_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:50: ( genericPostfix )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:50: genericPostfix
		{
		pushFollow(FOLLOW_genericPostfix_in_synpred67_Delphi3450);
		genericPostfix();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred67_Delphi

	// $ANTLR start synpred68_Delphi
	public final void synpred68_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:68: ( '.' typeDecl )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:68: '.' typeDecl
		{
		match(input,DOT,FOLLOW_DOT_in_synpred68_Delphi3455); if (state.failed) return;

		pushFollow(FOLLOW_typeDecl_in_synpred68_Delphi3457);
		typeDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred68_Delphi

	// $ANTLR start synpred69_Delphi
	public final void synpred69_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:84: ( paranthesePostfix )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:84: paranthesePostfix
		{
		pushFollow(FOLLOW_paranthesePostfix_in_synpred69_Delphi3462);
		paranthesePostfix();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred69_Delphi

	// $ANTLR start synpred70_Delphi
	public final void synpred70_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:32: ( ( 'type' )? typeId ( genericPostfix )? ( '.' typeDecl )* ( paranthesePostfix )? )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:32: ( 'type' )? typeId ( genericPostfix )? ( '.' typeDecl )* ( paranthesePostfix )?
		{
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:32: ( 'type' )?
		int alt299=2;
		int LA299_0 = input.LA(1);
		if ( (LA299_0==TYPE) ) {
			alt299=1;
		}
		switch (alt299) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:33: 'type'
				{
				match(input,TYPE,FOLLOW_TYPE_in_synpred70_Delphi3443); if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_typeId_in_synpred70_Delphi3447);
		typeId();
		state._fsp--;
		if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:49: ( genericPostfix )?
		int alt300=2;
		int LA300_0 = input.LA(1);
		if ( (LA300_0==LT) ) {
			alt300=1;
		}
		switch (alt300) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:50: genericPostfix
				{
				pushFollow(FOLLOW_genericPostfix_in_synpred70_Delphi3450);
				genericPostfix();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:67: ( '.' typeDecl )*
		loop301:
		while (true) {
			int alt301=2;
			int LA301_0 = input.LA(1);
			if ( (LA301_0==DOT) ) {
				alt301=1;
			}

			switch (alt301) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:68: '.' typeDecl
				{
				match(input,DOT,FOLLOW_DOT_in_synpred70_Delphi3455); if (state.failed) return;

				pushFollow(FOLLOW_typeDecl_in_synpred70_Delphi3457);
				typeDecl();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop301;
			}
		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:83: ( paranthesePostfix )?
		int alt302=2;
		int LA302_0 = input.LA(1);
		if ( (LA302_0==LPAREN) ) {
			alt302=1;
		}
		switch (alt302) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:84: paranthesePostfix
				{
				pushFollow(FOLLOW_paranthesePostfix_in_synpred70_Delphi3462);
				paranthesePostfix();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred70_Delphi

	// $ANTLR start synpred80_Delphi
	public final void synpred80_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:204:32: ( 'const' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:204:32: 'const'
		{
		match(input,CONST,FOLLOW_CONST_in_synpred80_Delphi4043); if (state.failed) return;

		}

	}
	// $ANTLR end synpred80_Delphi

	// $ANTLR start synpred81_Delphi
	public final void synpred81_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:210:40: ( 'of' typeDecl )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:210:40: 'of' typeDecl
		{
		match(input,OF,FOLLOW_OF_in_synpred81_Delphi4215); if (state.failed) return;

		pushFollow(FOLLOW_typeDecl_in_synpred81_Delphi4217);
		typeDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred81_Delphi

	// $ANTLR start synpred83_Delphi
	public final void synpred83_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:215:42: ( '[' expression ']' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:215:42: '[' expression ']'
		{
		match(input,LBRACK,FOLLOW_LBRACK_in_synpred83_Delphi4366); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred83_Delphi4368);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,RBRACK,FOLLOW_RBRACK_in_synpred83_Delphi4370); if (state.failed) return;

		}

	}
	// $ANTLR end synpred83_Delphi

	// $ANTLR start synpred86_Delphi
	public final void synpred86_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:216:54: ( codePageNumber )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:216:54: codePageNumber
		{
		pushFollow(FOLLOW_codePageNumber_in_synpred86_Delphi4417);
		codePageNumber();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred86_Delphi

	// $ANTLR start synpred87_Delphi
	public final void synpred87_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:220:32: ( methodType )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:220:32: methodType
		{
		pushFollow(FOLLOW_methodType_in_synpred87_Delphi4526);
		methodType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred87_Delphi

	// $ANTLR start synpred88_Delphi
	public final void synpred88_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:221:32: ( simpleProcedureType )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:221:32: simpleProcedureType
		{
		pushFollow(FOLLOW_simpleProcedureType_in_synpred88_Delphi4559);
		simpleProcedureType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred88_Delphi

	// $ANTLR start synpred90_Delphi
	public final void synpred90_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:55: ( ( ';' )? callConventionNoSemi )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:55: ( ';' )? callConventionNoSemi
		{
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:55: ( ';' )?
		int alt308=2;
		int LA308_0 = input.LA(1);
		if ( (LA308_0==SEMI) ) {
			alt308=1;
		}
		switch (alt308) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:56: ';'
				{
				match(input,SEMI,FOLLOW_SEMI_in_synpred90_Delphi4702); if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_callConventionNoSemi_in_synpred90_Delphi4706);
		callConventionNoSemi();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred90_Delphi

	// $ANTLR start synpred92_Delphi
	public final void synpred92_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:74: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:74: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred92_Delphi4814);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred92_Delphi

	// $ANTLR start synpred94_Delphi
	public final void synpred94_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:231:45: ( formalParameterSection )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:231:45: formalParameterSection
		{
		pushFollow(FOLLOW_formalParameterSection_in_synpred94_Delphi4869);
		formalParameterSection();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred94_Delphi

	// $ANTLR start synpred95_Delphi
	public final void synpred95_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:235:32: ( ident )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:235:32: ident
		{
		pushFollow(FOLLOW_ident_in_synpred95_Delphi4981);
		ident();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred95_Delphi

	// $ANTLR start synpred96_Delphi
	public final void synpred96_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:236:32: ( subRangeType )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:236:32: subRangeType
		{
		pushFollow(FOLLOW_subRangeType_in_synpred96_Delphi5014);
		subRangeType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred96_Delphi

	// $ANTLR start synpred97_Delphi
	public final void synpred97_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:239:49: ( '..' constExpression )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:239:49: '..' constExpression
		{
		match(input,DOTDOT,FOLLOW_DOTDOT_in_synpred97_Delphi5103); if (state.failed) return;

		pushFollow(FOLLOW_constExpression_in_synpred97_Delphi5105);
		constExpression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred97_Delphi

	// $ANTLR start synpred110_Delphi
	public final void synpred110_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:266:32: ( classTypeTypeDecl )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:266:32: classTypeTypeDecl
		{
		pushFollow(FOLLOW_classTypeTypeDecl_in_synpred110_Delphi5767);
		classTypeTypeDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred110_Delphi

	// $ANTLR start synpred111_Delphi
	public final void synpred111_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:267:32: ( classTypeDecl )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:267:32: classTypeDecl
		{
		pushFollow(FOLLOW_classTypeDecl_in_synpred111_Delphi5800);
		classTypeDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred111_Delphi

	// $ANTLR start synpred119_Delphi
	public final void synpred119_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:276:32: ( 'class' ( classState )? ( classParent )? ( classItem )* 'end' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:276:32: 'class' ( classState )? ( classParent )? ( classItem )* 'end'
		{
		match(input,CLASS,FOLLOW_CLASS_in_synpred119_Delphi6125); if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:276:40: ( classState )?
		int alt313=2;
		int LA313_0 = input.LA(1);
		if ( (LA313_0==ABSTRACT||LA313_0==SEALED) ) {
			alt313=1;
		}
		switch (alt313) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:276:41: classState
				{
				pushFollow(FOLLOW_classState_in_synpred119_Delphi6128);
				classState();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:276:54: ( classParent )?
		int alt314=2;
		int LA314_0 = input.LA(1);
		if ( (LA314_0==LPAREN) ) {
			alt314=1;
		}
		switch (alt314) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:276:55: classParent
				{
				pushFollow(FOLLOW_classParent_in_synpred119_Delphi6133);
				classParent();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:276:69: ( classItem )*
		loop315:
		while (true) {
			int alt315=2;
			int LA315_0 = input.LA(1);
			if ( (LA315_0==ADD||LA315_0==ANSISTRING||LA315_0==AT||LA315_0==AUTOMATED||LA315_0==BREAK||LA315_0==CLASS||(LA315_0 >= CONST && LA315_0 <= CONTINUE)||LA315_0==DEFAULT||LA315_0==DESTRUCTOR||LA315_0==EXIT||LA315_0==EXPORT||LA315_0==FINAL||LA315_0==FUNCTION||LA315_0==IMPLEMENTS||LA315_0==INDEX||LA315_0==LBRACK||LA315_0==LOCAL||LA315_0==MESSAGE||LA315_0==NAME||LA315_0==OBJECT||LA315_0==OPERATOR||LA315_0==OUT||LA315_0==POINTER||(LA315_0 >= PRIVATE && LA315_0 <= PROCEDURE)||(LA315_0 >= PROPERTY && LA315_0 <= PUBLISHED)||(LA315_0 >= READ && LA315_0 <= READONLY)||(LA315_0 >= REFERENCE && LA315_0 <= REGISTER)||LA315_0==REMOVE||LA315_0==RESOURCESTRING||LA315_0==STATIC||(LA315_0 >= STORED && LA315_0 <= STRING)||LA315_0==THREADVAR||LA315_0==TYPE||LA315_0==TkIdentifier||LA315_0==UNSAFE||LA315_0==VAR||LA315_0==VARIANT||LA315_0==WRITE||LA315_0==198) ) {
				alt315=1;
			}

			switch (alt315) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:276:70: classItem
				{
				pushFollow(FOLLOW_classItem_in_synpred119_Delphi6138);
				classItem();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop315;
			}
		}

		match(input,END,FOLLOW_END_in_synpred119_Delphi6142); if (state.failed) return;

		}

	}
	// $ANTLR end synpred119_Delphi

	// $ANTLR start synpred120_Delphi
	public final void synpred120_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:277:41: ( classParent )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:277:41: classParent
		{
		pushFollow(FOLLOW_classParent_in_synpred120_Delphi6196);
		classParent();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred120_Delphi

	// $ANTLR start synpred123_Delphi
	public final void synpred123_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:32: ( visibility )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:32: visibility
		{
		pushFollow(FOLLOW_visibility_in_synpred123_Delphi6432);
		visibility();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred123_Delphi

	// $ANTLR start synpred124_Delphi
	public final void synpred124_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:285:32: ( classMethod )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:285:32: classMethod
		{
		pushFollow(FOLLOW_classMethod_in_synpred124_Delphi6465);
		classMethod();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred124_Delphi

	// $ANTLR start synpred125_Delphi
	public final void synpred125_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:286:32: ( classField )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:286:32: classField
		{
		pushFollow(FOLLOW_classField_in_synpred125_Delphi6498);
		classField();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred125_Delphi

	// $ANTLR start synpred126_Delphi
	public final void synpred126_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:287:32: ( classProperty )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:287:32: classProperty
		{
		pushFollow(FOLLOW_classProperty_in_synpred126_Delphi6531);
		classProperty();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred126_Delphi

	// $ANTLR start synpred133_Delphi
	public final void synpred133_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:295:32: ( classMethod )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:295:32: classMethod
		{
		pushFollow(FOLLOW_classMethod_in_synpred133_Delphi6801);
		classMethod();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred133_Delphi

	// $ANTLR start synpred134_Delphi
	public final void synpred134_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:296:32: ( classProperty )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:296:32: classProperty
		{
		pushFollow(FOLLOW_classProperty_in_synpred134_Delphi6834);
		classProperty();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred134_Delphi

	// $ANTLR start synpred141_Delphi
	public final void synpred141_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:301:32: ( interfaceKey ( classParent )? ( interfaceGuid )? ( interfaceItem )* 'end' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:301:32: interfaceKey ( classParent )? ( interfaceGuid )? ( interfaceItem )* 'end'
		{
		pushFollow(FOLLOW_interfaceKey_in_synpred141_Delphi6986);
		interfaceKey();
		state._fsp--;
		if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:301:45: ( classParent )?
		int alt316=2;
		int LA316_0 = input.LA(1);
		if ( (LA316_0==LPAREN) ) {
			alt316=1;
		}
		switch (alt316) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:301:46: classParent
				{
				pushFollow(FOLLOW_classParent_in_synpred141_Delphi6989);
				classParent();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:301:60: ( interfaceGuid )?
		int alt317=2;
		int LA317_0 = input.LA(1);
		if ( (LA317_0==LBRACK) ) {
			int LA317_1 = input.LA(2);
			if ( (LA317_1==QuotedString) ) {
				alt317=1;
			}
		}
		switch (alt317) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:301:61: interfaceGuid
				{
				pushFollow(FOLLOW_interfaceGuid_in_synpred141_Delphi6994);
				interfaceGuid();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:301:77: ( interfaceItem )*
		loop318:
		while (true) {
			int alt318=2;
			int LA318_0 = input.LA(1);
			if ( (LA318_0==CLASS||LA318_0==CONSTRUCTOR||LA318_0==DESTRUCTOR||LA318_0==FUNCTION||LA318_0==LBRACK||LA318_0==OPERATOR||LA318_0==PROCEDURE||LA318_0==PROPERTY) ) {
				alt318=1;
			}

			switch (alt318) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:301:78: interfaceItem
				{
				pushFollow(FOLLOW_interfaceItem_in_synpred141_Delphi6999);
				interfaceItem();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop318;
			}
		}

		match(input,END,FOLLOW_END_in_synpred141_Delphi7003); if (state.failed) return;

		}

	}
	// $ANTLR end synpred141_Delphi

	// $ANTLR start synpred142_Delphi
	public final void synpred142_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:303:46: ( classParent )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:303:46: classParent
		{
		pushFollow(FOLLOW_classParent_in_synpred142_Delphi7097);
		classParent();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred142_Delphi

	// $ANTLR start synpred144_Delphi
	public final void synpred144_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:311:32: ( classMethod )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:311:32: classMethod
		{
		pushFollow(FOLLOW_classMethod_in_synpred144_Delphi7340);
		classMethod();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred144_Delphi

	// $ANTLR start synpred145_Delphi
	public final void synpred145_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:312:33: ( 'class' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:312:33: 'class'
		{
		match(input,CLASS,FOLLOW_CLASS_in_synpred145_Delphi7374); if (state.failed) return;

		}

	}
	// $ANTLR end synpred145_Delphi

	// $ANTLR start synpred148_Delphi
	public final void synpred148_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:316:32: ( visibility )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:316:32: visibility
		{
		pushFollow(FOLLOW_visibility_in_synpred148_Delphi7514);
		visibility();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred148_Delphi

	// $ANTLR start synpred149_Delphi
	public final void synpred149_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:317:32: ( classMethod )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:317:32: classMethod
		{
		pushFollow(FOLLOW_classMethod_in_synpred149_Delphi7547);
		classMethod();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred149_Delphi

	// $ANTLR start synpred150_Delphi
	public final void synpred150_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:320:32: ( simpleRecord )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:320:32: simpleRecord
		{
		pushFollow(FOLLOW_simpleRecord_in_synpred150_Delphi7635);
		simpleRecord();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred150_Delphi

	// $ANTLR start synpred151_Delphi
	public final void synpred151_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:323:42: ( recordField )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:323:42: recordField
		{
		pushFollow(FOLLOW_recordField_in_synpred151_Delphi7724);
		recordField();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred151_Delphi

	// $ANTLR start synpred154_Delphi
	public final void synpred154_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:327:32: ( visibility )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:327:32: visibility
		{
		pushFollow(FOLLOW_visibility_in_synpred154_Delphi7874);
		visibility();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred154_Delphi

	// $ANTLR start synpred155_Delphi
	public final void synpred155_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:328:32: ( classMethod )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:328:32: classMethod
		{
		pushFollow(FOLLOW_classMethod_in_synpred155_Delphi7912);
		classMethod();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred155_Delphi

	// $ANTLR start synpred156_Delphi
	public final void synpred156_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:329:32: ( classProperty )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:329:32: classProperty
		{
		pushFollow(FOLLOW_classProperty_in_synpred156_Delphi7945);
		classProperty();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred156_Delphi

	// $ANTLR start synpred159_Delphi
	public final void synpred159_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:332:32: ( recordField )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:332:32: recordField
		{
		pushFollow(FOLLOW_recordField_in_synpred159_Delphi8044);
		recordField();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred159_Delphi

	// $ANTLR start synpred173_Delphi
	public final void synpred173_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:348:32: ( classMethod )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:348:32: classMethod
		{
		pushFollow(FOLLOW_classMethod_in_synpred173_Delphi8582);
		classMethod();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred173_Delphi

	// $ANTLR start synpred174_Delphi
	public final void synpred174_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:33: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred174_Delphi8670);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred174_Delphi

	// $ANTLR start synpred179_Delphi
	public final void synpred179_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:32: ( ( customAttribute )? ( 'class' )? methodKey ident ( genericDefinition )? ( formalParameterSection )? ';' ( methodDirective )* )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:32: ( customAttribute )? ( 'class' )? methodKey ident ( genericDefinition )? ( formalParameterSection )? ';' ( methodDirective )*
		{
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:32: ( customAttribute )?
		int alt319=2;
		switch ( input.LA(1) ) {
			case LBRACK:
				{
				alt319=1;
				}
				break;
			case CLASS:
				{
				int LA319_2 = input.LA(2);
				if ( (synpred174_Delphi()) ) {
					alt319=1;
				}
				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case PROCEDURE:
				{
				int LA319_3 = input.LA(2);
				if ( (synpred174_Delphi()) ) {
					alt319=1;
				}
				}
				break;
		}
		switch (alt319) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:33: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred179_Delphi8670);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:51: ( 'class' )?
		int alt320=2;
		int LA320_0 = input.LA(1);
		if ( (LA320_0==CLASS) ) {
			alt320=1;
		}
		switch (alt320) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:52: 'class'
				{
				match(input,CLASS,FOLLOW_CLASS_in_synpred179_Delphi8675); if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_methodKey_in_synpred179_Delphi8679);
		methodKey();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred179_Delphi8681);
		ident();
		state._fsp--;
		if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:78: ( genericDefinition )?
		int alt321=2;
		int LA321_0 = input.LA(1);
		if ( (LA321_0==LT) ) {
			alt321=1;
		}
		switch (alt321) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:79: genericDefinition
				{
				pushFollow(FOLLOW_genericDefinition_in_synpred179_Delphi8684);
				genericDefinition();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:99: ( formalParameterSection )?
		int alt322=2;
		int LA322_0 = input.LA(1);
		if ( (LA322_0==LPAREN) ) {
			alt322=1;
		}
		switch (alt322) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:100: formalParameterSection
				{
				pushFollow(FOLLOW_formalParameterSection_in_synpred179_Delphi8689);
				formalParameterSection();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		match(input,SEMI,FOLLOW_SEMI_in_synpred179_Delphi8693); if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:129: ( methodDirective )*
		loop323:
		while (true) {
			int alt323=2;
			int LA323_0 = input.LA(1);
			if ( (LA323_0==ABSTRACT||LA323_0==ASSEMBLER||LA323_0==CDECL||LA323_0==DEPRECATED||LA323_0==DISPID||LA323_0==DYNAMIC||(LA323_0 >= EXPERIMENTAL && LA323_0 <= EXPORT)||LA323_0==FAR||LA323_0==FINAL||LA323_0==INLINE||(LA323_0 >= LIBRARY && LA323_0 <= LOCAL)||LA323_0==MESSAGE||LA323_0==NEAR||(LA323_0 >= OVERLOAD && LA323_0 <= OVERRIDE)||(LA323_0 >= PASCAL && LA323_0 <= PLATFORM)||(LA323_0 >= REGISTER && LA323_0 <= REINTRODUCE)||LA323_0==SAFECALL||(LA323_0 >= STATIC && LA323_0 <= STDCALL)||LA323_0==VIRTUAL) ) {
				alt323=1;
			}

			switch (alt323) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:130: methodDirective
				{
				pushFollow(FOLLOW_methodDirective_in_synpred179_Delphi8696);
				methodDirective();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop323;
			}
		}

		}

	}
	// $ANTLR end synpred179_Delphi

	// $ANTLR start synpred180_Delphi
	public final void synpred180_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:33: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred180_Delphi8804);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred180_Delphi

	// $ANTLR start synpred184_Delphi
	public final void synpred184_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:131: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:131: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred184_Delphi8830);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred184_Delphi

	// $ANTLR start synpred186_Delphi
	public final void synpred186_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:32: ( ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( methodDirective )* )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:32: ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( methodDirective )*
		{
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:32: ( customAttribute )?
		int alt324=2;
		switch ( input.LA(1) ) {
			case LBRACK:
				{
				alt324=1;
				}
				break;
			case CLASS:
				{
				int LA324_2 = input.LA(2);
				if ( (synpred180_Delphi()) ) {
					alt324=1;
				}
				}
				break;
			case FUNCTION:
				{
				int LA324_3 = input.LA(2);
				if ( (synpred180_Delphi()) ) {
					alt324=1;
				}
				}
				break;
		}
		switch (alt324) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:33: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred186_Delphi8804);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:51: ( 'class' )?
		int alt325=2;
		int LA325_0 = input.LA(1);
		if ( (LA325_0==CLASS) ) {
			alt325=1;
		}
		switch (alt325) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:52: 'class'
				{
				match(input,CLASS,FOLLOW_CLASS_in_synpred186_Delphi8809); if (state.failed) return;

				}
				break;

		}

		match(input,FUNCTION,FOLLOW_FUNCTION_in_synpred186_Delphi8813); if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred186_Delphi8815);
		ident();
		state._fsp--;
		if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:79: ( genericDefinition )?
		int alt326=2;
		int LA326_0 = input.LA(1);
		if ( (LA326_0==LT) ) {
			alt326=1;
		}
		switch (alt326) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:80: genericDefinition
				{
				pushFollow(FOLLOW_genericDefinition_in_synpred186_Delphi8818);
				genericDefinition();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:100: ( formalParameterSection )?
		int alt327=2;
		int LA327_0 = input.LA(1);
		if ( (LA327_0==LPAREN) ) {
			alt327=1;
		}
		switch (alt327) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:101: formalParameterSection
				{
				pushFollow(FOLLOW_formalParameterSection_in_synpred186_Delphi8823);
				formalParameterSection();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		match(input,COLON,FOLLOW_COLON_in_synpred186_Delphi8827); if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:130: ( customAttribute )?
		int alt328=2;
		switch ( input.LA(1) ) {
			case LBRACK:
				{
				int LA328_1 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case PACKED:
				{
				int LA328_2 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case ARRAY:
				{
				int LA328_3 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case SET:
				{
				int LA328_4 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case FILE:
				{
				int LA328_5 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case CLASS:
				{
				int LA328_6 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case DISPINTERFACE:
			case INTERFACE:
				{
				int LA328_7 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case OBJECT:
				{
				int LA328_8 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case RECORD:
				{
				int LA328_9 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case POINTER2:
				{
				int LA328_10 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case POINTER:
				{
				int LA328_11 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case STRING:
				{
				int LA328_12 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case TYPE:
				{
				int LA328_13 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case ANSISTRING:
				{
				int LA328_14 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case FUNCTION:
				{
				int LA328_15 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case PROCEDURE:
				{
				int LA328_16 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case REFERENCE:
				{
				int LA328_17 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case VARIANT:
				{
				int LA328_18 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case TkIdentifier:
				{
				int LA328_19 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case 198:
				{
				int LA328_20 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case ADD:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case EXIT:
			case EXPORT:
			case FINAL:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OPERATOR:
			case OUT:
			case READ:
			case READONLY:
			case REGISTER:
			case REMOVE:
			case STATIC:
			case STORED:
			case STRICT:
			case UNSAFE:
			case WRITE:
				{
				int LA328_21 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case LPAREN:
				{
				int LA328_22 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case AT2:
				{
				int LA328_23 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case 199:
				{
				int LA328_24 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case NOT:
				{
				int LA328_25 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case PLUS:
				{
				int LA328_26 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case MINUS:
				{
				int LA328_27 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case TkRealNum:
				{
				int LA328_28 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case TkHexNum:
			case TkIntNum:
				{
				int LA328_29 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case TRUE:
				{
				int LA328_30 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case FALSE:
				{
				int LA328_31 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case NIL:
				{
				int LA328_32 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case ControlString:
				{
				int LA328_33 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case QuotedString:
				{
				int LA328_34 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case INHERITED:
				{
				int LA328_35 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case DOT:
				{
				int LA328_36 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case LT:
				{
				int LA328_37 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case AND:
			case AS:
			case DIV:
			case MOD:
			case OR:
			case SHL:
			case SHR:
			case SLASH:
			case STAR:
			case XOR:
				{
				int LA328_38 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case EQUAL:
				{
				int LA328_39 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case GE:
			case GT:
			case IN:
			case IS:
			case LE:
			case NOT_EQUAL:
				{
				int LA328_40 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case DOTDOT:
				{
				int LA328_41 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
			case SEMI:
				{
				int LA328_42 = input.LA(2);
				if ( (synpred184_Delphi()) ) {
					alt328=1;
				}
				}
				break;
		}
		switch (alt328) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:131: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred186_Delphi8830);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_typeDecl_in_synpred186_Delphi8834);
		typeDecl();
		state._fsp--;
		if (state.failed) return;

		match(input,SEMI,FOLLOW_SEMI_in_synpred186_Delphi8836); if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:162: ( methodDirective )*
		loop329:
		while (true) {
			int alt329=2;
			int LA329_0 = input.LA(1);
			if ( (LA329_0==ABSTRACT||LA329_0==ASSEMBLER||LA329_0==CDECL||LA329_0==DEPRECATED||LA329_0==DISPID||LA329_0==DYNAMIC||(LA329_0 >= EXPERIMENTAL && LA329_0 <= EXPORT)||LA329_0==FAR||LA329_0==FINAL||LA329_0==INLINE||(LA329_0 >= LIBRARY && LA329_0 <= LOCAL)||LA329_0==MESSAGE||LA329_0==NEAR||(LA329_0 >= OVERLOAD && LA329_0 <= OVERRIDE)||(LA329_0 >= PASCAL && LA329_0 <= PLATFORM)||(LA329_0 >= REGISTER && LA329_0 <= REINTRODUCE)||LA329_0==SAFECALL||(LA329_0 >= STATIC && LA329_0 <= STDCALL)||LA329_0==VIRTUAL) ) {
				alt329=1;
			}

			switch (alt329) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:163: methodDirective
				{
				pushFollow(FOLLOW_methodDirective_in_synpred186_Delphi8839);
				methodDirective();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop329;
			}
		}

		}

	}
	// $ANTLR end synpred186_Delphi

	// $ANTLR start synpred187_Delphi
	public final void synpred187_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:33: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred187_Delphi8956);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred187_Delphi

	// $ANTLR start synpred191_Delphi
	public final void synpred191_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:131: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:131: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred191_Delphi8982);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred191_Delphi

	// $ANTLR start synpred192_Delphi
	public final void synpred192_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:32: ( ( customAttribute )? ( 'class' )? 'operator' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:32: ( customAttribute )? ( 'class' )? 'operator' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';'
		{
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:32: ( customAttribute )?
		int alt330=2;
		switch ( input.LA(1) ) {
			case LBRACK:
				{
				alt330=1;
				}
				break;
			case CLASS:
				{
				int LA330_2 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt330=1;
				}
				}
				break;
			case OPERATOR:
				{
				int LA330_3 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt330=1;
				}
				}
				break;
		}
		switch (alt330) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:33: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred192_Delphi8956);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:51: ( 'class' )?
		int alt331=2;
		int LA331_0 = input.LA(1);
		if ( (LA331_0==CLASS) ) {
			alt331=1;
		}
		switch (alt331) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:52: 'class'
				{
				match(input,CLASS,FOLLOW_CLASS_in_synpred192_Delphi8961); if (state.failed) return;

				}
				break;

		}

		match(input,OPERATOR,FOLLOW_OPERATOR_in_synpred192_Delphi8965); if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred192_Delphi8967);
		ident();
		state._fsp--;
		if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:79: ( genericDefinition )?
		int alt332=2;
		int LA332_0 = input.LA(1);
		if ( (LA332_0==LT) ) {
			alt332=1;
		}
		switch (alt332) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:80: genericDefinition
				{
				pushFollow(FOLLOW_genericDefinition_in_synpred192_Delphi8970);
				genericDefinition();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:100: ( formalParameterSection )?
		int alt333=2;
		int LA333_0 = input.LA(1);
		if ( (LA333_0==LPAREN) ) {
			alt333=1;
		}
		switch (alt333) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:101: formalParameterSection
				{
				pushFollow(FOLLOW_formalParameterSection_in_synpred192_Delphi8975);
				formalParameterSection();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		match(input,COLON,FOLLOW_COLON_in_synpred192_Delphi8979); if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:130: ( customAttribute )?
		int alt334=2;
		switch ( input.LA(1) ) {
			case LBRACK:
				{
				int LA334_1 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case PACKED:
				{
				int LA334_2 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case ARRAY:
				{
				int LA334_3 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case SET:
				{
				int LA334_4 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case FILE:
				{
				int LA334_5 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case CLASS:
				{
				int LA334_6 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case DISPINTERFACE:
			case INTERFACE:
				{
				int LA334_7 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case OBJECT:
				{
				int LA334_8 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case RECORD:
				{
				int LA334_9 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case POINTER2:
				{
				int LA334_10 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case POINTER:
				{
				int LA334_11 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case STRING:
				{
				int LA334_12 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case TYPE:
				{
				int LA334_13 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case ANSISTRING:
				{
				int LA334_14 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case FUNCTION:
				{
				int LA334_15 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case PROCEDURE:
				{
				int LA334_16 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case REFERENCE:
				{
				int LA334_17 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case VARIANT:
				{
				int LA334_18 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case TkIdentifier:
				{
				int LA334_19 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case 198:
				{
				int LA334_20 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case ADD:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case EXIT:
			case EXPORT:
			case FINAL:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OPERATOR:
			case OUT:
			case READ:
			case READONLY:
			case REGISTER:
			case REMOVE:
			case STATIC:
			case STORED:
			case STRICT:
			case UNSAFE:
			case WRITE:
				{
				int LA334_21 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case LPAREN:
				{
				int LA334_22 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case AT2:
				{
				int LA334_23 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case 199:
				{
				int LA334_24 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case NOT:
				{
				int LA334_25 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case PLUS:
				{
				int LA334_26 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case MINUS:
				{
				int LA334_27 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case TkRealNum:
				{
				int LA334_28 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case TkHexNum:
			case TkIntNum:
				{
				int LA334_29 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case TRUE:
				{
				int LA334_30 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case FALSE:
				{
				int LA334_31 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case NIL:
				{
				int LA334_32 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case ControlString:
				{
				int LA334_33 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case QuotedString:
				{
				int LA334_34 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case INHERITED:
				{
				int LA334_35 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case DOT:
				{
				int LA334_36 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case LT:
				{
				int LA334_37 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case AND:
			case AS:
			case DIV:
			case MOD:
			case OR:
			case SHL:
			case SHR:
			case SLASH:
			case STAR:
			case XOR:
				{
				int LA334_38 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case EQUAL:
				{
				int LA334_39 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case GE:
			case GT:
			case IN:
			case IS:
			case LE:
			case NOT_EQUAL:
				{
				int LA334_40 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case DOTDOT:
				{
				int LA334_41 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case SEMI:
				{
				int LA334_42 = input.LA(2);
				if ( (synpred191_Delphi()) ) {
					alt334=1;
				}
				}
				break;
		}
		switch (alt334) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:131: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred192_Delphi8982);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_typeDecl_in_synpred192_Delphi8986);
		typeDecl();
		state._fsp--;
		if (state.failed) return;

		match(input,SEMI,FOLLOW_SEMI_in_synpred192_Delphi8988); if (state.failed) return;

		}

	}
	// $ANTLR end synpred192_Delphi

	// $ANTLR start synpred193_Delphi
	public final void synpred193_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:33: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred193_Delphi9095);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred193_Delphi

	// $ANTLR start synpred196_Delphi
	public final void synpred196_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:32: ( ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? '.' ident '=' ident ';' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:32: ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? '.' ident '=' ident ';'
		{
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:32: ( customAttribute )?
		int alt335=2;
		switch ( input.LA(1) ) {
			case LBRACK:
				{
				alt335=1;
				}
				break;
			case CLASS:
				{
				int LA335_2 = input.LA(2);
				if ( (synpred193_Delphi()) ) {
					alt335=1;
				}
				}
				break;
			case FUNCTION:
				{
				int LA335_3 = input.LA(2);
				if ( (synpred193_Delphi()) ) {
					alt335=1;
				}
				}
				break;
		}
		switch (alt335) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:33: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred196_Delphi9095);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:51: ( 'class' )?
		int alt336=2;
		int LA336_0 = input.LA(1);
		if ( (LA336_0==CLASS) ) {
			alt336=1;
		}
		switch (alt336) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:52: 'class'
				{
				match(input,CLASS,FOLLOW_CLASS_in_synpred196_Delphi9100); if (state.failed) return;

				}
				break;

		}

		match(input,FUNCTION,FOLLOW_FUNCTION_in_synpred196_Delphi9104); if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred196_Delphi9106);
		ident();
		state._fsp--;
		if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:79: ( genericDefinition )?
		int alt337=2;
		int LA337_0 = input.LA(1);
		if ( (LA337_0==LT) ) {
			alt337=1;
		}
		switch (alt337) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:80: genericDefinition
				{
				pushFollow(FOLLOW_genericDefinition_in_synpred196_Delphi9109);
				genericDefinition();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		match(input,DOT,FOLLOW_DOT_in_synpred196_Delphi9113); if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred196_Delphi9115);
		ident();
		state._fsp--;
		if (state.failed) return;

		match(input,EQUAL,FOLLOW_EQUAL_in_synpred196_Delphi9117); if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred196_Delphi9119);
		ident();
		state._fsp--;
		if (state.failed) return;

		match(input,SEMI,FOLLOW_SEMI_in_synpred196_Delphi9121); if (state.failed) return;

		}

	}
	// $ANTLR end synpred196_Delphi

	// $ANTLR start synpred197_Delphi
	public final void synpred197_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:33: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred197_Delphi9155);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred197_Delphi

	// $ANTLR start synpred200_Delphi
	public final void synpred200_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:360:33: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:360:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred200_Delphi9237);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred200_Delphi

	// $ANTLR start synpred202_Delphi
	public final void synpred202_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:33: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred202_Delphi9357);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred202_Delphi

	// $ANTLR start synpred209_Delphi
	public final void synpred209_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:370:52: ( ';' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:370:52: ';'
		{
		match(input,SEMI,FOLLOW_SEMI_in_synpred209_Delphi9617); if (state.failed) return;

		}

	}
	// $ANTLR end synpred209_Delphi

	// $ANTLR start synpred213_Delphi
	public final void synpred213_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:375:32: ( 'default' expression )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:375:32: 'default' expression
		{
		match(input,DEFAULT,FOLLOW_DEFAULT_in_synpred213_Delphi9768); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred213_Delphi9770);
		expression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred213_Delphi

	// $ANTLR start synpred214_Delphi
	public final void synpred214_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:376:32: ( 'default' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:376:32: 'default'
		{
		match(input,DEFAULT,FOLLOW_DEFAULT_in_synpred214_Delphi9803); if (state.failed) return;

		}

	}
	// $ANTLR end synpred214_Delphi

	// $ANTLR start synpred217_Delphi
	public final void synpred217_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:381:32: ( 'default' expression ';' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:381:32: 'default' expression ';'
		{
		match(input,DEFAULT,FOLLOW_DEFAULT_in_synpred217_Delphi9968); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred217_Delphi9970);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,SEMI,FOLLOW_SEMI_in_synpred217_Delphi9972); if (state.failed) return;

		}

	}
	// $ANTLR end synpred217_Delphi

	// $ANTLR start synpred218_Delphi
	public final void synpred218_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:382:32: ( 'default' ';' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:382:32: 'default' ';'
		{
		match(input,DEFAULT,FOLLOW_DEFAULT_in_synpred218_Delphi10005); if (state.failed) return;

		match(input,SEMI,FOLLOW_SEMI_in_synpred218_Delphi10007); if (state.failed) return;

		}

	}
	// $ANTLR end synpred218_Delphi

	// $ANTLR start synpred231_Delphi
	public final void synpred231_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:404:81: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:404:81: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred231_Delphi10590);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred231_Delphi

	// $ANTLR start synpred232_Delphi
	public final void synpred232_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:404:113: ( functionDirective )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:404:113: functionDirective
		{
		pushFollow(FOLLOW_functionDirective_in_synpred232_Delphi10599);
		functionDirective();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred232_Delphi

	// $ANTLR start synpred235_Delphi
	public final void synpred235_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:405:80: ( functionDirective )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:405:80: functionDirective
		{
		pushFollow(FOLLOW_functionDirective_in_synpred235_Delphi10646);
		functionDirective();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred235_Delphi

	// $ANTLR start synpred236_Delphi
	public final void synpred236_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:407:55: ( methodDirective )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:407:55: methodDirective
		{
		pushFollow(FOLLOW_methodDirective_in_synpred236_Delphi10708);
		methodDirective();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred236_Delphi

	// $ANTLR start synpred237_Delphi
	public final void synpred237_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:407:74: ( methodBody )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:407:74: methodBody
		{
		pushFollow(FOLLOW_methodBody_in_synpred237_Delphi10713);
		methodBody();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred237_Delphi

	// $ANTLR start synpred238_Delphi
	public final void synpred238_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:33: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred238_Delphi10773);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred238_Delphi

	// $ANTLR start synpred241_Delphi
	public final void synpred241_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:32: ( ( customAttribute )? ( 'class' )? methodKey methodName ( formalParameterSection )? )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:32: ( customAttribute )? ( 'class' )? methodKey methodName ( formalParameterSection )?
		{
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:32: ( customAttribute )?
		int alt344=2;
		switch ( input.LA(1) ) {
			case LBRACK:
				{
				alt344=1;
				}
				break;
			case CLASS:
				{
				int LA344_2 = input.LA(2);
				if ( (synpred238_Delphi()) ) {
					alt344=1;
				}
				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case PROCEDURE:
				{
				int LA344_3 = input.LA(2);
				if ( (synpred238_Delphi()) ) {
					alt344=1;
				}
				}
				break;
		}
		switch (alt344) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:33: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred241_Delphi10773);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:51: ( 'class' )?
		int alt345=2;
		int LA345_0 = input.LA(1);
		if ( (LA345_0==CLASS) ) {
			alt345=1;
		}
		switch (alt345) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:52: 'class'
				{
				match(input,CLASS,FOLLOW_CLASS_in_synpred241_Delphi10778); if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_methodKey_in_synpred241_Delphi10783);
		methodKey();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_methodName_in_synpred241_Delphi10785);
		methodName();
		state._fsp--;
		if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:84: ( formalParameterSection )?
		int alt346=2;
		int LA346_0 = input.LA(1);
		if ( (LA346_0==LPAREN) ) {
			alt346=1;
		}
		switch (alt346) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:85: formalParameterSection
				{
				pushFollow(FOLLOW_formalParameterSection_in_synpred241_Delphi10788);
				formalParameterSection();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred241_Delphi

	// $ANTLR start synpred242_Delphi
	public final void synpred242_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:33: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred242_Delphi10886);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred242_Delphi

	// $ANTLR start synpred245_Delphi
	public final void synpred245_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:116: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:116: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred245_Delphi10908);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred245_Delphi

	// $ANTLR start synpred247_Delphi
	public final void synpred247_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:32: ( ( customAttribute )? ( 'class' )? 'function' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )? )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:32: ( customAttribute )? ( 'class' )? 'function' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )?
		{
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:32: ( customAttribute )?
		int alt348=2;
		switch ( input.LA(1) ) {
			case LBRACK:
				{
				alt348=1;
				}
				break;
			case CLASS:
				{
				int LA348_2 = input.LA(2);
				if ( (synpred242_Delphi()) ) {
					alt348=1;
				}
				}
				break;
			case FUNCTION:
				{
				int LA348_3 = input.LA(2);
				if ( (synpred242_Delphi()) ) {
					alt348=1;
				}
				}
				break;
		}
		switch (alt348) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:33: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred247_Delphi10886);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:51: ( 'class' )?
		int alt349=2;
		int LA349_0 = input.LA(1);
		if ( (LA349_0==CLASS) ) {
			alt349=1;
		}
		switch (alt349) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:52: 'class'
				{
				match(input,CLASS,FOLLOW_CLASS_in_synpred247_Delphi10891); if (state.failed) return;

				}
				break;

		}

		match(input,FUNCTION,FOLLOW_FUNCTION_in_synpred247_Delphi10895); if (state.failed) return;

		pushFollow(FOLLOW_methodName_in_synpred247_Delphi10897);
		methodName();
		state._fsp--;
		if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:84: ( formalParameterSection )?
		int alt350=2;
		int LA350_0 = input.LA(1);
		if ( (LA350_0==LPAREN) ) {
			alt350=1;
		}
		switch (alt350) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:85: formalParameterSection
				{
				pushFollow(FOLLOW_formalParameterSection_in_synpred247_Delphi10900);
				formalParameterSection();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:110: ( ':' ( customAttribute )? typeDecl )?
		int alt352=2;
		int LA352_0 = input.LA(1);
		if ( (LA352_0==COLON) ) {
			alt352=1;
		}
		switch (alt352) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:111: ':' ( customAttribute )? typeDecl
				{
				match(input,COLON,FOLLOW_COLON_in_synpred247_Delphi10905); if (state.failed) return;

				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:115: ( customAttribute )?
				int alt351=2;
				switch ( input.LA(1) ) {
					case LBRACK:
						{
						int LA351_1 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case PACKED:
						{
						int LA351_2 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case ARRAY:
						{
						int LA351_3 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case SET:
						{
						int LA351_4 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case FILE:
						{
						int LA351_5 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case CLASS:
						{
						int LA351_6 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case DISPINTERFACE:
					case INTERFACE:
						{
						int LA351_7 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case OBJECT:
						{
						int LA351_8 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case RECORD:
						{
						int LA351_9 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case POINTER2:
						{
						int LA351_10 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case POINTER:
						{
						int LA351_11 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case STRING:
						{
						int LA351_12 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case TYPE:
						{
						int LA351_13 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case ANSISTRING:
						{
						int LA351_14 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case FUNCTION:
						{
						int LA351_15 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case PROCEDURE:
						{
						int LA351_16 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case REFERENCE:
						{
						int LA351_17 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case VARIANT:
						{
						int LA351_18 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case TkIdentifier:
						{
						int LA351_19 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case 198:
						{
						int LA351_20 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case ADD:
					case AT:
					case BREAK:
					case CONTAINS:
					case CONTINUE:
					case DEFAULT:
					case EXIT:
					case EXPORT:
					case FINAL:
					case IMPLEMENTS:
					case INDEX:
					case LOCAL:
					case MESSAGE:
					case NAME:
					case OPERATOR:
					case OUT:
					case READ:
					case READONLY:
					case REGISTER:
					case REMOVE:
					case STATIC:
					case STORED:
					case STRICT:
					case UNSAFE:
					case WRITE:
						{
						int LA351_21 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case LPAREN:
						{
						int LA351_22 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case AT2:
						{
						int LA351_23 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case 199:
						{
						int LA351_24 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case NOT:
						{
						int LA351_25 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case PLUS:
						{
						int LA351_26 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case MINUS:
						{
						int LA351_27 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case TkRealNum:
						{
						int LA351_28 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case TkHexNum:
					case TkIntNum:
						{
						int LA351_29 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case TRUE:
						{
						int LA351_30 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case FALSE:
						{
						int LA351_31 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case NIL:
						{
						int LA351_32 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case ControlString:
						{
						int LA351_33 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case QuotedString:
						{
						int LA351_34 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case INHERITED:
						{
						int LA351_35 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case DOT:
						{
						int LA351_36 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case LT:
						{
						int LA351_37 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case AND:
					case AS:
					case DIV:
					case MOD:
					case OR:
					case SHL:
					case SHR:
					case SLASH:
					case STAR:
					case XOR:
						{
						int LA351_38 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case EQUAL:
						{
						int LA351_39 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case GE:
					case GT:
					case IN:
					case IS:
					case LE:
					case NOT_EQUAL:
						{
						int LA351_40 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case DOTDOT:
						{
						int LA351_41 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
					case EOF:
						{
						int LA351_42 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt351=1;
						}
						}
						break;
				}
				switch (alt351) {
					case 1 :
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:116: customAttribute
						{
						pushFollow(FOLLOW_customAttribute_in_synpred247_Delphi10908);
						customAttribute();
						state._fsp--;
						if (state.failed) return;

						}
						break;

				}

				pushFollow(FOLLOW_typeDecl_in_synpred247_Delphi10912);
				typeDecl();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred247_Delphi

	// $ANTLR start synpred248_Delphi
	public final void synpred248_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:33: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred248_Delphi11021);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred248_Delphi

	// $ANTLR start synpred250_Delphi
	public final void synpred250_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:113: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:113: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred250_Delphi11040);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred250_Delphi

	// $ANTLR start synpred257_Delphi
	public final void synpred257_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:53: ( functionDirective )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:53: functionDirective
		{
		pushFollow(FOLLOW_functionDirective_in_synpred257_Delphi11372);
		functionDirective();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred257_Delphi

	// $ANTLR start synpred258_Delphi
	public final void synpred258_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:74: ( procBody )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:74: procBody
		{
		pushFollow(FOLLOW_procBody_in_synpred258_Delphi11377);
		procBody();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred258_Delphi

	// $ANTLR start synpred259_Delphi
	public final void synpred259_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:33: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred259_Delphi11443);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred259_Delphi

	// $ANTLR start synpred261_Delphi
	public final void synpred261_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:32: ( ( customAttribute )? 'procedure' ident ( formalParameterSection )? )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:32: ( customAttribute )? 'procedure' ident ( formalParameterSection )?
		{
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:32: ( customAttribute )?
		int alt355=2;
		int LA355_0 = input.LA(1);
		if ( (LA355_0==LBRACK) ) {
			alt355=1;
		}
		else if ( (LA355_0==PROCEDURE) ) {
			int LA355_2 = input.LA(2);
			if ( (synpred259_Delphi()) ) {
				alt355=1;
			}
		}
		switch (alt355) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:33: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred261_Delphi11443);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		match(input,PROCEDURE,FOLLOW_PROCEDURE_in_synpred261_Delphi11447); if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred261_Delphi11449);
		ident();
		state._fsp--;
		if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:69: ( formalParameterSection )?
		int alt356=2;
		int LA356_0 = input.LA(1);
		if ( (LA356_0==LPAREN) ) {
			alt356=1;
		}
		switch (alt356) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:70: formalParameterSection
				{
				pushFollow(FOLLOW_formalParameterSection_in_synpred261_Delphi11452);
				formalParameterSection();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred261_Delphi

	// $ANTLR start synpred262_Delphi
	public final void synpred262_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:33: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred262_Delphi11552);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred262_Delphi

	// $ANTLR start synpred266_Delphi
	public final void synpred266_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:433:33: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:433:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred266_Delphi11794);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred266_Delphi

	// $ANTLR start synpred272_Delphi
	public final void synpred272_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:442:47: ( functionDirective )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:442:47: functionDirective
		{
		pushFollow(FOLLOW_functionDirective_in_synpred272_Delphi12106);
		functionDirective();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred272_Delphi

	// $ANTLR start synpred274_Delphi
	public final void synpred274_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:443:44: ( 'name' expression )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:443:44: 'name' expression
		{
		match(input,NAME,FOLLOW_NAME_in_synpred274_Delphi12147); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred274_Delphi12149);
		expression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred274_Delphi

	// $ANTLR start synpred275_Delphi
	public final void synpred275_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:443:64: ( 'index' expression )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:443:64: 'index' expression
		{
		match(input,INDEX,FOLLOW_INDEX_in_synpred275_Delphi12153); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred275_Delphi12155);
		expression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred275_Delphi

	// $ANTLR start synpred276_Delphi
	public final void synpred276_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:443:86: ( functionDirective )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:443:86: functionDirective
		{
		pushFollow(FOLLOW_functionDirective_in_synpred276_Delphi12160);
		functionDirective();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred276_Delphi

	// $ANTLR start synpred278_Delphi
	public final void synpred278_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:451:33: ( customAttributeDecl )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:451:33: customAttributeDecl
		{
		pushFollow(FOLLOW_customAttributeDecl_in_synpred278_Delphi12298);
		customAttributeDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred278_Delphi

	// $ANTLR start synpred279_Delphi
	public final void synpred279_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:453:63: ( expressionList )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:453:63: expressionList
		{
		pushFollow(FOLLOW_expressionList_in_synpred279_Delphi12354);
		expressionList();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred279_Delphi

	// $ANTLR start synpred282_Delphi
	public final void synpred282_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:460:32: ( anonymousExpression )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:460:32: anonymousExpression
		{
		pushFollow(FOLLOW_anonymousExpression_in_synpred282_Delphi12497);
		anonymousExpression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred282_Delphi

	// $ANTLR start synpred283_Delphi
	public final void synpred283_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:50: ( relOp simpleExpression )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:50: relOp simpleExpression
		{
		pushFollow(FOLLOW_relOp_in_synpred283_Delphi12541);
		relOp();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_simpleExpression_in_synpred283_Delphi12543);
		simpleExpression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred283_Delphi

	// $ANTLR start synpred284_Delphi
	public final void synpred284_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:76: ( '=' expression )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:76: '=' expression
		{
		match(input,EQUAL,FOLLOW_EQUAL_in_synpred284_Delphi12548); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred284_Delphi12550);
		expression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred284_Delphi

	// $ANTLR start synpred285_Delphi
	public final void synpred285_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:463:45: ( formalParameterSection )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:463:45: formalParameterSection
		{
		pushFollow(FOLLOW_formalParameterSection_in_synpred285_Delphi12604);
		formalParameterSection();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred285_Delphi

	// $ANTLR start synpred288_Delphi
	public final void synpred288_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:466:40: ( operator factor )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:466:40: operator factor
		{
		pushFollow(FOLLOW_operator_in_synpred288_Delphi12704);
		operator();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_factor_in_synpred288_Delphi12706);
		factor();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred288_Delphi

	// $ANTLR start synpred289_Delphi
	public final void synpred289_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:468:32: ( '@' factor )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:468:32: '@' factor
		{
		match(input,AT2,FOLLOW_AT2_in_synpred289_Delphi12767); if (state.failed) return;

		pushFollow(FOLLOW_factor_in_synpred289_Delphi12769);
		factor();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred289_Delphi

	// $ANTLR start synpred290_Delphi
	public final void synpred290_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:469:32: ( '@@' factor )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:469:32: '@@' factor
		{
		match(input,199,FOLLOW_199_in_synpred290_Delphi12802); if (state.failed) return;

		pushFollow(FOLLOW_factor_in_synpred290_Delphi12804);
		factor();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred290_Delphi

	// $ANTLR start synpred291_Delphi
	public final void synpred291_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:470:32: ( 'not' factor )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:470:32: 'not' factor
		{
		match(input,NOT,FOLLOW_NOT_in_synpred291_Delphi12844); if (state.failed) return;

		pushFollow(FOLLOW_factor_in_synpred291_Delphi12846);
		factor();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred291_Delphi

	// $ANTLR start synpred292_Delphi
	public final void synpred292_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:471:32: ( '+' factor )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:471:32: '+' factor
		{
		match(input,PLUS,FOLLOW_PLUS_in_synpred292_Delphi12879); if (state.failed) return;

		pushFollow(FOLLOW_factor_in_synpred292_Delphi12881);
		factor();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred292_Delphi

	// $ANTLR start synpred293_Delphi
	public final void synpred293_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:472:32: ( '-' factor )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:472:32: '-' factor
		{
		match(input,MINUS,FOLLOW_MINUS_in_synpred293_Delphi12914); if (state.failed) return;

		pushFollow(FOLLOW_factor_in_synpred293_Delphi12916);
		factor();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred293_Delphi

	// $ANTLR start synpred294_Delphi
	public final void synpred294_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:473:32: ( '^' ident )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:473:32: '^' ident
		{
		match(input,POINTER2,FOLLOW_POINTER2_in_synpred294_Delphi12949); if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred294_Delphi12951);
		ident();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred294_Delphi

	// $ANTLR start synpred295_Delphi
	public final void synpred295_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:474:32: ( intRealNum )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:474:32: intRealNum
		{
		pushFollow(FOLLOW_intRealNum_in_synpred295_Delphi12995);
		intRealNum();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred295_Delphi

	// $ANTLR start synpred296_Delphi
	public final void synpred296_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:475:32: ( 'true' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:475:32: 'true'
		{
		match(input,TRUE,FOLLOW_TRUE_in_synpred296_Delphi13028); if (state.failed) return;

		}

	}
	// $ANTLR end synpred296_Delphi

	// $ANTLR start synpred297_Delphi
	public final void synpred297_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:476:32: ( 'false' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:476:32: 'false'
		{
		match(input,FALSE,FOLLOW_FALSE_in_synpred297_Delphi13061); if (state.failed) return;

		}

	}
	// $ANTLR end synpred297_Delphi

	// $ANTLR start synpred298_Delphi
	public final void synpred298_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:477:32: ( 'nil' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:477:32: 'nil'
		{
		match(input,NIL,FOLLOW_NIL_in_synpred298_Delphi13094); if (state.failed) return;

		}

	}
	// $ANTLR end synpred298_Delphi

	// $ANTLR start synpred299_Delphi
	public final void synpred299_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:52: ( '^' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:52: '^'
		{
		match(input,POINTER2,FOLLOW_POINTER2_in_synpred299_Delphi13134); if (state.failed) return;

		}

	}
	// $ANTLR end synpred299_Delphi

	// $ANTLR start synpred300_Delphi
	public final void synpred300_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:59: ( '.' expression )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:59: '.' expression
		{
		match(input,DOT,FOLLOW_DOT_in_synpred300_Delphi13139); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred300_Delphi13141);
		expression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred300_Delphi

	// $ANTLR start synpred301_Delphi
	public final void synpred301_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:32: ( '(' expression ')' ( '^' )? ( '.' expression )? )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:32: '(' expression ')' ( '^' )? ( '.' expression )?
		{
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred301_Delphi13127); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred301_Delphi13129);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,RPAREN,FOLLOW_RPAREN_in_synpred301_Delphi13131); if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:51: ( '^' )?
		int alt362=2;
		int LA362_0 = input.LA(1);
		if ( (LA362_0==POINTER2) ) {
			alt362=1;
		}
		switch (alt362) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:52: '^'
				{
				match(input,POINTER2,FOLLOW_POINTER2_in_synpred301_Delphi13134); if (state.failed) return;

				}
				break;

		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:58: ( '.' expression )?
		int alt363=2;
		int LA363_0 = input.LA(1);
		if ( (LA363_0==DOT) ) {
			alt363=1;
		}
		switch (alt363) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:59: '.' expression
				{
				match(input,DOT,FOLLOW_DOT_in_synpred301_Delphi13139); if (state.failed) return;

				pushFollow(FOLLOW_expression_in_synpred301_Delphi13141);
				expression();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred301_Delphi

	// $ANTLR start synpred302_Delphi
	public final void synpred302_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:479:46: ( '.' simpleExpression )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:479:46: '.' simpleExpression
		{
		match(input,DOT,FOLLOW_DOT_in_synpred302_Delphi13187); if (state.failed) return;

		pushFollow(FOLLOW_simpleExpression_in_synpred302_Delphi13189);
		simpleExpression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred302_Delphi

	// $ANTLR start synpred303_Delphi
	public final void synpred303_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:479:32: ( stringFactor ( '.' simpleExpression )? )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:479:32: stringFactor ( '.' simpleExpression )?
		{
		pushFollow(FOLLOW_stringFactor_in_synpred303_Delphi13184);
		stringFactor();
		state._fsp--;
		if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:479:45: ( '.' simpleExpression )?
		int alt364=2;
		int LA364_0 = input.LA(1);
		if ( (LA364_0==DOT) ) {
			alt364=1;
		}
		switch (alt364) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:479:46: '.' simpleExpression
				{
				match(input,DOT,FOLLOW_DOT_in_synpred303_Delphi13187); if (state.failed) return;

				pushFollow(FOLLOW_simpleExpression_in_synpred303_Delphi13189);
				simpleExpression();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred303_Delphi

	// $ANTLR start synpred304_Delphi
	public final void synpred304_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:480:32: ( setSection )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:480:32: setSection
		{
		pushFollow(FOLLOW_setSection_in_synpred304_Delphi13224);
		setSection();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred304_Delphi

	// $ANTLR start synpred305_Delphi
	public final void synpred305_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:481:32: ( designator )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:481:32: designator
		{
		pushFollow(FOLLOW_designator_in_synpred305_Delphi13257);
		designator();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred305_Delphi

	// $ANTLR start synpred306_Delphi
	public final void synpred306_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:484:47: ( QuotedString ControlString )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:484:47: QuotedString ControlString
		{
		match(input,QuotedString,FOLLOW_QuotedString_in_synpred306_Delphi13352); if (state.failed) return;

		match(input,ControlString,FOLLOW_ControlString_in_synpred306_Delphi13354); if (state.failed) return;

		}

	}
	// $ANTLR end synpred306_Delphi

	// $ANTLR start synpred307_Delphi
	public final void synpred307_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:484:77: ( QuotedString )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:484:77: QuotedString
		{
		match(input,QuotedString,FOLLOW_QuotedString_in_synpred307_Delphi13359); if (state.failed) return;

		}

	}
	// $ANTLR end synpred307_Delphi

	// $ANTLR start synpred309_Delphi
	public final void synpred309_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:485:46: ( ControlString QuotedString )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:485:46: ControlString QuotedString
		{
		match(input,ControlString,FOLLOW_ControlString_in_synpred309_Delphi13397); if (state.failed) return;

		match(input,QuotedString,FOLLOW_QuotedString_in_synpred309_Delphi13399); if (state.failed) return;

		}

	}
	// $ANTLR end synpred309_Delphi

	// $ANTLR start synpred310_Delphi
	public final void synpred310_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:485:76: ( ControlString )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:485:76: ControlString
		{
		match(input,ControlString,FOLLOW_ControlString_in_synpred310_Delphi13404); if (state.failed) return;

		}

	}
	// $ANTLR end synpred310_Delphi

	// $ANTLR start synpred313_Delphi
	public final void synpred313_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:37: ( expression ( ( ',' | '..' ) expression )* )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:37: expression ( ( ',' | '..' ) expression )*
		{
		pushFollow(FOLLOW_expression_in_synpred313_Delphi13464);
		expression();
		state._fsp--;
		if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:48: ( ( ',' | '..' ) expression )*
		loop367:
		while (true) {
			int alt367=2;
			int LA367_0 = input.LA(1);
			if ( (LA367_0==COMMA||LA367_0==DOTDOT) ) {
				alt367=1;
			}

			switch (alt367) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:49: ( ',' | '..' ) expression
				{
				if ( input.LA(1)==COMMA||input.LA(1)==DOTDOT ) {
					input.consume();
					state.errorRecovery=false;
					state.failed=false;
				}
				else {
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					throw mse;
				}
				pushFollow(FOLLOW_expression_in_synpred313_Delphi13475);
				expression();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop367;
			}
		}

		}

	}
	// $ANTLR end synpred313_Delphi

	// $ANTLR start synpred314_Delphi
	public final void synpred314_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:33: ( 'inherited' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:33: 'inherited'
		{
		match(input,INHERITED,FOLLOW_INHERITED_in_synpred314_Delphi13538); if (state.failed) return;

		}

	}
	// $ANTLR end synpred314_Delphi

	// $ANTLR start synpred315_Delphi
	public final void synpred315_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:50: ( namespacedQualifiedIdent )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:50: namespacedQualifiedIdent
		{
		pushFollow(FOLLOW_namespacedQualifiedIdent_in_synpred315_Delphi13545);
		namespacedQualifiedIdent();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred315_Delphi

	// $ANTLR start synpred316_Delphi
	public final void synpred316_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:49: ( ( namespacedQualifiedIdent | typeId ) )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:49: ( namespacedQualifiedIdent | typeId )
		{
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:49: ( namespacedQualifiedIdent | typeId )
		int alt368=2;
		switch ( input.LA(1) ) {
		case TkIdentifier:
			{
			int LA368_1 = input.LA(2);
			if ( (synpred315_Delphi()) ) {
				alt368=1;
			}
			else if ( (true) ) {
				alt368=2;
			}

			}
			break;
		case 198:
			{
			int LA368_2 = input.LA(2);
			if ( (LA368_2==TkIdentifier) ) {
				int LA368_6 = input.LA(3);
				if ( (synpred315_Delphi()) ) {
					alt368=1;
				}
				else if ( (true) ) {
					alt368=2;
				}

			}
			else if ( ((LA368_2 >= ABSOLUTE && LA368_2 <= ASSEMBLY)||LA368_2==AT||LA368_2==AUTOMATED||(LA368_2 >= BEGIN && LA368_2 <= CLASS)||(LA368_2 >= CONST && LA368_2 <= CONTINUE)||(LA368_2 >= DEFAULT && LA368_2 <= DO)||(LA368_2 >= DOWNTO && LA368_2 <= DYNAMIC)||(LA368_2 >= ELSE && LA368_2 <= END)||(LA368_2 >= EXCEPT && LA368_2 <= FUNCTION)||LA368_2==GOTO||LA368_2==HELPER||(LA368_2 >= IF && LA368_2 <= LABEL)||(LA368_2 >= LIBRARY && LA368_2 <= LOCAL)||LA368_2==MESSAGE||(LA368_2 >= MOD && LA368_2 <= NOT)||(LA368_2 >= OBJECT && LA368_2 <= PLATFORM)||LA368_2==POINTER||(LA368_2 >= PRIVATE && LA368_2 <= PUBLISHED)||LA368_2==RAISE||(LA368_2 >= READ && LA368_2 <= RESOURCESTRING)||(LA368_2 >= SAFECALL && LA368_2 <= SEALED)||(LA368_2 >= SET && LA368_2 <= SHR)||(LA368_2 >= STATIC && LA368_2 <= TYPE)||(LA368_2 >= UNIT && LA368_2 <= USES)||(LA368_2 >= VAR && LA368_2 <= WRITEONLY)||LA368_2==XOR) ) {
				int LA368_7 = input.LA(3);
				if ( (synpred315_Delphi()) ) {
					alt368=1;
				}
				else if ( (true) ) {
					alt368=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				int nvaeMark = input.mark();
				try {
					input.consume();
					NoViableAltException nvae =
						new NoViableAltException("", 368, 2, input);
					throw nvae;
				} finally {
					input.rewind(nvaeMark);
				}
			}

			}
			break;
		case ADD:
		case ANSISTRING:
		case AT:
		case BREAK:
		case CONTAINS:
		case CONTINUE:
		case DEFAULT:
		case EXIT:
		case EXPORT:
		case FINAL:
		case IMPLEMENTS:
		case INDEX:
		case LOCAL:
		case MESSAGE:
		case NAME:
		case OBJECT:
		case OPERATOR:
		case OUT:
		case POINTER:
		case READ:
		case READONLY:
		case REFERENCE:
		case REGISTER:
		case REMOVE:
		case STATIC:
		case STORED:
		case STRICT:
		case STRING:
		case UNSAFE:
		case VARIANT:
		case WRITE:
			{
			int LA368_3 = input.LA(2);
			if ( (synpred315_Delphi()) ) {
				alt368=1;
			}
			else if ( (true) ) {
				alt368=2;
			}

			}
			break;
		default:
			if (state.backtracking>0) {state.failed=true; return;}
			NoViableAltException nvae =
				new NoViableAltException("", 368, 0, input);
			throw nvae;
		}
		switch (alt368) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:50: namespacedQualifiedIdent
				{
				pushFollow(FOLLOW_namespacedQualifiedIdent_in_synpred316_Delphi13545);
				namespacedQualifiedIdent();
				state._fsp--;
				if (state.failed) return;

				}
				break;
			case 2 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:77: typeId
				{
				pushFollow(FOLLOW_typeId_in_synpred316_Delphi13549);
				typeId();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred316_Delphi

	// $ANTLR start synpred317_Delphi
	public final void synpred317_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:89: ( designatorItem )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:89: designatorItem
		{
		pushFollow(FOLLOW_designatorItem_in_synpred317_Delphi13556);
		designatorItem();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred317_Delphi

	// $ANTLR start synpred327_Delphi
	public final void synpred327_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:37: ( expression ( colonConstruct )? ( ',' expression ( colonConstruct )? )* )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:37: expression ( colonConstruct )? ( ',' expression ( colonConstruct )? )*
		{
		pushFollow(FOLLOW_expression_in_synpred327_Delphi13790);
		expression();
		state._fsp--;
		if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:48: ( colonConstruct )?
		int alt371=2;
		int LA371_0 = input.LA(1);
		if ( (LA371_0==COLON) ) {
			alt371=1;
		}
		switch (alt371) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:49: colonConstruct
				{
				pushFollow(FOLLOW_colonConstruct_in_synpred327_Delphi13793);
				colonConstruct();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:66: ( ',' expression ( colonConstruct )? )*
		loop373:
		while (true) {
			int alt373=2;
			int LA373_0 = input.LA(1);
			if ( (LA373_0==COMMA) ) {
				alt373=1;
			}

			switch (alt373) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:67: ',' expression ( colonConstruct )?
				{
				match(input,COMMA,FOLLOW_COMMA_in_synpred327_Delphi13798); if (state.failed) return;

				pushFollow(FOLLOW_expression_in_synpred327_Delphi13800);
				expression();
				state._fsp--;
				if (state.failed) return;

				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:82: ( colonConstruct )?
				int alt372=2;
				int LA372_0 = input.LA(1);
				if ( (LA372_0==COLON) ) {
					alt372=1;
				}
				switch (alt372) {
					case 1 :
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:83: colonConstruct
						{
						pushFollow(FOLLOW_colonConstruct_in_synpred327_Delphi13803);
						colonConstruct();
						state._fsp--;
						if (state.failed) return;

						}
						break;

				}

				}
				break;

			default :
				break loop373;
			}
		}

		}

	}
	// $ANTLR end synpred327_Delphi

	// $ANTLR start synpred358_Delphi
	public final void synpred358_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:539:32: ( label ':' statement )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:539:32: label ':' statement
		{
		pushFollow(FOLLOW_label_in_synpred358_Delphi15057);
		label();
		state._fsp--;
		if (state.failed) return;

		match(input,COLON,FOLLOW_COLON_in_synpred358_Delphi15059); if (state.failed) return;

		pushFollow(FOLLOW_statement_in_synpred358_Delphi15061);
		statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred358_Delphi

	// $ANTLR start synpred359_Delphi
	public final void synpred359_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:542:66: ( 'else' statement )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:542:66: 'else' statement
		{
		match(input,ELSE,FOLLOW_ELSE_in_synpred359_Delphi15157); if (state.failed) return;

		pushFollow(FOLLOW_statement_in_synpred359_Delphi15159);
		statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred359_Delphi

	// $ANTLR start synpred366_Delphi
	public final void synpred366_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:550:42: ( statementList )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:550:42: statementList
		{
		pushFollow(FOLLOW_statementList_in_synpred366_Delphi15426);
		statementList();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred366_Delphi

	// $ANTLR start synpred367_Delphi
	public final void synpred367_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:554:32: ( 'for' designator ':=' expression 'to' expression 'do' statement )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:554:32: 'for' designator ':=' expression 'to' expression 'do' statement
		{
		match(input,FOR,FOLLOW_FOR_in_synpred367_Delphi15542); if (state.failed) return;

		pushFollow(FOLLOW_designator_in_synpred367_Delphi15544);
		designator();
		state._fsp--;
		if (state.failed) return;

		match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred367_Delphi15546); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred367_Delphi15548);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,TO,FOLLOW_TO_in_synpred367_Delphi15550); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred367_Delphi15552);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,DO,FOLLOW_DO_in_synpred367_Delphi15554); if (state.failed) return;

		pushFollow(FOLLOW_statement_in_synpred367_Delphi15556);
		statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred367_Delphi

	// $ANTLR start synpred368_Delphi
	public final void synpred368_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:555:32: ( 'for' designator ':=' expression 'downto' expression 'do' statement )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:555:32: 'for' designator ':=' expression 'downto' expression 'do' statement
		{
		match(input,FOR,FOLLOW_FOR_in_synpred368_Delphi15589); if (state.failed) return;

		pushFollow(FOLLOW_designator_in_synpred368_Delphi15591);
		designator();
		state._fsp--;
		if (state.failed) return;

		match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred368_Delphi15593); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred368_Delphi15595);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,DOWNTO,FOLLOW_DOWNTO_in_synpred368_Delphi15597); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred368_Delphi15599);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,DO,FOLLOW_DO_in_synpred368_Delphi15601); if (state.failed) return;

		pushFollow(FOLLOW_statement_in_synpred368_Delphi15603);
		statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred368_Delphi

	// $ANTLR start synpred371_Delphi
	public final void synpred371_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:564:41: ( statementList )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:564:41: statementList
		{
		pushFollow(FOLLOW_statementList_in_synpred371_Delphi15879);
		statementList();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred371_Delphi

	// $ANTLR start synpred372_Delphi
	public final void synpred372_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:566:33: ( statement )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:566:33: statement
		{
		pushFollow(FOLLOW_statement_in_synpred372_Delphi15949);
		statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred372_Delphi

	// $ANTLR start synpred373_Delphi
	public final void synpred373_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:566:51: ( statement )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:566:51: statement
		{
		pushFollow(FOLLOW_statement_in_synpred373_Delphi15957);
		statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred373_Delphi

	// $ANTLR start synpred374_Delphi
	public final void synpred374_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:566:46: ( ';' ( statement )? )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:566:46: ';' ( statement )?
		{
		match(input,SEMI,FOLLOW_SEMI_in_synpred374_Delphi15954); if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:566:50: ( statement )?
		int alt375=2;
		int LA375_0 = input.LA(1);
		if ( (LA375_0==ADD||LA375_0==ANSISTRING||LA375_0==ASM||(LA375_0 >= ASSIGN && LA375_0 <= AT2)||(LA375_0 >= BEGIN && LA375_0 <= CASE)||(LA375_0 >= CONTAINS && LA375_0 <= CONTINUE)||LA375_0==DEFAULT||LA375_0==DOT||LA375_0==EXIT||LA375_0==EXPORT||LA375_0==FINAL||LA375_0==FOR||LA375_0==GOTO||LA375_0==IF||LA375_0==IMPLEMENTS||(LA375_0 >= INDEX && LA375_0 <= INHERITED)||LA375_0==LBRACK||(LA375_0 >= LOCAL && LA375_0 <= MESSAGE)||LA375_0==NAME||LA375_0==OBJECT||LA375_0==OPERATOR||LA375_0==OUT||(LA375_0 >= POINTER && LA375_0 <= POINTER2)||LA375_0==RAISE||(LA375_0 >= READ && LA375_0 <= READONLY)||(LA375_0 >= REFERENCE && LA375_0 <= REGISTER)||(LA375_0 >= REMOVE && LA375_0 <= REPEAT)||LA375_0==STATIC||(LA375_0 >= STORED && LA375_0 <= STRING)||LA375_0==TRY||(LA375_0 >= TkHexNum && LA375_0 <= TkIntNum)||LA375_0==UNSAFE||LA375_0==VARIANT||(LA375_0 >= WHILE && LA375_0 <= WRITE)||LA375_0==198) ) {
			alt375=1;
		}
		else if ( (LA375_0==EOF) ) {
			int LA375_2 = input.LA(2);
			if ( (synpred373_Delphi()) ) {
				alt375=1;
			}
		}
		switch (alt375) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:566:51: statement
				{
				pushFollow(FOLLOW_statement_in_synpred374_Delphi15957);
				statement();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred374_Delphi

	// $ANTLR start synpred375_Delphi
	public final void synpred375_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:568:32: ( designator ':=' expression )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:568:32: designator ':=' expression
		{
		pushFollow(FOLLOW_designator_in_synpred375_Delphi16011);
		designator();
		state._fsp--;
		if (state.failed) return;

		match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred375_Delphi16013); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred375_Delphi16015);
		expression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred375_Delphi

	// $ANTLR start synpred376_Delphi
	public final void synpred376_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:569:32: ( designator )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:569:32: designator
		{
		pushFollow(FOLLOW_designator_in_synpred376_Delphi16048);
		designator();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred376_Delphi

	// $ANTLR start synpred378_Delphi
	public final void synpred378_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:573:40: ( '(' expression ')' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:573:40: '(' expression ')'
		{
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred378_Delphi16172); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred378_Delphi16174);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,RPAREN,FOLLOW_RPAREN_in_synpred378_Delphi16176); if (state.failed) return;

		}

	}
	// $ANTLR end synpred378_Delphi

	// $ANTLR start synpred382_Delphi
	public final void synpred382_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:32: ( '(' recordConstExpression ( ';' recordConstExpression )* ')' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:32: '(' recordConstExpression ( ';' recordConstExpression )* ')'
		{
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred382_Delphi16297); if (state.failed) return;

		pushFollow(FOLLOW_recordConstExpression_in_synpred382_Delphi16299);
		recordConstExpression();
		state._fsp--;
		if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:58: ( ';' recordConstExpression )*
		loop377:
		while (true) {
			int alt377=2;
			int LA377_0 = input.LA(1);
			if ( (LA377_0==SEMI) ) {
				alt377=1;
			}

			switch (alt377) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:59: ';' recordConstExpression
				{
				match(input,SEMI,FOLLOW_SEMI_in_synpred382_Delphi16302); if (state.failed) return;

				pushFollow(FOLLOW_recordConstExpression_in_synpred382_Delphi16304);
				recordConstExpression();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop377;
			}
		}

		match(input,RPAREN,FOLLOW_RPAREN_in_synpred382_Delphi16308); if (state.failed) return;

		}

	}
	// $ANTLR end synpred382_Delphi

	// $ANTLR start synpred384_Delphi
	public final void synpred384_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:581:80: ( constExpression )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:581:80: constExpression
		{
		pushFollow(FOLLOW_constExpression_in_synpred384_Delphi16356);
		constExpression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred384_Delphi

	// $ANTLR start synpred385_Delphi
	public final void synpred385_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:581:32: ( '(' constExpression ( ',' constExpression )* ')' ( constExpression )? )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:581:32: '(' constExpression ( ',' constExpression )* ')' ( constExpression )?
		{
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred385_Delphi16342); if (state.failed) return;

		pushFollow(FOLLOW_constExpression_in_synpred385_Delphi16344);
		constExpression();
		state._fsp--;
		if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:581:52: ( ',' constExpression )*
		loop378:
		while (true) {
			int alt378=2;
			int LA378_0 = input.LA(1);
			if ( (LA378_0==COMMA) ) {
				alt378=1;
			}

			switch (alt378) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:581:53: ',' constExpression
				{
				match(input,COMMA,FOLLOW_COMMA_in_synpred385_Delphi16347); if (state.failed) return;

				pushFollow(FOLLOW_constExpression_in_synpred385_Delphi16349);
				constExpression();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop378;
			}
		}

		match(input,RPAREN,FOLLOW_RPAREN_in_synpred385_Delphi16353); if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:581:79: ( constExpression )?
		int alt379=2;
		int LA379_0 = input.LA(1);
		if ( ((LA379_0 >= ADD && LA379_0 <= ANSISTRING)||LA379_0==AS||(LA379_0 >= AT && LA379_0 <= AT2)||LA379_0==BREAK||(LA379_0 >= CONTAINS && LA379_0 <= ControlString)||LA379_0==DEFAULT||LA379_0==DIV||LA379_0==DOT||LA379_0==EQUAL||LA379_0==EXIT||LA379_0==EXPORT||LA379_0==FALSE||LA379_0==FINAL||(LA379_0 >= FUNCTION && LA379_0 <= GE)||LA379_0==GT||(LA379_0 >= IMPLEMENTS && LA379_0 <= INHERITED)||LA379_0==IS||LA379_0==LBRACK||LA379_0==LE||(LA379_0 >= LOCAL && LA379_0 <= NAME)||LA379_0==NIL||(LA379_0 >= NOT && LA379_0 <= OBJECT)||(LA379_0 >= OPERATOR && LA379_0 <= OUT)||(LA379_0 >= PLUS && LA379_0 <= POINTER2)||LA379_0==PROCEDURE||LA379_0==QuotedString||(LA379_0 >= READ && LA379_0 <= READONLY)||(LA379_0 >= REFERENCE && LA379_0 <= REGISTER)||LA379_0==REMOVE||(LA379_0 >= SHL && LA379_0 <= STATIC)||(LA379_0 >= STORED && LA379_0 <= STRING)||LA379_0==TRUE||(LA379_0 >= TkHexNum && LA379_0 <= TkIntNum)||LA379_0==TkRealNum||LA379_0==UNSAFE||LA379_0==VARIANT||LA379_0==WRITE||(LA379_0 >= XOR && LA379_0 <= 199)) ) {
			alt379=1;
		}
		else if ( (LA379_0==EOF) ) {
			int LA379_2 = input.LA(2);
			if ( (synpred384_Delphi()) ) {
				alt379=1;
			}
		}
		switch (alt379) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:581:80: constExpression
				{
				pushFollow(FOLLOW_constExpression_in_synpred385_Delphi16356);
				constExpression();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred385_Delphi

	// $ANTLR start synpred386_Delphi
	public final void synpred386_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:39: ( statementList )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:39: statementList
		{
		pushFollow(FOLLOW_statementList_in_synpred386_Delphi16498);
		statementList();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred386_Delphi

	// $ANTLR start synpred387_Delphi
	public final void synpred387_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:32: ( 'try' ( statementList )? 'except' handlerList 'end' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:32: 'try' ( statementList )? 'except' handlerList 'end'
		{
		match(input,TRY,FOLLOW_TRY_in_synpred387_Delphi16495); if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:38: ( statementList )?
		int alt380=2;
		int LA380_0 = input.LA(1);
		if ( (LA380_0==ADD||LA380_0==ANSISTRING||LA380_0==ASM||(LA380_0 >= ASSIGN && LA380_0 <= AT2)||(LA380_0 >= BEGIN && LA380_0 <= CASE)||(LA380_0 >= CONTAINS && LA380_0 <= CONTINUE)||LA380_0==DEFAULT||LA380_0==DOT||LA380_0==EXIT||LA380_0==EXPORT||LA380_0==FINAL||LA380_0==FOR||LA380_0==GOTO||LA380_0==IF||LA380_0==IMPLEMENTS||(LA380_0 >= INDEX && LA380_0 <= INHERITED)||LA380_0==LBRACK||(LA380_0 >= LOCAL && LA380_0 <= MESSAGE)||LA380_0==NAME||LA380_0==OBJECT||LA380_0==OPERATOR||LA380_0==OUT||(LA380_0 >= POINTER && LA380_0 <= POINTER2)||LA380_0==RAISE||(LA380_0 >= READ && LA380_0 <= READONLY)||(LA380_0 >= REFERENCE && LA380_0 <= REGISTER)||(LA380_0 >= REMOVE && LA380_0 <= REPEAT)||LA380_0==SEMI||LA380_0==STATIC||(LA380_0 >= STORED && LA380_0 <= STRING)||LA380_0==TRY||(LA380_0 >= TkHexNum && LA380_0 <= TkIntNum)||LA380_0==UNSAFE||LA380_0==VARIANT||(LA380_0 >= WHILE && LA380_0 <= WRITE)||LA380_0==198) ) {
			alt380=1;
		}
		else if ( (LA380_0==EXCEPT) ) {
			int LA380_2 = input.LA(2);
			if ( (synpred386_Delphi()) ) {
				alt380=1;
			}
		}
		switch (alt380) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:39: statementList
				{
				pushFollow(FOLLOW_statementList_in_synpred387_Delphi16498);
				statementList();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		match(input,EXCEPT,FOLLOW_EXCEPT_in_synpred387_Delphi16502); if (state.failed) return;

		pushFollow(FOLLOW_handlerList_in_synpred387_Delphi16504);
		handlerList();
		state._fsp--;
		if (state.failed) return;

		match(input,END,FOLLOW_END_in_synpred387_Delphi16506); if (state.failed) return;

		}

	}
	// $ANTLR end synpred387_Delphi

	// $ANTLR start synpred388_Delphi
	public final void synpred388_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:590:39: ( statementList )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:590:39: statementList
		{
		pushFollow(FOLLOW_statementList_in_synpred388_Delphi16542);
		statementList();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred388_Delphi

	// $ANTLR start synpred389_Delphi
	public final void synpred389_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:590:66: ( statementList )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:590:66: statementList
		{
		pushFollow(FOLLOW_statementList_in_synpred389_Delphi16549);
		statementList();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred389_Delphi

	// $ANTLR start synpred392_Delphi
	public final void synpred392_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:592:32: ( ( handler )* ( 'else' statementList )? )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:592:32: ( handler )* ( 'else' statementList )?
		{
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:592:32: ( handler )*
		loop381:
		while (true) {
			int alt381=2;
			int LA381_0 = input.LA(1);
			if ( (LA381_0==ON) ) {
				alt381=1;
			}

			switch (alt381) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:592:33: handler
				{
				pushFollow(FOLLOW_handler_in_synpred392_Delphi16608);
				handler();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop381;
			}
		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:592:43: ( 'else' statementList )?
		int alt382=2;
		int LA382_0 = input.LA(1);
		if ( (LA382_0==ELSE) ) {
			alt382=1;
		}
		switch (alt382) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:592:44: 'else' statementList
				{
				match(input,ELSE,FOLLOW_ELSE_in_synpred392_Delphi16613); if (state.failed) return;

				pushFollow(FOLLOW_statementList_in_synpred392_Delphi16615);
				statementList();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred392_Delphi

	// $ANTLR start synpred395_Delphi
	public final void synpred395_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:599:32: ( statement ( ';' )? )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:599:32: statement ( ';' )?
		{
		pushFollow(FOLLOW_statement_in_synpred395_Delphi16825);
		statement();
		state._fsp--;
		if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:599:42: ( ';' )?
		int alt383=2;
		int LA383_0 = input.LA(1);
		if ( (LA383_0==SEMI) ) {
			alt383=1;
		}
		switch (alt383) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:599:43: ';'
				{
				match(input,SEMI,FOLLOW_SEMI_in_synpred395_Delphi16828); if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred395_Delphi

	// $ANTLR start synpred396_Delphi
	public final void synpred396_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:602:41: ( designator )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:602:41: designator
		{
		pushFollow(FOLLOW_designator_in_synpred396_Delphi16917);
		designator();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred396_Delphi

	// $ANTLR start synpred397_Delphi
	public final void synpred397_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:602:55: ( AT designator )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:602:55: AT designator
		{
		match(input,AT,FOLLOW_AT_in_synpred397_Delphi16922); if (state.failed) return;

		pushFollow(FOLLOW_designator_in_synpred397_Delphi16924);
		designator();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred397_Delphi

	// $ANTLR start synpred415_Delphi
	public final void synpred415_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:632:44: ( ';' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:632:44: ';'
		{
		match(input,SEMI,FOLLOW_SEMI_in_synpred415_Delphi17832); if (state.failed) return;

		}

	}
	// $ANTLR end synpred415_Delphi

	// $ANTLR start synpred439_Delphi
	public final void synpred439_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:670:32: ( 'external' ';' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:670:32: 'external' ';'
		{
		match(input,EXTERNAL,FOLLOW_EXTERNAL_in_synpred439_Delphi19037); if (state.failed) return;

		match(input,SEMI,FOLLOW_SEMI_in_synpred439_Delphi19039); if (state.failed) return;

		}

	}
	// $ANTLR end synpred439_Delphi

	// $ANTLR start synpred613_Delphi
	public final void synpred613_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:720:33: ( namespaceName '.' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:720:33: namespaceName '.'
		{
		pushFollow(FOLLOW_namespaceName_in_synpred613_Delphi21129);
		namespaceName();
		state._fsp--;
		if (state.failed) return;

		match(input,DOT,FOLLOW_DOT_in_synpred613_Delphi21131); if (state.failed) return;

		}

	}
	// $ANTLR end synpred613_Delphi

	// $ANTLR start synpred614_Delphi
	public final void synpred614_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:722:39: ( '.' ident )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:722:39: '.' ident
		{
		match(input,DOT,FOLLOW_DOT_in_synpred614_Delphi21190); if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred614_Delphi21192);
		ident();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred614_Delphi

	// $ANTLR start synpred615_Delphi
	public final void synpred615_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:724:34: ( ident '.' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:724:34: ident '.'
		{
		pushFollow(FOLLOW_ident_in_synpred615_Delphi21247);
		ident();
		state._fsp--;
		if (state.failed) return;

		match(input,DOT,FOLLOW_DOT_in_synpred615_Delphi21249); if (state.failed) return;

		}

	}
	// $ANTLR end synpred615_Delphi

	// Delegated rules

	public final boolean synpred31_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred31_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred32_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred32_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred36_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred36_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred358_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred358_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred30_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred30_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred392_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred392_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred70_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred70_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred314_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred314_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred262_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred262_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred261_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred261_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred299_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred299_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred297_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred297_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred310_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred310_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred317_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred317_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred296_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred296_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred298_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred298_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred315_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred315_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred316_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred316_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred313_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred313_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred125_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred125_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred134_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred134_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred293_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred293_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred295_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred295_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred123_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred123_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred415_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred415_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred258_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred258_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred173_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred173_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred396_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred396_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred218_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred218_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred68_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred68_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred64_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred64_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred385_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred385_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred389_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred389_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred387_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred387_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred40_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred40_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred42_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred42_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred24_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred24_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred197_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred197_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred382_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred382_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred214_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred214_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred327_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred327_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred61_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred61_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred62_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred62_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred80_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred80_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred179_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred179_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred83_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred83_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred305_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred305_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred306_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred306_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred309_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred309_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred154_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred154_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred301_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred301_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred302_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred302_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred291_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred291_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred288_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred288_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred289_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred289_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred124_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred124_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred150_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred150_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred292_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred292_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred248_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred248_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred120_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred120_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred87_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred87_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred266_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred266_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred259_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred259_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred397_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred397_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred237_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred237_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred69_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred69_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred65_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred65_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred386_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred386_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred54_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred54_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred375_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred375_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred368_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred368_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred371_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred371_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred50_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred50_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred372_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred372_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred202_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred202_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred187_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred187_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred186_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred186_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred200_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred200_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred614_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred614_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred148_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred148_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred149_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred149_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred613_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred613_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred615_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred615_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred94_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred94_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred90_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred90_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred92_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred92_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred95_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred95_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred145_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred145_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred283_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred283_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred144_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred144_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred284_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred284_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred282_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred282_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred142_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred142_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred285_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred285_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred276_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred276_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred97_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred97_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred300_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred300_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred151_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred151_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred274_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred274_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred278_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred278_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred247_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred247_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred86_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred86_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred88_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred88_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred110_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred110_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred191_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred191_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred378_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred378_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred209_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred209_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred236_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred236_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred184_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred184_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred180_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred180_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred245_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred245_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred241_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred241_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred232_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred232_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred367_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred367_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred46_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred46_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred376_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred376_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred53_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred53_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred238_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred238_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred193_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred193_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred48_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred48_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred374_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred374_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred213_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred213_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred81_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred81_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred23_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred23_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred250_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred250_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred304_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred304_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred159_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred159_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred155_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred155_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred439_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred439_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred156_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred156_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred272_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred272_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred290_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred290_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred303_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred303_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred307_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred307_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred141_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred141_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred133_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred133_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred294_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred294_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred126_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred126_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred275_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred275_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred279_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred279_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred96_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred96_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred119_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred119_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred257_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred257_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred111_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred111_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred174_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred174_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred395_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred395_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred192_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred192_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred235_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred235_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred217_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred217_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred242_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred242_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred38_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred38_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred67_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred67_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred63_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred63_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred359_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred359_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred388_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred388_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred384_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred384_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred45_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred45_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred231_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred231_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred366_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred366_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred196_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred196_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred373_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred373_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}


	protected DFA26 dfa26 = new DFA26(this);
	protected DFA30 dfa30 = new DFA30(this);
	protected DFA33 dfa33 = new DFA33(this);
	protected DFA48 dfa48 = new DFA48(this);
	protected DFA55 dfa55 = new DFA55(this);
	protected DFA59 dfa59 = new DFA59(this);
	protected DFA67 dfa67 = new DFA67(this);
	protected DFA68 dfa68 = new DFA68(this);
	protected DFA70 dfa70 = new DFA70(this);
	protected DFA86 dfa86 = new DFA86(this);
	protected DFA98 dfa98 = new DFA98(this);
	protected DFA106 dfa106 = new DFA106(this);
	protected DFA166 dfa166 = new DFA166(this);
	protected DFA168 dfa168 = new DFA168(this);
	protected DFA170 dfa170 = new DFA170(this);
	protected DFA188 dfa188 = new DFA188(this);
	protected DFA201 dfa201 = new DFA201(this);
	protected DFA212 dfa212 = new DFA212(this);
	protected DFA219 dfa219 = new DFA219(this);
	protected DFA230 dfa230 = new DFA230(this);
	protected DFA261 dfa261 = new DFA261(this);
	protected DFA260 dfa260 = new DFA260(this);
	protected DFA295 dfa295 = new DFA295(this);
	static final String DFA26_eotS =
		"\144\uffff";
	static final String DFA26_eofS =
		"\1\1\143\uffff";
	static final String DFA26_minS =
		"\1\4\11\uffff\1\0\6\uffff\1\0\6\uffff\3\0\2\uffff\2\0\1\uffff\1\0\5\uffff"+
		"\1\0\2\uffff\1\0\1\uffff\1\0\7\uffff\1\0\1\uffff\1\0\26\uffff\3\0\13\uffff"+
		"\1\0\5\uffff\1\0\3\uffff";
	static final String DFA26_maxS =
		"\1\u00c7\11\uffff\1\0\6\uffff\1\0\6\uffff\3\0\2\uffff\2\0\1\uffff\1\0"+
		"\5\uffff\1\0\2\uffff\1\0\1\uffff\1\0\7\uffff\1\0\1\uffff\1\0\26\uffff"+
		"\3\0\13\uffff\1\0\5\uffff\1\0\3\uffff";
	static final String DFA26_acceptS =
		"\1\uffff\1\2\141\uffff\1\1";
	static final String DFA26_specialS =
		"\12\uffff\1\0\6\uffff\1\1\6\uffff\1\2\1\3\1\4\2\uffff\1\5\1\6\1\uffff"+
		"\1\7\5\uffff\1\10\2\uffff\1\11\1\uffff\1\12\7\uffff\1\13\1\uffff\1\14"+
		"\26\uffff\1\15\1\16\1\17\13\uffff\1\20\5\uffff\1\21\3\uffff}>";
	static final String[] DFA26_transitionS = {
			"\1\1\1\uffff\1\140\1\1\1\140\1\uffff\3\1\2\uffff\1\140\2\1\1\uffff\1"+
			"\1\1\140\5\1\1\uffff\2\1\2\140\1\1\1\uffff\1\36\3\1\1\uffff\5\1\5\uffff"+
			"\4\1\1\140\1\1\1\51\4\1\1\uffff\1\140\2\1\2\uffff\2\1\1\uffff\1\1\4\uffff"+
			"\1\1\1\40\1\1\1\65\3\1\1\uffff\2\1\1\12\2\uffff\2\1\1\53\2\1\1\140\2"+
			"\1\1\21\5\1\1\140\2\1\1\132\1\1\1\140\1\1\3\uffff\3\1\1\140\3\1\1\uffff"+
			"\5\1\1\uffff\1\1\2\uffff\1\30\1\32\1\uffff\1\140\1\46\1\uffff\1\140\2"+
			"\uffff\4\1\1\uffff\1\1\1\uffff\4\1\1\140\1\1\1\35\1\116\1\140\4\1\1\uffff"+
			"\1\1\15\uffff\1\1\1\114\1\1\3\uffff\1\1\6\uffff\1\63\1\1\2\uffff\2\1"+
			"\1\140\3\uffff\1\31\1\1\1\uffff\1\1\1\115\1\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			""
	};

	static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_eotS);
	static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_eofS);
	static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_minS);
	static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_maxS);
	static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_acceptS);
	static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_specialS);
	static final short[][] DFA26_transition;

	static {
		int numStates = DFA26_transitionS.length;
		DFA26_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA26_transition[i] = DFA.unpackEncodedString(DFA26_transitionS[i]);
		}
	}

	protected class DFA26 extends DFA {

		public DFA26(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 26;
			this.eot = DFA26_eot;
			this.eof = DFA26_eof;
			this.min = DFA26_min;
			this.max = DFA26_max;
			this.accept = DFA26_accept;
			this.special = DFA26_special;
			this.transition = DFA26_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 150:41: ( constDeclaration )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA26_10 = input.LA(1);
						 
						int index26_10 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_10);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA26_17 = input.LA(1);
						 
						int index26_17 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_17);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA26_24 = input.LA(1);
						 
						int index26_24 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_24);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA26_25 = input.LA(1);
						 
						int index26_25 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_25);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA26_26 = input.LA(1);
						 
						int index26_26 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_26);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA26_29 = input.LA(1);
						 
						int index26_29 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_29);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA26_30 = input.LA(1);
						 
						int index26_30 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_30);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA26_32 = input.LA(1);
						 
						int index26_32 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_32);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA26_38 = input.LA(1);
						 
						int index26_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_38);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA26_41 = input.LA(1);
						 
						int index26_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_41);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA26_43 = input.LA(1);
						 
						int index26_43 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_43);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA26_51 = input.LA(1);
						 
						int index26_51 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_51);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA26_53 = input.LA(1);
						 
						int index26_53 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_53);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA26_76 = input.LA(1);
						 
						int index26_76 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_76);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA26_77 = input.LA(1);
						 
						int index26_77 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_77);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA26_78 = input.LA(1);
						 
						int index26_78 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_78);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA26_90 = input.LA(1);
						 
						int index26_90 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_90);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA26_96 = input.LA(1);
						 
						int index26_96 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_96);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 26, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA30_eotS =
		"\144\uffff";
	static final String DFA30_eofS =
		"\1\1\143\uffff";
	static final String DFA30_minS =
		"\1\4\11\uffff\1\0\6\uffff\1\0\6\uffff\3\0\2\uffff\2\0\1\uffff\1\0\5\uffff"+
		"\1\0\2\uffff\1\0\1\uffff\1\0\7\uffff\1\0\1\uffff\1\0\26\uffff\3\0\13\uffff"+
		"\1\0\5\uffff\1\0\3\uffff";
	static final String DFA30_maxS =
		"\1\u00c7\11\uffff\1\0\6\uffff\1\0\6\uffff\3\0\2\uffff\2\0\1\uffff\1\0"+
		"\5\uffff\1\0\2\uffff\1\0\1\uffff\1\0\7\uffff\1\0\1\uffff\1\0\26\uffff"+
		"\3\0\13\uffff\1\0\5\uffff\1\0\3\uffff";
	static final String DFA30_acceptS =
		"\1\uffff\1\2\141\uffff\1\1";
	static final String DFA30_specialS =
		"\12\uffff\1\0\6\uffff\1\1\6\uffff\1\2\1\3\1\4\2\uffff\1\5\1\6\1\uffff"+
		"\1\7\5\uffff\1\10\2\uffff\1\11\1\uffff\1\12\7\uffff\1\13\1\uffff\1\14"+
		"\26\uffff\1\15\1\16\1\17\13\uffff\1\20\5\uffff\1\21\3\uffff}>";
	static final String[] DFA30_transitionS = {
			"\1\1\1\uffff\1\140\1\1\1\140\1\uffff\3\1\2\uffff\1\140\2\1\1\uffff\1"+
			"\1\1\140\5\1\1\uffff\2\1\2\140\1\1\1\uffff\1\36\3\1\1\uffff\5\1\5\uffff"+
			"\4\1\1\140\1\1\1\51\4\1\1\uffff\1\140\2\1\2\uffff\2\1\1\uffff\1\1\4\uffff"+
			"\1\1\1\40\1\1\1\65\3\1\1\uffff\2\1\1\12\2\uffff\2\1\1\53\2\1\1\140\2"+
			"\1\1\21\5\1\1\140\2\1\1\132\1\1\1\140\1\1\3\uffff\3\1\1\140\3\1\1\uffff"+
			"\5\1\1\uffff\1\1\2\uffff\1\30\1\32\1\uffff\1\140\1\46\1\uffff\1\140\2"+
			"\uffff\4\1\1\uffff\1\1\1\uffff\4\1\1\140\1\1\1\35\1\116\1\140\4\1\1\uffff"+
			"\1\1\15\uffff\1\1\1\114\1\1\3\uffff\1\1\6\uffff\1\63\1\1\2\uffff\2\1"+
			"\1\140\3\uffff\1\31\1\1\1\uffff\1\1\1\115\1\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			""
	};

	static final short[] DFA30_eot = DFA.unpackEncodedString(DFA30_eotS);
	static final short[] DFA30_eof = DFA.unpackEncodedString(DFA30_eofS);
	static final char[] DFA30_min = DFA.unpackEncodedStringToUnsignedChars(DFA30_minS);
	static final char[] DFA30_max = DFA.unpackEncodedStringToUnsignedChars(DFA30_maxS);
	static final short[] DFA30_accept = DFA.unpackEncodedString(DFA30_acceptS);
	static final short[] DFA30_special = DFA.unpackEncodedString(DFA30_specialS);
	static final short[][] DFA30_transition;

	static {
		int numStates = DFA30_transitionS.length;
		DFA30_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA30_transition[i] = DFA.unpackEncodedString(DFA30_transitionS[i]);
		}
	}

	protected class DFA30 extends DFA {

		public DFA30(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 30;
			this.eot = DFA30_eot;
			this.eof = DFA30_eof;
			this.min = DFA30_min;
			this.max = DFA30_max;
			this.accept = DFA30_accept;
			this.special = DFA30_special;
			this.transition = DFA30_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 157:55: ( typeDeclaration )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA30_10 = input.LA(1);
						 
						int index30_10 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_10);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA30_17 = input.LA(1);
						 
						int index30_17 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_17);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA30_24 = input.LA(1);
						 
						int index30_24 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_24);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA30_25 = input.LA(1);
						 
						int index30_25 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_25);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA30_26 = input.LA(1);
						 
						int index30_26 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_26);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA30_29 = input.LA(1);
						 
						int index30_29 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_29);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA30_30 = input.LA(1);
						 
						int index30_30 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_30);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA30_32 = input.LA(1);
						 
						int index30_32 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_32);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA30_38 = input.LA(1);
						 
						int index30_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_38);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA30_41 = input.LA(1);
						 
						int index30_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_41);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA30_43 = input.LA(1);
						 
						int index30_43 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_43);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA30_51 = input.LA(1);
						 
						int index30_51 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_51);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA30_53 = input.LA(1);
						 
						int index30_53 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_53);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA30_76 = input.LA(1);
						 
						int index30_76 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_76);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA30_77 = input.LA(1);
						 
						int index30_77 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_77);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA30_78 = input.LA(1);
						 
						int index30_78 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_78);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA30_90 = input.LA(1);
						 
						int index30_90 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_90);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA30_96 = input.LA(1);
						 
						int index30_96 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_96);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 30, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA33_eotS =
		"\144\uffff";
	static final String DFA33_eofS =
		"\1\1\143\uffff";
	static final String DFA33_minS =
		"\1\4\11\uffff\1\0\6\uffff\1\0\6\uffff\3\0\2\uffff\2\0\1\uffff\1\0\5\uffff"+
		"\1\0\2\uffff\1\0\1\uffff\1\0\7\uffff\1\0\1\uffff\1\0\26\uffff\3\0\13\uffff"+
		"\1\0\5\uffff\1\0\3\uffff";
	static final String DFA33_maxS =
		"\1\u00c7\11\uffff\1\0\6\uffff\1\0\6\uffff\3\0\2\uffff\2\0\1\uffff\1\0"+
		"\5\uffff\1\0\2\uffff\1\0\1\uffff\1\0\7\uffff\1\0\1\uffff\1\0\26\uffff"+
		"\3\0\13\uffff\1\0\5\uffff\1\0\3\uffff";
	static final String DFA33_acceptS =
		"\1\uffff\1\2\141\uffff\1\1";
	static final String DFA33_specialS =
		"\12\uffff\1\0\6\uffff\1\1\6\uffff\1\2\1\3\1\4\2\uffff\1\5\1\6\1\uffff"+
		"\1\7\5\uffff\1\10\2\uffff\1\11\1\uffff\1\12\7\uffff\1\13\1\uffff\1\14"+
		"\26\uffff\1\15\1\16\1\17\13\uffff\1\20\5\uffff\1\21\3\uffff}>";
	static final String[] DFA33_transitionS = {
			"\1\1\1\uffff\1\140\1\1\1\140\1\uffff\3\1\2\uffff\1\140\2\1\1\uffff\1"+
			"\1\1\140\5\1\1\uffff\2\1\2\140\1\1\1\uffff\1\36\3\1\1\uffff\5\1\5\uffff"+
			"\4\1\1\140\1\1\1\51\4\1\1\uffff\1\140\2\1\2\uffff\2\1\1\uffff\1\1\4\uffff"+
			"\1\1\1\40\1\1\1\65\3\1\1\uffff\2\1\1\12\2\uffff\2\1\1\53\2\1\1\140\2"+
			"\1\1\21\5\1\1\140\2\1\1\132\1\1\1\140\1\1\3\uffff\3\1\1\140\3\1\1\uffff"+
			"\5\1\1\uffff\1\1\2\uffff\1\30\1\32\1\uffff\1\140\1\46\1\uffff\1\140\2"+
			"\uffff\4\1\1\uffff\1\1\1\uffff\4\1\1\140\1\1\1\35\1\116\1\140\4\1\1\uffff"+
			"\1\1\15\uffff\1\1\1\114\1\1\3\uffff\1\1\6\uffff\1\63\1\1\2\uffff\2\1"+
			"\1\140\3\uffff\1\31\1\1\1\uffff\1\1\1\115\1\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			""
	};

	static final short[] DFA33_eot = DFA.unpackEncodedString(DFA33_eotS);
	static final short[] DFA33_eof = DFA.unpackEncodedString(DFA33_eofS);
	static final char[] DFA33_min = DFA.unpackEncodedStringToUnsignedChars(DFA33_minS);
	static final char[] DFA33_max = DFA.unpackEncodedStringToUnsignedChars(DFA33_maxS);
	static final short[] DFA33_accept = DFA.unpackEncodedString(DFA33_acceptS);
	static final short[] DFA33_special = DFA.unpackEncodedString(DFA33_specialS);
	static final short[][] DFA33_transition;

	static {
		int numStates = DFA33_transitionS.length;
		DFA33_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA33_transition[i] = DFA.unpackEncodedString(DFA33_transitionS[i]);
		}
	}

	protected class DFA33 extends DFA {

		public DFA33(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 33;
			this.eot = DFA33_eot;
			this.eof = DFA33_eof;
			this.min = DFA33_min;
			this.max = DFA33_max;
			this.accept = DFA33_accept;
			this.special = DFA33_special;
			this.transition = DFA33_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 161:54: ( varDeclaration )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA33_10 = input.LA(1);
						 
						int index33_10 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_10);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA33_17 = input.LA(1);
						 
						int index33_17 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_17);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA33_24 = input.LA(1);
						 
						int index33_24 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_24);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA33_25 = input.LA(1);
						 
						int index33_25 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_25);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA33_26 = input.LA(1);
						 
						int index33_26 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_26);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA33_29 = input.LA(1);
						 
						int index33_29 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_29);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA33_30 = input.LA(1);
						 
						int index33_30 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_30);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA33_32 = input.LA(1);
						 
						int index33_32 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_32);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA33_38 = input.LA(1);
						 
						int index33_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_38);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA33_41 = input.LA(1);
						 
						int index33_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_41);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA33_43 = input.LA(1);
						 
						int index33_43 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_43);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA33_51 = input.LA(1);
						 
						int index33_51 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_51);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA33_53 = input.LA(1);
						 
						int index33_53 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_53);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA33_76 = input.LA(1);
						 
						int index33_76 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_76);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA33_77 = input.LA(1);
						 
						int index33_77 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_77);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA33_78 = input.LA(1);
						 
						int index33_78 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_78);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA33_90 = input.LA(1);
						 
						int index33_90 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_90);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA33_96 = input.LA(1);
						 
						int index33_96 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred48_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_96);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 33, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA48_eotS =
		"\164\uffff";
	static final String DFA48_eofS =
		"\1\25\163\uffff";
	static final String DFA48_minS =
		"\1\4\4\uffff\1\0\1\uffff\1\0\1\uffff\14\0\35\uffff\1\0\3\uffff\1\0\6\uffff"+
		"\1\0\13\uffff\1\0\1\uffff\3\0\2\uffff\2\0\1\uffff\1\0\5\uffff\1\0\2\uffff"+
		"\1\0\3\uffff\1\0\2\uffff\1\0\20\uffff";
	static final String DFA48_maxS =
		"\1\u00c7\4\uffff\1\0\1\uffff\1\0\1\uffff\14\0\35\uffff\1\0\3\uffff\1\0"+
		"\6\uffff\1\0\13\uffff\1\0\1\uffff\3\0\2\uffff\2\0\1\uffff\1\0\5\uffff"+
		"\1\0\2\uffff\1\0\3\uffff\1\0\2\uffff\1\0\20\uffff";
	static final String DFA48_acceptS =
		"\1\uffff\1\1\23\uffff\1\7\131\uffff\1\6\1\2\1\3\1\4\1\5";
	static final String DFA48_specialS =
		"\5\uffff\1\0\1\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
		"\1\13\1\14\1\15\35\uffff\1\16\3\uffff\1\17\6\uffff\1\20\13\uffff\1\21"+
		"\1\uffff\1\22\1\23\1\24\2\uffff\1\25\1\26\1\uffff\1\27\5\uffff\1\30\2"+
		"\uffff\1\31\3\uffff\1\32\2\uffff\1\33\20\uffff}>";
	static final String[] DFA48_transitionS = {
			"\1\25\1\uffff\1\143\1\25\1\15\1\1\3\25\2\uffff\1\143\2\25\1\uffff\1\25"+
			"\1\143\2\25\1\5\2\25\1\uffff\2\25\2\143\1\25\1\uffff\1\120\3\25\1\1\5"+
			"\25\5\uffff\4\25\1\143\1\25\1\131\4\25\1\1\1\143\2\25\2\uffff\1\16\1"+
			"\25\1\uffff\1\25\4\uffff\1\25\1\121\1\25\1\140\3\25\1\1\3\25\2\uffff"+
			"\2\25\1\123\2\25\1\143\2\25\1\75\5\25\1\7\2\25\1\66\1\25\1\143\1\25\2"+
			"\uffff\1\1\3\25\1\12\1\11\1\25\1\17\1\uffff\5\25\1\uffff\1\25\2\uffff"+
			"\1\111\1\114\1\1\1\20\1\24\1\uffff\1\143\2\uffff\4\25\1\uffff\1\25\1"+
			"\1\4\25\1\143\1\25\1\115\1\62\1\13\4\25\1\uffff\1\14\15\uffff\1\25\1"+
			"\22\1\25\3\uffff\1\25\6\uffff\1\134\1\25\2\uffff\2\25\1\21\3\uffff\1"+
			"\113\1\25\1\uffff\1\25\1\23\1\25",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_eotS);
	static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_eofS);
	static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_minS);
	static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_maxS);
	static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_acceptS);
	static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_specialS);
	static final short[][] DFA48_transition;

	static {
		int numStates = DFA48_transitionS.length;
		DFA48_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA48_transition[i] = DFA.unpackEncodedString(DFA48_transitionS[i]);
		}
	}

	protected class DFA48 extends DFA {

		public DFA48(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 48;
			this.eot = DFA48_eot;
			this.eof = DFA48_eof;
			this.min = DFA48_min;
			this.max = DFA48_max;
			this.accept = DFA48_accept;
			this.special = DFA48_special;
			this.transition = DFA48_transition;
		}
		@Override
		public String getDescription() {
			return "180:1: typeDecl : ( strucType | pointerType | stringType | procedureType | variantType | ( 'type' )? typeId ( genericPostfix )? ( '.' typeDecl )* ( paranthesePostfix )? | simpleType );";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA48_5 = input.LA(1);
						 
						int index48_5 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred61_Delphi()) ) {s = 1;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_5);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA48_7 = input.LA(1);
						 
						int index48_7 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred61_Delphi()) ) {s = 1;}
						else if ( (synpred70_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_7);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA48_9 = input.LA(1);
						 
						int index48_9 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred62_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_9);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA48_10 = input.LA(1);
						 
						int index48_10 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred62_Delphi()) ) {s = 112;}
						else if ( (synpred70_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_10);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA48_11 = input.LA(1);
						 
						int index48_11 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred63_Delphi()) ) {s = 113;}
						else if ( (synpred70_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_11);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA48_12 = input.LA(1);
						 
						int index48_12 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred63_Delphi()) ) {s = 113;}
						else if ( (synpred70_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_12);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA48_13 = input.LA(1);
						 
						int index48_13 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred63_Delphi()) ) {s = 113;}
						else if ( (synpred70_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_13);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA48_14 = input.LA(1);
						 
						int index48_14 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred64_Delphi()) ) {s = 114;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_14);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA48_15 = input.LA(1);
						 
						int index48_15 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred64_Delphi()) ) {s = 114;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_15);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA48_16 = input.LA(1);
						 
						int index48_16 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred64_Delphi()) ) {s = 114;}
						else if ( (synpred70_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_16);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA48_17 = input.LA(1);
						 
						int index48_17 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred65_Delphi()) ) {s = 115;}
						else if ( (synpred70_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_17);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA48_18 = input.LA(1);
						 
						int index48_18 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred70_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_18);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA48_19 = input.LA(1);
						 
						int index48_19 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred70_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_19);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA48_20 = input.LA(1);
						 
						int index48_20 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred70_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_20);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA48_50 = input.LA(1);
						 
						int index48_50 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred70_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_50);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA48_54 = input.LA(1);
						 
						int index48_54 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred70_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_54);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA48_61 = input.LA(1);
						 
						int index48_61 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred70_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_61);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA48_73 = input.LA(1);
						 
						int index48_73 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred70_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_73);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA48_75 = input.LA(1);
						 
						int index48_75 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred70_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_75);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA48_76 = input.LA(1);
						 
						int index48_76 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred70_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_76);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA48_77 = input.LA(1);
						 
						int index48_77 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred70_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_77);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA48_80 = input.LA(1);
						 
						int index48_80 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred70_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_80);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA48_81 = input.LA(1);
						 
						int index48_81 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred70_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_81);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA48_83 = input.LA(1);
						 
						int index48_83 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred70_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_83);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA48_89 = input.LA(1);
						 
						int index48_89 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred70_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_89);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA48_92 = input.LA(1);
						 
						int index48_92 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred70_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_92);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA48_96 = input.LA(1);
						 
						int index48_96 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred70_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_96);
						if ( s>=0 ) return s;
						break;

					case 27 : 
						int LA48_99 = input.LA(1);
						 
						int index48_99 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred70_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_99);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 48, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA55_eotS =
		"\16\uffff";
	static final String DFA55_eofS =
		"\1\uffff\1\6\1\uffff\1\6\3\uffff\3\6\1\uffff\3\6";
	static final String DFA55_minS =
		"\1\6\1\7\1\4\1\7\1\uffff\1\6\1\uffff\3\7\1\4\3\7";
	static final String DFA55_maxS =
		"\1\u00c7\3\u00c5\1\uffff\1\u00c6\1\uffff\7\u00c5";
	static final String DFA55_acceptS =
		"\4\uffff\1\2\1\uffff\1\1\7\uffff";
	static final String DFA55_specialS =
		"\16\uffff}>";
	static final String[] DFA55_transitionS = {
			"\1\3\1\4\1\3\1\uffff\1\4\4\uffff\1\3\1\4\3\uffff\1\3\10\uffff\2\3\1\4"+
			"\1\uffff\1\3\4\uffff\1\4\1\uffff\2\4\10\uffff\1\4\1\uffff\1\3\1\uffff"+
			"\1\3\2\uffff\1\4\2\uffff\1\3\4\uffff\2\4\1\uffff\1\4\5\uffff\1\3\1\4"+
			"\1\3\1\4\3\uffff\1\4\1\uffff\1\4\2\uffff\1\4\1\uffff\1\3\2\4\1\3\2\4"+
			"\1\3\1\uffff\1\4\1\uffff\2\4\1\3\2\uffff\1\3\1\4\1\3\6\uffff\1\4\1\3"+
			"\1\4\1\uffff\1\4\5\uffff\1\4\4\uffff\2\3\1\uffff\2\3\1\uffff\1\3\11\uffff"+
			"\4\4\1\3\1\uffff\3\3\3\uffff\1\4\17\uffff\1\4\1\1\1\4\3\uffff\1\4\6\uffff"+
			"\1\3\5\uffff\1\3\3\uffff\1\3\2\uffff\1\4\1\2\1\4",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\6\14\uffff\1\4\1\uffff\1\5\1"+
			"\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1\4\7\uffff"+
			"\1\4\1\uffff\1\4\11\uffff\1\6\22\uffff\4\4\62\uffff\1\4",
			"\12\10\1\uffff\1\10\1\uffff\1\10\1\uffff\5\10\3\uffff\4\10\2\uffff\7"+
			"\10\2\uffff\4\10\2\uffff\2\10\1\uffff\17\10\1\uffff\1\10\1\uffff\1\10"+
			"\2\uffff\13\10\4\uffff\2\10\2\uffff\1\10\1\uffff\6\10\1\uffff\14\10\1"+
			"\uffff\1\10\1\uffff\7\10\1\uffff\1\10\3\uffff\13\10\1\uffff\2\10\1\uffff"+
			"\3\10\2\uffff\13\10\16\uffff\1\7\12\uffff\4\10\1\uffff\10\10\1\uffff"+
			"\1\10",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\6\14\uffff\1\4\1\uffff\1\5\1"+
			"\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1\4\7\uffff"+
			"\1\4\1\uffff\1\4\11\uffff\1\6\22\uffff\4\4\62\uffff\1\4",
			"",
			"\1\13\1\uffff\1\13\6\uffff\1\13\4\uffff\1\13\10\uffff\2\13\2\uffff\1"+
			"\13\22\uffff\1\13\1\uffff\1\13\5\uffff\1\13\15\uffff\1\13\1\uffff\1\13"+
			"\13\uffff\1\13\2\uffff\1\13\2\uffff\1\13\5\uffff\1\13\2\uffff\1\13\1"+
			"\uffff\1\13\7\uffff\1\13\15\uffff\2\13\1\uffff\2\13\1\uffff\1\13\15\uffff"+
			"\1\13\1\uffff\3\13\24\uffff\1\11\13\uffff\1\13\5\uffff\1\13\3\uffff\1"+
			"\13\3\uffff\1\12",
			"",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\6\14\uffff\1\4\1\uffff\1\5\1"+
			"\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1\4\7\uffff"+
			"\1\4\1\uffff\1\4\11\uffff\1\6\22\uffff\4\4\62\uffff\1\4",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\6\14\uffff\1\4\1\uffff\1\5\1"+
			"\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1\4\7\uffff"+
			"\1\4\1\uffff\1\4\11\uffff\1\6\22\uffff\4\4\62\uffff\1\4",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\6\14\uffff\1\4\1\uffff\1\5\1"+
			"\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1\4\7\uffff"+
			"\1\4\1\uffff\1\4\11\uffff\1\6\22\uffff\4\4\62\uffff\1\4",
			"\12\15\1\uffff\1\15\1\uffff\1\15\1\uffff\5\15\3\uffff\4\15\2\uffff\7"+
			"\15\2\uffff\4\15\2\uffff\2\15\1\uffff\17\15\1\uffff\1\15\1\uffff\1\15"+
			"\2\uffff\13\15\4\uffff\2\15\2\uffff\1\15\1\uffff\6\15\1\uffff\14\15\1"+
			"\uffff\1\15\1\uffff\7\15\1\uffff\1\15\3\uffff\13\15\1\uffff\2\15\1\uffff"+
			"\3\15\2\uffff\13\15\16\uffff\1\14\12\uffff\4\15\1\uffff\10\15\1\uffff"+
			"\1\15",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\6\14\uffff\1\4\1\uffff\1\5\1"+
			"\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1\4\7\uffff"+
			"\1\4\1\uffff\1\4\11\uffff\1\6\22\uffff\4\4\62\uffff\1\4",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\6\14\uffff\1\4\1\uffff\1\5\1"+
			"\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1\4\7\uffff"+
			"\1\4\1\uffff\1\4\11\uffff\1\6\22\uffff\4\4\62\uffff\1\4",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\6\14\uffff\1\4\1\uffff\1\5\1"+
			"\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1\4\7\uffff"+
			"\1\4\1\uffff\1\4\11\uffff\1\6\22\uffff\4\4\62\uffff\1\4"
	};

	static final short[] DFA55_eot = DFA.unpackEncodedString(DFA55_eotS);
	static final short[] DFA55_eof = DFA.unpackEncodedString(DFA55_eofS);
	static final char[] DFA55_min = DFA.unpackEncodedStringToUnsignedChars(DFA55_minS);
	static final char[] DFA55_max = DFA.unpackEncodedStringToUnsignedChars(DFA55_maxS);
	static final short[] DFA55_accept = DFA.unpackEncodedString(DFA55_acceptS);
	static final short[] DFA55_special = DFA.unpackEncodedString(DFA55_specialS);
	static final short[][] DFA55_transition;

	static {
		int numStates = DFA55_transitionS.length;
		DFA55_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA55_transition[i] = DFA.unpackEncodedString(DFA55_transitionS[i]);
		}
	}

	protected class DFA55 extends DFA {

		public DFA55(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 55;
			this.eot = DFA55_eot;
			this.eof = DFA55_eof;
			this.min = DFA55_min;
			this.max = DFA55_max;
			this.accept = DFA55_accept;
			this.special = DFA55_special;
			this.transition = DFA55_transition;
		}
		@Override
		public String getDescription() {
			return "200:1: arrayIndex : ( typeId | expression '..' expression );";
		}
	}

	static final String DFA59_eotS =
		"\144\uffff";
	static final String DFA59_eofS =
		"\1\2\143\uffff";
	static final String DFA59_minS =
		"\1\4\1\0\142\uffff";
	static final String DFA59_maxS =
		"\1\u00c7\1\0\142\uffff";
	static final String DFA59_acceptS =
		"\2\uffff\1\2\140\uffff\1\1";
	static final String DFA59_specialS =
		"\1\uffff\1\0\142\uffff}>";
	static final String[] DFA59_transitionS = {
			"\1\2\1\uffff\3\2\1\uffff\3\2\2\uffff\3\2\1\uffff\7\2\1\uffff\5\2\1\uffff"+
			"\4\2\1\uffff\5\2\5\uffff\13\2\1\uffff\3\2\2\uffff\2\2\1\uffff\1\2\4\uffff"+
			"\7\2\1\uffff\2\2\1\1\2\uffff\25\2\3\uffff\7\2\1\uffff\5\2\1\uffff\1\2"+
			"\2\uffff\2\2\1\uffff\2\2\1\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff"+
			"\15\2\1\uffff\1\2\15\uffff\3\2\3\uffff\1\2\6\uffff\2\2\2\uffff\3\2\3"+
			"\uffff\2\2\1\uffff\3\2",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA59_eot = DFA.unpackEncodedString(DFA59_eotS);
	static final short[] DFA59_eof = DFA.unpackEncodedString(DFA59_eofS);
	static final char[] DFA59_min = DFA.unpackEncodedStringToUnsignedChars(DFA59_minS);
	static final char[] DFA59_max = DFA.unpackEncodedStringToUnsignedChars(DFA59_maxS);
	static final short[] DFA59_accept = DFA.unpackEncodedString(DFA59_acceptS);
	static final short[] DFA59_special = DFA.unpackEncodedString(DFA59_specialS);
	static final short[][] DFA59_transition;

	static {
		int numStates = DFA59_transitionS.length;
		DFA59_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA59_transition[i] = DFA.unpackEncodedString(DFA59_transitionS[i]);
		}
	}

	protected class DFA59 extends DFA {

		public DFA59(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 59;
			this.eot = DFA59_eot;
			this.eof = DFA59_eof;
			this.min = DFA59_min;
			this.max = DFA59_max;
			this.accept = DFA59_accept;
			this.special = DFA59_special;
			this.transition = DFA59_transition;
		}
		@Override
		public String getDescription() {
			return "215:41: ( '[' expression ']' )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA59_1 = input.LA(1);
						 
						int index59_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred83_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index59_1);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 59, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA67_eotS =
		"\161\uffff";
	static final String DFA67_eofS =
		"\1\63\160\uffff";
	static final String DFA67_minS =
		"\1\4\156\0\2\uffff";
	static final String DFA67_maxS =
		"\1\u00c7\156\0\2\uffff";
	static final String DFA67_acceptS =
		"\157\uffff\1\1\1\2";
	static final String DFA67_specialS =
		"\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
		"\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
		"\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
		"\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
		"\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
		"\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117\1\120"+
		"\1\121\1\122\1\123\1\124\1\125\1\126\1\127\1\130\1\131\1\132\1\133\1\134"+
		"\1\135\1\136\1\137\1\140\1\141\1\142\1\143\1\144\1\145\1\146\1\147\1\150"+
		"\1\151\1\152\1\153\1\154\1\155\2\uffff}>";
	static final String[] DFA67_transitionS = {
			"\1\62\1\uffff\1\143\1\46\1\16\1\3\1\46\1\110\1\126\2\uffff\1\143\1\27"+
			"\1\73\1\uffff\1\107\1\143\1\102\1\55\1\6\1\144\1\64\1\uffff\1\77\1\74"+
			"\2\143\1\41\1\uffff\1\120\1\56\1\74\1\117\1\7\1\46\1\154\1\44\1\51\1"+
			"\156\5\uffff\1\146\1\101\1\47\1\151\1\143\1\57\1\131\1\106\1\137\1\37"+
			"\1\133\1\5\1\143\1\147\1\152\2\uffff\1\17\1\65\1\uffff\1\50\4\uffff\1"+
			"\142\1\121\1\65\1\140\1\43\1\141\1\125\1\7\1\65\1\105\1\1\2\uffff\1\65"+
			"\1\61\1\123\1\26\1\45\1\143\1\33\1\46\1\75\1\135\1\40\1\122\1\31\1\65"+
			"\1\10\1\52\1\153\1\66\1\46\1\143\1\124\2\uffff\1\2\1\127\1\60\1\32\1"+
			"\13\1\12\1\70\1\20\1\uffff\1\76\1\67\1\71\1\72\1\42\1\uffff\1\104\2\uffff"+
			"\1\111\1\114\1\11\1\21\1\25\1\uffff\1\143\2\uffff\1\112\1\77\1\103\1"+
			"\130\1\uffff\1\53\1\4\4\46\1\143\1\132\1\115\1\54\1\14\1\145\1\100\1"+
			"\155\1\36\1\uffff\1\15\15\uffff\1\35\1\23\1\35\3\uffff\1\34\6\uffff\1"+
			"\134\1\150\2\uffff\1\100\1\136\1\22\3\uffff\1\113\1\116\1\uffff\1\46"+
			"\1\24\1\30",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			""
	};

	static final short[] DFA67_eot = DFA.unpackEncodedString(DFA67_eotS);
	static final short[] DFA67_eof = DFA.unpackEncodedString(DFA67_eofS);
	static final char[] DFA67_min = DFA.unpackEncodedStringToUnsignedChars(DFA67_minS);
	static final char[] DFA67_max = DFA.unpackEncodedStringToUnsignedChars(DFA67_maxS);
	static final short[] DFA67_accept = DFA.unpackEncodedString(DFA67_acceptS);
	static final short[] DFA67_special = DFA.unpackEncodedString(DFA67_specialS);
	static final short[][] DFA67_transition;

	static {
		int numStates = DFA67_transitionS.length;
		DFA67_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA67_transition[i] = DFA.unpackEncodedString(DFA67_transitionS[i]);
		}
	}

	protected class DFA67 extends DFA {

		public DFA67(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 67;
			this.eot = DFA67_eot;
			this.eof = DFA67_eof;
			this.min = DFA67_min;
			this.max = DFA67_max;
			this.accept = DFA67_accept;
			this.special = DFA67_special;
			this.transition = DFA67_transition;
		}
		@Override
		public String getDescription() {
			return "230:73: ( customAttribute )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA67_1 = input.LA(1);
						 
						int index67_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_1);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA67_2 = input.LA(1);
						 
						int index67_2 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_2);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA67_3 = input.LA(1);
						 
						int index67_3 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_3);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA67_4 = input.LA(1);
						 
						int index67_4 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_4);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA67_5 = input.LA(1);
						 
						int index67_5 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_5);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA67_6 = input.LA(1);
						 
						int index67_6 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_6);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA67_7 = input.LA(1);
						 
						int index67_7 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_7);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA67_8 = input.LA(1);
						 
						int index67_8 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_8);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA67_9 = input.LA(1);
						 
						int index67_9 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_9);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA67_10 = input.LA(1);
						 
						int index67_10 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_10);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA67_11 = input.LA(1);
						 
						int index67_11 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_11);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA67_12 = input.LA(1);
						 
						int index67_12 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_12);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA67_13 = input.LA(1);
						 
						int index67_13 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_13);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA67_14 = input.LA(1);
						 
						int index67_14 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_14);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA67_15 = input.LA(1);
						 
						int index67_15 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_15);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA67_16 = input.LA(1);
						 
						int index67_16 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_16);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA67_17 = input.LA(1);
						 
						int index67_17 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_17);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA67_18 = input.LA(1);
						 
						int index67_18 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_18);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA67_19 = input.LA(1);
						 
						int index67_19 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_19);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA67_20 = input.LA(1);
						 
						int index67_20 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_20);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA67_21 = input.LA(1);
						 
						int index67_21 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_21);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA67_22 = input.LA(1);
						 
						int index67_22 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_22);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA67_23 = input.LA(1);
						 
						int index67_23 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_23);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA67_24 = input.LA(1);
						 
						int index67_24 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_24);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA67_25 = input.LA(1);
						 
						int index67_25 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_25);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA67_26 = input.LA(1);
						 
						int index67_26 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_26);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA67_27 = input.LA(1);
						 
						int index67_27 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_27);
						if ( s>=0 ) return s;
						break;

					case 27 : 
						int LA67_28 = input.LA(1);
						 
						int index67_28 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_28);
						if ( s>=0 ) return s;
						break;

					case 28 : 
						int LA67_29 = input.LA(1);
						 
						int index67_29 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_29);
						if ( s>=0 ) return s;
						break;

					case 29 : 
						int LA67_30 = input.LA(1);
						 
						int index67_30 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_30);
						if ( s>=0 ) return s;
						break;

					case 30 : 
						int LA67_31 = input.LA(1);
						 
						int index67_31 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_31);
						if ( s>=0 ) return s;
						break;

					case 31 : 
						int LA67_32 = input.LA(1);
						 
						int index67_32 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_32);
						if ( s>=0 ) return s;
						break;

					case 32 : 
						int LA67_33 = input.LA(1);
						 
						int index67_33 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_33);
						if ( s>=0 ) return s;
						break;

					case 33 : 
						int LA67_34 = input.LA(1);
						 
						int index67_34 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_34);
						if ( s>=0 ) return s;
						break;

					case 34 : 
						int LA67_35 = input.LA(1);
						 
						int index67_35 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_35);
						if ( s>=0 ) return s;
						break;

					case 35 : 
						int LA67_36 = input.LA(1);
						 
						int index67_36 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_36);
						if ( s>=0 ) return s;
						break;

					case 36 : 
						int LA67_37 = input.LA(1);
						 
						int index67_37 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_37);
						if ( s>=0 ) return s;
						break;

					case 37 : 
						int LA67_38 = input.LA(1);
						 
						int index67_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_38);
						if ( s>=0 ) return s;
						break;

					case 38 : 
						int LA67_39 = input.LA(1);
						 
						int index67_39 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_39);
						if ( s>=0 ) return s;
						break;

					case 39 : 
						int LA67_40 = input.LA(1);
						 
						int index67_40 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_40);
						if ( s>=0 ) return s;
						break;

					case 40 : 
						int LA67_41 = input.LA(1);
						 
						int index67_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_41);
						if ( s>=0 ) return s;
						break;

					case 41 : 
						int LA67_42 = input.LA(1);
						 
						int index67_42 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_42);
						if ( s>=0 ) return s;
						break;

					case 42 : 
						int LA67_43 = input.LA(1);
						 
						int index67_43 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_43);
						if ( s>=0 ) return s;
						break;

					case 43 : 
						int LA67_44 = input.LA(1);
						 
						int index67_44 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_44);
						if ( s>=0 ) return s;
						break;

					case 44 : 
						int LA67_45 = input.LA(1);
						 
						int index67_45 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_45);
						if ( s>=0 ) return s;
						break;

					case 45 : 
						int LA67_46 = input.LA(1);
						 
						int index67_46 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_46);
						if ( s>=0 ) return s;
						break;

					case 46 : 
						int LA67_47 = input.LA(1);
						 
						int index67_47 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_47);
						if ( s>=0 ) return s;
						break;

					case 47 : 
						int LA67_48 = input.LA(1);
						 
						int index67_48 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_48);
						if ( s>=0 ) return s;
						break;

					case 48 : 
						int LA67_49 = input.LA(1);
						 
						int index67_49 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_49);
						if ( s>=0 ) return s;
						break;

					case 49 : 
						int LA67_50 = input.LA(1);
						 
						int index67_50 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_50);
						if ( s>=0 ) return s;
						break;

					case 50 : 
						int LA67_51 = input.LA(1);
						 
						int index67_51 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_51);
						if ( s>=0 ) return s;
						break;

					case 51 : 
						int LA67_52 = input.LA(1);
						 
						int index67_52 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_52);
						if ( s>=0 ) return s;
						break;

					case 52 : 
						int LA67_53 = input.LA(1);
						 
						int index67_53 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_53);
						if ( s>=0 ) return s;
						break;

					case 53 : 
						int LA67_54 = input.LA(1);
						 
						int index67_54 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_54);
						if ( s>=0 ) return s;
						break;

					case 54 : 
						int LA67_55 = input.LA(1);
						 
						int index67_55 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_55);
						if ( s>=0 ) return s;
						break;

					case 55 : 
						int LA67_56 = input.LA(1);
						 
						int index67_56 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_56);
						if ( s>=0 ) return s;
						break;

					case 56 : 
						int LA67_57 = input.LA(1);
						 
						int index67_57 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_57);
						if ( s>=0 ) return s;
						break;

					case 57 : 
						int LA67_58 = input.LA(1);
						 
						int index67_58 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_58);
						if ( s>=0 ) return s;
						break;

					case 58 : 
						int LA67_59 = input.LA(1);
						 
						int index67_59 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_59);
						if ( s>=0 ) return s;
						break;

					case 59 : 
						int LA67_60 = input.LA(1);
						 
						int index67_60 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_60);
						if ( s>=0 ) return s;
						break;

					case 60 : 
						int LA67_61 = input.LA(1);
						 
						int index67_61 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_61);
						if ( s>=0 ) return s;
						break;

					case 61 : 
						int LA67_62 = input.LA(1);
						 
						int index67_62 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_62);
						if ( s>=0 ) return s;
						break;

					case 62 : 
						int LA67_63 = input.LA(1);
						 
						int index67_63 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_63);
						if ( s>=0 ) return s;
						break;

					case 63 : 
						int LA67_64 = input.LA(1);
						 
						int index67_64 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_64);
						if ( s>=0 ) return s;
						break;

					case 64 : 
						int LA67_65 = input.LA(1);
						 
						int index67_65 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_65);
						if ( s>=0 ) return s;
						break;

					case 65 : 
						int LA67_66 = input.LA(1);
						 
						int index67_66 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_66);
						if ( s>=0 ) return s;
						break;

					case 66 : 
						int LA67_67 = input.LA(1);
						 
						int index67_67 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_67);
						if ( s>=0 ) return s;
						break;

					case 67 : 
						int LA67_68 = input.LA(1);
						 
						int index67_68 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_68);
						if ( s>=0 ) return s;
						break;

					case 68 : 
						int LA67_69 = input.LA(1);
						 
						int index67_69 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_69);
						if ( s>=0 ) return s;
						break;

					case 69 : 
						int LA67_70 = input.LA(1);
						 
						int index67_70 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_70);
						if ( s>=0 ) return s;
						break;

					case 70 : 
						int LA67_71 = input.LA(1);
						 
						int index67_71 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_71);
						if ( s>=0 ) return s;
						break;

					case 71 : 
						int LA67_72 = input.LA(1);
						 
						int index67_72 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_72);
						if ( s>=0 ) return s;
						break;

					case 72 : 
						int LA67_73 = input.LA(1);
						 
						int index67_73 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_73);
						if ( s>=0 ) return s;
						break;

					case 73 : 
						int LA67_74 = input.LA(1);
						 
						int index67_74 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_74);
						if ( s>=0 ) return s;
						break;

					case 74 : 
						int LA67_75 = input.LA(1);
						 
						int index67_75 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_75);
						if ( s>=0 ) return s;
						break;

					case 75 : 
						int LA67_76 = input.LA(1);
						 
						int index67_76 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_76);
						if ( s>=0 ) return s;
						break;

					case 76 : 
						int LA67_77 = input.LA(1);
						 
						int index67_77 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_77);
						if ( s>=0 ) return s;
						break;

					case 77 : 
						int LA67_78 = input.LA(1);
						 
						int index67_78 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_78);
						if ( s>=0 ) return s;
						break;

					case 78 : 
						int LA67_79 = input.LA(1);
						 
						int index67_79 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_79);
						if ( s>=0 ) return s;
						break;

					case 79 : 
						int LA67_80 = input.LA(1);
						 
						int index67_80 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_80);
						if ( s>=0 ) return s;
						break;

					case 80 : 
						int LA67_81 = input.LA(1);
						 
						int index67_81 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_81);
						if ( s>=0 ) return s;
						break;

					case 81 : 
						int LA67_82 = input.LA(1);
						 
						int index67_82 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_82);
						if ( s>=0 ) return s;
						break;

					case 82 : 
						int LA67_83 = input.LA(1);
						 
						int index67_83 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_83);
						if ( s>=0 ) return s;
						break;

					case 83 : 
						int LA67_84 = input.LA(1);
						 
						int index67_84 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_84);
						if ( s>=0 ) return s;
						break;

					case 84 : 
						int LA67_85 = input.LA(1);
						 
						int index67_85 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_85);
						if ( s>=0 ) return s;
						break;

					case 85 : 
						int LA67_86 = input.LA(1);
						 
						int index67_86 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_86);
						if ( s>=0 ) return s;
						break;

					case 86 : 
						int LA67_87 = input.LA(1);
						 
						int index67_87 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_87);
						if ( s>=0 ) return s;
						break;

					case 87 : 
						int LA67_88 = input.LA(1);
						 
						int index67_88 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_88);
						if ( s>=0 ) return s;
						break;

					case 88 : 
						int LA67_89 = input.LA(1);
						 
						int index67_89 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_89);
						if ( s>=0 ) return s;
						break;

					case 89 : 
						int LA67_90 = input.LA(1);
						 
						int index67_90 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_90);
						if ( s>=0 ) return s;
						break;

					case 90 : 
						int LA67_91 = input.LA(1);
						 
						int index67_91 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_91);
						if ( s>=0 ) return s;
						break;

					case 91 : 
						int LA67_92 = input.LA(1);
						 
						int index67_92 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_92);
						if ( s>=0 ) return s;
						break;

					case 92 : 
						int LA67_93 = input.LA(1);
						 
						int index67_93 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_93);
						if ( s>=0 ) return s;
						break;

					case 93 : 
						int LA67_94 = input.LA(1);
						 
						int index67_94 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_94);
						if ( s>=0 ) return s;
						break;

					case 94 : 
						int LA67_95 = input.LA(1);
						 
						int index67_95 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_95);
						if ( s>=0 ) return s;
						break;

					case 95 : 
						int LA67_96 = input.LA(1);
						 
						int index67_96 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_96);
						if ( s>=0 ) return s;
						break;

					case 96 : 
						int LA67_97 = input.LA(1);
						 
						int index67_97 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_97);
						if ( s>=0 ) return s;
						break;

					case 97 : 
						int LA67_98 = input.LA(1);
						 
						int index67_98 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_98);
						if ( s>=0 ) return s;
						break;

					case 98 : 
						int LA67_99 = input.LA(1);
						 
						int index67_99 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_99);
						if ( s>=0 ) return s;
						break;

					case 99 : 
						int LA67_100 = input.LA(1);
						 
						int index67_100 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_100);
						if ( s>=0 ) return s;
						break;

					case 100 : 
						int LA67_101 = input.LA(1);
						 
						int index67_101 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_101);
						if ( s>=0 ) return s;
						break;

					case 101 : 
						int LA67_102 = input.LA(1);
						 
						int index67_102 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_102);
						if ( s>=0 ) return s;
						break;

					case 102 : 
						int LA67_103 = input.LA(1);
						 
						int index67_103 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_103);
						if ( s>=0 ) return s;
						break;

					case 103 : 
						int LA67_104 = input.LA(1);
						 
						int index67_104 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_104);
						if ( s>=0 ) return s;
						break;

					case 104 : 
						int LA67_105 = input.LA(1);
						 
						int index67_105 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_105);
						if ( s>=0 ) return s;
						break;

					case 105 : 
						int LA67_106 = input.LA(1);
						 
						int index67_106 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_106);
						if ( s>=0 ) return s;
						break;

					case 106 : 
						int LA67_107 = input.LA(1);
						 
						int index67_107 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_107);
						if ( s>=0 ) return s;
						break;

					case 107 : 
						int LA67_108 = input.LA(1);
						 
						int index67_108 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_108);
						if ( s>=0 ) return s;
						break;

					case 108 : 
						int LA67_109 = input.LA(1);
						 
						int index67_109 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_109);
						if ( s>=0 ) return s;
						break;

					case 109 : 
						int LA67_110 = input.LA(1);
						 
						int index67_110 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred92_Delphi()) ) {s = 111;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index67_110);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 67, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA68_eotS =
		"\144\uffff";
	static final String DFA68_eofS =
		"\1\2\143\uffff";
	static final String DFA68_minS =
		"\1\4\1\0\142\uffff";
	static final String DFA68_maxS =
		"\1\u00c7\1\0\142\uffff";
	static final String DFA68_acceptS =
		"\2\uffff\1\2\140\uffff\1\1";
	static final String DFA68_specialS =
		"\1\uffff\1\0\142\uffff}>";
	static final String[] DFA68_transitionS = {
			"\1\2\1\uffff\3\2\1\uffff\3\2\2\uffff\3\2\1\uffff\7\2\1\uffff\5\2\1\uffff"+
			"\4\2\1\uffff\5\2\5\uffff\13\2\1\uffff\3\2\2\uffff\2\2\1\uffff\1\2\4\uffff"+
			"\7\2\1\uffff\3\2\2\uffff\3\2\1\1\21\2\3\uffff\7\2\1\uffff\5\2\1\uffff"+
			"\1\2\2\uffff\2\2\1\uffff\2\2\1\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff"+
			"\15\2\1\uffff\1\2\15\uffff\3\2\3\uffff\1\2\6\uffff\2\2\2\uffff\3\2\3"+
			"\uffff\2\2\1\uffff\3\2",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA68_eot = DFA.unpackEncodedString(DFA68_eotS);
	static final short[] DFA68_eof = DFA.unpackEncodedString(DFA68_eofS);
	static final char[] DFA68_min = DFA.unpackEncodedStringToUnsignedChars(DFA68_minS);
	static final char[] DFA68_max = DFA.unpackEncodedStringToUnsignedChars(DFA68_maxS);
	static final short[] DFA68_accept = DFA.unpackEncodedString(DFA68_acceptS);
	static final short[] DFA68_special = DFA.unpackEncodedString(DFA68_specialS);
	static final short[][] DFA68_transition;

	static {
		int numStates = DFA68_transitionS.length;
		DFA68_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA68_transition[i] = DFA.unpackEncodedString(DFA68_transitionS[i]);
		}
	}

	protected class DFA68 extends DFA {

		public DFA68(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 68;
			this.eot = DFA68_eot;
			this.eof = DFA68_eof;
			this.min = DFA68_min;
			this.max = DFA68_max;
			this.accept = DFA68_accept;
			this.special = DFA68_special;
			this.transition = DFA68_transition;
		}
		@Override
		public String getDescription() {
			return "231:44: ( formalParameterSection )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA68_1 = input.LA(1);
						 
						int index68_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred94_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index68_1);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 68, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA70_eotS =
		"\145\uffff";
	static final String DFA70_eofS =
		"\1\5\144\uffff";
	static final String DFA70_minS =
		"\1\4\4\0\37\uffff\1\0\3\uffff\1\0\7\uffff\1\0\14\uffff\1\0\1\uffff\3\0"+
		"\2\uffff\2\0\1\uffff\1\0\5\uffff\1\0\2\uffff\1\0\3\uffff\1\0\2\uffff\1"+
		"\0\15\uffff";
	static final String DFA70_maxS =
		"\1\u00c7\4\0\37\uffff\1\0\3\uffff\1\0\7\uffff\1\0\14\uffff\1\0\1\uffff"+
		"\3\0\2\uffff\2\0\1\uffff\1\0\5\uffff\1\0\2\uffff\1\0\3\uffff\1\0\2\uffff"+
		"\1\0\15\uffff";
	static final String DFA70_acceptS =
		"\5\uffff\1\2\135\uffff\1\1\1\3";
	static final String DFA70_specialS =
		"\1\uffff\1\0\1\1\1\2\1\3\37\uffff\1\4\3\uffff\1\5\7\uffff\1\6\14\uffff"+
		"\1\7\1\uffff\1\10\1\11\1\12\2\uffff\1\13\1\14\1\uffff\1\15\5\uffff\1\16"+
		"\2\uffff\1\17\3\uffff\1\20\2\uffff\1\21\15\uffff}>";
	static final String[] DFA70_transitionS = {
			"\1\5\1\uffff\1\127\1\5\1\127\1\uffff\3\5\2\uffff\1\127\2\5\1\uffff\1"+
			"\5\1\127\5\5\1\uffff\2\5\2\127\1\5\1\uffff\1\104\3\5\1\uffff\5\5\5\uffff"+
			"\4\5\1\127\1\5\1\115\4\5\1\uffff\1\127\2\5\2\uffff\2\5\1\uffff\1\5\4"+
			"\uffff\1\5\1\105\1\5\1\124\3\5\1\uffff\3\5\2\uffff\2\5\1\107\1\4\1\5"+
			"\1\127\2\5\1\60\5\5\1\127\2\5\1\50\1\5\1\127\1\5\3\uffff\3\5\1\127\3"+
			"\5\1\uffff\5\5\1\uffff\1\5\2\uffff\1\75\1\100\1\uffff\1\127\1\3\1\uffff"+
			"\1\127\2\uffff\4\5\1\uffff\1\5\1\uffff\4\5\1\127\1\5\1\101\1\44\1\127"+
			"\4\5\1\uffff\1\5\15\uffff\1\5\1\1\1\5\3\uffff\1\5\6\uffff\1\120\1\5\2"+
			"\uffff\2\5\1\127\3\uffff\1\77\1\5\1\uffff\1\5\1\2\1\5",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA70_eot = DFA.unpackEncodedString(DFA70_eotS);
	static final short[] DFA70_eof = DFA.unpackEncodedString(DFA70_eofS);
	static final char[] DFA70_min = DFA.unpackEncodedStringToUnsignedChars(DFA70_minS);
	static final char[] DFA70_max = DFA.unpackEncodedStringToUnsignedChars(DFA70_maxS);
	static final short[] DFA70_accept = DFA.unpackEncodedString(DFA70_acceptS);
	static final short[] DFA70_special = DFA.unpackEncodedString(DFA70_specialS);
	static final short[][] DFA70_transition;

	static {
		int numStates = DFA70_transitionS.length;
		DFA70_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA70_transition[i] = DFA.unpackEncodedString(DFA70_transitionS[i]);
		}
	}

	protected class DFA70 extends DFA {

		public DFA70(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 70;
			this.eot = DFA70_eot;
			this.eof = DFA70_eof;
			this.min = DFA70_min;
			this.max = DFA70_max;
			this.accept = DFA70_accept;
			this.special = DFA70_special;
			this.transition = DFA70_transition;
		}
		@Override
		public String getDescription() {
			return "235:1: simpleType : ( ident | subRangeType | enumType );";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA70_1 = input.LA(1);
						 
						int index70_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred95_Delphi()) ) {s = 99;}
						else if ( (synpred96_Delphi()) ) {s = 5;}
						 
						input.seek(index70_1);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA70_2 = input.LA(1);
						 
						int index70_2 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred95_Delphi()) ) {s = 99;}
						else if ( (synpred96_Delphi()) ) {s = 5;}
						 
						input.seek(index70_2);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA70_3 = input.LA(1);
						 
						int index70_3 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred95_Delphi()) ) {s = 99;}
						else if ( (synpred96_Delphi()) ) {s = 5;}
						 
						input.seek(index70_3);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA70_4 = input.LA(1);
						 
						int index70_4 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred96_Delphi()) ) {s = 5;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index70_4);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA70_36 = input.LA(1);
						 
						int index70_36 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred95_Delphi()) ) {s = 99;}
						else if ( (synpred96_Delphi()) ) {s = 5;}
						 
						input.seek(index70_36);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA70_40 = input.LA(1);
						 
						int index70_40 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred95_Delphi()) ) {s = 99;}
						else if ( (synpred96_Delphi()) ) {s = 5;}
						 
						input.seek(index70_40);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA70_48 = input.LA(1);
						 
						int index70_48 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred95_Delphi()) ) {s = 99;}
						else if ( (synpred96_Delphi()) ) {s = 5;}
						 
						input.seek(index70_48);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA70_61 = input.LA(1);
						 
						int index70_61 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred95_Delphi()) ) {s = 99;}
						else if ( (synpred96_Delphi()) ) {s = 5;}
						 
						input.seek(index70_61);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA70_63 = input.LA(1);
						 
						int index70_63 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred95_Delphi()) ) {s = 99;}
						else if ( (synpred96_Delphi()) ) {s = 5;}
						 
						input.seek(index70_63);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA70_64 = input.LA(1);
						 
						int index70_64 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred95_Delphi()) ) {s = 99;}
						else if ( (synpred96_Delphi()) ) {s = 5;}
						 
						input.seek(index70_64);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA70_65 = input.LA(1);
						 
						int index70_65 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred95_Delphi()) ) {s = 99;}
						else if ( (synpred96_Delphi()) ) {s = 5;}
						 
						input.seek(index70_65);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA70_68 = input.LA(1);
						 
						int index70_68 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred95_Delphi()) ) {s = 99;}
						else if ( (synpred96_Delphi()) ) {s = 5;}
						 
						input.seek(index70_68);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA70_69 = input.LA(1);
						 
						int index70_69 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred95_Delphi()) ) {s = 99;}
						else if ( (synpred96_Delphi()) ) {s = 5;}
						 
						input.seek(index70_69);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA70_71 = input.LA(1);
						 
						int index70_71 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred95_Delphi()) ) {s = 99;}
						else if ( (synpred96_Delphi()) ) {s = 5;}
						 
						input.seek(index70_71);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA70_77 = input.LA(1);
						 
						int index70_77 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred95_Delphi()) ) {s = 99;}
						else if ( (synpred96_Delphi()) ) {s = 5;}
						 
						input.seek(index70_77);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA70_80 = input.LA(1);
						 
						int index70_80 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred95_Delphi()) ) {s = 99;}
						else if ( (synpred96_Delphi()) ) {s = 5;}
						 
						input.seek(index70_80);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA70_84 = input.LA(1);
						 
						int index70_84 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred95_Delphi()) ) {s = 99;}
						else if ( (synpred96_Delphi()) ) {s = 5;}
						 
						input.seek(index70_84);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA70_87 = input.LA(1);
						 
						int index70_87 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred95_Delphi()) ) {s = 99;}
						else if ( (synpred96_Delphi()) ) {s = 5;}
						 
						input.seek(index70_87);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 70, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA86_eotS =
		"\144\uffff";
	static final String DFA86_eofS =
		"\1\2\143\uffff";
	static final String DFA86_minS =
		"\1\4\1\0\142\uffff";
	static final String DFA86_maxS =
		"\1\u00c7\1\0\142\uffff";
	static final String DFA86_acceptS =
		"\2\uffff\1\2\140\uffff\1\1";
	static final String DFA86_specialS =
		"\1\uffff\1\0\142\uffff}>";
	static final String[] DFA86_transitionS = {
			"\1\2\1\uffff\3\2\1\uffff\3\2\2\uffff\3\2\1\uffff\7\2\1\uffff\5\2\1\uffff"+
			"\4\2\1\uffff\5\2\5\uffff\13\2\1\uffff\3\2\2\uffff\2\2\1\uffff\1\2\4\uffff"+
			"\7\2\1\uffff\3\2\2\uffff\3\2\1\1\21\2\3\uffff\7\2\1\uffff\5\2\1\uffff"+
			"\1\2\2\uffff\2\2\1\uffff\2\2\1\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff"+
			"\15\2\1\uffff\1\2\15\uffff\3\2\3\uffff\1\2\6\uffff\2\2\2\uffff\3\2\3"+
			"\uffff\2\2\1\uffff\3\2",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA86_eot = DFA.unpackEncodedString(DFA86_eotS);
	static final short[] DFA86_eof = DFA.unpackEncodedString(DFA86_eofS);
	static final char[] DFA86_min = DFA.unpackEncodedStringToUnsignedChars(DFA86_minS);
	static final char[] DFA86_max = DFA.unpackEncodedStringToUnsignedChars(DFA86_maxS);
	static final short[] DFA86_accept = DFA.unpackEncodedString(DFA86_acceptS);
	static final short[] DFA86_special = DFA.unpackEncodedString(DFA86_specialS);
	static final short[][] DFA86_transition;

	static {
		int numStates = DFA86_transitionS.length;
		DFA86_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA86_transition[i] = DFA.unpackEncodedString(DFA86_transitionS[i]);
		}
	}

	protected class DFA86 extends DFA {

		public DFA86(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 86;
			this.eot = DFA86_eot;
			this.eof = DFA86_eof;
			this.min = DFA86_min;
			this.max = DFA86_max;
			this.accept = DFA86_accept;
			this.special = DFA86_special;
			this.transition = DFA86_transition;
		}
		@Override
		public String getDescription() {
			return "277:40: ( classParent )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA86_1 = input.LA(1);
						 
						int index86_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred120_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index86_1);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 86, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA98_eotS =
		"\144\uffff";
	static final String DFA98_eofS =
		"\1\2\143\uffff";
	static final String DFA98_minS =
		"\1\4\1\0\142\uffff";
	static final String DFA98_maxS =
		"\1\u00c7\1\0\142\uffff";
	static final String DFA98_acceptS =
		"\2\uffff\1\2\140\uffff\1\1";
	static final String DFA98_specialS =
		"\1\uffff\1\0\142\uffff}>";
	static final String[] DFA98_transitionS = {
			"\1\2\1\uffff\3\2\1\uffff\3\2\2\uffff\3\2\1\uffff\7\2\1\uffff\5\2\1\uffff"+
			"\4\2\1\uffff\5\2\5\uffff\13\2\1\uffff\3\2\2\uffff\2\2\1\uffff\1\2\4\uffff"+
			"\7\2\1\uffff\3\2\2\uffff\3\2\1\1\21\2\3\uffff\7\2\1\uffff\5\2\1\uffff"+
			"\1\2\2\uffff\2\2\1\uffff\2\2\1\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff"+
			"\15\2\1\uffff\1\2\15\uffff\3\2\3\uffff\1\2\6\uffff\2\2\2\uffff\3\2\3"+
			"\uffff\2\2\1\uffff\3\2",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA98_eot = DFA.unpackEncodedString(DFA98_eotS);
	static final short[] DFA98_eof = DFA.unpackEncodedString(DFA98_eofS);
	static final char[] DFA98_min = DFA.unpackEncodedStringToUnsignedChars(DFA98_minS);
	static final char[] DFA98_max = DFA.unpackEncodedStringToUnsignedChars(DFA98_maxS);
	static final short[] DFA98_accept = DFA.unpackEncodedString(DFA98_acceptS);
	static final short[] DFA98_special = DFA.unpackEncodedString(DFA98_specialS);
	static final short[][] DFA98_transition;

	static {
		int numStates = DFA98_transitionS.length;
		DFA98_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA98_transition[i] = DFA.unpackEncodedString(DFA98_transitionS[i]);
		}
	}

	protected class DFA98 extends DFA {

		public DFA98(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 98;
			this.eot = DFA98_eot;
			this.eof = DFA98_eof;
			this.min = DFA98_min;
			this.max = DFA98_max;
			this.accept = DFA98_accept;
			this.special = DFA98_special;
			this.transition = DFA98_transition;
		}
		@Override
		public String getDescription() {
			return "303:45: ( classParent )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA98_1 = input.LA(1);
						 
						int index98_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred142_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index98_1);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 98, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA106_eotS =
		"\32\uffff";
	static final String DFA106_eofS =
		"\32\uffff";
	static final String DFA106_minS =
		"\1\6\1\30\1\uffff\1\6\1\30\1\4\1\30\1\6\3\0\2\30\1\0\1\30\1\4\1\30\1\uffff"+
		"\3\0\2\30\3\0";
	static final String DFA106_maxS =
		"\1\u00c6\1\167\1\uffff\1\u00c6\1\31\1\u00c5\1\31\1\u00c6\3\0\2\31\1\0"+
		"\1\31\1\u00c5\1\31\1\uffff\3\0\2\31\3\0";
	static final String DFA106_acceptS =
		"\2\uffff\1\2\16\uffff\1\1\10\uffff";
	static final String DFA106_specialS =
		"\10\uffff\1\1\1\2\1\0\2\uffff\1\3\4\uffff\1\4\1\5\1\6\2\uffff\1\7\1\10"+
		"\1\11}>";
	static final String[] DFA106_transitionS = {
			"\1\6\1\uffff\1\6\6\uffff\1\6\1\uffff\1\2\2\uffff\1\6\2\uffff\1\2\3\uffff"+
			"\2\2\2\6\2\uffff\1\6\1\uffff\1\2\15\uffff\1\2\2\uffff\1\6\1\uffff\1\6"+
			"\5\uffff\1\6\4\uffff\1\2\10\uffff\1\6\1\uffff\1\6\6\uffff\1\2\4\uffff"+
			"\1\6\2\uffff\1\6\2\uffff\1\6\5\uffff\1\6\2\uffff\1\3\1\uffff\1\6\7\uffff"+
			"\1\6\1\uffff\2\2\1\uffff\4\2\5\uffff\2\6\1\uffff\2\6\1\uffff\1\6\3\uffff"+
			"\1\2\11\uffff\1\6\1\uffff\1\6\1\1\1\6\1\uffff\1\2\3\uffff\1\2\16\uffff"+
			"\1\4\13\uffff\1\6\3\uffff\1\2\1\uffff\1\6\3\uffff\1\6\3\uffff\1\5",
			"\1\10\1\7\131\uffff\1\2\3\uffff\1\2",
			"",
			"\1\2\1\uffff\1\2\6\uffff\1\2\4\uffff\1\2\3\uffff\1\11\1\7\3\uffff\2"+
			"\2\2\uffff\1\2\22\uffff\1\2\1\uffff\1\2\5\uffff\1\2\15\uffff\1\2\1\uffff"+
			"\1\2\13\uffff\1\2\2\uffff\1\2\2\uffff\1\2\5\uffff\1\2\2\uffff\1\2\1\uffff"+
			"\1\2\7\uffff\1\2\15\uffff\2\2\1\uffff\2\2\1\uffff\1\2\15\uffff\1\2\1"+
			"\uffff\3\2\24\uffff\1\2\13\uffff\1\2\5\uffff\1\2\3\uffff\1\2\3\uffff"+
			"\1\2",
			"\1\12\1\7",
			"\12\14\1\uffff\1\14\1\uffff\1\14\1\uffff\5\14\3\uffff\4\14\2\uffff\7"+
			"\14\2\uffff\4\14\2\uffff\2\14\1\uffff\17\14\1\uffff\1\14\1\uffff\1\14"+
			"\2\uffff\13\14\4\uffff\2\14\2\uffff\1\14\1\uffff\6\14\1\uffff\14\14\1"+
			"\uffff\1\14\1\uffff\7\14\1\uffff\1\14\3\uffff\13\14\1\uffff\2\14\1\uffff"+
			"\3\14\2\uffff\13\14\16\uffff\1\13\12\uffff\4\14\1\uffff\10\14\1\uffff"+
			"\1\14",
			"\1\15\1\7",
			"\1\20\1\uffff\1\20\6\uffff\1\20\4\uffff\1\20\10\uffff\2\20\2\uffff\1"+
			"\20\22\uffff\1\20\1\uffff\1\20\5\uffff\1\20\15\uffff\1\20\1\uffff\1\20"+
			"\13\uffff\1\20\2\uffff\1\20\2\uffff\1\20\5\uffff\1\20\2\uffff\1\20\1"+
			"\uffff\1\20\7\uffff\1\20\15\uffff\2\20\1\uffff\2\20\1\uffff\1\20\15\uffff"+
			"\1\20\1\uffff\3\20\24\uffff\1\16\13\uffff\1\20\5\uffff\1\20\3\uffff\1"+
			"\20\3\uffff\1\17",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\22\1\7",
			"\1\23\1\7",
			"\1\uffff",
			"\1\24\1\7",
			"\12\26\1\uffff\1\26\1\uffff\1\26\1\uffff\5\26\3\uffff\4\26\2\uffff\7"+
			"\26\2\uffff\4\26\2\uffff\2\26\1\uffff\17\26\1\uffff\1\26\1\uffff\1\26"+
			"\2\uffff\13\26\4\uffff\2\26\2\uffff\1\26\1\uffff\6\26\1\uffff\14\26\1"+
			"\uffff\1\26\1\uffff\7\26\1\uffff\1\26\3\uffff\13\26\1\uffff\2\26\1\uffff"+
			"\3\26\2\uffff\13\26\16\uffff\1\25\12\uffff\4\26\1\uffff\10\26\1\uffff"+
			"\1\26",
			"\1\27\1\7",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\30\1\7",
			"\1\31\1\7",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff"
	};

	static final short[] DFA106_eot = DFA.unpackEncodedString(DFA106_eotS);
	static final short[] DFA106_eof = DFA.unpackEncodedString(DFA106_eofS);
	static final char[] DFA106_min = DFA.unpackEncodedStringToUnsignedChars(DFA106_minS);
	static final char[] DFA106_max = DFA.unpackEncodedStringToUnsignedChars(DFA106_maxS);
	static final short[] DFA106_accept = DFA.unpackEncodedString(DFA106_acceptS);
	static final short[] DFA106_special = DFA.unpackEncodedString(DFA106_specialS);
	static final short[][] DFA106_transition;

	static {
		int numStates = DFA106_transitionS.length;
		DFA106_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA106_transition[i] = DFA.unpackEncodedString(DFA106_transitionS[i]);
		}
	}

	protected class DFA106 extends DFA {

		public DFA106(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 106;
			this.eot = DFA106_eot;
			this.eof = DFA106_eof;
			this.min = DFA106_min;
			this.max = DFA106_max;
			this.accept = DFA106_accept;
			this.special = DFA106_special;
			this.transition = DFA106_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 323:41: ( recordField )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA106_10 = input.LA(1);
						 
						int index106_10 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred151_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index106_10);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA106_8 = input.LA(1);
						 
						int index106_8 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred151_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index106_8);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA106_9 = input.LA(1);
						 
						int index106_9 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred151_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index106_9);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA106_13 = input.LA(1);
						 
						int index106_13 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred151_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index106_13);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA106_18 = input.LA(1);
						 
						int index106_18 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred151_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index106_18);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA106_19 = input.LA(1);
						 
						int index106_19 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred151_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index106_19);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA106_20 = input.LA(1);
						 
						int index106_20 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred151_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index106_20);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA106_23 = input.LA(1);
						 
						int index106_23 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred151_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index106_23);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA106_24 = input.LA(1);
						 
						int index106_24 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred151_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index106_24);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA106_25 = input.LA(1);
						 
						int index106_25 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred151_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index106_25);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 106, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA166_eotS =
		"\144\uffff";
	static final String DFA166_eofS =
		"\1\1\143\uffff";
	static final String DFA166_minS =
		"\1\4\40\uffff\23\0\60\uffff";
	static final String DFA166_maxS =
		"\1\u00c7\40\uffff\23\0\60\uffff";
	static final String DFA166_acceptS =
		"\1\uffff\1\2\141\uffff\1\1";
	static final String DFA166_specialS =
		"\41\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
		"\1\16\1\17\1\20\1\21\1\22\60\uffff}>";
	static final String[] DFA166_transitionS = {
			"\1\1\1\uffff\3\1\1\uffff\2\1\1\43\2\uffff\3\1\1\uffff\3\1\1\44\3\1\1"+
			"\uffff\5\1\1\uffff\1\1\1\55\2\1\1\uffff\5\1\5\uffff\5\1\1\56\1\51\1\1"+
			"\1\62\1\1\1\52\1\uffff\3\1\2\uffff\2\1\1\uffff\1\1\4\uffff\6\1\1\42\1"+
			"\uffff\3\1\2\uffff\1\1\1\60\1\53\6\1\1\54\12\1\1\41\3\uffff\1\45\1\57"+
			"\5\1\1\uffff\5\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\1\46\1\uffff\1\1"+
			"\2\uffff\3\1\1\47\1\uffff\1\1\1\uffff\5\1\1\50\7\1\1\uffff\1\1\15\uffff"+
			"\3\1\3\uffff\1\1\6\uffff\1\63\1\1\2\uffff\1\1\1\61\1\1\3\uffff\2\1\1"+
			"\uffff\3\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA166_eot = DFA.unpackEncodedString(DFA166_eotS);
	static final short[] DFA166_eof = DFA.unpackEncodedString(DFA166_eofS);
	static final char[] DFA166_min = DFA.unpackEncodedStringToUnsignedChars(DFA166_minS);
	static final char[] DFA166_max = DFA.unpackEncodedStringToUnsignedChars(DFA166_maxS);
	static final short[] DFA166_accept = DFA.unpackEncodedString(DFA166_acceptS);
	static final short[] DFA166_special = DFA.unpackEncodedString(DFA166_specialS);
	static final short[][] DFA166_transition;

	static {
		int numStates = DFA166_transitionS.length;
		DFA166_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA166_transition[i] = DFA.unpackEncodedString(DFA166_transitionS[i]);
		}
	}

	protected class DFA166 extends DFA {

		public DFA166(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 166;
			this.eot = DFA166_eot;
			this.eof = DFA166_eof;
			this.min = DFA166_min;
			this.max = DFA166_max;
			this.accept = DFA166_accept;
			this.special = DFA166_special;
			this.transition = DFA166_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 404:112: ( functionDirective )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA166_33 = input.LA(1);
						 
						int index166_33 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred232_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_33);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA166_34 = input.LA(1);
						 
						int index166_34 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred232_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_34);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA166_35 = input.LA(1);
						 
						int index166_35 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred232_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_35);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA166_36 = input.LA(1);
						 
						int index166_36 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred232_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_36);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA166_37 = input.LA(1);
						 
						int index166_37 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred232_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_37);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA166_38 = input.LA(1);
						 
						int index166_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred232_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_38);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA166_39 = input.LA(1);
						 
						int index166_39 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred232_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_39);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA166_40 = input.LA(1);
						 
						int index166_40 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred232_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_40);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA166_41 = input.LA(1);
						 
						int index166_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred232_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_41);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA166_42 = input.LA(1);
						 
						int index166_42 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred232_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_42);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA166_43 = input.LA(1);
						 
						int index166_43 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred232_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_43);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA166_44 = input.LA(1);
						 
						int index166_44 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred232_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_44);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA166_45 = input.LA(1);
						 
						int index166_45 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred232_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_45);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA166_46 = input.LA(1);
						 
						int index166_46 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred232_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_46);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA166_47 = input.LA(1);
						 
						int index166_47 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred232_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_47);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA166_48 = input.LA(1);
						 
						int index166_48 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred232_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_48);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA166_49 = input.LA(1);
						 
						int index166_49 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred232_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_49);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA166_50 = input.LA(1);
						 
						int index166_50 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred232_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_50);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA166_51 = input.LA(1);
						 
						int index166_51 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred232_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index166_51);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 166, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA168_eotS =
		"\144\uffff";
	static final String DFA168_eofS =
		"\1\1\143\uffff";
	static final String DFA168_minS =
		"\1\4\40\uffff\23\0\60\uffff";
	static final String DFA168_maxS =
		"\1\u00c7\40\uffff\23\0\60\uffff";
	static final String DFA168_acceptS =
		"\1\uffff\1\2\141\uffff\1\1";
	static final String DFA168_specialS =
		"\41\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
		"\1\16\1\17\1\20\1\21\1\22\60\uffff}>";
	static final String[] DFA168_transitionS = {
			"\1\1\1\uffff\3\1\1\uffff\2\1\1\43\2\uffff\3\1\1\uffff\3\1\1\44\3\1\1"+
			"\uffff\5\1\1\uffff\1\1\1\55\2\1\1\uffff\5\1\5\uffff\5\1\1\56\1\51\1\1"+
			"\1\62\1\1\1\52\1\uffff\3\1\2\uffff\2\1\1\uffff\1\1\4\uffff\6\1\1\42\1"+
			"\uffff\3\1\2\uffff\1\1\1\60\1\53\6\1\1\54\12\1\1\41\3\uffff\1\45\1\57"+
			"\5\1\1\uffff\5\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\1\46\1\uffff\1\1"+
			"\2\uffff\3\1\1\47\1\uffff\1\1\1\uffff\5\1\1\50\7\1\1\uffff\1\1\15\uffff"+
			"\3\1\3\uffff\1\1\6\uffff\1\63\1\1\2\uffff\1\1\1\61\1\1\3\uffff\2\1\1"+
			"\uffff\3\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA168_eot = DFA.unpackEncodedString(DFA168_eotS);
	static final short[] DFA168_eof = DFA.unpackEncodedString(DFA168_eofS);
	static final char[] DFA168_min = DFA.unpackEncodedStringToUnsignedChars(DFA168_minS);
	static final char[] DFA168_max = DFA.unpackEncodedStringToUnsignedChars(DFA168_maxS);
	static final short[] DFA168_accept = DFA.unpackEncodedString(DFA168_acceptS);
	static final short[] DFA168_special = DFA.unpackEncodedString(DFA168_specialS);
	static final short[][] DFA168_transition;

	static {
		int numStates = DFA168_transitionS.length;
		DFA168_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA168_transition[i] = DFA.unpackEncodedString(DFA168_transitionS[i]);
		}
	}

	protected class DFA168 extends DFA {

		public DFA168(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 168;
			this.eot = DFA168_eot;
			this.eof = DFA168_eof;
			this.min = DFA168_min;
			this.max = DFA168_max;
			this.accept = DFA168_accept;
			this.special = DFA168_special;
			this.transition = DFA168_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 405:79: ( functionDirective )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA168_33 = input.LA(1);
						 
						int index168_33 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_33);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA168_34 = input.LA(1);
						 
						int index168_34 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_34);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA168_35 = input.LA(1);
						 
						int index168_35 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_35);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA168_36 = input.LA(1);
						 
						int index168_36 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_36);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA168_37 = input.LA(1);
						 
						int index168_37 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_37);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA168_38 = input.LA(1);
						 
						int index168_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_38);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA168_39 = input.LA(1);
						 
						int index168_39 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_39);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA168_40 = input.LA(1);
						 
						int index168_40 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_40);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA168_41 = input.LA(1);
						 
						int index168_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_41);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA168_42 = input.LA(1);
						 
						int index168_42 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_42);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA168_43 = input.LA(1);
						 
						int index168_43 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_43);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA168_44 = input.LA(1);
						 
						int index168_44 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_44);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA168_45 = input.LA(1);
						 
						int index168_45 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_45);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA168_46 = input.LA(1);
						 
						int index168_46 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_46);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA168_47 = input.LA(1);
						 
						int index168_47 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_47);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA168_48 = input.LA(1);
						 
						int index168_48 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_48);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA168_49 = input.LA(1);
						 
						int index168_49 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_49);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA168_50 = input.LA(1);
						 
						int index168_50 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_50);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA168_51 = input.LA(1);
						 
						int index168_51 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index168_51);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 168, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA170_eotS =
		"\153\uffff";
	static final String DFA170_eofS =
		"\1\1\152\uffff";
	static final String DFA170_minS =
		"\1\4\33\uffff\1\0\4\uffff\20\0\57\uffff\1\0\3\uffff\2\0\5\uffff";
	static final String DFA170_maxS =
		"\1\u00c7\33\uffff\1\0\4\uffff\20\0\57\uffff\1\0\3\uffff\2\0\5\uffff";
	static final String DFA170_acceptS =
		"\1\uffff\1\2\141\uffff\1\1\7\uffff";
	static final String DFA170_specialS =
		"\34\uffff\1\0\4\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
		"\1\14\1\15\1\16\1\17\1\20\57\uffff\1\21\3\uffff\1\22\1\23\5\uffff}>";
	static final String[] DFA170_transitionS = {
			"\1\1\1\143\3\1\1\uffff\2\1\1\43\2\uffff\3\1\1\uffff\3\1\1\44\3\1\1\uffff"+
			"\5\1\1\uffff\1\1\1\55\1\1\1\34\1\uffff\5\1\2\uffff\1\143\2\uffff\5\1"+
			"\1\56\1\51\3\1\1\52\1\uffff\1\145\2\1\2\uffff\2\1\1\uffff\1\1\4\uffff"+
			"\6\1\1\42\1\uffff\3\1\2\uffff\1\1\1\60\1\53\2\1\1\140\3\1\1\54\12\1\1"+
			"\41\1\143\2\uffff\1\45\1\57\5\1\1\uffff\5\1\1\uffff\1\1\2\uffff\2\1\1"+
			"\uffff\1\1\1\46\1\143\1\1\2\uffff\3\1\1\47\1\uffff\1\1\1\uffff\4\1\1"+
			"\144\1\50\7\1\1\uffff\1\1\15\uffff\3\1\3\uffff\1\1\6\uffff\2\1\2\uffff"+
			"\3\1\1\143\2\uffff\2\1\1\uffff\3\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA170_eot = DFA.unpackEncodedString(DFA170_eotS);
	static final short[] DFA170_eof = DFA.unpackEncodedString(DFA170_eofS);
	static final char[] DFA170_min = DFA.unpackEncodedStringToUnsignedChars(DFA170_minS);
	static final char[] DFA170_max = DFA.unpackEncodedStringToUnsignedChars(DFA170_maxS);
	static final short[] DFA170_accept = DFA.unpackEncodedString(DFA170_acceptS);
	static final short[] DFA170_special = DFA.unpackEncodedString(DFA170_specialS);
	static final short[][] DFA170_transition;

	static {
		int numStates = DFA170_transitionS.length;
		DFA170_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA170_transition[i] = DFA.unpackEncodedString(DFA170_transitionS[i]);
		}
	}

	protected class DFA170 extends DFA {

		public DFA170(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 170;
			this.eot = DFA170_eot;
			this.eof = DFA170_eof;
			this.min = DFA170_min;
			this.max = DFA170_max;
			this.accept = DFA170_accept;
			this.special = DFA170_special;
			this.transition = DFA170_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 407:54: ( methodDirective )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA170_28 = input.LA(1);
						 
						int index170_28 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred236_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_28);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA170_33 = input.LA(1);
						 
						int index170_33 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred236_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_33);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA170_34 = input.LA(1);
						 
						int index170_34 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred236_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_34);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA170_35 = input.LA(1);
						 
						int index170_35 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred236_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_35);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA170_36 = input.LA(1);
						 
						int index170_36 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred236_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_36);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA170_37 = input.LA(1);
						 
						int index170_37 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred236_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_37);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA170_38 = input.LA(1);
						 
						int index170_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred236_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_38);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA170_39 = input.LA(1);
						 
						int index170_39 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred236_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_39);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA170_40 = input.LA(1);
						 
						int index170_40 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred236_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_40);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA170_41 = input.LA(1);
						 
						int index170_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred236_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_41);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA170_42 = input.LA(1);
						 
						int index170_42 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred236_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_42);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA170_43 = input.LA(1);
						 
						int index170_43 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred236_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_43);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA170_44 = input.LA(1);
						 
						int index170_44 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred236_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_44);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA170_45 = input.LA(1);
						 
						int index170_45 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred236_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_45);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA170_46 = input.LA(1);
						 
						int index170_46 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred236_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_46);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA170_47 = input.LA(1);
						 
						int index170_47 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred236_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_47);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA170_48 = input.LA(1);
						 
						int index170_48 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred236_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_48);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA170_96 = input.LA(1);
						 
						int index170_96 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred236_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_96);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA170_100 = input.LA(1);
						 
						int index170_100 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred236_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_100);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA170_101 = input.LA(1);
						 
						int index170_101 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred236_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_101);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 170, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA188_eotS =
		"\145\uffff";
	static final String DFA188_eofS =
		"\1\1\144\uffff";
	static final String DFA188_minS =
		"\1\4\1\uffff\1\0\40\uffff\22\0\60\uffff";
	static final String DFA188_maxS =
		"\1\u00c7\1\uffff\1\0\40\uffff\22\0\60\uffff";
	static final String DFA188_acceptS =
		"\1\uffff\1\2\142\uffff\1\1";
	static final String DFA188_specialS =
		"\2\uffff\1\0\40\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
		"\1\14\1\15\1\16\1\17\1\20\1\21\1\22\60\uffff}>";
	static final String[] DFA188_transitionS = {
			"\1\1\1\uffff\3\1\1\uffff\2\1\1\45\2\uffff\3\1\1\uffff\3\1\1\46\3\1\1"+
			"\uffff\5\1\1\uffff\1\1\1\57\2\1\1\uffff\5\1\5\uffff\5\1\1\60\1\53\1\1"+
			"\1\2\1\1\1\54\1\uffff\3\1\1\uffff\3\1\1\uffff\1\1\4\uffff\6\1\1\44\1"+
			"\uffff\3\1\2\uffff\1\1\1\62\1\55\6\1\1\56\12\1\1\43\3\uffff\1\47\1\61"+
			"\5\1\1\uffff\5\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\1\50\1\uffff\1\1"+
			"\2\uffff\3\1\1\51\1\uffff\1\1\1\uffff\5\1\1\52\7\1\1\uffff\1\1\15\uffff"+
			"\3\1\3\uffff\1\1\6\uffff\1\64\1\1\2\uffff\1\1\1\63\1\1\3\uffff\2\1\1"+
			"\uffff\3\1",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA188_eot = DFA.unpackEncodedString(DFA188_eotS);
	static final short[] DFA188_eof = DFA.unpackEncodedString(DFA188_eofS);
	static final char[] DFA188_min = DFA.unpackEncodedStringToUnsignedChars(DFA188_minS);
	static final char[] DFA188_max = DFA.unpackEncodedStringToUnsignedChars(DFA188_maxS);
	static final short[] DFA188_accept = DFA.unpackEncodedString(DFA188_acceptS);
	static final short[] DFA188_special = DFA.unpackEncodedString(DFA188_specialS);
	static final short[][] DFA188_transition;

	static {
		int numStates = DFA188_transitionS.length;
		DFA188_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA188_transition[i] = DFA.unpackEncodedString(DFA188_transitionS[i]);
		}
	}

	protected class DFA188 extends DFA {

		public DFA188(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 188;
			this.eot = DFA188_eot;
			this.eof = DFA188_eof;
			this.min = DFA188_min;
			this.max = DFA188_max;
			this.accept = DFA188_accept;
			this.special = DFA188_special;
			this.transition = DFA188_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 422:52: ( functionDirective )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA188_2 = input.LA(1);
						 
						int index188_2 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_2);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA188_35 = input.LA(1);
						 
						int index188_35 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_35);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA188_36 = input.LA(1);
						 
						int index188_36 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_36);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA188_37 = input.LA(1);
						 
						int index188_37 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_37);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA188_38 = input.LA(1);
						 
						int index188_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_38);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA188_39 = input.LA(1);
						 
						int index188_39 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_39);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA188_40 = input.LA(1);
						 
						int index188_40 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_40);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA188_41 = input.LA(1);
						 
						int index188_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_41);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA188_42 = input.LA(1);
						 
						int index188_42 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_42);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA188_43 = input.LA(1);
						 
						int index188_43 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_43);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA188_44 = input.LA(1);
						 
						int index188_44 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_44);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA188_45 = input.LA(1);
						 
						int index188_45 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_45);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA188_46 = input.LA(1);
						 
						int index188_46 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_46);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA188_47 = input.LA(1);
						 
						int index188_47 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_47);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA188_48 = input.LA(1);
						 
						int index188_48 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_48);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA188_49 = input.LA(1);
						 
						int index188_49 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_49);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA188_50 = input.LA(1);
						 
						int index188_50 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_50);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA188_51 = input.LA(1);
						 
						int index188_51 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_51);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA188_52 = input.LA(1);
						 
						int index188_52 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred257_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_52);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 188, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA201_eotS =
		"\144\uffff";
	static final String DFA201_eofS =
		"\1\1\143\uffff";
	static final String DFA201_minS =
		"\1\4\40\uffff\23\0\60\uffff";
	static final String DFA201_maxS =
		"\1\u00c7\40\uffff\23\0\60\uffff";
	static final String DFA201_acceptS =
		"\1\uffff\1\2\141\uffff\1\1";
	static final String DFA201_specialS =
		"\41\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
		"\1\16\1\17\1\20\1\21\1\22\60\uffff}>";
	static final String[] DFA201_transitionS = {
			"\1\1\1\uffff\3\1\1\uffff\2\1\1\43\2\uffff\3\1\1\uffff\3\1\1\44\3\1\1"+
			"\uffff\5\1\1\uffff\1\1\1\55\2\1\1\uffff\5\1\5\uffff\5\1\1\56\1\51\1\1"+
			"\1\62\1\1\1\52\1\uffff\3\1\2\uffff\2\1\1\uffff\1\1\4\uffff\6\1\1\42\1"+
			"\uffff\3\1\2\uffff\1\1\1\60\1\53\6\1\1\54\12\1\1\41\3\uffff\1\45\1\57"+
			"\5\1\1\uffff\5\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\1\46\1\uffff\1\1"+
			"\2\uffff\3\1\1\47\1\uffff\1\1\1\uffff\5\1\1\50\7\1\1\uffff\1\1\15\uffff"+
			"\3\1\3\uffff\1\1\6\uffff\1\63\1\1\2\uffff\1\1\1\61\1\1\3\uffff\2\1\1"+
			"\uffff\3\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA201_eot = DFA.unpackEncodedString(DFA201_eotS);
	static final short[] DFA201_eof = DFA.unpackEncodedString(DFA201_eofS);
	static final char[] DFA201_min = DFA.unpackEncodedStringToUnsignedChars(DFA201_minS);
	static final char[] DFA201_max = DFA.unpackEncodedStringToUnsignedChars(DFA201_maxS);
	static final short[] DFA201_accept = DFA.unpackEncodedString(DFA201_acceptS);
	static final short[] DFA201_special = DFA.unpackEncodedString(DFA201_specialS);
	static final short[][] DFA201_transition;

	static {
		int numStates = DFA201_transitionS.length;
		DFA201_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA201_transition[i] = DFA.unpackEncodedString(DFA201_transitionS[i]);
		}
	}

	protected class DFA201 extends DFA {

		public DFA201(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 201;
			this.eot = DFA201_eot;
			this.eof = DFA201_eof;
			this.min = DFA201_min;
			this.max = DFA201_max;
			this.accept = DFA201_accept;
			this.special = DFA201_special;
			this.transition = DFA201_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 442:46: ( functionDirective )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA201_33 = input.LA(1);
						 
						int index201_33 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_33);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA201_34 = input.LA(1);
						 
						int index201_34 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_34);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA201_35 = input.LA(1);
						 
						int index201_35 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_35);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA201_36 = input.LA(1);
						 
						int index201_36 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_36);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA201_37 = input.LA(1);
						 
						int index201_37 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_37);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA201_38 = input.LA(1);
						 
						int index201_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_38);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA201_39 = input.LA(1);
						 
						int index201_39 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_39);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA201_40 = input.LA(1);
						 
						int index201_40 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_40);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA201_41 = input.LA(1);
						 
						int index201_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_41);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA201_42 = input.LA(1);
						 
						int index201_42 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_42);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA201_43 = input.LA(1);
						 
						int index201_43 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_43);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA201_44 = input.LA(1);
						 
						int index201_44 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_44);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA201_45 = input.LA(1);
						 
						int index201_45 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_45);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA201_46 = input.LA(1);
						 
						int index201_46 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_46);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA201_47 = input.LA(1);
						 
						int index201_47 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_47);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA201_48 = input.LA(1);
						 
						int index201_48 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_48);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA201_49 = input.LA(1);
						 
						int index201_49 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_49);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA201_50 = input.LA(1);
						 
						int index201_50 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_50);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA201_51 = input.LA(1);
						 
						int index201_51 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_51);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 201, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA212_eotS =
		"\144\uffff";
	static final String DFA212_eofS =
		"\1\2\143\uffff";
	static final String DFA212_minS =
		"\1\4\1\0\142\uffff";
	static final String DFA212_maxS =
		"\1\u00c7\1\0\142\uffff";
	static final String DFA212_acceptS =
		"\2\uffff\1\2\140\uffff\1\1";
	static final String DFA212_specialS =
		"\1\uffff\1\0\142\uffff}>";
	static final String[] DFA212_transitionS = {
			"\1\2\1\uffff\3\2\1\uffff\3\2\2\uffff\3\2\1\uffff\7\2\1\uffff\5\2\1\uffff"+
			"\4\2\1\uffff\5\2\5\uffff\13\2\1\uffff\3\2\2\uffff\2\2\1\uffff\1\2\4\uffff"+
			"\7\2\1\uffff\3\2\2\uffff\3\2\1\1\21\2\3\uffff\7\2\1\uffff\5\2\1\uffff"+
			"\1\2\2\uffff\2\2\1\uffff\2\2\1\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff"+
			"\15\2\1\uffff\1\2\15\uffff\3\2\3\uffff\1\2\6\uffff\2\2\2\uffff\3\2\3"+
			"\uffff\2\2\1\uffff\3\2",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA212_eot = DFA.unpackEncodedString(DFA212_eotS);
	static final short[] DFA212_eof = DFA.unpackEncodedString(DFA212_eofS);
	static final char[] DFA212_min = DFA.unpackEncodedStringToUnsignedChars(DFA212_minS);
	static final char[] DFA212_max = DFA.unpackEncodedStringToUnsignedChars(DFA212_maxS);
	static final short[] DFA212_accept = DFA.unpackEncodedString(DFA212_acceptS);
	static final short[] DFA212_special = DFA.unpackEncodedString(DFA212_specialS);
	static final short[][] DFA212_transition;

	static {
		int numStates = DFA212_transitionS.length;
		DFA212_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA212_transition[i] = DFA.unpackEncodedString(DFA212_transitionS[i]);
		}
	}

	protected class DFA212 extends DFA {

		public DFA212(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 212;
			this.eot = DFA212_eot;
			this.eof = DFA212_eof;
			this.min = DFA212_min;
			this.max = DFA212_max;
			this.accept = DFA212_accept;
			this.special = DFA212_special;
			this.transition = DFA212_transition;
		}
		@Override
		public String getDescription() {
			return "463:44: ( formalParameterSection )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA212_1 = input.LA(1);
						 
						int index212_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred285_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index212_1);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 212, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA219_eotS =
		"\161\uffff";
	static final String DFA219_eofS =
		"\1\20\160\uffff";
	static final String DFA219_minS =
		"\1\4\17\0\1\uffff\3\0\5\uffff\1\0\7\uffff\3\0\2\uffff\2\0\1\uffff\1\0"+
		"\5\uffff\1\0\2\uffff\1\0\1\uffff\1\0\7\uffff\1\0\16\uffff\1\0\16\uffff"+
		"\1\0\5\uffff\1\0\20\uffff";
	static final String DFA219_maxS =
		"\1\u00c7\17\0\1\uffff\3\0\5\uffff\1\0\7\uffff\3\0\2\uffff\2\0\1\uffff"+
		"\1\0\5\uffff\1\0\2\uffff\1\0\1\uffff\1\0\7\uffff\1\0\16\uffff\1\0\16\uffff"+
		"\1\0\5\uffff\1\0\20\uffff";
	static final String DFA219_acceptS =
		"\20\uffff\1\16\122\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1"+
		"\13\1\14\1\15\1\17";
	static final String DFA219_specialS =
		"\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
		"\1\16\1\uffff\1\17\1\20\1\21\5\uffff\1\22\7\uffff\1\23\1\24\1\25\2\uffff"+
		"\1\26\1\27\1\uffff\1\30\5\uffff\1\31\2\uffff\1\32\1\uffff\1\33\7\uffff"+
		"\1\34\16\uffff\1\35\16\uffff\1\36\5\uffff\1\37\20\uffff}>";
	static final String[] DFA219_transitionS = {
			"\1\20\1\uffff\1\140\1\20\1\140\1\uffff\3\20\2\uffff\1\140\1\1\1\20\1"+
			"\uffff\1\20\1\140\5\20\1\uffff\2\20\2\140\1\15\1\uffff\1\46\3\20\1\uffff"+
			"\5\20\5\uffff\4\20\1\140\1\20\1\57\2\20\1\12\1\20\1\uffff\1\140\2\20"+
			"\2\uffff\2\20\1\uffff\1\20\4\uffff\1\20\1\47\1\20\1\74\3\20\1\uffff\2"+
			"\20\1\17\2\uffff\2\20\1\62\1\14\1\20\1\140\1\5\1\20\1\23\1\20\1\13\1"+
			"\20\1\3\1\20\1\140\2\20\1\132\1\20\1\140\1\20\3\uffff\2\20\1\4\1\140"+
			"\1\6\2\20\1\uffff\4\20\1\16\1\uffff\1\20\2\uffff\1\31\1\42\1\uffff\1"+
			"\140\1\51\1\uffff\1\140\2\uffff\4\20\1\uffff\1\20\1\uffff\4\20\1\140"+
			"\1\20\1\43\1\113\1\140\3\20\1\11\1\uffff\1\20\15\uffff\1\10\1\21\1\10"+
			"\3\uffff\1\7\6\uffff\1\64\1\20\2\uffff\2\20\1\140\3\uffff\1\41\1\20\1"+
			"\uffff\1\20\1\22\1\2",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA219_eot = DFA.unpackEncodedString(DFA219_eotS);
	static final short[] DFA219_eof = DFA.unpackEncodedString(DFA219_eofS);
	static final char[] DFA219_min = DFA.unpackEncodedStringToUnsignedChars(DFA219_minS);
	static final char[] DFA219_max = DFA.unpackEncodedStringToUnsignedChars(DFA219_maxS);
	static final short[] DFA219_accept = DFA.unpackEncodedString(DFA219_acceptS);
	static final short[] DFA219_special = DFA.unpackEncodedString(DFA219_specialS);
	static final short[][] DFA219_transition;

	static {
		int numStates = DFA219_transitionS.length;
		DFA219_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA219_transition[i] = DFA.unpackEncodedString(DFA219_transitionS[i]);
		}
	}

	protected class DFA219 extends DFA {

		public DFA219(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 219;
			this.eot = DFA219_eot;
			this.eof = DFA219_eof;
			this.min = DFA219_min;
			this.max = DFA219_max;
			this.accept = DFA219_accept;
			this.special = DFA219_special;
			this.transition = DFA219_transition;
		}
		@Override
		public String getDescription() {
			return "468:1: factor : ( '@' factor | '@@' factor | 'not' factor | '+' factor | '-' factor | '^' ident | intRealNum | 'true' | 'false' | 'nil' | '(' expression ')' ( '^' )? ( '.' expression )? | stringFactor ( '.' simpleExpression )? | setSection | designator | typeId '(' expression ')' );";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA219_1 = input.LA(1);
						 
						int index219_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred289_Delphi()) ) {s = 99;}
						else if ( (synpred305_Delphi()) ) {s = 16;}
						 
						input.seek(index219_1);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA219_2 = input.LA(1);
						 
						int index219_2 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred290_Delphi()) ) {s = 100;}
						else if ( (synpred305_Delphi()) ) {s = 16;}
						 
						input.seek(index219_2);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA219_3 = input.LA(1);
						 
						int index219_3 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred291_Delphi()) ) {s = 101;}
						else if ( (synpred305_Delphi()) ) {s = 16;}
						 
						input.seek(index219_3);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA219_4 = input.LA(1);
						 
						int index219_4 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred292_Delphi()) ) {s = 102;}
						else if ( (synpred305_Delphi()) ) {s = 16;}
						 
						input.seek(index219_4);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA219_5 = input.LA(1);
						 
						int index219_5 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred293_Delphi()) ) {s = 103;}
						else if ( (synpred305_Delphi()) ) {s = 16;}
						 
						input.seek(index219_5);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA219_6 = input.LA(1);
						 
						int index219_6 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred294_Delphi()) ) {s = 104;}
						else if ( (synpred305_Delphi()) ) {s = 16;}
						 
						input.seek(index219_6);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA219_7 = input.LA(1);
						 
						int index219_7 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred295_Delphi()) ) {s = 105;}
						else if ( (synpred305_Delphi()) ) {s = 16;}
						 
						input.seek(index219_7);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA219_8 = input.LA(1);
						 
						int index219_8 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred295_Delphi()) ) {s = 105;}
						else if ( (synpred305_Delphi()) ) {s = 16;}
						 
						input.seek(index219_8);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA219_9 = input.LA(1);
						 
						int index219_9 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred296_Delphi()) ) {s = 106;}
						else if ( (synpred305_Delphi()) ) {s = 16;}
						 
						input.seek(index219_9);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA219_10 = input.LA(1);
						 
						int index219_10 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred297_Delphi()) ) {s = 107;}
						else if ( (synpred305_Delphi()) ) {s = 16;}
						 
						input.seek(index219_10);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA219_11 = input.LA(1);
						 
						int index219_11 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred298_Delphi()) ) {s = 108;}
						else if ( (synpred305_Delphi()) ) {s = 16;}
						 
						input.seek(index219_11);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA219_12 = input.LA(1);
						 
						int index219_12 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred301_Delphi()) ) {s = 109;}
						else if ( (synpred305_Delphi()) ) {s = 16;}
						 
						input.seek(index219_12);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA219_13 = input.LA(1);
						 
						int index219_13 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred303_Delphi()) ) {s = 110;}
						else if ( (synpred305_Delphi()) ) {s = 16;}
						 
						input.seek(index219_13);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA219_14 = input.LA(1);
						 
						int index219_14 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred303_Delphi()) ) {s = 110;}
						else if ( (synpred305_Delphi()) ) {s = 16;}
						 
						input.seek(index219_14);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA219_15 = input.LA(1);
						 
						int index219_15 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred304_Delphi()) ) {s = 111;}
						else if ( (synpred305_Delphi()) ) {s = 16;}
						 
						input.seek(index219_15);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA219_17 = input.LA(1);
						 
						int index219_17 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred305_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index219_17);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA219_18 = input.LA(1);
						 
						int index219_18 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred305_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index219_18);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA219_19 = input.LA(1);
						 
						int index219_19 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred305_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index219_19);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA219_25 = input.LA(1);
						 
						int index219_25 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred305_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index219_25);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA219_33 = input.LA(1);
						 
						int index219_33 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred305_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index219_33);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA219_34 = input.LA(1);
						 
						int index219_34 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred305_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index219_34);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA219_35 = input.LA(1);
						 
						int index219_35 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred305_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index219_35);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA219_38 = input.LA(1);
						 
						int index219_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred305_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index219_38);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA219_39 = input.LA(1);
						 
						int index219_39 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred305_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index219_39);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA219_41 = input.LA(1);
						 
						int index219_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred305_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index219_41);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA219_47 = input.LA(1);
						 
						int index219_47 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred305_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index219_47);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA219_50 = input.LA(1);
						 
						int index219_50 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred305_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index219_50);
						if ( s>=0 ) return s;
						break;

					case 27 : 
						int LA219_52 = input.LA(1);
						 
						int index219_52 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred305_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index219_52);
						if ( s>=0 ) return s;
						break;

					case 28 : 
						int LA219_60 = input.LA(1);
						 
						int index219_60 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred305_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index219_60);
						if ( s>=0 ) return s;
						break;

					case 29 : 
						int LA219_75 = input.LA(1);
						 
						int index219_75 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred305_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index219_75);
						if ( s>=0 ) return s;
						break;

					case 30 : 
						int LA219_90 = input.LA(1);
						 
						int index219_90 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred305_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index219_90);
						if ( s>=0 ) return s;
						break;

					case 31 : 
						int LA219_96 = input.LA(1);
						 
						int index219_96 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred305_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 112;}
						 
						input.seek(index219_96);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 219, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA230_eotS =
		"\150\uffff";
	static final String DFA230_eofS =
		"\1\1\147\uffff";
	static final String DFA230_minS =
		"\1\4\2\uffff\1\0\55\uffff\1\0\4\uffff\1\0\6\uffff\1\0\4\uffff\1\0\5\uffff"+
		"\1\0\37\uffff";
	static final String DFA230_maxS =
		"\1\u00c7\2\uffff\1\0\55\uffff\1\0\4\uffff\1\0\6\uffff\1\0\4\uffff\1\0"+
		"\5\uffff\1\0\37\uffff";
	static final String DFA230_acceptS =
		"\1\uffff\1\2\145\uffff\1\1";
	static final String DFA230_specialS =
		"\3\uffff\1\0\55\uffff\1\1\4\uffff\1\2\6\uffff\1\3\4\uffff\1\4\5\uffff"+
		"\1\5\37\uffff}>";
	static final String[] DFA230_transitionS = {
			"\1\1\1\uffff\3\1\1\uffff\3\1\1\uffff\2\1\1\75\1\1\1\uffff\7\1\1\uffff"+
			"\5\1\1\uffff\4\1\1\uffff\2\1\1\66\2\1\5\uffff\13\1\1\uffff\3\1\2\uffff"+
			"\2\1\1\uffff\1\1\4\uffff\7\1\1\uffff\2\1\1\61\2\uffff\3\1\1\110\1\3\20"+
			"\1\3\uffff\4\1\1\102\2\1\1\uffff\5\1\1\uffff\1\1\2\uffff\2\1\1\uffff"+
			"\2\1\1\uffff\1\1\2\uffff\4\1\1\uffff\1\1\1\uffff\15\1\1\uffff\1\1\15"+
			"\uffff\3\1\3\uffff\1\1\6\uffff\2\1\2\uffff\3\1\3\uffff\2\1\1\uffff\3"+
			"\1",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA230_eot = DFA.unpackEncodedString(DFA230_eotS);
	static final short[] DFA230_eof = DFA.unpackEncodedString(DFA230_eofS);
	static final char[] DFA230_min = DFA.unpackEncodedStringToUnsignedChars(DFA230_minS);
	static final char[] DFA230_max = DFA.unpackEncodedStringToUnsignedChars(DFA230_maxS);
	static final short[] DFA230_accept = DFA.unpackEncodedString(DFA230_acceptS);
	static final short[] DFA230_special = DFA.unpackEncodedString(DFA230_specialS);
	static final short[][] DFA230_transition;

	static {
		int numStates = DFA230_transitionS.length;
		DFA230_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA230_transition[i] = DFA.unpackEncodedString(DFA230_transitionS[i]);
		}
	}

	protected class DFA230 extends DFA {

		public DFA230(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 230;
			this.eot = DFA230_eot;
			this.eof = DFA230_eof;
			this.min = DFA230_min;
			this.max = DFA230_max;
			this.accept = DFA230_accept;
			this.special = DFA230_special;
			this.transition = DFA230_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 490:88: ( designatorItem )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA230_3 = input.LA(1);
						 
						int index230_3 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred317_Delphi()) ) {s = 103;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index230_3);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA230_49 = input.LA(1);
						 
						int index230_49 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred317_Delphi()) ) {s = 103;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index230_49);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA230_54 = input.LA(1);
						 
						int index230_54 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred317_Delphi()) ) {s = 103;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index230_54);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA230_61 = input.LA(1);
						 
						int index230_61 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred317_Delphi()) ) {s = 103;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index230_61);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA230_66 = input.LA(1);
						 
						int index230_66 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred317_Delphi()) ) {s = 103;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index230_66);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA230_72 = input.LA(1);
						 
						int index230_72 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred317_Delphi()) ) {s = 103;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index230_72);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 230, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA261_eotS =
		"\145\uffff";
	static final String DFA261_eofS =
		"\1\2\144\uffff";
	static final String DFA261_minS =
		"\1\4\1\0\143\uffff";
	static final String DFA261_maxS =
		"\1\u00c7\1\0\143\uffff";
	static final String DFA261_acceptS =
		"\2\uffff\1\3\140\uffff\1\1\1\2";
	static final String DFA261_specialS =
		"\1\uffff\1\0\143\uffff}>";
	static final String[] DFA261_transitionS = {
			"\1\2\1\uffff\3\2\1\uffff\3\2\2\uffff\3\2\1\uffff\7\2\1\uffff\5\2\1\uffff"+
			"\4\2\1\uffff\5\2\5\uffff\13\2\1\uffff\3\2\2\uffff\2\2\1\uffff\1\2\4\uffff"+
			"\7\2\1\uffff\3\2\2\uffff\3\2\1\1\21\2\3\uffff\7\2\1\uffff\5\2\1\uffff"+
			"\1\2\2\uffff\2\2\1\uffff\2\2\1\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff"+
			"\15\2\1\uffff\1\2\15\uffff\3\2\3\uffff\1\2\6\uffff\2\2\2\uffff\3\2\3"+
			"\uffff\2\2\1\uffff\3\2",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA261_eot = DFA.unpackEncodedString(DFA261_eotS);
	static final short[] DFA261_eof = DFA.unpackEncodedString(DFA261_eofS);
	static final char[] DFA261_min = DFA.unpackEncodedStringToUnsignedChars(DFA261_minS);
	static final char[] DFA261_max = DFA.unpackEncodedStringToUnsignedChars(DFA261_maxS);
	static final short[] DFA261_accept = DFA.unpackEncodedString(DFA261_acceptS);
	static final short[] DFA261_special = DFA.unpackEncodedString(DFA261_specialS);
	static final short[][] DFA261_transition;

	static {
		int numStates = DFA261_transitionS.length;
		DFA261_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA261_transition[i] = DFA.unpackEncodedString(DFA261_transitionS[i]);
		}
	}

	protected class DFA261 extends DFA {

		public DFA261(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 261;
			this.eot = DFA261_eot;
			this.eof = DFA261_eof;
			this.min = DFA261_min;
			this.max = DFA261_max;
			this.accept = DFA261_accept;
			this.special = DFA261_special;
			this.transition = DFA261_transition;
		}
		@Override
		public String getDescription() {
			return "580:1: constExpression : ( '(' recordConstExpression ( ';' recordConstExpression )* ')' | '(' constExpression ( ',' constExpression )* ')' ( constExpression )? | expression );";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA261_1 = input.LA(1);
						 
						int index261_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred382_Delphi()) ) {s = 99;}
						else if ( (synpred385_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index261_1);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 261, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA260_eotS =
		"\145\uffff";
	static final String DFA260_eofS =
		"\1\40\144\uffff";
	static final String DFA260_minS =
		"\1\4\142\0\2\uffff";
	static final String DFA260_maxS =
		"\1\u00c7\142\0\2\uffff";
	static final String DFA260_acceptS =
		"\143\uffff\1\1\1\2";
	static final String DFA260_specialS =
		"\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
		"\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
		"\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
		"\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
		"\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
		"\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117\1\120"+
		"\1\121\1\122\1\123\1\124\1\125\1\126\1\127\1\130\1\131\1\132\1\133\1\134"+
		"\1\135\1\136\1\137\1\140\1\141\2\uffff}>";
	static final String[] DFA260_transitionS = {
			"\1\42\1\uffff\1\127\1\30\1\127\1\uffff\1\30\1\74\1\112\2\uffff\1\127"+
			"\1\4\1\55\1\uffff\1\73\1\127\1\66\1\45\1\56\1\130\1\46\1\uffff\1\62\1"+
			"\57\2\127\1\17\1\uffff\1\104\1\33\1\57\1\103\1\uffff\1\30\1\140\1\26"+
			"\1\41\1\142\5\uffff\1\132\1\65\1\31\1\135\1\127\1\34\1\115\1\72\1\123"+
			"\1\15\1\117\1\uffff\1\127\1\133\1\136\2\uffff\1\3\1\47\1\uffff\1\32\4"+
			"\uffff\1\126\1\105\1\47\1\124\1\22\1\125\1\111\1\uffff\1\47\1\71\1\21"+
			"\2\uffff\1\47\1\36\1\107\1\1\1\27\1\127\1\10\1\30\1\60\1\121\1\16\1\106"+
			"\1\6\1\47\1\127\1\43\1\137\1\50\1\30\1\127\1\110\3\uffff\1\113\1\35\1"+
			"\7\1\127\1\11\1\52\1\2\1\uffff\1\61\1\51\1\53\1\54\1\20\1\uffff\1\70"+
			"\2\uffff\1\75\1\100\1\uffff\1\127\1\25\1\uffff\1\127\2\uffff\1\76\1\62"+
			"\1\67\1\114\1\uffff\1\37\1\uffff\4\30\1\127\1\116\1\101\1\44\1\127\1"+
			"\131\1\64\1\141\1\14\1\uffff\1\63\15\uffff\1\13\1\23\1\13\3\uffff\1\12"+
			"\6\uffff\1\120\1\134\2\uffff\1\64\1\122\1\127\3\uffff\1\77\1\102\1\uffff"+
			"\1\30\1\24\1\5",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			""
	};

	static final short[] DFA260_eot = DFA.unpackEncodedString(DFA260_eotS);
	static final short[] DFA260_eof = DFA.unpackEncodedString(DFA260_eofS);
	static final char[] DFA260_min = DFA.unpackEncodedStringToUnsignedChars(DFA260_minS);
	static final char[] DFA260_max = DFA.unpackEncodedStringToUnsignedChars(DFA260_maxS);
	static final short[] DFA260_accept = DFA.unpackEncodedString(DFA260_acceptS);
	static final short[] DFA260_special = DFA.unpackEncodedString(DFA260_specialS);
	static final short[][] DFA260_transition;

	static {
		int numStates = DFA260_transitionS.length;
		DFA260_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA260_transition[i] = DFA.unpackEncodedString(DFA260_transitionS[i]);
		}
	}

	protected class DFA260 extends DFA {

		public DFA260(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 260;
			this.eot = DFA260_eot;
			this.eof = DFA260_eof;
			this.min = DFA260_min;
			this.max = DFA260_max;
			this.accept = DFA260_accept;
			this.special = DFA260_special;
			this.transition = DFA260_transition;
		}
		@Override
		public String getDescription() {
			return "581:79: ( constExpression )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA260_1 = input.LA(1);
						 
						int index260_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_1);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA260_2 = input.LA(1);
						 
						int index260_2 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_2);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA260_3 = input.LA(1);
						 
						int index260_3 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_3);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA260_4 = input.LA(1);
						 
						int index260_4 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_4);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA260_5 = input.LA(1);
						 
						int index260_5 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_5);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA260_6 = input.LA(1);
						 
						int index260_6 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_6);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA260_7 = input.LA(1);
						 
						int index260_7 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_7);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA260_8 = input.LA(1);
						 
						int index260_8 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_8);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA260_9 = input.LA(1);
						 
						int index260_9 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_9);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA260_10 = input.LA(1);
						 
						int index260_10 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_10);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA260_11 = input.LA(1);
						 
						int index260_11 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_11);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA260_12 = input.LA(1);
						 
						int index260_12 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_12);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA260_13 = input.LA(1);
						 
						int index260_13 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_13);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA260_14 = input.LA(1);
						 
						int index260_14 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_14);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA260_15 = input.LA(1);
						 
						int index260_15 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_15);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA260_16 = input.LA(1);
						 
						int index260_16 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_16);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA260_17 = input.LA(1);
						 
						int index260_17 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_17);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA260_18 = input.LA(1);
						 
						int index260_18 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_18);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA260_19 = input.LA(1);
						 
						int index260_19 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_19);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA260_20 = input.LA(1);
						 
						int index260_20 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_20);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA260_21 = input.LA(1);
						 
						int index260_21 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_21);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA260_22 = input.LA(1);
						 
						int index260_22 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_22);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA260_23 = input.LA(1);
						 
						int index260_23 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_23);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA260_24 = input.LA(1);
						 
						int index260_24 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_24);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA260_25 = input.LA(1);
						 
						int index260_25 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_25);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA260_26 = input.LA(1);
						 
						int index260_26 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_26);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA260_27 = input.LA(1);
						 
						int index260_27 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_27);
						if ( s>=0 ) return s;
						break;

					case 27 : 
						int LA260_28 = input.LA(1);
						 
						int index260_28 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_28);
						if ( s>=0 ) return s;
						break;

					case 28 : 
						int LA260_29 = input.LA(1);
						 
						int index260_29 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_29);
						if ( s>=0 ) return s;
						break;

					case 29 : 
						int LA260_30 = input.LA(1);
						 
						int index260_30 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_30);
						if ( s>=0 ) return s;
						break;

					case 30 : 
						int LA260_31 = input.LA(1);
						 
						int index260_31 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_31);
						if ( s>=0 ) return s;
						break;

					case 31 : 
						int LA260_32 = input.LA(1);
						 
						int index260_32 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_32);
						if ( s>=0 ) return s;
						break;

					case 32 : 
						int LA260_33 = input.LA(1);
						 
						int index260_33 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_33);
						if ( s>=0 ) return s;
						break;

					case 33 : 
						int LA260_34 = input.LA(1);
						 
						int index260_34 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_34);
						if ( s>=0 ) return s;
						break;

					case 34 : 
						int LA260_35 = input.LA(1);
						 
						int index260_35 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_35);
						if ( s>=0 ) return s;
						break;

					case 35 : 
						int LA260_36 = input.LA(1);
						 
						int index260_36 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_36);
						if ( s>=0 ) return s;
						break;

					case 36 : 
						int LA260_37 = input.LA(1);
						 
						int index260_37 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_37);
						if ( s>=0 ) return s;
						break;

					case 37 : 
						int LA260_38 = input.LA(1);
						 
						int index260_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_38);
						if ( s>=0 ) return s;
						break;

					case 38 : 
						int LA260_39 = input.LA(1);
						 
						int index260_39 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_39);
						if ( s>=0 ) return s;
						break;

					case 39 : 
						int LA260_40 = input.LA(1);
						 
						int index260_40 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_40);
						if ( s>=0 ) return s;
						break;

					case 40 : 
						int LA260_41 = input.LA(1);
						 
						int index260_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_41);
						if ( s>=0 ) return s;
						break;

					case 41 : 
						int LA260_42 = input.LA(1);
						 
						int index260_42 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_42);
						if ( s>=0 ) return s;
						break;

					case 42 : 
						int LA260_43 = input.LA(1);
						 
						int index260_43 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_43);
						if ( s>=0 ) return s;
						break;

					case 43 : 
						int LA260_44 = input.LA(1);
						 
						int index260_44 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_44);
						if ( s>=0 ) return s;
						break;

					case 44 : 
						int LA260_45 = input.LA(1);
						 
						int index260_45 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_45);
						if ( s>=0 ) return s;
						break;

					case 45 : 
						int LA260_46 = input.LA(1);
						 
						int index260_46 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_46);
						if ( s>=0 ) return s;
						break;

					case 46 : 
						int LA260_47 = input.LA(1);
						 
						int index260_47 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_47);
						if ( s>=0 ) return s;
						break;

					case 47 : 
						int LA260_48 = input.LA(1);
						 
						int index260_48 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_48);
						if ( s>=0 ) return s;
						break;

					case 48 : 
						int LA260_49 = input.LA(1);
						 
						int index260_49 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_49);
						if ( s>=0 ) return s;
						break;

					case 49 : 
						int LA260_50 = input.LA(1);
						 
						int index260_50 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_50);
						if ( s>=0 ) return s;
						break;

					case 50 : 
						int LA260_51 = input.LA(1);
						 
						int index260_51 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_51);
						if ( s>=0 ) return s;
						break;

					case 51 : 
						int LA260_52 = input.LA(1);
						 
						int index260_52 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_52);
						if ( s>=0 ) return s;
						break;

					case 52 : 
						int LA260_53 = input.LA(1);
						 
						int index260_53 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_53);
						if ( s>=0 ) return s;
						break;

					case 53 : 
						int LA260_54 = input.LA(1);
						 
						int index260_54 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_54);
						if ( s>=0 ) return s;
						break;

					case 54 : 
						int LA260_55 = input.LA(1);
						 
						int index260_55 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_55);
						if ( s>=0 ) return s;
						break;

					case 55 : 
						int LA260_56 = input.LA(1);
						 
						int index260_56 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_56);
						if ( s>=0 ) return s;
						break;

					case 56 : 
						int LA260_57 = input.LA(1);
						 
						int index260_57 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_57);
						if ( s>=0 ) return s;
						break;

					case 57 : 
						int LA260_58 = input.LA(1);
						 
						int index260_58 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_58);
						if ( s>=0 ) return s;
						break;

					case 58 : 
						int LA260_59 = input.LA(1);
						 
						int index260_59 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_59);
						if ( s>=0 ) return s;
						break;

					case 59 : 
						int LA260_60 = input.LA(1);
						 
						int index260_60 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_60);
						if ( s>=0 ) return s;
						break;

					case 60 : 
						int LA260_61 = input.LA(1);
						 
						int index260_61 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_61);
						if ( s>=0 ) return s;
						break;

					case 61 : 
						int LA260_62 = input.LA(1);
						 
						int index260_62 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_62);
						if ( s>=0 ) return s;
						break;

					case 62 : 
						int LA260_63 = input.LA(1);
						 
						int index260_63 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_63);
						if ( s>=0 ) return s;
						break;

					case 63 : 
						int LA260_64 = input.LA(1);
						 
						int index260_64 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_64);
						if ( s>=0 ) return s;
						break;

					case 64 : 
						int LA260_65 = input.LA(1);
						 
						int index260_65 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_65);
						if ( s>=0 ) return s;
						break;

					case 65 : 
						int LA260_66 = input.LA(1);
						 
						int index260_66 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_66);
						if ( s>=0 ) return s;
						break;

					case 66 : 
						int LA260_67 = input.LA(1);
						 
						int index260_67 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_67);
						if ( s>=0 ) return s;
						break;

					case 67 : 
						int LA260_68 = input.LA(1);
						 
						int index260_68 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_68);
						if ( s>=0 ) return s;
						break;

					case 68 : 
						int LA260_69 = input.LA(1);
						 
						int index260_69 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_69);
						if ( s>=0 ) return s;
						break;

					case 69 : 
						int LA260_70 = input.LA(1);
						 
						int index260_70 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_70);
						if ( s>=0 ) return s;
						break;

					case 70 : 
						int LA260_71 = input.LA(1);
						 
						int index260_71 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_71);
						if ( s>=0 ) return s;
						break;

					case 71 : 
						int LA260_72 = input.LA(1);
						 
						int index260_72 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_72);
						if ( s>=0 ) return s;
						break;

					case 72 : 
						int LA260_73 = input.LA(1);
						 
						int index260_73 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_73);
						if ( s>=0 ) return s;
						break;

					case 73 : 
						int LA260_74 = input.LA(1);
						 
						int index260_74 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_74);
						if ( s>=0 ) return s;
						break;

					case 74 : 
						int LA260_75 = input.LA(1);
						 
						int index260_75 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_75);
						if ( s>=0 ) return s;
						break;

					case 75 : 
						int LA260_76 = input.LA(1);
						 
						int index260_76 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_76);
						if ( s>=0 ) return s;
						break;

					case 76 : 
						int LA260_77 = input.LA(1);
						 
						int index260_77 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_77);
						if ( s>=0 ) return s;
						break;

					case 77 : 
						int LA260_78 = input.LA(1);
						 
						int index260_78 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_78);
						if ( s>=0 ) return s;
						break;

					case 78 : 
						int LA260_79 = input.LA(1);
						 
						int index260_79 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_79);
						if ( s>=0 ) return s;
						break;

					case 79 : 
						int LA260_80 = input.LA(1);
						 
						int index260_80 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_80);
						if ( s>=0 ) return s;
						break;

					case 80 : 
						int LA260_81 = input.LA(1);
						 
						int index260_81 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_81);
						if ( s>=0 ) return s;
						break;

					case 81 : 
						int LA260_82 = input.LA(1);
						 
						int index260_82 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_82);
						if ( s>=0 ) return s;
						break;

					case 82 : 
						int LA260_83 = input.LA(1);
						 
						int index260_83 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_83);
						if ( s>=0 ) return s;
						break;

					case 83 : 
						int LA260_84 = input.LA(1);
						 
						int index260_84 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_84);
						if ( s>=0 ) return s;
						break;

					case 84 : 
						int LA260_85 = input.LA(1);
						 
						int index260_85 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_85);
						if ( s>=0 ) return s;
						break;

					case 85 : 
						int LA260_86 = input.LA(1);
						 
						int index260_86 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_86);
						if ( s>=0 ) return s;
						break;

					case 86 : 
						int LA260_87 = input.LA(1);
						 
						int index260_87 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_87);
						if ( s>=0 ) return s;
						break;

					case 87 : 
						int LA260_88 = input.LA(1);
						 
						int index260_88 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_88);
						if ( s>=0 ) return s;
						break;

					case 88 : 
						int LA260_89 = input.LA(1);
						 
						int index260_89 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_89);
						if ( s>=0 ) return s;
						break;

					case 89 : 
						int LA260_90 = input.LA(1);
						 
						int index260_90 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_90);
						if ( s>=0 ) return s;
						break;

					case 90 : 
						int LA260_91 = input.LA(1);
						 
						int index260_91 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_91);
						if ( s>=0 ) return s;
						break;

					case 91 : 
						int LA260_92 = input.LA(1);
						 
						int index260_92 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_92);
						if ( s>=0 ) return s;
						break;

					case 92 : 
						int LA260_93 = input.LA(1);
						 
						int index260_93 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_93);
						if ( s>=0 ) return s;
						break;

					case 93 : 
						int LA260_94 = input.LA(1);
						 
						int index260_94 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_94);
						if ( s>=0 ) return s;
						break;

					case 94 : 
						int LA260_95 = input.LA(1);
						 
						int index260_95 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_95);
						if ( s>=0 ) return s;
						break;

					case 95 : 
						int LA260_96 = input.LA(1);
						 
						int index260_96 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_96);
						if ( s>=0 ) return s;
						break;

					case 96 : 
						int LA260_97 = input.LA(1);
						 
						int index260_97 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_97);
						if ( s>=0 ) return s;
						break;

					case 97 : 
						int LA260_98 = input.LA(1);
						 
						int index260_98 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred384_Delphi()) ) {s = 99;}
						else if ( (true) ) {s = 100;}
						 
						input.seek(index260_98);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 260, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA295_eotS =
		"\u0160\uffff";
	static final String DFA295_eofS =
		"\1\1\1\uffff\1\1\1\15\1\uffff\1\15\2\uffff\4\1\2\uffff\2\1\2\15\6\uffff"+
		"\3\1\1\uffff\4\1\3\uffff\7\1\1\uffff\1\1\1\115\10\uffff\1\1\1\uffff\1"+
		"\1\1\uffff\2\1\5\uffff\1\1\7\uffff\2\1\1\uffff\1\1\5\uffff\1\1\1\uffff"+
		"\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\10\1\2\uffff\1\1\1\uffff"+
		"\10\1\4\uffff\1\1\1\uffff\1\1\2\uffff\5\1\2\uffff\2\1\12\uffff\1\1\1\uffff"+
		"\16\1\1\uffff\3\1\1\uffff\10\1\1\uffff\7\1\3\uffff\5\1\1\uffff\4\1\1\uffff"+
		"\3\1\1\uffff\11\1\1\uffff\11\1\1\uffff\10\1\1\uffff\7\1\1\uffff\4\1\1"+
		"\uffff\4\1\1\uffff\11\1\1\uffff\4\1\1\uffff\10\1\1\uffff\7\1\1\uffff\1"+
		"\1\6\uffff\2\1\1\uffff\1\1\1\uffff\2\1\1\uffff\3\1\2\uffff\2\1\1\uffff"+
		"\10\1\1\uffff\10\1\1\uffff\2\1\1\uffff\2\1\7\uffff\2\1\1\uffff\7\1\2\uffff"+
		"\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff";
	static final String DFA295_minS =
		"\1\31\1\uffff\1\6\3\4\1\0\5\6\1\0\1\uffff\1\6\3\4\2\0\1\uffff\1\7\1\4"+
		"\1\7\1\4\2\6\1\0\4\6\3\0\1\6\6\7\1\4\1\7\1\4\4\0\1\6\2\7\1\0\1\6\1\0\1"+
		"\6\1\0\2\6\4\0\2\6\7\0\2\7\1\0\1\6\1\0\1\uffff\1\7\1\4\1\7\1\6\1\0\1\6"+
		"\1\0\1\6\1\0\1\6\1\0\1\7\1\4\1\6\7\7\2\0\1\7\1\4\1\6\6\7\1\4\2\7\2\0\1"+
		"\6\1\0\1\6\1\0\3\6\2\7\2\6\1\0\2\7\12\0\1\7\1\4\1\6\6\7\1\6\6\7\1\4\3"+
		"\7\1\4\1\6\7\7\1\4\1\6\6\7\2\0\2\6\4\7\2\6\2\7\2\6\3\7\1\4\1\6\10\7\1"+
		"\4\1\6\10\7\1\4\1\6\7\7\1\4\1\6\6\7\2\6\2\7\2\6\4\7\1\6\2\7\1\6\6\7\1"+
		"\4\4\7\1\4\1\6\7\7\1\4\1\6\6\7\1\0\1\6\6\0\2\7\1\0\2\6\2\7\1\6\3\7\2\0"+
		"\2\7\1\4\1\6\7\7\1\4\1\6\6\7\2\6\2\7\1\0\2\7\7\0\2\7\1\4\1\6\6\7\2\0\1"+
		"\6\1\0\2\7\7\0\1\7\2\0";
	static final String DFA295_maxS =
		"\1\u008d\1\uffff\1\u00c6\1\u00c7\1\u00c5\1\u00c7\1\0\1\u00c7\4\u00c6\1"+
		"\0\1\uffff\4\u00c7\2\0\1\uffff\3\u00c5\1\u00c7\2\u00c6\1\0\4\u00c6\3\0"+
		"\1\u00c6\10\u00c5\1\u00c7\4\0\1\u00c7\2\u00c5\1\0\1\u00c6\1\0\1\u00c6"+
		"\1\0\2\u00c6\4\0\2\u00c7\7\0\2\u00c5\1\0\1\u00c7\1\0\1\uffff\3\u00c5\1"+
		"\u00c6\1\0\1\u00c6\1\0\1\u00c6\1\0\1\u00c6\1\0\2\u00c5\1\u00c6\7\u00c5"+
		"\2\0\2\u00c5\1\u00c6\6\u00c5\1\u00c7\2\u00c5\2\0\1\u00c6\1\0\1\u00c6\1"+
		"\0\3\u00c7\2\u00c5\2\u00c7\1\0\2\u00c5\12\0\2\u00c5\1\u00c6\6\u00c5\1"+
		"\u00c6\13\u00c5\1\u00c6\10\u00c5\1\u00c6\6\u00c5\2\0\2\u00c7\4\u00c5\2"+
		"\u00c7\2\u00c5\2\u00c7\4\u00c5\1\u00c6\11\u00c5\1\u00c6\11\u00c5\1\u00c6"+
		"\10\u00c5\1\u00c6\6\u00c5\2\u00c7\2\u00c5\2\u00c7\4\u00c5\1\u00c7\2\u00c5"+
		"\1\u00c6\14\u00c5\1\u00c6\10\u00c5\1\u00c6\6\u00c5\1\0\1\u00c7\6\0\2\u00c5"+
		"\1\0\2\u00c7\2\u00c5\1\u00c7\3\u00c5\2\0\3\u00c5\1\u00c6\10\u00c5\1\u00c6"+
		"\6\u00c5\2\u00c7\2\u00c5\1\0\2\u00c5\7\0\3\u00c5\1\u00c6\6\u00c5\2\0\1"+
		"\u00c7\1\0\2\u00c5\7\0\1\u00c5\2\0";
	static final String DFA295_acceptS =
		"\1\uffff\1\2\13\uffff\1\1\6\uffff\1\1\70\uffff\1\1\u0112\uffff";
	static final String DFA295_specialS =
		"\6\uffff\1\12\5\uffff\1\30\5\uffff\1\13\1\31\7\uffff\1\21\4\uffff\1\20"+
		"\1\17\1\23\12\uffff\1\14\1\32\1\15\1\33\3\uffff\1\61\1\uffff\1\16\1\uffff"+
		"\1\27\2\uffff\1\37\1\36\1\41\1\35\2\uffff\1\110\1\107\1\111\1\112\1\114"+
		"\1\116\1\120\2\uffff\1\117\1\uffff\1\34\5\uffff\1\24\1\uffff\1\26\1\uffff"+
		"\1\42\1\uffff\1\43\12\uffff\1\115\1\113\14\uffff\1\22\1\25\1\uffff\1\45"+
		"\1\uffff\1\46\7\uffff\1\76\2\uffff\1\75\1\77\1\100\1\101\1\102\1\103\1"+
		"\105\1\62\1\40\1\44\45\uffff\1\106\1\104\136\uffff\1\1\1\uffff\1\2\1\0"+
		"\1\4\1\6\1\7\1\10\2\uffff\1\11\10\uffff\1\5\1\3\27\uffff\1\50\2\uffff"+
		"\1\51\1\52\1\53\1\47\1\54\1\57\1\60\12\uffff\1\55\1\56\1\uffff\1\64\2"+
		"\uffff\1\63\1\65\1\66\1\67\1\70\1\71\1\72\1\uffff\1\73\1\74}>";
	static final String[] DFA295_transitionS = {
			"\1\1\10\uffff\1\1\5\uffff\1\2\14\uffff\1\1\25\uffff\1\1\13\uffff\1\1"+
			"\1\uffff\1\1\25\uffff\1\1\35\uffff\1\1",
			"",
			"\1\5\1\uffff\1\5\6\uffff\1\5\4\uffff\1\5\10\uffff\2\5\2\uffff\1\5\22"+
			"\uffff\1\5\1\uffff\1\5\5\uffff\1\5\15\uffff\1\5\1\uffff\1\5\13\uffff"+
			"\1\5\2\uffff\1\5\2\uffff\1\5\5\uffff\1\5\2\uffff\1\5\1\uffff\1\5\7\uffff"+
			"\1\5\15\uffff\2\5\1\uffff\2\5\1\uffff\1\5\15\uffff\1\5\1\uffff\3\5\24"+
			"\uffff\1\3\13\uffff\1\5\5\uffff\1\5\3\uffff\1\5\3\uffff\1\4",
			"\1\1\1\uffff\3\1\1\uffff\3\1\1\uffff\4\1\1\uffff\6\1\1\16\1\uffff\5"+
			"\1\1\uffff\1\1\1\10\2\1\1\uffff\2\1\1\6\2\1\5\uffff\5\1\1\11\5\1\1\uffff"+
			"\3\1\2\uffff\2\1\1\uffff\1\1\4\uffff\2\1\1\17\4\1\1\uffff\3\1\2\uffff"+
			"\1\1\1\13\1\1\1\7\21\1\3\uffff\1\1\1\12\5\1\1\uffff\5\1\1\uffff\1\1\2"+
			"\uffff\2\1\1\uffff\2\1\1\uffff\1\1\2\uffff\4\1\1\uffff\1\14\1\uffff\15"+
			"\1\1\uffff\1\1\15\uffff\3\1\3\uffff\1\1\6\uffff\2\1\2\uffff\3\1\3\uffff"+
			"\2\1\1\uffff\3\1",
			"\12\21\1\uffff\1\21\1\uffff\1\21\1\uffff\5\21\3\uffff\4\21\2\uffff\7"+
			"\21\2\uffff\4\21\2\uffff\2\21\1\uffff\17\21\1\uffff\1\21\1\uffff\1\21"+
			"\2\uffff\13\21\4\uffff\2\21\2\uffff\1\21\1\uffff\6\21\1\uffff\14\21\1"+
			"\uffff\1\21\1\uffff\7\21\1\uffff\1\21\3\uffff\13\21\1\uffff\2\21\1\uffff"+
			"\3\21\2\uffff\13\21\16\uffff\1\20\12\uffff\4\21\1\uffff\10\21\1\uffff"+
			"\1\21",
			"\1\1\1\uffff\3\1\1\uffff\3\1\1\uffff\4\1\1\uffff\6\1\1\16\1\uffff\5"+
			"\1\1\uffff\1\1\1\10\2\1\1\uffff\2\1\1\22\2\1\5\uffff\5\1\1\11\5\1\1\uffff"+
			"\3\1\2\uffff\2\1\1\uffff\1\1\4\uffff\2\1\1\17\4\1\1\uffff\3\1\2\uffff"+
			"\1\1\1\13\1\1\1\7\21\1\3\uffff\1\1\1\12\5\1\1\uffff\5\1\1\uffff\1\1\2"+
			"\uffff\2\1\1\uffff\2\1\1\uffff\1\1\2\uffff\4\1\1\uffff\1\23\1\uffff\15"+
			"\1\1\uffff\1\1\15\uffff\3\1\3\uffff\1\1\6\uffff\2\1\2\uffff\3\1\3\uffff"+
			"\2\1\1\uffff\3\1",
			"\1\uffff",
			"\1\27\1\1\1\27\1\uffff\1\1\4\uffff\1\27\1\1\3\uffff\1\27\3\uffff\2\1"+
			"\3\uffff\2\27\1\1\1\uffff\1\27\4\uffff\1\1\1\uffff\1\1\11\uffff\1\1\1"+
			"\uffff\1\27\1\uffff\1\27\2\uffff\1\1\2\uffff\1\27\4\uffff\2\1\1\uffff"+
			"\1\1\5\uffff\1\27\1\1\1\27\1\1\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1"+
			"\uffff\1\27\2\1\1\27\2\1\1\27\1\uffff\1\1\1\uffff\2\1\1\27\2\uffff\1"+
			"\27\1\1\1\27\6\uffff\1\1\1\27\1\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\27"+
			"\1\uffff\2\27\1\uffff\1\27\4\uffff\1\30\4\uffff\4\1\1\27\1\uffff\3\27"+
			"\3\uffff\1\1\17\uffff\1\1\1\25\1\1\3\uffff\1\1\6\uffff\1\27\5\uffff\1"+
			"\27\3\uffff\1\27\2\uffff\1\1\1\26\1\1",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\1\31\1\uffff\1\1\1\34\1\1\15\uffff\1\1\2\uffff\1\1\1\35\1\1\5\uffff"+
			"\1\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\37\1"+
			"\1\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\36\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\1\32\4\uffff\2\1\1\uffff\2"+
			"\1\1\uffff\1\1\3\uffff\2\1\2\uffff\1\33\5\uffff\1\1\1\uffff\3\1\1\uffff"+
			"\1\1\3\uffff\1\1\16\uffff\1\1\13\uffff\1\1\3\uffff\1\1\1\uffff\1\1\3"+
			"\uffff\1\1\3\uffff\1\1",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\2\uffff\1\1\1\34\1\1\15\uffff\1\1\2\uffff\1\1\1\35\1\1\5\uffff\1"+
			"\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\37\1\1"+
			"\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\36\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff"+
			"\1\1\3\uffff\2\1\2\uffff\1\40\5\uffff\1\1\1\uffff\3\1\1\uffff\1\1\3\uffff"+
			"\1\1\16\uffff\1\1\13\uffff\1\1\3\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3"+
			"\uffff\1\1",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\2\uffff\1\1\1\34\1\1\15\uffff\1\1\2\uffff\1\1\1\35\1\1\5\uffff\1"+
			"\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\37\1\1"+
			"\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\36\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff"+
			"\1\1\3\uffff\2\1\2\uffff\1\41\5\uffff\1\1\1\uffff\3\1\1\uffff\1\1\3\uffff"+
			"\1\1\16\uffff\1\1\13\uffff\1\1\3\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3"+
			"\uffff\1\1",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\2\uffff\1\1\1\34\1\1\15\uffff\1\1\2\uffff\1\1\1\35\1\1\5\uffff\1"+
			"\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\37\1\1"+
			"\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\36\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff"+
			"\1\1\3\uffff\2\1\2\uffff\1\42\5\uffff\1\1\1\uffff\3\1\1\uffff\1\1\3\uffff"+
			"\1\1\16\uffff\1\1\13\uffff\1\1\3\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3"+
			"\uffff\1\1",
			"\1\uffff",
			"",
			"\1\53\1\1\1\46\2\1\4\uffff\1\53\1\1\3\uffff\1\53\2\uffff\3\1\3\uffff"+
			"\2\53\1\1\1\uffff\1\53\3\uffff\5\1\10\uffff\1\1\1\uffff\1\53\1\uffff"+
			"\1\53\2\uffff\1\1\1\uffff\1\1\1\53\4\uffff\2\1\1\uffff\1\1\5\uffff\1"+
			"\53\1\1\1\53\1\1\2\uffff\2\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\53\2\1"+
			"\1\53\2\1\1\53\1\uffff\1\1\1\uffff\2\1\1\43\2\uffff\1\53\1\1\1\53\3\uffff"+
			"\1\1\2\uffff\1\1\1\44\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\2\uffff"+
			"\2\53\1\1\1\47\1\53\1\uffff\1\53\4\uffff\1\1\3\uffff\5\1\1\53\1\uffff"+
			"\2\53\1\45\3\uffff\1\1\1\uffff\1\1\15\uffff\1\1\1\51\1\1\3\uffff\1\1"+
			"\6\uffff\1\53\5\uffff\1\50\3\uffff\1\53\2\uffff\1\1\1\52\1\1",
			"\1\1\1\uffff\3\1\1\uffff\3\1\2\uffff\3\1\1\uffff\7\1\1\uffff\5\1\1\uffff"+
			"\4\1\1\uffff\5\1\5\uffff\13\1\1\uffff\3\1\2\uffff\2\1\1\uffff\1\1\4\uffff"+
			"\7\1\1\uffff\3\1\2\uffff\25\1\3\uffff\7\1\1\uffff\4\1\1\54\1\uffff\1"+
			"\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\2\uffff\4\1\1\uffff\1\1\1\uffff"+
			"\15\1\1\uffff\1\1\15\uffff\3\1\3\uffff\1\1\6\uffff\2\1\2\uffff\3\1\3"+
			"\uffff\2\1\1\uffff\3\1",
			"\1\1\1\uffff\3\1\1\uffff\3\1\1\uffff\4\1\1\uffff\6\1\1\16\1\uffff\5"+
			"\1\1\uffff\1\1\1\10\2\1\1\uffff\2\1\1\55\2\1\5\uffff\5\1\1\11\5\1\1\uffff"+
			"\3\1\2\uffff\2\1\1\uffff\1\1\4\uffff\2\1\1\17\4\1\1\uffff\3\1\2\uffff"+
			"\1\1\1\13\1\1\1\7\21\1\3\uffff\1\1\1\12\5\1\1\uffff\5\1\1\uffff\1\1\2"+
			"\uffff\2\1\1\uffff\2\1\1\uffff\1\1\2\uffff\4\1\1\uffff\1\56\1\uffff\15"+
			"\1\1\uffff\1\1\15\uffff\3\1\3\uffff\1\1\6\uffff\2\1\2\uffff\3\1\3\uffff"+
			"\2\1\1\uffff\3\1",
			"\1\1\1\uffff\3\1\1\uffff\3\1\1\uffff\4\1\1\uffff\6\1\1\16\1\uffff\5"+
			"\1\1\uffff\1\1\1\10\2\1\1\uffff\2\1\1\57\2\1\5\uffff\5\1\1\11\5\1\1\uffff"+
			"\3\1\2\uffff\2\1\1\uffff\1\1\4\uffff\2\1\1\17\4\1\1\uffff\3\1\2\uffff"+
			"\1\1\1\13\1\1\1\7\21\1\3\uffff\1\1\1\12\5\1\1\uffff\5\1\1\uffff\1\1\2"+
			"\uffff\2\1\1\uffff\2\1\1\uffff\1\1\2\uffff\4\1\1\uffff\1\60\1\uffff\15"+
			"\1\1\uffff\1\1\15\uffff\3\1\3\uffff\1\1\6\uffff\2\1\2\uffff\3\1\3\uffff"+
			"\2\1\1\uffff\3\1",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\61\14\uffff\1\1\1\uffff\1"+
			"\1\11\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\1\5\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff"+
			"\1\1\1\uffff\1\1\27\uffff\1\30\4\uffff\4\1\62\uffff\1\1",
			"\12\63\1\uffff\1\63\1\uffff\1\63\1\uffff\5\63\3\uffff\4\63\2\uffff\7"+
			"\63\2\uffff\4\63\2\uffff\2\63\1\uffff\17\63\1\uffff\1\63\1\uffff\1\63"+
			"\2\uffff\13\63\4\uffff\2\63\2\uffff\1\63\1\uffff\6\63\1\uffff\14\63\1"+
			"\uffff\1\63\1\uffff\7\63\1\uffff\1\63\3\uffff\13\63\1\uffff\2\63\1\uffff"+
			"\3\63\2\uffff\13\63\16\uffff\1\62\12\uffff\4\63\1\uffff\10\63\1\uffff"+
			"\1\63",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\61\14\uffff\1\1\1\uffff\1"+
			"\1\11\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\1\5\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff"+
			"\1\1\1\uffff\1\1\27\uffff\1\30\4\uffff\4\1\62\uffff\1\1",
			"\1\1\1\uffff\3\1\1\uffff\3\1\1\uffff\4\1\1\uffff\7\1\1\uffff\5\1\1\uffff"+
			"\4\1\1\uffff\5\1\5\uffff\13\1\1\uffff\3\1\2\uffff\2\1\1\uffff\1\1\4\uffff"+
			"\7\1\1\uffff\3\1\2\uffff\25\1\3\uffff\7\1\1\uffff\5\1\1\uffff\1\1\2\uffff"+
			"\2\1\1\uffff\2\1\1\uffff\1\1\2\uffff\4\1\1\uffff\1\64\1\uffff\15\1\1"+
			"\uffff\1\1\15\uffff\3\1\3\uffff\1\1\6\uffff\2\1\2\uffff\3\1\3\uffff\2"+
			"\1\1\uffff\3\1",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\2\uffff\1\1\1\34\1\1\15\uffff\1\1\2\uffff\1\1\1\35\1\1\5\uffff\1"+
			"\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\37\1\1"+
			"\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\36\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\1\65\4\uffff\2\1\1\uffff\2"+
			"\1\1\uffff\1\1\3\uffff\2\1\2\uffff\1\66\5\uffff\1\1\1\uffff\3\1\1\uffff"+
			"\1\1\3\uffff\1\1\16\uffff\1\1\13\uffff\1\1\3\uffff\1\1\1\uffff\1\1\3"+
			"\uffff\1\1\3\uffff\1\1",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\1\67\1\uffff\1\1\1\34\1\1\15\uffff\1\1\2\uffff\1\1\1\35\1\1\5\uffff"+
			"\1\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\37\1"+
			"\1\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\36\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff"+
			"\1\1\3\uffff\2\1\2\uffff\1\70\5\uffff\1\1\1\uffff\3\1\1\uffff\1\1\3\uffff"+
			"\1\1\16\uffff\1\1\13\uffff\1\1\3\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3"+
			"\uffff\1\1",
			"\1\uffff",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\1\71\1\uffff\1\1\1\34\1\1\15\uffff\1\1\2\uffff\1\1\1\35\1\1\5\uffff"+
			"\1\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\37\1"+
			"\1\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\36\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\1\72\4\uffff\2\1\1\uffff\2"+
			"\1\1\uffff\1\1\3\uffff\2\1\2\uffff\1\73\5\uffff\1\1\1\uffff\3\1\1\uffff"+
			"\1\1\3\uffff\1\1\16\uffff\1\1\13\uffff\1\1\3\uffff\1\1\1\uffff\1\1\3"+
			"\uffff\1\1\3\uffff\1\1",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\2\uffff\1\1\1\34\1\1\15\uffff\1\1\2\uffff\1\1\1\35\1\1\5\uffff\1"+
			"\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\37\1\1"+
			"\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\36\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff"+
			"\1\1\3\uffff\2\1\2\uffff\1\74\5\uffff\1\1\1\uffff\3\1\1\uffff\1\1\3\uffff"+
			"\1\1\16\uffff\1\1\13\uffff\1\1\3\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3"+
			"\uffff\1\1",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\2\uffff\1\1\1\34\1\1\15\uffff\1\1\2\uffff\1\1\1\35\1\1\5\uffff\1"+
			"\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\37\1\1"+
			"\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\36\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff"+
			"\1\1\3\uffff\2\1\2\uffff\1\75\5\uffff\1\1\1\uffff\3\1\1\uffff\1\1\3\uffff"+
			"\1\1\16\uffff\1\1\13\uffff\1\1\3\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3"+
			"\uffff\1\1",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\2\uffff\1\1\1\34\1\1\15\uffff\1\1\2\uffff\1\1\1\35\1\1\5\uffff\1"+
			"\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\37\1\1"+
			"\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\36\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff"+
			"\1\1\3\uffff\2\1\2\uffff\1\76\5\uffff\1\1\1\uffff\3\1\1\uffff\1\1\3\uffff"+
			"\1\1\16\uffff\1\1\13\uffff\1\1\3\uffff\1\1\1\uffff\1\1\3\uffff\1\1\3"+
			"\uffff\1\1",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\3\1\1\uffff\1\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\16\2\uffff\3"+
			"\1\2\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\77\1\1\7\uffff\2\1\1\uffff\1"+
			"\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\1\1\uffff\1\1\5\uffff\1\1\1\100"+
			"\1\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\4\uffff\2\1\2\uffff"+
			"\3\1\6\uffff\5\1\2\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff"+
			"\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\101\1\uffff\5\1\1\uffff\3\1\24"+
			"\uffff\1\1\13\uffff\1\1\5\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\16\14\uffff\2\1\1\77\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\1\1\4\uffff\1\1"+
			"\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2"+
			"\uffff\1\102\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\16\14\uffff\2\1\1\77\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\1\1\4\uffff\1\1"+
			"\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2"+
			"\uffff\1\103\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\16\14\uffff\2\1\1\77\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\1\1\4\uffff\1\1"+
			"\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2"+
			"\uffff\1\104\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\16\14\uffff\2\1\1\77\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\1\1\4\uffff\1\1"+
			"\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2"+
			"\uffff\1\105\1\uffff\4\1\7\uffff\1\1\52\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\16\14\uffff\2\1\1\77\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\1\1\4\uffff\1\1"+
			"\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2"+
			"\uffff\1\106\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\16\14\uffff\2\1\1\77\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\1\1\4\uffff\1\1"+
			"\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2"+
			"\uffff\1\107\1\uffff\4\1\62\uffff\1\1",
			"\12\111\1\uffff\1\111\1\uffff\1\111\1\uffff\5\111\3\uffff\4\111\2\uffff"+
			"\7\111\2\uffff\4\111\2\uffff\2\111\1\uffff\17\111\1\uffff\1\111\1\uffff"+
			"\1\111\2\uffff\13\111\4\uffff\2\111\2\uffff\1\111\1\uffff\6\111\1\uffff"+
			"\14\111\1\uffff\1\111\1\uffff\7\111\1\uffff\1\111\3\uffff\13\111\1\uffff"+
			"\2\111\1\uffff\3\111\2\uffff\13\111\16\uffff\1\110\12\uffff\4\111\1\uffff"+
			"\10\111\1\uffff\1\111",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\16\14\uffff\2\1\1\77\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\1\1\4\uffff\1\1"+
			"\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2"+
			"\uffff\1\112\1\uffff\4\1\62\uffff\1\1",
			"\1\1\1\uffff\3\1\1\uffff\3\1\2\uffff\3\1\1\uffff\6\1\1\113\1\uffff\5"+
			"\1\1\uffff\4\1\1\uffff\5\1\5\uffff\13\1\1\uffff\3\1\2\uffff\2\1\1\uffff"+
			"\1\1\4\uffff\7\1\1\uffff\3\1\2\uffff\25\1\3\uffff\7\1\1\uffff\5\1\1\uffff"+
			"\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\2\uffff\4\1\1\uffff\1\114\1"+
			"\uffff\15\1\1\uffff\1\1\15\uffff\3\1\3\uffff\1\1\6\uffff\2\1\2\uffff"+
			"\3\1\3\uffff\2\1\1\uffff\3\1",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\120\1\1\1\120\1\uffff\1\1\4\uffff\1\120\1\1\3\uffff\1\120\3\uffff"+
			"\2\1\3\uffff\2\120\1\1\1\uffff\1\120\4\uffff\1\1\1\uffff\1\1\11\uffff"+
			"\1\1\1\uffff\1\120\1\uffff\1\120\2\uffff\1\1\2\uffff\1\120\4\uffff\2"+
			"\1\1\uffff\1\1\5\uffff\1\120\1\1\1\120\1\1\3\uffff\1\1\1\uffff\1\1\2"+
			"\uffff\1\1\1\uffff\1\120\2\1\1\120\2\1\1\120\1\uffff\1\1\1\uffff\2\1"+
			"\1\120\2\uffff\1\120\1\1\1\120\6\uffff\1\1\1\120\1\1\1\uffff\1\1\5\uffff"+
			"\1\1\4\uffff\2\120\1\uffff\2\120\1\uffff\1\120\4\uffff\1\1\4\uffff\4"+
			"\1\1\120\1\uffff\3\120\3\uffff\1\1\17\uffff\1\1\1\116\1\1\3\uffff\1\1"+
			"\6\uffff\1\120\5\uffff\1\120\3\uffff\1\120\2\uffff\1\1\1\117\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\61\14\uffff\1\1\1\uffff\1"+
			"\1\11\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\1\5\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff"+
			"\1\1\1\uffff\1\1\27\uffff\1\30\4\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\61\14\uffff\1\1\1\uffff\1"+
			"\1\11\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\1\5\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff"+
			"\1\1\1\uffff\1\1\27\uffff\1\30\4\uffff\4\1\62\uffff\1\1",
			"\1\uffff",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\1\121\1\uffff\1\1\1\34\1\1\15\uffff\1\1\2\uffff\1\1\1\35\1\1\5\uffff"+
			"\1\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\37\1"+
			"\1\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\36\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff"+
			"\1\1\3\uffff\2\1\2\uffff\1\122\5\uffff\1\1\1\uffff\3\1\1\uffff\1\1\3"+
			"\uffff\1\1\16\uffff\1\1\13\uffff\1\1\3\uffff\1\1\1\uffff\1\1\3\uffff"+
			"\1\1\3\uffff\1\1",
			"\1\uffff",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\2\uffff\1\1\1\34\1\1\15\uffff\1\1\2\uffff\1\1\1\35\1\1\5\uffff\1"+
			"\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\37\1\1"+
			"\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\36\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\1\123\4\uffff\2\1\1\uffff\2"+
			"\1\1\uffff\1\1\3\uffff\2\1\2\uffff\1\124\5\uffff\1\1\1\uffff\3\1\1\uffff"+
			"\1\1\3\uffff\1\1\16\uffff\1\1\13\uffff\1\1\3\uffff\1\1\1\uffff\1\1\3"+
			"\uffff\1\1\3\uffff\1\1",
			"\1\uffff",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\2\uffff\1\1\1\34\1\1\15\uffff\1\1\2\uffff\1\1\1\35\1\1\5\uffff\1"+
			"\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\37\1\1"+
			"\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\36\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\1\125\4\uffff\2\1\1\uffff\2"+
			"\1\1\uffff\1\1\3\uffff\2\1\2\uffff\1\126\5\uffff\1\1\1\uffff\3\1\1\uffff"+
			"\1\1\3\uffff\1\1\16\uffff\1\1\13\uffff\1\1\3\uffff\1\1\1\uffff\1\1\3"+
			"\uffff\1\1\3\uffff\1\1",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\1\127\1\uffff\1\1\1\34\1\1\15\uffff\1\1\2\uffff\1\1\1\35\1\1\5\uffff"+
			"\1\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\37\1"+
			"\1\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\36\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff"+
			"\1\1\3\uffff\2\1\2\uffff\1\130\5\uffff\1\1\1\uffff\3\1\1\uffff\1\1\3"+
			"\uffff\1\1\16\uffff\1\1\13\uffff\1\1\3\uffff\1\1\1\uffff\1\1\3\uffff"+
			"\1\1\3\uffff\1\1",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\141\1\1\1\136\2\1\4\uffff\1\141\1\1\3\uffff\1\141\2\uffff\1\1\1\uffff"+
			"\1\1\3\uffff\2\141\1\1\1\uffff\1\141\3\uffff\2\1\1\uffff\2\1\10\uffff"+
			"\1\1\1\uffff\1\141\1\uffff\1\141\2\uffff\1\1\1\uffff\1\1\1\141\4\uffff"+
			"\2\1\1\uffff\1\1\5\uffff\1\141\1\1\1\141\1\1\2\uffff\2\1\1\uffff\1\1"+
			"\2\uffff\1\1\1\uffff\1\141\2\1\1\141\2\1\1\141\1\uffff\1\1\1\uffff\2"+
			"\1\1\133\2\uffff\1\141\1\1\1\141\3\uffff\1\1\2\uffff\1\1\1\134\1\1\1"+
			"\uffff\1\1\5\uffff\1\1\4\uffff\2\141\1\1\1\137\1\141\1\uffff\1\141\10"+
			"\uffff\5\1\1\141\1\uffff\2\141\1\135\3\uffff\1\1\1\uffff\1\1\15\uffff"+
			"\1\1\1\131\1\1\3\uffff\1\1\6\uffff\1\141\5\uffff\1\140\3\uffff\1\141"+
			"\2\uffff\1\1\1\132\1\1",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\2\1\3\uffff\3\1\1\uffff"+
			"\1\1\4\uffff\1\1\1\uffff\2\1\10\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff"+
			"\1\1\2\uffff\1\1\7\uffff\1\1\5\uffff\1\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\7\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\3\1\6\uffff\3\1\7\uffff"+
			"\1\142\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\4\uffff\1\1\4"+
			"\uffff\5\1\1\uffff\3\1\3\uffff\1\1\17\uffff\3\1\3\uffff\1\1\6\uffff\1"+
			"\1\5\uffff\1\1\3\uffff\1\1\2\uffff\3\1",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\16\14\uffff\2\1\1\77\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\1\1\4\uffff\1\1"+
			"\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2"+
			"\uffff\1\143\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\16\14\uffff\2\1\1\77\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\1\1\4\uffff\1\1"+
			"\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2"+
			"\uffff\1\144\1\uffff\4\1\62\uffff\1\1",
			"\1\uffff",
			"\1\155\1\1\1\152\2\1\4\uffff\1\155\1\1\3\uffff\1\155\2\uffff\3\1\3\uffff"+
			"\2\155\1\1\1\uffff\1\155\3\uffff\2\1\1\uffff\2\1\10\uffff\1\1\1\uffff"+
			"\1\155\1\uffff\1\155\2\uffff\1\1\1\uffff\1\1\1\155\4\uffff\2\1\1\uffff"+
			"\1\1\5\uffff\1\155\1\1\1\155\1\1\2\uffff\2\1\1\uffff\1\1\2\uffff\1\1"+
			"\1\uffff\1\155\2\1\1\155\2\1\1\155\1\uffff\1\1\1\uffff\2\1\1\147\2\uffff"+
			"\1\155\1\1\1\155\3\uffff\1\1\2\uffff\1\1\1\150\1\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\2\155\1\1\1\153\1\155\1\uffff\1\155\4\uffff"+
			"\1\1\3\uffff\5\1\1\155\1\uffff\2\155\1\151\3\uffff\1\1\1\uffff\1\1\15"+
			"\uffff\1\1\1\145\1\1\3\uffff\1\1\6\uffff\1\155\5\uffff\1\154\3\uffff"+
			"\1\155\2\uffff\1\1\1\146\1\1",
			"\1\uffff",
			"",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\61\14\uffff\1\1\1\uffff\1"+
			"\1\11\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\1\5\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff"+
			"\1\1\1\uffff\1\1\27\uffff\1\156\4\uffff\4\1\62\uffff\1\1",
			"\12\160\1\uffff\1\160\1\uffff\1\160\1\uffff\5\160\3\uffff\4\160\2\uffff"+
			"\7\160\2\uffff\4\160\2\uffff\2\160\1\uffff\17\160\1\uffff\1\160\1\uffff"+
			"\1\160\2\uffff\13\160\4\uffff\2\160\2\uffff\1\160\1\uffff\6\160\1\uffff"+
			"\14\160\1\uffff\1\160\1\uffff\7\160\1\uffff\1\160\3\uffff\13\160\1\uffff"+
			"\2\160\1\uffff\3\160\2\uffff\13\160\16\uffff\1\157\12\uffff\4\160\1\uffff"+
			"\10\160\1\uffff\1\160",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\61\14\uffff\1\1\1\uffff\1"+
			"\1\11\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\1\5\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff"+
			"\1\1\1\uffff\1\1\27\uffff\1\156\4\uffff\4\1\62\uffff\1\1",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\2\uffff\1\1\1\34\1\1\15\uffff\1\1\2\uffff\1\1\1\35\1\1\5\uffff\1"+
			"\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\37\1\1"+
			"\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\36\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\1\65\4\uffff\2\1\1\uffff\2"+
			"\1\1\uffff\1\1\3\uffff\2\1\2\uffff\1\161\5\uffff\1\1\1\uffff\3\1\1\uffff"+
			"\1\1\3\uffff\1\1\16\uffff\1\1\13\uffff\1\1\3\uffff\1\1\1\uffff\1\1\3"+
			"\uffff\1\1\3\uffff\1\1",
			"\1\uffff",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\1\67\1\uffff\1\1\1\34\1\1\15\uffff\1\1\2\uffff\1\1\1\35\1\1\5\uffff"+
			"\1\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\37\1"+
			"\1\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\36\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff"+
			"\1\1\3\uffff\2\1\2\uffff\1\162\5\uffff\1\1\1\uffff\3\1\1\uffff\1\1\3"+
			"\uffff\1\1\16\uffff\1\1\13\uffff\1\1\3\uffff\1\1\1\uffff\1\1\3\uffff"+
			"\1\1\3\uffff\1\1",
			"\1\uffff",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\1\163\1\uffff\1\1\1\34\1\1\15\uffff\1\1\2\uffff\1\1\1\35\1\1\5\uffff"+
			"\1\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\37\1"+
			"\1\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\36\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff"+
			"\1\1\3\uffff\2\1\2\uffff\1\164\5\uffff\1\1\1\uffff\3\1\1\uffff\1\1\3"+
			"\uffff\1\1\16\uffff\1\1\13\uffff\1\1\3\uffff\1\1\1\uffff\1\1\3\uffff"+
			"\1\1\3\uffff\1\1",
			"\1\uffff",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\2\uffff\1\1\1\34\1\1\15\uffff\1\1\2\uffff\1\1\1\35\1\1\5\uffff\1"+
			"\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\37\1\1"+
			"\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\36\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\1\165\4\uffff\2\1\1\uffff\2"+
			"\1\1\uffff\1\1\3\uffff\2\1\2\uffff\1\166\5\uffff\1\1\1\uffff\3\1\1\uffff"+
			"\1\1\3\uffff\1\1\16\uffff\1\1\13\uffff\1\1\3\uffff\1\1\1\uffff\1\1\3"+
			"\uffff\1\1\3\uffff\1\1",
			"\1\uffff",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\167\1"+
			"\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\171\5\uffff\1\1\1"+
			"\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1"+
			"\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115\1"+
			"\uffff\4\1\62\uffff\1\1",
			"\12\173\1\uffff\1\173\1\uffff\1\173\1\uffff\5\173\3\uffff\4\173\2\uffff"+
			"\7\173\2\uffff\4\173\2\uffff\2\173\1\uffff\17\173\1\uffff\1\173\1\uffff"+
			"\1\173\2\uffff\13\173\4\uffff\2\173\2\uffff\1\173\1\uffff\6\173\1\uffff"+
			"\14\173\1\uffff\1\173\1\uffff\7\173\1\uffff\1\173\3\uffff\13\173\1\uffff"+
			"\2\173\1\uffff\3\173\2\uffff\13\173\16\uffff\1\172\12\uffff\4\173\1\uffff"+
			"\10\173\1\uffff\1\173",
			"\3\1\1\uffff\1\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\170\2\uffff\3"+
			"\1\2\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\167\1\1\7\uffff\2\1\1\uffff"+
			"\1\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\1\1\uffff\1\1\5\uffff\1\1\1\171"+
			"\1\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\4\uffff\2\1\2\uffff"+
			"\3\1\6\uffff\5\1\2\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff"+
			"\1\1\4\uffff\1\1\2\uffff\1\115\1\uffff\5\1\1\uffff\3\1\24\uffff\1\1\13"+
			"\uffff\1\1\5\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\167\1"+
			"\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\171\5\uffff\1\1\1"+
			"\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1"+
			"\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115\1"+
			"\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\167\1"+
			"\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\171\5\uffff\1\1\1"+
			"\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1"+
			"\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115\1"+
			"\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\167\1"+
			"\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\171\5\uffff\1\1\1"+
			"\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1"+
			"\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115\1"+
			"\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\167\1"+
			"\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\171\5\uffff\1\1\1"+
			"\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1"+
			"\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115\1"+
			"\uffff\4\1\7\uffff\1\1\52\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\167\1"+
			"\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\171\5\uffff\1\1\1"+
			"\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1"+
			"\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115\1"+
			"\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\167\1"+
			"\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\171\5\uffff\1\1\1"+
			"\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1"+
			"\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115\1"+
			"\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\15\uffff\1\1\1\174\5\uffff\1\1\6\uffff\1\1\1\uffff"+
			"\2\1\10\uffff\1\1\21\uffff\1\1\27\uffff\2\1\12\uffff\1\1\7\uffff\1\1"+
			"\13\uffff\1\1\15\uffff\1\1\2\uffff\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\uffff",
			"\1\uffff",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\113\14\uffff\1\1\1\uffff"+
			"\1\175\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\1\1\4"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\176\1\uffff\4\1\62\uffff\1\1",
			"\12\u0080\1\uffff\1\u0080\1\uffff\1\u0080\1\uffff\5\u0080\3\uffff\4"+
			"\u0080\2\uffff\7\u0080\2\uffff\4\u0080\2\uffff\2\u0080\1\uffff\17\u0080"+
			"\1\uffff\1\u0080\1\uffff\1\u0080\2\uffff\13\u0080\4\uffff\2\u0080\2\uffff"+
			"\1\u0080\1\uffff\6\u0080\1\uffff\14\u0080\1\uffff\1\u0080\1\uffff\7\u0080"+
			"\1\uffff\1\u0080\3\uffff\13\u0080\1\uffff\2\u0080\1\uffff\3\u0080\2\uffff"+
			"\13\u0080\16\uffff\1\177\12\uffff\4\u0080\1\uffff\10\u0080\1\uffff\1"+
			"\u0080",
			"\3\1\1\uffff\1\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\113\2\uffff\3"+
			"\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\175\1\1\7\uffff\2\1"+
			"\1\uffff\1\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\100\1\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\4\uffff"+
			"\2\1\2\uffff\3\1\6\uffff\5\1\2\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\uffff"+
			"\2\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\u0081\1\uffff\5\1"+
			"\1\uffff\3\1\24\uffff\1\1\13\uffff\1\1\5\uffff\1\1\3\uffff\1\1\2\uffff"+
			"\2\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\113\14\uffff\1\1\1\uffff"+
			"\1\175\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\1\1\4"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\u0082\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\113\14\uffff\1\1\1\uffff"+
			"\1\175\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\1\1\4"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\u0083\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\113\14\uffff\1\1\1\uffff"+
			"\1\175\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\1\1\4"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\u0084\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\113\14\uffff\1\1\1\uffff"+
			"\1\175\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\1\1\4"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\u0085\1\uffff\4\1\7\uffff\1\1\52\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\113\14\uffff\1\1\1\uffff"+
			"\1\175\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\1\1\4"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\u0086\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\113\14\uffff\1\1\1\uffff"+
			"\1\175\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\1\1\4"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\u0087\1\uffff\4\1\62\uffff\1\1",
			"\1\1\1\uffff\3\1\1\uffff\3\1\1\uffff\4\1\1\uffff\7\1\1\uffff\5\1\1\uffff"+
			"\4\1\1\uffff\5\1\5\uffff\13\1\1\uffff\3\1\2\uffff\2\1\1\uffff\1\1\4\uffff"+
			"\7\1\1\uffff\3\1\2\uffff\25\1\3\uffff\7\1\1\uffff\5\1\1\uffff\1\1\2\uffff"+
			"\2\1\1\uffff\2\1\1\uffff\1\1\2\uffff\4\1\1\uffff\1\u0088\1\uffff\15\1"+
			"\1\uffff\1\1\15\uffff\3\1\3\uffff\1\1\6\uffff\2\1\2\uffff\3\1\3\uffff"+
			"\2\1\1\uffff\3\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\61\14\uffff\1\1\1\uffff\1"+
			"\1\11\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\1\5\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff"+
			"\1\1\1\uffff\1\1\27\uffff\1\156\4\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\61\14\uffff\1\1\1\uffff\1"+
			"\1\11\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\1\5\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff"+
			"\1\1\1\uffff\1\1\27\uffff\1\156\4\uffff\4\1\62\uffff\1\1",
			"\1\uffff",
			"\1\uffff",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\2\uffff\1\1\1\34\1\1\15\uffff\1\1\2\uffff\1\1\1\35\1\1\5\uffff\1"+
			"\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\37\1\1"+
			"\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\36\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\1\125\4\uffff\2\1\1\uffff\2"+
			"\1\1\uffff\1\1\3\uffff\2\1\2\uffff\1\u0089\5\uffff\1\1\1\uffff\3\1\1"+
			"\uffff\1\1\3\uffff\1\1\16\uffff\1\1\13\uffff\1\1\3\uffff\1\1\1\uffff"+
			"\1\1\3\uffff\1\1\3\uffff\1\1",
			"\1\uffff",
			"\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\3\uffff"+
			"\4\1\1\127\1\uffff\1\1\1\34\1\1\15\uffff\1\1\2\uffff\1\1\1\35\1\1\5\uffff"+
			"\1\1\4\uffff\1\1\10\uffff\1\1\1\uffff\1\1\6\uffff\1\1\3\uffff\1\37\1"+
			"\1\2\uffff\1\1\2\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff"+
			"\1\36\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\2\1\1\uffff"+
			"\1\1\3\uffff\2\1\2\uffff\1\u008a\5\uffff\1\1\1\uffff\3\1\1\uffff\1\1"+
			"\3\uffff\1\1\16\uffff\1\1\13\uffff\1\1\3\uffff\1\1\1\uffff\1\1\3\uffff"+
			"\1\1\3\uffff\1\1",
			"\1\uffff",
			"\1\u0093\1\1\1\u0090\2\1\4\uffff\1\u0093\1\1\3\uffff\1\u0093\2\uffff"+
			"\1\1\1\uffff\1\1\3\uffff\2\u0093\1\1\1\uffff\1\u0093\3\uffff\2\1\1\uffff"+
			"\2\1\10\uffff\1\1\1\uffff\1\u0093\1\uffff\1\u0093\2\uffff\1\1\1\uffff"+
			"\1\1\1\u0093\4\uffff\2\1\1\uffff\1\1\5\uffff\1\u0093\1\1\1\u0093\1\1"+
			"\2\uffff\2\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\u0093\2\1\1\u0093\2\1"+
			"\1\u0093\1\uffff\1\1\1\uffff\2\1\1\u008d\2\uffff\1\u0093\1\1\1\u0093"+
			"\3\uffff\1\1\2\uffff\1\1\1\u008e\1\1\1\uffff\1\1\5\uffff\1\1\4\uffff"+
			"\2\u0093\1\1\1\u0091\1\u0093\1\uffff\1\u0093\10\uffff\5\1\1\u0093\1\uffff"+
			"\2\u0093\1\u008f\3\uffff\1\1\1\uffff\1\1\15\uffff\1\1\1\u008b\1\1\3\uffff"+
			"\1\1\6\uffff\1\u0093\5\uffff\1\u0092\3\uffff\1\u0093\2\uffff\1\1\1\u008c"+
			"\1\1",
			"\1\u009c\1\1\1\u0097\2\1\4\uffff\1\u009c\1\1\3\uffff\1\u009c\2\uffff"+
			"\3\1\3\uffff\2\u009c\1\1\1\uffff\1\u009c\3\uffff\5\1\10\uffff\1\1\1\uffff"+
			"\1\u009c\1\uffff\1\u009c\2\uffff\1\1\1\uffff\1\1\1\u009c\4\uffff\2\1"+
			"\1\uffff\1\1\5\uffff\1\u009c\1\1\1\u009c\1\1\2\uffff\2\1\1\uffff\1\1"+
			"\2\uffff\1\1\1\uffff\1\u009c\2\1\1\u009c\2\1\1\u009c\1\uffff\1\1\1\uffff"+
			"\2\1\1\u0094\2\uffff\1\u009c\1\1\1\u009c\3\uffff\1\1\2\uffff\1\1\1\u0095"+
			"\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\2\uffff\2\u009c\1\1\1\u0098"+
			"\1\u009c\1\uffff\1\u009c\4\uffff\1\1\3\uffff\5\1\1\u009c\1\uffff\2\u009c"+
			"\1\u0096\3\uffff\1\1\1\uffff\1\1\15\uffff\1\1\1\u009a\1\1\3\uffff\1\1"+
			"\6\uffff\1\u009c\5\uffff\1\u0099\3\uffff\1\u009c\2\uffff\1\1\1\u009b"+
			"\1\1",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\2\1\3\uffff\3\1\1\uffff"+
			"\1\1\4\uffff\1\1\1\uffff\2\1\10\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff"+
			"\1\1\2\uffff\1\1\7\uffff\1\1\5\uffff\1\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\7\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\3\1\6\uffff\3\1\7\uffff"+
			"\1\u009d\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\4\uffff\1\1"+
			"\4\uffff\5\1\1\uffff\3\1\3\uffff\1\1\17\uffff\3\1\3\uffff\1\1\6\uffff"+
			"\1\1\5\uffff\1\1\3\uffff\1\1\2\uffff\3\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\167\1"+
			"\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\171\5\uffff\1\1\1"+
			"\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1"+
			"\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115\1"+
			"\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\167\1"+
			"\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\171\5\uffff\1\1\1"+
			"\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1"+
			"\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115\1"+
			"\uffff\4\1\62\uffff\1\1",
			"\1\u00a6\1\1\1\u00a3\2\1\4\uffff\1\u00a6\1\1\3\uffff\1\u00a6\2\uffff"+
			"\3\1\3\uffff\2\u00a6\1\1\1\uffff\1\u00a6\3\uffff\2\1\1\uffff\2\1\10\uffff"+
			"\1\1\1\uffff\1\u00a6\1\uffff\1\u00a6\2\uffff\1\1\1\uffff\1\1\1\u00a6"+
			"\4\uffff\2\1\1\uffff\1\1\5\uffff\1\u00a6\1\1\1\u00a6\1\1\2\uffff\2\1"+
			"\1\uffff\1\1\2\uffff\1\1\1\uffff\1\u00a6\2\1\1\u00a6\2\1\1\u00a6\1\uffff"+
			"\1\1\1\uffff\2\1\1\u00a0\2\uffff\1\u00a6\1\1\1\u00a6\3\uffff\1\1\2\uffff"+
			"\1\1\1\u00a1\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\2\uffff\2\u00a6"+
			"\1\1\1\u00a4\1\u00a6\1\uffff\1\u00a6\4\uffff\1\1\3\uffff\5\1\1\u00a6"+
			"\1\uffff\2\u00a6\1\u00a2\3\uffff\1\1\1\uffff\1\1\15\uffff\1\1\1\u009e"+
			"\1\1\3\uffff\1\1\6\uffff\1\u00a6\5\uffff\1\u00a5\3\uffff\1\u00a6\2\uffff"+
			"\1\1\1\u009f\1\1",
			"\1\u00af\1\1\1\u00ac\2\1\4\uffff\1\u00af\1\1\3\uffff\1\u00af\2\uffff"+
			"\1\1\1\uffff\1\1\3\uffff\2\u00af\1\1\1\uffff\1\u00af\3\uffff\2\1\1\uffff"+
			"\2\1\10\uffff\1\1\1\uffff\1\u00af\1\uffff\1\u00af\2\uffff\1\1\1\uffff"+
			"\1\1\1\u00af\4\uffff\2\1\1\uffff\1\1\5\uffff\1\u00af\1\1\1\u00af\1\1"+
			"\2\uffff\2\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\u00af\2\1\1\u00af\2\1"+
			"\1\u00af\1\uffff\1\1\1\uffff\2\1\1\u00a9\2\uffff\1\u00af\1\1\1\u00af"+
			"\3\uffff\1\1\2\uffff\1\1\1\u00aa\1\1\1\uffff\1\1\5\uffff\1\1\4\uffff"+
			"\2\u00af\1\1\1\u00ad\1\u00af\1\uffff\1\u00af\10\uffff\5\1\1\u00af\1\uffff"+
			"\2\u00af\1\u00ab\3\uffff\1\1\1\uffff\1\1\15\uffff\1\1\1\u00a7\1\1\3\uffff"+
			"\1\1\6\uffff\1\u00af\5\uffff\1\u00ae\3\uffff\1\u00af\2\uffff\1\1\1\u00a8"+
			"\1\1",
			"\1\uffff",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\113\14\uffff\1\1\1\uffff"+
			"\1\175\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\1\1\4"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\u00b0\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\113\14\uffff\1\1\1\uffff"+
			"\1\175\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\1\1\4"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\3\1\4\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\u00b1\1\uffff\4\1\62\uffff\1\1",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\u00b2"+
			"\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00b3\5\uffff\1"+
			"\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\12\u00b5\1\uffff\1\u00b5\1\uffff\1\u00b5\1\uffff\5\u00b5\3\uffff\4"+
			"\u00b5\2\uffff\7\u00b5\2\uffff\4\u00b5\2\uffff\2\u00b5\1\uffff\17\u00b5"+
			"\1\uffff\1\u00b5\1\uffff\1\u00b5\2\uffff\13\u00b5\4\uffff\2\u00b5\2\uffff"+
			"\1\u00b5\1\uffff\6\u00b5\1\uffff\14\u00b5\1\uffff\1\u00b5\1\uffff\7\u00b5"+
			"\1\uffff\1\u00b5\3\uffff\13\u00b5\1\uffff\2\u00b5\1\uffff\3\u00b5\2\uffff"+
			"\13\u00b5\16\uffff\1\u00b4\12\uffff\4\u00b5\1\uffff\10\u00b5\1\uffff"+
			"\1\u00b5",
			"\3\1\1\uffff\1\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\170\2\uffff\3"+
			"\1\2\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\u00b2\1\1\7\uffff\2\1\1\uffff"+
			"\1\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\1\1\uffff\1\1\5\uffff\1\1\1\u00b3"+
			"\1\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\4\uffff\2\1\2\uffff"+
			"\3\1\6\uffff\5\1\2\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff"+
			"\1\1\4\uffff\1\1\2\uffff\1\115\1\uffff\5\1\1\uffff\3\1\24\uffff\1\1\13"+
			"\uffff\1\1\5\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\u00b2"+
			"\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00b3\5\uffff\1"+
			"\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\u00b2"+
			"\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00b3\5\uffff\1"+
			"\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\u00b2"+
			"\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00b3\5\uffff\1"+
			"\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\u00b2"+
			"\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00b3\5\uffff\1"+
			"\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\7\uffff\1\1\52\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\u00b2"+
			"\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00b3\5\uffff\1"+
			"\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\u00b2"+
			"\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00b3\5\uffff\1"+
			"\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\3\1\1\uffff\1\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\170\2\uffff\3"+
			"\1\2\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\77\1\1\7\uffff\2\1\1\uffff\1"+
			"\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\1\1\uffff\1\1\5\uffff\1\1\1\100"+
			"\1\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\4\uffff\2\1\2\uffff"+
			"\3\1\6\uffff\5\1\2\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff"+
			"\1\1\4\uffff\1\1\2\uffff\1\115\1\uffff\5\1\1\uffff\3\1\24\uffff\1\1\13"+
			"\uffff\1\1\5\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\77\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\5\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff"+
			"\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115\1\uffff\4\1"+
			"\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\77\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\5\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff"+
			"\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115\1\uffff\4\1"+
			"\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\77\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\5\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff"+
			"\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115\1\uffff\4\1"+
			"\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\77\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\5\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff"+
			"\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115\1\uffff\4\1"+
			"\7\uffff\1\1\52\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\77\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\5\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff"+
			"\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115\1\uffff\4\1"+
			"\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\77\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\5\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff"+
			"\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115\1\uffff\4\1"+
			"\62\uffff\1\1",
			"\12\u00b7\1\uffff\1\u00b7\1\uffff\1\u00b7\1\uffff\5\u00b7\3\uffff\4"+
			"\u00b7\2\uffff\7\u00b7\2\uffff\4\u00b7\2\uffff\2\u00b7\1\uffff\17\u00b7"+
			"\1\uffff\1\u00b7\1\uffff\1\u00b7\2\uffff\13\u00b7\4\uffff\2\u00b7\2\uffff"+
			"\1\u00b7\1\uffff\6\u00b7\1\uffff\14\u00b7\1\uffff\1\u00b7\1\uffff\7\u00b7"+
			"\1\uffff\1\u00b7\3\uffff\13\u00b7\1\uffff\2\u00b7\1\uffff\3\u00b7\2\uffff"+
			"\13\u00b7\16\uffff\1\u00b6\12\uffff\4\u00b7\1\uffff\10\u00b7\1\uffff"+
			"\1\u00b7",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\77\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\5\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff"+
			"\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115\1\uffff\4\1"+
			"\62\uffff\1\1",
			"\1\1\2\uffff\1\1\15\uffff\1\1\1\174\5\uffff\1\1\6\uffff\1\1\1\uffff"+
			"\2\1\10\uffff\1\1\21\uffff\1\1\24\uffff\1\1\2\uffff\2\1\12\uffff\1\1"+
			"\7\uffff\1\1\13\uffff\1\1\15\uffff\1\1\2\uffff\1\115\1\uffff\4\1\62\uffff"+
			"\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u00b8\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00b9\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\12\u00bb\1\uffff\1\u00bb\1\uffff\1\u00bb\1\uffff\5\u00bb\3\uffff\4"+
			"\u00bb\2\uffff\7\u00bb\2\uffff\4\u00bb\2\uffff\2\u00bb\1\uffff\17\u00bb"+
			"\1\uffff\1\u00bb\1\uffff\1\u00bb\2\uffff\13\u00bb\4\uffff\2\u00bb\2\uffff"+
			"\1\u00bb\1\uffff\6\u00bb\1\uffff\14\u00bb\1\uffff\1\u00bb\1\uffff\7\u00bb"+
			"\1\uffff\1\u00bb\3\uffff\13\u00bb\1\uffff\2\u00bb\1\uffff\3\u00bb\2\uffff"+
			"\13\u00bb\16\uffff\1\u00ba\12\uffff\4\u00bb\1\uffff\10\u00bb\1\uffff"+
			"\1\u00bb",
			"\3\1\1\uffff\1\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\174\2\uffff\3"+
			"\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\u00b8\1\1\7\uffff\2"+
			"\1\1\uffff\1\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\u00b9\1\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\4\uffff"+
			"\2\1\2\uffff\3\1\6\uffff\5\1\2\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\uffff"+
			"\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\115\1\uffff\5\1\1\uffff\3\1\24"+
			"\uffff\1\1\13\uffff\1\1\5\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u00b8\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00b9\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u00b8\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00b9\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u00b8\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00b9\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u00b8\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00b9\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\7\uffff\1\1\52\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u00b8\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00b9\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u00b8\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00b9\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u00bd\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\171\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\12\u00bf\1\uffff\1\u00bf\1\uffff\1\u00bf\1\uffff\5\u00bf\3\uffff\4"+
			"\u00bf\2\uffff\7\u00bf\2\uffff\4\u00bf\2\uffff\2\u00bf\1\uffff\17\u00bf"+
			"\1\uffff\1\u00bf\1\uffff\1\u00bf\2\uffff\13\u00bf\4\uffff\2\u00bf\2\uffff"+
			"\1\u00bf\1\uffff\6\u00bf\1\uffff\14\u00bf\1\uffff\1\u00bf\1\uffff\7\u00bf"+
			"\1\uffff\1\u00bf\3\uffff\13\u00bf\1\uffff\2\u00bf\1\uffff\3\u00bf\2\uffff"+
			"\13\u00bf\16\uffff\1\u00be\12\uffff\4\u00bf\1\uffff\10\u00bf\1\uffff"+
			"\1\u00bf",
			"\3\1\1\uffff\1\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\u00bc\2\uffff"+
			"\3\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\u00bd\1\1\7\uffff"+
			"\2\1\1\uffff\1\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\171\1\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\4\uffff"+
			"\2\1\2\uffff\3\1\6\uffff\5\1\2\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\uffff"+
			"\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\115\1\uffff\5\1\1\uffff\3\1\24"+
			"\uffff\1\1\13\uffff\1\1\5\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u00bd\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\171\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u00bd\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\171\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u00bd\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\171\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u00bd\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\171\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\7\uffff\1\1\52\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u00bd\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\171\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u00bd\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\171\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\1\uffff",
			"\1\uffff",
			"\1\u00c8\1\1\1\u00c5\2\1\4\uffff\1\u00c8\1\1\3\uffff\1\u00c8\2\uffff"+
			"\1\1\1\uffff\1\1\3\uffff\2\u00c8\1\1\1\uffff\1\u00c8\3\uffff\2\1\1\uffff"+
			"\2\1\10\uffff\1\1\1\uffff\1\u00c8\1\uffff\1\u00c8\2\uffff\1\1\1\uffff"+
			"\1\1\1\u00c8\4\uffff\2\1\1\uffff\1\1\5\uffff\1\u00c8\1\1\1\u00c8\1\1"+
			"\2\uffff\2\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\u00c8\2\1\1\u00c8\2\1"+
			"\1\u00c8\1\uffff\1\1\1\uffff\2\1\1\u00c2\2\uffff\1\u00c8\1\1\1\u00c8"+
			"\3\uffff\1\1\2\uffff\1\1\1\u00c3\1\1\1\uffff\1\1\5\uffff\1\1\4\uffff"+
			"\2\u00c8\1\1\1\u00c6\1\u00c8\1\uffff\1\u00c8\10\uffff\5\1\1\u00c8\1\uffff"+
			"\2\u00c8\1\u00c4\3\uffff\1\1\1\uffff\1\1\15\uffff\1\1\1\u00c0\1\1\3\uffff"+
			"\1\1\6\uffff\1\u00c8\5\uffff\1\u00c7\3\uffff\1\u00c8\2\uffff\1\1\1\u00c1"+
			"\1\1",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\2\1\3\uffff\3\1\1\uffff"+
			"\1\1\4\uffff\1\1\1\uffff\2\1\10\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff"+
			"\1\1\2\uffff\1\1\7\uffff\1\1\5\uffff\1\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\7\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\3\1\6\uffff\3\1\7\uffff"+
			"\1\u00c9\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\4\uffff\1\1"+
			"\4\uffff\5\1\1\uffff\3\1\3\uffff\1\1\17\uffff\3\1\3\uffff\1\1\6\uffff"+
			"\1\1\5\uffff\1\1\3\uffff\1\1\2\uffff\3\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\u00b2"+
			"\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00b3\5\uffff\1"+
			"\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\u00b2"+
			"\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00b3\5\uffff\1"+
			"\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\77\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\5\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff"+
			"\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115\1\uffff\4\1"+
			"\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\77\1\1"+
			"\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\5\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff\1\1\7\uffff"+
			"\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115\1\uffff\4\1"+
			"\62\uffff\1\1",
			"\1\u00d2\1\1\1\u00cf\2\1\4\uffff\1\u00d2\1\1\3\uffff\1\u00d2\2\uffff"+
			"\1\1\1\uffff\1\1\3\uffff\2\u00d2\1\1\1\uffff\1\u00d2\3\uffff\2\1\1\uffff"+
			"\2\1\10\uffff\1\1\1\uffff\1\u00d2\1\uffff\1\u00d2\2\uffff\1\1\1\uffff"+
			"\1\1\1\u00d2\4\uffff\2\1\1\uffff\1\1\5\uffff\1\u00d2\1\1\1\u00d2\1\1"+
			"\2\uffff\2\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\u00d2\2\1\1\u00d2\2\1"+
			"\1\u00d2\1\uffff\1\1\1\uffff\2\1\1\u00cc\2\uffff\1\u00d2\1\1\1\u00d2"+
			"\3\uffff\1\1\2\uffff\1\1\1\u00cd\1\1\1\uffff\1\1\5\uffff\1\1\4\uffff"+
			"\2\u00d2\1\1\1\u00d0\1\u00d2\1\uffff\1\u00d2\10\uffff\5\1\1\u00d2\1\uffff"+
			"\2\u00d2\1\u00ce\3\uffff\1\1\1\uffff\1\1\15\uffff\1\1\1\u00ca\1\1\3\uffff"+
			"\1\1\6\uffff\1\u00d2\5\uffff\1\u00d1\3\uffff\1\u00d2\2\uffff\1\1\1\u00cb"+
			"\1\1",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\2\1\3\uffff\3\1\1\uffff"+
			"\1\1\4\uffff\1\1\1\uffff\2\1\10\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff"+
			"\1\1\2\uffff\1\1\7\uffff\1\1\5\uffff\1\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\7\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\3\1\6\uffff\3\1\7\uffff"+
			"\1\u00d3\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\4\uffff\1\1"+
			"\4\uffff\5\1\1\uffff\3\1\3\uffff\1\1\17\uffff\3\1\3\uffff\1\1\6\uffff"+
			"\1\1\5\uffff\1\1\3\uffff\1\1\2\uffff\3\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u00b8\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00b9\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u00b8\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00b9\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\u00dc\1\1\1\u00d9\2\1\4\uffff\1\u00dc\1\1\3\uffff\1\u00dc\2\uffff"+
			"\3\1\3\uffff\2\u00dc\1\1\1\uffff\1\u00dc\3\uffff\2\1\1\uffff\2\1\10\uffff"+
			"\1\1\1\uffff\1\u00dc\1\uffff\1\u00dc\2\uffff\1\1\1\uffff\1\1\1\u00dc"+
			"\4\uffff\2\1\1\uffff\1\1\5\uffff\1\u00dc\1\1\1\u00dc\1\1\2\uffff\2\1"+
			"\1\uffff\1\1\2\uffff\1\1\1\uffff\1\u00dc\2\1\1\u00dc\2\1\1\u00dc\1\uffff"+
			"\1\1\1\uffff\2\1\1\u00d6\2\uffff\1\u00dc\1\1\1\u00dc\3\uffff\1\1\2\uffff"+
			"\1\1\1\u00d7\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\2\uffff\2\u00dc"+
			"\1\1\1\u00da\1\u00dc\1\uffff\1\u00dc\4\uffff\1\1\3\uffff\5\1\1\u00dc"+
			"\1\uffff\2\u00dc\1\u00d8\3\uffff\1\1\1\uffff\1\1\15\uffff\1\1\1\u00d4"+
			"\1\1\3\uffff\1\1\6\uffff\1\u00dc\5\uffff\1\u00db\3\uffff\1\u00dc\2\uffff"+
			"\1\1\1\u00d5\1\1",
			"\1\u00e5\1\1\1\u00e2\2\1\4\uffff\1\u00e5\1\1\3\uffff\1\u00e5\2\uffff"+
			"\1\1\1\uffff\1\1\3\uffff\2\u00e5\1\1\1\uffff\1\u00e5\3\uffff\2\1\1\uffff"+
			"\2\1\10\uffff\1\1\1\uffff\1\u00e5\1\uffff\1\u00e5\2\uffff\1\1\1\uffff"+
			"\1\1\1\u00e5\4\uffff\2\1\1\uffff\1\1\5\uffff\1\u00e5\1\1\1\u00e5\1\1"+
			"\2\uffff\2\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\u00e5\2\1\1\u00e5\2\1"+
			"\1\u00e5\1\uffff\1\1\1\uffff\2\1\1\u00df\2\uffff\1\u00e5\1\1\1\u00e5"+
			"\3\uffff\1\1\2\uffff\1\1\1\u00e0\1\1\1\uffff\1\1\5\uffff\1\1\4\uffff"+
			"\2\u00e5\1\1\1\u00e3\1\u00e5\1\uffff\1\u00e5\10\uffff\5\1\1\u00e5\1\uffff"+
			"\2\u00e5\1\u00e1\3\uffff\1\1\1\uffff\1\1\15\uffff\1\1\1\u00dd\1\1\3\uffff"+
			"\1\1\6\uffff\1\u00e5\5\uffff\1\u00e4\3\uffff\1\u00e5\2\uffff\1\1\1\u00de"+
			"\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u00bd\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\171\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u00bd\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\171\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\u00e6"+
			"\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00e7\5\uffff\1"+
			"\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\12\u00e9\1\uffff\1\u00e9\1\uffff\1\u00e9\1\uffff\5\u00e9\3\uffff\4"+
			"\u00e9\2\uffff\7\u00e9\2\uffff\4\u00e9\2\uffff\2\u00e9\1\uffff\17\u00e9"+
			"\1\uffff\1\u00e9\1\uffff\1\u00e9\2\uffff\13\u00e9\4\uffff\2\u00e9\2\uffff"+
			"\1\u00e9\1\uffff\6\u00e9\1\uffff\14\u00e9\1\uffff\1\u00e9\1\uffff\7\u00e9"+
			"\1\uffff\1\u00e9\3\uffff\13\u00e9\1\uffff\2\u00e9\1\uffff\3\u00e9\2\uffff"+
			"\13\u00e9\16\uffff\1\u00e8\12\uffff\4\u00e9\1\uffff\10\u00e9\1\uffff"+
			"\1\u00e9",
			"\3\1\1\uffff\1\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\170\2\uffff\3"+
			"\1\2\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\u00e6\1\1\7\uffff\2\1\1\uffff"+
			"\1\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\1\1\uffff\1\1\5\uffff\1\1\1\u00e7"+
			"\1\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\4\uffff\2\1\2\uffff"+
			"\3\1\6\uffff\5\1\2\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff"+
			"\1\1\4\uffff\1\1\2\uffff\1\115\1\uffff\5\1\1\uffff\3\1\24\uffff\1\1\13"+
			"\uffff\1\1\5\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\u00e6"+
			"\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00e7\5\uffff\1"+
			"\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\u00e6"+
			"\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00e7\5\uffff\1"+
			"\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\u00e6"+
			"\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00e7\5\uffff\1"+
			"\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\u00e6"+
			"\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00e7\5\uffff\1"+
			"\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\7\uffff\1\1\52\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\u00e6"+
			"\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00e7\5\uffff\1"+
			"\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\u00e6"+
			"\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00e7\5\uffff\1"+
			"\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\15\uffff\1\1\1\174\5\uffff\1\1\6\uffff\1\1\1\uffff"+
			"\2\1\10\uffff\1\1\21\uffff\1\1\24\uffff\1\1\2\uffff\2\1\12\uffff\1\1"+
			"\7\uffff\1\1\13\uffff\1\1\15\uffff\1\1\2\uffff\1\115\1\uffff\4\1\62\uffff"+
			"\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u00eb\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00ea\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\12\u00ed\1\uffff\1\u00ed\1\uffff\1\u00ed\1\uffff\5\u00ed\3\uffff\4"+
			"\u00ed\2\uffff\7\u00ed\2\uffff\4\u00ed\2\uffff\2\u00ed\1\uffff\17\u00ed"+
			"\1\uffff\1\u00ed\1\uffff\1\u00ed\2\uffff\13\u00ed\4\uffff\2\u00ed\2\uffff"+
			"\1\u00ed\1\uffff\6\u00ed\1\uffff\14\u00ed\1\uffff\1\u00ed\1\uffff\7\u00ed"+
			"\1\uffff\1\u00ed\3\uffff\13\u00ed\1\uffff\2\u00ed\1\uffff\3\u00ed\2\uffff"+
			"\13\u00ed\16\uffff\1\u00ec\12\uffff\4\u00ed\1\uffff\10\u00ed\1\uffff"+
			"\1\u00ed",
			"\3\1\1\uffff\1\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\174\2\uffff\3"+
			"\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\u00eb\1\1\7\uffff\2"+
			"\1\1\uffff\1\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\u00ea\1\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\4\uffff"+
			"\2\1\2\uffff\3\1\6\uffff\5\1\2\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\uffff"+
			"\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\115\1\uffff\5\1\1\uffff\3\1\24"+
			"\uffff\1\1\13\uffff\1\1\5\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u00eb\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00ea\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u00eb\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00ea\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u00eb\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00ea\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u00eb\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00ea\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\7\uffff\1\1\52\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u00eb\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00ea\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u00eb\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00ea\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\15\uffff\1\1\1\174\5\uffff\1\1\6\uffff\1\1\1\uffff"+
			"\2\1\10\uffff\1\1\21\uffff\1\1\27\uffff\2\1\12\uffff\1\1\7\uffff\1\1"+
			"\13\uffff\1\1\15\uffff\1\1\2\uffff\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\175\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\12\u00ef\1\uffff\1\u00ef\1\uffff\1\u00ef\1\uffff\5\u00ef\3\uffff\4"+
			"\u00ef\2\uffff\7\u00ef\2\uffff\4\u00ef\2\uffff\2\u00ef\1\uffff\17\u00ef"+
			"\1\uffff\1\u00ef\1\uffff\1\u00ef\2\uffff\13\u00ef\4\uffff\2\u00ef\2\uffff"+
			"\1\u00ef\1\uffff\6\u00ef\1\uffff\14\u00ef\1\uffff\1\u00ef\1\uffff\7\u00ef"+
			"\1\uffff\1\u00ef\3\uffff\13\u00ef\1\uffff\2\u00ef\1\uffff\3\u00ef\2\uffff"+
			"\13\u00ef\16\uffff\1\u00ee\12\uffff\4\u00ef\1\uffff\10\u00ef\1\uffff"+
			"\1\u00ef",
			"\3\1\1\uffff\1\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\u00bc\2\uffff"+
			"\3\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\175\1\1\7\uffff\2"+
			"\1\1\uffff\1\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\100\1\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\4\uffff"+
			"\2\1\2\uffff\3\1\6\uffff\5\1\2\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\uffff"+
			"\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\115\1\uffff\5\1\1\uffff\3\1\24"+
			"\uffff\1\1\13\uffff\1\1\5\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\175\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\175\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\175\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\175\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\7\uffff\1\1\52\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\175\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\175\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u00f0\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00b3\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\12\u00f2\1\uffff\1\u00f2\1\uffff\1\u00f2\1\uffff\5\u00f2\3\uffff\4"+
			"\u00f2\2\uffff\7\u00f2\2\uffff\4\u00f2\2\uffff\2\u00f2\1\uffff\17\u00f2"+
			"\1\uffff\1\u00f2\1\uffff\1\u00f2\2\uffff\13\u00f2\4\uffff\2\u00f2\2\uffff"+
			"\1\u00f2\1\uffff\6\u00f2\1\uffff\14\u00f2\1\uffff\1\u00f2\1\uffff\7\u00f2"+
			"\1\uffff\1\u00f2\3\uffff\13\u00f2\1\uffff\2\u00f2\1\uffff\3\u00f2\2\uffff"+
			"\13\u00f2\16\uffff\1\u00f1\12\uffff\4\u00f2\1\uffff\10\u00f2\1\uffff"+
			"\1\u00f2",
			"\3\1\1\uffff\1\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\u00bc\2\uffff"+
			"\3\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\u00f0\1\1\7\uffff"+
			"\2\1\1\uffff\1\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\u00b3\1\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\4\uffff"+
			"\2\1\2\uffff\3\1\6\uffff\5\1\2\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\uffff"+
			"\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\115\1\uffff\5\1\1\uffff\3\1\24"+
			"\uffff\1\1\13\uffff\1\1\5\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u00f0\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00b3\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u00f0\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00b3\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u00f0\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00b3\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u00f0\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00b3\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\7\uffff\1\1\52\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u00f0\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00b3\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u00f0\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00b3\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\u00fb\1\1\1\u00f6\2\1\4\uffff\1\u00fb\1\1\3\uffff\1\u00fb\2\uffff"+
			"\1\1\1\uffff\1\1\3\uffff\2\u00fb\1\1\1\uffff\1\u00fb\3\uffff\2\1\1\uffff"+
			"\2\1\10\uffff\1\1\1\uffff\1\u00fb\1\uffff\1\u00fb\2\uffff\1\1\1\uffff"+
			"\1\1\1\u00fb\4\uffff\2\1\1\uffff\1\1\5\uffff\1\u00fb\1\1\1\u00fb\1\1"+
			"\2\uffff\2\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\u00fb\2\1\1\u00fb\2\1"+
			"\1\u00fb\1\uffff\1\1\1\uffff\2\1\1\u00f3\2\uffff\1\u00fb\1\1\1\u00fb"+
			"\3\uffff\1\1\2\uffff\1\1\1\u00f4\1\1\1\uffff\1\1\5\uffff\1\1\4\uffff"+
			"\2\u00fb\1\1\1\u00f7\1\u00fb\1\uffff\1\u00fb\10\uffff\5\1\1\u00fb\1\uffff"+
			"\2\u00fb\1\u00f5\3\uffff\1\1\1\uffff\1\1\15\uffff\1\1\1\u00f9\1\1\3\uffff"+
			"\1\1\6\uffff\1\u00fb\5\uffff\1\u00f8\3\uffff\1\u00fb\2\uffff\1\1\1\u00fa"+
			"\1\1",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\2\1\3\uffff\3\1\1\uffff"+
			"\1\1\4\uffff\1\1\1\uffff\2\1\10\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff"+
			"\1\1\2\uffff\1\1\7\uffff\1\1\5\uffff\1\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\7\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\3\1\6\uffff\3\1\7\uffff"+
			"\1\u00fc\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\4\uffff\1\1"+
			"\4\uffff\5\1\1\uffff\3\1\3\uffff\1\1\17\uffff\3\1\3\uffff\1\1\6\uffff"+
			"\1\1\5\uffff\1\1\3\uffff\1\1\2\uffff\3\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\u00e6"+
			"\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00e7\5\uffff\1"+
			"\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\u00e6"+
			"\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00e7\5\uffff\1"+
			"\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\2\1\3\uffff\3\1\1\uffff"+
			"\1\1\4\uffff\1\1\1\uffff\2\1\10\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff"+
			"\1\1\2\uffff\1\1\7\uffff\1\1\5\uffff\1\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\7\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\3\1\6\uffff\3\1\7\uffff"+
			"\1\u00fd\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\4\uffff\1\1"+
			"\4\uffff\5\1\1\uffff\3\1\3\uffff\1\1\17\uffff\3\1\3\uffff\1\1\6\uffff"+
			"\1\1\5\uffff\1\1\3\uffff\1\1\2\uffff\3\1",
			"\1\u0106\1\1\1\u0103\2\1\4\uffff\1\u0106\1\1\3\uffff\1\u0106\2\uffff"+
			"\1\1\1\uffff\1\1\3\uffff\2\u0106\1\1\1\uffff\1\u0106\3\uffff\2\1\1\uffff"+
			"\2\1\10\uffff\1\1\1\uffff\1\u0106\1\uffff\1\u0106\2\uffff\1\1\1\uffff"+
			"\1\1\1\u0106\4\uffff\2\1\1\uffff\1\1\5\uffff\1\u0106\1\1\1\u0106\1\1"+
			"\2\uffff\2\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\u0106\2\1\1\u0106\2\1"+
			"\1\u0106\1\uffff\1\1\1\uffff\2\1\1\u0100\2\uffff\1\u0106\1\1\1\u0106"+
			"\3\uffff\1\1\2\uffff\1\1\1\u0101\1\1\1\uffff\1\1\5\uffff\1\1\4\uffff"+
			"\2\u0106\1\1\1\u0104\1\u0106\1\uffff\1\u0106\10\uffff\5\1\1\u0106\1\uffff"+
			"\2\u0106\1\u0102\3\uffff\1\1\1\uffff\1\1\15\uffff\1\1\1\u00fe\1\1\3\uffff"+
			"\1\1\6\uffff\1\u0106\5\uffff\1\u0105\3\uffff\1\u0106\2\uffff\1\1\1\u00ff"+
			"\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u00eb\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00ea\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u00eb\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00ea\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\175\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\175\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\100\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\1\u010f\1\1\1\u010c\2\1\4\uffff\1\u010f\1\1\3\uffff\1\u010f\2\uffff"+
			"\1\1\1\uffff\1\1\3\uffff\2\u010f\1\1\1\uffff\1\u010f\3\uffff\2\1\1\uffff"+
			"\2\1\10\uffff\1\1\1\uffff\1\u010f\1\uffff\1\u010f\2\uffff\1\1\1\uffff"+
			"\1\1\1\u010f\4\uffff\2\1\1\uffff\1\1\5\uffff\1\u010f\1\1\1\u010f\1\1"+
			"\2\uffff\2\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\u010f\2\1\1\u010f\2\1"+
			"\1\u010f\1\uffff\1\1\1\uffff\2\1\1\u0109\2\uffff\1\u010f\1\1\1\u010f"+
			"\3\uffff\1\1\2\uffff\1\1\1\u010a\1\1\1\uffff\1\1\5\uffff\1\1\4\uffff"+
			"\2\u010f\1\1\1\u010d\1\u010f\1\uffff\1\u010f\10\uffff\5\1\1\u010f\1\uffff"+
			"\2\u010f\1\u010b\3\uffff\1\1\1\uffff\1\1\15\uffff\1\1\1\u0107\1\1\3\uffff"+
			"\1\1\6\uffff\1\u010f\5\uffff\1\u010e\3\uffff\1\u010f\2\uffff\1\1\1\u0108"+
			"\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u00f0\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00b3\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u00f0\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00b3\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\3\1\1\uffff\1\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\170\2\uffff\3"+
			"\1\2\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\u0110\1\1\7\uffff\2\1\1\uffff"+
			"\1\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\1\1\uffff\1\1\5\uffff\1\1\1\u0111"+
			"\1\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\4\uffff\2\1\2\uffff"+
			"\3\1\6\uffff\5\1\2\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff"+
			"\1\1\4\uffff\1\1\2\uffff\1\115\1\uffff\5\1\1\uffff\3\1\24\uffff\1\1\13"+
			"\uffff\1\1\5\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\u0112"+
			"\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0111\5\uffff\1"+
			"\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\u0113"+
			"\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0111\5\uffff\1"+
			"\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\u0114"+
			"\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0111\5\uffff\1"+
			"\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\u0115"+
			"\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0111\5\uffff\1"+
			"\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\7\uffff\1\1\52\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\u0116"+
			"\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0111\5\uffff\1"+
			"\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\u0117"+
			"\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0111\5\uffff\1"+
			"\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\12\u0119\1\uffff\1\u0119\1\uffff\1\u0119\1\uffff\5\u0119\3\uffff\4"+
			"\u0119\2\uffff\7\u0119\2\uffff\4\u0119\2\uffff\2\u0119\1\uffff\17\u0119"+
			"\1\uffff\1\u0119\1\uffff\1\u0119\2\uffff\13\u0119\4\uffff\2\u0119\2\uffff"+
			"\1\u0119\1\uffff\6\u0119\1\uffff\14\u0119\1\uffff\1\u0119\1\uffff\7\u0119"+
			"\1\uffff\1\u0119\3\uffff\13\u0119\1\uffff\2\u0119\1\uffff\3\u0119\2\uffff"+
			"\13\u0119\16\uffff\1\u0118\12\uffff\4\u0119\1\uffff\10\u0119\1\uffff"+
			"\1\u0119",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\u011a"+
			"\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0111\5\uffff\1"+
			"\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\15\uffff\1\1\1\174\5\uffff\1\1\6\uffff\1\1\1\uffff"+
			"\2\1\10\uffff\1\1\21\uffff\1\1\24\uffff\1\1\2\uffff\2\1\12\uffff\1\1"+
			"\7\uffff\1\1\13\uffff\1\1\15\uffff\1\1\2\uffff\1\115\1\uffff\4\1\62\uffff"+
			"\1\1",
			"\1\1\2\uffff\1\1\15\uffff\1\1\1\174\5\uffff\1\1\6\uffff\1\1\1\uffff"+
			"\2\1\10\uffff\1\1\21\uffff\1\1\24\uffff\1\1\2\uffff\2\1\12\uffff\1\1"+
			"\7\uffff\1\1\13\uffff\1\1\15\uffff\1\1\2\uffff\1\115\1\uffff\4\1\62\uffff"+
			"\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u011c\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u011b\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\12\u011e\1\uffff\1\u011e\1\uffff\1\u011e\1\uffff\5\u011e\3\uffff\4"+
			"\u011e\2\uffff\7\u011e\2\uffff\4\u011e\2\uffff\2\u011e\1\uffff\17\u011e"+
			"\1\uffff\1\u011e\1\uffff\1\u011e\2\uffff\13\u011e\4\uffff\2\u011e\2\uffff"+
			"\1\u011e\1\uffff\6\u011e\1\uffff\14\u011e\1\uffff\1\u011e\1\uffff\7\u011e"+
			"\1\uffff\1\u011e\3\uffff\13\u011e\1\uffff\2\u011e\1\uffff\3\u011e\2\uffff"+
			"\13\u011e\16\uffff\1\u011d\12\uffff\4\u011e\1\uffff\10\u011e\1\uffff"+
			"\1\u011e",
			"\3\1\1\uffff\1\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\174\2\uffff\3"+
			"\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\u011c\1\1\7\uffff\2"+
			"\1\1\uffff\1\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\u011b\1\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\4\uffff"+
			"\2\1\2\uffff\3\1\6\uffff\5\1\2\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\uffff"+
			"\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\115\1\uffff\5\1\1\uffff\3\1\24"+
			"\uffff\1\1\13\uffff\1\1\5\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u011c\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u011b\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u011c\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u011b\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u011c\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u011b\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u011c\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u011b\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\7\uffff\1\1\52\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u011c\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u011b\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u011c\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u011b\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u011f\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00e7\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\12\u0121\1\uffff\1\u0121\1\uffff\1\u0121\1\uffff\5\u0121\3\uffff\4"+
			"\u0121\2\uffff\7\u0121\2\uffff\4\u0121\2\uffff\2\u0121\1\uffff\17\u0121"+
			"\1\uffff\1\u0121\1\uffff\1\u0121\2\uffff\13\u0121\4\uffff\2\u0121\2\uffff"+
			"\1\u0121\1\uffff\6\u0121\1\uffff\14\u0121\1\uffff\1\u0121\1\uffff\7\u0121"+
			"\1\uffff\1\u0121\3\uffff\13\u0121\1\uffff\2\u0121\1\uffff\3\u0121\2\uffff"+
			"\13\u0121\16\uffff\1\u0120\12\uffff\4\u0121\1\uffff\10\u0121\1\uffff"+
			"\1\u0121",
			"\3\1\1\uffff\1\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\u00bc\2\uffff"+
			"\3\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\u011f\1\1\7\uffff"+
			"\2\1\1\uffff\1\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\u00e7\1\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\4\uffff"+
			"\2\1\2\uffff\3\1\6\uffff\5\1\2\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\uffff"+
			"\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\115\1\uffff\5\1\1\uffff\3\1\24"+
			"\uffff\1\1\13\uffff\1\1\5\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u011f\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00e7\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u011f\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00e7\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u011f\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00e7\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u011f\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00e7\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\7\uffff\1\1\52\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u011f\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00e7\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u011f\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00e7\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\uffff",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\2\1\3\uffff\3\1\1\uffff"+
			"\1\1\4\uffff\1\1\1\uffff\2\1\10\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff"+
			"\1\1\2\uffff\1\1\7\uffff\1\1\5\uffff\1\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\7\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\3\1\6\uffff\3\1\7\uffff"+
			"\1\u0122\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\4\uffff\1\1"+
			"\4\uffff\5\1\1\uffff\3\1\3\uffff\1\1\17\uffff\3\1\3\uffff\1\1\6\uffff"+
			"\1\1\5\uffff\1\1\3\uffff\1\1\2\uffff\3\1",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\u0123"+
			"\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0111\5\uffff\1"+
			"\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\170\14\uffff\2\1\1\u0124"+
			"\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0111\5\uffff\1"+
			"\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff\1\115"+
			"\1\uffff\4\1\62\uffff\1\1",
			"\1\uffff",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\2\1\3\uffff\3\1\1\uffff"+
			"\1\1\4\uffff\1\1\1\uffff\2\1\10\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff"+
			"\1\1\2\uffff\1\1\7\uffff\1\1\5\uffff\1\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\7\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\3\1\6\uffff\3\1\7\uffff"+
			"\1\u0125\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\4\uffff\1\1"+
			"\4\uffff\5\1\1\uffff\3\1\3\uffff\1\1\17\uffff\3\1\3\uffff\1\1\6\uffff"+
			"\1\1\5\uffff\1\1\3\uffff\1\1\2\uffff\3\1",
			"\1\u012e\1\1\1\u012b\2\1\4\uffff\1\u012e\1\1\3\uffff\1\u012e\2\uffff"+
			"\1\1\1\uffff\1\1\3\uffff\2\u012e\1\1\1\uffff\1\u012e\3\uffff\2\1\1\uffff"+
			"\2\1\10\uffff\1\1\1\uffff\1\u012e\1\uffff\1\u012e\2\uffff\1\1\1\uffff"+
			"\1\1\1\u012e\4\uffff\2\1\1\uffff\1\1\5\uffff\1\u012e\1\1\1\u012e\1\1"+
			"\2\uffff\2\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\u012e\2\1\1\u012e\2\1"+
			"\1\u012e\1\uffff\1\1\1\uffff\2\1\1\u0128\2\uffff\1\u012e\1\1\1\u012e"+
			"\3\uffff\1\1\2\uffff\1\1\1\u0129\1\1\1\uffff\1\1\5\uffff\1\1\4\uffff"+
			"\2\u012e\1\1\1\u012c\1\u012e\1\uffff\1\u012e\10\uffff\5\1\1\u012e\1\uffff"+
			"\2\u012e\1\u012a\3\uffff\1\1\1\uffff\1\1\15\uffff\1\1\1\u0126\1\1\3\uffff"+
			"\1\1\6\uffff\1\u012e\5\uffff\1\u012d\3\uffff\1\u012e\2\uffff\1\1\1\u0127"+
			"\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u011c\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u011b\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u011c\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u011b\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\u0137\1\1\1\u0134\2\1\4\uffff\1\u0137\1\1\3\uffff\1\u0137\2\uffff"+
			"\1\1\1\uffff\1\1\3\uffff\2\u0137\1\1\1\uffff\1\u0137\3\uffff\2\1\1\uffff"+
			"\2\1\10\uffff\1\1\1\uffff\1\u0137\1\uffff\1\u0137\2\uffff\1\1\1\uffff"+
			"\1\1\1\u0137\4\uffff\2\1\1\uffff\1\1\5\uffff\1\u0137\1\1\1\u0137\1\1"+
			"\2\uffff\2\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\u0137\2\1\1\u0137\2\1"+
			"\1\u0137\1\uffff\1\1\1\uffff\2\1\1\u0131\2\uffff\1\u0137\1\1\1\u0137"+
			"\3\uffff\1\1\2\uffff\1\1\1\u0132\1\1\1\uffff\1\1\5\uffff\1\1\4\uffff"+
			"\2\u0137\1\1\1\u0135\1\u0137\1\uffff\1\u0137\10\uffff\5\1\1\u0137\1\uffff"+
			"\2\u0137\1\u0133\3\uffff\1\1\1\uffff\1\1\15\uffff\1\1\1\u012f\1\1\3\uffff"+
			"\1\1\6\uffff\1\u0137\5\uffff\1\u0136\3\uffff\1\u0137\2\uffff\1\1\1\u0130"+
			"\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u011f\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00e7\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u011f\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u00e7\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\15\uffff\1\1\1\174\5\uffff\1\1\6\uffff\1\1\1\uffff"+
			"\2\1\10\uffff\1\1\21\uffff\1\1\24\uffff\1\1\2\uffff\2\1\12\uffff\1\1"+
			"\7\uffff\1\1\13\uffff\1\1\15\uffff\1\1\2\uffff\1\115\1\uffff\4\1\62\uffff"+
			"\1\1",
			"\1\uffff",
			"\1\uffff",
			"\1\1\2\uffff\1\1\15\uffff\1\1\1\174\5\uffff\1\1\6\uffff\1\1\1\uffff"+
			"\2\1\10\uffff\1\1\21\uffff\1\1\24\uffff\1\1\2\uffff\2\1\12\uffff\1\1"+
			"\7\uffff\1\1\13\uffff\1\1\15\uffff\1\1\2\uffff\1\115\1\uffff\4\1\62\uffff"+
			"\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u0139\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0138\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\12\u013b\1\uffff\1\u013b\1\uffff\1\u013b\1\uffff\5\u013b\3\uffff\4"+
			"\u013b\2\uffff\7\u013b\2\uffff\4\u013b\2\uffff\2\u013b\1\uffff\17\u013b"+
			"\1\uffff\1\u013b\1\uffff\1\u013b\2\uffff\13\u013b\4\uffff\2\u013b\2\uffff"+
			"\1\u013b\1\uffff\6\u013b\1\uffff\14\u013b\1\uffff\1\u013b\1\uffff\7\u013b"+
			"\1\uffff\1\u013b\3\uffff\13\u013b\1\uffff\2\u013b\1\uffff\3\u013b\2\uffff"+
			"\13\u013b\16\uffff\1\u013a\12\uffff\4\u013b\1\uffff\10\u013b\1\uffff"+
			"\1\u013b",
			"\3\1\1\uffff\1\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\174\2\uffff\3"+
			"\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\u0139\1\1\7\uffff\2"+
			"\1\1\uffff\1\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\u0138\1\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\4\uffff"+
			"\2\1\2\uffff\3\1\6\uffff\5\1\2\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\uffff"+
			"\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\115\1\uffff\5\1\1\uffff\3\1\24"+
			"\uffff\1\1\13\uffff\1\1\5\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u0139\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0138\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u0139\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0138\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u0139\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0138\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u0139\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0138\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\7\uffff\1\1\52\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u0139\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0138\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u0139\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0138\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u013c\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0111\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\12\u013e\1\uffff\1\u013e\1\uffff\1\u013e\1\uffff\5\u013e\3\uffff\4"+
			"\u013e\2\uffff\7\u013e\2\uffff\4\u013e\2\uffff\2\u013e\1\uffff\17\u013e"+
			"\1\uffff\1\u013e\1\uffff\1\u013e\2\uffff\13\u013e\4\uffff\2\u013e\2\uffff"+
			"\1\u013e\1\uffff\6\u013e\1\uffff\14\u013e\1\uffff\1\u013e\1\uffff\7\u013e"+
			"\1\uffff\1\u013e\3\uffff\13\u013e\1\uffff\2\u013e\1\uffff\3\u013e\2\uffff"+
			"\13\u013e\16\uffff\1\u013d\12\uffff\4\u013e\1\uffff\10\u013e\1\uffff"+
			"\1\u013e",
			"\3\1\1\uffff\1\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\u00bc\2\uffff"+
			"\3\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\u013f\1\1\7\uffff"+
			"\2\1\1\uffff\1\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\u0111\1\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\4\uffff"+
			"\2\1\2\uffff\3\1\6\uffff\5\1\2\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\uffff"+
			"\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\115\1\uffff\5\1\1\uffff\3\1\24"+
			"\uffff\1\1\13\uffff\1\1\5\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u0140\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0111\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u0141\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0111\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u0142\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0111\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u0143\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0111\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\7\uffff\1\1\52\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u0144\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0111\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u0145\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0111\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\2\1\3\uffff\3\1\1\uffff"+
			"\1\1\4\uffff\1\1\1\uffff\2\1\10\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff"+
			"\1\1\2\uffff\1\1\7\uffff\1\1\5\uffff\1\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\7\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\3\1\6\uffff\3\1\7\uffff"+
			"\1\u0146\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\4\uffff\1\1"+
			"\4\uffff\5\1\1\uffff\3\1\3\uffff\1\1\17\uffff\3\1\3\uffff\1\1\6\uffff"+
			"\1\1\5\uffff\1\1\3\uffff\1\1\2\uffff\3\1",
			"\1\u014f\1\1\1\u014c\2\1\4\uffff\1\u014f\1\1\3\uffff\1\u014f\2\uffff"+
			"\1\1\1\uffff\1\1\3\uffff\2\u014f\1\1\1\uffff\1\u014f\3\uffff\2\1\1\uffff"+
			"\2\1\10\uffff\1\1\1\uffff\1\u014f\1\uffff\1\u014f\2\uffff\1\1\1\uffff"+
			"\1\1\1\u014f\4\uffff\2\1\1\uffff\1\1\5\uffff\1\u014f\1\1\1\u014f\1\1"+
			"\2\uffff\2\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\u014f\2\1\1\u014f\2\1"+
			"\1\u014f\1\uffff\1\1\1\uffff\2\1\1\u0149\2\uffff\1\u014f\1\1\1\u014f"+
			"\3\uffff\1\1\2\uffff\1\1\1\u014a\1\1\1\uffff\1\1\5\uffff\1\1\4\uffff"+
			"\2\u014f\1\1\1\u014d\1\u014f\1\uffff\1\u014f\10\uffff\5\1\1\u014f\1\uffff"+
			"\2\u014f\1\u014b\3\uffff\1\1\1\uffff\1\1\15\uffff\1\1\1\u0147\1\1\3\uffff"+
			"\1\1\6\uffff\1\u014f\5\uffff\1\u014e\3\uffff\1\u014f\2\uffff\1\1\1\u0148"+
			"\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u0139\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0138\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u0139\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0138\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\uffff",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u0150\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0111\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\u00bc\14\uffff\1\1\1\uffff"+
			"\1\u0151\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0111\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\1\2\uffff\1\1\15\uffff\1\1\1\174\5\uffff\1\1\6\uffff\1\1\1\uffff"+
			"\2\1\10\uffff\1\1\21\uffff\1\1\24\uffff\1\1\2\uffff\2\1\12\uffff\1\1"+
			"\7\uffff\1\1\13\uffff\1\1\15\uffff\1\1\2\uffff\1\115\1\uffff\4\1\62\uffff"+
			"\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u0153\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0152\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\12\u0155\1\uffff\1\u0155\1\uffff\1\u0155\1\uffff\5\u0155\3\uffff\4"+
			"\u0155\2\uffff\7\u0155\2\uffff\4\u0155\2\uffff\2\u0155\1\uffff\17\u0155"+
			"\1\uffff\1\u0155\1\uffff\1\u0155\2\uffff\13\u0155\4\uffff\2\u0155\2\uffff"+
			"\1\u0155\1\uffff\6\u0155\1\uffff\14\u0155\1\uffff\1\u0155\1\uffff\7\u0155"+
			"\1\uffff\1\u0155\3\uffff\13\u0155\1\uffff\2\u0155\1\uffff\3\u0155\2\uffff"+
			"\13\u0155\16\uffff\1\u0154\12\uffff\4\u0155\1\uffff\10\u0155\1\uffff"+
			"\1\u0155",
			"\3\1\1\uffff\1\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\174\2\uffff\3"+
			"\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\u0156\1\1\7\uffff\2"+
			"\1\1\uffff\1\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\u0152\1\1\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\4\uffff"+
			"\2\1\2\uffff\3\1\6\uffff\5\1\2\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\uffff"+
			"\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\115\1\uffff\5\1\1\uffff\3\1\24"+
			"\uffff\1\1\13\uffff\1\1\5\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u0157\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0152\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u0158\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0152\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u0159\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0152\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u015a\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0152\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\7\uffff\1\1\52\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u015b\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0152\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u015c\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0152\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\uffff",
			"\1\uffff",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\2\1\3\uffff\3\1\1\uffff"+
			"\1\1\4\uffff\1\1\1\uffff\2\1\10\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff"+
			"\1\1\2\uffff\1\1\7\uffff\1\1\5\uffff\1\1\1\uffff\2\1\5\uffff\1\1\4\uffff"+
			"\7\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\3\1\6\uffff\3\1\7\uffff"+
			"\1\u015d\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\4\uffff\1\1"+
			"\4\uffff\5\1\1\uffff\3\1\3\uffff\1\1\17\uffff\3\1\3\uffff\1\1\6\uffff"+
			"\1\1\5\uffff\1\1\3\uffff\1\1\2\uffff\3\1",
			"\1\uffff",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u015e\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0152\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\1\2\uffff\1\1\5\uffff\1\1\7\uffff\1\1\1\174\14\uffff\1\1\1\uffff"+
			"\1\u015f\1\1\10\uffff\1\1\17\uffff\1\1\1\uffff\1\1\6\uffff\1\u0152\5"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\2\1\1\uffff\2\1\5\uffff\1"+
			"\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\11\uffff\1\1\15\uffff\1\1\2\uffff"+
			"\1\115\1\uffff\4\1\62\uffff\1\1",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\1\2\uffff\1\1\15\uffff\1\1\1\174\5\uffff\1\1\6\uffff\1\1\1\uffff"+
			"\2\1\10\uffff\1\1\21\uffff\1\1\24\uffff\1\1\2\uffff\2\1\12\uffff\1\1"+
			"\7\uffff\1\1\13\uffff\1\1\15\uffff\1\1\2\uffff\1\115\1\uffff\4\1\62\uffff"+
			"\1\1",
			"\1\uffff",
			"\1\uffff"
	};

	static final short[] DFA295_eot = DFA.unpackEncodedString(DFA295_eotS);
	static final short[] DFA295_eof = DFA.unpackEncodedString(DFA295_eofS);
	static final char[] DFA295_min = DFA.unpackEncodedStringToUnsignedChars(DFA295_minS);
	static final char[] DFA295_max = DFA.unpackEncodedStringToUnsignedChars(DFA295_maxS);
	static final short[] DFA295_accept = DFA.unpackEncodedString(DFA295_acceptS);
	static final short[] DFA295_special = DFA.unpackEncodedString(DFA295_specialS);
	static final short[][] DFA295_transition;

	static {
		int numStates = DFA295_transitionS.length;
		DFA295_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA295_transition[i] = DFA.unpackEncodedString(DFA295_transitionS[i]);
		}
	}

	protected class DFA295 extends DFA {

		public DFA295(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 295;
			this.eot = DFA295_eot;
			this.eof = DFA295_eof;
			this.min = DFA295_min;
			this.max = DFA295_max;
			this.accept = DFA295_accept;
			this.special = DFA295_special;
			this.transition = DFA295_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 722:38: ( '.' ident )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA295_275 = input.LA(1);
						 
						int index295_275 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_275);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA295_272 = input.LA(1);
						 
						int index295_272 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_272);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA295_274 = input.LA(1);
						 
						int index295_274 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_274);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA295_292 = input.LA(1);
						 
						int index295_292 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_292);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA295_276 = input.LA(1);
						 
						int index295_276 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_276);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA295_291 = input.LA(1);
						 
						int index295_291 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_291);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA295_277 = input.LA(1);
						 
						int index295_277 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_277);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA295_278 = input.LA(1);
						 
						int index295_278 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_278);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA295_279 = input.LA(1);
						 
						int index295_279 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_279);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA295_282 = input.LA(1);
						 
						int index295_282 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_282);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA295_6 = input.LA(1);
						 
						int index295_6 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 20;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_6);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA295_18 = input.LA(1);
						 
						int index295_18 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 13;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_18);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA295_45 = input.LA(1);
						 
						int index295_45 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 13;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_45);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA295_47 = input.LA(1);
						 
						int index295_47 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 13;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_47);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA295_54 = input.LA(1);
						 
						int index295_54 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 13;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_54);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA295_33 = input.LA(1);
						 
						int index295_33 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 13;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_33);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA295_32 = input.LA(1);
						 
						int index295_32 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 13;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_32);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA295_27 = input.LA(1);
						 
						int index295_27 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 13;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_27);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA295_113 = input.LA(1);
						 
						int index295_113 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_113);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA295_34 = input.LA(1);
						 
						int index295_34 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 13;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_34);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA295_82 = input.LA(1);
						 
						int index295_82 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_82);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA295_114 = input.LA(1);
						 
						int index295_114 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_114);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA295_84 = input.LA(1);
						 
						int index295_84 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_84);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA295_56 = input.LA(1);
						 
						int index295_56 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 13;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_56);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA295_12 = input.LA(1);
						 
						int index295_12 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 20;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_12);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA295_19 = input.LA(1);
						 
						int index295_19 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 13;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_19);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA295_46 = input.LA(1);
						 
						int index295_46 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 13;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_46);
						if ( s>=0 ) return s;
						break;

					case 27 : 
						int LA295_48 = input.LA(1);
						 
						int index295_48 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 13;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_48);
						if ( s>=0 ) return s;
						break;

					case 28 : 
						int LA295_76 = input.LA(1);
						 
						int index295_76 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 13;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_76);
						if ( s>=0 ) return s;
						break;

					case 29 : 
						int LA295_62 = input.LA(1);
						 
						int index295_62 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 13;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_62);
						if ( s>=0 ) return s;
						break;

					case 30 : 
						int LA295_60 = input.LA(1);
						 
						int index295_60 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 13;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_60);
						if ( s>=0 ) return s;
						break;

					case 31 : 
						int LA295_59 = input.LA(1);
						 
						int index295_59 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 13;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_59);
						if ( s>=0 ) return s;
						break;

					case 32 : 
						int LA295_137 = input.LA(1);
						 
						int index295_137 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_137);
						if ( s>=0 ) return s;
						break;

					case 33 : 
						int LA295_61 = input.LA(1);
						 
						int index295_61 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 13;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_61);
						if ( s>=0 ) return s;
						break;

					case 34 : 
						int LA295_86 = input.LA(1);
						 
						int index295_86 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_86);
						if ( s>=0 ) return s;
						break;

					case 35 : 
						int LA295_88 = input.LA(1);
						 
						int index295_88 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_88);
						if ( s>=0 ) return s;
						break;

					case 36 : 
						int LA295_138 = input.LA(1);
						 
						int index295_138 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_138);
						if ( s>=0 ) return s;
						break;

					case 37 : 
						int LA295_116 = input.LA(1);
						 
						int index295_116 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_116);
						if ( s>=0 ) return s;
						break;

					case 38 : 
						int LA295_118 = input.LA(1);
						 
						int index295_118 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_118);
						if ( s>=0 ) return s;
						break;

					case 39 : 
						int LA295_322 = input.LA(1);
						 
						int index295_322 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_322);
						if ( s>=0 ) return s;
						break;

					case 40 : 
						int LA295_316 = input.LA(1);
						 
						int index295_316 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_316);
						if ( s>=0 ) return s;
						break;

					case 41 : 
						int LA295_319 = input.LA(1);
						 
						int index295_319 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_319);
						if ( s>=0 ) return s;
						break;

					case 42 : 
						int LA295_320 = input.LA(1);
						 
						int index295_320 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_320);
						if ( s>=0 ) return s;
						break;

					case 43 : 
						int LA295_321 = input.LA(1);
						 
						int index295_321 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_321);
						if ( s>=0 ) return s;
						break;

					case 44 : 
						int LA295_323 = input.LA(1);
						 
						int index295_323 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_323);
						if ( s>=0 ) return s;
						break;

					case 45 : 
						int LA295_336 = input.LA(1);
						 
						int index295_336 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_336);
						if ( s>=0 ) return s;
						break;

					case 46 : 
						int LA295_337 = input.LA(1);
						 
						int index295_337 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_337);
						if ( s>=0 ) return s;
						break;

					case 47 : 
						int LA295_324 = input.LA(1);
						 
						int index295_324 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_324);
						if ( s>=0 ) return s;
						break;

					case 48 : 
						int LA295_325 = input.LA(1);
						 
						int index295_325 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_325);
						if ( s>=0 ) return s;
						break;

					case 49 : 
						int LA295_52 = input.LA(1);
						 
						int index295_52 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 13;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_52);
						if ( s>=0 ) return s;
						break;

					case 50 : 
						int LA295_136 = input.LA(1);
						 
						int index295_136 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_136);
						if ( s>=0 ) return s;
						break;

					case 51 : 
						int LA295_342 = input.LA(1);
						 
						int index295_342 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_342);
						if ( s>=0 ) return s;
						break;

					case 52 : 
						int LA295_339 = input.LA(1);
						 
						int index295_339 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_339);
						if ( s>=0 ) return s;
						break;

					case 53 : 
						int LA295_343 = input.LA(1);
						 
						int index295_343 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_343);
						if ( s>=0 ) return s;
						break;

					case 54 : 
						int LA295_344 = input.LA(1);
						 
						int index295_344 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_344);
						if ( s>=0 ) return s;
						break;

					case 55 : 
						int LA295_345 = input.LA(1);
						 
						int index295_345 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_345);
						if ( s>=0 ) return s;
						break;

					case 56 : 
						int LA295_346 = input.LA(1);
						 
						int index295_346 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_346);
						if ( s>=0 ) return s;
						break;

					case 57 : 
						int LA295_347 = input.LA(1);
						 
						int index295_347 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_347);
						if ( s>=0 ) return s;
						break;

					case 58 : 
						int LA295_348 = input.LA(1);
						 
						int index295_348 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_348);
						if ( s>=0 ) return s;
						break;

					case 59 : 
						int LA295_350 = input.LA(1);
						 
						int index295_350 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_350);
						if ( s>=0 ) return s;
						break;

					case 60 : 
						int LA295_351 = input.LA(1);
						 
						int index295_351 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_351);
						if ( s>=0 ) return s;
						break;

					case 61 : 
						int LA295_129 = input.LA(1);
						 
						int index295_129 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_129);
						if ( s>=0 ) return s;
						break;

					case 62 : 
						int LA295_126 = input.LA(1);
						 
						int index295_126 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_126);
						if ( s>=0 ) return s;
						break;

					case 63 : 
						int LA295_130 = input.LA(1);
						 
						int index295_130 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_130);
						if ( s>=0 ) return s;
						break;

					case 64 : 
						int LA295_131 = input.LA(1);
						 
						int index295_131 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_131);
						if ( s>=0 ) return s;
						break;

					case 65 : 
						int LA295_132 = input.LA(1);
						 
						int index295_132 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_132);
						if ( s>=0 ) return s;
						break;

					case 66 : 
						int LA295_133 = input.LA(1);
						 
						int index295_133 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_133);
						if ( s>=0 ) return s;
						break;

					case 67 : 
						int LA295_134 = input.LA(1);
						 
						int index295_134 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_134);
						if ( s>=0 ) return s;
						break;

					case 68 : 
						int LA295_177 = input.LA(1);
						 
						int index295_177 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_177);
						if ( s>=0 ) return s;
						break;

					case 69 : 
						int LA295_135 = input.LA(1);
						 
						int index295_135 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_135);
						if ( s>=0 ) return s;
						break;

					case 70 : 
						int LA295_176 = input.LA(1);
						 
						int index295_176 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_176);
						if ( s>=0 ) return s;
						break;

					case 71 : 
						int LA295_66 = input.LA(1);
						 
						int index295_66 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 13;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_66);
						if ( s>=0 ) return s;
						break;

					case 72 : 
						int LA295_65 = input.LA(1);
						 
						int index295_65 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 13;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_65);
						if ( s>=0 ) return s;
						break;

					case 73 : 
						int LA295_67 = input.LA(1);
						 
						int index295_67 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 13;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_67);
						if ( s>=0 ) return s;
						break;

					case 74 : 
						int LA295_68 = input.LA(1);
						 
						int index295_68 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 13;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_68);
						if ( s>=0 ) return s;
						break;

					case 75 : 
						int LA295_100 = input.LA(1);
						 
						int index295_100 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_100);
						if ( s>=0 ) return s;
						break;

					case 76 : 
						int LA295_69 = input.LA(1);
						 
						int index295_69 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 13;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_69);
						if ( s>=0 ) return s;
						break;

					case 77 : 
						int LA295_99 = input.LA(1);
						 
						int index295_99 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 77;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_99);
						if ( s>=0 ) return s;
						break;

					case 78 : 
						int LA295_70 = input.LA(1);
						 
						int index295_70 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 13;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_70);
						if ( s>=0 ) return s;
						break;

					case 79 : 
						int LA295_74 = input.LA(1);
						 
						int index295_74 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 13;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_74);
						if ( s>=0 ) return s;
						break;

					case 80 : 
						int LA295_71 = input.LA(1);
						 
						int index295_71 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred614_Delphi()) ) {s = 13;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index295_71);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 295, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	public static final BitSet FOLLOW_program_in_file84 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_library_in_file88 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unit_in_file92 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_packageE_in_file96 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_programHead_in_program159 = new BitSet(new long[]{0x0080010818880800L,0x00100000000C0002L,0x1400000022000200L});
	public static final BitSet FOLLOW_usesFileClause_in_program164 = new BitSet(new long[]{0x0080010818880800L,0x00100000000C0002L,0x1000000022000200L});
	public static final BitSet FOLLOW_block_in_program168 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_program170 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PROGRAM_in_programHead224 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_namespaceName_in_programHead226 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_programParmSeq_in_programHead229 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_programHead233 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_programParmSeq284 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8042DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_programParmSeq287 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_COMMA_in_programParmSeq290 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_programParmSeq292 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_programParmSeq299 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_libraryHead_in_library357 = new BitSet(new long[]{0x0080010818880800L,0x00100000000C0002L,0x1400000022000200L});
	public static final BitSet FOLLOW_usesFileClause_in_library360 = new BitSet(new long[]{0x0080010818880800L,0x00100000000C0002L,0x1000000022000200L});
	public static final BitSet FOLLOW_block_in_library364 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_library366 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LIBRARY_in_libraryHead420 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_namespaceName_in_libraryHead422 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_hintingDirective_in_libraryHead425 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_libraryHead429 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_packageHead_in_packageE494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_requiresClause_in_packageE496 = new BitSet(new long[]{0x0002000020000000L});
	public static final BitSet FOLLOW_containsClause_in_packageE499 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_packageE503 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_packageE505 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PACKAGE_in_packageHead559 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_namespaceName_in_packageHead561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_packageHead563 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unitHead_in_unit624 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_unitInterface_in_unit626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_unitImplementation_in_unit628 = new BitSet(new long[]{0x0002000000080000L,0x0000000000004000L});
	public static final BitSet FOLLOW_unitBlock_in_unit630 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_unit632 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UNIT_in_unitHead689 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_namespaceName_in_unitHead691 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_hintingDirective_in_unitHead694 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_unitHead698 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTERFACE_in_unitInterface763 = new BitSet(new long[]{0x0080000818800002L,0x0010000000080002L,0x1400000022000200L});
	public static final BitSet FOLLOW_usesClause_in_unitInterface766 = new BitSet(new long[]{0x0080000818800002L,0x0010000000080002L,0x1000000022000200L});
	public static final BitSet FOLLOW_interfaceDecl_in_unitInterface771 = new BitSet(new long[]{0x0080000818800002L,0x0010000000080002L,0x1000000022000200L});
	public static final BitSet FOLLOW_IMPLEMENTATION_in_unitImplementation836 = new BitSet(new long[]{0x0080000818800002L,0x00100000000C0002L,0x1400000022000200L});
	public static final BitSet FOLLOW_usesClause_in_unitImplementation839 = new BitSet(new long[]{0x0080000818800002L,0x00100000000C0002L,0x1000000022000200L});
	public static final BitSet FOLLOW_declSection_in_unitImplementation844 = new BitSet(new long[]{0x0080000818800002L,0x00100000000C0002L,0x1000000022000200L});
	public static final BitSet FOLLOW_unitInitialization_in_unitBlock918 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_unitBlock920 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_compoundStatement_in_unitBlock953 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_END_in_unitBlock986 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INITIALIZATION_in_unitInitialization1033 = new BitSet(new long[]{0xB05001026039C940L,0x880602904F083508L,0x4100380010E8206DL,0x0000000000000047L});
	public static final BitSet FOLLOW_statementList_in_unitInitialization1035 = new BitSet(new long[]{0x2000000000000002L});
	public static final BitSet FOLLOW_unitFinalization_in_unitInitialization1038 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FINALIZATION_in_unitFinalization1089 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x4100380010E8206DL,0x0000000000000047L});
	public static final BitSet FOLLOW_statementList_in_unitFinalization1091 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONTAINS_in_containsClause1145 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_namespaceFileNameList_in_containsClause1147 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REQUIRES_in_requiresClause1198 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_namespaceNameList_in_requiresClause1200 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_USES_in_usesClause1255 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_namespaceNameList_in_usesClause1257 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_USES_in_usesFileClause1316 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_namespaceFileNameList_in_usesFileClause1318 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespaceFileName_in_namespaceFileNameList1370 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_COMMA_in_namespaceFileNameList1373 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_namespaceFileName_in_namespaceFileNameList1375 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_namespaceFileNameList1379 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespaceName_in_namespaceFileName1436 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000800L});
	public static final BitSet FOLLOW_IN_in_namespaceFileName1439 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_QuotedString_in_namespaceFileName1441 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespaceName_in_namespaceNameList1502 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_COMMA_in_namespaceNameList1505 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_namespaceName_in_namespaceNameList1507 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_namespaceNameList1511 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_declSection_in_block1584 = new BitSet(new long[]{0x0080000818880802L,0x00100000000C0002L,0x1000000022000200L});
	public static final BitSet FOLLOW_blockBody_in_block1589 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_compoundStatement_in_blockBody1647 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_assemblerStatement_in_blockBody1680 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_labelDeclSection_in_declSection1734 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constSection_in_declSection1767 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeSection_in_declSection1800 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_varSection_in_declSection1833 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exportedProcHeading_in_declSection1866 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_methodDecl_in_declSection1899 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procDecl_in_declSection1932 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exportsSection_in_declSection1965 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constSection_in_interfaceDecl2017 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeSection_in_interfaceDecl2050 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_varSection_in_interfaceDecl2083 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exportedProcHeading_in_interfaceDecl2116 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exportsSection_in_interfaceDecl2149 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procDecl_in_interfaceDecl2182 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_methodDecl_in_interfaceDecl2215 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LABEL_in_labelDeclSection2264 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100380000E8002DL,0x0000000000000004L});
	public static final BitSet FOLLOW_label_in_labelDeclSection2266 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_COMMA_in_labelDeclSection2269 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100380000E8002DL,0x0000000000000004L});
	public static final BitSet FOLLOW_label_in_labelDeclSection2271 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_labelDeclSection2275 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constKey_in_constSection2328 = new BitSet(new long[]{0x1050000260108142L,0x8002029049081400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_constDeclaration_in_constSection2331 = new BitSet(new long[]{0x1050000260108142L,0x8002029049081400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_customAttribute_in_constDeclaration2486 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_constDeclaration2490 = new BitSet(new long[]{0x0004000001000000L});
	public static final BitSet FOLLOW_COLON_in_constDeclaration2493 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_typeDecl_in_constDeclaration2495 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_EQUAL_in_constDeclaration2499 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_constExpression_in_constDeclaration2501 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_hintingDirective_in_constDeclaration2504 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_constDeclaration2508 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TYPE_in_typeSection2575 = new BitSet(new long[]{0x1050000260108140L,0x8002029049081400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_typeDeclaration_in_typeSection2577 = new BitSet(new long[]{0x1050000260108142L,0x8002029049081400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_typeDeclaration_in_typeSection2580 = new BitSet(new long[]{0x1050000260108142L,0x8002029049081400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_customAttribute_in_typeDeclaration2646 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_genericTypeIdent_in_typeDeclaration2650 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_EQUAL_in_typeDeclaration2652 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_typeDecl_in_typeDeclaration2654 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_hintingDirective_in_typeDeclaration2657 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_typeDeclaration2661 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_varKey_in_varSection2738 = new BitSet(new long[]{0x1050000260108140L,0x8002029049081400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_varDeclaration_in_varSection2740 = new BitSet(new long[]{0x1050000260108142L,0x8002029049081400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_varDeclaration_in_varSection2743 = new BitSet(new long[]{0x1050000260108142L,0x8002029049081400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_customAttribute_in_varDeclaration2903 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_identListFlat_in_varDeclaration2907 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_varDeclaration2909 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_typeDecl_in_varDeclaration2911 = new BitSet(new long[]{0x0024000400000010L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_varValueSpec_in_varDeclaration2914 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_hintingDirective_in_varDeclaration2919 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_varDeclaration2923 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ABSOLUTE_in_varValueSpec2995 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_varValueSpec2997 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ABSOLUTE_in_varValueSpec3030 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_constExpression_in_varValueSpec3032 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EQUAL_in_varValueSpec3065 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_constExpression_in_varValueSpec3067 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXPORTS_in_exportsSection3118 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_exportsSection3120 = new BitSet(new long[]{0x0000000002000000L,0x0000000042001000L,0x0000000000002100L});
	public static final BitSet FOLLOW_exportItem_in_exportsSection3122 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_COMMA_in_exportsSection3125 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_exportsSection3127 = new BitSet(new long[]{0x0000000002000000L,0x0000000042001000L,0x0000000000002100L});
	public static final BitSet FOLLOW_exportItem_in_exportsSection3129 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_exportsSection3133 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_exportItem3189 = new BitSet(new long[]{0x1050000268108140L,0x8002029049081400L,0x5100100000E8042DL,0x0000000000000044L});
	public static final BitSet FOLLOW_formalParameterList_in_exportItem3192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_exportItem3196 = new BitSet(new long[]{0x0000000000000002L,0x0000000040001000L,0x0000000000000100L});
	public static final BitSet FOLLOW_INDEX_in_exportItem3201 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_exportItem3203 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_NAME_in_exportItem3208 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_exportItem3210 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_RESIDENT_in_exportItem3215 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_strucType_in_typeDecl3277 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pointerType_in_typeDecl3310 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_stringType_in_typeDecl3343 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedureType_in_typeDecl3376 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_variantType_in_typeDecl3409 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TYPE_in_typeDecl3443 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_typeId_in_typeDecl3447 = new BitSet(new long[]{0x0000010000000002L,0x0000000006000000L});
	public static final BitSet FOLLOW_genericPostfix_in_typeDecl3450 = new BitSet(new long[]{0x0000010000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_DOT_in_typeDecl3455 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_typeDecl_in_typeDecl3457 = new BitSet(new long[]{0x0000010000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_paranthesePostfix_in_typeDecl3462 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleType_in_typeDecl3497 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PACKED_in_strucType3583 = new BitSet(new long[]{0x0800002000800200L,0x0000001000010000L,0x0000000000004002L});
	public static final BitSet FOLLOW_strucTypePart_in_strucType3587 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_arrayType_in_strucTypePart3643 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_setType_in_strucTypePart3676 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fileType_in_strucTypePart3709 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classDecl_in_strucTypePart3742 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ARRAY_in_arrayType3800 = new BitSet(new long[]{0x0000000000000000L,0x0000002000080000L});
	public static final BitSet FOLLOW_LBRACK_in_arrayType3803 = new BitSet(new long[]{0x12500102E2118140L,0x941702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_arrayIndex_in_arrayType3806 = new BitSet(new long[]{0x0000000002000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_COMMA_in_arrayType3811 = new BitSet(new long[]{0x12500102E2118140L,0x941702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_arrayIndex_in_arrayType3814 = new BitSet(new long[]{0x0000000002000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_arrayType3820 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_OF_in_arrayType3824 = new BitSet(new long[]{0x1A500122E8918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_arraySubType_in_arrayType3826 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeId_in_arrayIndex3952 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_arrayIndex3985 = new BitSet(new long[]{0x0000020000000000L});
	public static final BitSet FOLLOW_DOTDOT_in_arrayIndex3987 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_arrayIndex3989 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONST_in_arraySubType4043 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeDecl_in_arraySubType4076 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SET_in_setType4134 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_OF_in_setType4136 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_typeDecl_in_setType4138 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FILE_in_fileType4212 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
	public static final BitSet FOLLOW_OF_in_fileType4215 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_typeDecl_in_fileType4217 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_POINTER2_in_pointerType4273 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_typeDecl_in_pointerType4275 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_POINTER_in_pointerType4308 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRING_in_stringType4363 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
	public static final BitSet FOLLOW_LBRACK_in_stringType4366 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_stringType4368 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_stringType4370 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TYPE_in_stringType4410 = new BitSet(new long[]{0x0000000000000100L});
	public static final BitSet FOLLOW_ANSISTRING_in_stringType4414 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_codePageNumber_in_stringType4417 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_codePageNumber4470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000280000000000L});
	public static final BitSet FOLLOW_intNum_in_codePageNumber4472 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_codePageNumber4474 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_methodType_in_procedureType4526 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleProcedureType_in_procedureType4559 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedureReference_in_procedureType4592 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedureTypeHeading_in_methodType4647 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_OF_in_methodType4649 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_OBJECT_in_methodType4651 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedureTypeHeading_in_simpleProcedureType4697 = new BitSet(new long[]{0x0040000000400002L,0x0000400000000000L,0x0000000000102808L});
	public static final BitSet FOLLOW_SEMI_in_simpleProcedureType4702 = new BitSet(new long[]{0x0040000000400000L,0x0000400000000000L,0x0000000000100808L});
	public static final BitSet FOLLOW_callConventionNoSemi_in_simpleProcedureType4706 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REFERENCE_in_procedureReference4755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_TO_in_procedureReference4757 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000002L});
	public static final BitSet FOLLOW_procedureTypeHeading_in_procedureReference4759 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_procedureTypeHeading4804 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_procedureTypeHeading4807 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_procedureTypeHeading4811 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_customAttribute_in_procedureTypeHeading4814 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_typeDecl_in_procedureTypeHeading4818 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PROCEDURE_in_procedureTypeHeading4866 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_procedureTypeHeading4869 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARIANT_in_variantType4925 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_simpleType4981 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subRangeType_in_simpleType5014 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_enumType_in_simpleType5047 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constExpression_in_subRangeType5100 = new BitSet(new long[]{0x0000020000000002L});
	public static final BitSet FOLLOW_DOTDOT_in_subRangeType5103 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_constExpression_in_subRangeType5105 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_enumType5164 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_enumType5166 = new BitSet(new long[]{0x0004000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_EQUAL_in_enumType5169 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_enumType5171 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_COMMA_in_enumType5176 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_enumType5178 = new BitSet(new long[]{0x0004000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_EQUAL_in_enumType5181 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_enumType5183 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_enumType5190 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespacedQualifiedIdent_in_typeId5249 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_qualifiedIdent_in_genericTypeIdent5301 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
	public static final BitSet FOLLOW_genericDefinition_in_genericTypeIdent5304 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LT_in_genericDefinition5361 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_innerGeneric_in_genericDefinition5363 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_genericDefinition5366 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_innerGeneric_in_genericDefinition5368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000002000L});
	public static final BitSet FOLLOW_GT_in_genericDefinition5372 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_genericTypeIdent_in_innerGeneric5425 = new BitSet(new long[]{0x0000000003000002L});
	public static final BitSet FOLLOW_COMMA_in_innerGeneric5428 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_genericTypeIdent_in_innerGeneric5430 = new BitSet(new long[]{0x0000000003000002L});
	public static final BitSet FOLLOW_COLON_in_innerGeneric5435 = new BitSet(new long[]{0x1050000270908140L,0x8002029049001400L,0x4100100000E8002FL,0x0000000000000044L});
	public static final BitSet FOLLOW_genericConstraint_in_innerGeneric5437 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_COMMA_in_innerGeneric5440 = new BitSet(new long[]{0x1050000270908140L,0x8002029049001400L,0x4100100000E8002FL,0x0000000000000044L});
	public static final BitSet FOLLOW_genericConstraint_in_innerGeneric5442 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_genericTypeIdent_in_genericConstraint5494 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RECORD_in_genericConstraint5527 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_genericConstraint5560 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONSTRUCTOR_in_genericConstraint5593 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LT_in_genericPostfix5644 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_typeDecl_in_genericPostfix5646 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_COMMA_in_genericPostfix5649 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_typeDecl_in_genericPostfix5651 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_GT_in_genericPostfix5655 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_paranthesePostfix5703 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002280000000000L});
	public static final BitSet FOLLOW_intRealNum_in_paranthesePostfix5705 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_paranthesePostfix5707 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classTypeTypeDecl_in_classDecl5767 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classTypeDecl_in_classDecl5800 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classHelperDecl_in_classDecl5841 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_interfaceTypeDecl_in_classDecl5882 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_objectDecl_in_classDecl5923 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_recordDecl_in_classDecl5964 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_recordHelperDecl_in_classDecl6005 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classTypeTypeDecl6061 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_OF_in_classTypeTypeDecl6063 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_typeId_in_classTypeTypeDecl6065 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classTypeDecl6125 = new BitSet(new long[]{0x1052000A78928160L,0x83DA02904B081402L,0x5100100022E8122DL,0x0000000000000044L});
	public static final BitSet FOLLOW_classState_in_classTypeDecl6128 = new BitSet(new long[]{0x1052000A78928140L,0x83DA02904B081402L,0x5100100022E8022DL,0x0000000000000044L});
	public static final BitSet FOLLOW_classParent_in_classTypeDecl6133 = new BitSet(new long[]{0x1052000A78928140L,0x83DA029049081402L,0x5100100022E8022DL,0x0000000000000044L});
	public static final BitSet FOLLOW_classItem_in_classTypeDecl6138 = new BitSet(new long[]{0x1052000A78928140L,0x83DA029049081402L,0x5100100022E8022DL,0x0000000000000044L});
	public static final BitSet FOLLOW_END_in_classTypeDecl6142 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classTypeDecl6193 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_classParent_in_classTypeDecl6196 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_classParent6353 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_genericTypeIdent_in_classParent6355 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_COMMA_in_classParent6358 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_genericTypeIdent_in_classParent6360 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_classParent6364 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_classItem6432 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_classItem6465 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classField_in_classItem6498 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classProperty_in_classItem6531 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constSection_in_classItem6564 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeSection_in_classItem6597 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classItem6631 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000000002000000L});
	public static final BitSet FOLLOW_varSection_in_classItem6635 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classHelperDecl6685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_HELPER_in_classHelperDecl6687 = new BitSet(new long[]{0x8000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_classParent_in_classHelperDecl6690 = new BitSet(new long[]{0x8000000000000000L});
	public static final BitSet FOLLOW_FOR_in_classHelperDecl6694 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_typeId_in_classHelperDecl6696 = new BitSet(new long[]{0x0002000818820000L,0x03D8008000080002L,0x1000000022400200L});
	public static final BitSet FOLLOW_classHelperItem_in_classHelperDecl6699 = new BitSet(new long[]{0x0002000818820000L,0x03D8008000080002L,0x1000000022400200L});
	public static final BitSet FOLLOW_END_in_classHelperDecl6703 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_classHelperItem6768 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_classHelperItem6801 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classProperty_in_classHelperItem6834 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constSection_in_classHelperItem6867 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeSection_in_classHelperItem6900 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classHelperItem6934 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000000002000000L});
	public static final BitSet FOLLOW_varSection_in_classHelperItem6938 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_interfaceKey_in_interfaceTypeDecl6986 = new BitSet(new long[]{0x0002000810800000L,0x0050008002080002L});
	public static final BitSet FOLLOW_classParent_in_interfaceTypeDecl6989 = new BitSet(new long[]{0x0002000810800000L,0x0050008000080002L});
	public static final BitSet FOLLOW_interfaceGuid_in_interfaceTypeDecl6994 = new BitSet(new long[]{0x0002000810800000L,0x0050008000080002L});
	public static final BitSet FOLLOW_interfaceItem_in_interfaceTypeDecl6999 = new BitSet(new long[]{0x0002000810800000L,0x0050008000080002L});
	public static final BitSet FOLLOW_END_in_interfaceTypeDecl7003 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_interfaceKey_in_interfaceTypeDecl7094 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_classParent_in_interfaceTypeDecl7097 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACK_in_interfaceGuid7280 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_QuotedString_in_interfaceGuid7282 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_interfaceGuid7284 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_interfaceItem7340 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_interfaceItem7374 = new BitSet(new long[]{0x0000000000800000L,0x0040000000080000L});
	public static final BitSet FOLLOW_classProperty_in_interfaceItem7378 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OBJECT_in_objectDecl7433 = new BitSet(new long[]{0x1052000A70928140L,0x839A02904B081402L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_classParent_in_objectDecl7436 = new BitSet(new long[]{0x1052000A70928140L,0x839A029049081402L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_objectItem_in_objectDecl7441 = new BitSet(new long[]{0x1052000A70928140L,0x839A029049081402L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_END_in_objectDecl7445 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_objectItem7514 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_objectItem7547 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classField_in_objectItem7580 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleRecord_in_recordDecl7635 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_variantRecord_in_recordDecl7668 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RECORD_in_simpleRecord7721 = new BitSet(new long[]{0x1052000A78928140L,0x83DA029049081402L,0x5100100022E8022DL,0x0000000000000044L});
	public static final BitSet FOLLOW_recordField_in_simpleRecord7724 = new BitSet(new long[]{0x1052000A78928140L,0x83DA029049081402L,0x5100100022E8022DL,0x0000000000000044L});
	public static final BitSet FOLLOW_recordItem_in_simpleRecord7729 = new BitSet(new long[]{0x1052000A78928140L,0x83DA029049081402L,0x5100100022E8022DL,0x0000000000000044L});
	public static final BitSet FOLLOW_END_in_simpleRecord7733 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RECORD_in_variantRecord7799 = new BitSet(new long[]{0x1050000260308140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_recordField_in_variantRecord7802 = new BitSet(new long[]{0x1050000260308140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_recordVariantSection_in_variantRecord7806 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_variantRecord7808 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_recordItem7874 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_recordItem7912 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classProperty_in_recordItem7945 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constSection_in_recordItem7978 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeSection_in_recordItem8011 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_recordField_in_recordItem8044 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_recordItem8078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000000002000000L});
	public static final BitSet FOLLOW_varSection_in_recordItem8082 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identList_in_recordField8136 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_recordField8138 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_typeDecl_in_recordField8140 = new BitSet(new long[]{0x0020000400000002L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_hintingDirective_in_recordField8143 = new BitSet(new long[]{0x0020000400000002L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_recordField8148 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identList_in_recordVariantField8238 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_recordVariantField8240 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_typeDecl_in_recordVariantField8242 = new BitSet(new long[]{0x0020000400000002L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_hintingDirective_in_recordVariantField8245 = new BitSet(new long[]{0x0020000400000002L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_recordVariantField8250 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CASE_in_recordVariantSection8337 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_ident_in_recordVariantSection8340 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_recordVariantSection8342 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_typeDecl_in_recordVariantSection8346 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_OF_in_recordVariantSection8348 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8202DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_recordVariant_in_recordVariantSection8351 = new BitSet(new long[]{0x12500102E0118142L,0x841702955F083402L,0x4102380008E8202DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_SEMI_in_recordVariantSection8355 = new BitSet(new long[]{0x12500102E0118142L,0x841702955F083402L,0x4102380008E8202DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_recordVariant_in_recordVariantSection8359 = new BitSet(new long[]{0x12500102E0118142L,0x841702955F083402L,0x4102380008E8202DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_SEMI_in_recordVariantSection8363 = new BitSet(new long[]{0x12500102E0118142L,0x841702955F083402L,0x4102380008E8202DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_constExpression_in_recordVariant8417 = new BitSet(new long[]{0x0000000003000000L});
	public static final BitSet FOLLOW_COMMA_in_recordVariant8420 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_constExpression_in_recordVariant8422 = new BitSet(new long[]{0x0000000003000000L});
	public static final BitSet FOLLOW_COLON_in_recordVariant8426 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_LPAREN_in_recordVariant8428 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8042DL,0x0000000000000044L});
	public static final BitSet FOLLOW_recordVariantField_in_recordVariant8431 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8042DL,0x0000000000000044L});
	public static final BitSet FOLLOW_RPAREN_in_recordVariant8435 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RECORD_in_recordHelperDecl8487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_HELPER_in_recordHelperDecl8489 = new BitSet(new long[]{0x8000000000000000L});
	public static final BitSet FOLLOW_FOR_in_recordHelperDecl8491 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_typeId_in_recordHelperDecl8493 = new BitSet(new long[]{0x0002000810820000L,0x03D8008000080002L,0x0000000000400000L});
	public static final BitSet FOLLOW_recordHelperItem_in_recordHelperDecl8496 = new BitSet(new long[]{0x0002000810820000L,0x03D8008000080002L,0x0000000000400000L});
	public static final BitSet FOLLOW_END_in_recordHelperDecl8500 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_recordHelperItem8549 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_recordHelperItem8582 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classProperty_in_recordHelperItem8615 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_classMethod8670 = new BitSet(new long[]{0x0000000810800000L,0x0010000000000000L});
	public static final BitSet FOLLOW_CLASS_in_classMethod8675 = new BitSet(new long[]{0x0000000810000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_methodKey_in_classMethod8679 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_classMethod8681 = new BitSet(new long[]{0x0000000000000000L,0x0000000006000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_genericDefinition_in_classMethod8684 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_formalParameterSection_in_classMethod8689 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classMethod8693 = new BitSet(new long[]{0x1460201400401022L,0x0000CC0089808000L,0x8000000000180818L});
	public static final BitSet FOLLOW_methodDirective_in_classMethod8696 = new BitSet(new long[]{0x1460201400401022L,0x0000CC0089808000L,0x8000000000180818L});
	public static final BitSet FOLLOW_customAttribute_in_classMethod8804 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classMethod8809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_classMethod8813 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_classMethod8815 = new BitSet(new long[]{0x0000000001000000L,0x0000000006000000L});
	public static final BitSet FOLLOW_genericDefinition_in_classMethod8818 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_classMethod8823 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_classMethod8827 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_customAttribute_in_classMethod8830 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_typeDecl_in_classMethod8834 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classMethod8836 = new BitSet(new long[]{0x1460201400401022L,0x0000CC0089808000L,0x8000000000180818L});
	public static final BitSet FOLLOW_methodDirective_in_classMethod8839 = new BitSet(new long[]{0x1460201400401022L,0x0000CC0089808000L,0x8000000000180818L});
	public static final BitSet FOLLOW_customAttribute_in_classMethod8956 = new BitSet(new long[]{0x0000000000800000L,0x0000008000000000L});
	public static final BitSet FOLLOW_CLASS_in_classMethod8961 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_OPERATOR_in_classMethod8965 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_classMethod8967 = new BitSet(new long[]{0x0000000001000000L,0x0000000006000000L});
	public static final BitSet FOLLOW_genericDefinition_in_classMethod8970 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_classMethod8975 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_classMethod8979 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_customAttribute_in_classMethod8982 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_typeDecl_in_classMethod8986 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classMethod8988 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_classMethod9095 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classMethod9100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_classMethod9104 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_classMethod9106 = new BitSet(new long[]{0x0000010000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_genericDefinition_in_classMethod9109 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_classMethod9113 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_classMethod9115 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_EQUAL_in_classMethod9117 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_classMethod9119 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classMethod9121 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_classMethod9155 = new BitSet(new long[]{0x0000000000800000L,0x0010000000000000L});
	public static final BitSet FOLLOW_CLASS_in_classMethod9160 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_PROCEDURE_in_classMethod9164 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_classMethod9166 = new BitSet(new long[]{0x0000010000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_genericDefinition_in_classMethod9169 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_classMethod9173 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_classMethod9175 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_EQUAL_in_classMethod9177 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_classMethod9179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classMethod9181 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_classField9237 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_identList_in_classField9241 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_classField9243 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_typeDecl_in_classField9245 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classField9247 = new BitSet(new long[]{0x0020000400000002L,0x0000800000800000L});
	public static final BitSet FOLLOW_hintingDirective_in_classField9250 = new BitSet(new long[]{0x0020000400000002L,0x0000800000800000L});
	public static final BitSet FOLLOW_customAttribute_in_classProperty9357 = new BitSet(new long[]{0x0000000000800000L,0x0040000000000000L});
	public static final BitSet FOLLOW_CLASS_in_classProperty9362 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_PROPERTY_in_classProperty9366 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_classProperty9368 = new BitSet(new long[]{0x0000001201000000L,0x8000000200081400L,0x0000000000202001L,0x000000000000000CL});
	public static final BitSet FOLLOW_classPropertyArray_in_classProperty9371 = new BitSet(new long[]{0x0000001201000000L,0x8000000200001400L,0x0000000000202001L,0x000000000000000CL});
	public static final BitSet FOLLOW_COLON_in_classProperty9376 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_genericTypeIdent_in_classProperty9378 = new BitSet(new long[]{0x0000001200000000L,0x8000000200001400L,0x0000000000202001L,0x000000000000000CL});
	public static final BitSet FOLLOW_classPropertyIndex_in_classProperty9383 = new BitSet(new long[]{0x0000001200000000L,0x8000000200000400L,0x0000000000202001L,0x000000000000000CL});
	public static final BitSet FOLLOW_classPropertySpecifier_in_classProperty9388 = new BitSet(new long[]{0x0000001200000000L,0x8000000200000400L,0x0000000000202001L,0x000000000000000CL});
	public static final BitSet FOLLOW_SEMI_in_classProperty9392 = new BitSet(new long[]{0x0000000200000002L,0x0000000200000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_classPropertyEndSpecifier_in_classProperty9395 = new BitSet(new long[]{0x0000000200000002L,0x0000000200000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_LBRACK_in_classPropertyArray9561 = new BitSet(new long[]{0x1050000268108140L,0x8002029049081400L,0x5100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_formalParameterList_in_classPropertyArray9563 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_classPropertyArray9565 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INDEX_in_classPropertyIndex9612 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_classPropertyIndex9614 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classPropertyIndex9617 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classPropertyReadWrite_in_classPropertySpecifier9664 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classPropertyDispInterface_in_classPropertySpecifier9700 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STORED_in_classPropertySpecifier9733 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_classPropertySpecifier9735 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_classPropertySpecifier9768 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_classPropertySpecifier9770 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_classPropertySpecifier9803 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NODEFAULT_in_classPropertySpecifier9852 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IMPLEMENTS_in_classPropertySpecifier9885 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_typeId_in_classPropertySpecifier9887 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STORED_in_classPropertyEndSpecifier9927 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_classPropertyEndSpecifier9929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classPropertyEndSpecifier9931 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_classPropertyEndSpecifier9968 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_classPropertyEndSpecifier9970 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classPropertyEndSpecifier9972 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_classPropertyEndSpecifier10005 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classPropertyEndSpecifier10007 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NODEFAULT_in_classPropertyEndSpecifier10040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classPropertyEndSpecifier10042 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_READ_in_classPropertyReadWrite10086 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_qualifiedIdent_in_classPropertyReadWrite10088 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
	public static final BitSet FOLLOW_LBRACK_in_classPropertyReadWrite10091 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_classPropertyReadWrite10093 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_classPropertyReadWrite10095 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WRITE_in_classPropertyReadWrite10169 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_qualifiedIdent_in_classPropertyReadWrite10171 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
	public static final BitSet FOLLOW_LBRACK_in_classPropertyReadWrite10174 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_classPropertyReadWrite10176 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_classPropertyReadWrite10178 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_READONLY_in_classPropertyDispInterface10257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classPropertyDispInterface10259 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WRITEONLY_in_classPropertyDispInterface10292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classPropertyDispInterface10294 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dispIDDirective_in_classPropertyDispInterface10327 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRICT_in_visibility10383 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_PROTECTED_in_visibility10387 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRICT_in_visibility10421 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_PRIVATE_in_visibility10425 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PUBLIC_in_visibility10458 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PUBLISHED_in_visibility10491 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AUTOMATED_in_visibility10524 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PROCEDURE_in_exportedProcHeading10578 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_exportedProcHeading10580 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_exportedProcHeading10583 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_exportedProcHeading10587 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_customAttribute_in_exportedProcHeading10590 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_typeDecl_in_exportedProcHeading10594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_exportedProcHeading10596 = new BitSet(new long[]{0x0560000400401002L,0x0000C40081808000L,0x2100000000100808L});
	public static final BitSet FOLLOW_functionDirective_in_exportedProcHeading10599 = new BitSet(new long[]{0x0560000400401002L,0x0000C40081808000L,0x2100000000100808L});
	public static final BitSet FOLLOW_FUNCTION_in_exportedProcHeading10634 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_exportedProcHeading10636 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_formalParameterSection_in_exportedProcHeading10639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_exportedProcHeading10643 = new BitSet(new long[]{0x0560000400401002L,0x0000C40081808000L,0x2100000000100808L});
	public static final BitSet FOLLOW_functionDirective_in_exportedProcHeading10646 = new BitSet(new long[]{0x0560000400401002L,0x0000C40081808000L,0x2100000000100808L});
	public static final BitSet FOLLOW_methodDeclHeading_in_methodDecl10703 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_methodDecl10705 = new BitSet(new long[]{0x14E0201C18C81822L,0x0010CC00898C8002L,0x9000000022182A18L});
	public static final BitSet FOLLOW_methodDirective_in_methodDecl10708 = new BitSet(new long[]{0x14E0201C18C81822L,0x0010CC00898C8002L,0x9000000022182A18L});
	public static final BitSet FOLLOW_methodBody_in_methodDecl10713 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_methodDeclHeading10773 = new BitSet(new long[]{0x0000000810800000L,0x0010000000000000L});
	public static final BitSet FOLLOW_CLASS_in_methodDeclHeading10778 = new BitSet(new long[]{0x0000000810000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_methodKey_in_methodDeclHeading10783 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_methodName_in_methodDeclHeading10785 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_methodDeclHeading10788 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_methodDeclHeading10886 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_methodDeclHeading10891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_methodDeclHeading10895 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_methodName_in_methodDeclHeading10897 = new BitSet(new long[]{0x0000000001000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_methodDeclHeading10900 = new BitSet(new long[]{0x0000000001000002L});
	public static final BitSet FOLLOW_COLON_in_methodDeclHeading10905 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_customAttribute_in_methodDeclHeading10908 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_typeDecl_in_methodDeclHeading10912 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_methodDeclHeading11021 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_CLASS_in_methodDeclHeading11025 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_OPERATOR_in_methodDeclHeading11027 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_methodName_in_methodDeclHeading11029 = new BitSet(new long[]{0x0000000001000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_methodDeclHeading11032 = new BitSet(new long[]{0x0000000001000002L});
	public static final BitSet FOLLOW_COLON_in_methodDeclHeading11037 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_customAttribute_in_methodDeclHeading11040 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_typeDecl_in_methodDeclHeading11044 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_methodName11293 = new BitSet(new long[]{0x0000010000000002L,0x0000000004000000L});
	public static final BitSet FOLLOW_genericDefinition_in_methodName11296 = new BitSet(new long[]{0x0000010000000002L});
	public static final BitSet FOLLOW_DOT_in_methodName11301 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_methodName11303 = new BitSet(new long[]{0x0000010000000002L,0x0000000004000000L});
	public static final BitSet FOLLOW_genericDefinition_in_methodName11306 = new BitSet(new long[]{0x0000010000000002L});
	public static final BitSet FOLLOW_procDeclHeading_in_procDecl11367 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_procDecl11369 = new BitSet(new long[]{0x05E0000C18C81802L,0x0010C400818C8003L,0x3100000022102A08L});
	public static final BitSet FOLLOW_functionDirective_in_procDecl11372 = new BitSet(new long[]{0x05E0000C18C81802L,0x0010C400818C8003L,0x3100000022102A08L});
	public static final BitSet FOLLOW_procBody_in_procDecl11377 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_procDeclHeading11443 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_PROCEDURE_in_procDeclHeading11447 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_procDeclHeading11449 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_procDeclHeading11452 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_procDeclHeading11552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_procDeclHeading11556 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_procDeclHeading11558 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_procDeclHeading11561 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_procDeclHeading11565 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_typeDecl_in_procDeclHeading11567 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_formalParameterSection11667 = new BitSet(new long[]{0x1050000268108140L,0x8002029049081400L,0x5100100000E8042DL,0x0000000000000044L});
	public static final BitSet FOLLOW_formalParameterList_in_formalParameterSection11670 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_formalParameterSection11674 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_formalParameter_in_formalParameterList11727 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_formalParameterList11730 = new BitSet(new long[]{0x1050000268108140L,0x8002029049081400L,0x5100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_formalParameter_in_formalParameterList11732 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_customAttribute_in_formalParameter11794 = new BitSet(new long[]{0x1050000268108140L,0x8002029049001400L,0x5100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_parmType_in_formalParameter11799 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_identListFlat_in_formalParameter11803 = new BitSet(new long[]{0x0004000001000002L});
	public static final BitSet FOLLOW_COLON_in_formalParameter11806 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_typeDecl_in_formalParameter11808 = new BitSet(new long[]{0x0004000000000002L});
	public static final BitSet FOLLOW_EQUAL_in_formalParameter11813 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_formalParameter11815 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_block_in_methodBody12038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_methodBody12040 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FORWARD_in_procBody12101 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_procBody12103 = new BitSet(new long[]{0x0560000400401002L,0x0000C40081808000L,0x2100000000100808L});
	public static final BitSet FOLLOW_functionDirective_in_procBody12106 = new BitSet(new long[]{0x0560000400401002L,0x0000C40081808000L,0x2100000000100808L});
	public static final BitSet FOLLOW_EXTERNAL_in_procBody12144 = new BitSet(new long[]{0x0560000400401002L,0x0000C400C1809000L,0x2100000000100808L});
	public static final BitSet FOLLOW_NAME_in_procBody12147 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_procBody12149 = new BitSet(new long[]{0x0560000400401002L,0x0000C400C1809000L,0x2100000000100808L});
	public static final BitSet FOLLOW_INDEX_in_procBody12153 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_procBody12155 = new BitSet(new long[]{0x0560000400401002L,0x0000C400C1809000L,0x2100000000100808L});
	public static final BitSet FOLLOW_functionDirective_in_procBody12160 = new BitSet(new long[]{0x0560000400401002L,0x0000C40081808000L,0x2100000000100808L});
	public static final BitSet FOLLOW_block_in_procBody12196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_procBody12198 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttributeList_in_customAttribute12251 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttributeDecl_in_customAttributeList12298 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
	public static final BitSet FOLLOW_LBRACK_in_customAttributeDecl12346 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_customAttributeIdent_in_customAttributeDecl12348 = new BitSet(new long[]{0x0000000000000000L,0x1000000002000000L});
	public static final BitSet FOLLOW_LPAREN_in_customAttributeDecl12351 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8042DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expressionList_in_customAttributeDecl12354 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_customAttributeDecl12358 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_customAttributeDecl12362 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespacedQualifiedIdent_in_customAttributeIdent12432 = new BitSet(new long[]{0x0000000001000002L});
	public static final BitSet FOLLOW_COLON_in_customAttributeIdent12435 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_namespacedQualifiedIdent_in_customAttributeIdent12437 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_anonymousExpression_in_expression12497 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleExpression_in_expression12538 = new BitSet(new long[]{0x0004000000000002L,0x0000000804420814L});
	public static final BitSet FOLLOW_relOp_in_expression12541 = new BitSet(new long[]{0x12500102E0118140L,0x840702955F083400L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_simpleExpression_in_expression12543 = new BitSet(new long[]{0x0004000000000002L});
	public static final BitSet FOLLOW_EQUAL_in_expression12548 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_expression12550 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PROCEDURE_in_anonymousExpression12601 = new BitSet(new long[]{0x0080000818880800L,0x00100000020C0002L,0x1000000022000200L});
	public static final BitSet FOLLOW_formalParameterSection_in_anonymousExpression12604 = new BitSet(new long[]{0x0080000818880800L,0x00100000000C0002L,0x1000000022000200L});
	public static final BitSet FOLLOW_block_in_anonymousExpression12608 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_anonymousExpression12641 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_anonymousExpression12644 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_anonymousExpression12648 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_typeDecl_in_anonymousExpression12650 = new BitSet(new long[]{0x0080000818880800L,0x00100000000C0002L,0x1000000022000200L});
	public static final BitSet FOLLOW_block_in_anonymousExpression12652 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_factor_in_simpleExpression12701 = new BitSet(new long[]{0x0000004000000482L,0x0001010030000000L,0x0000000000078000L,0x0000000000000020L});
	public static final BitSet FOLLOW_operator_in_simpleExpression12704 = new BitSet(new long[]{0x12500102E0118140L,0x840702955F083400L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_factor_in_simpleExpression12706 = new BitSet(new long[]{0x0000004000000482L,0x0001010030000000L,0x0000000000078000L,0x0000000000000020L});
	public static final BitSet FOLLOW_AT2_in_factor12767 = new BitSet(new long[]{0x12500102E0118140L,0x840702955F083400L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_factor_in_factor12769 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_199_in_factor12802 = new BitSet(new long[]{0x12500102E0118140L,0x840702955F083400L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_factor_in_factor12804 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_in_factor12844 = new BitSet(new long[]{0x12500102E0118140L,0x840702955F083400L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_factor_in_factor12846 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLUS_in_factor12879 = new BitSet(new long[]{0x12500102E0118140L,0x840702955F083400L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_factor_in_factor12881 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MINUS_in_factor12914 = new BitSet(new long[]{0x12500102E0118140L,0x840702955F083400L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_factor_in_factor12916 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_POINTER2_in_factor12949 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_factor12951 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_intRealNum_in_factor12995 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRUE_in_factor13028 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FALSE_in_factor13061 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NIL_in_factor13094 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_factor13127 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_factor13129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_factor13131 = new BitSet(new long[]{0x0000010000000002L,0x0004000000000000L});
	public static final BitSet FOLLOW_POINTER2_in_factor13134 = new BitSet(new long[]{0x0000010000000002L});
	public static final BitSet FOLLOW_DOT_in_factor13139 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_factor13141 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_stringFactor_in_factor13184 = new BitSet(new long[]{0x0000010000000002L});
	public static final BitSet FOLLOW_DOT_in_factor13187 = new BitSet(new long[]{0x12500102E0118140L,0x840702955F083400L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_simpleExpression_in_factor13189 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_setSection_in_factor13224 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designator_in_factor13257 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeId_in_factor13290 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_LPAREN_in_factor13292 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_factor13294 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_factor13296 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ControlString_in_stringFactor13349 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
	public static final BitSet FOLLOW_QuotedString_in_stringFactor13352 = new BitSet(new long[]{0x0000000080000000L});
	public static final BitSet FOLLOW_ControlString_in_stringFactor13354 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
	public static final BitSet FOLLOW_QuotedString_in_stringFactor13359 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_QuotedString_in_stringFactor13394 = new BitSet(new long[]{0x0000000080000002L});
	public static final BitSet FOLLOW_ControlString_in_stringFactor13397 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_QuotedString_in_stringFactor13399 = new BitSet(new long[]{0x0000000080000002L});
	public static final BitSet FOLLOW_ControlString_in_stringFactor13404 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACK_in_setSection13461 = new BitSet(new long[]{0x12500102E0118140L,0x941702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_setSection13464 = new BitSet(new long[]{0x0000020002000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_set_in_setSection13467 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_setSection13475 = new BitSet(new long[]{0x0000020002000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_setSection13481 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INHERITED_in_designator13538 = new BitSet(new long[]{0x1050010260118142L,0x800602904F081400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_namespacedQualifiedIdent_in_designator13545 = new BitSet(new long[]{0x0000010000010002L,0x0004000006080000L});
	public static final BitSet FOLLOW_typeId_in_designator13549 = new BitSet(new long[]{0x0000010000010002L,0x0004000006080000L});
	public static final BitSet FOLLOW_designatorItem_in_designator13556 = new BitSet(new long[]{0x0000010000010002L,0x0004000006080000L});
	public static final BitSet FOLLOW_POINTER2_in_designatorItem13609 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_designatorItem13642 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_designatorItem13650 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LT_in_designatorItem13698 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_genericTypeIdent_in_designatorItem13700 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_COMMA_in_designatorItem13703 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_genericTypeIdent_in_designatorItem13705 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_GT_in_designatorItem13709 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACK_in_designatorItem13750 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expressionList_in_designatorItem13752 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_designatorItem13754 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_designatorItem13787 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8042DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_designatorItem13790 = new BitSet(new long[]{0x0000000003000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_colonConstruct_in_designatorItem13793 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_COMMA_in_designatorItem13798 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_designatorItem13800 = new BitSet(new long[]{0x0000000003000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_colonConstruct_in_designatorItem13803 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_designatorItem13811 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_expressionList13888 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_COMMA_in_expressionList13891 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_expressionList13893 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_COLON_in_colonConstruct13946 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_colonConstruct13948 = new BitSet(new long[]{0x0000000001000002L});
	public static final BitSet FOLLOW_COLON_in_colonConstruct13951 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_colonConstruct13953 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ifStatement_in_statement14727 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_caseStatement_in_statement14760 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_repeatStatement_in_statement14793 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_whileStatement_in_statement14826 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_forStatement_in_statement14859 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_withStatement_in_statement14892 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tryStatement_in_statement14925 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_raiseStatement_in_statement14958 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_assemblerStatement_in_statement14991 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_compoundStatement_in_statement15024 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_label_in_statement15057 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_statement15059 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x4100380010E8006DL,0x0000000000000047L});
	public static final BitSet FOLLOW_statement_in_statement15061 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleStatement_in_statement15094 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IF_in_ifStatement15148 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_ifStatement15150 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_THEN_in_ifStatement15152 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x4100380010E8006DL,0x0000000000000047L});
	public static final BitSet FOLLOW_statement_in_ifStatement15154 = new BitSet(new long[]{0x0001000000000002L});
	public static final BitSet FOLLOW_ELSE_in_ifStatement15157 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x4100380010E8006DL,0x0000000000000047L});
	public static final BitSet FOLLOW_statement_in_ifStatement15159 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CASE_in_caseStatement15213 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_caseStatement15215 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_OF_in_caseStatement15217 = new BitSet(new long[]{0x12530102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_caseItem_in_caseStatement15220 = new BitSet(new long[]{0x12530102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_ELSE_in_caseStatement15225 = new BitSet(new long[]{0x905201026039C940L,0x880602904F083508L,0x4100380010E8206DL,0x0000000000000047L});
	public static final BitSet FOLLOW_statementList_in_caseStatement15227 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_caseStatement15230 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_caseStatement15236 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_caseLabel_in_caseItem15293 = new BitSet(new long[]{0x0000000003000000L});
	public static final BitSet FOLLOW_COMMA_in_caseItem15296 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_caseLabel_in_caseItem15298 = new BitSet(new long[]{0x0000000003000000L});
	public static final BitSet FOLLOW_COLON_in_caseItem15302 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x4100380010E8006DL,0x0000000000000047L});
	public static final BitSet FOLLOW_statement_in_caseItem15304 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_caseItem15307 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_caseLabel15366 = new BitSet(new long[]{0x0000020000000002L});
	public static final BitSet FOLLOW_DOTDOT_in_caseLabel15369 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_caseLabel15371 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REPEAT_in_repeatStatement15423 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x4300380010E8206DL,0x0000000000000047L});
	public static final BitSet FOLLOW_statementList_in_repeatStatement15426 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_UNTIL_in_repeatStatement15430 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_repeatStatement15432 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WHILE_in_whileStatement15483 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_whileStatement15485 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_whileStatement15487 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x4100380010E8006DL,0x0000000000000047L});
	public static final BitSet FOLLOW_statement_in_whileStatement15489 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_in_forStatement15542 = new BitSet(new long[]{0x105001026011C140L,0x800602904F083400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_designator_in_forStatement15544 = new BitSet(new long[]{0x0000000000004000L});
	public static final BitSet FOLLOW_ASSIGN_in_forStatement15546 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_forStatement15548 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_TO_in_forStatement15550 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_forStatement15552 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_forStatement15554 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x4100380010E8006DL,0x0000000000000047L});
	public static final BitSet FOLLOW_statement_in_forStatement15556 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_in_forStatement15589 = new BitSet(new long[]{0x105001026011C140L,0x800602904F083400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_designator_in_forStatement15591 = new BitSet(new long[]{0x0000000000004000L});
	public static final BitSet FOLLOW_ASSIGN_in_forStatement15593 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_forStatement15595 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_DOWNTO_in_forStatement15597 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_forStatement15599 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_forStatement15601 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x4100380010E8006DL,0x0000000000000047L});
	public static final BitSet FOLLOW_statement_in_forStatement15603 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_in_forStatement15636 = new BitSet(new long[]{0x1050010260118140L,0x800602904F083C00L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_designator_in_forStatement15638 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_IN_in_forStatement15640 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_forStatement15642 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_forStatement15644 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x4100380010E8006DL,0x0000000000000047L});
	public static final BitSet FOLLOW_statement_in_forStatement15646 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WITH_in_withStatement15698 = new BitSet(new long[]{0x1050010260118540L,0x800602904F083400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_withItemList_in_withStatement15700 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_withStatement15702 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x4100380010E8006DL,0x0000000000000047L});
	public static final BitSet FOLLOW_statement_in_withStatement15704 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_withItem_in_withItemList15757 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_COMMA_in_withItemList15760 = new BitSet(new long[]{0x1050010260118540L,0x800602904F083400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_withItem_in_withItemList15762 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_designator_in_withItem15821 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_AS_in_withItem15824 = new BitSet(new long[]{0x1050010260118140L,0x800602904F083400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_designator_in_withItem15826 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BEGIN_in_compoundStatement15876 = new BitSet(new long[]{0x905201026039C940L,0x880602904F083508L,0x4100380010E8206DL,0x0000000000000047L});
	public static final BitSet FOLLOW_statementList_in_compoundStatement15879 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_compoundStatement15883 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statement_in_statementList15949 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_statementList15954 = new BitSet(new long[]{0x905001026039C942L,0x880602904F083508L,0x4100380010E8206DL,0x0000000000000047L});
	public static final BitSet FOLLOW_statement_in_statementList15957 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_designator_in_simpleStatement16011 = new BitSet(new long[]{0x0000000000004000L});
	public static final BitSet FOLLOW_ASSIGN_in_simpleStatement16013 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_simpleStatement16015 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designator_in_simpleStatement16048 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_gotoStatement_in_simpleStatement16082 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GOTO_in_gotoStatement16134 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100380000E8002DL,0x0000000000000004L});
	public static final BitSet FOLLOW_label_in_gotoStatement16136 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXIT_in_gotoStatement16169 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_LPAREN_in_gotoStatement16172 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_gotoStatement16174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_gotoStatement16176 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BREAK_in_gotoStatement16211 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONTINUE_in_gotoStatement16244 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_constExpression16297 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_recordConstExpression_in_constExpression16299 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002400L});
	public static final BitSet FOLLOW_SEMI_in_constExpression16302 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_recordConstExpression_in_constExpression16304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002400L});
	public static final BitSet FOLLOW_RPAREN_in_constExpression16308 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_constExpression16342 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_constExpression_in_constExpression16344 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_COMMA_in_constExpression16347 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_constExpression_in_constExpression16349 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_constExpression16353 = new BitSet(new long[]{0x12500102E0118142L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_constExpression_in_constExpression16356 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_constExpression16391 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_recordConstExpression16435 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_recordConstExpression16437 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_constExpression_in_recordConstExpression16439 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRY_in_tryStatement16495 = new BitSet(new long[]{0x905801026039C940L,0x880602904F083508L,0x4100380010E8206DL,0x0000000000000047L});
	public static final BitSet FOLLOW_statementList_in_tryStatement16498 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_EXCEPT_in_tryStatement16502 = new BitSet(new long[]{0x905301026039C940L,0x880602D04F083508L,0x4100380010E8206DL,0x0000000000000047L});
	public static final BitSet FOLLOW_handlerList_in_tryStatement16504 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_tryStatement16506 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRY_in_tryStatement16539 = new BitSet(new long[]{0xD05001026039C940L,0x880602904F083508L,0x4100380010E8206DL,0x0000000000000047L});
	public static final BitSet FOLLOW_statementList_in_tryStatement16542 = new BitSet(new long[]{0x4000000000000000L});
	public static final BitSet FOLLOW_FINALLY_in_tryStatement16546 = new BitSet(new long[]{0x905201026039C940L,0x880602904F083508L,0x4100380010E8206DL,0x0000000000000047L});
	public static final BitSet FOLLOW_statementList_in_tryStatement16549 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_tryStatement16553 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_handler_in_handlerList16608 = new BitSet(new long[]{0x0001000000000002L,0x0000004000000000L});
	public static final BitSet FOLLOW_ELSE_in_handlerList16613 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x4100380010E8206DL,0x0000000000000047L});
	public static final BitSet FOLLOW_statementList_in_handlerList16615 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statementList_in_handlerList16650 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ON_in_handler16708 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_handlerIdent_in_handler16711 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_typeId_in_handler16715 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_handler16717 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x4100380010E8206DL,0x0000000000000047L});
	public static final BitSet FOLLOW_handlerStatement_in_handler16719 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_handlerIdent16774 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_handlerIdent16776 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statement_in_handlerStatement16825 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_handlerStatement16828 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_handlerStatement16863 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RAISE_in_raiseStatement16914 = new BitSet(new long[]{0x1050010260118140L,0x800602904F083400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_designator_in_raiseStatement16917 = new BitSet(new long[]{0x0000000000008002L});
	public static final BitSet FOLLOW_AT_in_raiseStatement16922 = new BitSet(new long[]{0x1050010260118140L,0x800602904F083400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_designator_in_raiseStatement16924 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ASM_in_assemblerStatement16977 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
	public static final BitSet FOLLOW_END_in_assemblerStatement16985 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_reintroduceDirective_in_methodDirective17058 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_overloadDirective_in_methodDirective17100 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bindingDirective_in_methodDirective17145 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_abstractDirective_in_methodDirective17191 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_inlineDirective_in_methodDirective17236 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_callConvention_in_methodDirective17283 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_hintingDirective_in_methodDirective17331 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_methodDirective17333 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_oldCallConventionDirective_in_methodDirective17375 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dispIDDirective_in_methodDirective17411 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_overloadDirective_in_functionDirective17459 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_inlineDirective_in_functionDirective17502 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_callConvention_in_functionDirective17547 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_oldCallConventionDirective_in_functionDirective17593 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_hintingDirective_in_functionDirective17627 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_functionDirective17629 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_callConventionNoSemi_in_functionDirective17670 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_externalDirective_in_functionDirective17674 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UNSAFE_in_functionDirective17717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_functionDirective17719 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REINTRODUCE_in_reintroduceDirective17779 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_reintroduceDirective17781 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OVERLOAD_in_overloadDirective17829 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_overloadDirective17832 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MESSAGE_in_bindingDirective17887 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_bindingDirective17889 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_bindingDirective17891 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STATIC_in_bindingDirective17924 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_bindingDirective17926 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DYNAMIC_in_bindingDirective17959 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_bindingDirective17961 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OVERRIDE_in_bindingDirective17994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_bindingDirective17996 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VIRTUAL_in_bindingDirective18029 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_bindingDirective18031 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ABSTRACT_in_abstractDirective18079 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_abstractDirective18081 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FINAL_in_abstractDirective18114 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_abstractDirective18116 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INLINE_in_inlineDirective18166 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_inlineDirective18168 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ASSEMBLER_in_inlineDirective18201 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_inlineDirective18203 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CDECL_in_callConvention18255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_callConvention18257 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PASCAL_in_callConvention18294 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_callConvention18296 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REGISTER_in_callConvention18332 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_callConvention18334 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SAFECALL_in_callConvention18368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_callConvention18370 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STDCALL_in_callConvention18404 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_callConvention18406 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXPORT_in_callConvention18441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_callConvention18443 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FAR_in_oldCallConventionDirective18709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_oldCallConventionDirective18711 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOCAL_in_oldCallConventionDirective18750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_oldCallConventionDirective18752 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NEAR_in_oldCallConventionDirective18789 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_oldCallConventionDirective18791 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEPRECATED_in_hintingDirective18845 = new BitSet(new long[]{0x0000000080000002L,0x0400000000000000L});
	public static final BitSet FOLLOW_stringFactor_in_hintingDirective18848 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXPERIMENTAL_in_hintingDirective18883 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLATFORM_in_hintingDirective18918 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LIBRARY_in_hintingDirective18951 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARARGS_in_externalDirective18999 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_externalDirective19001 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXTERNAL_in_externalDirective19037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_externalDirective19039 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXTERNAL_in_externalDirective19072 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_constExpression_in_externalDirective19074 = new BitSet(new long[]{0x0000000000000000L,0x0000000040001000L,0x0000000000002000L});
	public static final BitSet FOLLOW_externalSpecifier_in_externalDirective19077 = new BitSet(new long[]{0x0000000000000000L,0x0000000040001000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_externalDirective19081 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NAME_in_externalSpecifier19130 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_constExpression_in_externalSpecifier19132 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INDEX_in_externalSpecifier19165 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_constExpression_in_externalSpecifier19167 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DISPID_in_dispIDDirective19220 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_dispIDDirective19222 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_dispIDDirective19224 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TkIdentifier_in_ident19287 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_198_in_ident19320 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_TkIdentifier_in_ident19322 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_198_in_ident19359 = new BitSet(new long[]{0xFFFB3CFE78FABFF0L,0x8BFAFFF7E987FF2BL,0xF78000003FF9DBFFL,0x000000000000002FL});
	public static final BitSet FOLLOW_keywordsAsIdentifier_in_ident19361 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_usedKeywordsAsNames_in_ident19398 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_identList20659 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_COMMA_in_identList20662 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_identList20664 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_ident_in_identListFlat20729 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_COMMA_in_identListFlat20732 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_identListFlat20734 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_TkIdentifier_in_label20808 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TkIntNum_in_label20841 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TkHexNum_in_label20874 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_usedKeywordsAsNames_in_label20907 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TkRealNum_in_intRealNum20962 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_intNum_in_intRealNum20995 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespaceName_in_namespacedQualifiedIdent21129 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_namespacedQualifiedIdent21131 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_qualifiedIdent_in_namespacedQualifiedIdent21135 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_namespaceName21187 = new BitSet(new long[]{0x0000010000000002L});
	public static final BitSet FOLLOW_DOT_in_namespaceName21190 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_namespaceName21192 = new BitSet(new long[]{0x0000010000000002L});
	public static final BitSet FOLLOW_ident_in_qualifiedIdent21247 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_qualifiedIdent21249 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_qualifiedIdent21254 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_declSection_in_synpred23_Delphi1584 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_blockBody_in_synpred24_Delphi1589 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exportedProcHeading_in_synpred30_Delphi1866 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_methodDecl_in_synpred31_Delphi1899 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procDecl_in_synpred32_Delphi1932 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exportedProcHeading_in_synpred36_Delphi2116 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procDecl_in_synpred38_Delphi2182 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constDeclaration_in_synpred40_Delphi2331 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred42_Delphi2486 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeDeclaration_in_synpred45_Delphi2580 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred46_Delphi2646 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_varDeclaration_in_synpred48_Delphi2743 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred50_Delphi2903 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ABSOLUTE_in_synpred53_Delphi2995 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_synpred53_Delphi2997 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ABSOLUTE_in_synpred54_Delphi3030 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_constExpression_in_synpred54_Delphi3032 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_strucType_in_synpred61_Delphi3277 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pointerType_in_synpred62_Delphi3310 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_stringType_in_synpred63_Delphi3343 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedureType_in_synpred64_Delphi3376 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_variantType_in_synpred65_Delphi3409 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_genericPostfix_in_synpred67_Delphi3450 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_synpred68_Delphi3455 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_typeDecl_in_synpred68_Delphi3457 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_paranthesePostfix_in_synpred69_Delphi3462 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TYPE_in_synpred70_Delphi3443 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_typeId_in_synpred70_Delphi3447 = new BitSet(new long[]{0x0000010000000002L,0x0000000006000000L});
	public static final BitSet FOLLOW_genericPostfix_in_synpred70_Delphi3450 = new BitSet(new long[]{0x0000010000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_DOT_in_synpred70_Delphi3455 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_typeDecl_in_synpred70_Delphi3457 = new BitSet(new long[]{0x0000010000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_paranthesePostfix_in_synpred70_Delphi3462 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONST_in_synpred80_Delphi4043 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OF_in_synpred81_Delphi4215 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_typeDecl_in_synpred81_Delphi4217 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACK_in_synpred83_Delphi4366 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_synpred83_Delphi4368 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_synpred83_Delphi4370 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_codePageNumber_in_synpred86_Delphi4417 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_methodType_in_synpred87_Delphi4526 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleProcedureType_in_synpred88_Delphi4559 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_synpred90_Delphi4702 = new BitSet(new long[]{0x0040000000400000L,0x0000400000000000L,0x0000000000100808L});
	public static final BitSet FOLLOW_callConventionNoSemi_in_synpred90_Delphi4706 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred92_Delphi4814 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred94_Delphi4869 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_synpred95_Delphi4981 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subRangeType_in_synpred96_Delphi5014 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOTDOT_in_synpred97_Delphi5103 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_constExpression_in_synpred97_Delphi5105 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classTypeTypeDecl_in_synpred110_Delphi5767 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classTypeDecl_in_synpred111_Delphi5800 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_synpred119_Delphi6125 = new BitSet(new long[]{0x1052000A78928160L,0x83DA02904B081402L,0x5100100022E8122DL,0x0000000000000044L});
	public static final BitSet FOLLOW_classState_in_synpred119_Delphi6128 = new BitSet(new long[]{0x1052000A78928140L,0x83DA02904B081402L,0x5100100022E8022DL,0x0000000000000044L});
	public static final BitSet FOLLOW_classParent_in_synpred119_Delphi6133 = new BitSet(new long[]{0x1052000A78928140L,0x83DA029049081402L,0x5100100022E8022DL,0x0000000000000044L});
	public static final BitSet FOLLOW_classItem_in_synpred119_Delphi6138 = new BitSet(new long[]{0x1052000A78928140L,0x83DA029049081402L,0x5100100022E8022DL,0x0000000000000044L});
	public static final BitSet FOLLOW_END_in_synpred119_Delphi6142 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classParent_in_synpred120_Delphi6196 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_synpred123_Delphi6432 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_synpred124_Delphi6465 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classField_in_synpred125_Delphi6498 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classProperty_in_synpred126_Delphi6531 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_synpred133_Delphi6801 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classProperty_in_synpred134_Delphi6834 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_interfaceKey_in_synpred141_Delphi6986 = new BitSet(new long[]{0x0002000810800000L,0x0050008002080002L});
	public static final BitSet FOLLOW_classParent_in_synpred141_Delphi6989 = new BitSet(new long[]{0x0002000810800000L,0x0050008000080002L});
	public static final BitSet FOLLOW_interfaceGuid_in_synpred141_Delphi6994 = new BitSet(new long[]{0x0002000810800000L,0x0050008000080002L});
	public static final BitSet FOLLOW_interfaceItem_in_synpred141_Delphi6999 = new BitSet(new long[]{0x0002000810800000L,0x0050008000080002L});
	public static final BitSet FOLLOW_END_in_synpred141_Delphi7003 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classParent_in_synpred142_Delphi7097 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_synpred144_Delphi7340 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_synpred145_Delphi7374 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_synpred148_Delphi7514 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_synpred149_Delphi7547 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleRecord_in_synpred150_Delphi7635 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_recordField_in_synpred151_Delphi7724 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_synpred154_Delphi7874 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_synpred155_Delphi7912 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classProperty_in_synpred156_Delphi7945 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_recordField_in_synpred159_Delphi8044 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_synpred173_Delphi8582 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred174_Delphi8670 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred179_Delphi8670 = new BitSet(new long[]{0x0000000810800000L,0x0010000000000000L});
	public static final BitSet FOLLOW_CLASS_in_synpred179_Delphi8675 = new BitSet(new long[]{0x0000000810000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_methodKey_in_synpred179_Delphi8679 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_synpred179_Delphi8681 = new BitSet(new long[]{0x0000000000000000L,0x0000000006000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_genericDefinition_in_synpred179_Delphi8684 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred179_Delphi8689 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_synpred179_Delphi8693 = new BitSet(new long[]{0x1460201400401022L,0x0000CC0089808000L,0x8000000000180818L});
	public static final BitSet FOLLOW_methodDirective_in_synpred179_Delphi8696 = new BitSet(new long[]{0x1460201400401022L,0x0000CC0089808000L,0x8000000000180818L});
	public static final BitSet FOLLOW_customAttribute_in_synpred180_Delphi8804 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred184_Delphi8830 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred186_Delphi8804 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_synpred186_Delphi8809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_synpred186_Delphi8813 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_synpred186_Delphi8815 = new BitSet(new long[]{0x0000000001000000L,0x0000000006000000L});
	public static final BitSet FOLLOW_genericDefinition_in_synpred186_Delphi8818 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred186_Delphi8823 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_synpred186_Delphi8827 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_customAttribute_in_synpred186_Delphi8830 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_typeDecl_in_synpred186_Delphi8834 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_synpred186_Delphi8836 = new BitSet(new long[]{0x1460201400401022L,0x0000CC0089808000L,0x8000000000180818L});
	public static final BitSet FOLLOW_methodDirective_in_synpred186_Delphi8839 = new BitSet(new long[]{0x1460201400401022L,0x0000CC0089808000L,0x8000000000180818L});
	public static final BitSet FOLLOW_customAttribute_in_synpred187_Delphi8956 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred191_Delphi8982 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred192_Delphi8956 = new BitSet(new long[]{0x0000000000800000L,0x0000008000000000L});
	public static final BitSet FOLLOW_CLASS_in_synpred192_Delphi8961 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_OPERATOR_in_synpred192_Delphi8965 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_synpred192_Delphi8967 = new BitSet(new long[]{0x0000000001000000L,0x0000000006000000L});
	public static final BitSet FOLLOW_genericDefinition_in_synpred192_Delphi8970 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred192_Delphi8975 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_synpred192_Delphi8979 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_customAttribute_in_synpred192_Delphi8982 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_typeDecl_in_synpred192_Delphi8986 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_synpred192_Delphi8988 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred193_Delphi9095 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred196_Delphi9095 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_synpred196_Delphi9100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_synpred196_Delphi9104 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_synpred196_Delphi9106 = new BitSet(new long[]{0x0000010000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_genericDefinition_in_synpred196_Delphi9109 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_synpred196_Delphi9113 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_synpred196_Delphi9115 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_EQUAL_in_synpred196_Delphi9117 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_synpred196_Delphi9119 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_synpred196_Delphi9121 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred197_Delphi9155 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred200_Delphi9237 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred202_Delphi9357 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_synpred209_Delphi9617 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_synpred213_Delphi9768 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_synpred213_Delphi9770 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_synpred214_Delphi9803 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_synpred217_Delphi9968 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_synpred217_Delphi9970 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_synpred217_Delphi9972 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_synpred218_Delphi10005 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_synpred218_Delphi10007 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred231_Delphi10590 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionDirective_in_synpred232_Delphi10599 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionDirective_in_synpred235_Delphi10646 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_methodDirective_in_synpred236_Delphi10708 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_methodBody_in_synpred237_Delphi10713 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred238_Delphi10773 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred241_Delphi10773 = new BitSet(new long[]{0x0000000810800000L,0x0010000000000000L});
	public static final BitSet FOLLOW_CLASS_in_synpred241_Delphi10778 = new BitSet(new long[]{0x0000000810000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_methodKey_in_synpred241_Delphi10783 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_methodName_in_synpred241_Delphi10785 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred241_Delphi10788 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred242_Delphi10886 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred245_Delphi10908 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred247_Delphi10886 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_synpred247_Delphi10891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_synpred247_Delphi10895 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_methodName_in_synpred247_Delphi10897 = new BitSet(new long[]{0x0000000001000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred247_Delphi10900 = new BitSet(new long[]{0x0000000001000002L});
	public static final BitSet FOLLOW_COLON_in_synpred247_Delphi10905 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_customAttribute_in_synpred247_Delphi10908 = new BitSet(new long[]{0x1A500122E0918340L,0x841722955F093402L,0x4102380028E8402FL,0x00000000000000C4L});
	public static final BitSet FOLLOW_typeDecl_in_synpred247_Delphi10912 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred248_Delphi11021 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred250_Delphi11040 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionDirective_in_synpred257_Delphi11372 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procBody_in_synpred258_Delphi11377 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred259_Delphi11443 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred261_Delphi11443 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_PROCEDURE_in_synpred261_Delphi11447 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_synpred261_Delphi11449 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred261_Delphi11452 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred262_Delphi11552 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred266_Delphi11794 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionDirective_in_synpred272_Delphi12106 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NAME_in_synpred274_Delphi12147 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_synpred274_Delphi12149 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INDEX_in_synpred275_Delphi12153 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_synpred275_Delphi12155 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionDirective_in_synpred276_Delphi12160 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttributeDecl_in_synpred278_Delphi12298 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expressionList_in_synpred279_Delphi12354 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_anonymousExpression_in_synpred282_Delphi12497 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_relOp_in_synpred283_Delphi12541 = new BitSet(new long[]{0x12500102E0118140L,0x840702955F083400L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_simpleExpression_in_synpred283_Delphi12543 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EQUAL_in_synpred284_Delphi12548 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_synpred284_Delphi12550 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred285_Delphi12604 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_operator_in_synpred288_Delphi12704 = new BitSet(new long[]{0x12500102E0118140L,0x840702955F083400L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_factor_in_synpred288_Delphi12706 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT2_in_synpred289_Delphi12767 = new BitSet(new long[]{0x12500102E0118140L,0x840702955F083400L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_factor_in_synpred289_Delphi12769 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_199_in_synpred290_Delphi12802 = new BitSet(new long[]{0x12500102E0118140L,0x840702955F083400L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_factor_in_synpred290_Delphi12804 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_in_synpred291_Delphi12844 = new BitSet(new long[]{0x12500102E0118140L,0x840702955F083400L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_factor_in_synpred291_Delphi12846 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLUS_in_synpred292_Delphi12879 = new BitSet(new long[]{0x12500102E0118140L,0x840702955F083400L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_factor_in_synpred292_Delphi12881 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MINUS_in_synpred293_Delphi12914 = new BitSet(new long[]{0x12500102E0118140L,0x840702955F083400L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_factor_in_synpred293_Delphi12916 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_POINTER2_in_synpred294_Delphi12949 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_synpred294_Delphi12951 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_intRealNum_in_synpred295_Delphi12995 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRUE_in_synpred296_Delphi13028 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FALSE_in_synpred297_Delphi13061 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NIL_in_synpred298_Delphi13094 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_POINTER2_in_synpred299_Delphi13134 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_synpred300_Delphi13139 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_synpred300_Delphi13141 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_synpred301_Delphi13127 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_synpred301_Delphi13129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_synpred301_Delphi13131 = new BitSet(new long[]{0x0000010000000002L,0x0004000000000000L});
	public static final BitSet FOLLOW_POINTER2_in_synpred301_Delphi13134 = new BitSet(new long[]{0x0000010000000002L});
	public static final BitSet FOLLOW_DOT_in_synpred301_Delphi13139 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_synpred301_Delphi13141 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_synpred302_Delphi13187 = new BitSet(new long[]{0x12500102E0118140L,0x840702955F083400L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_simpleExpression_in_synpred302_Delphi13189 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_stringFactor_in_synpred303_Delphi13184 = new BitSet(new long[]{0x0000010000000002L});
	public static final BitSet FOLLOW_DOT_in_synpred303_Delphi13187 = new BitSet(new long[]{0x12500102E0118140L,0x840702955F083400L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_simpleExpression_in_synpred303_Delphi13189 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_setSection_in_synpred304_Delphi13224 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designator_in_synpred305_Delphi13257 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_QuotedString_in_synpred306_Delphi13352 = new BitSet(new long[]{0x0000000080000000L});
	public static final BitSet FOLLOW_ControlString_in_synpred306_Delphi13354 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_QuotedString_in_synpred307_Delphi13359 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ControlString_in_synpred309_Delphi13397 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_QuotedString_in_synpred309_Delphi13399 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ControlString_in_synpred310_Delphi13404 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_synpred313_Delphi13464 = new BitSet(new long[]{0x0000020002000002L});
	public static final BitSet FOLLOW_set_in_synpred313_Delphi13467 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_synpred313_Delphi13475 = new BitSet(new long[]{0x0000020002000002L});
	public static final BitSet FOLLOW_INHERITED_in_synpred314_Delphi13538 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespacedQualifiedIdent_in_synpred315_Delphi13545 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespacedQualifiedIdent_in_synpred316_Delphi13545 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeId_in_synpred316_Delphi13549 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designatorItem_in_synpred317_Delphi13556 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_synpred327_Delphi13790 = new BitSet(new long[]{0x0000000003000002L});
	public static final BitSet FOLLOW_colonConstruct_in_synpred327_Delphi13793 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_COMMA_in_synpred327_Delphi13798 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_synpred327_Delphi13800 = new BitSet(new long[]{0x0000000003000002L});
	public static final BitSet FOLLOW_colonConstruct_in_synpred327_Delphi13803 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_label_in_synpred358_Delphi15057 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_synpred358_Delphi15059 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x4100380010E8006DL,0x0000000000000047L});
	public static final BitSet FOLLOW_statement_in_synpred358_Delphi15061 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ELSE_in_synpred359_Delphi15157 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x4100380010E8006DL,0x0000000000000047L});
	public static final BitSet FOLLOW_statement_in_synpred359_Delphi15159 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statementList_in_synpred366_Delphi15426 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_in_synpred367_Delphi15542 = new BitSet(new long[]{0x105001026011C140L,0x800602904F083400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_designator_in_synpred367_Delphi15544 = new BitSet(new long[]{0x0000000000004000L});
	public static final BitSet FOLLOW_ASSIGN_in_synpred367_Delphi15546 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_synpred367_Delphi15548 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_TO_in_synpred367_Delphi15550 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_synpred367_Delphi15552 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_synpred367_Delphi15554 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x4100380010E8006DL,0x0000000000000047L});
	public static final BitSet FOLLOW_statement_in_synpred367_Delphi15556 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_in_synpred368_Delphi15589 = new BitSet(new long[]{0x105001026011C140L,0x800602904F083400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_designator_in_synpred368_Delphi15591 = new BitSet(new long[]{0x0000000000004000L});
	public static final BitSet FOLLOW_ASSIGN_in_synpred368_Delphi15593 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_synpred368_Delphi15595 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_DOWNTO_in_synpred368_Delphi15597 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_synpred368_Delphi15599 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_synpred368_Delphi15601 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x4100380010E8006DL,0x0000000000000047L});
	public static final BitSet FOLLOW_statement_in_synpred368_Delphi15603 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statementList_in_synpred371_Delphi15879 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statement_in_synpred372_Delphi15949 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statement_in_synpred373_Delphi15957 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_synpred374_Delphi15954 = new BitSet(new long[]{0x905001026039C942L,0x880602904F083508L,0x4100380010E8006DL,0x0000000000000047L});
	public static final BitSet FOLLOW_statement_in_synpred374_Delphi15957 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designator_in_synpred375_Delphi16011 = new BitSet(new long[]{0x0000000000004000L});
	public static final BitSet FOLLOW_ASSIGN_in_synpred375_Delphi16013 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_synpred375_Delphi16015 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designator_in_synpred376_Delphi16048 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_synpred378_Delphi16172 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_expression_in_synpred378_Delphi16174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_synpred378_Delphi16176 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_synpred382_Delphi16297 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_recordConstExpression_in_synpred382_Delphi16299 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002400L});
	public static final BitSet FOLLOW_SEMI_in_synpred382_Delphi16302 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_recordConstExpression_in_synpred382_Delphi16304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002400L});
	public static final BitSet FOLLOW_RPAREN_in_synpred382_Delphi16308 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constExpression_in_synpred384_Delphi16356 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_synpred385_Delphi16342 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_constExpression_in_synpred385_Delphi16344 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_COMMA_in_synpred385_Delphi16347 = new BitSet(new long[]{0x12500102E0118140L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_constExpression_in_synpred385_Delphi16349 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_synpred385_Delphi16353 = new BitSet(new long[]{0x12500102E0118142L,0x841702955F083402L,0x4102380008E8002DL,0x00000000000000C4L});
	public static final BitSet FOLLOW_constExpression_in_synpred385_Delphi16356 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statementList_in_synpred386_Delphi16498 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRY_in_synpred387_Delphi16495 = new BitSet(new long[]{0x905801026039C940L,0x880602904F083508L,0x4100380010E8206DL,0x0000000000000047L});
	public static final BitSet FOLLOW_statementList_in_synpred387_Delphi16498 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_EXCEPT_in_synpred387_Delphi16502 = new BitSet(new long[]{0x905301026039C940L,0x880602D04F083508L,0x4100380010E8206DL,0x0000000000000047L});
	public static final BitSet FOLLOW_handlerList_in_synpred387_Delphi16504 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_synpred387_Delphi16506 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statementList_in_synpred388_Delphi16542 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statementList_in_synpred389_Delphi16549 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_handler_in_synpred392_Delphi16608 = new BitSet(new long[]{0x0001000000000002L,0x0000004000000000L});
	public static final BitSet FOLLOW_ELSE_in_synpred392_Delphi16613 = new BitSet(new long[]{0x905001026039C940L,0x880602904F083508L,0x4100380010E8206DL,0x0000000000000047L});
	public static final BitSet FOLLOW_statementList_in_synpred392_Delphi16615 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statement_in_synpred395_Delphi16825 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_synpred395_Delphi16828 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designator_in_synpred396_Delphi16917 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_in_synpred397_Delphi16922 = new BitSet(new long[]{0x1050010260118140L,0x800602904F083400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_designator_in_synpred397_Delphi16924 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_synpred415_Delphi17832 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXTERNAL_in_synpred439_Delphi19037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_synpred439_Delphi19039 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespaceName_in_synpred613_Delphi21129 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_synpred613_Delphi21131 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_synpred614_Delphi21190 = new BitSet(new long[]{0x1050000260108140L,0x8002029049001400L,0x4100100000E8002DL,0x0000000000000044L});
	public static final BitSet FOLLOW_ident_in_synpred614_Delphi21192 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_synpred615_Delphi21247 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_synpred615_Delphi21249 = new BitSet(new long[]{0x0000000000000002L});
}
