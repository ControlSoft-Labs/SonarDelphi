// $ANTLR 3.5.1 D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g 2022-05-16 08:11:48

/*
 * Sonar Delphi Plugin
 * Copyright (C) 2010 SonarSource
 * dev@sonar.codehaus.org
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
 */

package org.sonar.plugins.delphi.antlr;

/**
* Delphi Parser class generated by Antlr. Provides tokens and tree parsing methods.
**/


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


@SuppressWarnings("all")
public class DelphiParser extends Parser {
	public static final String[] tokenNames = new String[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABSOLUTE", "ABSTRACT", "ADD", 
		"AND", "ANSISTRING", "ARRAY", "AS", "ASM", "ASSEMBLER", "ASSEMBLY", "ASSIGN", 
		"AT", "AT2", "AUTOMATED", "Alpha", "BEGIN", "BREAK", "CASE", "CDECL", 
		"CLASS", "COLON", "COMMA", "COMMENT", "CONST", "CONSTRUCTOR", "CONTAINS", 
		"CONTINUE", "ControlChar", "DEFAULT", "DELAYED", "DEPRECATED", "DESTRUCTOR", 
		"DISPID", "DISPINTERFACE", "DIV", "DO", "DOT", "DOTDOT", "DOWNTO", "DQ", 
		"DW", "DYNAMIC", "Digit", "Digitseq", "ELSE", "END", "EQUAL", "EXCEPT", 
		"EXIT", "EXPERIMENTAL", "EXPORT", "EXPORTS", "EXTERNAL", "FALSE", "FAR", 
		"FILE", "FINAL", "FINALIZATION", "FINALLY", "FOR", "FORWARD", "FUNCTION", 
		"GE", "GOTO", "GT", "HELPER", "Hexdigit", "Hexdigitseq", "IF", "IMPLEMENTATION", 
		"IMPLEMENTS", "IN", "INDEX", "INHERITED", "INITIALIZATION", "INLINE", 
		"INTERFACE", "IS", "LABEL", "LBRACK", "LBRACK2", "LCURLY", "LE", "LIBRARY", 
		"LOCAL", "LPAREN", "LT", "MESSAGE", "MINUS", "MOD", "NAME", "NEAR", "NIL", 
		"NODEFAULT", "NOT", "NOT_EQUAL", "OBJECT", "OF", "ON", "OPERATOR", "OR", 
		"OUT", "OVERLOAD", "OVERRIDE", "PACKAGE", "PACKED", "PASCAL", "PLATFORM", 
		"PLUS", "POINTER", "POINTER2", "PRIVATE", "PROCEDURE", "PROGRAM", "PROPERTY", 
		"PROTECTED", "PUBLIC", "PUBLISHED", "QuotedString", "RAISE", "RBRACK", 
		"RBRACK2", "RCURLY", "READ", "READONLY", "RECORD", "REFERENCE", "REGISTER", 
		"REINTRODUCE", "REMOVE", "REPEAT", "REQUIRES", "RESIDENT", "RESOURCESTRING", 
		"RPAREN", "SAFECALL", "SEALED", "SEMI", "SET", "SHL", "SHR", "SLASH", 
		"STAR", "STATIC", "STDCALL", "STORED", "STRICT", "STRING", "THEN", "THREADVAR", 
		"TO", "TRUE", "TRY", "TYPE", "TkAnonymousExpression", "TkClass", "TkClassField", 
		"TkClassOfType", "TkClassParents", "TkCustomAttribute", "TkCustomAttributeArgs", 
		"TkFunctionArgs", "TkFunctionBody", "TkFunctionName", "TkFunctionReturn", 
		"TkGlobalFunction", "TkGuid", "TkHexNum", "TkIdentifier", "TkIntNum", 
		"TkInterface", "TkNewType", "TkObject", "TkRealNum", "TkRecord", "TkRecordHelper", 
		"TkVariableIdents", "TkVariableParam", "TkVariableType", "UNIT", "UNSAFE", 
		"UNTIL", "USES", "UnicodeBOM", "VAR", "VARARGS", "VARIANT", "VIRTUAL", 
		"WHILE", "WITH", "WRITE", "WRITEONLY", "WS", "XOR", "'&'", "'@@'", "'AND'", 
		"'AS'", "'DIV'", "'Inherited'", "'MOD'", "'OR'", "'SHL'", "'SHR'", "'XOR'", 
		"'^^'", "'nil^'"
	};
	public static final int EOF=-1;
	public static final int T__198=198;
	public static final int T__199=199;
	public static final int T__200=200;
	public static final int T__201=201;
	public static final int T__202=202;
	public static final int T__203=203;
	public static final int T__204=204;
	public static final int T__205=205;
	public static final int T__206=206;
	public static final int T__207=207;
	public static final int T__208=208;
	public static final int T__209=209;
	public static final int T__210=210;
	public static final int ABSOLUTE=4;
	public static final int ABSTRACT=5;
	public static final int ADD=6;
	public static final int AND=7;
	public static final int ANSISTRING=8;
	public static final int ARRAY=9;
	public static final int AS=10;
	public static final int ASM=11;
	public static final int ASSEMBLER=12;
	public static final int ASSEMBLY=13;
	public static final int ASSIGN=14;
	public static final int AT=15;
	public static final int AT2=16;
	public static final int AUTOMATED=17;
	public static final int Alpha=18;
	public static final int BEGIN=19;
	public static final int BREAK=20;
	public static final int CASE=21;
	public static final int CDECL=22;
	public static final int CLASS=23;
	public static final int COLON=24;
	public static final int COMMA=25;
	public static final int COMMENT=26;
	public static final int CONST=27;
	public static final int CONSTRUCTOR=28;
	public static final int CONTAINS=29;
	public static final int CONTINUE=30;
	public static final int ControlChar=31;
	public static final int DEFAULT=32;
	public static final int DELAYED=33;
	public static final int DEPRECATED=34;
	public static final int DESTRUCTOR=35;
	public static final int DISPID=36;
	public static final int DISPINTERFACE=37;
	public static final int DIV=38;
	public static final int DO=39;
	public static final int DOT=40;
	public static final int DOTDOT=41;
	public static final int DOWNTO=42;
	public static final int DQ=43;
	public static final int DW=44;
	public static final int DYNAMIC=45;
	public static final int Digit=46;
	public static final int Digitseq=47;
	public static final int ELSE=48;
	public static final int END=49;
	public static final int EQUAL=50;
	public static final int EXCEPT=51;
	public static final int EXIT=52;
	public static final int EXPERIMENTAL=53;
	public static final int EXPORT=54;
	public static final int EXPORTS=55;
	public static final int EXTERNAL=56;
	public static final int FALSE=57;
	public static final int FAR=58;
	public static final int FILE=59;
	public static final int FINAL=60;
	public static final int FINALIZATION=61;
	public static final int FINALLY=62;
	public static final int FOR=63;
	public static final int FORWARD=64;
	public static final int FUNCTION=65;
	public static final int GE=66;
	public static final int GOTO=67;
	public static final int GT=68;
	public static final int HELPER=69;
	public static final int Hexdigit=70;
	public static final int Hexdigitseq=71;
	public static final int IF=72;
	public static final int IMPLEMENTATION=73;
	public static final int IMPLEMENTS=74;
	public static final int IN=75;
	public static final int INDEX=76;
	public static final int INHERITED=77;
	public static final int INITIALIZATION=78;
	public static final int INLINE=79;
	public static final int INTERFACE=80;
	public static final int IS=81;
	public static final int LABEL=82;
	public static final int LBRACK=83;
	public static final int LBRACK2=84;
	public static final int LCURLY=85;
	public static final int LE=86;
	public static final int LIBRARY=87;
	public static final int LOCAL=88;
	public static final int LPAREN=89;
	public static final int LT=90;
	public static final int MESSAGE=91;
	public static final int MINUS=92;
	public static final int MOD=93;
	public static final int NAME=94;
	public static final int NEAR=95;
	public static final int NIL=96;
	public static final int NODEFAULT=97;
	public static final int NOT=98;
	public static final int NOT_EQUAL=99;
	public static final int OBJECT=100;
	public static final int OF=101;
	public static final int ON=102;
	public static final int OPERATOR=103;
	public static final int OR=104;
	public static final int OUT=105;
	public static final int OVERLOAD=106;
	public static final int OVERRIDE=107;
	public static final int PACKAGE=108;
	public static final int PACKED=109;
	public static final int PASCAL=110;
	public static final int PLATFORM=111;
	public static final int PLUS=112;
	public static final int POINTER=113;
	public static final int POINTER2=114;
	public static final int PRIVATE=115;
	public static final int PROCEDURE=116;
	public static final int PROGRAM=117;
	public static final int PROPERTY=118;
	public static final int PROTECTED=119;
	public static final int PUBLIC=120;
	public static final int PUBLISHED=121;
	public static final int QuotedString=122;
	public static final int RAISE=123;
	public static final int RBRACK=124;
	public static final int RBRACK2=125;
	public static final int RCURLY=126;
	public static final int READ=127;
	public static final int READONLY=128;
	public static final int RECORD=129;
	public static final int REFERENCE=130;
	public static final int REGISTER=131;
	public static final int REINTRODUCE=132;
	public static final int REMOVE=133;
	public static final int REPEAT=134;
	public static final int REQUIRES=135;
	public static final int RESIDENT=136;
	public static final int RESOURCESTRING=137;
	public static final int RPAREN=138;
	public static final int SAFECALL=139;
	public static final int SEALED=140;
	public static final int SEMI=141;
	public static final int SET=142;
	public static final int SHL=143;
	public static final int SHR=144;
	public static final int SLASH=145;
	public static final int STAR=146;
	public static final int STATIC=147;
	public static final int STDCALL=148;
	public static final int STORED=149;
	public static final int STRICT=150;
	public static final int STRING=151;
	public static final int THEN=152;
	public static final int THREADVAR=153;
	public static final int TO=154;
	public static final int TRUE=155;
	public static final int TRY=156;
	public static final int TYPE=157;
	public static final int TkAnonymousExpression=158;
	public static final int TkClass=159;
	public static final int TkClassField=160;
	public static final int TkClassOfType=161;
	public static final int TkClassParents=162;
	public static final int TkCustomAttribute=163;
	public static final int TkCustomAttributeArgs=164;
	public static final int TkFunctionArgs=165;
	public static final int TkFunctionBody=166;
	public static final int TkFunctionName=167;
	public static final int TkFunctionReturn=168;
	public static final int TkGlobalFunction=169;
	public static final int TkGuid=170;
	public static final int TkHexNum=171;
	public static final int TkIdentifier=172;
	public static final int TkIntNum=173;
	public static final int TkInterface=174;
	public static final int TkNewType=175;
	public static final int TkObject=176;
	public static final int TkRealNum=177;
	public static final int TkRecord=178;
	public static final int TkRecordHelper=179;
	public static final int TkVariableIdents=180;
	public static final int TkVariableParam=181;
	public static final int TkVariableType=182;
	public static final int UNIT=183;
	public static final int UNSAFE=184;
	public static final int UNTIL=185;
	public static final int USES=186;
	public static final int UnicodeBOM=187;
	public static final int VAR=188;
	public static final int VARARGS=189;
	public static final int VARIANT=190;
	public static final int VIRTUAL=191;
	public static final int WHILE=192;
	public static final int WITH=193;
	public static final int WRITE=194;
	public static final int WRITEONLY=195;
	public static final int WS=196;
	public static final int XOR=197;

	// delegates
	public Parser[] getDelegates() {
		return new Parser[] {};
	}

	// delegators


	public DelphiParser(TokenStream input) {
		this(input, new RecognizerSharedState());
	}
	public DelphiParser(TokenStream input, RecognizerSharedState state) {
		super(input, state);
		this.state.ruleMemo = new HashMap[834+1];


	}

	protected TreeAdaptor adaptor = new CommonTreeAdaptor();

	public void setTreeAdaptor(TreeAdaptor adaptor) {
		this.adaptor = adaptor;
	}
	public TreeAdaptor getTreeAdaptor() {
		return adaptor;
	}
	@Override public String[] getTokenNames() { return DelphiParser.tokenNames; }
	@Override public String getGrammarFileName() { return "D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g"; }


	public static class file_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "file"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:79:1: file : ( program | library | unit | packageE );
	public final DelphiParser.file_return file() throws RecognitionException {
		DelphiParser.file_return retval = new DelphiParser.file_return();
		retval.start = input.LT(1);
		int file_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope program1 =null;
		ParserRuleReturnScope library2 =null;
		ParserRuleReturnScope unit3 =null;
		ParserRuleReturnScope packageE4 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:79:30: ( program | library | unit | packageE )
			int alt1=4;
			switch ( input.LA(1) ) {
			case ASM:
			case BEGIN:
			case CLASS:
			case CONST:
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case DOT:
			case EXPORTS:
			case FUNCTION:
			case LABEL:
			case LBRACK:
			case PROCEDURE:
			case PROGRAM:
			case RESOURCESTRING:
			case THREADVAR:
			case TYPE:
			case USES:
			case VAR:
				{
				alt1=1;
				}
				break;
			case LIBRARY:
				{
				alt1=2;
				}
				break;
			case UNIT:
				{
				alt1=3;
				}
				break;
			case PACKAGE:
				{
				alt1=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 1, 0, input);
				throw nvae;
			}
			switch (alt1) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:79:32: program
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_program_in_file93);
					program1=program();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, program1.getTree());

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:79:42: library
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_library_in_file97);
					library2=library();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, library2.getTree());

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:79:52: unit
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_unit_in_file101);
					unit3=unit();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, unit3.getTree());

					}
					break;
				case 4 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:79:59: packageE
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_packageE_in_file105);
					packageE4=packageE();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, packageE4.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 1, file_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "file"


	public static class program_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "program"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:85:1: program : ( programHead )? ( usesFileClause )? block '.' ;
	public final DelphiParser.program_return program() throws RecognitionException {
		DelphiParser.program_return retval = new DelphiParser.program_return();
		retval.start = input.LT(1);
		int program_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal8=null;
		ParserRuleReturnScope programHead5 =null;
		ParserRuleReturnScope usesFileClause6 =null;
		ParserRuleReturnScope block7 =null;

		Object char_literal8_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:85:30: ( ( programHead )? ( usesFileClause )? block '.' )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:85:32: ( programHead )? ( usesFileClause )? block '.'
			{
			root_0 = (Object)adaptor.nil();


			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:85:32: ( programHead )?
			int alt2=2;
			int LA2_0 = input.LA(1);
			if ( (LA2_0==PROGRAM) ) {
				alt2=1;
			}
			switch (alt2) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:85:33: programHead
					{
					pushFollow(FOLLOW_programHead_in_program168);
					programHead5=programHead();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, programHead5.getTree());

					}
					break;

			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:85:47: ( usesFileClause )?
			int alt3=2;
			int LA3_0 = input.LA(1);
			if ( (LA3_0==USES) ) {
				alt3=1;
			}
			switch (alt3) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:85:48: usesFileClause
					{
					pushFollow(FOLLOW_usesFileClause_in_program173);
					usesFileClause6=usesFileClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, usesFileClause6.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_block_in_program177);
			block7=block();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, block7.getTree());

			char_literal8=(Token)match(input,DOT,FOLLOW_DOT_in_program179); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal8_tree = (Object)adaptor.create(char_literal8);
			adaptor.addChild(root_0, char_literal8_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 2, program_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "program"


	public static class programHead_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "programHead"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:87:1: programHead : 'program' namespaceName ( programParmSeq )? ';' ;
	public final DelphiParser.programHead_return programHead() throws RecognitionException {
		DelphiParser.programHead_return retval = new DelphiParser.programHead_return();
		retval.start = input.LT(1);
		int programHead_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal9=null;
		Token char_literal12=null;
		ParserRuleReturnScope namespaceName10 =null;
		ParserRuleReturnScope programParmSeq11 =null;

		Object string_literal9_tree=null;
		Object char_literal12_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:87:30: ( 'program' namespaceName ( programParmSeq )? ';' )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:87:32: 'program' namespaceName ( programParmSeq )? ';'
			{
			root_0 = (Object)adaptor.nil();


			string_literal9=(Token)match(input,PROGRAM,FOLLOW_PROGRAM_in_programHead233); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal9_tree = (Object)adaptor.create(string_literal9);
			adaptor.addChild(root_0, string_literal9_tree);
			}

			pushFollow(FOLLOW_namespaceName_in_programHead235);
			namespaceName10=namespaceName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, namespaceName10.getTree());

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:87:56: ( programParmSeq )?
			int alt4=2;
			int LA4_0 = input.LA(1);
			if ( (LA4_0==LPAREN) ) {
				alt4=1;
			}
			switch (alt4) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:87:57: programParmSeq
					{
					pushFollow(FOLLOW_programParmSeq_in_programHead238);
					programParmSeq11=programParmSeq();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, programParmSeq11.getTree());

					}
					break;

			}

			char_literal12=(Token)match(input,SEMI,FOLLOW_SEMI_in_programHead242); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal12_tree = (Object)adaptor.create(char_literal12);
			adaptor.addChild(root_0, char_literal12_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 3, programHead_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "programHead"


	public static class programParmSeq_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "programParmSeq"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:89:1: programParmSeq : '(' ( ident ( ',' ident )* )? ')' ;
	public final DelphiParser.programParmSeq_return programParmSeq() throws RecognitionException {
		DelphiParser.programParmSeq_return retval = new DelphiParser.programParmSeq_return();
		retval.start = input.LT(1);
		int programParmSeq_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal13=null;
		Token char_literal15=null;
		Token char_literal17=null;
		ParserRuleReturnScope ident14 =null;
		ParserRuleReturnScope ident16 =null;

		Object char_literal13_tree=null;
		Object char_literal15_tree=null;
		Object char_literal17_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:89:30: ( '(' ( ident ( ',' ident )* )? ')' )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:89:32: '(' ( ident ( ',' ident )* )? ')'
			{
			root_0 = (Object)adaptor.nil();


			char_literal13=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_programParmSeq293); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal13_tree = (Object)adaptor.create(char_literal13);
			adaptor.addChild(root_0, char_literal13_tree);
			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:89:36: ( ident ( ',' ident )* )?
			int alt6=2;
			int LA6_0 = input.LA(1);
			if ( (LA6_0==ABSOLUTE||LA6_0==ADD||LA6_0==ANSISTRING||LA6_0==AT||LA6_0==BREAK||(LA6_0 >= CONTAINS && LA6_0 <= CONTINUE)||LA6_0==DEFAULT||LA6_0==DISPID||(LA6_0 >= DQ && LA6_0 <= DW)||LA6_0==EXIT||LA6_0==EXPORT||LA6_0==FALSE||LA6_0==FINAL||LA6_0==HELPER||(LA6_0 >= IMPLEMENTS && LA6_0 <= INDEX)||LA6_0==LOCAL||LA6_0==MESSAGE||LA6_0==NAME||LA6_0==OBJECT||LA6_0==OPERATOR||LA6_0==OUT||LA6_0==POINTER||LA6_0==PRIVATE||LA6_0==PUBLIC||(LA6_0 >= READ && LA6_0 <= READONLY)||(LA6_0 >= REFERENCE && LA6_0 <= REGISTER)||LA6_0==REMOVE||LA6_0==STATIC||(LA6_0 >= STORED && LA6_0 <= STRING)||LA6_0==TRUE||LA6_0==TkIdentifier||LA6_0==UNSAFE||(LA6_0 >= VARARGS && LA6_0 <= VIRTUAL)||(LA6_0 >= WRITE && LA6_0 <= WRITEONLY)||LA6_0==198) ) {
				alt6=1;
			}
			switch (alt6) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:89:37: ident ( ',' ident )*
					{
					pushFollow(FOLLOW_ident_in_programParmSeq296);
					ident14=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident14.getTree());

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:89:43: ( ',' ident )*
					loop5:
					while (true) {
						int alt5=2;
						int LA5_0 = input.LA(1);
						if ( (LA5_0==COMMA) ) {
							alt5=1;
						}

						switch (alt5) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:89:44: ',' ident
							{
							char_literal15=(Token)match(input,COMMA,FOLLOW_COMMA_in_programParmSeq299); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal15_tree = (Object)adaptor.create(char_literal15);
							adaptor.addChild(root_0, char_literal15_tree);
							}

							pushFollow(FOLLOW_ident_in_programParmSeq301);
							ident16=ident();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, ident16.getTree());

							}
							break;

						default :
							break loop5;
						}
					}

					}
					break;

			}

			char_literal17=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_programParmSeq308); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal17_tree = (Object)adaptor.create(char_literal17);
			adaptor.addChild(root_0, char_literal17_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 4, programParmSeq_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "programParmSeq"


	public static class library_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "library"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:91:1: library : libraryHead ( usesFileClause )? block '.' ;
	public final DelphiParser.library_return library() throws RecognitionException {
		DelphiParser.library_return retval = new DelphiParser.library_return();
		retval.start = input.LT(1);
		int library_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal21=null;
		ParserRuleReturnScope libraryHead18 =null;
		ParserRuleReturnScope usesFileClause19 =null;
		ParserRuleReturnScope block20 =null;

		Object char_literal21_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:91:30: ( libraryHead ( usesFileClause )? block '.' )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:91:32: libraryHead ( usesFileClause )? block '.'
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_libraryHead_in_library366);
			libraryHead18=libraryHead();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, libraryHead18.getTree());

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:91:44: ( usesFileClause )?
			int alt7=2;
			int LA7_0 = input.LA(1);
			if ( (LA7_0==USES) ) {
				alt7=1;
			}
			switch (alt7) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:91:45: usesFileClause
					{
					pushFollow(FOLLOW_usesFileClause_in_library369);
					usesFileClause19=usesFileClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, usesFileClause19.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_block_in_library373);
			block20=block();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, block20.getTree());

			char_literal21=(Token)match(input,DOT,FOLLOW_DOT_in_library375); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal21_tree = (Object)adaptor.create(char_literal21);
			adaptor.addChild(root_0, char_literal21_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 5, library_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "library"


	public static class libraryHead_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "libraryHead"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:93:1: libraryHead : 'library' namespaceName ( hintingDirective )* ';' -> ^( 'library' namespaceName ) ;
	public final DelphiParser.libraryHead_return libraryHead() throws RecognitionException {
		DelphiParser.libraryHead_return retval = new DelphiParser.libraryHead_return();
		retval.start = input.LT(1);
		int libraryHead_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal22=null;
		Token char_literal25=null;
		ParserRuleReturnScope namespaceName23 =null;
		ParserRuleReturnScope hintingDirective24 =null;

		Object string_literal22_tree=null;
		Object char_literal25_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_LIBRARY=new RewriteRuleTokenStream(adaptor,"token LIBRARY");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_namespaceName=new RewriteRuleSubtreeStream(adaptor,"rule namespaceName");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:93:30: ( 'library' namespaceName ( hintingDirective )* ';' -> ^( 'library' namespaceName ) )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:93:32: 'library' namespaceName ( hintingDirective )* ';'
			{
			string_literal22=(Token)match(input,LIBRARY,FOLLOW_LIBRARY_in_libraryHead429); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LIBRARY.add(string_literal22);

			pushFollow(FOLLOW_namespaceName_in_libraryHead431);
			namespaceName23=namespaceName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespaceName.add(namespaceName23.getTree());
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:93:56: ( hintingDirective )*
			loop8:
			while (true) {
				int alt8=2;
				int LA8_0 = input.LA(1);
				if ( (LA8_0==DEPRECATED||LA8_0==EXPERIMENTAL||LA8_0==LIBRARY||LA8_0==PLATFORM) ) {
					alt8=1;
				}

				switch (alt8) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:93:57: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_libraryHead434);
					hintingDirective24=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective24.getTree());
					}
					break;

				default :
					break loop8;
				}
			}

			char_literal25=(Token)match(input,SEMI,FOLLOW_SEMI_in_libraryHead438); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal25);

			// AST REWRITE
			// elements: LIBRARY, namespaceName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 93:80: -> ^( 'library' namespaceName )
			{
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:93:83: ^( 'library' namespaceName )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_LIBRARY.nextNode(), root_1);
				adaptor.addChild(root_1, stream_namespaceName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 6, libraryHead_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "libraryHead"


	public static class packageE_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "packageE"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:95:1: packageE : packageHead requiresClause ( containsClause )? 'end' '.' ;
	public final DelphiParser.packageE_return packageE() throws RecognitionException {
		DelphiParser.packageE_return retval = new DelphiParser.packageE_return();
		retval.start = input.LT(1);
		int packageE_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal29=null;
		Token char_literal30=null;
		ParserRuleReturnScope packageHead26 =null;
		ParserRuleReturnScope requiresClause27 =null;
		ParserRuleReturnScope containsClause28 =null;

		Object string_literal29_tree=null;
		Object char_literal30_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:95:30: ( packageHead requiresClause ( containsClause )? 'end' '.' )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:95:32: packageHead requiresClause ( containsClause )? 'end' '.'
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_packageHead_in_packageE503);
			packageHead26=packageHead();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, packageHead26.getTree());

			pushFollow(FOLLOW_requiresClause_in_packageE505);
			requiresClause27=requiresClause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, requiresClause27.getTree());

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:95:59: ( containsClause )?
			int alt9=2;
			int LA9_0 = input.LA(1);
			if ( (LA9_0==CONTAINS) ) {
				alt9=1;
			}
			switch (alt9) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:95:60: containsClause
					{
					pushFollow(FOLLOW_containsClause_in_packageE508);
					containsClause28=containsClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, containsClause28.getTree());

					}
					break;

			}

			string_literal29=(Token)match(input,END,FOLLOW_END_in_packageE512); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal29_tree = (Object)adaptor.create(string_literal29);
			adaptor.addChild(root_0, string_literal29_tree);
			}

			char_literal30=(Token)match(input,DOT,FOLLOW_DOT_in_packageE514); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal30_tree = (Object)adaptor.create(char_literal30);
			adaptor.addChild(root_0, char_literal30_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 7, packageE_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "packageE"


	public static class packageHead_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "packageHead"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:97:1: packageHead : 'package' namespaceName ';' ;
	public final DelphiParser.packageHead_return packageHead() throws RecognitionException {
		DelphiParser.packageHead_return retval = new DelphiParser.packageHead_return();
		retval.start = input.LT(1);
		int packageHead_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal31=null;
		Token char_literal33=null;
		ParserRuleReturnScope namespaceName32 =null;

		Object string_literal31_tree=null;
		Object char_literal33_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:97:30: ( 'package' namespaceName ';' )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:97:32: 'package' namespaceName ';'
			{
			root_0 = (Object)adaptor.nil();


			string_literal31=(Token)match(input,PACKAGE,FOLLOW_PACKAGE_in_packageHead568); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal31_tree = (Object)adaptor.create(string_literal31);
			adaptor.addChild(root_0, string_literal31_tree);
			}

			pushFollow(FOLLOW_namespaceName_in_packageHead570);
			namespaceName32=namespaceName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, namespaceName32.getTree());

			char_literal33=(Token)match(input,SEMI,FOLLOW_SEMI_in_packageHead572); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal33_tree = (Object)adaptor.create(char_literal33);
			adaptor.addChild(root_0, char_literal33_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 8, packageHead_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "packageHead"


	public static class unit_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unit"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:99:1: unit : unitHead unitInterface unitImplementation unitBlock '.' ;
	public final DelphiParser.unit_return unit() throws RecognitionException {
		DelphiParser.unit_return retval = new DelphiParser.unit_return();
		retval.start = input.LT(1);
		int unit_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal38=null;
		ParserRuleReturnScope unitHead34 =null;
		ParserRuleReturnScope unitInterface35 =null;
		ParserRuleReturnScope unitImplementation36 =null;
		ParserRuleReturnScope unitBlock37 =null;

		Object char_literal38_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:99:30: ( unitHead unitInterface unitImplementation unitBlock '.' )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:99:32: unitHead unitInterface unitImplementation unitBlock '.'
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_unitHead_in_unit633);
			unitHead34=unitHead();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, unitHead34.getTree());

			pushFollow(FOLLOW_unitInterface_in_unit635);
			unitInterface35=unitInterface();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, unitInterface35.getTree());

			pushFollow(FOLLOW_unitImplementation_in_unit637);
			unitImplementation36=unitImplementation();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, unitImplementation36.getTree());

			pushFollow(FOLLOW_unitBlock_in_unit639);
			unitBlock37=unitBlock();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, unitBlock37.getTree());

			char_literal38=(Token)match(input,DOT,FOLLOW_DOT_in_unit641); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal38_tree = (Object)adaptor.create(char_literal38);
			adaptor.addChild(root_0, char_literal38_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 9, unit_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unit"


	public static class unitHead_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unitHead"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:101:1: unitHead : 'unit' namespaceName ( hintingDirective )* ';' -> ^( 'unit' namespaceName ( hintingDirective )* ) ;
	public final DelphiParser.unitHead_return unitHead() throws RecognitionException {
		DelphiParser.unitHead_return retval = new DelphiParser.unitHead_return();
		retval.start = input.LT(1);
		int unitHead_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal39=null;
		Token char_literal42=null;
		ParserRuleReturnScope namespaceName40 =null;
		ParserRuleReturnScope hintingDirective41 =null;

		Object string_literal39_tree=null;
		Object char_literal42_tree=null;
		RewriteRuleTokenStream stream_UNIT=new RewriteRuleTokenStream(adaptor,"token UNIT");
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_namespaceName=new RewriteRuleSubtreeStream(adaptor,"rule namespaceName");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:101:30: ( 'unit' namespaceName ( hintingDirective )* ';' -> ^( 'unit' namespaceName ( hintingDirective )* ) )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:101:32: 'unit' namespaceName ( hintingDirective )* ';'
			{
			string_literal39=(Token)match(input,UNIT,FOLLOW_UNIT_in_unitHead698); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_UNIT.add(string_literal39);

			pushFollow(FOLLOW_namespaceName_in_unitHead700);
			namespaceName40=namespaceName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespaceName.add(namespaceName40.getTree());
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:101:53: ( hintingDirective )*
			loop10:
			while (true) {
				int alt10=2;
				int LA10_0 = input.LA(1);
				if ( (LA10_0==DEPRECATED||LA10_0==EXPERIMENTAL||LA10_0==LIBRARY||LA10_0==PLATFORM) ) {
					alt10=1;
				}

				switch (alt10) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:101:54: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_unitHead703);
					hintingDirective41=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective41.getTree());
					}
					break;

				default :
					break loop10;
				}
			}

			char_literal42=(Token)match(input,SEMI,FOLLOW_SEMI_in_unitHead707); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal42);

			// AST REWRITE
			// elements: UNIT, namespaceName, hintingDirective
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 101:77: -> ^( 'unit' namespaceName ( hintingDirective )* )
			{
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:101:80: ^( 'unit' namespaceName ( hintingDirective )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_UNIT.nextNode(), root_1);
				adaptor.addChild(root_1, stream_namespaceName.nextTree());
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:101:103: ( hintingDirective )*
				while ( stream_hintingDirective.hasNext() ) {
					adaptor.addChild(root_1, stream_hintingDirective.nextTree());
				}
				stream_hintingDirective.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 10, unitHead_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unitHead"


	public static class unitInterface_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unitInterface"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:103:1: unitInterface : 'interface' ( usesClause )? ( interfaceDecl )* -> ^( 'interface' ( usesClause )? ( interfaceDecl )* ) ;
	public final DelphiParser.unitInterface_return unitInterface() throws RecognitionException {
		DelphiParser.unitInterface_return retval = new DelphiParser.unitInterface_return();
		retval.start = input.LT(1);
		int unitInterface_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal43=null;
		ParserRuleReturnScope usesClause44 =null;
		ParserRuleReturnScope interfaceDecl45 =null;

		Object string_literal43_tree=null;
		RewriteRuleTokenStream stream_INTERFACE=new RewriteRuleTokenStream(adaptor,"token INTERFACE");
		RewriteRuleSubtreeStream stream_interfaceDecl=new RewriteRuleSubtreeStream(adaptor,"rule interfaceDecl");
		RewriteRuleSubtreeStream stream_usesClause=new RewriteRuleSubtreeStream(adaptor,"rule usesClause");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:103:30: ( 'interface' ( usesClause )? ( interfaceDecl )* -> ^( 'interface' ( usesClause )? ( interfaceDecl )* ) )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:103:32: 'interface' ( usesClause )? ( interfaceDecl )*
			{
			string_literal43=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_unitInterface772); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_INTERFACE.add(string_literal43);

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:103:44: ( usesClause )?
			int alt11=2;
			int LA11_0 = input.LA(1);
			if ( (LA11_0==USES) ) {
				alt11=1;
			}
			switch (alt11) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:103:45: usesClause
					{
					pushFollow(FOLLOW_usesClause_in_unitInterface775);
					usesClause44=usesClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_usesClause.add(usesClause44.getTree());
					}
					break;

			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:103:58: ( interfaceDecl )*
			loop12:
			while (true) {
				int alt12=2;
				int LA12_0 = input.LA(1);
				if ( (LA12_0==CLASS||(LA12_0 >= CONST && LA12_0 <= CONSTRUCTOR)||LA12_0==DESTRUCTOR||LA12_0==EXPORTS||LA12_0==FUNCTION||LA12_0==LBRACK||LA12_0==PROCEDURE||LA12_0==RESOURCESTRING||LA12_0==THREADVAR||LA12_0==TYPE||LA12_0==VAR) ) {
					alt12=1;
				}

				switch (alt12) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:103:59: interfaceDecl
					{
					pushFollow(FOLLOW_interfaceDecl_in_unitInterface780);
					interfaceDecl45=interfaceDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_interfaceDecl.add(interfaceDecl45.getTree());
					}
					break;

				default :
					break loop12;
				}
			}

			// AST REWRITE
			// elements: usesClause, INTERFACE, interfaceDecl
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 103:75: -> ^( 'interface' ( usesClause )? ( interfaceDecl )* )
			{
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:103:78: ^( 'interface' ( usesClause )? ( interfaceDecl )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_INTERFACE.nextNode(), root_1);
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:103:92: ( usesClause )?
				if ( stream_usesClause.hasNext() ) {
					adaptor.addChild(root_1, stream_usesClause.nextTree());
				}
				stream_usesClause.reset();

				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:103:106: ( interfaceDecl )*
				while ( stream_interfaceDecl.hasNext() ) {
					adaptor.addChild(root_1, stream_interfaceDecl.nextTree());
				}
				stream_interfaceDecl.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 11, unitInterface_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unitInterface"


	public static class unitImplementation_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unitImplementation"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:105:1: unitImplementation : 'implementation' ( usesClause )? ( declSection )* -> ^( 'implementation' ( usesClause )? ( declSection )* ) ;
	public final DelphiParser.unitImplementation_return unitImplementation() throws RecognitionException {
		DelphiParser.unitImplementation_return retval = new DelphiParser.unitImplementation_return();
		retval.start = input.LT(1);
		int unitImplementation_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal46=null;
		ParserRuleReturnScope usesClause47 =null;
		ParserRuleReturnScope declSection48 =null;

		Object string_literal46_tree=null;
		RewriteRuleTokenStream stream_IMPLEMENTATION=new RewriteRuleTokenStream(adaptor,"token IMPLEMENTATION");
		RewriteRuleSubtreeStream stream_declSection=new RewriteRuleSubtreeStream(adaptor,"rule declSection");
		RewriteRuleSubtreeStream stream_usesClause=new RewriteRuleSubtreeStream(adaptor,"rule usesClause");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:105:30: ( 'implementation' ( usesClause )? ( declSection )* -> ^( 'implementation' ( usesClause )? ( declSection )* ) )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:105:32: 'implementation' ( usesClause )? ( declSection )*
			{
			string_literal46=(Token)match(input,IMPLEMENTATION,FOLLOW_IMPLEMENTATION_in_unitImplementation845); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_IMPLEMENTATION.add(string_literal46);

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:105:49: ( usesClause )?
			int alt13=2;
			int LA13_0 = input.LA(1);
			if ( (LA13_0==USES) ) {
				alt13=1;
			}
			switch (alt13) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:105:50: usesClause
					{
					pushFollow(FOLLOW_usesClause_in_unitImplementation848);
					usesClause47=usesClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_usesClause.add(usesClause47.getTree());
					}
					break;

			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:105:63: ( declSection )*
			loop14:
			while (true) {
				int alt14=2;
				int LA14_0 = input.LA(1);
				if ( (LA14_0==CLASS||(LA14_0 >= CONST && LA14_0 <= CONSTRUCTOR)||LA14_0==DESTRUCTOR||LA14_0==EXPORTS||LA14_0==FUNCTION||(LA14_0 >= LABEL && LA14_0 <= LBRACK)||LA14_0==PROCEDURE||LA14_0==RESOURCESTRING||LA14_0==THREADVAR||LA14_0==TYPE||LA14_0==VAR) ) {
					alt14=1;
				}

				switch (alt14) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:105:64: declSection
					{
					pushFollow(FOLLOW_declSection_in_unitImplementation853);
					declSection48=declSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_declSection.add(declSection48.getTree());
					}
					break;

				default :
					break loop14;
				}
			}

			// AST REWRITE
			// elements: usesClause, declSection, IMPLEMENTATION
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 105:78: -> ^( 'implementation' ( usesClause )? ( declSection )* )
			{
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:105:81: ^( 'implementation' ( usesClause )? ( declSection )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_IMPLEMENTATION.nextNode(), root_1);
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:105:100: ( usesClause )?
				if ( stream_usesClause.hasNext() ) {
					adaptor.addChild(root_1, stream_usesClause.nextTree());
				}
				stream_usesClause.reset();

				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:105:114: ( declSection )*
				while ( stream_declSection.hasNext() ) {
					adaptor.addChild(root_1, stream_declSection.nextTree());
				}
				stream_declSection.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 12, unitImplementation_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unitImplementation"


	public static class unitBlock_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unitBlock"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:107:1: unitBlock : ( unitInitialization 'end' | compoundStatement | 'end' );
	public final DelphiParser.unitBlock_return unitBlock() throws RecognitionException {
		DelphiParser.unitBlock_return retval = new DelphiParser.unitBlock_return();
		retval.start = input.LT(1);
		int unitBlock_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal50=null;
		Token string_literal52=null;
		ParserRuleReturnScope unitInitialization49 =null;
		ParserRuleReturnScope compoundStatement51 =null;

		Object string_literal50_tree=null;
		Object string_literal52_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:107:30: ( unitInitialization 'end' | compoundStatement | 'end' )
			int alt15=3;
			switch ( input.LA(1) ) {
			case INITIALIZATION:
				{
				alt15=1;
				}
				break;
			case BEGIN:
				{
				alt15=2;
				}
				break;
			case END:
				{
				alt15=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 15, 0, input);
				throw nvae;
			}
			switch (alt15) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:107:32: unitInitialization 'end'
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_unitInitialization_in_unitBlock927);
					unitInitialization49=unitInitialization();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, unitInitialization49.getTree());

					string_literal50=(Token)match(input,END,FOLLOW_END_in_unitBlock929); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal50_tree = (Object)adaptor.create(string_literal50);
					adaptor.addChild(root_0, string_literal50_tree);
					}

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:108:32: compoundStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_compoundStatement_in_unitBlock962);
					compoundStatement51=compoundStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, compoundStatement51.getTree());

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:109:32: 'end'
					{
					root_0 = (Object)adaptor.nil();


					string_literal52=(Token)match(input,END,FOLLOW_END_in_unitBlock995); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal52_tree = (Object)adaptor.create(string_literal52);
					adaptor.addChild(root_0, string_literal52_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 13, unitBlock_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unitBlock"


	public static class unitInitialization_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unitInitialization"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:111:1: unitInitialization : 'initialization' statementList ( unitFinalization )? ;
	public final DelphiParser.unitInitialization_return unitInitialization() throws RecognitionException {
		DelphiParser.unitInitialization_return retval = new DelphiParser.unitInitialization_return();
		retval.start = input.LT(1);
		int unitInitialization_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal53=null;
		ParserRuleReturnScope statementList54 =null;
		ParserRuleReturnScope unitFinalization55 =null;

		Object string_literal53_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:111:30: ( 'initialization' statementList ( unitFinalization )? )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:111:32: 'initialization' statementList ( unitFinalization )?
			{
			root_0 = (Object)adaptor.nil();


			string_literal53=(Token)match(input,INITIALIZATION,FOLLOW_INITIALIZATION_in_unitInitialization1042); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal53_tree = (Object)adaptor.create(string_literal53);
			adaptor.addChild(root_0, string_literal53_tree);
			}

			pushFollow(FOLLOW_statementList_in_unitInitialization1044);
			statementList54=statementList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList54.getTree());

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:111:63: ( unitFinalization )?
			int alt16=2;
			int LA16_0 = input.LA(1);
			if ( (LA16_0==FINALIZATION) ) {
				alt16=1;
			}
			switch (alt16) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:111:64: unitFinalization
					{
					pushFollow(FOLLOW_unitFinalization_in_unitInitialization1047);
					unitFinalization55=unitFinalization();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, unitFinalization55.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 14, unitInitialization_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unitInitialization"


	public static class unitFinalization_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unitFinalization"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:113:1: unitFinalization : 'finalization' statementList ;
	public final DelphiParser.unitFinalization_return unitFinalization() throws RecognitionException {
		DelphiParser.unitFinalization_return retval = new DelphiParser.unitFinalization_return();
		retval.start = input.LT(1);
		int unitFinalization_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal56=null;
		ParserRuleReturnScope statementList57 =null;

		Object string_literal56_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:113:30: ( 'finalization' statementList )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:113:32: 'finalization' statementList
			{
			root_0 = (Object)adaptor.nil();


			string_literal56=(Token)match(input,FINALIZATION,FOLLOW_FINALIZATION_in_unitFinalization1098); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal56_tree = (Object)adaptor.create(string_literal56);
			adaptor.addChild(root_0, string_literal56_tree);
			}

			pushFollow(FOLLOW_statementList_in_unitFinalization1100);
			statementList57=statementList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList57.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 15, unitFinalization_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unitFinalization"


	public static class containsClause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "containsClause"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:118:1: containsClause : 'contains' namespaceFileNameList ;
	public final DelphiParser.containsClause_return containsClause() throws RecognitionException {
		DelphiParser.containsClause_return retval = new DelphiParser.containsClause_return();
		retval.start = input.LT(1);
		int containsClause_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal58=null;
		ParserRuleReturnScope namespaceFileNameList59 =null;

		Object string_literal58_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:118:30: ( 'contains' namespaceFileNameList )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:118:32: 'contains' namespaceFileNameList
			{
			root_0 = (Object)adaptor.nil();


			string_literal58=(Token)match(input,CONTAINS,FOLLOW_CONTAINS_in_containsClause1154); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal58_tree = (Object)adaptor.create(string_literal58);
			adaptor.addChild(root_0, string_literal58_tree);
			}

			pushFollow(FOLLOW_namespaceFileNameList_in_containsClause1156);
			namespaceFileNameList59=namespaceFileNameList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, namespaceFileNameList59.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 16, containsClause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "containsClause"


	public static class requiresClause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "requiresClause"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:120:1: requiresClause : 'requires' namespaceNameList ;
	public final DelphiParser.requiresClause_return requiresClause() throws RecognitionException {
		DelphiParser.requiresClause_return retval = new DelphiParser.requiresClause_return();
		retval.start = input.LT(1);
		int requiresClause_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal60=null;
		ParserRuleReturnScope namespaceNameList61 =null;

		Object string_literal60_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:120:30: ( 'requires' namespaceNameList )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:120:32: 'requires' namespaceNameList
			{
			root_0 = (Object)adaptor.nil();


			string_literal60=(Token)match(input,REQUIRES,FOLLOW_REQUIRES_in_requiresClause1207); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal60_tree = (Object)adaptor.create(string_literal60);
			adaptor.addChild(root_0, string_literal60_tree);
			}

			pushFollow(FOLLOW_namespaceNameList_in_requiresClause1209);
			namespaceNameList61=namespaceNameList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, namespaceNameList61.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 17, requiresClause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "requiresClause"


	public static class usesClause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "usesClause"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:122:1: usesClause : 'uses' namespaceNameList -> ^( 'uses' namespaceNameList ) ;
	public final DelphiParser.usesClause_return usesClause() throws RecognitionException {
		DelphiParser.usesClause_return retval = new DelphiParser.usesClause_return();
		retval.start = input.LT(1);
		int usesClause_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal62=null;
		ParserRuleReturnScope namespaceNameList63 =null;

		Object string_literal62_tree=null;
		RewriteRuleTokenStream stream_USES=new RewriteRuleTokenStream(adaptor,"token USES");
		RewriteRuleSubtreeStream stream_namespaceNameList=new RewriteRuleSubtreeStream(adaptor,"rule namespaceNameList");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:122:30: ( 'uses' namespaceNameList -> ^( 'uses' namespaceNameList ) )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:122:32: 'uses' namespaceNameList
			{
			string_literal62=(Token)match(input,USES,FOLLOW_USES_in_usesClause1264); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_USES.add(string_literal62);

			pushFollow(FOLLOW_namespaceNameList_in_usesClause1266);
			namespaceNameList63=namespaceNameList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespaceNameList.add(namespaceNameList63.getTree());
			// AST REWRITE
			// elements: namespaceNameList, USES
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 122:57: -> ^( 'uses' namespaceNameList )
			{
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:122:60: ^( 'uses' namespaceNameList )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_USES.nextNode(), root_1);
				adaptor.addChild(root_1, stream_namespaceNameList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 18, usesClause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "usesClause"


	public static class usesFileClause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "usesFileClause"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:124:1: usesFileClause : 'uses' namespaceFileNameList -> ^( 'uses' namespaceFileNameList ) ;
	public final DelphiParser.usesFileClause_return usesFileClause() throws RecognitionException {
		DelphiParser.usesFileClause_return retval = new DelphiParser.usesFileClause_return();
		retval.start = input.LT(1);
		int usesFileClause_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal64=null;
		ParserRuleReturnScope namespaceFileNameList65 =null;

		Object string_literal64_tree=null;
		RewriteRuleTokenStream stream_USES=new RewriteRuleTokenStream(adaptor,"token USES");
		RewriteRuleSubtreeStream stream_namespaceFileNameList=new RewriteRuleSubtreeStream(adaptor,"rule namespaceFileNameList");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:124:30: ( 'uses' namespaceFileNameList -> ^( 'uses' namespaceFileNameList ) )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:124:32: 'uses' namespaceFileNameList
			{
			string_literal64=(Token)match(input,USES,FOLLOW_USES_in_usesFileClause1325); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_USES.add(string_literal64);

			pushFollow(FOLLOW_namespaceFileNameList_in_usesFileClause1327);
			namespaceFileNameList65=namespaceFileNameList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespaceFileNameList.add(namespaceFileNameList65.getTree());
			// AST REWRITE
			// elements: namespaceFileNameList, USES
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 124:61: -> ^( 'uses' namespaceFileNameList )
			{
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:124:64: ^( 'uses' namespaceFileNameList )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_USES.nextNode(), root_1);
				adaptor.addChild(root_1, stream_namespaceFileNameList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 19, usesFileClause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "usesFileClause"


	public static class namespaceFileNameList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "namespaceFileNameList"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:1: namespaceFileNameList : namespaceFileName ( ',' namespaceFileName )* ';' -> namespaceFileName ( namespaceFileName )* ;
	public final DelphiParser.namespaceFileNameList_return namespaceFileNameList() throws RecognitionException {
		DelphiParser.namespaceFileNameList_return retval = new DelphiParser.namespaceFileNameList_return();
		retval.start = input.LT(1);
		int namespaceFileNameList_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal67=null;
		Token char_literal69=null;
		ParserRuleReturnScope namespaceFileName66 =null;
		ParserRuleReturnScope namespaceFileName68 =null;

		Object char_literal67_tree=null;
		Object char_literal69_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_namespaceFileName=new RewriteRuleSubtreeStream(adaptor,"rule namespaceFileName");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:30: ( namespaceFileName ( ',' namespaceFileName )* ';' -> namespaceFileName ( namespaceFileName )* )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:32: namespaceFileName ( ',' namespaceFileName )* ';'
			{
			pushFollow(FOLLOW_namespaceFileName_in_namespaceFileNameList1379);
			namespaceFileName66=namespaceFileName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespaceFileName.add(namespaceFileName66.getTree());
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:50: ( ',' namespaceFileName )*
			loop17:
			while (true) {
				int alt17=2;
				int LA17_0 = input.LA(1);
				if ( (LA17_0==COMMA) ) {
					alt17=1;
				}

				switch (alt17) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:51: ',' namespaceFileName
					{
					char_literal67=(Token)match(input,COMMA,FOLLOW_COMMA_in_namespaceFileNameList1382); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(char_literal67);

					pushFollow(FOLLOW_namespaceFileName_in_namespaceFileNameList1384);
					namespaceFileName68=namespaceFileName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_namespaceFileName.add(namespaceFileName68.getTree());
					}
					break;

				default :
					break loop17;
				}
			}

			char_literal69=(Token)match(input,SEMI,FOLLOW_SEMI_in_namespaceFileNameList1388); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal69);

			// AST REWRITE
			// elements: namespaceFileName, namespaceFileName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 126:79: -> namespaceFileName ( namespaceFileName )*
			{
				adaptor.addChild(root_0, stream_namespaceFileName.nextTree());
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:100: ( namespaceFileName )*
				while ( stream_namespaceFileName.hasNext() ) {
					adaptor.addChild(root_0, stream_namespaceFileName.nextTree());
				}
				stream_namespaceFileName.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 20, namespaceFileNameList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "namespaceFileNameList"


	public static class namespaceFileName_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "namespaceFileName"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:128:1: namespaceFileName : namespaceName ( 'in' QuotedString )? -> ^( namespaceName ( QuotedString )? ) ;
	public final DelphiParser.namespaceFileName_return namespaceFileName() throws RecognitionException {
		DelphiParser.namespaceFileName_return retval = new DelphiParser.namespaceFileName_return();
		retval.start = input.LT(1);
		int namespaceFileName_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal71=null;
		Token QuotedString72=null;
		ParserRuleReturnScope namespaceName70 =null;

		Object string_literal71_tree=null;
		Object QuotedString72_tree=null;
		RewriteRuleTokenStream stream_IN=new RewriteRuleTokenStream(adaptor,"token IN");
		RewriteRuleTokenStream stream_QuotedString=new RewriteRuleTokenStream(adaptor,"token QuotedString");
		RewriteRuleSubtreeStream stream_namespaceName=new RewriteRuleSubtreeStream(adaptor,"rule namespaceName");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:128:30: ( namespaceName ( 'in' QuotedString )? -> ^( namespaceName ( QuotedString )? ) )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:128:32: namespaceName ( 'in' QuotedString )?
			{
			pushFollow(FOLLOW_namespaceName_in_namespaceFileName1445);
			namespaceName70=namespaceName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespaceName.add(namespaceName70.getTree());
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:128:46: ( 'in' QuotedString )?
			int alt18=2;
			int LA18_0 = input.LA(1);
			if ( (LA18_0==IN) ) {
				alt18=1;
			}
			switch (alt18) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:128:47: 'in' QuotedString
					{
					string_literal71=(Token)match(input,IN,FOLLOW_IN_in_namespaceFileName1448); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_IN.add(string_literal71);

					QuotedString72=(Token)match(input,QuotedString,FOLLOW_QuotedString_in_namespaceFileName1450); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_QuotedString.add(QuotedString72);

					}
					break;

			}

			// AST REWRITE
			// elements: namespaceName, QuotedString
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 128:67: -> ^( namespaceName ( QuotedString )? )
			{
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:128:70: ^( namespaceName ( QuotedString )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_namespaceName.nextNode(), root_1);
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:128:86: ( QuotedString )?
				if ( stream_QuotedString.hasNext() ) {
					adaptor.addChild(root_1, stream_QuotedString.nextNode());
				}
				stream_QuotedString.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 21, namespaceFileName_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "namespaceFileName"


	public static class namespaceNameList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "namespaceNameList"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:130:1: namespaceNameList : namespaceName ( ',' namespaceName )* ';' -> namespaceName ( namespaceName )* ;
	public final DelphiParser.namespaceNameList_return namespaceNameList() throws RecognitionException {
		DelphiParser.namespaceNameList_return retval = new DelphiParser.namespaceNameList_return();
		retval.start = input.LT(1);
		int namespaceNameList_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal74=null;
		Token char_literal76=null;
		ParserRuleReturnScope namespaceName73 =null;
		ParserRuleReturnScope namespaceName75 =null;

		Object char_literal74_tree=null;
		Object char_literal76_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_namespaceName=new RewriteRuleSubtreeStream(adaptor,"rule namespaceName");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:130:30: ( namespaceName ( ',' namespaceName )* ';' -> namespaceName ( namespaceName )* )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:130:32: namespaceName ( ',' namespaceName )* ';'
			{
			pushFollow(FOLLOW_namespaceName_in_namespaceNameList1511);
			namespaceName73=namespaceName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespaceName.add(namespaceName73.getTree());
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:130:46: ( ',' namespaceName )*
			loop19:
			while (true) {
				int alt19=2;
				int LA19_0 = input.LA(1);
				if ( (LA19_0==COMMA) ) {
					alt19=1;
				}

				switch (alt19) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:130:47: ',' namespaceName
					{
					char_literal74=(Token)match(input,COMMA,FOLLOW_COMMA_in_namespaceNameList1514); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(char_literal74);

					pushFollow(FOLLOW_namespaceName_in_namespaceNameList1516);
					namespaceName75=namespaceName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_namespaceName.add(namespaceName75.getTree());
					}
					break;

				default :
					break loop19;
				}
			}

			char_literal76=(Token)match(input,SEMI,FOLLOW_SEMI_in_namespaceNameList1520); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal76);

			// AST REWRITE
			// elements: namespaceName, namespaceName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 130:71: -> namespaceName ( namespaceName )*
			{
				adaptor.addChild(root_0, stream_namespaceName.nextTree());
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:130:88: ( namespaceName )*
				while ( stream_namespaceName.hasNext() ) {
					adaptor.addChild(root_0, stream_namespaceName.nextTree());
				}
				stream_namespaceName.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 22, namespaceNameList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "namespaceNameList"


	public static class block_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "block"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:135:1: block : ( declSection )* ( blockBody )? ;
	public final DelphiParser.block_return block() throws RecognitionException {
		DelphiParser.block_return retval = new DelphiParser.block_return();
		retval.start = input.LT(1);
		int block_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope declSection77 =null;
		ParserRuleReturnScope blockBody78 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:135:30: ( ( declSection )* ( blockBody )? )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:135:32: ( declSection )* ( blockBody )?
			{
			root_0 = (Object)adaptor.nil();


			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:135:32: ( declSection )*
			loop20:
			while (true) {
				int alt20=2;
				switch ( input.LA(1) ) {
				case PROCEDURE:
					{
					int LA20_2 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case FUNCTION:
					{
					int LA20_3 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case LBRACK:
					{
					int LA20_4 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case LABEL:
					{
					int LA20_5 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case CONST:
				case RESOURCESTRING:
					{
					int LA20_6 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case TYPE:
					{
					int LA20_7 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case THREADVAR:
				case VAR:
					{
					int LA20_8 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case CLASS:
					{
					int LA20_9 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case CONSTRUCTOR:
				case DESTRUCTOR:
					{
					int LA20_10 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case EXPORTS:
					{
					int LA20_11 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				}
				switch (alt20) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:135:33: declSection
					{
					pushFollow(FOLLOW_declSection_in_block1593);
					declSection77=declSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, declSection77.getTree());

					}
					break;

				default :
					break loop20;
				}
			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:135:47: ( blockBody )?
			int alt21=2;
			int LA21_0 = input.LA(1);
			if ( (LA21_0==BEGIN) ) {
				int LA21_1 = input.LA(2);
				if ( (synpred24_Delphi()) ) {
					alt21=1;
				}
			}
			else if ( (LA21_0==ASM) ) {
				int LA21_2 = input.LA(2);
				if ( (synpred24_Delphi()) ) {
					alt21=1;
				}
			}
			switch (alt21) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:135:48: blockBody
					{
					pushFollow(FOLLOW_blockBody_in_block1598);
					blockBody78=blockBody();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, blockBody78.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 23, block_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "block"


	public static class blockBody_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "blockBody"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:137:1: blockBody : ( compoundStatement | assemblerStatement );
	public final DelphiParser.blockBody_return blockBody() throws RecognitionException {
		DelphiParser.blockBody_return retval = new DelphiParser.blockBody_return();
		retval.start = input.LT(1);
		int blockBody_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope compoundStatement79 =null;
		ParserRuleReturnScope assemblerStatement80 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:137:30: ( compoundStatement | assemblerStatement )
			int alt22=2;
			int LA22_0 = input.LA(1);
			if ( (LA22_0==BEGIN) ) {
				alt22=1;
			}
			else if ( (LA22_0==ASM) ) {
				alt22=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 22, 0, input);
				throw nvae;
			}

			switch (alt22) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:137:32: compoundStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_compoundStatement_in_blockBody1656);
					compoundStatement79=compoundStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, compoundStatement79.getTree());

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:138:32: assemblerStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_assemblerStatement_in_blockBody1689);
					assemblerStatement80=assemblerStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, assemblerStatement80.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 24, blockBody_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "blockBody"


	public static class declSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "declSection"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:140:1: declSection : ( labelDeclSection | constSection | typeSection | varSection | methodDecl | procDecl | exportsSection );
	public final DelphiParser.declSection_return declSection() throws RecognitionException {
		DelphiParser.declSection_return retval = new DelphiParser.declSection_return();
		retval.start = input.LT(1);
		int declSection_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope labelDeclSection81 =null;
		ParserRuleReturnScope constSection82 =null;
		ParserRuleReturnScope typeSection83 =null;
		ParserRuleReturnScope varSection84 =null;
		ParserRuleReturnScope methodDecl85 =null;
		ParserRuleReturnScope procDecl86 =null;
		ParserRuleReturnScope exportsSection87 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:140:30: ( labelDeclSection | constSection | typeSection | varSection | methodDecl | procDecl | exportsSection )
			int alt23=7;
			switch ( input.LA(1) ) {
			case LABEL:
				{
				alt23=1;
				}
				break;
			case CONST:
			case RESOURCESTRING:
				{
				alt23=2;
				}
				break;
			case TYPE:
				{
				alt23=3;
				}
				break;
			case THREADVAR:
			case VAR:
				{
				alt23=4;
				}
				break;
			case LBRACK:
				{
				int LA23_5 = input.LA(2);
				if ( (synpred30_Delphi()) ) {
					alt23=5;
				}
				else if ( (synpred31_Delphi()) ) {
					alt23=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 23, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CLASS:
			case CONSTRUCTOR:
			case DESTRUCTOR:
				{
				alt23=5;
				}
				break;
			case PROCEDURE:
				{
				int LA23_7 = input.LA(2);
				if ( (synpred30_Delphi()) ) {
					alt23=5;
				}
				else if ( (synpred31_Delphi()) ) {
					alt23=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 23, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case FUNCTION:
				{
				int LA23_8 = input.LA(2);
				if ( (synpred30_Delphi()) ) {
					alt23=5;
				}
				else if ( (synpred31_Delphi()) ) {
					alt23=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 23, 8, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EXPORTS:
				{
				alt23=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 23, 0, input);
				throw nvae;
			}
			switch (alt23) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:140:32: labelDeclSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_labelDeclSection_in_declSection1743);
					labelDeclSection81=labelDeclSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, labelDeclSection81.getTree());

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:141:32: constSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_constSection_in_declSection1776);
					constSection82=constSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constSection82.getTree());

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:142:32: typeSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_typeSection_in_declSection1809);
					typeSection83=typeSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeSection83.getTree());

					}
					break;
				case 4 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:143:32: varSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_varSection_in_declSection1842);
					varSection84=varSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, varSection84.getTree());

					}
					break;
				case 5 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:144:32: methodDecl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_methodDecl_in_declSection1875);
					methodDecl85=methodDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, methodDecl85.getTree());

					}
					break;
				case 6 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:145:32: procDecl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_procDecl_in_declSection1908);
					procDecl86=procDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, procDecl86.getTree());

					}
					break;
				case 7 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:146:32: exportsSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_exportsSection_in_declSection1941);
					exportsSection87=exportsSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exportsSection87.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 25, declSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "declSection"


	public static class interfaceDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "interfaceDecl"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:148:1: interfaceDecl : ( constSection | typeSection | varSection | exportedProcHeading | exportsSection | procDecl | methodDecl );
	public final DelphiParser.interfaceDecl_return interfaceDecl() throws RecognitionException {
		DelphiParser.interfaceDecl_return retval = new DelphiParser.interfaceDecl_return();
		retval.start = input.LT(1);
		int interfaceDecl_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope constSection88 =null;
		ParserRuleReturnScope typeSection89 =null;
		ParserRuleReturnScope varSection90 =null;
		ParserRuleReturnScope exportedProcHeading91 =null;
		ParserRuleReturnScope exportsSection92 =null;
		ParserRuleReturnScope procDecl93 =null;
		ParserRuleReturnScope methodDecl94 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:148:30: ( constSection | typeSection | varSection | exportedProcHeading | exportsSection | procDecl | methodDecl )
			int alt24=7;
			switch ( input.LA(1) ) {
			case CONST:
			case RESOURCESTRING:
				{
				alt24=1;
				}
				break;
			case TYPE:
				{
				alt24=2;
				}
				break;
			case THREADVAR:
			case VAR:
				{
				alt24=3;
				}
				break;
			case PROCEDURE:
				{
				int LA24_4 = input.LA(2);
				if ( (synpred35_Delphi()) ) {
					alt24=4;
				}
				else if ( (synpred37_Delphi()) ) {
					alt24=6;
				}
				else if ( (true) ) {
					alt24=7;
				}

				}
				break;
			case FUNCTION:
				{
				int LA24_5 = input.LA(2);
				if ( (synpred35_Delphi()) ) {
					alt24=4;
				}
				else if ( (synpred37_Delphi()) ) {
					alt24=6;
				}
				else if ( (true) ) {
					alt24=7;
				}

				}
				break;
			case EXPORTS:
				{
				alt24=5;
				}
				break;
			case LBRACK:
				{
				int LA24_7 = input.LA(2);
				if ( (synpred37_Delphi()) ) {
					alt24=6;
				}
				else if ( (true) ) {
					alt24=7;
				}

				}
				break;
			case CLASS:
			case CONSTRUCTOR:
			case DESTRUCTOR:
				{
				alt24=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 24, 0, input);
				throw nvae;
			}
			switch (alt24) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:148:32: constSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_constSection_in_interfaceDecl1993);
					constSection88=constSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constSection88.getTree());

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:149:32: typeSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_typeSection_in_interfaceDecl2026);
					typeSection89=typeSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeSection89.getTree());

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:32: varSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_varSection_in_interfaceDecl2059);
					varSection90=varSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, varSection90.getTree());

					}
					break;
				case 4 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:151:32: exportedProcHeading
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_exportedProcHeading_in_interfaceDecl2092);
					exportedProcHeading91=exportedProcHeading();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exportedProcHeading91.getTree());

					}
					break;
				case 5 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:152:32: exportsSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_exportsSection_in_interfaceDecl2125);
					exportsSection92=exportsSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exportsSection92.getTree());

					}
					break;
				case 6 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:153:32: procDecl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_procDecl_in_interfaceDecl2158);
					procDecl93=procDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, procDecl93.getTree());

					}
					break;
				case 7 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:154:32: methodDecl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_methodDecl_in_interfaceDecl2191);
					methodDecl94=methodDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, methodDecl94.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 26, interfaceDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interfaceDecl"


	public static class labelDeclSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "labelDeclSection"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:156:1: labelDeclSection : 'label' label ( ',' label )* ';' ;
	public final DelphiParser.labelDeclSection_return labelDeclSection() throws RecognitionException {
		DelphiParser.labelDeclSection_return retval = new DelphiParser.labelDeclSection_return();
		retval.start = input.LT(1);
		int labelDeclSection_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal95=null;
		Token char_literal97=null;
		Token char_literal99=null;
		ParserRuleReturnScope label96 =null;
		ParserRuleReturnScope label98 =null;

		Object string_literal95_tree=null;
		Object char_literal97_tree=null;
		Object char_literal99_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:156:30: ( 'label' label ( ',' label )* ';' )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:156:32: 'label' label ( ',' label )* ';'
			{
			root_0 = (Object)adaptor.nil();


			string_literal95=(Token)match(input,LABEL,FOLLOW_LABEL_in_labelDeclSection2240); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal95_tree = (Object)adaptor.create(string_literal95);
			adaptor.addChild(root_0, string_literal95_tree);
			}

			pushFollow(FOLLOW_label_in_labelDeclSection2242);
			label96=label();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, label96.getTree());

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:156:46: ( ',' label )*
			loop25:
			while (true) {
				int alt25=2;
				int LA25_0 = input.LA(1);
				if ( (LA25_0==COMMA) ) {
					alt25=1;
				}

				switch (alt25) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:156:47: ',' label
					{
					char_literal97=(Token)match(input,COMMA,FOLLOW_COMMA_in_labelDeclSection2245); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal97_tree = (Object)adaptor.create(char_literal97);
					adaptor.addChild(root_0, char_literal97_tree);
					}

					pushFollow(FOLLOW_label_in_labelDeclSection2247);
					label98=label();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, label98.getTree());

					}
					break;

				default :
					break loop25;
				}
			}

			char_literal99=(Token)match(input,SEMI,FOLLOW_SEMI_in_labelDeclSection2251); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal99_tree = (Object)adaptor.create(char_literal99);
			adaptor.addChild(root_0, char_literal99_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 27, labelDeclSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "labelDeclSection"


	public static class constSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "constSection"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:158:1: constSection : constKey ( constDeclaration )* -> ^( constKey ( constDeclaration )* ) ;
	public final DelphiParser.constSection_return constSection() throws RecognitionException {
		DelphiParser.constSection_return retval = new DelphiParser.constSection_return();
		retval.start = input.LT(1);
		int constSection_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope constKey100 =null;
		ParserRuleReturnScope constDeclaration101 =null;

		RewriteRuleSubtreeStream stream_constDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule constDeclaration");
		RewriteRuleSubtreeStream stream_constKey=new RewriteRuleSubtreeStream(adaptor,"rule constKey");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:158:30: ( constKey ( constDeclaration )* -> ^( constKey ( constDeclaration )* ) )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:158:32: constKey ( constDeclaration )*
			{
			pushFollow(FOLLOW_constKey_in_constSection2304);
			constKey100=constKey();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_constKey.add(constKey100.getTree());
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:158:41: ( constDeclaration )*
			loop26:
			while (true) {
				int alt26=2;
				alt26 = dfa26.predict(input);
				switch (alt26) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:158:42: constDeclaration
					{
					pushFollow(FOLLOW_constDeclaration_in_constSection2307);
					constDeclaration101=constDeclaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_constDeclaration.add(constDeclaration101.getTree());
					}
					break;

				default :
					break loop26;
				}
			}

			// AST REWRITE
			// elements: constDeclaration, constKey
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 158:61: -> ^( constKey ( constDeclaration )* )
			{
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:158:64: ^( constKey ( constDeclaration )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_constKey.nextNode(), root_1);
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:158:75: ( constDeclaration )*
				while ( stream_constDeclaration.hasNext() ) {
					adaptor.addChild(root_1, stream_constDeclaration.nextTree());
				}
				stream_constDeclaration.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 28, constSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "constSection"


	public static class constKey_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "constKey"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:160:1: constKey : ( 'const' | 'resourcestring' );
	public final DelphiParser.constKey_return constKey() throws RecognitionException {
		DelphiParser.constKey_return retval = new DelphiParser.constKey_return();
		retval.start = input.LT(1);
		int constKey_StartIndex = input.index();

		Object root_0 = null;

		Token set102=null;

		Object set102_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:160:30: ( 'const' | 'resourcestring' )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set102=input.LT(1);
			if ( input.LA(1)==CONST||input.LA(1)==RESOURCESTRING ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set102));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 29, constKey_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "constKey"


	public static class constDeclaration_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "constDeclaration"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:1: constDeclaration : ( customAttribute )? ident ( ':' typeDecl )? '=' constExpression ( hintingDirective )* ';' -> ident ( typeDecl )? '=' constExpression ;
	public final DelphiParser.constDeclaration_return constDeclaration() throws RecognitionException {
		DelphiParser.constDeclaration_return retval = new DelphiParser.constDeclaration_return();
		retval.start = input.LT(1);
		int constDeclaration_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal105=null;
		Token char_literal107=null;
		Token char_literal110=null;
		ParserRuleReturnScope customAttribute103 =null;
		ParserRuleReturnScope ident104 =null;
		ParserRuleReturnScope typeDecl106 =null;
		ParserRuleReturnScope constExpression108 =null;
		ParserRuleReturnScope hintingDirective109 =null;

		Object char_literal105_tree=null;
		Object char_literal107_tree=null;
		Object char_literal110_tree=null;
		RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_constExpression=new RewriteRuleSubtreeStream(adaptor,"rule constExpression");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:30: ( ( customAttribute )? ident ( ':' typeDecl )? '=' constExpression ( hintingDirective )* ';' -> ident ( typeDecl )? '=' constExpression )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:32: ( customAttribute )? ident ( ':' typeDecl )? '=' constExpression ( hintingDirective )* ';'
			{
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:32: ( customAttribute )?
			int alt27=2;
			switch ( input.LA(1) ) {
				case LBRACK:
					{
					alt27=1;
					}
					break;
				case TkIdentifier:
					{
					int LA27_2 = input.LA(2);
					if ( (synpred41_Delphi()) ) {
						alt27=1;
					}
					}
					break;
				case 198:
					{
					int LA27_3 = input.LA(2);
					if ( (synpred41_Delphi()) ) {
						alt27=1;
					}
					}
					break;
				case ABSOLUTE:
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DISPID:
				case DQ:
				case DW:
				case EXIT:
				case EXPORT:
				case FALSE:
				case FINAL:
				case HELPER:
				case IMPLEMENTS:
				case IN:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case PRIVATE:
				case PUBLIC:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STATIC:
				case STORED:
				case STRICT:
				case STRING:
				case TRUE:
				case UNSAFE:
				case VARARGS:
				case VARIANT:
				case VIRTUAL:
				case WRITE:
				case WRITEONLY:
					{
					int LA27_4 = input.LA(2);
					if ( (synpred41_Delphi()) ) {
						alt27=1;
					}
					}
					break;
			}
			switch (alt27) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:33: customAttribute
					{
					pushFollow(FOLLOW_customAttribute_in_constDeclaration2462);
					customAttribute103=customAttribute();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute103.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_ident_in_constDeclaration2466);
			ident104=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_ident.add(ident104.getTree());
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:57: ( ':' typeDecl )?
			int alt28=2;
			int LA28_0 = input.LA(1);
			if ( (LA28_0==COLON) ) {
				alt28=1;
			}
			switch (alt28) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:58: ':' typeDecl
					{
					char_literal105=(Token)match(input,COLON,FOLLOW_COLON_in_constDeclaration2469); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(char_literal105);

					pushFollow(FOLLOW_typeDecl_in_constDeclaration2471);
					typeDecl106=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl106.getTree());
					}
					break;

			}

			char_literal107=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_constDeclaration2475); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_EQUAL.add(char_literal107);

			pushFollow(FOLLOW_constExpression_in_constDeclaration2477);
			constExpression108=constExpression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_constExpression.add(constExpression108.getTree());
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:93: ( hintingDirective )*
			loop29:
			while (true) {
				int alt29=2;
				int LA29_0 = input.LA(1);
				if ( (LA29_0==DEPRECATED||LA29_0==EXPERIMENTAL||LA29_0==LIBRARY||LA29_0==PLATFORM) ) {
					alt29=1;
				}

				switch (alt29) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:94: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_constDeclaration2480);
					hintingDirective109=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective109.getTree());
					}
					break;

				default :
					break loop29;
				}
			}

			char_literal110=(Token)match(input,SEMI,FOLLOW_SEMI_in_constDeclaration2484); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal110);

			// AST REWRITE
			// elements: EQUAL, ident, constExpression, typeDecl
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 163:117: -> ident ( typeDecl )? '=' constExpression
			{
				adaptor.addChild(root_0, stream_ident.nextTree());
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:126: ( typeDecl )?
				if ( stream_typeDecl.hasNext() ) {
					adaptor.addChild(root_0, stream_typeDecl.nextTree());
				}
				stream_typeDecl.reset();

				adaptor.addChild(root_0, stream_EQUAL.nextNode());
				adaptor.addChild(root_0, stream_constExpression.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 30, constDeclaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "constDeclaration"


	public static class typeSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "typeSection"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:165:1: typeSection : 'type' typeDeclaration ( typeDeclaration )* -> ^( 'type' typeDeclaration ( typeDeclaration )* ) ;
	public final DelphiParser.typeSection_return typeSection() throws RecognitionException {
		DelphiParser.typeSection_return retval = new DelphiParser.typeSection_return();
		retval.start = input.LT(1);
		int typeSection_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal111=null;
		ParserRuleReturnScope typeDeclaration112 =null;
		ParserRuleReturnScope typeDeclaration113 =null;

		Object string_literal111_tree=null;
		RewriteRuleTokenStream stream_TYPE=new RewriteRuleTokenStream(adaptor,"token TYPE");
		RewriteRuleSubtreeStream stream_typeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule typeDeclaration");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:165:30: ( 'type' typeDeclaration ( typeDeclaration )* -> ^( 'type' typeDeclaration ( typeDeclaration )* ) )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:165:32: 'type' typeDeclaration ( typeDeclaration )*
			{
			string_literal111=(Token)match(input,TYPE,FOLLOW_TYPE_in_typeSection2551); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_TYPE.add(string_literal111);

			pushFollow(FOLLOW_typeDeclaration_in_typeSection2553);
			typeDeclaration112=typeDeclaration();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeDeclaration.add(typeDeclaration112.getTree());
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:165:55: ( typeDeclaration )*
			loop30:
			while (true) {
				int alt30=2;
				alt30 = dfa30.predict(input);
				switch (alt30) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:165:56: typeDeclaration
					{
					pushFollow(FOLLOW_typeDeclaration_in_typeSection2556);
					typeDeclaration113=typeDeclaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_typeDeclaration.add(typeDeclaration113.getTree());
					}
					break;

				default :
					break loop30;
				}
			}

			// AST REWRITE
			// elements: typeDeclaration, typeDeclaration, TYPE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 165:74: -> ^( 'type' typeDeclaration ( typeDeclaration )* )
			{
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:165:77: ^( 'type' typeDeclaration ( typeDeclaration )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_TYPE.nextNode(), root_1);
				adaptor.addChild(root_1, stream_typeDeclaration.nextTree());
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:165:102: ( typeDeclaration )*
				while ( stream_typeDeclaration.hasNext() ) {
					adaptor.addChild(root_1, stream_typeDeclaration.nextTree());
				}
				stream_typeDeclaration.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 31, typeSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "typeSection"


	public static class typeDeclaration_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "typeDeclaration"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:1: typeDeclaration : ( customAttribute )? genericTypeIdent '=' typeDecl ( hintingDirective )* ';' -> ^( TkNewType ( customAttribute )? ^( genericTypeIdent typeDecl ( hintingDirective )* ) ) ;
	public final DelphiParser.typeDeclaration_return typeDeclaration() throws RecognitionException {
		DelphiParser.typeDeclaration_return retval = new DelphiParser.typeDeclaration_return();
		retval.start = input.LT(1);
		int typeDeclaration_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal116=null;
		Token char_literal119=null;
		ParserRuleReturnScope customAttribute114 =null;
		ParserRuleReturnScope genericTypeIdent115 =null;
		ParserRuleReturnScope typeDecl117 =null;
		ParserRuleReturnScope hintingDirective118 =null;

		Object char_literal116_tree=null;
		Object char_literal119_tree=null;
		RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_genericTypeIdent=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeIdent");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:30: ( ( customAttribute )? genericTypeIdent '=' typeDecl ( hintingDirective )* ';' -> ^( TkNewType ( customAttribute )? ^( genericTypeIdent typeDecl ( hintingDirective )* ) ) )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:32: ( customAttribute )? genericTypeIdent '=' typeDecl ( hintingDirective )* ';'
			{
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:32: ( customAttribute )?
			int alt31=2;
			switch ( input.LA(1) ) {
				case LBRACK:
					{
					alt31=1;
					}
					break;
				case TkIdentifier:
					{
					int LA31_2 = input.LA(2);
					if ( (synpred45_Delphi()) ) {
						alt31=1;
					}
					}
					break;
				case 198:
					{
					int LA31_3 = input.LA(2);
					if ( (synpred45_Delphi()) ) {
						alt31=1;
					}
					}
					break;
				case ABSOLUTE:
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DISPID:
				case DQ:
				case DW:
				case EXIT:
				case EXPORT:
				case FALSE:
				case FINAL:
				case HELPER:
				case IMPLEMENTS:
				case IN:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case PRIVATE:
				case PUBLIC:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STATIC:
				case STORED:
				case STRICT:
				case STRING:
				case TRUE:
				case UNSAFE:
				case VARARGS:
				case VARIANT:
				case VIRTUAL:
				case WRITE:
				case WRITEONLY:
					{
					int LA31_4 = input.LA(2);
					if ( (synpred45_Delphi()) ) {
						alt31=1;
					}
					}
					break;
			}
			switch (alt31) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:33: customAttribute
					{
					pushFollow(FOLLOW_customAttribute_in_typeDeclaration2622);
					customAttribute114=customAttribute();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute114.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_genericTypeIdent_in_typeDeclaration2626);
			genericTypeIdent115=genericTypeIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_genericTypeIdent.add(genericTypeIdent115.getTree());
			char_literal116=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_typeDeclaration2628); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_EQUAL.add(char_literal116);

			pushFollow(FOLLOW_typeDecl_in_typeDeclaration2630);
			typeDecl117=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl117.getTree());
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:81: ( hintingDirective )*
			loop32:
			while (true) {
				int alt32=2;
				int LA32_0 = input.LA(1);
				if ( (LA32_0==DEPRECATED||LA32_0==EXPERIMENTAL||LA32_0==LIBRARY||LA32_0==PLATFORM) ) {
					alt32=1;
				}

				switch (alt32) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:82: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_typeDeclaration2633);
					hintingDirective118=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective118.getTree());
					}
					break;

				default :
					break loop32;
				}
			}

			char_literal119=(Token)match(input,SEMI,FOLLOW_SEMI_in_typeDeclaration2637); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal119);

			// AST REWRITE
			// elements: customAttribute, hintingDirective, genericTypeIdent, typeDecl
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 167:105: -> ^( TkNewType ( customAttribute )? ^( genericTypeIdent typeDecl ( hintingDirective )* ) )
			{
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:108: ^( TkNewType ( customAttribute )? ^( genericTypeIdent typeDecl ( hintingDirective )* ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkNewType, "TkNewType"), root_1);
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:120: ( customAttribute )?
				if ( stream_customAttribute.hasNext() ) {
					adaptor.addChild(root_1, stream_customAttribute.nextTree());
				}
				stream_customAttribute.reset();

				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:139: ^( genericTypeIdent typeDecl ( hintingDirective )* )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot(stream_genericTypeIdent.nextNode(), root_2);
				adaptor.addChild(root_2, stream_typeDecl.nextTree());
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:167: ( hintingDirective )*
				while ( stream_hintingDirective.hasNext() ) {
					adaptor.addChild(root_2, stream_hintingDirective.nextTree());
				}
				stream_hintingDirective.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 32, typeDeclaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "typeDeclaration"


	public static class varSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "varSection"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:1: varSection : varKey varDeclaration ( varDeclaration )* -> ^( varKey varDeclaration ( varDeclaration )* ) ;
	public final DelphiParser.varSection_return varSection() throws RecognitionException {
		DelphiParser.varSection_return retval = new DelphiParser.varSection_return();
		retval.start = input.LT(1);
		int varSection_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope varKey120 =null;
		ParserRuleReturnScope varDeclaration121 =null;
		ParserRuleReturnScope varDeclaration122 =null;

		RewriteRuleSubtreeStream stream_varDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule varDeclaration");
		RewriteRuleSubtreeStream stream_varKey=new RewriteRuleSubtreeStream(adaptor,"rule varKey");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:30: ( varKey varDeclaration ( varDeclaration )* -> ^( varKey varDeclaration ( varDeclaration )* ) )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:32: varKey varDeclaration ( varDeclaration )*
			{
			pushFollow(FOLLOW_varKey_in_varSection2714);
			varKey120=varKey();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_varKey.add(varKey120.getTree());
			pushFollow(FOLLOW_varDeclaration_in_varSection2716);
			varDeclaration121=varDeclaration();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_varDeclaration.add(varDeclaration121.getTree());
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:54: ( varDeclaration )*
			loop33:
			while (true) {
				int alt33=2;
				alt33 = dfa33.predict(input);
				switch (alt33) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:55: varDeclaration
					{
					pushFollow(FOLLOW_varDeclaration_in_varSection2719);
					varDeclaration122=varDeclaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_varDeclaration.add(varDeclaration122.getTree());
					}
					break;

				default :
					break loop33;
				}
			}

			// AST REWRITE
			// elements: varKey, varDeclaration, varDeclaration
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 169:72: -> ^( varKey varDeclaration ( varDeclaration )* )
			{
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:75: ^( varKey varDeclaration ( varDeclaration )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_varKey.nextNode(), root_1);
				adaptor.addChild(root_1, stream_varDeclaration.nextTree());
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:99: ( varDeclaration )*
				while ( stream_varDeclaration.hasNext() ) {
					adaptor.addChild(root_1, stream_varDeclaration.nextTree());
				}
				stream_varDeclaration.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 33, varSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "varSection"


	public static class varKey_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "varKey"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:171:1: varKey : ( 'var' | 'threadvar' );
	public final DelphiParser.varKey_return varKey() throws RecognitionException {
		DelphiParser.varKey_return retval = new DelphiParser.varKey_return();
		retval.start = input.LT(1);
		int varKey_StartIndex = input.index();

		Object root_0 = null;

		Token set123=null;

		Object set123_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:171:30: ( 'var' | 'threadvar' )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set123=input.LT(1);
			if ( input.LA(1)==THREADVAR||input.LA(1)==VAR ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set123));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 34, varKey_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "varKey"


	public static class varDeclaration_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "varDeclaration"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:1: varDeclaration : ( customAttribute )? identListFlat ':' typeDecl ( varValueSpec )? ( hintingDirective )* ';' -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType typeDecl ) ;
	public final DelphiParser.varDeclaration_return varDeclaration() throws RecognitionException {
		DelphiParser.varDeclaration_return retval = new DelphiParser.varDeclaration_return();
		retval.start = input.LT(1);
		int varDeclaration_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal126=null;
		Token char_literal130=null;
		ParserRuleReturnScope customAttribute124 =null;
		ParserRuleReturnScope identListFlat125 =null;
		ParserRuleReturnScope typeDecl127 =null;
		ParserRuleReturnScope varValueSpec128 =null;
		ParserRuleReturnScope hintingDirective129 =null;

		Object char_literal126_tree=null;
		Object char_literal130_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_identListFlat=new RewriteRuleSubtreeStream(adaptor,"rule identListFlat");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_varValueSpec=new RewriteRuleSubtreeStream(adaptor,"rule varValueSpec");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:30: ( ( customAttribute )? identListFlat ':' typeDecl ( varValueSpec )? ( hintingDirective )* ';' -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType typeDecl ) )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:32: ( customAttribute )? identListFlat ':' typeDecl ( varValueSpec )? ( hintingDirective )* ';'
			{
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:32: ( customAttribute )?
			int alt34=2;
			switch ( input.LA(1) ) {
				case LBRACK:
					{
					alt34=1;
					}
					break;
				case TkIdentifier:
					{
					int LA34_2 = input.LA(2);
					if ( (synpred49_Delphi()) ) {
						alt34=1;
					}
					}
					break;
				case 198:
					{
					int LA34_3 = input.LA(2);
					if ( (synpred49_Delphi()) ) {
						alt34=1;
					}
					}
					break;
				case ABSOLUTE:
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DISPID:
				case DQ:
				case DW:
				case EXIT:
				case EXPORT:
				case FALSE:
				case FINAL:
				case HELPER:
				case IMPLEMENTS:
				case IN:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case PRIVATE:
				case PUBLIC:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STATIC:
				case STORED:
				case STRICT:
				case STRING:
				case TRUE:
				case UNSAFE:
				case VARARGS:
				case VARIANT:
				case VIRTUAL:
				case WRITE:
				case WRITEONLY:
					{
					int LA34_4 = input.LA(2);
					if ( (synpred49_Delphi()) ) {
						alt34=1;
					}
					}
					break;
			}
			switch (alt34) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:33: customAttribute
					{
					pushFollow(FOLLOW_customAttribute_in_varDeclaration2879);
					customAttribute124=customAttribute();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute124.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_identListFlat_in_varDeclaration2883);
			identListFlat125=identListFlat();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identListFlat.add(identListFlat125.getTree());
			char_literal126=(Token)match(input,COLON,FOLLOW_COLON_in_varDeclaration2885); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_COLON.add(char_literal126);

			pushFollow(FOLLOW_typeDecl_in_varDeclaration2887);
			typeDecl127=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl127.getTree());
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:78: ( varValueSpec )?
			int alt35=2;
			int LA35_0 = input.LA(1);
			if ( (LA35_0==ABSOLUTE||LA35_0==EQUAL) ) {
				alt35=1;
			}
			switch (alt35) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:79: varValueSpec
					{
					pushFollow(FOLLOW_varValueSpec_in_varDeclaration2890);
					varValueSpec128=varValueSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_varValueSpec.add(varValueSpec128.getTree());
					}
					break;

			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:94: ( hintingDirective )*
			loop36:
			while (true) {
				int alt36=2;
				int LA36_0 = input.LA(1);
				if ( (LA36_0==DEPRECATED||LA36_0==EXPERIMENTAL||LA36_0==LIBRARY||LA36_0==PLATFORM) ) {
					alt36=1;
				}

				switch (alt36) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:95: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_varDeclaration2895);
					hintingDirective129=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective129.getTree());
					}
					break;

				default :
					break loop36;
				}
			}

			char_literal130=(Token)match(input,SEMI,FOLLOW_SEMI_in_varDeclaration2899); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal130);

			// AST REWRITE
			// elements: typeDecl, customAttribute, identListFlat
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 175:118: -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType typeDecl )
			{
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:121: ( customAttribute )?
				if ( stream_customAttribute.hasNext() ) {
					adaptor.addChild(root_0, stream_customAttribute.nextTree());
				}
				stream_customAttribute.reset();

				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:140: ^( TkVariableIdents identListFlat )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableIdents, "TkVariableIdents"), root_1);
				adaptor.addChild(root_1, stream_identListFlat.nextTree());
				adaptor.addChild(root_0, root_1);
				}

				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:174: ^( TkVariableType typeDecl )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableType, "TkVariableType"), root_1);
				adaptor.addChild(root_1, stream_typeDecl.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 35, varDeclaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "varDeclaration"


	public static class inlineVarDeclaration_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "inlineVarDeclaration"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:177:1: inlineVarDeclaration : ( 'var' ident ( ':' typeDecl )? ':=' expression | 'var' ident ':' typeDecl );
	public final DelphiParser.inlineVarDeclaration_return inlineVarDeclaration() throws RecognitionException {
		DelphiParser.inlineVarDeclaration_return retval = new DelphiParser.inlineVarDeclaration_return();
		retval.start = input.LT(1);
		int inlineVarDeclaration_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal131=null;
		Token char_literal133=null;
		Token string_literal135=null;
		Token string_literal137=null;
		Token char_literal139=null;
		ParserRuleReturnScope ident132 =null;
		ParserRuleReturnScope typeDecl134 =null;
		ParserRuleReturnScope expression136 =null;
		ParserRuleReturnScope ident138 =null;
		ParserRuleReturnScope typeDecl140 =null;

		Object string_literal131_tree=null;
		Object char_literal133_tree=null;
		Object string_literal135_tree=null;
		Object string_literal137_tree=null;
		Object char_literal139_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:177:30: ( 'var' ident ( ':' typeDecl )? ':=' expression | 'var' ident ':' typeDecl )
			int alt38=2;
			int LA38_0 = input.LA(1);
			if ( (LA38_0==VAR) ) {
				int LA38_1 = input.LA(2);
				if ( (synpred53_Delphi()) ) {
					alt38=1;
				}
				else if ( (true) ) {
					alt38=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 38, 0, input);
				throw nvae;
			}

			switch (alt38) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:177:32: 'var' ident ( ':' typeDecl )? ':=' expression
					{
					root_0 = (Object)adaptor.nil();


					string_literal131=(Token)match(input,VAR,FOLLOW_VAR_in_inlineVarDeclaration2963); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal131_tree = (Object)adaptor.create(string_literal131);
					adaptor.addChild(root_0, string_literal131_tree);
					}

					pushFollow(FOLLOW_ident_in_inlineVarDeclaration2965);
					ident132=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident132.getTree());

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:177:44: ( ':' typeDecl )?
					int alt37=2;
					int LA37_0 = input.LA(1);
					if ( (LA37_0==COLON) ) {
						alt37=1;
					}
					switch (alt37) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:177:45: ':' typeDecl
							{
							char_literal133=(Token)match(input,COLON,FOLLOW_COLON_in_inlineVarDeclaration2968); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal133_tree = (Object)adaptor.create(char_literal133);
							adaptor.addChild(root_0, char_literal133_tree);
							}

							pushFollow(FOLLOW_typeDecl_in_inlineVarDeclaration2970);
							typeDecl134=typeDecl();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl134.getTree());

							}
							break;

					}

					string_literal135=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_inlineVarDeclaration2974); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal135_tree = (Object)adaptor.create(string_literal135);
					adaptor.addChild(root_0, string_literal135_tree);
					}

					pushFollow(FOLLOW_expression_in_inlineVarDeclaration2976);
					expression136=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression136.getTree());

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:178:32: 'var' ident ':' typeDecl
					{
					root_0 = (Object)adaptor.nil();


					string_literal137=(Token)match(input,VAR,FOLLOW_VAR_in_inlineVarDeclaration3009); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal137_tree = (Object)adaptor.create(string_literal137);
					adaptor.addChild(root_0, string_literal137_tree);
					}

					pushFollow(FOLLOW_ident_in_inlineVarDeclaration3011);
					ident138=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident138.getTree());

					char_literal139=(Token)match(input,COLON,FOLLOW_COLON_in_inlineVarDeclaration3013); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal139_tree = (Object)adaptor.create(char_literal139);
					adaptor.addChild(root_0, char_literal139_tree);
					}

					pushFollow(FOLLOW_typeDecl_in_inlineVarDeclaration3015);
					typeDecl140=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl140.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 36, inlineVarDeclaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "inlineVarDeclaration"


	public static class varValueSpec_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "varValueSpec"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:180:1: varValueSpec : ( 'absolute' qualifiedIdent | 'absolute' constExpression | '=' constExpression );
	public final DelphiParser.varValueSpec_return varValueSpec() throws RecognitionException {
		DelphiParser.varValueSpec_return retval = new DelphiParser.varValueSpec_return();
		retval.start = input.LT(1);
		int varValueSpec_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal141=null;
		Token string_literal143=null;
		Token char_literal145=null;
		ParserRuleReturnScope qualifiedIdent142 =null;
		ParserRuleReturnScope constExpression144 =null;
		ParserRuleReturnScope constExpression146 =null;

		Object string_literal141_tree=null;
		Object string_literal143_tree=null;
		Object char_literal145_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:180:30: ( 'absolute' qualifiedIdent | 'absolute' constExpression | '=' constExpression )
			int alt39=3;
			int LA39_0 = input.LA(1);
			if ( (LA39_0==ABSOLUTE) ) {
				switch ( input.LA(2) ) {
				case TkIdentifier:
					{
					int LA39_3 = input.LA(3);
					if ( (synpred54_Delphi()) ) {
						alt39=1;
					}
					else if ( (synpred55_Delphi()) ) {
						alt39=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 39, 3, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case 198:
					{
					int LA39_4 = input.LA(3);
					if ( (LA39_4==TkIdentifier) ) {
						int LA39_11 = input.LA(4);
						if ( (synpred54_Delphi()) ) {
							alt39=1;
						}
						else if ( (synpred55_Delphi()) ) {
							alt39=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 39, 11, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}
					else if ( ((LA39_4 >= ABSOLUTE && LA39_4 <= ASSEMBLY)||LA39_4==AT||LA39_4==AUTOMATED||(LA39_4 >= BEGIN && LA39_4 <= CLASS)||(LA39_4 >= CONST && LA39_4 <= CONTINUE)||LA39_4==DEFAULT||(LA39_4 >= DEPRECATED && LA39_4 <= DO)||(LA39_4 >= DOWNTO && LA39_4 <= DYNAMIC)||(LA39_4 >= ELSE && LA39_4 <= END)||(LA39_4 >= EXCEPT && LA39_4 <= FUNCTION)||LA39_4==GOTO||LA39_4==HELPER||(LA39_4 >= IF && LA39_4 <= LABEL)||(LA39_4 >= LIBRARY && LA39_4 <= LOCAL)||LA39_4==MESSAGE||(LA39_4 >= MOD && LA39_4 <= NOT)||(LA39_4 >= OBJECT && LA39_4 <= PLATFORM)||LA39_4==POINTER||(LA39_4 >= PRIVATE && LA39_4 <= PUBLISHED)||LA39_4==RAISE||(LA39_4 >= READ && LA39_4 <= RESOURCESTRING)||(LA39_4 >= SAFECALL && LA39_4 <= SEALED)||(LA39_4 >= SET && LA39_4 <= SHR)||(LA39_4 >= STATIC && LA39_4 <= TYPE)||(LA39_4 >= UNIT && LA39_4 <= USES)||(LA39_4 >= VAR && LA39_4 <= WRITEONLY)||LA39_4==XOR) ) {
						int LA39_12 = input.LA(4);
						if ( (synpred54_Delphi()) ) {
							alt39=1;
						}
						else if ( (synpred55_Delphi()) ) {
							alt39=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 39, 12, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 39, 4, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case TRUE:
					{
					int LA39_5 = input.LA(3);
					if ( (synpred54_Delphi()) ) {
						alt39=1;
					}
					else if ( (synpred55_Delphi()) ) {
						alt39=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 39, 5, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case EOF:
				case AND:
				case AS:
				case AT2:
				case ControlChar:
				case DEPRECATED:
				case DIV:
				case DOT:
				case EQUAL:
				case EXPERIMENTAL:
				case FUNCTION:
				case GE:
				case GT:
				case INHERITED:
				case IS:
				case LBRACK:
				case LE:
				case LIBRARY:
				case LPAREN:
				case LT:
				case MINUS:
				case MOD:
				case NIL:
				case NOT:
				case NOT_EQUAL:
				case OR:
				case PLATFORM:
				case PLUS:
				case POINTER2:
				case PROCEDURE:
				case QuotedString:
				case SEMI:
				case SHL:
				case SHR:
				case SLASH:
				case STAR:
				case TkHexNum:
				case TkIntNum:
				case TkRealNum:
				case XOR:
				case 199:
				case 200:
				case 201:
				case 202:
				case 203:
				case 204:
				case 205:
				case 206:
				case 207:
				case 208:
				case 209:
				case 210:
					{
					alt39=2;
					}
					break;
				case FALSE:
					{
					int LA39_7 = input.LA(3);
					if ( (synpred54_Delphi()) ) {
						alt39=1;
					}
					else if ( (synpred55_Delphi()) ) {
						alt39=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 39, 7, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case IN:
					{
					int LA39_8 = input.LA(3);
					if ( (synpred54_Delphi()) ) {
						alt39=1;
					}
					else if ( (synpred55_Delphi()) ) {
						alt39=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 39, 8, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case ABSOLUTE:
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DISPID:
				case DQ:
				case DW:
				case EXIT:
				case EXPORT:
				case FINAL:
				case HELPER:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case PRIVATE:
				case PUBLIC:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STATIC:
				case STORED:
				case STRICT:
				case STRING:
				case UNSAFE:
				case VARARGS:
				case VARIANT:
				case VIRTUAL:
				case WRITE:
				case WRITEONLY:
					{
					int LA39_9 = input.LA(3);
					if ( (synpred54_Delphi()) ) {
						alt39=1;
					}
					else if ( (synpred55_Delphi()) ) {
						alt39=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 39, 9, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 39, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
			}
			else if ( (LA39_0==EQUAL) ) {
				alt39=3;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 39, 0, input);
				throw nvae;
			}

			switch (alt39) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:180:32: 'absolute' qualifiedIdent
					{
					root_0 = (Object)adaptor.nil();


					string_literal141=(Token)match(input,ABSOLUTE,FOLLOW_ABSOLUTE_in_varValueSpec3070); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal141_tree = (Object)adaptor.create(string_literal141);
					adaptor.addChild(root_0, string_literal141_tree);
					}

					pushFollow(FOLLOW_qualifiedIdent_in_varValueSpec3072);
					qualifiedIdent142=qualifiedIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdent142.getTree());

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:181:32: 'absolute' constExpression
					{
					root_0 = (Object)adaptor.nil();


					string_literal143=(Token)match(input,ABSOLUTE,FOLLOW_ABSOLUTE_in_varValueSpec3105); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal143_tree = (Object)adaptor.create(string_literal143);
					adaptor.addChild(root_0, string_literal143_tree);
					}

					pushFollow(FOLLOW_constExpression_in_varValueSpec3107);
					constExpression144=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression144.getTree());

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:182:32: '=' constExpression
					{
					root_0 = (Object)adaptor.nil();


					char_literal145=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_varValueSpec3140); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal145_tree = (Object)adaptor.create(char_literal145);
					adaptor.addChild(root_0, char_literal145_tree);
					}

					pushFollow(FOLLOW_constExpression_in_varValueSpec3142);
					constExpression146=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression146.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 37, varValueSpec_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "varValueSpec"


	public static class exportsSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "exportsSection"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:184:1: exportsSection : 'exports' ident exportItem ( ',' ident exportItem )* ';' ;
	public final DelphiParser.exportsSection_return exportsSection() throws RecognitionException {
		DelphiParser.exportsSection_return retval = new DelphiParser.exportsSection_return();
		retval.start = input.LT(1);
		int exportsSection_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal147=null;
		Token char_literal150=null;
		Token char_literal153=null;
		ParserRuleReturnScope ident148 =null;
		ParserRuleReturnScope exportItem149 =null;
		ParserRuleReturnScope ident151 =null;
		ParserRuleReturnScope exportItem152 =null;

		Object string_literal147_tree=null;
		Object char_literal150_tree=null;
		Object char_literal153_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:184:30: ( 'exports' ident exportItem ( ',' ident exportItem )* ';' )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:184:32: 'exports' ident exportItem ( ',' ident exportItem )* ';'
			{
			root_0 = (Object)adaptor.nil();


			string_literal147=(Token)match(input,EXPORTS,FOLLOW_EXPORTS_in_exportsSection3193); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal147_tree = (Object)adaptor.create(string_literal147);
			adaptor.addChild(root_0, string_literal147_tree);
			}

			pushFollow(FOLLOW_ident_in_exportsSection3195);
			ident148=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident148.getTree());

			pushFollow(FOLLOW_exportItem_in_exportsSection3197);
			exportItem149=exportItem();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, exportItem149.getTree());

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:184:59: ( ',' ident exportItem )*
			loop40:
			while (true) {
				int alt40=2;
				int LA40_0 = input.LA(1);
				if ( (LA40_0==COMMA) ) {
					alt40=1;
				}

				switch (alt40) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:184:60: ',' ident exportItem
					{
					char_literal150=(Token)match(input,COMMA,FOLLOW_COMMA_in_exportsSection3200); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal150_tree = (Object)adaptor.create(char_literal150);
					adaptor.addChild(root_0, char_literal150_tree);
					}

					pushFollow(FOLLOW_ident_in_exportsSection3202);
					ident151=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident151.getTree());

					pushFollow(FOLLOW_exportItem_in_exportsSection3204);
					exportItem152=exportItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exportItem152.getTree());

					}
					break;

				default :
					break loop40;
				}
			}

			char_literal153=(Token)match(input,SEMI,FOLLOW_SEMI_in_exportsSection3208); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal153_tree = (Object)adaptor.create(char_literal153);
			adaptor.addChild(root_0, char_literal153_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 38, exportsSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "exportsSection"


	public static class exportItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "exportItem"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:186:1: exportItem : ( '(' ( formalParameterList )? ')' )? ( INDEX expression )? ( NAME expression )? ( 'resident' )? ;
	public final DelphiParser.exportItem_return exportItem() throws RecognitionException {
		DelphiParser.exportItem_return retval = new DelphiParser.exportItem_return();
		retval.start = input.LT(1);
		int exportItem_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal154=null;
		Token char_literal156=null;
		Token INDEX157=null;
		Token NAME159=null;
		Token string_literal161=null;
		ParserRuleReturnScope formalParameterList155 =null;
		ParserRuleReturnScope expression158 =null;
		ParserRuleReturnScope expression160 =null;

		Object char_literal154_tree=null;
		Object char_literal156_tree=null;
		Object INDEX157_tree=null;
		Object NAME159_tree=null;
		Object string_literal161_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:186:30: ( ( '(' ( formalParameterList )? ')' )? ( INDEX expression )? ( NAME expression )? ( 'resident' )? )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:186:32: ( '(' ( formalParameterList )? ')' )? ( INDEX expression )? ( NAME expression )? ( 'resident' )?
			{
			root_0 = (Object)adaptor.nil();


			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:186:32: ( '(' ( formalParameterList )? ')' )?
			int alt42=2;
			int LA42_0 = input.LA(1);
			if ( (LA42_0==LPAREN) ) {
				alt42=1;
			}
			switch (alt42) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:186:33: '(' ( formalParameterList )? ')'
					{
					char_literal154=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_exportItem3264); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal154_tree = (Object)adaptor.create(char_literal154);
					adaptor.addChild(root_0, char_literal154_tree);
					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:186:37: ( formalParameterList )?
					int alt41=2;
					int LA41_0 = input.LA(1);
					if ( (LA41_0==ABSOLUTE||LA41_0==ADD||LA41_0==ANSISTRING||LA41_0==AT||LA41_0==BREAK||LA41_0==CONST||(LA41_0 >= CONTAINS && LA41_0 <= CONTINUE)||LA41_0==DEFAULT||LA41_0==DISPID||(LA41_0 >= DQ && LA41_0 <= DW)||LA41_0==EXIT||LA41_0==EXPORT||LA41_0==FALSE||LA41_0==FINAL||LA41_0==HELPER||(LA41_0 >= IMPLEMENTS && LA41_0 <= INDEX)||LA41_0==LBRACK||LA41_0==LOCAL||LA41_0==MESSAGE||LA41_0==NAME||LA41_0==OBJECT||LA41_0==OPERATOR||LA41_0==OUT||LA41_0==POINTER||LA41_0==PRIVATE||LA41_0==PUBLIC||(LA41_0 >= READ && LA41_0 <= READONLY)||(LA41_0 >= REFERENCE && LA41_0 <= REGISTER)||LA41_0==REMOVE||LA41_0==STATIC||(LA41_0 >= STORED && LA41_0 <= STRING)||LA41_0==TRUE||LA41_0==TkIdentifier||LA41_0==UNSAFE||(LA41_0 >= VAR && LA41_0 <= VIRTUAL)||(LA41_0 >= WRITE && LA41_0 <= WRITEONLY)||LA41_0==198) ) {
						alt41=1;
					}
					switch (alt41) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:186:38: formalParameterList
							{
							pushFollow(FOLLOW_formalParameterList_in_exportItem3267);
							formalParameterList155=formalParameterList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterList155.getTree());

							}
							break;

					}

					char_literal156=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_exportItem3271); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal156_tree = (Object)adaptor.create(char_literal156);
					adaptor.addChild(root_0, char_literal156_tree);
					}

					}
					break;

			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:186:66: ( INDEX expression )?
			int alt43=2;
			int LA43_0 = input.LA(1);
			if ( (LA43_0==INDEX) ) {
				alt43=1;
			}
			switch (alt43) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:186:67: INDEX expression
					{
					INDEX157=(Token)match(input,INDEX,FOLLOW_INDEX_in_exportItem3276); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INDEX157_tree = (Object)adaptor.create(INDEX157);
					adaptor.addChild(root_0, INDEX157_tree);
					}

					pushFollow(FOLLOW_expression_in_exportItem3278);
					expression158=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression158.getTree());

					}
					break;

			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:186:86: ( NAME expression )?
			int alt44=2;
			int LA44_0 = input.LA(1);
			if ( (LA44_0==NAME) ) {
				alt44=1;
			}
			switch (alt44) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:186:87: NAME expression
					{
					NAME159=(Token)match(input,NAME,FOLLOW_NAME_in_exportItem3283); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NAME159_tree = (Object)adaptor.create(NAME159);
					adaptor.addChild(root_0, NAME159_tree);
					}

					pushFollow(FOLLOW_expression_in_exportItem3285);
					expression160=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression160.getTree());

					}
					break;

			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:186:105: ( 'resident' )?
			int alt45=2;
			int LA45_0 = input.LA(1);
			if ( (LA45_0==RESIDENT) ) {
				alt45=1;
			}
			switch (alt45) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:186:106: 'resident'
					{
					string_literal161=(Token)match(input,RESIDENT,FOLLOW_RESIDENT_in_exportItem3290); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal161_tree = (Object)adaptor.create(string_literal161);
					adaptor.addChild(root_0, string_literal161_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 39, exportItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "exportItem"


	public static class typeDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "typeDecl"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:191:1: typeDecl : ( strucType | pointerType | stringType | procedureType | variantType | subRangeType | ( 'type' )? typeId ( genericPostfix )? ( '.' typeDecl )* ( paranthesePostfix )? | simpleType );
	public final DelphiParser.typeDecl_return typeDecl() throws RecognitionException {
		DelphiParser.typeDecl_return retval = new DelphiParser.typeDecl_return();
		retval.start = input.LT(1);
		int typeDecl_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal168=null;
		Token char_literal171=null;
		ParserRuleReturnScope strucType162 =null;
		ParserRuleReturnScope pointerType163 =null;
		ParserRuleReturnScope stringType164 =null;
		ParserRuleReturnScope procedureType165 =null;
		ParserRuleReturnScope variantType166 =null;
		ParserRuleReturnScope subRangeType167 =null;
		ParserRuleReturnScope typeId169 =null;
		ParserRuleReturnScope genericPostfix170 =null;
		ParserRuleReturnScope typeDecl172 =null;
		ParserRuleReturnScope paranthesePostfix173 =null;
		ParserRuleReturnScope simpleType174 =null;

		Object string_literal168_tree=null;
		Object char_literal171_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:191:30: ( strucType | pointerType | stringType | procedureType | variantType | subRangeType | ( 'type' )? typeId ( genericPostfix )? ( '.' typeDecl )* ( paranthesePostfix )? | simpleType )
			int alt50=8;
			switch ( input.LA(1) ) {
			case ARRAY:
			case CLASS:
			case DISPINTERFACE:
			case FILE:
			case INTERFACE:
			case PACKED:
			case RECORD:
			case SET:
				{
				alt50=1;
				}
				break;
			case OBJECT:
				{
				int LA50_7 = input.LA(2);
				if ( (synpred62_Delphi()) ) {
					alt50=1;
				}
				else if ( (synpred67_Delphi()) ) {
					alt50=6;
				}
				else if ( (synpred72_Delphi()) ) {
					alt50=7;
				}
				else if ( (true) ) {
					alt50=8;
				}

				}
				break;
			case POINTER2:
				{
				int LA50_9 = input.LA(2);
				if ( (synpred63_Delphi()) ) {
					alt50=2;
				}
				else if ( (synpred67_Delphi()) ) {
					alt50=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 50, 9, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case POINTER:
				{
				int LA50_10 = input.LA(2);
				if ( (synpred63_Delphi()) ) {
					alt50=2;
				}
				else if ( (synpred67_Delphi()) ) {
					alt50=6;
				}
				else if ( (synpred72_Delphi()) ) {
					alt50=7;
				}
				else if ( (true) ) {
					alt50=8;
				}

				}
				break;
			case STRING:
				{
				int LA50_11 = input.LA(2);
				if ( (synpred64_Delphi()) ) {
					alt50=3;
				}
				else if ( (synpred67_Delphi()) ) {
					alt50=6;
				}
				else if ( (synpred72_Delphi()) ) {
					alt50=7;
				}
				else if ( (true) ) {
					alt50=8;
				}

				}
				break;
			case TYPE:
				{
				int LA50_12 = input.LA(2);
				if ( (synpred64_Delphi()) ) {
					alt50=3;
				}
				else if ( (synpred72_Delphi()) ) {
					alt50=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 50, 12, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ANSISTRING:
				{
				int LA50_13 = input.LA(2);
				if ( (synpred64_Delphi()) ) {
					alt50=3;
				}
				else if ( (synpred67_Delphi()) ) {
					alt50=6;
				}
				else if ( (synpred72_Delphi()) ) {
					alt50=7;
				}
				else if ( (true) ) {
					alt50=8;
				}

				}
				break;
			case FUNCTION:
				{
				int LA50_14 = input.LA(2);
				if ( (synpred65_Delphi()) ) {
					alt50=4;
				}
				else if ( (synpred67_Delphi()) ) {
					alt50=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 50, 14, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PROCEDURE:
				{
				int LA50_15 = input.LA(2);
				if ( (synpred65_Delphi()) ) {
					alt50=4;
				}
				else if ( (synpred67_Delphi()) ) {
					alt50=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 50, 15, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case REFERENCE:
				{
				int LA50_16 = input.LA(2);
				if ( (synpred65_Delphi()) ) {
					alt50=4;
				}
				else if ( (synpred67_Delphi()) ) {
					alt50=6;
				}
				else if ( (synpred72_Delphi()) ) {
					alt50=7;
				}
				else if ( (true) ) {
					alt50=8;
				}

				}
				break;
			case VARIANT:
				{
				int LA50_17 = input.LA(2);
				if ( (synpred66_Delphi()) ) {
					alt50=5;
				}
				else if ( (synpred67_Delphi()) ) {
					alt50=6;
				}
				else if ( (synpred72_Delphi()) ) {
					alt50=7;
				}
				else if ( (true) ) {
					alt50=8;
				}

				}
				break;
			case LPAREN:
				{
				int LA50_18 = input.LA(2);
				if ( (synpred67_Delphi()) ) {
					alt50=6;
				}
				else if ( (true) ) {
					alt50=8;
				}

				}
				break;
			case AND:
			case AS:
			case AT2:
			case ControlChar:
			case DIV:
			case DOT:
			case DOTDOT:
			case EQUAL:
			case GE:
			case GT:
			case INHERITED:
			case IS:
			case LBRACK:
			case LE:
			case LT:
			case MINUS:
			case MOD:
			case NIL:
			case NOT:
			case NOT_EQUAL:
			case OR:
			case PLUS:
			case QuotedString:
			case SHL:
			case SHR:
			case SLASH:
			case STAR:
			case TkHexNum:
			case TkIntNum:
			case TkRealNum:
			case XOR:
			case 199:
			case 200:
			case 201:
			case 202:
			case 203:
			case 204:
			case 205:
			case 206:
			case 207:
			case 208:
			case 209:
			case 210:
				{
				alt50=6;
				}
				break;
			case TRUE:
				{
				int LA50_26 = input.LA(2);
				if ( (synpred67_Delphi()) ) {
					alt50=6;
				}
				else if ( (synpred72_Delphi()) ) {
					alt50=7;
				}
				else if ( (true) ) {
					alt50=8;
				}

				}
				break;
			case FALSE:
				{
				int LA50_27 = input.LA(2);
				if ( (synpred67_Delphi()) ) {
					alt50=6;
				}
				else if ( (synpred72_Delphi()) ) {
					alt50=7;
				}
				else if ( (true) ) {
					alt50=8;
				}

				}
				break;
			case TkIdentifier:
				{
				int LA50_35 = input.LA(2);
				if ( (synpred67_Delphi()) ) {
					alt50=6;
				}
				else if ( (synpred72_Delphi()) ) {
					alt50=7;
				}
				else if ( (true) ) {
					alt50=8;
				}

				}
				break;
			case 198:
				{
				int LA50_36 = input.LA(2);
				if ( (synpred67_Delphi()) ) {
					alt50=6;
				}
				else if ( (synpred72_Delphi()) ) {
					alt50=7;
				}
				else if ( (true) ) {
					alt50=8;
				}

				}
				break;
			case IN:
				{
				int LA50_37 = input.LA(2);
				if ( (synpred67_Delphi()) ) {
					alt50=6;
				}
				else if ( (synpred72_Delphi()) ) {
					alt50=7;
				}
				else if ( (true) ) {
					alt50=8;
				}

				}
				break;
			case ABSOLUTE:
			case ADD:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case DISPID:
			case DQ:
			case DW:
			case EXIT:
			case EXPORT:
			case FINAL:
			case HELPER:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OPERATOR:
			case OUT:
			case PRIVATE:
			case PUBLIC:
			case READ:
			case READONLY:
			case REGISTER:
			case REMOVE:
			case STATIC:
			case STORED:
			case STRICT:
			case UNSAFE:
			case VARARGS:
			case VIRTUAL:
			case WRITE:
			case WRITEONLY:
				{
				int LA50_42 = input.LA(2);
				if ( (synpred67_Delphi()) ) {
					alt50=6;
				}
				else if ( (synpred72_Delphi()) ) {
					alt50=7;
				}
				else if ( (true) ) {
					alt50=8;
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 50, 0, input);
				throw nvae;
			}
			switch (alt50) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:191:32: strucType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_strucType_in_typeDecl3352);
					strucType162=strucType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, strucType162.getTree());

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:192:32: pointerType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_pointerType_in_typeDecl3385);
					pointerType163=pointerType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pointerType163.getTree());

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:193:32: stringType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_stringType_in_typeDecl3418);
					stringType164=stringType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, stringType164.getTree());

					}
					break;
				case 4 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:194:32: procedureType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_procedureType_in_typeDecl3451);
					procedureType165=procedureType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureType165.getTree());

					}
					break;
				case 5 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:195:32: variantType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_variantType_in_typeDecl3484);
					variantType166=variantType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, variantType166.getTree());

					}
					break;
				case 6 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:32: subRangeType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_subRangeType_in_typeDecl3517);
					subRangeType167=subRangeType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, subRangeType167.getTree());

					}
					break;
				case 7 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:32: ( 'type' )? typeId ( genericPostfix )? ( '.' typeDecl )* ( paranthesePostfix )?
					{
					root_0 = (Object)adaptor.nil();


					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:32: ( 'type' )?
					int alt46=2;
					int LA46_0 = input.LA(1);
					if ( (LA46_0==TYPE) ) {
						alt46=1;
					}
					switch (alt46) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:33: 'type'
							{
							string_literal168=(Token)match(input,TYPE,FOLLOW_TYPE_in_typeDecl3551); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal168_tree = (Object)adaptor.create(string_literal168);
							adaptor.addChild(root_0, string_literal168_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_typeId_in_typeDecl3555);
					typeId169=typeId();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeId169.getTree());

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:49: ( genericPostfix )?
					int alt47=2;
					int LA47_0 = input.LA(1);
					if ( (LA47_0==LT) ) {
						int LA47_1 = input.LA(2);
						if ( (synpred69_Delphi()) ) {
							alt47=1;
						}
					}
					switch (alt47) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:50: genericPostfix
							{
							pushFollow(FOLLOW_genericPostfix_in_typeDecl3558);
							genericPostfix170=genericPostfix();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, genericPostfix170.getTree());

							}
							break;

					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:67: ( '.' typeDecl )*
					loop48:
					while (true) {
						int alt48=2;
						int LA48_0 = input.LA(1);
						if ( (LA48_0==DOT) ) {
							int LA48_2 = input.LA(2);
							if ( (synpred70_Delphi()) ) {
								alt48=1;
							}

						}

						switch (alt48) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:68: '.' typeDecl
							{
							char_literal171=(Token)match(input,DOT,FOLLOW_DOT_in_typeDecl3563); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal171_tree = (Object)adaptor.create(char_literal171);
							adaptor.addChild(root_0, char_literal171_tree);
							}

							pushFollow(FOLLOW_typeDecl_in_typeDecl3565);
							typeDecl172=typeDecl();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl172.getTree());

							}
							break;

						default :
							break loop48;
						}
					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:83: ( paranthesePostfix )?
					int alt49=2;
					int LA49_0 = input.LA(1);
					if ( (LA49_0==LPAREN) ) {
						int LA49_1 = input.LA(2);
						if ( (synpred71_Delphi()) ) {
							alt49=1;
						}
					}
					switch (alt49) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:84: paranthesePostfix
							{
							pushFollow(FOLLOW_paranthesePostfix_in_typeDecl3570);
							paranthesePostfix173=paranthesePostfix();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, paranthesePostfix173.getTree());

							}
							break;

					}

					}
					break;
				case 8 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:198:32: simpleType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_simpleType_in_typeDecl3605);
					simpleType174=simpleType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleType174.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 40, typeDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "typeDecl"


	public static class strucType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "strucType"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:200:1: strucType : ( 'packed' )? strucTypePart -> strucTypePart ;
	public final DelphiParser.strucType_return strucType() throws RecognitionException {
		DelphiParser.strucType_return retval = new DelphiParser.strucType_return();
		retval.start = input.LT(1);
		int strucType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal175=null;
		ParserRuleReturnScope strucTypePart176 =null;

		Object string_literal175_tree=null;
		RewriteRuleTokenStream stream_PACKED=new RewriteRuleTokenStream(adaptor,"token PACKED");
		RewriteRuleSubtreeStream stream_strucTypePart=new RewriteRuleSubtreeStream(adaptor,"rule strucTypePart");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:200:30: ( ( 'packed' )? strucTypePart -> strucTypePart )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:200:32: ( 'packed' )? strucTypePart
			{
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:200:32: ( 'packed' )?
			int alt51=2;
			int LA51_0 = input.LA(1);
			if ( (LA51_0==PACKED) ) {
				alt51=1;
			}
			switch (alt51) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:200:33: 'packed'
					{
					string_literal175=(Token)match(input,PACKED,FOLLOW_PACKED_in_strucType3691); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_PACKED.add(string_literal175);

					}
					break;

			}

			pushFollow(FOLLOW_strucTypePart_in_strucType3695);
			strucTypePart176=strucTypePart();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_strucTypePart.add(strucTypePart176.getTree());
			// AST REWRITE
			// elements: strucTypePart
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 200:58: -> strucTypePart
			{
				adaptor.addChild(root_0, stream_strucTypePart.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 41, strucType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "strucType"


	public static class strucTypePart_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "strucTypePart"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:202:1: strucTypePart : ( arrayType | setType | fileType | classDecl );
	public final DelphiParser.strucTypePart_return strucTypePart() throws RecognitionException {
		DelphiParser.strucTypePart_return retval = new DelphiParser.strucTypePart_return();
		retval.start = input.LT(1);
		int strucTypePart_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope arrayType177 =null;
		ParserRuleReturnScope setType178 =null;
		ParserRuleReturnScope fileType179 =null;
		ParserRuleReturnScope classDecl180 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:202:30: ( arrayType | setType | fileType | classDecl )
			int alt52=4;
			switch ( input.LA(1) ) {
			case ARRAY:
				{
				alt52=1;
				}
				break;
			case SET:
				{
				alt52=2;
				}
				break;
			case FILE:
				{
				alt52=3;
				}
				break;
			case CLASS:
			case DISPINTERFACE:
			case INTERFACE:
			case OBJECT:
			case RECORD:
				{
				alt52=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 52, 0, input);
				throw nvae;
			}
			switch (alt52) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:202:32: arrayType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_arrayType_in_strucTypePart3751);
					arrayType177=arrayType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayType177.getTree());

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:203:32: setType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_setType_in_strucTypePart3784);
					setType178=setType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, setType178.getTree());

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:204:32: fileType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_fileType_in_strucTypePart3817);
					fileType179=fileType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, fileType179.getTree());

					}
					break;
				case 4 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:205:32: classDecl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classDecl_in_strucTypePart3850);
					classDecl180=classDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classDecl180.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 42, strucTypePart_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "strucTypePart"


	public static class arrayType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "arrayType"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:208:1: arrayType : 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? 'of' arraySubType -> ^( arraySubType 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? ) ;
	public final DelphiParser.arrayType_return arrayType() throws RecognitionException {
		DelphiParser.arrayType_return retval = new DelphiParser.arrayType_return();
		retval.start = input.LT(1);
		int arrayType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal181=null;
		Token char_literal182=null;
		Token char_literal184=null;
		Token char_literal186=null;
		Token string_literal187=null;
		ParserRuleReturnScope arrayIndex183 =null;
		ParserRuleReturnScope arrayIndex185 =null;
		ParserRuleReturnScope arraySubType188 =null;

		Object string_literal181_tree=null;
		Object char_literal182_tree=null;
		Object char_literal184_tree=null;
		Object char_literal186_tree=null;
		Object string_literal187_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
		RewriteRuleTokenStream stream_ARRAY=new RewriteRuleTokenStream(adaptor,"token ARRAY");
		RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
		RewriteRuleTokenStream stream_OF=new RewriteRuleTokenStream(adaptor,"token OF");
		RewriteRuleSubtreeStream stream_arraySubType=new RewriteRuleSubtreeStream(adaptor,"rule arraySubType");
		RewriteRuleSubtreeStream stream_arrayIndex=new RewriteRuleSubtreeStream(adaptor,"rule arrayIndex");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:208:30: ( 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? 'of' arraySubType -> ^( arraySubType 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? ) )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:208:33: 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? 'of' arraySubType
			{
			string_literal181=(Token)match(input,ARRAY,FOLLOW_ARRAY_in_arrayType3908); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_ARRAY.add(string_literal181);

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:208:41: ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )?
			int alt56=2;
			int LA56_0 = input.LA(1);
			if ( (LA56_0==LBRACK) ) {
				alt56=1;
			}
			switch (alt56) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:208:42: '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']'
					{
					char_literal182=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_arrayType3911); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LBRACK.add(char_literal182);

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:208:46: ( arrayIndex )?
					int alt53=2;
					int LA53_0 = input.LA(1);
					if ( (LA53_0==ABSOLUTE||(LA53_0 >= ADD && LA53_0 <= ANSISTRING)||LA53_0==AS||(LA53_0 >= AT && LA53_0 <= AT2)||LA53_0==BREAK||(LA53_0 >= CONTAINS && LA53_0 <= DEFAULT)||LA53_0==DISPID||LA53_0==DIV||(LA53_0 >= DOT && LA53_0 <= DOTDOT)||(LA53_0 >= DQ && LA53_0 <= DW)||LA53_0==EQUAL||LA53_0==EXIT||LA53_0==EXPORT||LA53_0==FALSE||LA53_0==FINAL||(LA53_0 >= FUNCTION && LA53_0 <= GE)||(LA53_0 >= GT && LA53_0 <= HELPER)||(LA53_0 >= IMPLEMENTS && LA53_0 <= INHERITED)||LA53_0==IS||LA53_0==LBRACK||LA53_0==LE||(LA53_0 >= LOCAL && LA53_0 <= NAME)||LA53_0==NIL||(LA53_0 >= NOT && LA53_0 <= OBJECT)||(LA53_0 >= OPERATOR && LA53_0 <= OUT)||(LA53_0 >= PLUS && LA53_0 <= PROCEDURE)||LA53_0==PUBLIC||LA53_0==QuotedString||(LA53_0 >= READ && LA53_0 <= READONLY)||(LA53_0 >= REFERENCE && LA53_0 <= REGISTER)||LA53_0==REMOVE||(LA53_0 >= SHL && LA53_0 <= STATIC)||(LA53_0 >= STORED && LA53_0 <= STRING)||LA53_0==TRUE||(LA53_0 >= TkHexNum && LA53_0 <= TkIntNum)||LA53_0==TkRealNum||LA53_0==UNSAFE||(LA53_0 >= VARARGS && LA53_0 <= VIRTUAL)||(LA53_0 >= WRITE && LA53_0 <= WRITEONLY)||(LA53_0 >= XOR && LA53_0 <= 210)) ) {
						alt53=1;
					}
					switch (alt53) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:208:47: arrayIndex
							{
							pushFollow(FOLLOW_arrayIndex_in_arrayType3914);
							arrayIndex183=arrayIndex();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_arrayIndex.add(arrayIndex183.getTree());
							}
							break;

					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:208:60: ( ',' ( arrayIndex )? )*
					loop55:
					while (true) {
						int alt55=2;
						int LA55_0 = input.LA(1);
						if ( (LA55_0==COMMA) ) {
							alt55=1;
						}

						switch (alt55) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:208:61: ',' ( arrayIndex )?
							{
							char_literal184=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayType3919); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(char_literal184);

							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:208:65: ( arrayIndex )?
							int alt54=2;
							int LA54_0 = input.LA(1);
							if ( (LA54_0==ABSOLUTE||(LA54_0 >= ADD && LA54_0 <= ANSISTRING)||LA54_0==AS||(LA54_0 >= AT && LA54_0 <= AT2)||LA54_0==BREAK||(LA54_0 >= CONTAINS && LA54_0 <= DEFAULT)||LA54_0==DISPID||LA54_0==DIV||(LA54_0 >= DOT && LA54_0 <= DOTDOT)||(LA54_0 >= DQ && LA54_0 <= DW)||LA54_0==EQUAL||LA54_0==EXIT||LA54_0==EXPORT||LA54_0==FALSE||LA54_0==FINAL||(LA54_0 >= FUNCTION && LA54_0 <= GE)||(LA54_0 >= GT && LA54_0 <= HELPER)||(LA54_0 >= IMPLEMENTS && LA54_0 <= INHERITED)||LA54_0==IS||LA54_0==LBRACK||LA54_0==LE||(LA54_0 >= LOCAL && LA54_0 <= NAME)||LA54_0==NIL||(LA54_0 >= NOT && LA54_0 <= OBJECT)||(LA54_0 >= OPERATOR && LA54_0 <= OUT)||(LA54_0 >= PLUS && LA54_0 <= PROCEDURE)||LA54_0==PUBLIC||LA54_0==QuotedString||(LA54_0 >= READ && LA54_0 <= READONLY)||(LA54_0 >= REFERENCE && LA54_0 <= REGISTER)||LA54_0==REMOVE||(LA54_0 >= SHL && LA54_0 <= STATIC)||(LA54_0 >= STORED && LA54_0 <= STRING)||LA54_0==TRUE||(LA54_0 >= TkHexNum && LA54_0 <= TkIntNum)||LA54_0==TkRealNum||LA54_0==UNSAFE||(LA54_0 >= VARARGS && LA54_0 <= VIRTUAL)||(LA54_0 >= WRITE && LA54_0 <= WRITEONLY)||(LA54_0 >= XOR && LA54_0 <= 210)) ) {
								alt54=1;
							}
							switch (alt54) {
								case 1 :
									// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:208:66: arrayIndex
									{
									pushFollow(FOLLOW_arrayIndex_in_arrayType3922);
									arrayIndex185=arrayIndex();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_arrayIndex.add(arrayIndex185.getTree());
									}
									break;

							}

							}
							break;

						default :
							break loop55;
						}
					}

					char_literal186=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_arrayType3928); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RBRACK.add(char_literal186);

					}
					break;

			}

			string_literal187=(Token)match(input,OF,FOLLOW_OF_in_arrayType3932); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_OF.add(string_literal187);

			pushFollow(FOLLOW_arraySubType_in_arrayType3934);
			arraySubType188=arraySubType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_arraySubType.add(arraySubType188.getTree());
			// AST REWRITE
			// elements: COMMA, ARRAY, RBRACK, LBRACK, arrayIndex, arrayIndex, arraySubType
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 209:30: -> ^( arraySubType 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? )
			{
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:209:33: ^( arraySubType 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_arraySubType.nextNode(), root_1);
				adaptor.addChild(root_1, stream_ARRAY.nextNode());
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:209:56: ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )?
				if ( stream_COMMA.hasNext()||stream_RBRACK.hasNext()||stream_LBRACK.hasNext()||stream_arrayIndex.hasNext() ) {
					adaptor.addChild(root_1, stream_LBRACK.nextNode());
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:209:61: ( arrayIndex )?
					if ( stream_arrayIndex.hasNext() ) {
						adaptor.addChild(root_1, stream_arrayIndex.nextTree());
					}
					stream_arrayIndex.reset();

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:209:75: ( ',' ( arrayIndex )? )*
					while ( stream_COMMA.hasNext() ) {
						adaptor.addChild(root_1, stream_COMMA.nextNode());
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:209:80: ( arrayIndex )?
						if ( stream_arrayIndex.hasNext() ) {
							adaptor.addChild(root_1, stream_arrayIndex.nextTree());
						}
						stream_arrayIndex.reset();

					}
					stream_COMMA.reset();

					adaptor.addChild(root_1, stream_RBRACK.nextNode());
				}
				stream_COMMA.reset();
				stream_RBRACK.reset();
				stream_LBRACK.reset();
				stream_arrayIndex.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 43, arrayType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "arrayType"


	public static class arrayIndex_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "arrayIndex"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:212:1: arrayIndex : ( typeId | expression '..' expression );
	public final DelphiParser.arrayIndex_return arrayIndex() throws RecognitionException {
		DelphiParser.arrayIndex_return retval = new DelphiParser.arrayIndex_return();
		retval.start = input.LT(1);
		int arrayIndex_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal191=null;
		ParserRuleReturnScope typeId189 =null;
		ParserRuleReturnScope expression190 =null;
		ParserRuleReturnScope expression192 =null;

		Object string_literal191_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:212:30: ( typeId | expression '..' expression )
			int alt57=2;
			alt57 = dfa57.predict(input);
			switch (alt57) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:212:32: typeId
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_typeId_in_arrayIndex4060);
					typeId189=typeId();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeId189.getTree());

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:213:32: expression '..' expression
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_expression_in_arrayIndex4093);
					expression190=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression190.getTree());

					string_literal191=(Token)match(input,DOTDOT,FOLLOW_DOTDOT_in_arrayIndex4095); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal191_tree = (Object)adaptor.create(string_literal191);
					adaptor.addChild(root_0, string_literal191_tree);
					}

					pushFollow(FOLLOW_expression_in_arrayIndex4097);
					expression192=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression192.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 44, arrayIndex_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "arrayIndex"


	public static class arraySubType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "arraySubType"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:216:1: arraySubType : ( 'const' | typeDecl );
	public final DelphiParser.arraySubType_return arraySubType() throws RecognitionException {
		DelphiParser.arraySubType_return retval = new DelphiParser.arraySubType_return();
		retval.start = input.LT(1);
		int arraySubType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal193=null;
		ParserRuleReturnScope typeDecl194 =null;

		Object string_literal193_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:216:30: ( 'const' | typeDecl )
			int alt58=2;
			int LA58_0 = input.LA(1);
			if ( (LA58_0==CONST) ) {
				alt58=1;
			}
			else if ( (LA58_0==ABSOLUTE||(LA58_0 >= ADD && LA58_0 <= AS)||(LA58_0 >= AT && LA58_0 <= AT2)||LA58_0==BREAK||LA58_0==CLASS||(LA58_0 >= CONTAINS && LA58_0 <= DEFAULT)||(LA58_0 >= DISPID && LA58_0 <= DIV)||(LA58_0 >= DOT && LA58_0 <= DOTDOT)||(LA58_0 >= DQ && LA58_0 <= DW)||LA58_0==EQUAL||LA58_0==EXIT||LA58_0==EXPORT||LA58_0==FALSE||(LA58_0 >= FILE && LA58_0 <= FINAL)||(LA58_0 >= FUNCTION && LA58_0 <= GE)||(LA58_0 >= GT && LA58_0 <= HELPER)||(LA58_0 >= IMPLEMENTS && LA58_0 <= INHERITED)||(LA58_0 >= INTERFACE && LA58_0 <= IS)||LA58_0==LBRACK||LA58_0==LE||(LA58_0 >= LOCAL && LA58_0 <= NAME)||LA58_0==NIL||(LA58_0 >= NOT && LA58_0 <= OBJECT)||(LA58_0 >= OPERATOR && LA58_0 <= OUT)||LA58_0==PACKED||(LA58_0 >= PLUS && LA58_0 <= PROCEDURE)||LA58_0==PUBLIC||LA58_0==QuotedString||(LA58_0 >= READ && LA58_0 <= REGISTER)||LA58_0==REMOVE||(LA58_0 >= SET && LA58_0 <= STATIC)||(LA58_0 >= STORED && LA58_0 <= STRING)||LA58_0==TRUE||LA58_0==TYPE||(LA58_0 >= TkHexNum && LA58_0 <= TkIntNum)||LA58_0==TkRealNum||LA58_0==UNSAFE||(LA58_0 >= VARARGS && LA58_0 <= VIRTUAL)||(LA58_0 >= WRITE && LA58_0 <= WRITEONLY)||(LA58_0 >= XOR && LA58_0 <= 210)) ) {
				alt58=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 58, 0, input);
				throw nvae;
			}

			switch (alt58) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:216:32: 'const'
					{
					root_0 = (Object)adaptor.nil();


					string_literal193=(Token)match(input,CONST,FOLLOW_CONST_in_arraySubType4151); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal193_tree = (Object)adaptor.create(string_literal193);
					adaptor.addChild(root_0, string_literal193_tree);
					}

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:217:32: typeDecl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_typeDecl_in_arraySubType4184);
					typeDecl194=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl194.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 45, arraySubType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "arraySubType"


	public static class setType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "setType"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:219:1: setType : 'set' 'of' typeDecl -> 'set' typeDecl ;
	public final DelphiParser.setType_return setType() throws RecognitionException {
		DelphiParser.setType_return retval = new DelphiParser.setType_return();
		retval.start = input.LT(1);
		int setType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal195=null;
		Token string_literal196=null;
		ParserRuleReturnScope typeDecl197 =null;

		Object string_literal195_tree=null;
		Object string_literal196_tree=null;
		RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
		RewriteRuleTokenStream stream_OF=new RewriteRuleTokenStream(adaptor,"token OF");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:219:30: ( 'set' 'of' typeDecl -> 'set' typeDecl )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:219:32: 'set' 'of' typeDecl
			{
			string_literal195=(Token)match(input,SET,FOLLOW_SET_in_setType4242); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SET.add(string_literal195);

			string_literal196=(Token)match(input,OF,FOLLOW_OF_in_setType4244); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_OF.add(string_literal196);

			pushFollow(FOLLOW_typeDecl_in_setType4246);
			typeDecl197=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl197.getTree());
			// AST REWRITE
			// elements: typeDecl, SET
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 219:52: -> 'set' typeDecl
			{
				adaptor.addChild(root_0, stream_SET.nextNode());
				adaptor.addChild(root_0, stream_typeDecl.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 46, setType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "setType"


	public static class fileType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "fileType"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:222:1: fileType : 'file' ( 'of' typeDecl )? ;
	public final DelphiParser.fileType_return fileType() throws RecognitionException {
		DelphiParser.fileType_return retval = new DelphiParser.fileType_return();
		retval.start = input.LT(1);
		int fileType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal198=null;
		Token string_literal199=null;
		ParserRuleReturnScope typeDecl200 =null;

		Object string_literal198_tree=null;
		Object string_literal199_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:222:30: ( 'file' ( 'of' typeDecl )? )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:222:32: 'file' ( 'of' typeDecl )?
			{
			root_0 = (Object)adaptor.nil();


			string_literal198=(Token)match(input,FILE,FOLLOW_FILE_in_fileType4320); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal198_tree = (Object)adaptor.create(string_literal198);
			adaptor.addChild(root_0, string_literal198_tree);
			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:222:39: ( 'of' typeDecl )?
			int alt59=2;
			alt59 = dfa59.predict(input);
			switch (alt59) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:222:40: 'of' typeDecl
					{
					string_literal199=(Token)match(input,OF,FOLLOW_OF_in_fileType4323); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal199_tree = (Object)adaptor.create(string_literal199);
					adaptor.addChild(root_0, string_literal199_tree);
					}

					pushFollow(FOLLOW_typeDecl_in_fileType4325);
					typeDecl200=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl200.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 47, fileType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "fileType"


	public static class pointerType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "pointerType"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:224:1: pointerType : ( '^' typeDecl | 'pointer' );
	public final DelphiParser.pointerType_return pointerType() throws RecognitionException {
		DelphiParser.pointerType_return retval = new DelphiParser.pointerType_return();
		retval.start = input.LT(1);
		int pointerType_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal201=null;
		Token string_literal203=null;
		ParserRuleReturnScope typeDecl202 =null;

		Object char_literal201_tree=null;
		Object string_literal203_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:224:30: ( '^' typeDecl | 'pointer' )
			int alt60=2;
			int LA60_0 = input.LA(1);
			if ( (LA60_0==POINTER2) ) {
				alt60=1;
			}
			else if ( (LA60_0==POINTER) ) {
				alt60=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 60, 0, input);
				throw nvae;
			}

			switch (alt60) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:224:32: '^' typeDecl
					{
					root_0 = (Object)adaptor.nil();


					char_literal201=(Token)match(input,POINTER2,FOLLOW_POINTER2_in_pointerType4381); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal201_tree = (Object)adaptor.create(char_literal201);
					adaptor.addChild(root_0, char_literal201_tree);
					}

					pushFollow(FOLLOW_typeDecl_in_pointerType4383);
					typeDecl202=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl202.getTree());

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:225:32: 'pointer'
					{
					root_0 = (Object)adaptor.nil();


					string_literal203=(Token)match(input,POINTER,FOLLOW_POINTER_in_pointerType4416); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal203_tree = (Object)adaptor.create(string_literal203);
					adaptor.addChild(root_0, string_literal203_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 48, pointerType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "pointerType"


	public static class stringType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "stringType"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:227:1: stringType : ( 'string' ( '[' expression ']' )? -> 'string' | ( 'type' )? ANSISTRING ( codePageNumber )? );
	public final DelphiParser.stringType_return stringType() throws RecognitionException {
		DelphiParser.stringType_return retval = new DelphiParser.stringType_return();
		retval.start = input.LT(1);
		int stringType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal204=null;
		Token char_literal205=null;
		Token char_literal207=null;
		Token string_literal208=null;
		Token ANSISTRING209=null;
		ParserRuleReturnScope expression206 =null;
		ParserRuleReturnScope codePageNumber210 =null;

		Object string_literal204_tree=null;
		Object char_literal205_tree=null;
		Object char_literal207_tree=null;
		Object string_literal208_tree=null;
		Object ANSISTRING209_tree=null;
		RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
		RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
		RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:227:30: ( 'string' ( '[' expression ']' )? -> 'string' | ( 'type' )? ANSISTRING ( codePageNumber )? )
			int alt64=2;
			int LA64_0 = input.LA(1);
			if ( (LA64_0==STRING) ) {
				alt64=1;
			}
			else if ( (LA64_0==ANSISTRING||LA64_0==TYPE) ) {
				alt64=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 64, 0, input);
				throw nvae;
			}

			switch (alt64) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:227:32: 'string' ( '[' expression ']' )?
					{
					string_literal204=(Token)match(input,STRING,FOLLOW_STRING_in_stringType4471); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_STRING.add(string_literal204);

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:227:41: ( '[' expression ']' )?
					int alt61=2;
					alt61 = dfa61.predict(input);
					switch (alt61) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:227:42: '[' expression ']'
							{
							char_literal205=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_stringType4474); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LBRACK.add(char_literal205);

							pushFollow(FOLLOW_expression_in_stringType4476);
							expression206=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_expression.add(expression206.getTree());
							char_literal207=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_stringType4478); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_RBRACK.add(char_literal207);

							}
							break;

					}

					// AST REWRITE
					// elements: STRING
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 227:63: -> 'string'
					{
						adaptor.addChild(root_0, stream_STRING.nextNode());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:228:32: ( 'type' )? ANSISTRING ( codePageNumber )?
					{
					root_0 = (Object)adaptor.nil();


					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:228:32: ( 'type' )?
					int alt62=2;
					int LA62_0 = input.LA(1);
					if ( (LA62_0==TYPE) ) {
						alt62=1;
					}
					switch (alt62) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:228:33: 'type'
							{
							string_literal208=(Token)match(input,TYPE,FOLLOW_TYPE_in_stringType4518); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal208_tree = (Object)adaptor.create(string_literal208);
							adaptor.addChild(root_0, string_literal208_tree);
							}

							}
							break;

					}

					ANSISTRING209=(Token)match(input,ANSISTRING,FOLLOW_ANSISTRING_in_stringType4522); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ANSISTRING209_tree = (Object)adaptor.create(ANSISTRING209);
					adaptor.addChild(root_0, ANSISTRING209_tree);
					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:228:53: ( codePageNumber )?
					int alt63=2;
					int LA63_0 = input.LA(1);
					if ( (LA63_0==LPAREN) ) {
						int LA63_1 = input.LA(2);
						if ( (LA63_1==TkHexNum||LA63_1==TkIntNum) ) {
							int LA63_3 = input.LA(3);
							if ( (LA63_3==RPAREN) ) {
								int LA63_4 = input.LA(4);
								if ( (synpred88_Delphi()) ) {
									alt63=1;
								}
							}
						}
					}
					switch (alt63) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:228:54: codePageNumber
							{
							pushFollow(FOLLOW_codePageNumber_in_stringType4525);
							codePageNumber210=codePageNumber();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, codePageNumber210.getTree());

							}
							break;

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 49, stringType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "stringType"


	public static class codePageNumber_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "codePageNumber"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:1: codePageNumber : '(' intNum ')' ;
	public final DelphiParser.codePageNumber_return codePageNumber() throws RecognitionException {
		DelphiParser.codePageNumber_return retval = new DelphiParser.codePageNumber_return();
		retval.start = input.LT(1);
		int codePageNumber_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal211=null;
		Token char_literal213=null;
		ParserRuleReturnScope intNum212 =null;

		Object char_literal211_tree=null;
		Object char_literal213_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:30: ( '(' intNum ')' )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:32: '(' intNum ')'
			{
			root_0 = (Object)adaptor.nil();


			char_literal211=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_codePageNumber4578); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal211_tree = (Object)adaptor.create(char_literal211);
			adaptor.addChild(root_0, char_literal211_tree);
			}

			pushFollow(FOLLOW_intNum_in_codePageNumber4580);
			intNum212=intNum();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, intNum212.getTree());

			char_literal213=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_codePageNumber4582); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal213_tree = (Object)adaptor.create(char_literal213);
			adaptor.addChild(root_0, char_literal213_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 50, codePageNumber_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "codePageNumber"


	public static class procedureType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "procedureType"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:232:1: procedureType : ( methodType | simpleProcedureType | procedureReference );
	public final DelphiParser.procedureType_return procedureType() throws RecognitionException {
		DelphiParser.procedureType_return retval = new DelphiParser.procedureType_return();
		retval.start = input.LT(1);
		int procedureType_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope methodType214 =null;
		ParserRuleReturnScope simpleProcedureType215 =null;
		ParserRuleReturnScope procedureReference216 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:232:30: ( methodType | simpleProcedureType | procedureReference )
			int alt65=3;
			switch ( input.LA(1) ) {
			case FUNCTION:
				{
				int LA65_1 = input.LA(2);
				if ( (synpred89_Delphi()) ) {
					alt65=1;
				}
				else if ( (synpred90_Delphi()) ) {
					alt65=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 65, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PROCEDURE:
				{
				int LA65_2 = input.LA(2);
				if ( (synpred89_Delphi()) ) {
					alt65=1;
				}
				else if ( (synpred90_Delphi()) ) {
					alt65=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 65, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case REFERENCE:
				{
				alt65=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 65, 0, input);
				throw nvae;
			}
			switch (alt65) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:232:32: methodType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_methodType_in_procedureType4634);
					methodType214=methodType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, methodType214.getTree());

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:233:32: simpleProcedureType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_simpleProcedureType_in_procedureType4667);
					simpleProcedureType215=simpleProcedureType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleProcedureType215.getTree());

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:234:32: procedureReference
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_procedureReference_in_procedureType4700);
					procedureReference216=procedureReference();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureReference216.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 51, procedureType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "procedureType"


	public static class methodType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodType"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:236:1: methodType : procedureTypeHeading 'of' 'object' ;
	public final DelphiParser.methodType_return methodType() throws RecognitionException {
		DelphiParser.methodType_return retval = new DelphiParser.methodType_return();
		retval.start = input.LT(1);
		int methodType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal218=null;
		Token string_literal219=null;
		ParserRuleReturnScope procedureTypeHeading217 =null;

		Object string_literal218_tree=null;
		Object string_literal219_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:236:30: ( procedureTypeHeading 'of' 'object' )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:236:32: procedureTypeHeading 'of' 'object'
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_procedureTypeHeading_in_methodType4755);
			procedureTypeHeading217=procedureTypeHeading();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureTypeHeading217.getTree());

			string_literal218=(Token)match(input,OF,FOLLOW_OF_in_methodType4757); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal218_tree = (Object)adaptor.create(string_literal218);
			adaptor.addChild(root_0, string_literal218_tree);
			}

			string_literal219=(Token)match(input,OBJECT,FOLLOW_OBJECT_in_methodType4759); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal219_tree = (Object)adaptor.create(string_literal219);
			adaptor.addChild(root_0, string_literal219_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 52, methodType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodType"


	public static class simpleProcedureType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "simpleProcedureType"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:238:1: simpleProcedureType : procedureTypeHeading ( ( ';' )? callConventionNoSemi )? ;
	public final DelphiParser.simpleProcedureType_return simpleProcedureType() throws RecognitionException {
		DelphiParser.simpleProcedureType_return retval = new DelphiParser.simpleProcedureType_return();
		retval.start = input.LT(1);
		int simpleProcedureType_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal221=null;
		ParserRuleReturnScope procedureTypeHeading220 =null;
		ParserRuleReturnScope callConventionNoSemi222 =null;

		Object char_literal221_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:238:30: ( procedureTypeHeading ( ( ';' )? callConventionNoSemi )? )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:238:32: procedureTypeHeading ( ( ';' )? callConventionNoSemi )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_procedureTypeHeading_in_simpleProcedureType4805);
			procedureTypeHeading220=procedureTypeHeading();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureTypeHeading220.getTree());

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:238:53: ( ( ';' )? callConventionNoSemi )?
			int alt67=2;
			switch ( input.LA(1) ) {
				case SEMI:
					{
					int LA67_1 = input.LA(2);
					if ( (synpred92_Delphi()) ) {
						alt67=1;
					}
					}
					break;
				case REGISTER:
					{
					int LA67_2 = input.LA(2);
					if ( (synpred92_Delphi()) ) {
						alt67=1;
					}
					}
					break;
				case CDECL:
					{
					int LA67_4 = input.LA(2);
					if ( (synpred92_Delphi()) ) {
						alt67=1;
					}
					}
					break;
				case PASCAL:
					{
					int LA67_5 = input.LA(2);
					if ( (synpred92_Delphi()) ) {
						alt67=1;
					}
					}
					break;
				case SAFECALL:
					{
					int LA67_6 = input.LA(2);
					if ( (synpred92_Delphi()) ) {
						alt67=1;
					}
					}
					break;
				case EXPORT:
					{
					int LA67_7 = input.LA(2);
					if ( (synpred92_Delphi()) ) {
						alt67=1;
					}
					}
					break;
				case STDCALL:
					{
					int LA67_8 = input.LA(2);
					if ( (synpred92_Delphi()) ) {
						alt67=1;
					}
					}
					break;
			}
			switch (alt67) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:238:55: ( ';' )? callConventionNoSemi
					{
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:238:55: ( ';' )?
					int alt66=2;
					int LA66_0 = input.LA(1);
					if ( (LA66_0==SEMI) ) {
						alt66=1;
					}
					switch (alt66) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:238:56: ';'
							{
							char_literal221=(Token)match(input,SEMI,FOLLOW_SEMI_in_simpleProcedureType4810); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal221_tree = (Object)adaptor.create(char_literal221);
							adaptor.addChild(root_0, char_literal221_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_callConventionNoSemi_in_simpleProcedureType4814);
					callConventionNoSemi222=callConventionNoSemi();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, callConventionNoSemi222.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 53, simpleProcedureType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "simpleProcedureType"


	public static class procedureReference_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "procedureReference"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:240:1: procedureReference : 'reference' 'to' procedureTypeHeading ;
	public final DelphiParser.procedureReference_return procedureReference() throws RecognitionException {
		DelphiParser.procedureReference_return retval = new DelphiParser.procedureReference_return();
		retval.start = input.LT(1);
		int procedureReference_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal223=null;
		Token string_literal224=null;
		ParserRuleReturnScope procedureTypeHeading225 =null;

		Object string_literal223_tree=null;
		Object string_literal224_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:240:30: ( 'reference' 'to' procedureTypeHeading )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:240:32: 'reference' 'to' procedureTypeHeading
			{
			root_0 = (Object)adaptor.nil();


			string_literal223=(Token)match(input,REFERENCE,FOLLOW_REFERENCE_in_procedureReference4863); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal223_tree = (Object)adaptor.create(string_literal223);
			adaptor.addChild(root_0, string_literal223_tree);
			}

			string_literal224=(Token)match(input,TO,FOLLOW_TO_in_procedureReference4865); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal224_tree = (Object)adaptor.create(string_literal224);
			adaptor.addChild(root_0, string_literal224_tree);
			}

			pushFollow(FOLLOW_procedureTypeHeading_in_procedureReference4867);
			procedureTypeHeading225=procedureTypeHeading();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureTypeHeading225.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 54, procedureReference_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "procedureReference"


	public static class procedureTypeHeading_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "procedureTypeHeading"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:242:1: procedureTypeHeading : ( 'function' ( formalParameterSection )? ':' ( customAttribute )? typeDecl -> 'function' ( formalParameterSection )? ^( TkFunctionReturn typeDecl ) | 'procedure' ( formalParameterSection )? );
	public final DelphiParser.procedureTypeHeading_return procedureTypeHeading() throws RecognitionException {
		DelphiParser.procedureTypeHeading_return retval = new DelphiParser.procedureTypeHeading_return();
		retval.start = input.LT(1);
		int procedureTypeHeading_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal226=null;
		Token char_literal228=null;
		Token string_literal231=null;
		ParserRuleReturnScope formalParameterSection227 =null;
		ParserRuleReturnScope customAttribute229 =null;
		ParserRuleReturnScope typeDecl230 =null;
		ParserRuleReturnScope formalParameterSection232 =null;

		Object string_literal226_tree=null;
		Object char_literal228_tree=null;
		Object string_literal231_tree=null;
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_formalParameterSection=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterSection");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:242:30: ( 'function' ( formalParameterSection )? ':' ( customAttribute )? typeDecl -> 'function' ( formalParameterSection )? ^( TkFunctionReturn typeDecl ) | 'procedure' ( formalParameterSection )? )
			int alt71=2;
			int LA71_0 = input.LA(1);
			if ( (LA71_0==FUNCTION) ) {
				alt71=1;
			}
			else if ( (LA71_0==PROCEDURE) ) {
				alt71=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 71, 0, input);
				throw nvae;
			}

			switch (alt71) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:242:32: 'function' ( formalParameterSection )? ':' ( customAttribute )? typeDecl
					{
					string_literal226=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_procedureTypeHeading4912); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_FUNCTION.add(string_literal226);

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:242:43: ( formalParameterSection )?
					int alt68=2;
					int LA68_0 = input.LA(1);
					if ( (LA68_0==LPAREN) ) {
						alt68=1;
					}
					switch (alt68) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:242:44: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_procedureTypeHeading4915);
							formalParameterSection227=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection227.getTree());
							}
							break;

					}

					char_literal228=(Token)match(input,COLON,FOLLOW_COLON_in_procedureTypeHeading4919); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(char_literal228);

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:242:73: ( customAttribute )?
					int alt69=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							int LA69_1 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case PACKED:
							{
							int LA69_2 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case ARRAY:
							{
							int LA69_3 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case SET:
							{
							int LA69_4 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case FILE:
							{
							int LA69_5 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case CLASS:
							{
							int LA69_6 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case DISPINTERFACE:
						case INTERFACE:
							{
							int LA69_7 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case OBJECT:
							{
							int LA69_8 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case RECORD:
							{
							int LA69_9 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case POINTER2:
							{
							int LA69_10 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case POINTER:
							{
							int LA69_11 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case STRING:
							{
							int LA69_12 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case TYPE:
							{
							int LA69_13 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case ANSISTRING:
							{
							int LA69_14 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case FUNCTION:
							{
							int LA69_15 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case PROCEDURE:
							{
							int LA69_16 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case REFERENCE:
							{
							int LA69_17 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case VARIANT:
							{
							int LA69_18 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case LPAREN:
							{
							int LA69_19 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case AT2:
							{
							int LA69_20 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case 199:
							{
							int LA69_21 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case NOT:
							{
							int LA69_22 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case PLUS:
							{
							int LA69_23 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case MINUS:
							{
							int LA69_24 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case TkRealNum:
							{
							int LA69_25 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case TkHexNum:
						case TkIntNum:
							{
							int LA69_26 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case TRUE:
							{
							int LA69_27 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case FALSE:
							{
							int LA69_28 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case NIL:
							{
							int LA69_29 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case 210:
							{
							int LA69_30 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case ControlChar:
							{
							int LA69_31 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case QuotedString:
							{
							int LA69_32 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case 203:
							{
							int LA69_33 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case INHERITED:
							{
							int LA69_34 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case TkIdentifier:
							{
							int LA69_35 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case 198:
							{
							int LA69_36 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case IN:
							{
							int LA69_37 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case 209:
							{
							int LA69_38 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case DOT:
							{
							int LA69_39 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case LT:
							{
							int LA69_40 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case AND:
						case AS:
						case DIV:
						case MOD:
						case OR:
						case SHL:
						case SHR:
						case SLASH:
						case STAR:
						case XOR:
						case 200:
						case 201:
						case 202:
						case 204:
						case 205:
						case 206:
						case 207:
						case 208:
							{
							int LA69_41 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case ABSOLUTE:
						case ADD:
						case AT:
						case BREAK:
						case CONTAINS:
						case CONTINUE:
						case DEFAULT:
						case DISPID:
						case DQ:
						case DW:
						case EXIT:
						case EXPORT:
						case FINAL:
						case HELPER:
						case IMPLEMENTS:
						case INDEX:
						case LOCAL:
						case MESSAGE:
						case NAME:
						case OPERATOR:
						case OUT:
						case PRIVATE:
						case PUBLIC:
						case READ:
						case READONLY:
						case REGISTER:
						case REMOVE:
						case STATIC:
						case STORED:
						case STRICT:
						case UNSAFE:
						case VARARGS:
						case VIRTUAL:
						case WRITE:
						case WRITEONLY:
							{
							int LA69_42 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case EQUAL:
							{
							int LA69_43 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case GE:
						case GT:
						case IS:
						case LE:
						case NOT_EQUAL:
							{
							int LA69_44 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
						case DOTDOT:
							{
							int LA69_45 = input.LA(2);
							if ( (synpred94_Delphi()) ) {
								alt69=1;
							}
							}
							break;
					}
					switch (alt69) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:242:74: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_procedureTypeHeading4922);
							customAttribute229=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute229.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_typeDecl_in_procedureTypeHeading4926);
					typeDecl230=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl230.getTree());
					// AST REWRITE
					// elements: FUNCTION, formalParameterSection, typeDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 242:101: -> 'function' ( formalParameterSection )? ^( TkFunctionReturn typeDecl )
					{
						adaptor.addChild(root_0, stream_FUNCTION.nextNode());
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:242:115: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_0, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:242:141: ^( TkFunctionReturn typeDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionReturn, "TkFunctionReturn"), root_1);
						adaptor.addChild(root_1, stream_typeDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:243:32: 'procedure' ( formalParameterSection )?
					{
					root_0 = (Object)adaptor.nil();


					string_literal231=(Token)match(input,PROCEDURE,FOLLOW_PROCEDURE_in_procedureTypeHeading4974); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal231_tree = (Object)adaptor.create(string_literal231);
					adaptor.addChild(root_0, string_literal231_tree);
					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:243:44: ( formalParameterSection )?
					int alt70=2;
					alt70 = dfa70.predict(input);
					switch (alt70) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:243:45: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_procedureTypeHeading4977);
							formalParameterSection232=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterSection232.getTree());

							}
							break;

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 55, procedureTypeHeading_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "procedureTypeHeading"


	public static class variantType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "variantType"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:245:1: variantType : 'variant' ;
	public final DelphiParser.variantType_return variantType() throws RecognitionException {
		DelphiParser.variantType_return retval = new DelphiParser.variantType_return();
		retval.start = input.LT(1);
		int variantType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal233=null;

		Object string_literal233_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:245:30: ( 'variant' )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:245:32: 'variant'
			{
			root_0 = (Object)adaptor.nil();


			string_literal233=(Token)match(input,VARIANT,FOLLOW_VARIANT_in_variantType5033); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal233_tree = (Object)adaptor.create(string_literal233);
			adaptor.addChild(root_0, string_literal233_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 56, variantType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "variantType"


	public static class simpleType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "simpleType"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:247:1: simpleType : ( ident | enumType );
	public final DelphiParser.simpleType_return simpleType() throws RecognitionException {
		DelphiParser.simpleType_return retval = new DelphiParser.simpleType_return();
		retval.start = input.LT(1);
		int simpleType_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope ident234 =null;
		ParserRuleReturnScope enumType235 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:247:30: ( ident | enumType )
			int alt72=2;
			int LA72_0 = input.LA(1);
			if ( (LA72_0==ABSOLUTE||LA72_0==ADD||LA72_0==ANSISTRING||LA72_0==AT||LA72_0==BREAK||(LA72_0 >= CONTAINS && LA72_0 <= CONTINUE)||LA72_0==DEFAULT||LA72_0==DISPID||(LA72_0 >= DQ && LA72_0 <= DW)||LA72_0==EXIT||LA72_0==EXPORT||LA72_0==FALSE||LA72_0==FINAL||LA72_0==HELPER||(LA72_0 >= IMPLEMENTS && LA72_0 <= INDEX)||LA72_0==LOCAL||LA72_0==MESSAGE||LA72_0==NAME||LA72_0==OBJECT||LA72_0==OPERATOR||LA72_0==OUT||LA72_0==POINTER||LA72_0==PRIVATE||LA72_0==PUBLIC||(LA72_0 >= READ && LA72_0 <= READONLY)||(LA72_0 >= REFERENCE && LA72_0 <= REGISTER)||LA72_0==REMOVE||LA72_0==STATIC||(LA72_0 >= STORED && LA72_0 <= STRING)||LA72_0==TRUE||LA72_0==TkIdentifier||LA72_0==UNSAFE||(LA72_0 >= VARARGS && LA72_0 <= VIRTUAL)||(LA72_0 >= WRITE && LA72_0 <= WRITEONLY)||LA72_0==198) ) {
				alt72=1;
			}
			else if ( (LA72_0==LPAREN) ) {
				alt72=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 72, 0, input);
				throw nvae;
			}

			switch (alt72) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:247:32: ident
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_ident_in_simpleType5089);
					ident234=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident234.getTree());

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:248:32: enumType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_enumType_in_simpleType5122);
					enumType235=enumType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, enumType235.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 57, simpleType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "simpleType"


	public static class subRangeType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "subRangeType"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:250:1: subRangeType : constExpression '..' constExpression ;
	public final DelphiParser.subRangeType_return subRangeType() throws RecognitionException {
		DelphiParser.subRangeType_return retval = new DelphiParser.subRangeType_return();
		retval.start = input.LT(1);
		int subRangeType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal237=null;
		ParserRuleReturnScope constExpression236 =null;
		ParserRuleReturnScope constExpression238 =null;

		Object string_literal237_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:250:30: ( constExpression '..' constExpression )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:250:32: constExpression '..' constExpression
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_constExpression_in_subRangeType5175);
			constExpression236=constExpression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression236.getTree());

			string_literal237=(Token)match(input,DOTDOT,FOLLOW_DOTDOT_in_subRangeType5177); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal237_tree = (Object)adaptor.create(string_literal237);
			adaptor.addChild(root_0, string_literal237_tree);
			}

			pushFollow(FOLLOW_constExpression_in_subRangeType5179);
			constExpression238=constExpression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression238.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 58, subRangeType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "subRangeType"


	public static class enumType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "enumType"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:252:1: enumType : '(' ident ( '=' expression )? ( ',' ident ( '=' expression )? )* ')' ;
	public final DelphiParser.enumType_return enumType() throws RecognitionException {
		DelphiParser.enumType_return retval = new DelphiParser.enumType_return();
		retval.start = input.LT(1);
		int enumType_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal239=null;
		Token char_literal241=null;
		Token char_literal243=null;
		Token char_literal245=null;
		Token char_literal247=null;
		ParserRuleReturnScope ident240 =null;
		ParserRuleReturnScope expression242 =null;
		ParserRuleReturnScope ident244 =null;
		ParserRuleReturnScope expression246 =null;

		Object char_literal239_tree=null;
		Object char_literal241_tree=null;
		Object char_literal243_tree=null;
		Object char_literal245_tree=null;
		Object char_literal247_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:252:30: ( '(' ident ( '=' expression )? ( ',' ident ( '=' expression )? )* ')' )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:252:32: '(' ident ( '=' expression )? ( ',' ident ( '=' expression )? )* ')'
			{
			root_0 = (Object)adaptor.nil();


			char_literal239=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_enumType5236); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal239_tree = (Object)adaptor.create(char_literal239);
			adaptor.addChild(root_0, char_literal239_tree);
			}

			pushFollow(FOLLOW_ident_in_enumType5238);
			ident240=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident240.getTree());

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:252:42: ( '=' expression )?
			int alt73=2;
			int LA73_0 = input.LA(1);
			if ( (LA73_0==EQUAL) ) {
				alt73=1;
			}
			switch (alt73) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:252:43: '=' expression
					{
					char_literal241=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_enumType5241); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal241_tree = (Object)adaptor.create(char_literal241);
					adaptor.addChild(root_0, char_literal241_tree);
					}

					pushFollow(FOLLOW_expression_in_enumType5243);
					expression242=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression242.getTree());

					}
					break;

			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:252:60: ( ',' ident ( '=' expression )? )*
			loop75:
			while (true) {
				int alt75=2;
				int LA75_0 = input.LA(1);
				if ( (LA75_0==COMMA) ) {
					alt75=1;
				}

				switch (alt75) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:252:61: ',' ident ( '=' expression )?
					{
					char_literal243=(Token)match(input,COMMA,FOLLOW_COMMA_in_enumType5248); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal243_tree = (Object)adaptor.create(char_literal243);
					adaptor.addChild(root_0, char_literal243_tree);
					}

					pushFollow(FOLLOW_ident_in_enumType5250);
					ident244=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident244.getTree());

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:252:71: ( '=' expression )?
					int alt74=2;
					int LA74_0 = input.LA(1);
					if ( (LA74_0==EQUAL) ) {
						alt74=1;
					}
					switch (alt74) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:252:72: '=' expression
							{
							char_literal245=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_enumType5253); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal245_tree = (Object)adaptor.create(char_literal245);
							adaptor.addChild(root_0, char_literal245_tree);
							}

							pushFollow(FOLLOW_expression_in_enumType5255);
							expression246=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression246.getTree());

							}
							break;

					}

					}
					break;

				default :
					break loop75;
				}
			}

			char_literal247=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_enumType5262); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal247_tree = (Object)adaptor.create(char_literal247);
			adaptor.addChild(root_0, char_literal247_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 59, enumType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "enumType"


	public static class typeId_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "typeId"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:254:1: typeId : qualifiedIdent ;
	public final DelphiParser.typeId_return typeId() throws RecognitionException {
		DelphiParser.typeId_return retval = new DelphiParser.typeId_return();
		retval.start = input.LT(1);
		int typeId_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope qualifiedIdent248 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:254:30: ( qualifiedIdent )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:254:32: qualifiedIdent
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_qualifiedIdent_in_typeId5321);
			qualifiedIdent248=qualifiedIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdent248.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 60, typeId_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "typeId"


	public static class genericTypeIdent_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "genericTypeIdent"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:259:1: genericTypeIdent : qualifiedIdent ( genericDefinition )? -> qualifiedIdent ;
	public final DelphiParser.genericTypeIdent_return genericTypeIdent() throws RecognitionException {
		DelphiParser.genericTypeIdent_return retval = new DelphiParser.genericTypeIdent_return();
		retval.start = input.LT(1);
		int genericTypeIdent_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope qualifiedIdent249 =null;
		ParserRuleReturnScope genericDefinition250 =null;

		RewriteRuleSubtreeStream stream_genericDefinition=new RewriteRuleSubtreeStream(adaptor,"rule genericDefinition");
		RewriteRuleSubtreeStream stream_qualifiedIdent=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdent");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:259:30: ( qualifiedIdent ( genericDefinition )? -> qualifiedIdent )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:259:32: qualifiedIdent ( genericDefinition )?
			{
			pushFollow(FOLLOW_qualifiedIdent_in_genericTypeIdent5373);
			qualifiedIdent249=qualifiedIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_qualifiedIdent.add(qualifiedIdent249.getTree());
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:259:47: ( genericDefinition )?
			int alt76=2;
			int LA76_0 = input.LA(1);
			if ( (LA76_0==LT) ) {
				alt76=1;
			}
			switch (alt76) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:259:48: genericDefinition
					{
					pushFollow(FOLLOW_genericDefinition_in_genericTypeIdent5376);
					genericDefinition250=genericDefinition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_genericDefinition.add(genericDefinition250.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: qualifiedIdent
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 259:68: -> qualifiedIdent
			{
				adaptor.addChild(root_0, stream_qualifiedIdent.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 61, genericTypeIdent_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "genericTypeIdent"


	public static class genericDefinition_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "genericDefinition"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:261:1: genericDefinition : '<' innerGeneric ( ';' innerGeneric )* '>' ;
	public final DelphiParser.genericDefinition_return genericDefinition() throws RecognitionException {
		DelphiParser.genericDefinition_return retval = new DelphiParser.genericDefinition_return();
		retval.start = input.LT(1);
		int genericDefinition_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal251=null;
		Token char_literal253=null;
		Token char_literal255=null;
		ParserRuleReturnScope innerGeneric252 =null;
		ParserRuleReturnScope innerGeneric254 =null;

		Object char_literal251_tree=null;
		Object char_literal253_tree=null;
		Object char_literal255_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:261:29: ( '<' innerGeneric ( ';' innerGeneric )* '>' )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:261:31: '<' innerGeneric ( ';' innerGeneric )* '>'
			{
			root_0 = (Object)adaptor.nil();


			char_literal251=(Token)match(input,LT,FOLLOW_LT_in_genericDefinition5433); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal251_tree = (Object)adaptor.create(char_literal251);
			adaptor.addChild(root_0, char_literal251_tree);
			}

			pushFollow(FOLLOW_innerGeneric_in_genericDefinition5435);
			innerGeneric252=innerGeneric();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, innerGeneric252.getTree());

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:261:48: ( ';' innerGeneric )*
			loop77:
			while (true) {
				int alt77=2;
				int LA77_0 = input.LA(1);
				if ( (LA77_0==SEMI) ) {
					alt77=1;
				}

				switch (alt77) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:261:49: ';' innerGeneric
					{
					char_literal253=(Token)match(input,SEMI,FOLLOW_SEMI_in_genericDefinition5438); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal253_tree = (Object)adaptor.create(char_literal253);
					adaptor.addChild(root_0, char_literal253_tree);
					}

					pushFollow(FOLLOW_innerGeneric_in_genericDefinition5440);
					innerGeneric254=innerGeneric();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, innerGeneric254.getTree());

					}
					break;

				default :
					break loop77;
				}
			}

			char_literal255=(Token)match(input,GT,FOLLOW_GT_in_genericDefinition5444); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal255_tree = (Object)adaptor.create(char_literal255);
			adaptor.addChild(root_0, char_literal255_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 62, genericDefinition_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "genericDefinition"


	public static class innerGeneric_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "innerGeneric"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:263:1: innerGeneric : genericTypeIdent ( ',' genericTypeIdent )* ( ':' genericConstraint ( ',' genericConstraint )* )? ;
	public final DelphiParser.innerGeneric_return innerGeneric() throws RecognitionException {
		DelphiParser.innerGeneric_return retval = new DelphiParser.innerGeneric_return();
		retval.start = input.LT(1);
		int innerGeneric_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal257=null;
		Token char_literal259=null;
		Token char_literal261=null;
		ParserRuleReturnScope genericTypeIdent256 =null;
		ParserRuleReturnScope genericTypeIdent258 =null;
		ParserRuleReturnScope genericConstraint260 =null;
		ParserRuleReturnScope genericConstraint262 =null;

		Object char_literal257_tree=null;
		Object char_literal259_tree=null;
		Object char_literal261_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:263:30: ( genericTypeIdent ( ',' genericTypeIdent )* ( ':' genericConstraint ( ',' genericConstraint )* )? )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:263:32: genericTypeIdent ( ',' genericTypeIdent )* ( ':' genericConstraint ( ',' genericConstraint )* )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_genericTypeIdent_in_innerGeneric5497);
			genericTypeIdent256=genericTypeIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeIdent256.getTree());

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:263:49: ( ',' genericTypeIdent )*
			loop78:
			while (true) {
				int alt78=2;
				int LA78_0 = input.LA(1);
				if ( (LA78_0==COMMA) ) {
					alt78=1;
				}

				switch (alt78) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:263:50: ',' genericTypeIdent
					{
					char_literal257=(Token)match(input,COMMA,FOLLOW_COMMA_in_innerGeneric5500); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal257_tree = (Object)adaptor.create(char_literal257);
					adaptor.addChild(root_0, char_literal257_tree);
					}

					pushFollow(FOLLOW_genericTypeIdent_in_innerGeneric5502);
					genericTypeIdent258=genericTypeIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeIdent258.getTree());

					}
					break;

				default :
					break loop78;
				}
			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:263:73: ( ':' genericConstraint ( ',' genericConstraint )* )?
			int alt80=2;
			int LA80_0 = input.LA(1);
			if ( (LA80_0==COLON) ) {
				alt80=1;
			}
			switch (alt80) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:263:74: ':' genericConstraint ( ',' genericConstraint )*
					{
					char_literal259=(Token)match(input,COLON,FOLLOW_COLON_in_innerGeneric5507); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal259_tree = (Object)adaptor.create(char_literal259);
					adaptor.addChild(root_0, char_literal259_tree);
					}

					pushFollow(FOLLOW_genericConstraint_in_innerGeneric5509);
					genericConstraint260=genericConstraint();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, genericConstraint260.getTree());

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:263:96: ( ',' genericConstraint )*
					loop79:
					while (true) {
						int alt79=2;
						int LA79_0 = input.LA(1);
						if ( (LA79_0==COMMA) ) {
							alt79=1;
						}

						switch (alt79) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:263:97: ',' genericConstraint
							{
							char_literal261=(Token)match(input,COMMA,FOLLOW_COMMA_in_innerGeneric5512); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal261_tree = (Object)adaptor.create(char_literal261);
							adaptor.addChild(root_0, char_literal261_tree);
							}

							pushFollow(FOLLOW_genericConstraint_in_innerGeneric5514);
							genericConstraint262=genericConstraint();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, genericConstraint262.getTree());

							}
							break;

						default :
							break loop79;
						}
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 63, innerGeneric_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "innerGeneric"


	public static class genericConstraint_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "genericConstraint"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:265:1: genericConstraint : ( genericTypeIdent | 'record' | 'class' | 'constructor' );
	public final DelphiParser.genericConstraint_return genericConstraint() throws RecognitionException {
		DelphiParser.genericConstraint_return retval = new DelphiParser.genericConstraint_return();
		retval.start = input.LT(1);
		int genericConstraint_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal264=null;
		Token string_literal265=null;
		Token string_literal266=null;
		ParserRuleReturnScope genericTypeIdent263 =null;

		Object string_literal264_tree=null;
		Object string_literal265_tree=null;
		Object string_literal266_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:265:30: ( genericTypeIdent | 'record' | 'class' | 'constructor' )
			int alt81=4;
			switch ( input.LA(1) ) {
			case ABSOLUTE:
			case ADD:
			case ANSISTRING:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case DISPID:
			case DQ:
			case DW:
			case EXIT:
			case EXPORT:
			case FALSE:
			case FINAL:
			case HELPER:
			case IMPLEMENTS:
			case IN:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case POINTER:
			case PRIVATE:
			case PUBLIC:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STATIC:
			case STORED:
			case STRICT:
			case STRING:
			case TRUE:
			case TkIdentifier:
			case UNSAFE:
			case VARARGS:
			case VARIANT:
			case VIRTUAL:
			case WRITE:
			case WRITEONLY:
			case 198:
				{
				alt81=1;
				}
				break;
			case RECORD:
				{
				alt81=2;
				}
				break;
			case CLASS:
				{
				alt81=3;
				}
				break;
			case CONSTRUCTOR:
				{
				alt81=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 81, 0, input);
				throw nvae;
			}
			switch (alt81) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:265:32: genericTypeIdent
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_genericTypeIdent_in_genericConstraint5566);
					genericTypeIdent263=genericTypeIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeIdent263.getTree());

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:266:32: 'record'
					{
					root_0 = (Object)adaptor.nil();


					string_literal264=(Token)match(input,RECORD,FOLLOW_RECORD_in_genericConstraint5599); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal264_tree = (Object)adaptor.create(string_literal264);
					adaptor.addChild(root_0, string_literal264_tree);
					}

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:267:32: 'class'
					{
					root_0 = (Object)adaptor.nil();


					string_literal265=(Token)match(input,CLASS,FOLLOW_CLASS_in_genericConstraint5632); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal265_tree = (Object)adaptor.create(string_literal265);
					adaptor.addChild(root_0, string_literal265_tree);
					}

					}
					break;
				case 4 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:268:32: 'constructor'
					{
					root_0 = (Object)adaptor.nil();


					string_literal266=(Token)match(input,CONSTRUCTOR,FOLLOW_CONSTRUCTOR_in_genericConstraint5665); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal266_tree = (Object)adaptor.create(string_literal266);
					adaptor.addChild(root_0, string_literal266_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 64, genericConstraint_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "genericConstraint"


	public static class genericPostfix_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "genericPostfix"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:270:1: genericPostfix : '<' typeDecl ( ',' typeDecl )* '>' ;
	public final DelphiParser.genericPostfix_return genericPostfix() throws RecognitionException {
		DelphiParser.genericPostfix_return retval = new DelphiParser.genericPostfix_return();
		retval.start = input.LT(1);
		int genericPostfix_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal267=null;
		Token char_literal269=null;
		Token char_literal271=null;
		ParserRuleReturnScope typeDecl268 =null;
		ParserRuleReturnScope typeDecl270 =null;

		Object char_literal267_tree=null;
		Object char_literal269_tree=null;
		Object char_literal271_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:270:30: ( '<' typeDecl ( ',' typeDecl )* '>' )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:270:32: '<' typeDecl ( ',' typeDecl )* '>'
			{
			root_0 = (Object)adaptor.nil();


			char_literal267=(Token)match(input,LT,FOLLOW_LT_in_genericPostfix5716); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal267_tree = (Object)adaptor.create(char_literal267);
			adaptor.addChild(root_0, char_literal267_tree);
			}

			pushFollow(FOLLOW_typeDecl_in_genericPostfix5718);
			typeDecl268=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl268.getTree());

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:270:45: ( ',' typeDecl )*
			loop82:
			while (true) {
				int alt82=2;
				int LA82_0 = input.LA(1);
				if ( (LA82_0==COMMA) ) {
					alt82=1;
				}

				switch (alt82) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:270:46: ',' typeDecl
					{
					char_literal269=(Token)match(input,COMMA,FOLLOW_COMMA_in_genericPostfix5721); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal269_tree = (Object)adaptor.create(char_literal269);
					adaptor.addChild(root_0, char_literal269_tree);
					}

					pushFollow(FOLLOW_typeDecl_in_genericPostfix5723);
					typeDecl270=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl270.getTree());

					}
					break;

				default :
					break loop82;
				}
			}

			char_literal271=(Token)match(input,GT,FOLLOW_GT_in_genericPostfix5727); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal271_tree = (Object)adaptor.create(char_literal271);
			adaptor.addChild(root_0, char_literal271_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 65, genericPostfix_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "genericPostfix"


	public static class paranthesePostfix_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "paranthesePostfix"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:272:1: paranthesePostfix : '(' intRealNum ')' ;
	public final DelphiParser.paranthesePostfix_return paranthesePostfix() throws RecognitionException {
		DelphiParser.paranthesePostfix_return retval = new DelphiParser.paranthesePostfix_return();
		retval.start = input.LT(1);
		int paranthesePostfix_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal272=null;
		Token char_literal274=null;
		ParserRuleReturnScope intRealNum273 =null;

		Object char_literal272_tree=null;
		Object char_literal274_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:272:30: ( '(' intRealNum ')' )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:272:32: '(' intRealNum ')'
			{
			root_0 = (Object)adaptor.nil();


			char_literal272=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_paranthesePostfix5775); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal272_tree = (Object)adaptor.create(char_literal272);
			adaptor.addChild(root_0, char_literal272_tree);
			}

			pushFollow(FOLLOW_intRealNum_in_paranthesePostfix5777);
			intRealNum273=intRealNum();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, intRealNum273.getTree());

			char_literal274=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_paranthesePostfix5779); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal274_tree = (Object)adaptor.create(char_literal274);
			adaptor.addChild(root_0, char_literal274_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 66, paranthesePostfix_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "paranthesePostfix"


	public static class classDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classDecl"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:277:1: classDecl : ( classTypeTypeDecl | classHelperDecl -> ^( TkClass classHelperDecl ) | classTypeDecl -> ^( TkClass classTypeDecl ) | interfaceTypeDecl -> ^( TkInterface interfaceTypeDecl ) | objectDecl -> ^( TkObject objectDecl ) | recordDecl -> ^( TkRecord recordDecl ) | recordHelperDecl -> ^( TkRecordHelper recordHelperDecl ) );
	public final DelphiParser.classDecl_return classDecl() throws RecognitionException {
		DelphiParser.classDecl_return retval = new DelphiParser.classDecl_return();
		retval.start = input.LT(1);
		int classDecl_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope classTypeTypeDecl275 =null;
		ParserRuleReturnScope classHelperDecl276 =null;
		ParserRuleReturnScope classTypeDecl277 =null;
		ParserRuleReturnScope interfaceTypeDecl278 =null;
		ParserRuleReturnScope objectDecl279 =null;
		ParserRuleReturnScope recordDecl280 =null;
		ParserRuleReturnScope recordHelperDecl281 =null;

		RewriteRuleSubtreeStream stream_interfaceTypeDecl=new RewriteRuleSubtreeStream(adaptor,"rule interfaceTypeDecl");
		RewriteRuleSubtreeStream stream_recordHelperDecl=new RewriteRuleSubtreeStream(adaptor,"rule recordHelperDecl");
		RewriteRuleSubtreeStream stream_objectDecl=new RewriteRuleSubtreeStream(adaptor,"rule objectDecl");
		RewriteRuleSubtreeStream stream_classHelperDecl=new RewriteRuleSubtreeStream(adaptor,"rule classHelperDecl");
		RewriteRuleSubtreeStream stream_recordDecl=new RewriteRuleSubtreeStream(adaptor,"rule recordDecl");
		RewriteRuleSubtreeStream stream_classTypeDecl=new RewriteRuleSubtreeStream(adaptor,"rule classTypeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:277:30: ( classTypeTypeDecl | classHelperDecl -> ^( TkClass classHelperDecl ) | classTypeDecl -> ^( TkClass classTypeDecl ) | interfaceTypeDecl -> ^( TkInterface interfaceTypeDecl ) | objectDecl -> ^( TkObject objectDecl ) | recordDecl -> ^( TkRecord recordDecl ) | recordHelperDecl -> ^( TkRecordHelper recordHelperDecl ) )
			int alt83=7;
			switch ( input.LA(1) ) {
			case CLASS:
				{
				int LA83_1 = input.LA(2);
				if ( (synpred110_Delphi()) ) {
					alt83=1;
				}
				else if ( (synpred111_Delphi()) ) {
					alt83=2;
				}
				else if ( (synpred112_Delphi()) ) {
					alt83=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 83, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case DISPINTERFACE:
			case INTERFACE:
				{
				alt83=4;
				}
				break;
			case OBJECT:
				{
				alt83=5;
				}
				break;
			case RECORD:
				{
				int LA83_4 = input.LA(2);
				if ( (synpred115_Delphi()) ) {
					alt83=6;
				}
				else if ( (true) ) {
					alt83=7;
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 83, 0, input);
				throw nvae;
			}
			switch (alt83) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:277:32: classTypeTypeDecl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classTypeTypeDecl_in_classDecl5839);
					classTypeTypeDecl275=classTypeTypeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classTypeTypeDecl275.getTree());

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:278:32: classHelperDecl
					{
					pushFollow(FOLLOW_classHelperDecl_in_classDecl5872);
					classHelperDecl276=classHelperDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classHelperDecl.add(classHelperDecl276.getTree());
					// AST REWRITE
					// elements: classHelperDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 278:48: -> ^( TkClass classHelperDecl )
					{
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:278:51: ^( TkClass classHelperDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClass, "TkClass"), root_1);
						adaptor.addChild(root_1, stream_classHelperDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:279:32: classTypeDecl
					{
					pushFollow(FOLLOW_classTypeDecl_in_classDecl5913);
					classTypeDecl277=classTypeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classTypeDecl.add(classTypeDecl277.getTree());
					// AST REWRITE
					// elements: classTypeDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 279:46: -> ^( TkClass classTypeDecl )
					{
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:279:49: ^( TkClass classTypeDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClass, "TkClass"), root_1);
						adaptor.addChild(root_1, stream_classTypeDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:280:32: interfaceTypeDecl
					{
					pushFollow(FOLLOW_interfaceTypeDecl_in_classDecl5954);
					interfaceTypeDecl278=interfaceTypeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_interfaceTypeDecl.add(interfaceTypeDecl278.getTree());
					// AST REWRITE
					// elements: interfaceTypeDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 280:50: -> ^( TkInterface interfaceTypeDecl )
					{
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:280:53: ^( TkInterface interfaceTypeDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkInterface, "TkInterface"), root_1);
						adaptor.addChild(root_1, stream_interfaceTypeDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 5 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:281:32: objectDecl
					{
					pushFollow(FOLLOW_objectDecl_in_classDecl5995);
					objectDecl279=objectDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_objectDecl.add(objectDecl279.getTree());
					// AST REWRITE
					// elements: objectDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 281:43: -> ^( TkObject objectDecl )
					{
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:281:46: ^( TkObject objectDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkObject, "TkObject"), root_1);
						adaptor.addChild(root_1, stream_objectDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 6 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:32: recordDecl
					{
					pushFollow(FOLLOW_recordDecl_in_classDecl6036);
					recordDecl280=recordDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_recordDecl.add(recordDecl280.getTree());
					// AST REWRITE
					// elements: recordDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 282:43: -> ^( TkRecord recordDecl )
					{
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:46: ^( TkRecord recordDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkRecord, "TkRecord"), root_1);
						adaptor.addChild(root_1, stream_recordDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 7 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:283:32: recordHelperDecl
					{
					pushFollow(FOLLOW_recordHelperDecl_in_classDecl6077);
					recordHelperDecl281=recordHelperDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_recordHelperDecl.add(recordHelperDecl281.getTree());
					// AST REWRITE
					// elements: recordHelperDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 283:49: -> ^( TkRecordHelper recordHelperDecl )
					{
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:283:52: ^( TkRecordHelper recordHelperDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkRecordHelper, "TkRecordHelper"), root_1);
						adaptor.addChild(root_1, stream_recordHelperDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 67, classDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classDecl"


	public static class classTypeTypeDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classTypeTypeDecl"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:285:1: classTypeTypeDecl : 'class' 'of' typeId -> ^( TkClassOfType typeId ) ;
	public final DelphiParser.classTypeTypeDecl_return classTypeTypeDecl() throws RecognitionException {
		DelphiParser.classTypeTypeDecl_return retval = new DelphiParser.classTypeTypeDecl_return();
		retval.start = input.LT(1);
		int classTypeTypeDecl_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal282=null;
		Token string_literal283=null;
		ParserRuleReturnScope typeId284 =null;

		Object string_literal282_tree=null;
		Object string_literal283_tree=null;
		RewriteRuleTokenStream stream_OF=new RewriteRuleTokenStream(adaptor,"token OF");
		RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
		RewriteRuleSubtreeStream stream_typeId=new RewriteRuleSubtreeStream(adaptor,"rule typeId");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:285:30: ( 'class' 'of' typeId -> ^( TkClassOfType typeId ) )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:285:32: 'class' 'of' typeId
			{
			string_literal282=(Token)match(input,CLASS,FOLLOW_CLASS_in_classTypeTypeDecl6133); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_CLASS.add(string_literal282);

			string_literal283=(Token)match(input,OF,FOLLOW_OF_in_classTypeTypeDecl6135); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_OF.add(string_literal283);

			pushFollow(FOLLOW_typeId_in_classTypeTypeDecl6137);
			typeId284=typeId();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeId.add(typeId284.getTree());
			// AST REWRITE
			// elements: typeId
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 285:52: -> ^( TkClassOfType typeId )
			{
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:285:55: ^( TkClassOfType typeId )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClassOfType, "TkClassOfType"), root_1);
				adaptor.addChild(root_1, stream_typeId.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 68, classTypeTypeDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classTypeTypeDecl"


	public static class classTypeDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classTypeDecl"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:287:1: classTypeDecl : ( 'class' ( classState )? ( classParent )? ( classItem )* 'end' -> 'class' ^( TkClassParents ( classParent )? ) ( classItem )* | 'class' ( classState )? ( classParent )? -> 'class' ^( TkClassParents ( classParent )? ) );
	public final DelphiParser.classTypeDecl_return classTypeDecl() throws RecognitionException {
		DelphiParser.classTypeDecl_return retval = new DelphiParser.classTypeDecl_return();
		retval.start = input.LT(1);
		int classTypeDecl_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal285=null;
		Token string_literal289=null;
		Token string_literal290=null;
		ParserRuleReturnScope classState286 =null;
		ParserRuleReturnScope classParent287 =null;
		ParserRuleReturnScope classItem288 =null;
		ParserRuleReturnScope classState291 =null;
		ParserRuleReturnScope classParent292 =null;

		Object string_literal285_tree=null;
		Object string_literal289_tree=null;
		Object string_literal290_tree=null;
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
		RewriteRuleSubtreeStream stream_classState=new RewriteRuleSubtreeStream(adaptor,"rule classState");
		RewriteRuleSubtreeStream stream_classParent=new RewriteRuleSubtreeStream(adaptor,"rule classParent");
		RewriteRuleSubtreeStream stream_classItem=new RewriteRuleSubtreeStream(adaptor,"rule classItem");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:287:30: ( 'class' ( classState )? ( classParent )? ( classItem )* 'end' -> 'class' ^( TkClassParents ( classParent )? ) ( classItem )* | 'class' ( classState )? ( classParent )? -> 'class' ^( TkClassParents ( classParent )? ) )
			int alt89=2;
			int LA89_0 = input.LA(1);
			if ( (LA89_0==CLASS) ) {
				int LA89_1 = input.LA(2);
				if ( (synpred119_Delphi()) ) {
					alt89=1;
				}
				else if ( (true) ) {
					alt89=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 89, 0, input);
				throw nvae;
			}

			switch (alt89) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:287:32: 'class' ( classState )? ( classParent )? ( classItem )* 'end'
					{
					string_literal285=(Token)match(input,CLASS,FOLLOW_CLASS_in_classTypeDecl6197); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_CLASS.add(string_literal285);

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:287:40: ( classState )?
					int alt84=2;
					int LA84_0 = input.LA(1);
					if ( (LA84_0==ABSTRACT||LA84_0==SEALED) ) {
						alt84=1;
					}
					switch (alt84) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:287:41: classState
							{
							pushFollow(FOLLOW_classState_in_classTypeDecl6200);
							classState286=classState();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_classState.add(classState286.getTree());
							}
							break;

					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:287:54: ( classParent )?
					int alt85=2;
					int LA85_0 = input.LA(1);
					if ( (LA85_0==LPAREN) ) {
						alt85=1;
					}
					switch (alt85) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:287:55: classParent
							{
							pushFollow(FOLLOW_classParent_in_classTypeDecl6205);
							classParent287=classParent();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_classParent.add(classParent287.getTree());
							}
							break;

					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:287:69: ( classItem )*
					loop86:
					while (true) {
						int alt86=2;
						int LA86_0 = input.LA(1);
						if ( (LA86_0==ABSOLUTE||LA86_0==ADD||LA86_0==ANSISTRING||LA86_0==AT||LA86_0==AUTOMATED||LA86_0==BREAK||LA86_0==CLASS||(LA86_0 >= CONST && LA86_0 <= CONTINUE)||LA86_0==DEFAULT||(LA86_0 >= DESTRUCTOR && LA86_0 <= DISPID)||(LA86_0 >= DQ && LA86_0 <= DW)||LA86_0==EXIT||LA86_0==EXPORT||LA86_0==FALSE||LA86_0==FINAL||LA86_0==FUNCTION||LA86_0==HELPER||(LA86_0 >= IMPLEMENTS && LA86_0 <= INDEX)||LA86_0==LBRACK||LA86_0==LOCAL||LA86_0==MESSAGE||LA86_0==NAME||LA86_0==OBJECT||LA86_0==OPERATOR||LA86_0==OUT||LA86_0==POINTER||(LA86_0 >= PRIVATE && LA86_0 <= PROCEDURE)||(LA86_0 >= PROPERTY && LA86_0 <= PUBLISHED)||(LA86_0 >= READ && LA86_0 <= READONLY)||(LA86_0 >= REFERENCE && LA86_0 <= REGISTER)||LA86_0==REMOVE||LA86_0==RESOURCESTRING||LA86_0==STATIC||(LA86_0 >= STORED && LA86_0 <= STRING)||LA86_0==THREADVAR||LA86_0==TRUE||LA86_0==TYPE||LA86_0==TkIdentifier||LA86_0==UNSAFE||(LA86_0 >= VAR && LA86_0 <= VIRTUAL)||(LA86_0 >= WRITE && LA86_0 <= WRITEONLY)||LA86_0==198) ) {
							alt86=1;
						}

						switch (alt86) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:287:70: classItem
							{
							pushFollow(FOLLOW_classItem_in_classTypeDecl6210);
							classItem288=classItem();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_classItem.add(classItem288.getTree());
							}
							break;

						default :
							break loop86;
						}
					}

					string_literal289=(Token)match(input,END,FOLLOW_END_in_classTypeDecl6214); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_END.add(string_literal289);

					// AST REWRITE
					// elements: CLASS, classParent, classItem
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 287:88: -> 'class' ^( TkClassParents ( classParent )? ) ( classItem )*
					{
						adaptor.addChild(root_0, stream_CLASS.nextNode());
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:287:99: ^( TkClassParents ( classParent )? )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClassParents, "TkClassParents"), root_1);
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:287:116: ( classParent )?
						if ( stream_classParent.hasNext() ) {
							adaptor.addChild(root_1, stream_classParent.nextTree());
						}
						stream_classParent.reset();

						adaptor.addChild(root_0, root_1);
						}

						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:287:132: ( classItem )*
						while ( stream_classItem.hasNext() ) {
							adaptor.addChild(root_0, stream_classItem.nextTree());
						}
						stream_classItem.reset();

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:288:32: 'class' ( classState )? ( classParent )?
					{
					string_literal290=(Token)match(input,CLASS,FOLLOW_CLASS_in_classTypeDecl6265); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_CLASS.add(string_literal290);

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:288:40: ( classState )?
					int alt87=2;
					int LA87_0 = input.LA(1);
					if ( (LA87_0==ABSTRACT||LA87_0==SEALED) ) {
						alt87=1;
					}
					switch (alt87) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:288:41: classState
							{
							pushFollow(FOLLOW_classState_in_classTypeDecl6268);
							classState291=classState();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_classState.add(classState291.getTree());
							}
							break;

					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:288:54: ( classParent )?
					int alt88=2;
					alt88 = dfa88.predict(input);
					switch (alt88) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:288:55: classParent
							{
							pushFollow(FOLLOW_classParent_in_classTypeDecl6273);
							classParent292=classParent();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_classParent.add(classParent292.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: classParent, CLASS
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 288:69: -> 'class' ^( TkClassParents ( classParent )? )
					{
						adaptor.addChild(root_0, stream_CLASS.nextNode());
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:288:80: ^( TkClassParents ( classParent )? )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClassParents, "TkClassParents"), root_1);
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:288:97: ( classParent )?
						if ( stream_classParent.hasNext() ) {
							adaptor.addChild(root_1, stream_classParent.nextTree());
						}
						stream_classParent.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 69, classTypeDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classTypeDecl"


	public static class classState_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classState"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:290:1: classState : ( 'sealed' | 'abstract' );
	public final DelphiParser.classState_return classState() throws RecognitionException {
		DelphiParser.classState_return retval = new DelphiParser.classState_return();
		retval.start = input.LT(1);
		int classState_StartIndex = input.index();

		Object root_0 = null;

		Token set293=null;

		Object set293_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:290:30: ( 'sealed' | 'abstract' )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set293=input.LT(1);
			if ( input.LA(1)==ABSTRACT||input.LA(1)==SEALED ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set293));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 70, classState_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classState"


	public static class classParent_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classParent"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:293:1: classParent : '(' genericTypeIdent ( ',' genericTypeIdent )* ')' -> genericTypeIdent ( genericTypeIdent )* ;
	public final DelphiParser.classParent_return classParent() throws RecognitionException {
		DelphiParser.classParent_return retval = new DelphiParser.classParent_return();
		retval.start = input.LT(1);
		int classParent_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal294=null;
		Token char_literal296=null;
		Token char_literal298=null;
		ParserRuleReturnScope genericTypeIdent295 =null;
		ParserRuleReturnScope genericTypeIdent297 =null;

		Object char_literal294_tree=null;
		Object char_literal296_tree=null;
		Object char_literal298_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_genericTypeIdent=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeIdent");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:293:30: ( '(' genericTypeIdent ( ',' genericTypeIdent )* ')' -> genericTypeIdent ( genericTypeIdent )* )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:293:32: '(' genericTypeIdent ( ',' genericTypeIdent )* ')'
			{
			char_literal294=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_classParent6431); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(char_literal294);

			pushFollow(FOLLOW_genericTypeIdent_in_classParent6433);
			genericTypeIdent295=genericTypeIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_genericTypeIdent.add(genericTypeIdent295.getTree());
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:293:53: ( ',' genericTypeIdent )*
			loop90:
			while (true) {
				int alt90=2;
				int LA90_0 = input.LA(1);
				if ( (LA90_0==COMMA) ) {
					alt90=1;
				}

				switch (alt90) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:293:54: ',' genericTypeIdent
					{
					char_literal296=(Token)match(input,COMMA,FOLLOW_COMMA_in_classParent6436); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(char_literal296);

					pushFollow(FOLLOW_genericTypeIdent_in_classParent6438);
					genericTypeIdent297=genericTypeIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_genericTypeIdent.add(genericTypeIdent297.getTree());
					}
					break;

				default :
					break loop90;
				}
			}

			char_literal298=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_classParent6442); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(char_literal298);

			// AST REWRITE
			// elements: genericTypeIdent, genericTypeIdent
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 293:81: -> genericTypeIdent ( genericTypeIdent )*
			{
				adaptor.addChild(root_0, stream_genericTypeIdent.nextTree());
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:293:101: ( genericTypeIdent )*
				while ( stream_genericTypeIdent.hasNext() ) {
					adaptor.addChild(root_0, stream_genericTypeIdent.nextTree());
				}
				stream_genericTypeIdent.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 71, classParent_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classParent"


	public static class classItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classItem"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:295:1: classItem : ( visibility | classMethod | classField | classProperty | constSection | typeSection | ( 'class' )? varSection );
	public final DelphiParser.classItem_return classItem() throws RecognitionException {
		DelphiParser.classItem_return retval = new DelphiParser.classItem_return();
		retval.start = input.LT(1);
		int classItem_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal305=null;
		ParserRuleReturnScope visibility299 =null;
		ParserRuleReturnScope classMethod300 =null;
		ParserRuleReturnScope classField301 =null;
		ParserRuleReturnScope classProperty302 =null;
		ParserRuleReturnScope constSection303 =null;
		ParserRuleReturnScope typeSection304 =null;
		ParserRuleReturnScope varSection306 =null;

		Object string_literal305_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:295:30: ( visibility | classMethod | classField | classProperty | constSection | typeSection | ( 'class' )? varSection )
			int alt92=7;
			switch ( input.LA(1) ) {
			case STRICT:
				{
				int LA92_1 = input.LA(2);
				if ( (synpred124_Delphi()) ) {
					alt92=1;
				}
				else if ( (synpred126_Delphi()) ) {
					alt92=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 92, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AUTOMATED:
			case PROTECTED:
			case PUBLISHED:
				{
				alt92=1;
				}
				break;
			case PRIVATE:
				{
				int LA92_3 = input.LA(2);
				if ( (synpred124_Delphi()) ) {
					alt92=1;
				}
				else if ( (synpred126_Delphi()) ) {
					alt92=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 92, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PUBLIC:
				{
				int LA92_4 = input.LA(2);
				if ( (synpred124_Delphi()) ) {
					alt92=1;
				}
				else if ( (synpred126_Delphi()) ) {
					alt92=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 92, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LBRACK:
				{
				int LA92_7 = input.LA(2);
				if ( (synpred125_Delphi()) ) {
					alt92=2;
				}
				else if ( (synpred126_Delphi()) ) {
					alt92=3;
				}
				else if ( (synpred127_Delphi()) ) {
					alt92=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 92, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CLASS:
				{
				int LA92_8 = input.LA(2);
				if ( (synpred125_Delphi()) ) {
					alt92=2;
				}
				else if ( (synpred127_Delphi()) ) {
					alt92=4;
				}
				else if ( (true) ) {
					alt92=7;
				}

				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case FUNCTION:
			case PROCEDURE:
				{
				alt92=2;
				}
				break;
			case OPERATOR:
				{
				int LA92_11 = input.LA(2);
				if ( (synpred125_Delphi()) ) {
					alt92=2;
				}
				else if ( (synpred126_Delphi()) ) {
					alt92=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 92, 11, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ABSOLUTE:
			case ADD:
			case ANSISTRING:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case DISPID:
			case DQ:
			case DW:
			case EXIT:
			case EXPORT:
			case FALSE:
			case FINAL:
			case HELPER:
			case IMPLEMENTS:
			case IN:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OUT:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STATIC:
			case STORED:
			case STRING:
			case TRUE:
			case TkIdentifier:
			case UNSAFE:
			case VARARGS:
			case VARIANT:
			case VIRTUAL:
			case WRITE:
			case WRITEONLY:
			case 198:
				{
				alt92=3;
				}
				break;
			case PROPERTY:
				{
				alt92=4;
				}
				break;
			case CONST:
			case RESOURCESTRING:
				{
				alt92=5;
				}
				break;
			case TYPE:
				{
				alt92=6;
				}
				break;
			case THREADVAR:
			case VAR:
				{
				alt92=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 92, 0, input);
				throw nvae;
			}
			switch (alt92) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:295:32: visibility
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_visibility_in_classItem6510);
					visibility299=visibility();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, visibility299.getTree());

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:296:32: classMethod
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classMethod_in_classItem6543);
					classMethod300=classMethod();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classMethod300.getTree());

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:297:32: classField
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classField_in_classItem6576);
					classField301=classField();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classField301.getTree());

					}
					break;
				case 4 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:298:32: classProperty
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classProperty_in_classItem6609);
					classProperty302=classProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classProperty302.getTree());

					}
					break;
				case 5 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:299:32: constSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_constSection_in_classItem6642);
					constSection303=constSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constSection303.getTree());

					}
					break;
				case 6 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:300:32: typeSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_typeSection_in_classItem6675);
					typeSection304=typeSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeSection304.getTree());

					}
					break;
				case 7 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:301:32: ( 'class' )? varSection
					{
					root_0 = (Object)adaptor.nil();


					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:301:32: ( 'class' )?
					int alt91=2;
					int LA91_0 = input.LA(1);
					if ( (LA91_0==CLASS) ) {
						alt91=1;
					}
					switch (alt91) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:301:33: 'class'
							{
							string_literal305=(Token)match(input,CLASS,FOLLOW_CLASS_in_classItem6709); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal305_tree = (Object)adaptor.create(string_literal305);
							adaptor.addChild(root_0, string_literal305_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_varSection_in_classItem6713);
					varSection306=varSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, varSection306.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 72, classItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classItem"


	public static class classHelperDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classHelperDecl"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:303:1: classHelperDecl : 'class' 'helper' ( classParent )? 'for' typeId ( classHelperItem )* 'end' -> ^( 'class' typeId ) ( classHelperItem )* ;
	public final DelphiParser.classHelperDecl_return classHelperDecl() throws RecognitionException {
		DelphiParser.classHelperDecl_return retval = new DelphiParser.classHelperDecl_return();
		retval.start = input.LT(1);
		int classHelperDecl_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal307=null;
		Token string_literal308=null;
		Token string_literal310=null;
		Token string_literal313=null;
		ParserRuleReturnScope classParent309 =null;
		ParserRuleReturnScope typeId311 =null;
		ParserRuleReturnScope classHelperItem312 =null;

		Object string_literal307_tree=null;
		Object string_literal308_tree=null;
		Object string_literal310_tree=null;
		Object string_literal313_tree=null;
		RewriteRuleTokenStream stream_HELPER=new RewriteRuleTokenStream(adaptor,"token HELPER");
		RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
		RewriteRuleSubtreeStream stream_classHelperItem=new RewriteRuleSubtreeStream(adaptor,"rule classHelperItem");
		RewriteRuleSubtreeStream stream_typeId=new RewriteRuleSubtreeStream(adaptor,"rule typeId");
		RewriteRuleSubtreeStream stream_classParent=new RewriteRuleSubtreeStream(adaptor,"rule classParent");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:303:30: ( 'class' 'helper' ( classParent )? 'for' typeId ( classHelperItem )* 'end' -> ^( 'class' typeId ) ( classHelperItem )* )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:303:32: 'class' 'helper' ( classParent )? 'for' typeId ( classHelperItem )* 'end'
			{
			string_literal307=(Token)match(input,CLASS,FOLLOW_CLASS_in_classHelperDecl6763); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_CLASS.add(string_literal307);

			string_literal308=(Token)match(input,HELPER,FOLLOW_HELPER_in_classHelperDecl6765); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_HELPER.add(string_literal308);

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:303:49: ( classParent )?
			int alt93=2;
			int LA93_0 = input.LA(1);
			if ( (LA93_0==LPAREN) ) {
				alt93=1;
			}
			switch (alt93) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:303:50: classParent
					{
					pushFollow(FOLLOW_classParent_in_classHelperDecl6768);
					classParent309=classParent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classParent.add(classParent309.getTree());
					}
					break;

			}

			string_literal310=(Token)match(input,FOR,FOLLOW_FOR_in_classHelperDecl6772); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_FOR.add(string_literal310);

			pushFollow(FOLLOW_typeId_in_classHelperDecl6774);
			typeId311=typeId();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeId.add(typeId311.getTree());
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:303:77: ( classHelperItem )*
			loop94:
			while (true) {
				int alt94=2;
				int LA94_0 = input.LA(1);
				if ( (LA94_0==AUTOMATED||LA94_0==CLASS||(LA94_0 >= CONST && LA94_0 <= CONSTRUCTOR)||LA94_0==DESTRUCTOR||LA94_0==FUNCTION||LA94_0==LBRACK||LA94_0==OPERATOR||(LA94_0 >= PRIVATE && LA94_0 <= PROCEDURE)||(LA94_0 >= PROPERTY && LA94_0 <= PUBLISHED)||LA94_0==RESOURCESTRING||LA94_0==STRICT||LA94_0==THREADVAR||LA94_0==TYPE||LA94_0==VAR) ) {
					alt94=1;
				}

				switch (alt94) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:303:78: classHelperItem
					{
					pushFollow(FOLLOW_classHelperItem_in_classHelperDecl6777);
					classHelperItem312=classHelperItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classHelperItem.add(classHelperItem312.getTree());
					}
					break;

				default :
					break loop94;
				}
			}

			string_literal313=(Token)match(input,END,FOLLOW_END_in_classHelperDecl6781); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_END.add(string_literal313);

			// AST REWRITE
			// elements: CLASS, typeId, classHelperItem
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 303:102: -> ^( 'class' typeId ) ( classHelperItem )*
			{
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:303:105: ^( 'class' typeId )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_CLASS.nextNode(), root_1);
				adaptor.addChild(root_1, stream_typeId.nextTree());
				adaptor.addChild(root_0, root_1);
				}

				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:303:124: ( classHelperItem )*
				while ( stream_classHelperItem.hasNext() ) {
					adaptor.addChild(root_0, stream_classHelperItem.nextTree());
				}
				stream_classHelperItem.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 73, classHelperDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classHelperDecl"


	public static class classHelperItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classHelperItem"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:305:1: classHelperItem : ( visibility | classMethod | classProperty | constSection | typeSection | ( 'class' )? varSection );
	public final DelphiParser.classHelperItem_return classHelperItem() throws RecognitionException {
		DelphiParser.classHelperItem_return retval = new DelphiParser.classHelperItem_return();
		retval.start = input.LT(1);
		int classHelperItem_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal319=null;
		ParserRuleReturnScope visibility314 =null;
		ParserRuleReturnScope classMethod315 =null;
		ParserRuleReturnScope classProperty316 =null;
		ParserRuleReturnScope constSection317 =null;
		ParserRuleReturnScope typeSection318 =null;
		ParserRuleReturnScope varSection320 =null;

		Object string_literal319_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:305:30: ( visibility | classMethod | classProperty | constSection | typeSection | ( 'class' )? varSection )
			int alt96=6;
			switch ( input.LA(1) ) {
			case AUTOMATED:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case PUBLISHED:
			case STRICT:
				{
				alt96=1;
				}
				break;
			case LBRACK:
				{
				int LA96_7 = input.LA(2);
				if ( (synpred134_Delphi()) ) {
					alt96=2;
				}
				else if ( (synpred135_Delphi()) ) {
					alt96=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 96, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CLASS:
				{
				int LA96_8 = input.LA(2);
				if ( (synpred134_Delphi()) ) {
					alt96=2;
				}
				else if ( (synpred135_Delphi()) ) {
					alt96=3;
				}
				else if ( (true) ) {
					alt96=6;
				}

				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case FUNCTION:
			case OPERATOR:
			case PROCEDURE:
				{
				alt96=2;
				}
				break;
			case PROPERTY:
				{
				alt96=3;
				}
				break;
			case CONST:
			case RESOURCESTRING:
				{
				alt96=4;
				}
				break;
			case TYPE:
				{
				alt96=5;
				}
				break;
			case THREADVAR:
			case VAR:
				{
				alt96=6;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 96, 0, input);
				throw nvae;
			}
			switch (alt96) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:305:32: visibility
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_visibility_in_classHelperItem6846);
					visibility314=visibility();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, visibility314.getTree());

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:306:32: classMethod
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classMethod_in_classHelperItem6879);
					classMethod315=classMethod();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classMethod315.getTree());

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:307:32: classProperty
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classProperty_in_classHelperItem6912);
					classProperty316=classProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classProperty316.getTree());

					}
					break;
				case 4 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:308:32: constSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_constSection_in_classHelperItem6945);
					constSection317=constSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constSection317.getTree());

					}
					break;
				case 5 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:309:32: typeSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_typeSection_in_classHelperItem6978);
					typeSection318=typeSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeSection318.getTree());

					}
					break;
				case 6 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:310:32: ( 'class' )? varSection
					{
					root_0 = (Object)adaptor.nil();


					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:310:32: ( 'class' )?
					int alt95=2;
					int LA95_0 = input.LA(1);
					if ( (LA95_0==CLASS) ) {
						alt95=1;
					}
					switch (alt95) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:310:33: 'class'
							{
							string_literal319=(Token)match(input,CLASS,FOLLOW_CLASS_in_classHelperItem7012); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal319_tree = (Object)adaptor.create(string_literal319);
							adaptor.addChild(root_0, string_literal319_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_varSection_in_classHelperItem7016);
					varSection320=varSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, varSection320.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 74, classHelperItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classHelperItem"


	public static class interfaceTypeDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "interfaceTypeDecl"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:312:1: interfaceTypeDecl : ( interfaceKey ( classParent )? ( interfaceGuid )? ( interfaceItem )* 'end' -> interfaceKey ^( TkClassParents ( classParent )? ) ^( TkGuid ( interfaceGuid )? ) ( interfaceItem )* | interfaceKey ( classParent )? -> interfaceKey ^( TkClassParents ( classParent )? ) );
	public final DelphiParser.interfaceTypeDecl_return interfaceTypeDecl() throws RecognitionException {
		DelphiParser.interfaceTypeDecl_return retval = new DelphiParser.interfaceTypeDecl_return();
		retval.start = input.LT(1);
		int interfaceTypeDecl_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal325=null;
		ParserRuleReturnScope interfaceKey321 =null;
		ParserRuleReturnScope classParent322 =null;
		ParserRuleReturnScope interfaceGuid323 =null;
		ParserRuleReturnScope interfaceItem324 =null;
		ParserRuleReturnScope interfaceKey326 =null;
		ParserRuleReturnScope classParent327 =null;

		Object string_literal325_tree=null;
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleSubtreeStream stream_interfaceItem=new RewriteRuleSubtreeStream(adaptor,"rule interfaceItem");
		RewriteRuleSubtreeStream stream_interfaceKey=new RewriteRuleSubtreeStream(adaptor,"rule interfaceKey");
		RewriteRuleSubtreeStream stream_classParent=new RewriteRuleSubtreeStream(adaptor,"rule classParent");
		RewriteRuleSubtreeStream stream_interfaceGuid=new RewriteRuleSubtreeStream(adaptor,"rule interfaceGuid");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:312:30: ( interfaceKey ( classParent )? ( interfaceGuid )? ( interfaceItem )* 'end' -> interfaceKey ^( TkClassParents ( classParent )? ) ^( TkGuid ( interfaceGuid )? ) ( interfaceItem )* | interfaceKey ( classParent )? -> interfaceKey ^( TkClassParents ( classParent )? ) )
			int alt101=2;
			int LA101_0 = input.LA(1);
			if ( (LA101_0==DISPINTERFACE||LA101_0==INTERFACE) ) {
				int LA101_1 = input.LA(2);
				if ( (synpred142_Delphi()) ) {
					alt101=1;
				}
				else if ( (true) ) {
					alt101=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 101, 0, input);
				throw nvae;
			}

			switch (alt101) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:312:32: interfaceKey ( classParent )? ( interfaceGuid )? ( interfaceItem )* 'end'
					{
					pushFollow(FOLLOW_interfaceKey_in_interfaceTypeDecl7064);
					interfaceKey321=interfaceKey();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_interfaceKey.add(interfaceKey321.getTree());
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:312:45: ( classParent )?
					int alt97=2;
					int LA97_0 = input.LA(1);
					if ( (LA97_0==LPAREN) ) {
						alt97=1;
					}
					switch (alt97) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:312:46: classParent
							{
							pushFollow(FOLLOW_classParent_in_interfaceTypeDecl7067);
							classParent322=classParent();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_classParent.add(classParent322.getTree());
							}
							break;

					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:312:60: ( interfaceGuid )?
					int alt98=2;
					int LA98_0 = input.LA(1);
					if ( (LA98_0==LBRACK) ) {
						int LA98_1 = input.LA(2);
						if ( (LA98_1==QuotedString) ) {
							alt98=1;
						}
					}
					switch (alt98) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:312:61: interfaceGuid
							{
							pushFollow(FOLLOW_interfaceGuid_in_interfaceTypeDecl7072);
							interfaceGuid323=interfaceGuid();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_interfaceGuid.add(interfaceGuid323.getTree());
							}
							break;

					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:312:77: ( interfaceItem )*
					loop99:
					while (true) {
						int alt99=2;
						int LA99_0 = input.LA(1);
						if ( (LA99_0==CLASS||LA99_0==CONSTRUCTOR||LA99_0==DESTRUCTOR||LA99_0==FUNCTION||LA99_0==LBRACK||LA99_0==OPERATOR||LA99_0==PROCEDURE||LA99_0==PROPERTY) ) {
							alt99=1;
						}

						switch (alt99) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:312:78: interfaceItem
							{
							pushFollow(FOLLOW_interfaceItem_in_interfaceTypeDecl7077);
							interfaceItem324=interfaceItem();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_interfaceItem.add(interfaceItem324.getTree());
							}
							break;

						default :
							break loop99;
						}
					}

					string_literal325=(Token)match(input,END,FOLLOW_END_in_interfaceTypeDecl7081); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_END.add(string_literal325);

					// AST REWRITE
					// elements: interfaceGuid, interfaceItem, interfaceKey, classParent
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 313:31: -> interfaceKey ^( TkClassParents ( classParent )? ) ^( TkGuid ( interfaceGuid )? ) ( interfaceItem )*
					{
						adaptor.addChild(root_0, stream_interfaceKey.nextTree());
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:313:47: ^( TkClassParents ( classParent )? )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClassParents, "TkClassParents"), root_1);
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:313:64: ( classParent )?
						if ( stream_classParent.hasNext() ) {
							adaptor.addChild(root_1, stream_classParent.nextTree());
						}
						stream_classParent.reset();

						adaptor.addChild(root_0, root_1);
						}

						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:313:81: ^( TkGuid ( interfaceGuid )? )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkGuid, "TkGuid"), root_1);
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:313:90: ( interfaceGuid )?
						if ( stream_interfaceGuid.hasNext() ) {
							adaptor.addChild(root_1, stream_interfaceGuid.nextTree());
						}
						stream_interfaceGuid.reset();

						adaptor.addChild(root_0, root_1);
						}

						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:313:108: ( interfaceItem )*
						while ( stream_interfaceItem.hasNext() ) {
							adaptor.addChild(root_0, stream_interfaceItem.nextTree());
						}
						stream_interfaceItem.reset();

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:314:32: interfaceKey ( classParent )?
					{
					pushFollow(FOLLOW_interfaceKey_in_interfaceTypeDecl7172);
					interfaceKey326=interfaceKey();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_interfaceKey.add(interfaceKey326.getTree());
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:314:45: ( classParent )?
					int alt100=2;
					alt100 = dfa100.predict(input);
					switch (alt100) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:314:46: classParent
							{
							pushFollow(FOLLOW_classParent_in_interfaceTypeDecl7175);
							classParent327=classParent();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_classParent.add(classParent327.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: interfaceKey, classParent
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 315:31: -> interfaceKey ^( TkClassParents ( classParent )? )
					{
						adaptor.addChild(root_0, stream_interfaceKey.nextTree());
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:315:47: ^( TkClassParents ( classParent )? )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClassParents, "TkClassParents"), root_1);
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:315:64: ( classParent )?
						if ( stream_classParent.hasNext() ) {
							adaptor.addChild(root_1, stream_classParent.nextTree());
						}
						stream_classParent.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 75, interfaceTypeDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interfaceTypeDecl"


	public static class interfaceKey_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "interfaceKey"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:317:1: interfaceKey : ( 'interface' | 'dispinterface' );
	public final DelphiParser.interfaceKey_return interfaceKey() throws RecognitionException {
		DelphiParser.interfaceKey_return retval = new DelphiParser.interfaceKey_return();
		retval.start = input.LT(1);
		int interfaceKey_StartIndex = input.index();

		Object root_0 = null;

		Token set328=null;

		Object set328_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:317:30: ( 'interface' | 'dispinterface' )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set328=input.LT(1);
			if ( input.LA(1)==DISPINTERFACE||input.LA(1)==INTERFACE ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set328));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 76, interfaceKey_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interfaceKey"


	public static class interfaceGuid_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "interfaceGuid"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:320:1: interfaceGuid : '[' QuotedString ']' -> QuotedString ;
	public final DelphiParser.interfaceGuid_return interfaceGuid() throws RecognitionException {
		DelphiParser.interfaceGuid_return retval = new DelphiParser.interfaceGuid_return();
		retval.start = input.LT(1);
		int interfaceGuid_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal329=null;
		Token QuotedString330=null;
		Token char_literal331=null;

		Object char_literal329_tree=null;
		Object QuotedString330_tree=null;
		Object char_literal331_tree=null;
		RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
		RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
		RewriteRuleTokenStream stream_QuotedString=new RewriteRuleTokenStream(adaptor,"token QuotedString");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:320:30: ( '[' QuotedString ']' -> QuotedString )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:320:32: '[' QuotedString ']'
			{
			char_literal329=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_interfaceGuid7358); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LBRACK.add(char_literal329);

			QuotedString330=(Token)match(input,QuotedString,FOLLOW_QuotedString_in_interfaceGuid7360); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_QuotedString.add(QuotedString330);

			char_literal331=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_interfaceGuid7362); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RBRACK.add(char_literal331);

			// AST REWRITE
			// elements: QuotedString
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 320:53: -> QuotedString
			{
				adaptor.addChild(root_0, stream_QuotedString.nextNode());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 77, interfaceGuid_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interfaceGuid"


	public static class interfaceItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "interfaceItem"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:322:1: interfaceItem : ( classMethod | ( 'class' )? classProperty );
	public final DelphiParser.interfaceItem_return interfaceItem() throws RecognitionException {
		DelphiParser.interfaceItem_return retval = new DelphiParser.interfaceItem_return();
		retval.start = input.LT(1);
		int interfaceItem_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal333=null;
		ParserRuleReturnScope classMethod332 =null;
		ParserRuleReturnScope classProperty334 =null;

		Object string_literal333_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:322:30: ( classMethod | ( 'class' )? classProperty )
			int alt103=2;
			switch ( input.LA(1) ) {
			case LBRACK:
				{
				int LA103_1 = input.LA(2);
				if ( (synpred145_Delphi()) ) {
					alt103=1;
				}
				else if ( (true) ) {
					alt103=2;
				}

				}
				break;
			case CLASS:
				{
				int LA103_2 = input.LA(2);
				if ( (synpred145_Delphi()) ) {
					alt103=1;
				}
				else if ( (true) ) {
					alt103=2;
				}

				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case FUNCTION:
			case OPERATOR:
			case PROCEDURE:
				{
				alt103=1;
				}
				break;
			case PROPERTY:
				{
				alt103=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 103, 0, input);
				throw nvae;
			}
			switch (alt103) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:322:32: classMethod
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classMethod_in_interfaceItem7418);
					classMethod332=classMethod();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classMethod332.getTree());

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:323:32: ( 'class' )? classProperty
					{
					root_0 = (Object)adaptor.nil();


					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:323:32: ( 'class' )?
					int alt102=2;
					int LA102_0 = input.LA(1);
					if ( (LA102_0==CLASS) ) {
						int LA102_1 = input.LA(2);
						if ( (synpred146_Delphi()) ) {
							alt102=1;
						}
					}
					switch (alt102) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:323:33: 'class'
							{
							string_literal333=(Token)match(input,CLASS,FOLLOW_CLASS_in_interfaceItem7452); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal333_tree = (Object)adaptor.create(string_literal333);
							adaptor.addChild(root_0, string_literal333_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_classProperty_in_interfaceItem7456);
					classProperty334=classProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classProperty334.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 78, interfaceItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interfaceItem"


	public static class objectDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "objectDecl"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:325:1: objectDecl : 'object' ( classParent )? ( objectItem )* 'end' -> 'object' ( classParent )? ( objectItem )* ;
	public final DelphiParser.objectDecl_return objectDecl() throws RecognitionException {
		DelphiParser.objectDecl_return retval = new DelphiParser.objectDecl_return();
		retval.start = input.LT(1);
		int objectDecl_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal335=null;
		Token string_literal338=null;
		ParserRuleReturnScope classParent336 =null;
		ParserRuleReturnScope objectItem337 =null;

		Object string_literal335_tree=null;
		Object string_literal338_tree=null;
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleTokenStream stream_OBJECT=new RewriteRuleTokenStream(adaptor,"token OBJECT");
		RewriteRuleSubtreeStream stream_objectItem=new RewriteRuleSubtreeStream(adaptor,"rule objectItem");
		RewriteRuleSubtreeStream stream_classParent=new RewriteRuleSubtreeStream(adaptor,"rule classParent");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:325:30: ( 'object' ( classParent )? ( objectItem )* 'end' -> 'object' ( classParent )? ( objectItem )* )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:325:32: 'object' ( classParent )? ( objectItem )* 'end'
			{
			string_literal335=(Token)match(input,OBJECT,FOLLOW_OBJECT_in_objectDecl7511); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_OBJECT.add(string_literal335);

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:325:41: ( classParent )?
			int alt104=2;
			int LA104_0 = input.LA(1);
			if ( (LA104_0==LPAREN) ) {
				alt104=1;
			}
			switch (alt104) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:325:42: classParent
					{
					pushFollow(FOLLOW_classParent_in_objectDecl7514);
					classParent336=classParent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classParent.add(classParent336.getTree());
					}
					break;

			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:325:56: ( objectItem )*
			loop105:
			while (true) {
				int alt105=2;
				int LA105_0 = input.LA(1);
				if ( (LA105_0==ABSOLUTE||LA105_0==ADD||LA105_0==ANSISTRING||LA105_0==AT||LA105_0==AUTOMATED||LA105_0==BREAK||LA105_0==CLASS||(LA105_0 >= CONSTRUCTOR && LA105_0 <= CONTINUE)||LA105_0==DEFAULT||(LA105_0 >= DESTRUCTOR && LA105_0 <= DISPID)||(LA105_0 >= DQ && LA105_0 <= DW)||LA105_0==EXIT||LA105_0==EXPORT||LA105_0==FALSE||LA105_0==FINAL||LA105_0==FUNCTION||LA105_0==HELPER||(LA105_0 >= IMPLEMENTS && LA105_0 <= INDEX)||LA105_0==LBRACK||LA105_0==LOCAL||LA105_0==MESSAGE||LA105_0==NAME||LA105_0==OBJECT||LA105_0==OPERATOR||LA105_0==OUT||LA105_0==POINTER||(LA105_0 >= PRIVATE && LA105_0 <= PROCEDURE)||(LA105_0 >= PROTECTED && LA105_0 <= PUBLISHED)||(LA105_0 >= READ && LA105_0 <= READONLY)||(LA105_0 >= REFERENCE && LA105_0 <= REGISTER)||LA105_0==REMOVE||LA105_0==STATIC||(LA105_0 >= STORED && LA105_0 <= STRING)||LA105_0==TRUE||LA105_0==TkIdentifier||LA105_0==UNSAFE||(LA105_0 >= VARARGS && LA105_0 <= VIRTUAL)||(LA105_0 >= WRITE && LA105_0 <= WRITEONLY)||LA105_0==198) ) {
					alt105=1;
				}

				switch (alt105) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:325:57: objectItem
					{
					pushFollow(FOLLOW_objectItem_in_objectDecl7519);
					objectItem337=objectItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_objectItem.add(objectItem337.getTree());
					}
					break;

				default :
					break loop105;
				}
			}

			string_literal338=(Token)match(input,END,FOLLOW_END_in_objectDecl7523); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_END.add(string_literal338);

			// AST REWRITE
			// elements: OBJECT, objectItem, classParent
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 325:76: -> 'object' ( classParent )? ( objectItem )*
			{
				adaptor.addChild(root_0, stream_OBJECT.nextNode());
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:325:88: ( classParent )?
				if ( stream_classParent.hasNext() ) {
					adaptor.addChild(root_0, stream_classParent.nextTree());
				}
				stream_classParent.reset();

				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:325:103: ( objectItem )*
				while ( stream_objectItem.hasNext() ) {
					adaptor.addChild(root_0, stream_objectItem.nextTree());
				}
				stream_objectItem.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 79, objectDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "objectDecl"


	public static class objectItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "objectItem"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:327:1: objectItem : ( visibility | classMethod | classField );
	public final DelphiParser.objectItem_return objectItem() throws RecognitionException {
		DelphiParser.objectItem_return retval = new DelphiParser.objectItem_return();
		retval.start = input.LT(1);
		int objectItem_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope visibility339 =null;
		ParserRuleReturnScope classMethod340 =null;
		ParserRuleReturnScope classField341 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:327:30: ( visibility | classMethod | classField )
			int alt106=3;
			switch ( input.LA(1) ) {
			case STRICT:
				{
				int LA106_1 = input.LA(2);
				if ( (synpred149_Delphi()) ) {
					alt106=1;
				}
				else if ( (true) ) {
					alt106=3;
				}

				}
				break;
			case AUTOMATED:
			case PROTECTED:
			case PUBLISHED:
				{
				alt106=1;
				}
				break;
			case PRIVATE:
				{
				int LA106_3 = input.LA(2);
				if ( (synpred149_Delphi()) ) {
					alt106=1;
				}
				else if ( (true) ) {
					alt106=3;
				}

				}
				break;
			case PUBLIC:
				{
				int LA106_4 = input.LA(2);
				if ( (synpred149_Delphi()) ) {
					alt106=1;
				}
				else if ( (true) ) {
					alt106=3;
				}

				}
				break;
			case LBRACK:
				{
				int LA106_7 = input.LA(2);
				if ( (synpred150_Delphi()) ) {
					alt106=2;
				}
				else if ( (true) ) {
					alt106=3;
				}

				}
				break;
			case CLASS:
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case FUNCTION:
			case PROCEDURE:
				{
				alt106=2;
				}
				break;
			case OPERATOR:
				{
				int LA106_11 = input.LA(2);
				if ( (synpred150_Delphi()) ) {
					alt106=2;
				}
				else if ( (true) ) {
					alt106=3;
				}

				}
				break;
			case ABSOLUTE:
			case ADD:
			case ANSISTRING:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case DISPID:
			case DQ:
			case DW:
			case EXIT:
			case EXPORT:
			case FALSE:
			case FINAL:
			case HELPER:
			case IMPLEMENTS:
			case IN:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OUT:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STATIC:
			case STORED:
			case STRING:
			case TRUE:
			case TkIdentifier:
			case UNSAFE:
			case VARARGS:
			case VARIANT:
			case VIRTUAL:
			case WRITE:
			case WRITEONLY:
			case 198:
				{
				alt106=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 106, 0, input);
				throw nvae;
			}
			switch (alt106) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:327:32: visibility
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_visibility_in_objectItem7592);
					visibility339=visibility();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, visibility339.getTree());

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:328:32: classMethod
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classMethod_in_objectItem7625);
					classMethod340=classMethod();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classMethod340.getTree());

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:329:32: classField
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classField_in_objectItem7658);
					classField341=classField();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classField341.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 80, objectItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "objectItem"


	public static class recordDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordDecl"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:331:1: recordDecl : ( simpleRecord | variantRecord );
	public final DelphiParser.recordDecl_return recordDecl() throws RecognitionException {
		DelphiParser.recordDecl_return retval = new DelphiParser.recordDecl_return();
		retval.start = input.LT(1);
		int recordDecl_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope simpleRecord342 =null;
		ParserRuleReturnScope variantRecord343 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:331:30: ( simpleRecord | variantRecord )
			int alt107=2;
			int LA107_0 = input.LA(1);
			if ( (LA107_0==RECORD) ) {
				int LA107_1 = input.LA(2);
				if ( (synpred151_Delphi()) ) {
					alt107=1;
				}
				else if ( (true) ) {
					alt107=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 107, 0, input);
				throw nvae;
			}

			switch (alt107) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:331:32: simpleRecord
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_simpleRecord_in_recordDecl7713);
					simpleRecord342=simpleRecord();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleRecord342.getTree());

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:332:32: variantRecord
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_variantRecord_in_recordDecl7746);
					variantRecord343=variantRecord();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, variantRecord343.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 81, recordDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordDecl"


	public static class simpleRecord_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "simpleRecord"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:334:1: simpleRecord : 'record' ( recordField )* ( recordItem )* 'end' -> 'record' ( recordField )* ( recordItem )* ;
	public final DelphiParser.simpleRecord_return simpleRecord() throws RecognitionException {
		DelphiParser.simpleRecord_return retval = new DelphiParser.simpleRecord_return();
		retval.start = input.LT(1);
		int simpleRecord_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal344=null;
		Token string_literal347=null;
		ParserRuleReturnScope recordField345 =null;
		ParserRuleReturnScope recordItem346 =null;

		Object string_literal344_tree=null;
		Object string_literal347_tree=null;
		RewriteRuleTokenStream stream_RECORD=new RewriteRuleTokenStream(adaptor,"token RECORD");
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleSubtreeStream stream_recordField=new RewriteRuleSubtreeStream(adaptor,"rule recordField");
		RewriteRuleSubtreeStream stream_recordItem=new RewriteRuleSubtreeStream(adaptor,"rule recordItem");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:334:30: ( 'record' ( recordField )* ( recordItem )* 'end' -> 'record' ( recordField )* ( recordItem )* )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:334:32: 'record' ( recordField )* ( recordItem )* 'end'
			{
			string_literal344=(Token)match(input,RECORD,FOLLOW_RECORD_in_simpleRecord7799); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RECORD.add(string_literal344);

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:334:41: ( recordField )*
			loop108:
			while (true) {
				int alt108=2;
				switch ( input.LA(1) ) {
				case STRICT:
					{
					int LA108_1 = input.LA(2);
					if ( (synpred152_Delphi()) ) {
						alt108=1;
					}

					}
					break;
				case PRIVATE:
					{
					int LA108_3 = input.LA(2);
					if ( (synpred152_Delphi()) ) {
						alt108=1;
					}

					}
					break;
				case PUBLIC:
					{
					int LA108_4 = input.LA(2);
					if ( (synpred152_Delphi()) ) {
						alt108=1;
					}

					}
					break;
				case OPERATOR:
					{
					int LA108_11 = input.LA(2);
					if ( (synpred152_Delphi()) ) {
						alt108=1;
					}

					}
					break;
				case TkIdentifier:
					{
					int LA108_16 = input.LA(2);
					if ( (synpred152_Delphi()) ) {
						alt108=1;
					}

					}
					break;
				case 198:
					{
					int LA108_17 = input.LA(2);
					if ( (synpred152_Delphi()) ) {
						alt108=1;
					}

					}
					break;
				case ABSOLUTE:
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DISPID:
				case DQ:
				case DW:
				case EXIT:
				case EXPORT:
				case FALSE:
				case FINAL:
				case HELPER:
				case IMPLEMENTS:
				case IN:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OUT:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STATIC:
				case STORED:
				case STRING:
				case TRUE:
				case UNSAFE:
				case VARARGS:
				case VARIANT:
				case VIRTUAL:
				case WRITE:
				case WRITEONLY:
					{
					int LA108_18 = input.LA(2);
					if ( (synpred152_Delphi()) ) {
						alt108=1;
					}

					}
					break;
				}
				switch (alt108) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:334:42: recordField
					{
					pushFollow(FOLLOW_recordField_in_simpleRecord7802);
					recordField345=recordField();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_recordField.add(recordField345.getTree());
					}
					break;

				default :
					break loop108;
				}
			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:334:56: ( recordItem )*
			loop109:
			while (true) {
				int alt109=2;
				int LA109_0 = input.LA(1);
				if ( (LA109_0==ABSOLUTE||LA109_0==ADD||LA109_0==ANSISTRING||LA109_0==AT||LA109_0==AUTOMATED||LA109_0==BREAK||LA109_0==CLASS||(LA109_0 >= CONST && LA109_0 <= CONTINUE)||LA109_0==DEFAULT||(LA109_0 >= DESTRUCTOR && LA109_0 <= DISPID)||(LA109_0 >= DQ && LA109_0 <= DW)||LA109_0==EXIT||LA109_0==EXPORT||LA109_0==FALSE||LA109_0==FINAL||LA109_0==FUNCTION||LA109_0==HELPER||(LA109_0 >= IMPLEMENTS && LA109_0 <= INDEX)||LA109_0==LBRACK||LA109_0==LOCAL||LA109_0==MESSAGE||LA109_0==NAME||LA109_0==OBJECT||LA109_0==OPERATOR||LA109_0==OUT||LA109_0==POINTER||(LA109_0 >= PRIVATE && LA109_0 <= PROCEDURE)||(LA109_0 >= PROPERTY && LA109_0 <= PUBLISHED)||(LA109_0 >= READ && LA109_0 <= READONLY)||(LA109_0 >= REFERENCE && LA109_0 <= REGISTER)||LA109_0==REMOVE||LA109_0==RESOURCESTRING||LA109_0==STATIC||(LA109_0 >= STORED && LA109_0 <= STRING)||LA109_0==THREADVAR||LA109_0==TRUE||LA109_0==TYPE||LA109_0==TkIdentifier||LA109_0==UNSAFE||(LA109_0 >= VAR && LA109_0 <= VIRTUAL)||(LA109_0 >= WRITE && LA109_0 <= WRITEONLY)||LA109_0==198) ) {
					alt109=1;
				}

				switch (alt109) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:334:57: recordItem
					{
					pushFollow(FOLLOW_recordItem_in_simpleRecord7807);
					recordItem346=recordItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_recordItem.add(recordItem346.getTree());
					}
					break;

				default :
					break loop109;
				}
			}

			string_literal347=(Token)match(input,END,FOLLOW_END_in_simpleRecord7811); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_END.add(string_literal347);

			// AST REWRITE
			// elements: RECORD, recordField, recordItem
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 334:76: -> 'record' ( recordField )* ( recordItem )*
			{
				adaptor.addChild(root_0, stream_RECORD.nextNode());
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:334:88: ( recordField )*
				while ( stream_recordField.hasNext() ) {
					adaptor.addChild(root_0, stream_recordField.nextTree());
				}
				stream_recordField.reset();

				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:334:103: ( recordItem )*
				while ( stream_recordItem.hasNext() ) {
					adaptor.addChild(root_0, stream_recordItem.nextTree());
				}
				stream_recordItem.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 82, simpleRecord_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "simpleRecord"


	public static class variantRecord_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "variantRecord"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:336:1: variantRecord : 'record' ( recordField )* ( recordItem )* recordVariantSection 'end' -> 'record' ( recordField )* ( recordItem )* recordVariantSection ;
	public final DelphiParser.variantRecord_return variantRecord() throws RecognitionException {
		DelphiParser.variantRecord_return retval = new DelphiParser.variantRecord_return();
		retval.start = input.LT(1);
		int variantRecord_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal348=null;
		Token string_literal352=null;
		ParserRuleReturnScope recordField349 =null;
		ParserRuleReturnScope recordItem350 =null;
		ParserRuleReturnScope recordVariantSection351 =null;

		Object string_literal348_tree=null;
		Object string_literal352_tree=null;
		RewriteRuleTokenStream stream_RECORD=new RewriteRuleTokenStream(adaptor,"token RECORD");
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleSubtreeStream stream_recordVariantSection=new RewriteRuleSubtreeStream(adaptor,"rule recordVariantSection");
		RewriteRuleSubtreeStream stream_recordField=new RewriteRuleSubtreeStream(adaptor,"rule recordField");
		RewriteRuleSubtreeStream stream_recordItem=new RewriteRuleSubtreeStream(adaptor,"rule recordItem");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:336:30: ( 'record' ( recordField )* ( recordItem )* recordVariantSection 'end' -> 'record' ( recordField )* ( recordItem )* recordVariantSection )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:336:32: 'record' ( recordField )* ( recordItem )* recordVariantSection 'end'
			{
			string_literal348=(Token)match(input,RECORD,FOLLOW_RECORD_in_variantRecord7877); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RECORD.add(string_literal348);

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:336:41: ( recordField )*
			loop110:
			while (true) {
				int alt110=2;
				switch ( input.LA(1) ) {
				case STRICT:
					{
					int LA110_1 = input.LA(2);
					if ( (synpred154_Delphi()) ) {
						alt110=1;
					}

					}
					break;
				case PRIVATE:
					{
					int LA110_3 = input.LA(2);
					if ( (synpred154_Delphi()) ) {
						alt110=1;
					}

					}
					break;
				case PUBLIC:
					{
					int LA110_4 = input.LA(2);
					if ( (synpred154_Delphi()) ) {
						alt110=1;
					}

					}
					break;
				case OPERATOR:
					{
					int LA110_11 = input.LA(2);
					if ( (synpred154_Delphi()) ) {
						alt110=1;
					}

					}
					break;
				case TkIdentifier:
					{
					int LA110_16 = input.LA(2);
					if ( (synpred154_Delphi()) ) {
						alt110=1;
					}

					}
					break;
				case 198:
					{
					int LA110_17 = input.LA(2);
					if ( (synpred154_Delphi()) ) {
						alt110=1;
					}

					}
					break;
				case ABSOLUTE:
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DISPID:
				case DQ:
				case DW:
				case EXIT:
				case EXPORT:
				case FALSE:
				case FINAL:
				case HELPER:
				case IMPLEMENTS:
				case IN:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OUT:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STATIC:
				case STORED:
				case STRING:
				case TRUE:
				case UNSAFE:
				case VARARGS:
				case VARIANT:
				case VIRTUAL:
				case WRITE:
				case WRITEONLY:
					{
					int LA110_18 = input.LA(2);
					if ( (synpred154_Delphi()) ) {
						alt110=1;
					}

					}
					break;
				}
				switch (alt110) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:336:42: recordField
					{
					pushFollow(FOLLOW_recordField_in_variantRecord7880);
					recordField349=recordField();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_recordField.add(recordField349.getTree());
					}
					break;

				default :
					break loop110;
				}
			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:336:56: ( recordItem )*
			loop111:
			while (true) {
				int alt111=2;
				int LA111_0 = input.LA(1);
				if ( (LA111_0==ABSOLUTE||LA111_0==ADD||LA111_0==ANSISTRING||LA111_0==AT||LA111_0==AUTOMATED||LA111_0==BREAK||LA111_0==CLASS||(LA111_0 >= CONST && LA111_0 <= CONTINUE)||LA111_0==DEFAULT||(LA111_0 >= DESTRUCTOR && LA111_0 <= DISPID)||(LA111_0 >= DQ && LA111_0 <= DW)||LA111_0==EXIT||LA111_0==EXPORT||LA111_0==FALSE||LA111_0==FINAL||LA111_0==FUNCTION||LA111_0==HELPER||(LA111_0 >= IMPLEMENTS && LA111_0 <= INDEX)||LA111_0==LBRACK||LA111_0==LOCAL||LA111_0==MESSAGE||LA111_0==NAME||LA111_0==OBJECT||LA111_0==OPERATOR||LA111_0==OUT||LA111_0==POINTER||(LA111_0 >= PRIVATE && LA111_0 <= PROCEDURE)||(LA111_0 >= PROPERTY && LA111_0 <= PUBLISHED)||(LA111_0 >= READ && LA111_0 <= READONLY)||(LA111_0 >= REFERENCE && LA111_0 <= REGISTER)||LA111_0==REMOVE||LA111_0==RESOURCESTRING||LA111_0==STATIC||(LA111_0 >= STORED && LA111_0 <= STRING)||LA111_0==THREADVAR||LA111_0==TRUE||LA111_0==TYPE||LA111_0==TkIdentifier||LA111_0==UNSAFE||(LA111_0 >= VAR && LA111_0 <= VIRTUAL)||(LA111_0 >= WRITE && LA111_0 <= WRITEONLY)||LA111_0==198) ) {
					alt111=1;
				}

				switch (alt111) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:336:57: recordItem
					{
					pushFollow(FOLLOW_recordItem_in_variantRecord7885);
					recordItem350=recordItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_recordItem.add(recordItem350.getTree());
					}
					break;

				default :
					break loop111;
				}
			}

			pushFollow(FOLLOW_recordVariantSection_in_variantRecord7889);
			recordVariantSection351=recordVariantSection();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_recordVariantSection.add(recordVariantSection351.getTree());
			string_literal352=(Token)match(input,END,FOLLOW_END_in_variantRecord7891); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_END.add(string_literal352);

			// AST REWRITE
			// elements: recordVariantSection, recordField, RECORD, recordItem
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 336:97: -> 'record' ( recordField )* ( recordItem )* recordVariantSection
			{
				adaptor.addChild(root_0, stream_RECORD.nextNode());
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:336:109: ( recordField )*
				while ( stream_recordField.hasNext() ) {
					adaptor.addChild(root_0, stream_recordField.nextTree());
				}
				stream_recordField.reset();

				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:336:124: ( recordItem )*
				while ( stream_recordItem.hasNext() ) {
					adaptor.addChild(root_0, stream_recordItem.nextTree());
				}
				stream_recordItem.reset();

				adaptor.addChild(root_0, stream_recordVariantSection.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 83, variantRecord_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "variantRecord"


	public static class recordItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordItem"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:338:1: recordItem : ( visibility | classMethod | classProperty | constSection | typeSection | recordField | ( 'class' )? varSection );
	public final DelphiParser.recordItem_return recordItem() throws RecognitionException {
		DelphiParser.recordItem_return retval = new DelphiParser.recordItem_return();
		retval.start = input.LT(1);
		int recordItem_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal359=null;
		ParserRuleReturnScope visibility353 =null;
		ParserRuleReturnScope classMethod354 =null;
		ParserRuleReturnScope classProperty355 =null;
		ParserRuleReturnScope constSection356 =null;
		ParserRuleReturnScope typeSection357 =null;
		ParserRuleReturnScope recordField358 =null;
		ParserRuleReturnScope varSection360 =null;

		Object string_literal359_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:338:30: ( visibility | classMethod | classProperty | constSection | typeSection | recordField | ( 'class' )? varSection )
			int alt113=7;
			switch ( input.LA(1) ) {
			case STRICT:
				{
				int LA113_1 = input.LA(2);
				if ( (synpred156_Delphi()) ) {
					alt113=1;
				}
				else if ( (synpred161_Delphi()) ) {
					alt113=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 113, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AUTOMATED:
			case PROTECTED:
			case PUBLISHED:
				{
				alt113=1;
				}
				break;
			case PRIVATE:
				{
				int LA113_3 = input.LA(2);
				if ( (synpred156_Delphi()) ) {
					alt113=1;
				}
				else if ( (synpred161_Delphi()) ) {
					alt113=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 113, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PUBLIC:
				{
				int LA113_4 = input.LA(2);
				if ( (synpred156_Delphi()) ) {
					alt113=1;
				}
				else if ( (synpred161_Delphi()) ) {
					alt113=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 113, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LBRACK:
				{
				int LA113_7 = input.LA(2);
				if ( (synpred157_Delphi()) ) {
					alt113=2;
				}
				else if ( (synpred158_Delphi()) ) {
					alt113=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 113, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CLASS:
				{
				int LA113_8 = input.LA(2);
				if ( (synpred157_Delphi()) ) {
					alt113=2;
				}
				else if ( (synpred158_Delphi()) ) {
					alt113=3;
				}
				else if ( (true) ) {
					alt113=7;
				}

				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case FUNCTION:
			case PROCEDURE:
				{
				alt113=2;
				}
				break;
			case OPERATOR:
				{
				int LA113_11 = input.LA(2);
				if ( (synpred157_Delphi()) ) {
					alt113=2;
				}
				else if ( (synpred161_Delphi()) ) {
					alt113=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 113, 11, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PROPERTY:
				{
				alt113=3;
				}
				break;
			case CONST:
			case RESOURCESTRING:
				{
				alt113=4;
				}
				break;
			case TYPE:
				{
				alt113=5;
				}
				break;
			case ABSOLUTE:
			case ADD:
			case ANSISTRING:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case DISPID:
			case DQ:
			case DW:
			case EXIT:
			case EXPORT:
			case FALSE:
			case FINAL:
			case HELPER:
			case IMPLEMENTS:
			case IN:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OUT:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STATIC:
			case STORED:
			case STRING:
			case TRUE:
			case TkIdentifier:
			case UNSAFE:
			case VARARGS:
			case VARIANT:
			case VIRTUAL:
			case WRITE:
			case WRITEONLY:
			case 198:
				{
				alt113=6;
				}
				break;
			case THREADVAR:
			case VAR:
				{
				alt113=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 113, 0, input);
				throw nvae;
			}
			switch (alt113) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:338:32: visibility
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_visibility_in_recordItem7962);
					visibility353=visibility();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, visibility353.getTree());

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:339:32: classMethod
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classMethod_in_recordItem8000);
					classMethod354=classMethod();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classMethod354.getTree());

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:340:32: classProperty
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classProperty_in_recordItem8033);
					classProperty355=classProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classProperty355.getTree());

					}
					break;
				case 4 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:341:32: constSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_constSection_in_recordItem8066);
					constSection356=constSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constSection356.getTree());

					}
					break;
				case 5 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:342:32: typeSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_typeSection_in_recordItem8099);
					typeSection357=typeSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeSection357.getTree());

					}
					break;
				case 6 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:343:32: recordField
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_recordField_in_recordItem8132);
					recordField358=recordField();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, recordField358.getTree());

					}
					break;
				case 7 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:344:32: ( 'class' )? varSection
					{
					root_0 = (Object)adaptor.nil();


					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:344:32: ( 'class' )?
					int alt112=2;
					int LA112_0 = input.LA(1);
					if ( (LA112_0==CLASS) ) {
						alt112=1;
					}
					switch (alt112) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:344:33: 'class'
							{
							string_literal359=(Token)match(input,CLASS,FOLLOW_CLASS_in_recordItem8166); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal359_tree = (Object)adaptor.create(string_literal359);
							adaptor.addChild(root_0, string_literal359_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_varSection_in_recordItem8170);
					varSection360=varSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, varSection360.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 84, recordItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordItem"


	public static class recordField_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordField"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:346:1: recordField : identList ':' typeDecl ( hintingDirective )* ( ';' )? -> identList ^( TkVariableType typeDecl ) ;
	public final DelphiParser.recordField_return recordField() throws RecognitionException {
		DelphiParser.recordField_return retval = new DelphiParser.recordField_return();
		retval.start = input.LT(1);
		int recordField_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal362=null;
		Token char_literal365=null;
		ParserRuleReturnScope identList361 =null;
		ParserRuleReturnScope typeDecl363 =null;
		ParserRuleReturnScope hintingDirective364 =null;

		Object char_literal362_tree=null;
		Object char_literal365_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_identList=new RewriteRuleSubtreeStream(adaptor,"rule identList");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:346:30: ( identList ':' typeDecl ( hintingDirective )* ( ';' )? -> identList ^( TkVariableType typeDecl ) )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:346:32: identList ':' typeDecl ( hintingDirective )* ( ';' )?
			{
			pushFollow(FOLLOW_identList_in_recordField8224);
			identList361=identList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identList.add(identList361.getTree());
			char_literal362=(Token)match(input,COLON,FOLLOW_COLON_in_recordField8226); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_COLON.add(char_literal362);

			pushFollow(FOLLOW_typeDecl_in_recordField8228);
			typeDecl363=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl363.getTree());
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:346:55: ( hintingDirective )*
			loop114:
			while (true) {
				int alt114=2;
				int LA114_0 = input.LA(1);
				if ( (LA114_0==DEPRECATED||LA114_0==EXPERIMENTAL||LA114_0==LIBRARY||LA114_0==PLATFORM) ) {
					alt114=1;
				}

				switch (alt114) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:346:56: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_recordField8231);
					hintingDirective364=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective364.getTree());
					}
					break;

				default :
					break loop114;
				}
			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:346:75: ( ';' )?
			int alt115=2;
			int LA115_0 = input.LA(1);
			if ( (LA115_0==SEMI) ) {
				alt115=1;
			}
			switch (alt115) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:346:76: ';'
					{
					char_literal365=(Token)match(input,SEMI,FOLLOW_SEMI_in_recordField8236); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMI.add(char_literal365);

					}
					break;

			}

			// AST REWRITE
			// elements: typeDecl, identList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 347:30: -> identList ^( TkVariableType typeDecl )
			{
				adaptor.addChild(root_0, stream_identList.nextTree());
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:347:43: ^( TkVariableType typeDecl )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableType, "TkVariableType"), root_1);
				adaptor.addChild(root_1, stream_typeDecl.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 85, recordField_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordField"


	public static class recordVariantField_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordVariantField"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:349:1: recordVariantField : identList ':' typeDecl ( hintingDirective )* ( ';' )? -> identList ^( TkVariableType typeDecl ) ;
	public final DelphiParser.recordVariantField_return recordVariantField() throws RecognitionException {
		DelphiParser.recordVariantField_return retval = new DelphiParser.recordVariantField_return();
		retval.start = input.LT(1);
		int recordVariantField_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal367=null;
		Token char_literal370=null;
		ParserRuleReturnScope identList366 =null;
		ParserRuleReturnScope typeDecl368 =null;
		ParserRuleReturnScope hintingDirective369 =null;

		Object char_literal367_tree=null;
		Object char_literal370_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_identList=new RewriteRuleSubtreeStream(adaptor,"rule identList");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:349:30: ( identList ':' typeDecl ( hintingDirective )* ( ';' )? -> identList ^( TkVariableType typeDecl ) )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:349:32: identList ':' typeDecl ( hintingDirective )* ( ';' )?
			{
			pushFollow(FOLLOW_identList_in_recordVariantField8326);
			identList366=identList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identList.add(identList366.getTree());
			char_literal367=(Token)match(input,COLON,FOLLOW_COLON_in_recordVariantField8328); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_COLON.add(char_literal367);

			pushFollow(FOLLOW_typeDecl_in_recordVariantField8330);
			typeDecl368=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl368.getTree());
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:349:55: ( hintingDirective )*
			loop116:
			while (true) {
				int alt116=2;
				int LA116_0 = input.LA(1);
				if ( (LA116_0==DEPRECATED||LA116_0==EXPERIMENTAL||LA116_0==LIBRARY||LA116_0==PLATFORM) ) {
					alt116=1;
				}

				switch (alt116) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:349:56: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_recordVariantField8333);
					hintingDirective369=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective369.getTree());
					}
					break;

				default :
					break loop116;
				}
			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:349:75: ( ';' )?
			int alt117=2;
			int LA117_0 = input.LA(1);
			if ( (LA117_0==SEMI) ) {
				alt117=1;
			}
			switch (alt117) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:349:76: ';'
					{
					char_literal370=(Token)match(input,SEMI,FOLLOW_SEMI_in_recordVariantField8338); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMI.add(char_literal370);

					}
					break;

			}

			// AST REWRITE
			// elements: typeDecl, identList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 350:30: -> identList ^( TkVariableType typeDecl )
			{
				adaptor.addChild(root_0, stream_identList.nextTree());
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:350:43: ^( TkVariableType typeDecl )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableType, "TkVariableType"), root_1);
				adaptor.addChild(root_1, stream_typeDecl.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 86, recordVariantField_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordVariantField"


	public static class recordVariantSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordVariantSection"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:1: recordVariantSection : 'case' ( ident ':' )? typeDecl 'of' ( recordVariant | ';' ) ( recordVariant | ';' )* ;
	public final DelphiParser.recordVariantSection_return recordVariantSection() throws RecognitionException {
		DelphiParser.recordVariantSection_return retval = new DelphiParser.recordVariantSection_return();
		retval.start = input.LT(1);
		int recordVariantSection_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal371=null;
		Token char_literal373=null;
		Token string_literal375=null;
		Token char_literal377=null;
		Token char_literal379=null;
		ParserRuleReturnScope ident372 =null;
		ParserRuleReturnScope typeDecl374 =null;
		ParserRuleReturnScope recordVariant376 =null;
		ParserRuleReturnScope recordVariant378 =null;

		Object string_literal371_tree=null;
		Object char_literal373_tree=null;
		Object string_literal375_tree=null;
		Object char_literal377_tree=null;
		Object char_literal379_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:30: ( 'case' ( ident ':' )? typeDecl 'of' ( recordVariant | ';' ) ( recordVariant | ';' )* )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:32: 'case' ( ident ':' )? typeDecl 'of' ( recordVariant | ';' ) ( recordVariant | ';' )*
			{
			root_0 = (Object)adaptor.nil();


			string_literal371=(Token)match(input,CASE,FOLLOW_CASE_in_recordVariantSection8425); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal371_tree = (Object)adaptor.create(string_literal371);
			adaptor.addChild(root_0, string_literal371_tree);
			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:39: ( ident ':' )?
			int alt118=2;
			switch ( input.LA(1) ) {
				case TkIdentifier:
					{
					int LA118_1 = input.LA(2);
					if ( (LA118_1==COLON) ) {
						alt118=1;
					}
					}
					break;
				case 198:
					{
					int LA118_2 = input.LA(2);
					if ( (LA118_2==TkIdentifier) ) {
						int LA118_15 = input.LA(3);
						if ( (LA118_15==COLON) ) {
							alt118=1;
						}
					}
					else if ( ((LA118_2 >= ABSOLUTE && LA118_2 <= ASSEMBLY)||LA118_2==AT||LA118_2==AUTOMATED||(LA118_2 >= BEGIN && LA118_2 <= CLASS)||(LA118_2 >= CONST && LA118_2 <= CONTINUE)||LA118_2==DEFAULT||(LA118_2 >= DEPRECATED && LA118_2 <= DO)||(LA118_2 >= DOWNTO && LA118_2 <= DYNAMIC)||(LA118_2 >= ELSE && LA118_2 <= END)||(LA118_2 >= EXCEPT && LA118_2 <= FUNCTION)||LA118_2==GOTO||LA118_2==HELPER||(LA118_2 >= IF && LA118_2 <= LABEL)||(LA118_2 >= LIBRARY && LA118_2 <= LOCAL)||LA118_2==MESSAGE||(LA118_2 >= MOD && LA118_2 <= NOT)||(LA118_2 >= OBJECT && LA118_2 <= PLATFORM)||LA118_2==POINTER||(LA118_2 >= PRIVATE && LA118_2 <= PUBLISHED)||LA118_2==RAISE||(LA118_2 >= READ && LA118_2 <= RESOURCESTRING)||(LA118_2 >= SAFECALL && LA118_2 <= SEALED)||(LA118_2 >= SET && LA118_2 <= SHR)||(LA118_2 >= STATIC && LA118_2 <= TYPE)||(LA118_2 >= UNIT && LA118_2 <= USES)||(LA118_2 >= VAR && LA118_2 <= WRITEONLY)||LA118_2==XOR) ) {
						int LA118_16 = input.LA(3);
						if ( (LA118_16==COLON) ) {
							alt118=1;
						}
					}
					}
					break;
				case OBJECT:
					{
					int LA118_3 = input.LA(2);
					if ( (LA118_3==COLON) ) {
						alt118=1;
					}
					}
					break;
				case POINTER:
					{
					int LA118_5 = input.LA(2);
					if ( (LA118_5==COLON) ) {
						alt118=1;
					}
					}
					break;
				case STRING:
					{
					int LA118_6 = input.LA(2);
					if ( (LA118_6==COLON) ) {
						alt118=1;
					}
					}
					break;
				case ANSISTRING:
					{
					int LA118_7 = input.LA(2);
					if ( (LA118_7==COLON) ) {
						alt118=1;
					}
					}
					break;
				case REFERENCE:
					{
					int LA118_8 = input.LA(2);
					if ( (LA118_8==COLON) ) {
						alt118=1;
					}
					}
					break;
				case VARIANT:
					{
					int LA118_9 = input.LA(2);
					if ( (LA118_9==COLON) ) {
						alt118=1;
					}
					}
					break;
				case TRUE:
					{
					int LA118_10 = input.LA(2);
					if ( (LA118_10==COLON) ) {
						alt118=1;
					}
					}
					break;
				case FALSE:
					{
					int LA118_11 = input.LA(2);
					if ( (LA118_11==COLON) ) {
						alt118=1;
					}
					}
					break;
				case IN:
					{
					int LA118_12 = input.LA(2);
					if ( (LA118_12==COLON) ) {
						alt118=1;
					}
					}
					break;
				case ABSOLUTE:
				case ADD:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DISPID:
				case DQ:
				case DW:
				case EXIT:
				case EXPORT:
				case FINAL:
				case HELPER:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OPERATOR:
				case OUT:
				case PRIVATE:
				case PUBLIC:
				case READ:
				case READONLY:
				case REGISTER:
				case REMOVE:
				case STATIC:
				case STORED:
				case STRICT:
				case UNSAFE:
				case VARARGS:
				case VIRTUAL:
				case WRITE:
				case WRITEONLY:
					{
					int LA118_13 = input.LA(2);
					if ( (LA118_13==COLON) ) {
						alt118=1;
					}
					}
					break;
			}
			switch (alt118) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:40: ident ':'
					{
					pushFollow(FOLLOW_ident_in_recordVariantSection8428);
					ident372=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident372.getTree());

					char_literal373=(Token)match(input,COLON,FOLLOW_COLON_in_recordVariantSection8430); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal373_tree = (Object)adaptor.create(char_literal373);
					adaptor.addChild(root_0, char_literal373_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_typeDecl_in_recordVariantSection8434);
			typeDecl374=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl374.getTree());

			string_literal375=(Token)match(input,OF,FOLLOW_OF_in_recordVariantSection8436); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal375_tree = (Object)adaptor.create(string_literal375);
			adaptor.addChild(root_0, string_literal375_tree);
			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:66: ( recordVariant | ';' )
			int alt119=2;
			int LA119_0 = input.LA(1);
			if ( (LA119_0==ABSOLUTE||(LA119_0 >= ADD && LA119_0 <= ANSISTRING)||LA119_0==AS||(LA119_0 >= AT && LA119_0 <= AT2)||LA119_0==BREAK||(LA119_0 >= COLON && LA119_0 <= COMMA)||(LA119_0 >= CONTAINS && LA119_0 <= DEFAULT)||LA119_0==DISPID||LA119_0==DIV||LA119_0==DOT||(LA119_0 >= DQ && LA119_0 <= DW)||LA119_0==EQUAL||LA119_0==EXIT||LA119_0==EXPORT||LA119_0==FALSE||LA119_0==FINAL||(LA119_0 >= FUNCTION && LA119_0 <= GE)||(LA119_0 >= GT && LA119_0 <= HELPER)||(LA119_0 >= IMPLEMENTS && LA119_0 <= INHERITED)||LA119_0==IS||LA119_0==LBRACK||LA119_0==LE||(LA119_0 >= LOCAL && LA119_0 <= NAME)||LA119_0==NIL||(LA119_0 >= NOT && LA119_0 <= OBJECT)||(LA119_0 >= OPERATOR && LA119_0 <= OUT)||(LA119_0 >= PLUS && LA119_0 <= PROCEDURE)||LA119_0==PUBLIC||LA119_0==QuotedString||(LA119_0 >= READ && LA119_0 <= READONLY)||(LA119_0 >= REFERENCE && LA119_0 <= REGISTER)||LA119_0==REMOVE||(LA119_0 >= SHL && LA119_0 <= STATIC)||(LA119_0 >= STORED && LA119_0 <= STRING)||LA119_0==TRUE||(LA119_0 >= TkHexNum && LA119_0 <= TkIntNum)||LA119_0==TkRealNum||LA119_0==UNSAFE||(LA119_0 >= VARARGS && LA119_0 <= VIRTUAL)||(LA119_0 >= WRITE && LA119_0 <= WRITEONLY)||(LA119_0 >= XOR && LA119_0 <= 210)) ) {
				alt119=1;
			}
			else if ( (LA119_0==SEMI) ) {
				alt119=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 119, 0, input);
				throw nvae;
			}

			switch (alt119) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:67: recordVariant
					{
					pushFollow(FOLLOW_recordVariant_in_recordVariantSection8439);
					recordVariant376=recordVariant();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, recordVariant376.getTree());

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:83: ';'
					{
					char_literal377=(Token)match(input,SEMI,FOLLOW_SEMI_in_recordVariantSection8443); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal377_tree = (Object)adaptor.create(char_literal377);
					adaptor.addChild(root_0, char_literal377_tree);
					}

					}
					break;

			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:88: ( recordVariant | ';' )*
			loop120:
			while (true) {
				int alt120=3;
				int LA120_0 = input.LA(1);
				if ( (LA120_0==ABSOLUTE||(LA120_0 >= ADD && LA120_0 <= ANSISTRING)||LA120_0==AS||(LA120_0 >= AT && LA120_0 <= AT2)||LA120_0==BREAK||(LA120_0 >= COLON && LA120_0 <= COMMA)||(LA120_0 >= CONTAINS && LA120_0 <= DEFAULT)||LA120_0==DISPID||LA120_0==DIV||LA120_0==DOT||(LA120_0 >= DQ && LA120_0 <= DW)||LA120_0==EQUAL||LA120_0==EXIT||LA120_0==EXPORT||LA120_0==FALSE||LA120_0==FINAL||(LA120_0 >= FUNCTION && LA120_0 <= GE)||(LA120_0 >= GT && LA120_0 <= HELPER)||(LA120_0 >= IMPLEMENTS && LA120_0 <= INHERITED)||LA120_0==IS||LA120_0==LBRACK||LA120_0==LE||(LA120_0 >= LOCAL && LA120_0 <= NAME)||LA120_0==NIL||(LA120_0 >= NOT && LA120_0 <= OBJECT)||(LA120_0 >= OPERATOR && LA120_0 <= OUT)||(LA120_0 >= PLUS && LA120_0 <= PROCEDURE)||LA120_0==PUBLIC||LA120_0==QuotedString||(LA120_0 >= READ && LA120_0 <= READONLY)||(LA120_0 >= REFERENCE && LA120_0 <= REGISTER)||LA120_0==REMOVE||(LA120_0 >= SHL && LA120_0 <= STATIC)||(LA120_0 >= STORED && LA120_0 <= STRING)||LA120_0==TRUE||(LA120_0 >= TkHexNum && LA120_0 <= TkIntNum)||LA120_0==TkRealNum||LA120_0==UNSAFE||(LA120_0 >= VARARGS && LA120_0 <= VIRTUAL)||(LA120_0 >= WRITE && LA120_0 <= WRITEONLY)||(LA120_0 >= XOR && LA120_0 <= 210)) ) {
					alt120=1;
				}
				else if ( (LA120_0==SEMI) ) {
					alt120=2;
				}

				switch (alt120) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:89: recordVariant
					{
					pushFollow(FOLLOW_recordVariant_in_recordVariantSection8447);
					recordVariant378=recordVariant();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, recordVariant378.getTree());

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:105: ';'
					{
					char_literal379=(Token)match(input,SEMI,FOLLOW_SEMI_in_recordVariantSection8451); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal379_tree = (Object)adaptor.create(char_literal379);
					adaptor.addChild(root_0, char_literal379_tree);
					}

					}
					break;

				default :
					break loop120;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 87, recordVariantSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordVariantSection"


	public static class recordVariant_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordVariant"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:1: recordVariant : constExpression ( ',' constExpression )* ':' '(' ( recordVariantField )* ')' ;
	public final DelphiParser.recordVariant_return recordVariant() throws RecognitionException {
		DelphiParser.recordVariant_return retval = new DelphiParser.recordVariant_return();
		retval.start = input.LT(1);
		int recordVariant_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal381=null;
		Token char_literal383=null;
		Token char_literal384=null;
		Token char_literal386=null;
		ParserRuleReturnScope constExpression380 =null;
		ParserRuleReturnScope constExpression382 =null;
		ParserRuleReturnScope recordVariantField385 =null;

		Object char_literal381_tree=null;
		Object char_literal383_tree=null;
		Object char_literal384_tree=null;
		Object char_literal386_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:30: ( constExpression ( ',' constExpression )* ':' '(' ( recordVariantField )* ')' )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:32: constExpression ( ',' constExpression )* ':' '(' ( recordVariantField )* ')'
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_constExpression_in_recordVariant8505);
			constExpression380=constExpression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression380.getTree());

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:48: ( ',' constExpression )*
			loop121:
			while (true) {
				int alt121=2;
				int LA121_0 = input.LA(1);
				if ( (LA121_0==COMMA) ) {
					alt121=1;
				}

				switch (alt121) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:49: ',' constExpression
					{
					char_literal381=(Token)match(input,COMMA,FOLLOW_COMMA_in_recordVariant8508); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal381_tree = (Object)adaptor.create(char_literal381);
					adaptor.addChild(root_0, char_literal381_tree);
					}

					pushFollow(FOLLOW_constExpression_in_recordVariant8510);
					constExpression382=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression382.getTree());

					}
					break;

				default :
					break loop121;
				}
			}

			char_literal383=(Token)match(input,COLON,FOLLOW_COLON_in_recordVariant8514); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal383_tree = (Object)adaptor.create(char_literal383);
			adaptor.addChild(root_0, char_literal383_tree);
			}

			char_literal384=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_recordVariant8516); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal384_tree = (Object)adaptor.create(char_literal384);
			adaptor.addChild(root_0, char_literal384_tree);
			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:79: ( recordVariantField )*
			loop122:
			while (true) {
				int alt122=2;
				int LA122_0 = input.LA(1);
				if ( (LA122_0==ABSOLUTE||LA122_0==ADD||LA122_0==ANSISTRING||LA122_0==AT||LA122_0==BREAK||(LA122_0 >= CONTAINS && LA122_0 <= CONTINUE)||LA122_0==DEFAULT||LA122_0==DISPID||(LA122_0 >= DQ && LA122_0 <= DW)||LA122_0==EXIT||LA122_0==EXPORT||LA122_0==FALSE||LA122_0==FINAL||LA122_0==HELPER||(LA122_0 >= IMPLEMENTS && LA122_0 <= INDEX)||LA122_0==LOCAL||LA122_0==MESSAGE||LA122_0==NAME||LA122_0==OBJECT||LA122_0==OPERATOR||LA122_0==OUT||LA122_0==POINTER||LA122_0==PRIVATE||LA122_0==PUBLIC||(LA122_0 >= READ && LA122_0 <= READONLY)||(LA122_0 >= REFERENCE && LA122_0 <= REGISTER)||LA122_0==REMOVE||LA122_0==STATIC||(LA122_0 >= STORED && LA122_0 <= STRING)||LA122_0==TRUE||LA122_0==TkIdentifier||LA122_0==UNSAFE||(LA122_0 >= VARARGS && LA122_0 <= VIRTUAL)||(LA122_0 >= WRITE && LA122_0 <= WRITEONLY)||LA122_0==198) ) {
					alt122=1;
				}

				switch (alt122) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:80: recordVariantField
					{
					pushFollow(FOLLOW_recordVariantField_in_recordVariant8519);
					recordVariantField385=recordVariantField();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, recordVariantField385.getTree());

					}
					break;

				default :
					break loop122;
				}
			}

			char_literal386=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_recordVariant8523); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal386_tree = (Object)adaptor.create(char_literal386);
			adaptor.addChild(root_0, char_literal386_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 88, recordVariant_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordVariant"


	public static class recordHelperDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordHelperDecl"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:1: recordHelperDecl : 'record' 'helper' 'for' typeId ( recordHelperItem )* 'end' ;
	public final DelphiParser.recordHelperDecl_return recordHelperDecl() throws RecognitionException {
		DelphiParser.recordHelperDecl_return retval = new DelphiParser.recordHelperDecl_return();
		retval.start = input.LT(1);
		int recordHelperDecl_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal387=null;
		Token string_literal388=null;
		Token string_literal389=null;
		Token string_literal392=null;
		ParserRuleReturnScope typeId390 =null;
		ParserRuleReturnScope recordHelperItem391 =null;

		Object string_literal387_tree=null;
		Object string_literal388_tree=null;
		Object string_literal389_tree=null;
		Object string_literal392_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:30: ( 'record' 'helper' 'for' typeId ( recordHelperItem )* 'end' )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:32: 'record' 'helper' 'for' typeId ( recordHelperItem )* 'end'
			{
			root_0 = (Object)adaptor.nil();


			string_literal387=(Token)match(input,RECORD,FOLLOW_RECORD_in_recordHelperDecl8575); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal387_tree = (Object)adaptor.create(string_literal387);
			adaptor.addChild(root_0, string_literal387_tree);
			}

			string_literal388=(Token)match(input,HELPER,FOLLOW_HELPER_in_recordHelperDecl8577); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal388_tree = (Object)adaptor.create(string_literal388);
			adaptor.addChild(root_0, string_literal388_tree);
			}

			string_literal389=(Token)match(input,FOR,FOLLOW_FOR_in_recordHelperDecl8579); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal389_tree = (Object)adaptor.create(string_literal389);
			adaptor.addChild(root_0, string_literal389_tree);
			}

			pushFollow(FOLLOW_typeId_in_recordHelperDecl8581);
			typeId390=typeId();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, typeId390.getTree());

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:63: ( recordHelperItem )*
			loop123:
			while (true) {
				int alt123=2;
				int LA123_0 = input.LA(1);
				if ( (LA123_0==AUTOMATED||LA123_0==CLASS||(LA123_0 >= CONST && LA123_0 <= CONSTRUCTOR)||LA123_0==DESTRUCTOR||LA123_0==FUNCTION||LA123_0==LBRACK||LA123_0==OPERATOR||(LA123_0 >= PRIVATE && LA123_0 <= PROCEDURE)||(LA123_0 >= PROPERTY && LA123_0 <= PUBLISHED)||LA123_0==RESOURCESTRING||LA123_0==STRICT) ) {
					alt123=1;
				}

				switch (alt123) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:64: recordHelperItem
					{
					pushFollow(FOLLOW_recordHelperItem_in_recordHelperDecl8584);
					recordHelperItem391=recordHelperItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, recordHelperItem391.getTree());

					}
					break;

				default :
					break loop123;
				}
			}

			string_literal392=(Token)match(input,END,FOLLOW_END_in_recordHelperDecl8588); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal392_tree = (Object)adaptor.create(string_literal392);
			adaptor.addChild(root_0, string_literal392_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 89, recordHelperDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordHelperDecl"


	public static class recordHelperItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordHelperItem"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:1: recordHelperItem : ( visibility | constSection | classMethod | classProperty );
	public final DelphiParser.recordHelperItem_return recordHelperItem() throws RecognitionException {
		DelphiParser.recordHelperItem_return retval = new DelphiParser.recordHelperItem_return();
		retval.start = input.LT(1);
		int recordHelperItem_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope visibility393 =null;
		ParserRuleReturnScope constSection394 =null;
		ParserRuleReturnScope classMethod395 =null;
		ParserRuleReturnScope classProperty396 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:30: ( visibility | constSection | classMethod | classProperty )
			int alt124=4;
			switch ( input.LA(1) ) {
			case AUTOMATED:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case PUBLISHED:
			case STRICT:
				{
				alt124=1;
				}
				break;
			case CONST:
			case RESOURCESTRING:
				{
				alt124=2;
				}
				break;
			case LBRACK:
				{
				int LA124_8 = input.LA(2);
				if ( (synpred176_Delphi()) ) {
					alt124=3;
				}
				else if ( (true) ) {
					alt124=4;
				}

				}
				break;
			case CLASS:
				{
				int LA124_9 = input.LA(2);
				if ( (synpred176_Delphi()) ) {
					alt124=3;
				}
				else if ( (true) ) {
					alt124=4;
				}

				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case FUNCTION:
			case OPERATOR:
			case PROCEDURE:
				{
				alt124=3;
				}
				break;
			case PROPERTY:
				{
				alt124=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 124, 0, input);
				throw nvae;
			}
			switch (alt124) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:32: visibility
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_visibility_in_recordHelperItem8637);
					visibility393=visibility();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, visibility393.getTree());

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:32: constSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_constSection_in_recordHelperItem8670);
					constSection394=constSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constSection394.getTree());

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:360:32: classMethod
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classMethod_in_recordHelperItem8703);
					classMethod395=classMethod();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classMethod395.getTree());

					}
					break;
				case 4 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:32: classProperty
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classProperty_in_recordHelperItem8736);
					classProperty396=classProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classProperty396.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 90, recordHelperItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordHelperItem"


	public static class classMethod_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classMethod"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:1: classMethod : ( ( customAttribute )? ( 'class' )? methodKey ident ( genericDefinition )? ( formalParameterSection )? ';' ( methodDirective )* -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( methodDirective )* ) | ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( methodDirective )* -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? ^( TkFunctionReturn typeDecl ) ( methodDirective )* ) | ( customAttribute )? ( 'class' )? 'operator' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( methodDirective )* -> ( customAttribute )? ( 'class' )? ^( 'operator' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? typeDecl ( methodDirective )* ) | ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? '.' ident '=' ident ';' | ( customAttribute )? ( 'class' )? 'procedure' ident ( genericDefinition )? '.' ident '=' ident ';' );
	public final DelphiParser.classMethod_return classMethod() throws RecognitionException {
		DelphiParser.classMethod_return retval = new DelphiParser.classMethod_return();
		retval.start = input.LT(1);
		int classMethod_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal398=null;
		Token char_literal403=null;
		Token string_literal406=null;
		Token string_literal407=null;
		Token char_literal411=null;
		Token char_literal414=null;
		Token string_literal417=null;
		Token string_literal418=null;
		Token char_literal422=null;
		Token char_literal425=null;
		Token string_literal428=null;
		Token string_literal429=null;
		Token char_literal432=null;
		Token char_literal434=null;
		Token char_literal436=null;
		Token string_literal438=null;
		Token string_literal439=null;
		Token char_literal442=null;
		Token char_literal444=null;
		Token char_literal446=null;
		ParserRuleReturnScope customAttribute397 =null;
		ParserRuleReturnScope methodKey399 =null;
		ParserRuleReturnScope ident400 =null;
		ParserRuleReturnScope genericDefinition401 =null;
		ParserRuleReturnScope formalParameterSection402 =null;
		ParserRuleReturnScope methodDirective404 =null;
		ParserRuleReturnScope customAttribute405 =null;
		ParserRuleReturnScope ident408 =null;
		ParserRuleReturnScope genericDefinition409 =null;
		ParserRuleReturnScope formalParameterSection410 =null;
		ParserRuleReturnScope customAttribute412 =null;
		ParserRuleReturnScope typeDecl413 =null;
		ParserRuleReturnScope methodDirective415 =null;
		ParserRuleReturnScope customAttribute416 =null;
		ParserRuleReturnScope ident419 =null;
		ParserRuleReturnScope genericDefinition420 =null;
		ParserRuleReturnScope formalParameterSection421 =null;
		ParserRuleReturnScope customAttribute423 =null;
		ParserRuleReturnScope typeDecl424 =null;
		ParserRuleReturnScope methodDirective426 =null;
		ParserRuleReturnScope customAttribute427 =null;
		ParserRuleReturnScope ident430 =null;
		ParserRuleReturnScope genericDefinition431 =null;
		ParserRuleReturnScope ident433 =null;
		ParserRuleReturnScope ident435 =null;
		ParserRuleReturnScope customAttribute437 =null;
		ParserRuleReturnScope ident440 =null;
		ParserRuleReturnScope genericDefinition441 =null;
		ParserRuleReturnScope ident443 =null;
		ParserRuleReturnScope ident445 =null;

		Object string_literal398_tree=null;
		Object char_literal403_tree=null;
		Object string_literal406_tree=null;
		Object string_literal407_tree=null;
		Object char_literal411_tree=null;
		Object char_literal414_tree=null;
		Object string_literal417_tree=null;
		Object string_literal418_tree=null;
		Object char_literal422_tree=null;
		Object char_literal425_tree=null;
		Object string_literal428_tree=null;
		Object string_literal429_tree=null;
		Object char_literal432_tree=null;
		Object char_literal434_tree=null;
		Object char_literal436_tree=null;
		Object string_literal438_tree=null;
		Object string_literal439_tree=null;
		Object char_literal442_tree=null;
		Object char_literal444_tree=null;
		Object char_literal446_tree=null;
		RewriteRuleTokenStream stream_OPERATOR=new RewriteRuleTokenStream(adaptor,"token OPERATOR");
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
		RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_methodKey=new RewriteRuleSubtreeStream(adaptor,"rule methodKey");
		RewriteRuleSubtreeStream stream_genericDefinition=new RewriteRuleSubtreeStream(adaptor,"rule genericDefinition");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_formalParameterSection=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterSection");
		RewriteRuleSubtreeStream stream_methodDirective=new RewriteRuleSubtreeStream(adaptor,"rule methodDirective");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:30: ( ( customAttribute )? ( 'class' )? methodKey ident ( genericDefinition )? ( formalParameterSection )? ';' ( methodDirective )* -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( methodDirective )* ) | ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( methodDirective )* -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? ^( TkFunctionReturn typeDecl ) ( methodDirective )* ) | ( customAttribute )? ( 'class' )? 'operator' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( methodDirective )* -> ( customAttribute )? ( 'class' )? ^( 'operator' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? typeDecl ( methodDirective )* ) | ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? '.' ident '=' ident ';' | ( customAttribute )? ( 'class' )? 'procedure' ident ( genericDefinition )? '.' ident '=' ident ';' )
			int alt148=5;
			switch ( input.LA(1) ) {
			case LBRACK:
				{
				int LA148_1 = input.LA(2);
				if ( (synpred182_Delphi()) ) {
					alt148=1;
				}
				else if ( (synpred189_Delphi()) ) {
					alt148=2;
				}
				else if ( (synpred196_Delphi()) ) {
					alt148=3;
				}
				else if ( (synpred200_Delphi()) ) {
					alt148=4;
				}
				else if ( (true) ) {
					alt148=5;
				}

				}
				break;
			case CLASS:
				{
				int LA148_2 = input.LA(2);
				if ( (synpred182_Delphi()) ) {
					alt148=1;
				}
				else if ( (synpred189_Delphi()) ) {
					alt148=2;
				}
				else if ( (synpred196_Delphi()) ) {
					alt148=3;
				}
				else if ( (synpred200_Delphi()) ) {
					alt148=4;
				}
				else if ( (true) ) {
					alt148=5;
				}

				}
				break;
			case PROCEDURE:
				{
				int LA148_3 = input.LA(2);
				if ( (synpred182_Delphi()) ) {
					alt148=1;
				}
				else if ( (true) ) {
					alt148=5;
				}

				}
				break;
			case FUNCTION:
				{
				int LA148_4 = input.LA(2);
				if ( (synpred189_Delphi()) ) {
					alt148=2;
				}
				else if ( (synpred200_Delphi()) ) {
					alt148=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 148, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case OPERATOR:
				{
				alt148=3;
				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
				{
				alt148=1;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 148, 0, input);
				throw nvae;
			}
			switch (alt148) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:32: ( customAttribute )? ( 'class' )? methodKey ident ( genericDefinition )? ( formalParameterSection )? ';' ( methodDirective )*
					{
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:32: ( customAttribute )?
					int alt125=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							alt125=1;
							}
							break;
						case CLASS:
							{
							int LA125_2 = input.LA(2);
							if ( (synpred177_Delphi()) ) {
								alt125=1;
							}
							}
							break;
						case CONSTRUCTOR:
						case DESTRUCTOR:
						case PROCEDURE:
							{
							int LA125_3 = input.LA(2);
							if ( (synpred177_Delphi()) ) {
								alt125=1;
							}
							}
							break;
					}
					switch (alt125) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_classMethod8791);
							customAttribute397=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute397.getTree());
							}
							break;

					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:51: ( 'class' )?
					int alt126=2;
					int LA126_0 = input.LA(1);
					if ( (LA126_0==CLASS) ) {
						alt126=1;
					}
					switch (alt126) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:52: 'class'
							{
							string_literal398=(Token)match(input,CLASS,FOLLOW_CLASS_in_classMethod8796); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_CLASS.add(string_literal398);

							}
							break;

					}

					pushFollow(FOLLOW_methodKey_in_classMethod8800);
					methodKey399=methodKey();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodKey.add(methodKey399.getTree());
					pushFollow(FOLLOW_ident_in_classMethod8802);
					ident400=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident400.getTree());
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:78: ( genericDefinition )?
					int alt127=2;
					int LA127_0 = input.LA(1);
					if ( (LA127_0==LT) ) {
						alt127=1;
					}
					switch (alt127) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:79: genericDefinition
							{
							pushFollow(FOLLOW_genericDefinition_in_classMethod8805);
							genericDefinition401=genericDefinition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_genericDefinition.add(genericDefinition401.getTree());
							}
							break;

					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:99: ( formalParameterSection )?
					int alt128=2;
					int LA128_0 = input.LA(1);
					if ( (LA128_0==LPAREN) ) {
						alt128=1;
					}
					switch (alt128) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:100: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_classMethod8810);
							formalParameterSection402=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection402.getTree());
							}
							break;

					}

					char_literal403=(Token)match(input,SEMI,FOLLOW_SEMI_in_classMethod8814); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMI.add(char_literal403);

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:129: ( methodDirective )*
					loop129:
					while (true) {
						int alt129=2;
						switch ( input.LA(1) ) {
						case MESSAGE:
							{
							int LA129_2 = input.LA(2);
							if ( (LA129_2==ABSOLUTE||(LA129_2 >= ADD && LA129_2 <= ANSISTRING)||LA129_2==AS||(LA129_2 >= AT && LA129_2 <= AT2)||LA129_2==BREAK||(LA129_2 >= CONTAINS && LA129_2 <= DEFAULT)||LA129_2==DISPID||LA129_2==DIV||LA129_2==DOT||(LA129_2 >= DQ && LA129_2 <= DW)||LA129_2==EQUAL||LA129_2==EXIT||LA129_2==EXPORT||LA129_2==FALSE||LA129_2==FINAL||(LA129_2 >= FUNCTION && LA129_2 <= GE)||(LA129_2 >= GT && LA129_2 <= HELPER)||(LA129_2 >= IMPLEMENTS && LA129_2 <= INHERITED)||LA129_2==IS||LA129_2==LBRACK||LA129_2==LE||(LA129_2 >= LOCAL && LA129_2 <= NAME)||LA129_2==NIL||(LA129_2 >= NOT && LA129_2 <= OBJECT)||(LA129_2 >= OPERATOR && LA129_2 <= OUT)||(LA129_2 >= PLUS && LA129_2 <= PROCEDURE)||LA129_2==PUBLIC||LA129_2==QuotedString||(LA129_2 >= READ && LA129_2 <= READONLY)||(LA129_2 >= REFERENCE && LA129_2 <= REGISTER)||LA129_2==REMOVE||LA129_2==SEMI||(LA129_2 >= SHL && LA129_2 <= STATIC)||(LA129_2 >= STORED && LA129_2 <= STRING)||LA129_2==TRUE||(LA129_2 >= TkHexNum && LA129_2 <= TkIntNum)||LA129_2==TkRealNum||LA129_2==UNSAFE||(LA129_2 >= VARARGS && LA129_2 <= VIRTUAL)||(LA129_2 >= WRITE && LA129_2 <= WRITEONLY)||(LA129_2 >= XOR && LA129_2 <= 210)) ) {
								alt129=1;
							}

							}
							break;
						case ABSTRACT:
						case ASSEMBLER:
						case CDECL:
						case DEPRECATED:
						case DYNAMIC:
						case EXPERIMENTAL:
						case EXTERNAL:
						case FAR:
						case INLINE:
						case LIBRARY:
						case NEAR:
						case OVERLOAD:
						case OVERRIDE:
						case PASCAL:
						case PLATFORM:
						case REINTRODUCE:
						case SAFECALL:
						case STDCALL:
							{
							alt129=1;
							}
							break;
						case STATIC:
							{
							int LA129_4 = input.LA(2);
							if ( (LA129_4==SEMI) ) {
								alt129=1;
							}

							}
							break;
						case VIRTUAL:
							{
							int LA129_5 = input.LA(2);
							if ( (LA129_5==SEMI) ) {
								alt129=1;
							}

							}
							break;
						case FINAL:
							{
							int LA129_6 = input.LA(2);
							if ( (LA129_6==SEMI) ) {
								alt129=1;
							}

							}
							break;
						case REGISTER:
							{
							int LA129_7 = input.LA(2);
							if ( (LA129_7==SEMI) ) {
								alt129=1;
							}

							}
							break;
						case EXPORT:
							{
							int LA129_8 = input.LA(2);
							if ( (LA129_8==SEMI) ) {
								alt129=1;
							}

							}
							break;
						case LOCAL:
							{
							int LA129_9 = input.LA(2);
							if ( (LA129_9==SEMI) ) {
								alt129=1;
							}

							}
							break;
						case DISPID:
							{
							int LA129_10 = input.LA(2);
							if ( (LA129_10==ABSOLUTE||(LA129_10 >= ADD && LA129_10 <= ANSISTRING)||LA129_10==AS||(LA129_10 >= AT && LA129_10 <= AT2)||LA129_10==BREAK||(LA129_10 >= CONTAINS && LA129_10 <= DEFAULT)||LA129_10==DISPID||LA129_10==DIV||LA129_10==DOT||(LA129_10 >= DQ && LA129_10 <= DW)||LA129_10==EQUAL||LA129_10==EXIT||LA129_10==EXPORT||LA129_10==FALSE||LA129_10==FINAL||(LA129_10 >= FUNCTION && LA129_10 <= GE)||(LA129_10 >= GT && LA129_10 <= HELPER)||(LA129_10 >= IMPLEMENTS && LA129_10 <= INHERITED)||LA129_10==IS||LA129_10==LBRACK||LA129_10==LE||(LA129_10 >= LOCAL && LA129_10 <= NAME)||LA129_10==NIL||(LA129_10 >= NOT && LA129_10 <= OBJECT)||(LA129_10 >= OPERATOR && LA129_10 <= OUT)||(LA129_10 >= PLUS && LA129_10 <= PROCEDURE)||LA129_10==PUBLIC||LA129_10==QuotedString||(LA129_10 >= READ && LA129_10 <= READONLY)||(LA129_10 >= REFERENCE && LA129_10 <= REGISTER)||LA129_10==REMOVE||LA129_10==SEMI||(LA129_10 >= SHL && LA129_10 <= STATIC)||(LA129_10 >= STORED && LA129_10 <= STRING)||LA129_10==TRUE||(LA129_10 >= TkHexNum && LA129_10 <= TkIntNum)||LA129_10==TkRealNum||LA129_10==UNSAFE||(LA129_10 >= VARARGS && LA129_10 <= VIRTUAL)||(LA129_10 >= WRITE && LA129_10 <= WRITEONLY)||(LA129_10 >= XOR && LA129_10 <= 210)) ) {
								alt129=1;
							}

							}
							break;
						case VARARGS:
							{
							int LA129_11 = input.LA(2);
							if ( (LA129_11==SEMI) ) {
								alt129=1;
							}

							}
							break;
						}
						switch (alt129) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:130: methodDirective
							{
							pushFollow(FOLLOW_methodDirective_in_classMethod8817);
							methodDirective404=methodDirective();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_methodDirective.add(methodDirective404.getTree());
							}
							break;

						default :
							break loop129;
						}
					}

					// AST REWRITE
					// elements: methodDirective, customAttribute, formalParameterSection, ident, genericDefinition, CLASS, methodKey
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 364:30: -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( methodDirective )* )
					{
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:34: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_0, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:53: ( 'class' )?
						if ( stream_CLASS.hasNext() ) {
							adaptor.addChild(root_0, stream_CLASS.nextNode());
						}
						stream_CLASS.reset();

						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:64: ^( methodKey ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( methodDirective )* )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_methodKey.nextNode(), root_1);
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:76: ^( TkFunctionName ident )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_ident.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:100: ( genericDefinition )?
						if ( stream_genericDefinition.hasNext() ) {
							adaptor.addChild(root_1, stream_genericDefinition.nextTree());
						}
						stream_genericDefinition.reset();

						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:121: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:138: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:165: ( methodDirective )*
						while ( stream_methodDirective.hasNext() ) {
							adaptor.addChild(root_1, stream_methodDirective.nextTree());
						}
						stream_methodDirective.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:32: ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( methodDirective )*
					{
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:32: ( customAttribute )?
					int alt130=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							alt130=1;
							}
							break;
						case CLASS:
							{
							int LA130_2 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt130=1;
							}
							}
							break;
						case FUNCTION:
							{
							int LA130_3 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt130=1;
							}
							}
							break;
					}
					switch (alt130) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_classMethod8925);
							customAttribute405=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute405.getTree());
							}
							break;

					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:51: ( 'class' )?
					int alt131=2;
					int LA131_0 = input.LA(1);
					if ( (LA131_0==CLASS) ) {
						alt131=1;
					}
					switch (alt131) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:52: 'class'
							{
							string_literal406=(Token)match(input,CLASS,FOLLOW_CLASS_in_classMethod8930); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_CLASS.add(string_literal406);

							}
							break;

					}

					string_literal407=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_classMethod8934); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_FUNCTION.add(string_literal407);

					pushFollow(FOLLOW_ident_in_classMethod8936);
					ident408=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident408.getTree());
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:79: ( genericDefinition )?
					int alt132=2;
					int LA132_0 = input.LA(1);
					if ( (LA132_0==LT) ) {
						alt132=1;
					}
					switch (alt132) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:80: genericDefinition
							{
							pushFollow(FOLLOW_genericDefinition_in_classMethod8939);
							genericDefinition409=genericDefinition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_genericDefinition.add(genericDefinition409.getTree());
							}
							break;

					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:100: ( formalParameterSection )?
					int alt133=2;
					int LA133_0 = input.LA(1);
					if ( (LA133_0==LPAREN) ) {
						alt133=1;
					}
					switch (alt133) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:101: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_classMethod8944);
							formalParameterSection410=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection410.getTree());
							}
							break;

					}

					char_literal411=(Token)match(input,COLON,FOLLOW_COLON_in_classMethod8948); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(char_literal411);

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:130: ( customAttribute )?
					int alt134=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							int LA134_1 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case PACKED:
							{
							int LA134_2 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case ARRAY:
							{
							int LA134_3 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case SET:
							{
							int LA134_4 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case FILE:
							{
							int LA134_5 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case CLASS:
							{
							int LA134_6 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case DISPINTERFACE:
						case INTERFACE:
							{
							int LA134_7 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case OBJECT:
							{
							int LA134_8 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case RECORD:
							{
							int LA134_9 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case POINTER2:
							{
							int LA134_10 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case POINTER:
							{
							int LA134_11 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case STRING:
							{
							int LA134_12 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case TYPE:
							{
							int LA134_13 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case ANSISTRING:
							{
							int LA134_14 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case FUNCTION:
							{
							int LA134_15 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case PROCEDURE:
							{
							int LA134_16 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case REFERENCE:
							{
							int LA134_17 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case VARIANT:
							{
							int LA134_18 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case LPAREN:
							{
							int LA134_19 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case AT2:
							{
							int LA134_20 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case 199:
							{
							int LA134_21 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case NOT:
							{
							int LA134_22 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case PLUS:
							{
							int LA134_23 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case MINUS:
							{
							int LA134_24 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case TkRealNum:
							{
							int LA134_25 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case TkHexNum:
						case TkIntNum:
							{
							int LA134_26 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case TRUE:
							{
							int LA134_27 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case FALSE:
							{
							int LA134_28 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case NIL:
							{
							int LA134_29 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case 210:
							{
							int LA134_30 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case ControlChar:
							{
							int LA134_31 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case QuotedString:
							{
							int LA134_32 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case 203:
							{
							int LA134_33 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case INHERITED:
							{
							int LA134_34 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case TkIdentifier:
							{
							int LA134_35 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case 198:
							{
							int LA134_36 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case IN:
							{
							int LA134_37 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case 209:
							{
							int LA134_38 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case DOT:
							{
							int LA134_39 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case LT:
							{
							int LA134_40 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case AND:
						case AS:
						case DIV:
						case MOD:
						case OR:
						case SHL:
						case SHR:
						case SLASH:
						case STAR:
						case XOR:
						case 200:
						case 201:
						case 202:
						case 204:
						case 205:
						case 206:
						case 207:
						case 208:
							{
							int LA134_41 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case ABSOLUTE:
						case ADD:
						case AT:
						case BREAK:
						case CONTAINS:
						case CONTINUE:
						case DEFAULT:
						case DISPID:
						case DQ:
						case DW:
						case EXIT:
						case EXPORT:
						case FINAL:
						case HELPER:
						case IMPLEMENTS:
						case INDEX:
						case LOCAL:
						case MESSAGE:
						case NAME:
						case OPERATOR:
						case OUT:
						case PRIVATE:
						case PUBLIC:
						case READ:
						case READONLY:
						case REGISTER:
						case REMOVE:
						case STATIC:
						case STORED:
						case STRICT:
						case UNSAFE:
						case VARARGS:
						case VIRTUAL:
						case WRITE:
						case WRITEONLY:
							{
							int LA134_42 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case EQUAL:
							{
							int LA134_43 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case GE:
						case GT:
						case IS:
						case LE:
						case NOT_EQUAL:
							{
							int LA134_44 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
						case DOTDOT:
							{
							int LA134_45 = input.LA(2);
							if ( (synpred187_Delphi()) ) {
								alt134=1;
							}
							}
							break;
					}
					switch (alt134) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:131: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_classMethod8951);
							customAttribute412=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute412.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_typeDecl_in_classMethod8955);
					typeDecl413=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl413.getTree());
					char_literal414=(Token)match(input,SEMI,FOLLOW_SEMI_in_classMethod8957); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMI.add(char_literal414);

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:162: ( methodDirective )*
					loop135:
					while (true) {
						int alt135=2;
						switch ( input.LA(1) ) {
						case MESSAGE:
							{
							int LA135_2 = input.LA(2);
							if ( (LA135_2==ABSOLUTE||(LA135_2 >= ADD && LA135_2 <= ANSISTRING)||LA135_2==AS||(LA135_2 >= AT && LA135_2 <= AT2)||LA135_2==BREAK||(LA135_2 >= CONTAINS && LA135_2 <= DEFAULT)||LA135_2==DISPID||LA135_2==DIV||LA135_2==DOT||(LA135_2 >= DQ && LA135_2 <= DW)||LA135_2==EQUAL||LA135_2==EXIT||LA135_2==EXPORT||LA135_2==FALSE||LA135_2==FINAL||(LA135_2 >= FUNCTION && LA135_2 <= GE)||(LA135_2 >= GT && LA135_2 <= HELPER)||(LA135_2 >= IMPLEMENTS && LA135_2 <= INHERITED)||LA135_2==IS||LA135_2==LBRACK||LA135_2==LE||(LA135_2 >= LOCAL && LA135_2 <= NAME)||LA135_2==NIL||(LA135_2 >= NOT && LA135_2 <= OBJECT)||(LA135_2 >= OPERATOR && LA135_2 <= OUT)||(LA135_2 >= PLUS && LA135_2 <= PROCEDURE)||LA135_2==PUBLIC||LA135_2==QuotedString||(LA135_2 >= READ && LA135_2 <= READONLY)||(LA135_2 >= REFERENCE && LA135_2 <= REGISTER)||LA135_2==REMOVE||LA135_2==SEMI||(LA135_2 >= SHL && LA135_2 <= STATIC)||(LA135_2 >= STORED && LA135_2 <= STRING)||LA135_2==TRUE||(LA135_2 >= TkHexNum && LA135_2 <= TkIntNum)||LA135_2==TkRealNum||LA135_2==UNSAFE||(LA135_2 >= VARARGS && LA135_2 <= VIRTUAL)||(LA135_2 >= WRITE && LA135_2 <= WRITEONLY)||(LA135_2 >= XOR && LA135_2 <= 210)) ) {
								alt135=1;
							}

							}
							break;
						case ABSTRACT:
						case ASSEMBLER:
						case CDECL:
						case DEPRECATED:
						case DYNAMIC:
						case EXPERIMENTAL:
						case EXTERNAL:
						case FAR:
						case INLINE:
						case LIBRARY:
						case NEAR:
						case OVERLOAD:
						case OVERRIDE:
						case PASCAL:
						case PLATFORM:
						case REINTRODUCE:
						case SAFECALL:
						case STDCALL:
							{
							alt135=1;
							}
							break;
						case STATIC:
							{
							int LA135_4 = input.LA(2);
							if ( (LA135_4==SEMI) ) {
								alt135=1;
							}

							}
							break;
						case VIRTUAL:
							{
							int LA135_5 = input.LA(2);
							if ( (LA135_5==SEMI) ) {
								alt135=1;
							}

							}
							break;
						case FINAL:
							{
							int LA135_6 = input.LA(2);
							if ( (LA135_6==SEMI) ) {
								alt135=1;
							}

							}
							break;
						case REGISTER:
							{
							int LA135_7 = input.LA(2);
							if ( (LA135_7==SEMI) ) {
								alt135=1;
							}

							}
							break;
						case EXPORT:
							{
							int LA135_8 = input.LA(2);
							if ( (LA135_8==SEMI) ) {
								alt135=1;
							}

							}
							break;
						case LOCAL:
							{
							int LA135_9 = input.LA(2);
							if ( (LA135_9==SEMI) ) {
								alt135=1;
							}

							}
							break;
						case DISPID:
							{
							int LA135_10 = input.LA(2);
							if ( (LA135_10==ABSOLUTE||(LA135_10 >= ADD && LA135_10 <= ANSISTRING)||LA135_10==AS||(LA135_10 >= AT && LA135_10 <= AT2)||LA135_10==BREAK||(LA135_10 >= CONTAINS && LA135_10 <= DEFAULT)||LA135_10==DISPID||LA135_10==DIV||LA135_10==DOT||(LA135_10 >= DQ && LA135_10 <= DW)||LA135_10==EQUAL||LA135_10==EXIT||LA135_10==EXPORT||LA135_10==FALSE||LA135_10==FINAL||(LA135_10 >= FUNCTION && LA135_10 <= GE)||(LA135_10 >= GT && LA135_10 <= HELPER)||(LA135_10 >= IMPLEMENTS && LA135_10 <= INHERITED)||LA135_10==IS||LA135_10==LBRACK||LA135_10==LE||(LA135_10 >= LOCAL && LA135_10 <= NAME)||LA135_10==NIL||(LA135_10 >= NOT && LA135_10 <= OBJECT)||(LA135_10 >= OPERATOR && LA135_10 <= OUT)||(LA135_10 >= PLUS && LA135_10 <= PROCEDURE)||LA135_10==PUBLIC||LA135_10==QuotedString||(LA135_10 >= READ && LA135_10 <= READONLY)||(LA135_10 >= REFERENCE && LA135_10 <= REGISTER)||LA135_10==REMOVE||LA135_10==SEMI||(LA135_10 >= SHL && LA135_10 <= STATIC)||(LA135_10 >= STORED && LA135_10 <= STRING)||LA135_10==TRUE||(LA135_10 >= TkHexNum && LA135_10 <= TkIntNum)||LA135_10==TkRealNum||LA135_10==UNSAFE||(LA135_10 >= VARARGS && LA135_10 <= VIRTUAL)||(LA135_10 >= WRITE && LA135_10 <= WRITEONLY)||(LA135_10 >= XOR && LA135_10 <= 210)) ) {
								alt135=1;
							}

							}
							break;
						case VARARGS:
							{
							int LA135_11 = input.LA(2);
							if ( (LA135_11==SEMI) ) {
								alt135=1;
							}

							}
							break;
						}
						switch (alt135) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:163: methodDirective
							{
							pushFollow(FOLLOW_methodDirective_in_classMethod8960);
							methodDirective415=methodDirective();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_methodDirective.add(methodDirective415.getTree());
							}
							break;

						default :
							break loop135;
						}
					}

					// AST REWRITE
					// elements: genericDefinition, ident, FUNCTION, formalParameterSection, customAttribute, methodDirective, CLASS, typeDecl, customAttribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 366:30: -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? ^( TkFunctionReturn typeDecl ) ( methodDirective )* )
					{
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:366:33: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_0, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:366:52: ( 'class' )?
						if ( stream_CLASS.hasNext() ) {
							adaptor.addChild(root_0, stream_CLASS.nextNode());
						}
						stream_CLASS.reset();

						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:366:63: ^( 'function' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? ^( TkFunctionReturn typeDecl ) ( methodDirective )* )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_FUNCTION.nextNode(), root_1);
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:366:76: ^( TkFunctionName ident )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_ident.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:366:100: ( genericDefinition )?
						if ( stream_genericDefinition.hasNext() ) {
							adaptor.addChild(root_1, stream_genericDefinition.nextTree());
						}
						stream_genericDefinition.reset();

						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:366:121: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:366:138: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:366:165: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_1, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:366:184: ^( TkFunctionReturn typeDecl )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionReturn, "TkFunctionReturn"), root_2);
						adaptor.addChild(root_2, stream_typeDecl.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:366:213: ( methodDirective )*
						while ( stream_methodDirective.hasNext() ) {
							adaptor.addChild(root_1, stream_methodDirective.nextTree());
						}
						stream_methodDirective.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:367:32: ( customAttribute )? ( 'class' )? 'operator' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( methodDirective )*
					{
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:367:32: ( customAttribute )?
					int alt136=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							alt136=1;
							}
							break;
						case CLASS:
							{
							int LA136_2 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt136=1;
							}
							}
							break;
						case OPERATOR:
							{
							int LA136_3 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt136=1;
							}
							}
							break;
					}
					switch (alt136) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:367:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_classMethod9077);
							customAttribute416=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute416.getTree());
							}
							break;

					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:367:51: ( 'class' )?
					int alt137=2;
					int LA137_0 = input.LA(1);
					if ( (LA137_0==CLASS) ) {
						alt137=1;
					}
					switch (alt137) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:367:52: 'class'
							{
							string_literal417=(Token)match(input,CLASS,FOLLOW_CLASS_in_classMethod9082); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_CLASS.add(string_literal417);

							}
							break;

					}

					string_literal418=(Token)match(input,OPERATOR,FOLLOW_OPERATOR_in_classMethod9086); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_OPERATOR.add(string_literal418);

					pushFollow(FOLLOW_ident_in_classMethod9088);
					ident419=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident419.getTree());
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:367:79: ( genericDefinition )?
					int alt138=2;
					int LA138_0 = input.LA(1);
					if ( (LA138_0==LT) ) {
						alt138=1;
					}
					switch (alt138) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:367:80: genericDefinition
							{
							pushFollow(FOLLOW_genericDefinition_in_classMethod9091);
							genericDefinition420=genericDefinition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_genericDefinition.add(genericDefinition420.getTree());
							}
							break;

					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:367:100: ( formalParameterSection )?
					int alt139=2;
					int LA139_0 = input.LA(1);
					if ( (LA139_0==LPAREN) ) {
						alt139=1;
					}
					switch (alt139) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:367:101: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_classMethod9096);
							formalParameterSection421=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection421.getTree());
							}
							break;

					}

					char_literal422=(Token)match(input,COLON,FOLLOW_COLON_in_classMethod9100); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(char_literal422);

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:367:130: ( customAttribute )?
					int alt140=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							int LA140_1 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case PACKED:
							{
							int LA140_2 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case ARRAY:
							{
							int LA140_3 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case SET:
							{
							int LA140_4 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case FILE:
							{
							int LA140_5 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case CLASS:
							{
							int LA140_6 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case DISPINTERFACE:
						case INTERFACE:
							{
							int LA140_7 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case OBJECT:
							{
							int LA140_8 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case RECORD:
							{
							int LA140_9 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case POINTER2:
							{
							int LA140_10 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case POINTER:
							{
							int LA140_11 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case STRING:
							{
							int LA140_12 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case TYPE:
							{
							int LA140_13 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case ANSISTRING:
							{
							int LA140_14 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case FUNCTION:
							{
							int LA140_15 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case PROCEDURE:
							{
							int LA140_16 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case REFERENCE:
							{
							int LA140_17 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case VARIANT:
							{
							int LA140_18 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case LPAREN:
							{
							int LA140_19 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case AT2:
							{
							int LA140_20 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case 199:
							{
							int LA140_21 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case NOT:
							{
							int LA140_22 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case PLUS:
							{
							int LA140_23 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case MINUS:
							{
							int LA140_24 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case TkRealNum:
							{
							int LA140_25 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case TkHexNum:
						case TkIntNum:
							{
							int LA140_26 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case TRUE:
							{
							int LA140_27 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case FALSE:
							{
							int LA140_28 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case NIL:
							{
							int LA140_29 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case 210:
							{
							int LA140_30 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case ControlChar:
							{
							int LA140_31 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case QuotedString:
							{
							int LA140_32 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case 203:
							{
							int LA140_33 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case INHERITED:
							{
							int LA140_34 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case TkIdentifier:
							{
							int LA140_35 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case 198:
							{
							int LA140_36 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case IN:
							{
							int LA140_37 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case 209:
							{
							int LA140_38 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case DOT:
							{
							int LA140_39 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case LT:
							{
							int LA140_40 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case AND:
						case AS:
						case DIV:
						case MOD:
						case OR:
						case SHL:
						case SHR:
						case SLASH:
						case STAR:
						case XOR:
						case 200:
						case 201:
						case 202:
						case 204:
						case 205:
						case 206:
						case 207:
						case 208:
							{
							int LA140_41 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case ABSOLUTE:
						case ADD:
						case AT:
						case BREAK:
						case CONTAINS:
						case CONTINUE:
						case DEFAULT:
						case DISPID:
						case DQ:
						case DW:
						case EXIT:
						case EXPORT:
						case FINAL:
						case HELPER:
						case IMPLEMENTS:
						case INDEX:
						case LOCAL:
						case MESSAGE:
						case NAME:
						case OPERATOR:
						case OUT:
						case PRIVATE:
						case PUBLIC:
						case READ:
						case READONLY:
						case REGISTER:
						case REMOVE:
						case STATIC:
						case STORED:
						case STRICT:
						case UNSAFE:
						case VARARGS:
						case VIRTUAL:
						case WRITE:
						case WRITEONLY:
							{
							int LA140_42 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case EQUAL:
							{
							int LA140_43 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case GE:
						case GT:
						case IS:
						case LE:
						case NOT_EQUAL:
							{
							int LA140_44 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
						case DOTDOT:
							{
							int LA140_45 = input.LA(2);
							if ( (synpred194_Delphi()) ) {
								alt140=1;
							}
							}
							break;
					}
					switch (alt140) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:367:131: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_classMethod9103);
							customAttribute423=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute423.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_typeDecl_in_classMethod9107);
					typeDecl424=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl424.getTree());
					char_literal425=(Token)match(input,SEMI,FOLLOW_SEMI_in_classMethod9109); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMI.add(char_literal425);

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:367:162: ( methodDirective )*
					loop141:
					while (true) {
						int alt141=2;
						switch ( input.LA(1) ) {
						case MESSAGE:
							{
							int LA141_2 = input.LA(2);
							if ( (LA141_2==ABSOLUTE||(LA141_2 >= ADD && LA141_2 <= ANSISTRING)||LA141_2==AS||(LA141_2 >= AT && LA141_2 <= AT2)||LA141_2==BREAK||(LA141_2 >= CONTAINS && LA141_2 <= DEFAULT)||LA141_2==DISPID||LA141_2==DIV||LA141_2==DOT||(LA141_2 >= DQ && LA141_2 <= DW)||LA141_2==EQUAL||LA141_2==EXIT||LA141_2==EXPORT||LA141_2==FALSE||LA141_2==FINAL||(LA141_2 >= FUNCTION && LA141_2 <= GE)||(LA141_2 >= GT && LA141_2 <= HELPER)||(LA141_2 >= IMPLEMENTS && LA141_2 <= INHERITED)||LA141_2==IS||LA141_2==LBRACK||LA141_2==LE||(LA141_2 >= LOCAL && LA141_2 <= NAME)||LA141_2==NIL||(LA141_2 >= NOT && LA141_2 <= OBJECT)||(LA141_2 >= OPERATOR && LA141_2 <= OUT)||(LA141_2 >= PLUS && LA141_2 <= PROCEDURE)||LA141_2==PUBLIC||LA141_2==QuotedString||(LA141_2 >= READ && LA141_2 <= READONLY)||(LA141_2 >= REFERENCE && LA141_2 <= REGISTER)||LA141_2==REMOVE||LA141_2==SEMI||(LA141_2 >= SHL && LA141_2 <= STATIC)||(LA141_2 >= STORED && LA141_2 <= STRING)||LA141_2==TRUE||(LA141_2 >= TkHexNum && LA141_2 <= TkIntNum)||LA141_2==TkRealNum||LA141_2==UNSAFE||(LA141_2 >= VARARGS && LA141_2 <= VIRTUAL)||(LA141_2 >= WRITE && LA141_2 <= WRITEONLY)||(LA141_2 >= XOR && LA141_2 <= 210)) ) {
								alt141=1;
							}

							}
							break;
						case ABSTRACT:
						case ASSEMBLER:
						case CDECL:
						case DEPRECATED:
						case DYNAMIC:
						case EXPERIMENTAL:
						case EXTERNAL:
						case FAR:
						case INLINE:
						case LIBRARY:
						case NEAR:
						case OVERLOAD:
						case OVERRIDE:
						case PASCAL:
						case PLATFORM:
						case REINTRODUCE:
						case SAFECALL:
						case STDCALL:
							{
							alt141=1;
							}
							break;
						case STATIC:
							{
							int LA141_4 = input.LA(2);
							if ( (LA141_4==SEMI) ) {
								alt141=1;
							}

							}
							break;
						case VIRTUAL:
							{
							int LA141_5 = input.LA(2);
							if ( (LA141_5==SEMI) ) {
								alt141=1;
							}

							}
							break;
						case FINAL:
							{
							int LA141_6 = input.LA(2);
							if ( (LA141_6==SEMI) ) {
								alt141=1;
							}

							}
							break;
						case REGISTER:
							{
							int LA141_7 = input.LA(2);
							if ( (LA141_7==SEMI) ) {
								alt141=1;
							}

							}
							break;
						case EXPORT:
							{
							int LA141_8 = input.LA(2);
							if ( (LA141_8==SEMI) ) {
								alt141=1;
							}

							}
							break;
						case LOCAL:
							{
							int LA141_9 = input.LA(2);
							if ( (LA141_9==SEMI) ) {
								alt141=1;
							}

							}
							break;
						case DISPID:
							{
							int LA141_10 = input.LA(2);
							if ( (LA141_10==ABSOLUTE||(LA141_10 >= ADD && LA141_10 <= ANSISTRING)||LA141_10==AS||(LA141_10 >= AT && LA141_10 <= AT2)||LA141_10==BREAK||(LA141_10 >= CONTAINS && LA141_10 <= DEFAULT)||LA141_10==DISPID||LA141_10==DIV||LA141_10==DOT||(LA141_10 >= DQ && LA141_10 <= DW)||LA141_10==EQUAL||LA141_10==EXIT||LA141_10==EXPORT||LA141_10==FALSE||LA141_10==FINAL||(LA141_10 >= FUNCTION && LA141_10 <= GE)||(LA141_10 >= GT && LA141_10 <= HELPER)||(LA141_10 >= IMPLEMENTS && LA141_10 <= INHERITED)||LA141_10==IS||LA141_10==LBRACK||LA141_10==LE||(LA141_10 >= LOCAL && LA141_10 <= NAME)||LA141_10==NIL||(LA141_10 >= NOT && LA141_10 <= OBJECT)||(LA141_10 >= OPERATOR && LA141_10 <= OUT)||(LA141_10 >= PLUS && LA141_10 <= PROCEDURE)||LA141_10==PUBLIC||LA141_10==QuotedString||(LA141_10 >= READ && LA141_10 <= READONLY)||(LA141_10 >= REFERENCE && LA141_10 <= REGISTER)||LA141_10==REMOVE||LA141_10==SEMI||(LA141_10 >= SHL && LA141_10 <= STATIC)||(LA141_10 >= STORED && LA141_10 <= STRING)||LA141_10==TRUE||(LA141_10 >= TkHexNum && LA141_10 <= TkIntNum)||LA141_10==TkRealNum||LA141_10==UNSAFE||(LA141_10 >= VARARGS && LA141_10 <= VIRTUAL)||(LA141_10 >= WRITE && LA141_10 <= WRITEONLY)||(LA141_10 >= XOR && LA141_10 <= 210)) ) {
								alt141=1;
							}

							}
							break;
						case VARARGS:
							{
							int LA141_11 = input.LA(2);
							if ( (LA141_11==SEMI) ) {
								alt141=1;
							}

							}
							break;
						}
						switch (alt141) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:367:163: methodDirective
							{
							pushFollow(FOLLOW_methodDirective_in_classMethod9112);
							methodDirective426=methodDirective();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_methodDirective.add(methodDirective426.getTree());
							}
							break;

						default :
							break loop141;
						}
					}

					// AST REWRITE
					// elements: OPERATOR, genericDefinition, typeDecl, formalParameterSection, methodDirective, ident, CLASS, customAttribute, customAttribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 368:30: -> ( customAttribute )? ( 'class' )? ^( 'operator' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? typeDecl ( methodDirective )* )
					{
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:368:33: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_0, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:368:52: ( 'class' )?
						if ( stream_CLASS.hasNext() ) {
							adaptor.addChild(root_0, stream_CLASS.nextNode());
						}
						stream_CLASS.reset();

						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:368:63: ^( 'operator' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? typeDecl ( methodDirective )* )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_OPERATOR.nextNode(), root_1);
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:368:76: ^( TkFunctionName ident )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_ident.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:368:100: ( genericDefinition )?
						if ( stream_genericDefinition.hasNext() ) {
							adaptor.addChild(root_1, stream_genericDefinition.nextTree());
						}
						stream_genericDefinition.reset();

						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:368:121: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:368:138: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:368:165: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_1, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						adaptor.addChild(root_1, stream_typeDecl.nextTree());
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:368:193: ( methodDirective )*
						while ( stream_methodDirective.hasNext() ) {
							adaptor.addChild(root_1, stream_methodDirective.nextTree());
						}
						stream_methodDirective.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:369:32: ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? '.' ident '=' ident ';'
					{
					root_0 = (Object)adaptor.nil();


					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:369:32: ( customAttribute )?
					int alt142=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							alt142=1;
							}
							break;
						case CLASS:
							{
							int LA142_2 = input.LA(2);
							if ( (synpred197_Delphi()) ) {
								alt142=1;
							}
							}
							break;
						case FUNCTION:
							{
							int LA142_3 = input.LA(2);
							if ( (synpred197_Delphi()) ) {
								alt142=1;
							}
							}
							break;
					}
					switch (alt142) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:369:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_classMethod9226);
							customAttribute427=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, customAttribute427.getTree());

							}
							break;

					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:369:51: ( 'class' )?
					int alt143=2;
					int LA143_0 = input.LA(1);
					if ( (LA143_0==CLASS) ) {
						alt143=1;
					}
					switch (alt143) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:369:52: 'class'
							{
							string_literal428=(Token)match(input,CLASS,FOLLOW_CLASS_in_classMethod9231); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal428_tree = (Object)adaptor.create(string_literal428);
							adaptor.addChild(root_0, string_literal428_tree);
							}

							}
							break;

					}

					string_literal429=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_classMethod9235); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal429_tree = (Object)adaptor.create(string_literal429);
					adaptor.addChild(root_0, string_literal429_tree);
					}

					pushFollow(FOLLOW_ident_in_classMethod9237);
					ident430=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident430.getTree());

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:369:79: ( genericDefinition )?
					int alt144=2;
					int LA144_0 = input.LA(1);
					if ( (LA144_0==LT) ) {
						alt144=1;
					}
					switch (alt144) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:369:80: genericDefinition
							{
							pushFollow(FOLLOW_genericDefinition_in_classMethod9240);
							genericDefinition431=genericDefinition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, genericDefinition431.getTree());

							}
							break;

					}

					char_literal432=(Token)match(input,DOT,FOLLOW_DOT_in_classMethod9244); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal432_tree = (Object)adaptor.create(char_literal432);
					adaptor.addChild(root_0, char_literal432_tree);
					}

					pushFollow(FOLLOW_ident_in_classMethod9246);
					ident433=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident433.getTree());

					char_literal434=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_classMethod9248); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal434_tree = (Object)adaptor.create(char_literal434);
					adaptor.addChild(root_0, char_literal434_tree);
					}

					pushFollow(FOLLOW_ident_in_classMethod9250);
					ident435=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident435.getTree());

					char_literal436=(Token)match(input,SEMI,FOLLOW_SEMI_in_classMethod9252); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal436_tree = (Object)adaptor.create(char_literal436);
					adaptor.addChild(root_0, char_literal436_tree);
					}

					}
					break;
				case 5 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:370:32: ( customAttribute )? ( 'class' )? 'procedure' ident ( genericDefinition )? '.' ident '=' ident ';'
					{
					root_0 = (Object)adaptor.nil();


					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:370:32: ( customAttribute )?
					int alt145=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							alt145=1;
							}
							break;
						case CLASS:
							{
							int LA145_2 = input.LA(2);
							if ( (synpred201_Delphi()) ) {
								alt145=1;
							}
							}
							break;
						case PROCEDURE:
							{
							int LA145_3 = input.LA(2);
							if ( (synpred201_Delphi()) ) {
								alt145=1;
							}
							}
							break;
					}
					switch (alt145) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:370:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_classMethod9286);
							customAttribute437=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, customAttribute437.getTree());

							}
							break;

					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:370:51: ( 'class' )?
					int alt146=2;
					int LA146_0 = input.LA(1);
					if ( (LA146_0==CLASS) ) {
						alt146=1;
					}
					switch (alt146) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:370:52: 'class'
							{
							string_literal438=(Token)match(input,CLASS,FOLLOW_CLASS_in_classMethod9291); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal438_tree = (Object)adaptor.create(string_literal438);
							adaptor.addChild(root_0, string_literal438_tree);
							}

							}
							break;

					}

					string_literal439=(Token)match(input,PROCEDURE,FOLLOW_PROCEDURE_in_classMethod9295); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal439_tree = (Object)adaptor.create(string_literal439);
					adaptor.addChild(root_0, string_literal439_tree);
					}

					pushFollow(FOLLOW_ident_in_classMethod9297);
					ident440=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident440.getTree());

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:370:80: ( genericDefinition )?
					int alt147=2;
					int LA147_0 = input.LA(1);
					if ( (LA147_0==LT) ) {
						alt147=1;
					}
					switch (alt147) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:370:81: genericDefinition
							{
							pushFollow(FOLLOW_genericDefinition_in_classMethod9300);
							genericDefinition441=genericDefinition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, genericDefinition441.getTree());

							}
							break;

					}

					char_literal442=(Token)match(input,DOT,FOLLOW_DOT_in_classMethod9304); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal442_tree = (Object)adaptor.create(char_literal442);
					adaptor.addChild(root_0, char_literal442_tree);
					}

					pushFollow(FOLLOW_ident_in_classMethod9306);
					ident443=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident443.getTree());

					char_literal444=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_classMethod9308); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal444_tree = (Object)adaptor.create(char_literal444);
					adaptor.addChild(root_0, char_literal444_tree);
					}

					pushFollow(FOLLOW_ident_in_classMethod9310);
					ident445=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident445.getTree());

					char_literal446=(Token)match(input,SEMI,FOLLOW_SEMI_in_classMethod9312); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal446_tree = (Object)adaptor.create(char_literal446);
					adaptor.addChild(root_0, char_literal446_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 91, classMethod_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classMethod"


	public static class classField_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classField"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:372:1: classField : ( customAttribute )? identList ':' typeDecl ( hintingDirective )* ';' -> ( customAttribute )? ^( TkClassField ^( TkVariableIdents identList ) ^( TkVariableType typeDecl ) ) ;
	public final DelphiParser.classField_return classField() throws RecognitionException {
		DelphiParser.classField_return retval = new DelphiParser.classField_return();
		retval.start = input.LT(1);
		int classField_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal449=null;
		Token char_literal452=null;
		ParserRuleReturnScope customAttribute447 =null;
		ParserRuleReturnScope identList448 =null;
		ParserRuleReturnScope typeDecl450 =null;
		ParserRuleReturnScope hintingDirective451 =null;

		Object char_literal449_tree=null;
		Object char_literal452_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_identList=new RewriteRuleSubtreeStream(adaptor,"rule identList");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:372:30: ( ( customAttribute )? identList ':' typeDecl ( hintingDirective )* ';' -> ( customAttribute )? ^( TkClassField ^( TkVariableIdents identList ) ^( TkVariableType typeDecl ) ) )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:372:32: ( customAttribute )? identList ':' typeDecl ( hintingDirective )* ';'
			{
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:372:32: ( customAttribute )?
			int alt149=2;
			switch ( input.LA(1) ) {
				case LBRACK:
					{
					alt149=1;
					}
					break;
				case TkIdentifier:
					{
					int LA149_2 = input.LA(2);
					if ( (synpred204_Delphi()) ) {
						alt149=1;
					}
					}
					break;
				case 198:
					{
					int LA149_3 = input.LA(2);
					if ( (synpred204_Delphi()) ) {
						alt149=1;
					}
					}
					break;
				case ABSOLUTE:
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DISPID:
				case DQ:
				case DW:
				case EXIT:
				case EXPORT:
				case FALSE:
				case FINAL:
				case HELPER:
				case IMPLEMENTS:
				case IN:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case PRIVATE:
				case PUBLIC:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STATIC:
				case STORED:
				case STRICT:
				case STRING:
				case TRUE:
				case UNSAFE:
				case VARARGS:
				case VARIANT:
				case VIRTUAL:
				case WRITE:
				case WRITEONLY:
					{
					int LA149_4 = input.LA(2);
					if ( (synpred204_Delphi()) ) {
						alt149=1;
					}
					}
					break;
			}
			switch (alt149) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:372:33: customAttribute
					{
					pushFollow(FOLLOW_customAttribute_in_classField9368);
					customAttribute447=customAttribute();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute447.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_identList_in_classField9372);
			identList448=identList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identList.add(identList448.getTree());
			char_literal449=(Token)match(input,COLON,FOLLOW_COLON_in_classField9374); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_COLON.add(char_literal449);

			pushFollow(FOLLOW_typeDecl_in_classField9376);
			typeDecl450=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl450.getTree());
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:372:74: ( hintingDirective )*
			loop150:
			while (true) {
				int alt150=2;
				int LA150_0 = input.LA(1);
				if ( (LA150_0==DEPRECATED||LA150_0==EXPERIMENTAL||LA150_0==LIBRARY||LA150_0==PLATFORM) ) {
					alt150=1;
				}

				switch (alt150) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:372:75: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_classField9379);
					hintingDirective451=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective451.getTree());
					}
					break;

				default :
					break loop150;
				}
			}

			char_literal452=(Token)match(input,SEMI,FOLLOW_SEMI_in_classField9384); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal452);

			// AST REWRITE
			// elements: typeDecl, identList, customAttribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 373:30: -> ( customAttribute )? ^( TkClassField ^( TkVariableIdents identList ) ^( TkVariableType typeDecl ) )
			{
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:373:33: ( customAttribute )?
				if ( stream_customAttribute.hasNext() ) {
					adaptor.addChild(root_0, stream_customAttribute.nextTree());
				}
				stream_customAttribute.reset();

				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:373:52: ^( TkClassField ^( TkVariableIdents identList ) ^( TkVariableType typeDecl ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClassField, "TkClassField"), root_1);
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:373:67: ^( TkVariableIdents identList )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableIdents, "TkVariableIdents"), root_2);
				adaptor.addChild(root_2, stream_identList.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:373:97: ^( TkVariableType typeDecl )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableType, "TkVariableType"), root_2);
				adaptor.addChild(root_2, stream_typeDecl.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 92, classField_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classField"


	public static class classProperty_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classProperty"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:375:1: classProperty : ( customAttribute )? ( 'class' )? 'property' ident ( classPropertyArray )? ( ':' genericTypeIdent )? ( classPropertyIndex )? ( classPropertySpecifier )* ';' ( classPropertyEndSpecifier )* -> ^( 'property' ^( TkVariableIdents ident ) ^( TkVariableType ( genericTypeIdent )? ) ( classPropertySpecifier )* ) ;
	public final DelphiParser.classProperty_return classProperty() throws RecognitionException {
		DelphiParser.classProperty_return retval = new DelphiParser.classProperty_return();
		retval.start = input.LT(1);
		int classProperty_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal454=null;
		Token string_literal455=null;
		Token char_literal458=null;
		Token char_literal462=null;
		ParserRuleReturnScope customAttribute453 =null;
		ParserRuleReturnScope ident456 =null;
		ParserRuleReturnScope classPropertyArray457 =null;
		ParserRuleReturnScope genericTypeIdent459 =null;
		ParserRuleReturnScope classPropertyIndex460 =null;
		ParserRuleReturnScope classPropertySpecifier461 =null;
		ParserRuleReturnScope classPropertyEndSpecifier463 =null;

		Object string_literal454_tree=null;
		Object string_literal455_tree=null;
		Object char_literal458_tree=null;
		Object char_literal462_tree=null;
		RewriteRuleTokenStream stream_PROPERTY=new RewriteRuleTokenStream(adaptor,"token PROPERTY");
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_classPropertyEndSpecifier=new RewriteRuleSubtreeStream(adaptor,"rule classPropertyEndSpecifier");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_genericTypeIdent=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeIdent");
		RewriteRuleSubtreeStream stream_classPropertyIndex=new RewriteRuleSubtreeStream(adaptor,"rule classPropertyIndex");
		RewriteRuleSubtreeStream stream_classPropertyArray=new RewriteRuleSubtreeStream(adaptor,"rule classPropertyArray");
		RewriteRuleSubtreeStream stream_classPropertySpecifier=new RewriteRuleSubtreeStream(adaptor,"rule classPropertySpecifier");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:375:30: ( ( customAttribute )? ( 'class' )? 'property' ident ( classPropertyArray )? ( ':' genericTypeIdent )? ( classPropertyIndex )? ( classPropertySpecifier )* ';' ( classPropertyEndSpecifier )* -> ^( 'property' ^( TkVariableIdents ident ) ^( TkVariableType ( genericTypeIdent )? ) ( classPropertySpecifier )* ) )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:375:32: ( customAttribute )? ( 'class' )? 'property' ident ( classPropertyArray )? ( ':' genericTypeIdent )? ( classPropertyIndex )? ( classPropertySpecifier )* ';' ( classPropertyEndSpecifier )*
			{
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:375:32: ( customAttribute )?
			int alt151=2;
			switch ( input.LA(1) ) {
				case LBRACK:
					{
					alt151=1;
					}
					break;
				case CLASS:
					{
					int LA151_2 = input.LA(2);
					if ( (synpred206_Delphi()) ) {
						alt151=1;
					}
					}
					break;
				case PROPERTY:
					{
					int LA151_3 = input.LA(2);
					if ( (synpred206_Delphi()) ) {
						alt151=1;
					}
					}
					break;
			}
			switch (alt151) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:375:33: customAttribute
					{
					pushFollow(FOLLOW_customAttribute_in_classProperty9489);
					customAttribute453=customAttribute();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute453.getTree());
					}
					break;

			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:375:51: ( 'class' )?
			int alt152=2;
			int LA152_0 = input.LA(1);
			if ( (LA152_0==CLASS) ) {
				alt152=1;
			}
			switch (alt152) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:375:52: 'class'
					{
					string_literal454=(Token)match(input,CLASS,FOLLOW_CLASS_in_classProperty9494); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_CLASS.add(string_literal454);

					}
					break;

			}

			string_literal455=(Token)match(input,PROPERTY,FOLLOW_PROPERTY_in_classProperty9498); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_PROPERTY.add(string_literal455);

			pushFollow(FOLLOW_ident_in_classProperty9500);
			ident456=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_ident.add(ident456.getTree());
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:375:79: ( classPropertyArray )?
			int alt153=2;
			int LA153_0 = input.LA(1);
			if ( (LA153_0==LBRACK) ) {
				alt153=1;
			}
			switch (alt153) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:375:80: classPropertyArray
					{
					pushFollow(FOLLOW_classPropertyArray_in_classProperty9503);
					classPropertyArray457=classPropertyArray();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classPropertyArray.add(classPropertyArray457.getTree());
					}
					break;

			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:375:101: ( ':' genericTypeIdent )?
			int alt154=2;
			int LA154_0 = input.LA(1);
			if ( (LA154_0==COLON) ) {
				alt154=1;
			}
			switch (alt154) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:375:102: ':' genericTypeIdent
					{
					char_literal458=(Token)match(input,COLON,FOLLOW_COLON_in_classProperty9508); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(char_literal458);

					pushFollow(FOLLOW_genericTypeIdent_in_classProperty9510);
					genericTypeIdent459=genericTypeIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_genericTypeIdent.add(genericTypeIdent459.getTree());
					}
					break;

			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:375:125: ( classPropertyIndex )?
			int alt155=2;
			int LA155_0 = input.LA(1);
			if ( (LA155_0==INDEX) ) {
				alt155=1;
			}
			switch (alt155) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:375:126: classPropertyIndex
					{
					pushFollow(FOLLOW_classPropertyIndex_in_classProperty9515);
					classPropertyIndex460=classPropertyIndex();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classPropertyIndex.add(classPropertyIndex460.getTree());
					}
					break;

			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:375:147: ( classPropertySpecifier )*
			loop156:
			while (true) {
				int alt156=2;
				int LA156_0 = input.LA(1);
				if ( (LA156_0==DEFAULT||LA156_0==DISPID||LA156_0==IMPLEMENTS||LA156_0==NODEFAULT||(LA156_0 >= READ && LA156_0 <= READONLY)||LA156_0==STORED||(LA156_0 >= WRITE && LA156_0 <= WRITEONLY)) ) {
					alt156=1;
				}

				switch (alt156) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:375:148: classPropertySpecifier
					{
					pushFollow(FOLLOW_classPropertySpecifier_in_classProperty9520);
					classPropertySpecifier461=classPropertySpecifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classPropertySpecifier.add(classPropertySpecifier461.getTree());
					}
					break;

				default :
					break loop156;
				}
			}

			char_literal462=(Token)match(input,SEMI,FOLLOW_SEMI_in_classProperty9524); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal462);

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:375:177: ( classPropertyEndSpecifier )*
			loop157:
			while (true) {
				int alt157=2;
				switch ( input.LA(1) ) {
				case STORED:
					{
					int LA157_2 = input.LA(2);
					if ( (LA157_2==ABSOLUTE||(LA157_2 >= ADD && LA157_2 <= ANSISTRING)||LA157_2==AS||(LA157_2 >= AT && LA157_2 <= AT2)||LA157_2==BREAK||(LA157_2 >= CONTAINS && LA157_2 <= DEFAULT)||LA157_2==DISPID||LA157_2==DIV||LA157_2==DOT||(LA157_2 >= DQ && LA157_2 <= DW)||LA157_2==EQUAL||LA157_2==EXIT||LA157_2==EXPORT||LA157_2==FALSE||LA157_2==FINAL||(LA157_2 >= FUNCTION && LA157_2 <= GE)||(LA157_2 >= GT && LA157_2 <= HELPER)||(LA157_2 >= IMPLEMENTS && LA157_2 <= INHERITED)||LA157_2==IS||LA157_2==LBRACK||LA157_2==LE||(LA157_2 >= LOCAL && LA157_2 <= NAME)||LA157_2==NIL||(LA157_2 >= NOT && LA157_2 <= OBJECT)||(LA157_2 >= OPERATOR && LA157_2 <= OUT)||(LA157_2 >= PLUS && LA157_2 <= PROCEDURE)||LA157_2==PUBLIC||LA157_2==QuotedString||(LA157_2 >= READ && LA157_2 <= READONLY)||(LA157_2 >= REFERENCE && LA157_2 <= REGISTER)||LA157_2==REMOVE||LA157_2==SEMI||(LA157_2 >= SHL && LA157_2 <= STATIC)||(LA157_2 >= STORED && LA157_2 <= STRING)||LA157_2==TRUE||(LA157_2 >= TkHexNum && LA157_2 <= TkIntNum)||LA157_2==TkRealNum||LA157_2==UNSAFE||(LA157_2 >= VARARGS && LA157_2 <= VIRTUAL)||(LA157_2 >= WRITE && LA157_2 <= WRITEONLY)||(LA157_2 >= XOR && LA157_2 <= 210)) ) {
						alt157=1;
					}

					}
					break;
				case DEFAULT:
					{
					int LA157_3 = input.LA(2);
					if ( (LA157_3==ABSOLUTE||(LA157_3 >= ADD && LA157_3 <= ANSISTRING)||LA157_3==AS||(LA157_3 >= AT && LA157_3 <= AT2)||LA157_3==BREAK||(LA157_3 >= CONTAINS && LA157_3 <= DEFAULT)||LA157_3==DISPID||LA157_3==DIV||LA157_3==DOT||(LA157_3 >= DQ && LA157_3 <= DW)||LA157_3==EQUAL||LA157_3==EXIT||LA157_3==EXPORT||LA157_3==FALSE||LA157_3==FINAL||(LA157_3 >= FUNCTION && LA157_3 <= GE)||(LA157_3 >= GT && LA157_3 <= HELPER)||(LA157_3 >= IMPLEMENTS && LA157_3 <= INHERITED)||LA157_3==IS||LA157_3==LBRACK||LA157_3==LE||(LA157_3 >= LOCAL && LA157_3 <= NAME)||LA157_3==NIL||(LA157_3 >= NOT && LA157_3 <= OBJECT)||(LA157_3 >= OPERATOR && LA157_3 <= OUT)||(LA157_3 >= PLUS && LA157_3 <= PROCEDURE)||LA157_3==PUBLIC||LA157_3==QuotedString||(LA157_3 >= READ && LA157_3 <= READONLY)||(LA157_3 >= REFERENCE && LA157_3 <= REGISTER)||LA157_3==REMOVE||LA157_3==SEMI||(LA157_3 >= SHL && LA157_3 <= STATIC)||(LA157_3 >= STORED && LA157_3 <= STRING)||LA157_3==TRUE||(LA157_3 >= TkHexNum && LA157_3 <= TkIntNum)||LA157_3==TkRealNum||LA157_3==UNSAFE||(LA157_3 >= VARARGS && LA157_3 <= VIRTUAL)||(LA157_3 >= WRITE && LA157_3 <= WRITEONLY)||(LA157_3 >= XOR && LA157_3 <= 210)) ) {
						alt157=1;
					}

					}
					break;
				case NODEFAULT:
					{
					alt157=1;
					}
					break;
				}
				switch (alt157) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:375:178: classPropertyEndSpecifier
					{
					pushFollow(FOLLOW_classPropertyEndSpecifier_in_classProperty9527);
					classPropertyEndSpecifier463=classPropertyEndSpecifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classPropertyEndSpecifier.add(classPropertyEndSpecifier463.getTree());
					}
					break;

				default :
					break loop157;
				}
			}

			// AST REWRITE
			// elements: genericTypeIdent, ident, classPropertySpecifier, PROPERTY
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 376:31: -> ^( 'property' ^( TkVariableIdents ident ) ^( TkVariableType ( genericTypeIdent )? ) ( classPropertySpecifier )* )
			{
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:376:34: ^( 'property' ^( TkVariableIdents ident ) ^( TkVariableType ( genericTypeIdent )? ) ( classPropertySpecifier )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_PROPERTY.nextNode(), root_1);
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:376:47: ^( TkVariableIdents ident )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableIdents, "TkVariableIdents"), root_2);
				adaptor.addChild(root_2, stream_ident.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:376:73: ^( TkVariableType ( genericTypeIdent )? )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableType, "TkVariableType"), root_2);
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:376:90: ( genericTypeIdent )?
				if ( stream_genericTypeIdent.hasNext() ) {
					adaptor.addChild(root_2, stream_genericTypeIdent.nextTree());
				}
				stream_genericTypeIdent.reset();

				adaptor.addChild(root_1, root_2);
				}

				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:376:109: ( classPropertySpecifier )*
				while ( stream_classPropertySpecifier.hasNext() ) {
					adaptor.addChild(root_1, stream_classPropertySpecifier.nextTree());
				}
				stream_classPropertySpecifier.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 93, classProperty_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classProperty"


	public static class classPropertyArray_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classPropertyArray"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:380:1: classPropertyArray : '[' formalParameterList ']' ;
	public final DelphiParser.classPropertyArray_return classPropertyArray() throws RecognitionException {
		DelphiParser.classPropertyArray_return retval = new DelphiParser.classPropertyArray_return();
		retval.start = input.LT(1);
		int classPropertyArray_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal464=null;
		Token char_literal466=null;
		ParserRuleReturnScope formalParameterList465 =null;

		Object char_literal464_tree=null;
		Object char_literal466_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:380:30: ( '[' formalParameterList ']' )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:380:32: '[' formalParameterList ']'
			{
			root_0 = (Object)adaptor.nil();


			char_literal464=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_classPropertyArray9693); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal464_tree = (Object)adaptor.create(char_literal464);
			adaptor.addChild(root_0, char_literal464_tree);
			}

			pushFollow(FOLLOW_formalParameterList_in_classPropertyArray9695);
			formalParameterList465=formalParameterList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterList465.getTree());

			char_literal466=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_classPropertyArray9697); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal466_tree = (Object)adaptor.create(char_literal466);
			adaptor.addChild(root_0, char_literal466_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 94, classPropertyArray_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classPropertyArray"


	public static class classPropertyIndex_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classPropertyIndex"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:382:1: classPropertyIndex : 'index' expression ( ';' )? ;
	public final DelphiParser.classPropertyIndex_return classPropertyIndex() throws RecognitionException {
		DelphiParser.classPropertyIndex_return retval = new DelphiParser.classPropertyIndex_return();
		retval.start = input.LT(1);
		int classPropertyIndex_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal467=null;
		Token char_literal469=null;
		ParserRuleReturnScope expression468 =null;

		Object string_literal467_tree=null;
		Object char_literal469_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:382:30: ( 'index' expression ( ';' )? )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:382:32: 'index' expression ( ';' )?
			{
			root_0 = (Object)adaptor.nil();


			string_literal467=(Token)match(input,INDEX,FOLLOW_INDEX_in_classPropertyIndex9744); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal467_tree = (Object)adaptor.create(string_literal467);
			adaptor.addChild(root_0, string_literal467_tree);
			}

			pushFollow(FOLLOW_expression_in_classPropertyIndex9746);
			expression468=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression468.getTree());

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:382:51: ( ';' )?
			int alt158=2;
			int LA158_0 = input.LA(1);
			if ( (LA158_0==SEMI) ) {
				int LA158_1 = input.LA(2);
				if ( (synpred213_Delphi()) ) {
					alt158=1;
				}
			}
			switch (alt158) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:382:52: ';'
					{
					char_literal469=(Token)match(input,SEMI,FOLLOW_SEMI_in_classPropertyIndex9749); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal469_tree = (Object)adaptor.create(char_literal469);
					adaptor.addChild(root_0, char_literal469_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 95, classPropertyIndex_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classPropertyIndex"


	public static class classPropertySpecifier_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classPropertySpecifier"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:384:1: classPropertySpecifier : ( classPropertyReadWrite | classPropertyDispInterface | STORED expression | 'default' expression | 'default' | 'nodefault' | IMPLEMENTS genericTypeIdent );
	public final DelphiParser.classPropertySpecifier_return classPropertySpecifier() throws RecognitionException {
		DelphiParser.classPropertySpecifier_return retval = new DelphiParser.classPropertySpecifier_return();
		retval.start = input.LT(1);
		int classPropertySpecifier_StartIndex = input.index();

		Object root_0 = null;

		Token STORED472=null;
		Token string_literal474=null;
		Token string_literal476=null;
		Token string_literal477=null;
		Token IMPLEMENTS478=null;
		ParserRuleReturnScope classPropertyReadWrite470 =null;
		ParserRuleReturnScope classPropertyDispInterface471 =null;
		ParserRuleReturnScope expression473 =null;
		ParserRuleReturnScope expression475 =null;
		ParserRuleReturnScope genericTypeIdent479 =null;

		Object STORED472_tree=null;
		Object string_literal474_tree=null;
		Object string_literal476_tree=null;
		Object string_literal477_tree=null;
		Object IMPLEMENTS478_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:384:30: ( classPropertyReadWrite | classPropertyDispInterface | STORED expression | 'default' expression | 'default' | 'nodefault' | IMPLEMENTS genericTypeIdent )
			int alt159=7;
			switch ( input.LA(1) ) {
			case READ:
			case WRITE:
				{
				alt159=1;
				}
				break;
			case DISPID:
			case READONLY:
			case WRITEONLY:
				{
				alt159=2;
				}
				break;
			case STORED:
				{
				alt159=3;
				}
				break;
			case DEFAULT:
				{
				int LA159_4 = input.LA(2);
				if ( (synpred217_Delphi()) ) {
					alt159=4;
				}
				else if ( (synpred218_Delphi()) ) {
					alt159=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 159, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case NODEFAULT:
				{
				alt159=6;
				}
				break;
			case IMPLEMENTS:
				{
				alt159=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 159, 0, input);
				throw nvae;
			}
			switch (alt159) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:384:32: classPropertyReadWrite
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classPropertyReadWrite_in_classPropertySpecifier9796);
					classPropertyReadWrite470=classPropertyReadWrite();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classPropertyReadWrite470.getTree());

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:385:32: classPropertyDispInterface
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classPropertyDispInterface_in_classPropertySpecifier9832);
					classPropertyDispInterface471=classPropertyDispInterface();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classPropertyDispInterface471.getTree());

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:386:32: STORED expression
					{
					root_0 = (Object)adaptor.nil();


					STORED472=(Token)match(input,STORED,FOLLOW_STORED_in_classPropertySpecifier9865); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					STORED472_tree = (Object)adaptor.create(STORED472);
					adaptor.addChild(root_0, STORED472_tree);
					}

					pushFollow(FOLLOW_expression_in_classPropertySpecifier9867);
					expression473=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression473.getTree());

					}
					break;
				case 4 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:387:32: 'default' expression
					{
					root_0 = (Object)adaptor.nil();


					string_literal474=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_classPropertySpecifier9900); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal474_tree = (Object)adaptor.create(string_literal474);
					adaptor.addChild(root_0, string_literal474_tree);
					}

					pushFollow(FOLLOW_expression_in_classPropertySpecifier9902);
					expression475=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression475.getTree());

					}
					break;
				case 5 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:388:32: 'default'
					{
					root_0 = (Object)adaptor.nil();


					string_literal476=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_classPropertySpecifier9935); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal476_tree = (Object)adaptor.create(string_literal476);
					adaptor.addChild(root_0, string_literal476_tree);
					}

					}
					break;
				case 6 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:389:32: 'nodefault'
					{
					root_0 = (Object)adaptor.nil();


					string_literal477=(Token)match(input,NODEFAULT,FOLLOW_NODEFAULT_in_classPropertySpecifier9984); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal477_tree = (Object)adaptor.create(string_literal477);
					adaptor.addChild(root_0, string_literal477_tree);
					}

					}
					break;
				case 7 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:390:32: IMPLEMENTS genericTypeIdent
					{
					root_0 = (Object)adaptor.nil();


					IMPLEMENTS478=(Token)match(input,IMPLEMENTS,FOLLOW_IMPLEMENTS_in_classPropertySpecifier10017); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IMPLEMENTS478_tree = (Object)adaptor.create(IMPLEMENTS478);
					adaptor.addChild(root_0, IMPLEMENTS478_tree);
					}

					pushFollow(FOLLOW_genericTypeIdent_in_classPropertySpecifier10019);
					genericTypeIdent479=genericTypeIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeIdent479.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 96, classPropertySpecifier_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classPropertySpecifier"


	public static class classPropertyEndSpecifier_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classPropertyEndSpecifier"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:392:1: classPropertyEndSpecifier : ( STORED expression ';' | 'default' expression ';' | 'default' ';' | 'nodefault' ';' );
	public final DelphiParser.classPropertyEndSpecifier_return classPropertyEndSpecifier() throws RecognitionException {
		DelphiParser.classPropertyEndSpecifier_return retval = new DelphiParser.classPropertyEndSpecifier_return();
		retval.start = input.LT(1);
		int classPropertyEndSpecifier_StartIndex = input.index();

		Object root_0 = null;

		Token STORED480=null;
		Token char_literal482=null;
		Token string_literal483=null;
		Token char_literal485=null;
		Token string_literal486=null;
		Token char_literal487=null;
		Token string_literal488=null;
		Token char_literal489=null;
		ParserRuleReturnScope expression481 =null;
		ParserRuleReturnScope expression484 =null;

		Object STORED480_tree=null;
		Object char_literal482_tree=null;
		Object string_literal483_tree=null;
		Object char_literal485_tree=null;
		Object string_literal486_tree=null;
		Object char_literal487_tree=null;
		Object string_literal488_tree=null;
		Object char_literal489_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:392:30: ( STORED expression ';' | 'default' expression ';' | 'default' ';' | 'nodefault' ';' )
			int alt160=4;
			switch ( input.LA(1) ) {
			case STORED:
				{
				alt160=1;
				}
				break;
			case DEFAULT:
				{
				int LA160_2 = input.LA(2);
				if ( (LA160_2==SEMI) ) {
					int LA160_4 = input.LA(3);
					if ( (synpred221_Delphi()) ) {
						alt160=2;
					}
					else if ( (synpred222_Delphi()) ) {
						alt160=3;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 160, 4, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}
				else if ( (LA160_2==ABSOLUTE||(LA160_2 >= ADD && LA160_2 <= ANSISTRING)||LA160_2==AS||(LA160_2 >= AT && LA160_2 <= AT2)||LA160_2==BREAK||(LA160_2 >= CONTAINS && LA160_2 <= DEFAULT)||LA160_2==DISPID||LA160_2==DIV||LA160_2==DOT||(LA160_2 >= DQ && LA160_2 <= DW)||LA160_2==EQUAL||LA160_2==EXIT||LA160_2==EXPORT||LA160_2==FALSE||LA160_2==FINAL||(LA160_2 >= FUNCTION && LA160_2 <= GE)||(LA160_2 >= GT && LA160_2 <= HELPER)||(LA160_2 >= IMPLEMENTS && LA160_2 <= INHERITED)||LA160_2==IS||LA160_2==LBRACK||LA160_2==LE||(LA160_2 >= LOCAL && LA160_2 <= NAME)||LA160_2==NIL||(LA160_2 >= NOT && LA160_2 <= OBJECT)||(LA160_2 >= OPERATOR && LA160_2 <= OUT)||(LA160_2 >= PLUS && LA160_2 <= PROCEDURE)||LA160_2==PUBLIC||LA160_2==QuotedString||(LA160_2 >= READ && LA160_2 <= READONLY)||(LA160_2 >= REFERENCE && LA160_2 <= REGISTER)||LA160_2==REMOVE||(LA160_2 >= SHL && LA160_2 <= STATIC)||(LA160_2 >= STORED && LA160_2 <= STRING)||LA160_2==TRUE||(LA160_2 >= TkHexNum && LA160_2 <= TkIntNum)||LA160_2==TkRealNum||LA160_2==UNSAFE||(LA160_2 >= VARARGS && LA160_2 <= VIRTUAL)||(LA160_2 >= WRITE && LA160_2 <= WRITEONLY)||(LA160_2 >= XOR && LA160_2 <= 210)) ) {
					alt160=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 160, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case NODEFAULT:
				{
				alt160=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 160, 0, input);
				throw nvae;
			}
			switch (alt160) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:392:32: STORED expression ';'
					{
					root_0 = (Object)adaptor.nil();


					STORED480=(Token)match(input,STORED,FOLLOW_STORED_in_classPropertyEndSpecifier10059); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					STORED480_tree = (Object)adaptor.create(STORED480);
					adaptor.addChild(root_0, STORED480_tree);
					}

					pushFollow(FOLLOW_expression_in_classPropertyEndSpecifier10061);
					expression481=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression481.getTree());

					char_literal482=(Token)match(input,SEMI,FOLLOW_SEMI_in_classPropertyEndSpecifier10063); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal482_tree = (Object)adaptor.create(char_literal482);
					adaptor.addChild(root_0, char_literal482_tree);
					}

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:393:32: 'default' expression ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal483=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_classPropertyEndSpecifier10100); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal483_tree = (Object)adaptor.create(string_literal483);
					adaptor.addChild(root_0, string_literal483_tree);
					}

					pushFollow(FOLLOW_expression_in_classPropertyEndSpecifier10102);
					expression484=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression484.getTree());

					char_literal485=(Token)match(input,SEMI,FOLLOW_SEMI_in_classPropertyEndSpecifier10104); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal485_tree = (Object)adaptor.create(char_literal485);
					adaptor.addChild(root_0, char_literal485_tree);
					}

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:394:32: 'default' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal486=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_classPropertyEndSpecifier10137); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal486_tree = (Object)adaptor.create(string_literal486);
					adaptor.addChild(root_0, string_literal486_tree);
					}

					char_literal487=(Token)match(input,SEMI,FOLLOW_SEMI_in_classPropertyEndSpecifier10139); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal487_tree = (Object)adaptor.create(char_literal487);
					adaptor.addChild(root_0, char_literal487_tree);
					}

					}
					break;
				case 4 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:395:32: 'nodefault' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal488=(Token)match(input,NODEFAULT,FOLLOW_NODEFAULT_in_classPropertyEndSpecifier10172); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal488_tree = (Object)adaptor.create(string_literal488);
					adaptor.addChild(root_0, string_literal488_tree);
					}

					char_literal489=(Token)match(input,SEMI,FOLLOW_SEMI_in_classPropertyEndSpecifier10174); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal489_tree = (Object)adaptor.create(char_literal489);
					adaptor.addChild(root_0, char_literal489_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 97, classPropertyEndSpecifier_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classPropertyEndSpecifier"


	public static class classPropertyReadWrite_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classPropertyReadWrite"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:398:1: classPropertyReadWrite : ( 'read' qualifiedIdent ( '[' expression ']' )? -> ^( 'read' qualifiedIdent ) | 'write' qualifiedIdent ( '[' expression ']' )? -> ^( 'write' qualifiedIdent ) );
	public final DelphiParser.classPropertyReadWrite_return classPropertyReadWrite() throws RecognitionException {
		DelphiParser.classPropertyReadWrite_return retval = new DelphiParser.classPropertyReadWrite_return();
		retval.start = input.LT(1);
		int classPropertyReadWrite_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal490=null;
		Token char_literal492=null;
		Token char_literal494=null;
		Token string_literal495=null;
		Token char_literal497=null;
		Token char_literal499=null;
		ParserRuleReturnScope qualifiedIdent491 =null;
		ParserRuleReturnScope expression493 =null;
		ParserRuleReturnScope qualifiedIdent496 =null;
		ParserRuleReturnScope expression498 =null;

		Object string_literal490_tree=null;
		Object char_literal492_tree=null;
		Object char_literal494_tree=null;
		Object string_literal495_tree=null;
		Object char_literal497_tree=null;
		Object char_literal499_tree=null;
		RewriteRuleTokenStream stream_READ=new RewriteRuleTokenStream(adaptor,"token READ");
		RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
		RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
		RewriteRuleTokenStream stream_WRITE=new RewriteRuleTokenStream(adaptor,"token WRITE");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_qualifiedIdent=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdent");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:398:30: ( 'read' qualifiedIdent ( '[' expression ']' )? -> ^( 'read' qualifiedIdent ) | 'write' qualifiedIdent ( '[' expression ']' )? -> ^( 'write' qualifiedIdent ) )
			int alt163=2;
			int LA163_0 = input.LA(1);
			if ( (LA163_0==READ) ) {
				alt163=1;
			}
			else if ( (LA163_0==WRITE) ) {
				alt163=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 163, 0, input);
				throw nvae;
			}

			switch (alt163) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:398:32: 'read' qualifiedIdent ( '[' expression ']' )?
					{
					string_literal490=(Token)match(input,READ,FOLLOW_READ_in_classPropertyReadWrite10218); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_READ.add(string_literal490);

					pushFollow(FOLLOW_qualifiedIdent_in_classPropertyReadWrite10220);
					qualifiedIdent491=qualifiedIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_qualifiedIdent.add(qualifiedIdent491.getTree());
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:398:54: ( '[' expression ']' )?
					int alt161=2;
					int LA161_0 = input.LA(1);
					if ( (LA161_0==LBRACK) ) {
						alt161=1;
					}
					switch (alt161) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:398:55: '[' expression ']'
							{
							char_literal492=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_classPropertyReadWrite10223); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LBRACK.add(char_literal492);

							pushFollow(FOLLOW_expression_in_classPropertyReadWrite10225);
							expression493=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_expression.add(expression493.getTree());
							char_literal494=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_classPropertyReadWrite10227); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_RBRACK.add(char_literal494);

							}
							break;

					}

					// AST REWRITE
					// elements: qualifiedIdent, READ
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 399:30: -> ^( 'read' qualifiedIdent )
					{
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:399:33: ^( 'read' qualifiedIdent )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_READ.nextNode(), root_1);
						adaptor.addChild(root_1, stream_qualifiedIdent.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:400:32: 'write' qualifiedIdent ( '[' expression ']' )?
					{
					string_literal495=(Token)match(input,WRITE,FOLLOW_WRITE_in_classPropertyReadWrite10301); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_WRITE.add(string_literal495);

					pushFollow(FOLLOW_qualifiedIdent_in_classPropertyReadWrite10303);
					qualifiedIdent496=qualifiedIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_qualifiedIdent.add(qualifiedIdent496.getTree());
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:400:55: ( '[' expression ']' )?
					int alt162=2;
					int LA162_0 = input.LA(1);
					if ( (LA162_0==LBRACK) ) {
						alt162=1;
					}
					switch (alt162) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:400:56: '[' expression ']'
							{
							char_literal497=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_classPropertyReadWrite10306); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LBRACK.add(char_literal497);

							pushFollow(FOLLOW_expression_in_classPropertyReadWrite10308);
							expression498=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_expression.add(expression498.getTree());
							char_literal499=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_classPropertyReadWrite10310); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_RBRACK.add(char_literal499);

							}
							break;

					}

					// AST REWRITE
					// elements: WRITE, qualifiedIdent
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 401:30: -> ^( 'write' qualifiedIdent )
					{
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:401:33: ^( 'write' qualifiedIdent )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_WRITE.nextNode(), root_1);
						adaptor.addChild(root_1, stream_qualifiedIdent.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 98, classPropertyReadWrite_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classPropertyReadWrite"


	public static class classPropertyDispInterface_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classPropertyDispInterface"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:403:1: classPropertyDispInterface : ( 'readonly' ';' | 'writeonly' ';' | dispIDDirective );
	public final DelphiParser.classPropertyDispInterface_return classPropertyDispInterface() throws RecognitionException {
		DelphiParser.classPropertyDispInterface_return retval = new DelphiParser.classPropertyDispInterface_return();
		retval.start = input.LT(1);
		int classPropertyDispInterface_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal500=null;
		Token char_literal501=null;
		Token string_literal502=null;
		Token char_literal503=null;
		ParserRuleReturnScope dispIDDirective504 =null;

		Object string_literal500_tree=null;
		Object char_literal501_tree=null;
		Object string_literal502_tree=null;
		Object char_literal503_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:403:30: ( 'readonly' ';' | 'writeonly' ';' | dispIDDirective )
			int alt164=3;
			switch ( input.LA(1) ) {
			case READONLY:
				{
				alt164=1;
				}
				break;
			case WRITEONLY:
				{
				alt164=2;
				}
				break;
			case DISPID:
				{
				alt164=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 164, 0, input);
				throw nvae;
			}
			switch (alt164) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:403:32: 'readonly' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal500=(Token)match(input,READONLY,FOLLOW_READONLY_in_classPropertyDispInterface10389); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal500_tree = (Object)adaptor.create(string_literal500);
					adaptor.addChild(root_0, string_literal500_tree);
					}

					char_literal501=(Token)match(input,SEMI,FOLLOW_SEMI_in_classPropertyDispInterface10391); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal501_tree = (Object)adaptor.create(char_literal501);
					adaptor.addChild(root_0, char_literal501_tree);
					}

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:404:32: 'writeonly' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal502=(Token)match(input,WRITEONLY,FOLLOW_WRITEONLY_in_classPropertyDispInterface10424); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal502_tree = (Object)adaptor.create(string_literal502);
					adaptor.addChild(root_0, string_literal502_tree);
					}

					char_literal503=(Token)match(input,SEMI,FOLLOW_SEMI_in_classPropertyDispInterface10426); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal503_tree = (Object)adaptor.create(char_literal503);
					adaptor.addChild(root_0, char_literal503_tree);
					}

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:405:32: dispIDDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_dispIDDirective_in_classPropertyDispInterface10459);
					dispIDDirective504=dispIDDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dispIDDirective504.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 99, classPropertyDispInterface_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classPropertyDispInterface"


	public static class visibility_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "visibility"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:407:1: visibility : ( ( STRICT )? 'protected' | ( STRICT )? 'private' | 'public' | 'published' | 'automated' );
	public final DelphiParser.visibility_return visibility() throws RecognitionException {
		DelphiParser.visibility_return retval = new DelphiParser.visibility_return();
		retval.start = input.LT(1);
		int visibility_StartIndex = input.index();

		Object root_0 = null;

		Token STRICT505=null;
		Token string_literal506=null;
		Token STRICT507=null;
		Token string_literal508=null;
		Token string_literal509=null;
		Token string_literal510=null;
		Token string_literal511=null;

		Object STRICT505_tree=null;
		Object string_literal506_tree=null;
		Object STRICT507_tree=null;
		Object string_literal508_tree=null;
		Object string_literal509_tree=null;
		Object string_literal510_tree=null;
		Object string_literal511_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:407:30: ( ( STRICT )? 'protected' | ( STRICT )? 'private' | 'public' | 'published' | 'automated' )
			int alt167=5;
			switch ( input.LA(1) ) {
			case STRICT:
				{
				int LA167_1 = input.LA(2);
				if ( (LA167_1==PROTECTED) ) {
					alt167=1;
				}
				else if ( (LA167_1==PRIVATE) ) {
					alt167=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 167, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PROTECTED:
				{
				alt167=1;
				}
				break;
			case PRIVATE:
				{
				alt167=2;
				}
				break;
			case PUBLIC:
				{
				alt167=3;
				}
				break;
			case PUBLISHED:
				{
				alt167=4;
				}
				break;
			case AUTOMATED:
				{
				alt167=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 167, 0, input);
				throw nvae;
			}
			switch (alt167) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:407:32: ( STRICT )? 'protected'
					{
					root_0 = (Object)adaptor.nil();


					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:407:32: ( STRICT )?
					int alt165=2;
					int LA165_0 = input.LA(1);
					if ( (LA165_0==STRICT) ) {
						alt165=1;
					}
					switch (alt165) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:407:33: STRICT
							{
							STRICT505=(Token)match(input,STRICT,FOLLOW_STRICT_in_visibility10515); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							STRICT505_tree = (Object)adaptor.create(STRICT505);
							adaptor.addChild(root_0, STRICT505_tree);
							}

							}
							break;

					}

					string_literal506=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_visibility10519); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal506_tree = (Object)adaptor.create(string_literal506);
					adaptor.addChild(root_0, string_literal506_tree);
					}

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:408:32: ( STRICT )? 'private'
					{
					root_0 = (Object)adaptor.nil();


					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:408:32: ( STRICT )?
					int alt166=2;
					int LA166_0 = input.LA(1);
					if ( (LA166_0==STRICT) ) {
						alt166=1;
					}
					switch (alt166) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:408:33: STRICT
							{
							STRICT507=(Token)match(input,STRICT,FOLLOW_STRICT_in_visibility10553); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							STRICT507_tree = (Object)adaptor.create(STRICT507);
							adaptor.addChild(root_0, STRICT507_tree);
							}

							}
							break;

					}

					string_literal508=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_visibility10557); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal508_tree = (Object)adaptor.create(string_literal508);
					adaptor.addChild(root_0, string_literal508_tree);
					}

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:409:32: 'public'
					{
					root_0 = (Object)adaptor.nil();


					string_literal509=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_visibility10590); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal509_tree = (Object)adaptor.create(string_literal509);
					adaptor.addChild(root_0, string_literal509_tree);
					}

					}
					break;
				case 4 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:32: 'published'
					{
					root_0 = (Object)adaptor.nil();


					string_literal510=(Token)match(input,PUBLISHED,FOLLOW_PUBLISHED_in_visibility10623); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal510_tree = (Object)adaptor.create(string_literal510);
					adaptor.addChild(root_0, string_literal510_tree);
					}

					}
					break;
				case 5 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:32: 'automated'
					{
					root_0 = (Object)adaptor.nil();


					string_literal511=(Token)match(input,AUTOMATED,FOLLOW_AUTOMATED_in_visibility10656); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal511_tree = (Object)adaptor.create(string_literal511);
					adaptor.addChild(root_0, string_literal511_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 100, visibility_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "visibility"


	public static class exportedProcHeading_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "exportedProcHeading"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:416:1: exportedProcHeading : ( 'procedure' ident ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( functionDirective )* | 'function' ident ( formalParameterSection )? ';' ( functionDirective )* );
	public final DelphiParser.exportedProcHeading_return exportedProcHeading() throws RecognitionException {
		DelphiParser.exportedProcHeading_return retval = new DelphiParser.exportedProcHeading_return();
		retval.start = input.LT(1);
		int exportedProcHeading_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal512=null;
		Token char_literal515=null;
		Token char_literal518=null;
		Token string_literal520=null;
		Token char_literal523=null;
		ParserRuleReturnScope ident513 =null;
		ParserRuleReturnScope formalParameterSection514 =null;
		ParserRuleReturnScope customAttribute516 =null;
		ParserRuleReturnScope typeDecl517 =null;
		ParserRuleReturnScope functionDirective519 =null;
		ParserRuleReturnScope ident521 =null;
		ParserRuleReturnScope formalParameterSection522 =null;
		ParserRuleReturnScope functionDirective524 =null;

		Object string_literal512_tree=null;
		Object char_literal515_tree=null;
		Object char_literal518_tree=null;
		Object string_literal520_tree=null;
		Object char_literal523_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:416:30: ( 'procedure' ident ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( functionDirective )* | 'function' ident ( formalParameterSection )? ';' ( functionDirective )* )
			int alt173=2;
			int LA173_0 = input.LA(1);
			if ( (LA173_0==PROCEDURE) ) {
				alt173=1;
			}
			else if ( (LA173_0==FUNCTION) ) {
				alt173=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 173, 0, input);
				throw nvae;
			}

			switch (alt173) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:416:32: 'procedure' ident ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( functionDirective )*
					{
					root_0 = (Object)adaptor.nil();


					string_literal512=(Token)match(input,PROCEDURE,FOLLOW_PROCEDURE_in_exportedProcHeading10710); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal512_tree = (Object)adaptor.create(string_literal512);
					adaptor.addChild(root_0, string_literal512_tree);
					}

					pushFollow(FOLLOW_ident_in_exportedProcHeading10712);
					ident513=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident513.getTree());

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:416:50: ( formalParameterSection )?
					int alt168=2;
					int LA168_0 = input.LA(1);
					if ( (LA168_0==LPAREN) ) {
						alt168=1;
					}
					switch (alt168) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:416:51: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_exportedProcHeading10715);
							formalParameterSection514=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterSection514.getTree());

							}
							break;

					}

					char_literal515=(Token)match(input,COLON,FOLLOW_COLON_in_exportedProcHeading10719); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal515_tree = (Object)adaptor.create(char_literal515);
					adaptor.addChild(root_0, char_literal515_tree);
					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:416:80: ( customAttribute )?
					int alt169=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							int LA169_1 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case PACKED:
							{
							int LA169_2 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case ARRAY:
							{
							int LA169_3 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case SET:
							{
							int LA169_4 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case FILE:
							{
							int LA169_5 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case CLASS:
							{
							int LA169_6 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case DISPINTERFACE:
						case INTERFACE:
							{
							int LA169_7 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case OBJECT:
							{
							int LA169_8 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case RECORD:
							{
							int LA169_9 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case POINTER2:
							{
							int LA169_10 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case POINTER:
							{
							int LA169_11 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case STRING:
							{
							int LA169_12 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case TYPE:
							{
							int LA169_13 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case ANSISTRING:
							{
							int LA169_14 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case FUNCTION:
							{
							int LA169_15 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case PROCEDURE:
							{
							int LA169_16 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case REFERENCE:
							{
							int LA169_17 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case VARIANT:
							{
							int LA169_18 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case LPAREN:
							{
							int LA169_19 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case AT2:
							{
							int LA169_20 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case 199:
							{
							int LA169_21 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case NOT:
							{
							int LA169_22 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case PLUS:
							{
							int LA169_23 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case MINUS:
							{
							int LA169_24 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case TkRealNum:
							{
							int LA169_25 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case TkHexNum:
						case TkIntNum:
							{
							int LA169_26 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case TRUE:
							{
							int LA169_27 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case FALSE:
							{
							int LA169_28 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case NIL:
							{
							int LA169_29 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case 210:
							{
							int LA169_30 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case ControlChar:
							{
							int LA169_31 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case QuotedString:
							{
							int LA169_32 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case 203:
							{
							int LA169_33 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case INHERITED:
							{
							int LA169_34 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case TkIdentifier:
							{
							int LA169_35 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case 198:
							{
							int LA169_36 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case IN:
							{
							int LA169_37 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case 209:
							{
							int LA169_38 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case DOT:
							{
							int LA169_39 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case LT:
							{
							int LA169_40 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case AND:
						case AS:
						case DIV:
						case MOD:
						case OR:
						case SHL:
						case SHR:
						case SLASH:
						case STAR:
						case XOR:
						case 200:
						case 201:
						case 202:
						case 204:
						case 205:
						case 206:
						case 207:
						case 208:
							{
							int LA169_41 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case ABSOLUTE:
						case ADD:
						case AT:
						case BREAK:
						case CONTAINS:
						case CONTINUE:
						case DEFAULT:
						case DISPID:
						case DQ:
						case DW:
						case EXIT:
						case EXPORT:
						case FINAL:
						case HELPER:
						case IMPLEMENTS:
						case INDEX:
						case LOCAL:
						case MESSAGE:
						case NAME:
						case OPERATOR:
						case OUT:
						case PRIVATE:
						case PUBLIC:
						case READ:
						case READONLY:
						case REGISTER:
						case REMOVE:
						case STATIC:
						case STORED:
						case STRICT:
						case UNSAFE:
						case VARARGS:
						case VIRTUAL:
						case WRITE:
						case WRITEONLY:
							{
							int LA169_42 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case EQUAL:
							{
							int LA169_43 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case GE:
						case GT:
						case IS:
						case LE:
						case NOT_EQUAL:
							{
							int LA169_44 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
						case DOTDOT:
							{
							int LA169_45 = input.LA(2);
							if ( (synpred235_Delphi()) ) {
								alt169=1;
							}
							}
							break;
					}
					switch (alt169) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:416:81: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_exportedProcHeading10722);
							customAttribute516=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, customAttribute516.getTree());

							}
							break;

					}

					pushFollow(FOLLOW_typeDecl_in_exportedProcHeading10726);
					typeDecl517=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl517.getTree());

					char_literal518=(Token)match(input,SEMI,FOLLOW_SEMI_in_exportedProcHeading10728); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal518_tree = (Object)adaptor.create(char_literal518);
					adaptor.addChild(root_0, char_literal518_tree);
					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:416:112: ( functionDirective )*
					loop170:
					while (true) {
						int alt170=2;
						int LA170_0 = input.LA(1);
						if ( (LA170_0==ASSEMBLER||LA170_0==CDECL||LA170_0==DEPRECATED||(LA170_0 >= EXPERIMENTAL && LA170_0 <= EXPORT)||LA170_0==EXTERNAL||LA170_0==FAR||LA170_0==INLINE||(LA170_0 >= LIBRARY && LA170_0 <= LOCAL)||LA170_0==NEAR||LA170_0==OVERLOAD||(LA170_0 >= PASCAL && LA170_0 <= PLATFORM)||LA170_0==REGISTER||LA170_0==SAFECALL||LA170_0==STDCALL||LA170_0==UNSAFE||LA170_0==VARARGS) ) {
							alt170=1;
						}

						switch (alt170) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:416:113: functionDirective
							{
							pushFollow(FOLLOW_functionDirective_in_exportedProcHeading10731);
							functionDirective519=functionDirective();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, functionDirective519.getTree());

							}
							break;

						default :
							break loop170;
						}
					}

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:417:32: 'function' ident ( formalParameterSection )? ';' ( functionDirective )*
					{
					root_0 = (Object)adaptor.nil();


					string_literal520=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_exportedProcHeading10766); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal520_tree = (Object)adaptor.create(string_literal520);
					adaptor.addChild(root_0, string_literal520_tree);
					}

					pushFollow(FOLLOW_ident_in_exportedProcHeading10768);
					ident521=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident521.getTree());

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:417:49: ( formalParameterSection )?
					int alt171=2;
					int LA171_0 = input.LA(1);
					if ( (LA171_0==LPAREN) ) {
						alt171=1;
					}
					switch (alt171) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:417:50: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_exportedProcHeading10771);
							formalParameterSection522=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterSection522.getTree());

							}
							break;

					}

					char_literal523=(Token)match(input,SEMI,FOLLOW_SEMI_in_exportedProcHeading10775); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal523_tree = (Object)adaptor.create(char_literal523);
					adaptor.addChild(root_0, char_literal523_tree);
					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:417:79: ( functionDirective )*
					loop172:
					while (true) {
						int alt172=2;
						int LA172_0 = input.LA(1);
						if ( (LA172_0==ASSEMBLER||LA172_0==CDECL||LA172_0==DEPRECATED||(LA172_0 >= EXPERIMENTAL && LA172_0 <= EXPORT)||LA172_0==EXTERNAL||LA172_0==FAR||LA172_0==INLINE||(LA172_0 >= LIBRARY && LA172_0 <= LOCAL)||LA172_0==NEAR||LA172_0==OVERLOAD||(LA172_0 >= PASCAL && LA172_0 <= PLATFORM)||LA172_0==REGISTER||LA172_0==SAFECALL||LA172_0==STDCALL||LA172_0==UNSAFE||LA172_0==VARARGS) ) {
							alt172=1;
						}

						switch (alt172) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:417:80: functionDirective
							{
							pushFollow(FOLLOW_functionDirective_in_exportedProcHeading10778);
							functionDirective524=functionDirective();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, functionDirective524.getTree());

							}
							break;

						default :
							break loop172;
						}
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 101, exportedProcHeading_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "exportedProcHeading"


	public static class methodDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodDecl"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:1: methodDecl : methodDeclHeading ';' ( methodDirective )* ( methodBody )? -> methodDeclHeading ( methodBody )? ;
	public final DelphiParser.methodDecl_return methodDecl() throws RecognitionException {
		DelphiParser.methodDecl_return retval = new DelphiParser.methodDecl_return();
		retval.start = input.LT(1);
		int methodDecl_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal526=null;
		ParserRuleReturnScope methodDeclHeading525 =null;
		ParserRuleReturnScope methodDirective527 =null;
		ParserRuleReturnScope methodBody528 =null;

		Object char_literal526_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_methodBody=new RewriteRuleSubtreeStream(adaptor,"rule methodBody");
		RewriteRuleSubtreeStream stream_methodDirective=new RewriteRuleSubtreeStream(adaptor,"rule methodDirective");
		RewriteRuleSubtreeStream stream_methodDeclHeading=new RewriteRuleSubtreeStream(adaptor,"rule methodDeclHeading");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:30: ( methodDeclHeading ';' ( methodDirective )* ( methodBody )? -> methodDeclHeading ( methodBody )? )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:32: methodDeclHeading ';' ( methodDirective )* ( methodBody )?
			{
			pushFollow(FOLLOW_methodDeclHeading_in_methodDecl10835);
			methodDeclHeading525=methodDeclHeading();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_methodDeclHeading.add(methodDeclHeading525.getTree());
			char_literal526=(Token)match(input,SEMI,FOLLOW_SEMI_in_methodDecl10837); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal526);

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:54: ( methodDirective )*
			loop174:
			while (true) {
				int alt174=2;
				alt174 = dfa174.predict(input);
				switch (alt174) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:55: methodDirective
					{
					pushFollow(FOLLOW_methodDirective_in_methodDecl10840);
					methodDirective527=methodDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodDirective.add(methodDirective527.getTree());
					}
					break;

				default :
					break loop174;
				}
			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:73: ( methodBody )?
			int alt175=2;
			switch ( input.LA(1) ) {
				case LABEL:
					{
					int LA175_1 = input.LA(2);
					if ( (synpred241_Delphi()) ) {
						alt175=1;
					}
					}
					break;
				case CONST:
				case RESOURCESTRING:
					{
					int LA175_2 = input.LA(2);
					if ( (synpred241_Delphi()) ) {
						alt175=1;
					}
					}
					break;
				case TYPE:
					{
					int LA175_3 = input.LA(2);
					if ( (synpred241_Delphi()) ) {
						alt175=1;
					}
					}
					break;
				case THREADVAR:
				case VAR:
					{
					int LA175_4 = input.LA(2);
					if ( (synpred241_Delphi()) ) {
						alt175=1;
					}
					}
					break;
				case LBRACK:
					{
					int LA175_5 = input.LA(2);
					if ( (synpred241_Delphi()) ) {
						alt175=1;
					}
					}
					break;
				case CLASS:
					{
					int LA175_6 = input.LA(2);
					if ( (synpred241_Delphi()) ) {
						alt175=1;
					}
					}
					break;
				case PROCEDURE:
					{
					int LA175_7 = input.LA(2);
					if ( (synpred241_Delphi()) ) {
						alt175=1;
					}
					}
					break;
				case FUNCTION:
					{
					int LA175_8 = input.LA(2);
					if ( (synpred241_Delphi()) ) {
						alt175=1;
					}
					}
					break;
				case CONSTRUCTOR:
				case DESTRUCTOR:
					{
					int LA175_9 = input.LA(2);
					if ( (synpred241_Delphi()) ) {
						alt175=1;
					}
					}
					break;
				case EXPORTS:
					{
					int LA175_10 = input.LA(2);
					if ( (synpred241_Delphi()) ) {
						alt175=1;
					}
					}
					break;
				case BEGIN:
					{
					int LA175_11 = input.LA(2);
					if ( (synpred241_Delphi()) ) {
						alt175=1;
					}
					}
					break;
				case ASM:
					{
					int LA175_12 = input.LA(2);
					if ( (synpred241_Delphi()) ) {
						alt175=1;
					}
					}
					break;
				case SEMI:
					{
					int LA175_13 = input.LA(2);
					if ( (synpred241_Delphi()) ) {
						alt175=1;
					}
					}
					break;
			}
			switch (alt175) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:74: methodBody
					{
					pushFollow(FOLLOW_methodBody_in_methodDecl10845);
					methodBody528=methodBody();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodBody.add(methodBody528.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: methodDeclHeading, methodBody
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 419:87: -> methodDeclHeading ( methodBody )?
			{
				adaptor.addChild(root_0, stream_methodDeclHeading.nextTree());
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:108: ( methodBody )?
				if ( stream_methodBody.hasNext() ) {
					adaptor.addChild(root_0, stream_methodBody.nextTree());
				}
				stream_methodBody.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 102, methodDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodDecl"


	public static class methodDeclHeading_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodDeclHeading"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:1: methodDeclHeading : ( ( customAttribute )? ( 'class' )? methodKey methodName ( formalParameterSection )? -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ) | ( customAttribute )? ( 'class' )? 'function' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )? -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) ) | ( customAttribute )? 'class' 'operator' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )? -> ( customAttribute )? 'class' ^( 'operator' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) ) );
	public final DelphiParser.methodDeclHeading_return methodDeclHeading() throws RecognitionException {
		DelphiParser.methodDeclHeading_return retval = new DelphiParser.methodDeclHeading_return();
		retval.start = input.LT(1);
		int methodDeclHeading_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal530=null;
		Token string_literal535=null;
		Token string_literal536=null;
		Token char_literal539=null;
		Token string_literal543=null;
		Token string_literal544=null;
		Token char_literal547=null;
		ParserRuleReturnScope customAttribute529 =null;
		ParserRuleReturnScope methodKey531 =null;
		ParserRuleReturnScope methodName532 =null;
		ParserRuleReturnScope formalParameterSection533 =null;
		ParserRuleReturnScope customAttribute534 =null;
		ParserRuleReturnScope methodName537 =null;
		ParserRuleReturnScope formalParameterSection538 =null;
		ParserRuleReturnScope customAttribute540 =null;
		ParserRuleReturnScope typeDecl541 =null;
		ParserRuleReturnScope customAttribute542 =null;
		ParserRuleReturnScope methodName545 =null;
		ParserRuleReturnScope formalParameterSection546 =null;
		ParserRuleReturnScope customAttribute548 =null;
		ParserRuleReturnScope typeDecl549 =null;

		Object string_literal530_tree=null;
		Object string_literal535_tree=null;
		Object string_literal536_tree=null;
		Object char_literal539_tree=null;
		Object string_literal543_tree=null;
		Object string_literal544_tree=null;
		Object char_literal547_tree=null;
		RewriteRuleTokenStream stream_OPERATOR=new RewriteRuleTokenStream(adaptor,"token OPERATOR");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
		RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_methodKey=new RewriteRuleSubtreeStream(adaptor,"rule methodKey");
		RewriteRuleSubtreeStream stream_formalParameterSection=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterSection");
		RewriteRuleSubtreeStream stream_methodName=new RewriteRuleSubtreeStream(adaptor,"rule methodName");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:30: ( ( customAttribute )? ( 'class' )? methodKey methodName ( formalParameterSection )? -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ) | ( customAttribute )? ( 'class' )? 'function' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )? -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) ) | ( customAttribute )? 'class' 'operator' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )? -> ( customAttribute )? 'class' ^( 'operator' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) ) )
			int alt188=3;
			switch ( input.LA(1) ) {
			case LBRACK:
				{
				int LA188_1 = input.LA(2);
				if ( (synpred245_Delphi()) ) {
					alt188=1;
				}
				else if ( (synpred251_Delphi()) ) {
					alt188=2;
				}
				else if ( (true) ) {
					alt188=3;
				}

				}
				break;
			case CLASS:
				{
				int LA188_2 = input.LA(2);
				if ( (synpred245_Delphi()) ) {
					alt188=1;
				}
				else if ( (synpred251_Delphi()) ) {
					alt188=2;
				}
				else if ( (true) ) {
					alt188=3;
				}

				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case PROCEDURE:
				{
				alt188=1;
				}
				break;
			case FUNCTION:
				{
				alt188=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 188, 0, input);
				throw nvae;
			}
			switch (alt188) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:32: ( customAttribute )? ( 'class' )? methodKey methodName ( formalParameterSection )?
					{
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:32: ( customAttribute )?
					int alt176=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							alt176=1;
							}
							break;
						case CLASS:
							{
							int LA176_2 = input.LA(2);
							if ( (synpred242_Delphi()) ) {
								alt176=1;
							}
							}
							break;
						case CONSTRUCTOR:
						case DESTRUCTOR:
						case PROCEDURE:
							{
							int LA176_3 = input.LA(2);
							if ( (synpred242_Delphi()) ) {
								alt176=1;
							}
							}
							break;
					}
					switch (alt176) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_methodDeclHeading10905);
							customAttribute529=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute529.getTree());
							}
							break;

					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:51: ( 'class' )?
					int alt177=2;
					int LA177_0 = input.LA(1);
					if ( (LA177_0==CLASS) ) {
						alt177=1;
					}
					switch (alt177) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:52: 'class'
							{
							string_literal530=(Token)match(input,CLASS,FOLLOW_CLASS_in_methodDeclHeading10910); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_CLASS.add(string_literal530);

							}
							break;

					}

					pushFollow(FOLLOW_methodKey_in_methodDeclHeading10915);
					methodKey531=methodKey();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodKey.add(methodKey531.getTree());
					pushFollow(FOLLOW_methodName_in_methodDeclHeading10917);
					methodName532=methodName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodName.add(methodName532.getTree());
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:84: ( formalParameterSection )?
					int alt178=2;
					int LA178_0 = input.LA(1);
					if ( (LA178_0==LPAREN) ) {
						alt178=1;
					}
					switch (alt178) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:85: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_methodDeclHeading10920);
							formalParameterSection533=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection533.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: methodKey, formalParameterSection, customAttribute, CLASS, methodName
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 422:30: -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) )
					{
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:33: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_0, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:52: ( 'class' )?
						if ( stream_CLASS.hasNext() ) {
							adaptor.addChild(root_0, stream_CLASS.nextNode());
						}
						stream_CLASS.reset();

						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:64: ^( methodKey ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_methodKey.nextNode(), root_1);
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:76: ^( TkFunctionName methodName )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_methodName.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:105: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:122: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:32: ( customAttribute )? ( 'class' )? 'function' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )?
					{
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:32: ( customAttribute )?
					int alt179=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							alt179=1;
							}
							break;
						case CLASS:
							{
							int LA179_2 = input.LA(2);
							if ( (synpred246_Delphi()) ) {
								alt179=1;
							}
							}
							break;
						case FUNCTION:
							{
							int LA179_3 = input.LA(2);
							if ( (synpred246_Delphi()) ) {
								alt179=1;
							}
							}
							break;
					}
					switch (alt179) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_methodDeclHeading11018);
							customAttribute534=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute534.getTree());
							}
							break;

					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:51: ( 'class' )?
					int alt180=2;
					int LA180_0 = input.LA(1);
					if ( (LA180_0==CLASS) ) {
						alt180=1;
					}
					switch (alt180) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:52: 'class'
							{
							string_literal535=(Token)match(input,CLASS,FOLLOW_CLASS_in_methodDeclHeading11023); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_CLASS.add(string_literal535);

							}
							break;

					}

					string_literal536=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_methodDeclHeading11027); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_FUNCTION.add(string_literal536);

					pushFollow(FOLLOW_methodName_in_methodDeclHeading11029);
					methodName537=methodName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodName.add(methodName537.getTree());
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:84: ( formalParameterSection )?
					int alt181=2;
					int LA181_0 = input.LA(1);
					if ( (LA181_0==LPAREN) ) {
						alt181=1;
					}
					switch (alt181) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:85: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_methodDeclHeading11032);
							formalParameterSection538=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection538.getTree());
							}
							break;

					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:110: ( ':' ( customAttribute )? typeDecl )?
					int alt183=2;
					int LA183_0 = input.LA(1);
					if ( (LA183_0==COLON) ) {
						alt183=1;
					}
					switch (alt183) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:111: ':' ( customAttribute )? typeDecl
							{
							char_literal539=(Token)match(input,COLON,FOLLOW_COLON_in_methodDeclHeading11037); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COLON.add(char_literal539);

							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:115: ( customAttribute )?
							int alt182=2;
							switch ( input.LA(1) ) {
								case LBRACK:
									{
									int LA182_1 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case PACKED:
									{
									int LA182_2 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case ARRAY:
									{
									int LA182_3 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case SET:
									{
									int LA182_4 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case FILE:
									{
									int LA182_5 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case CLASS:
									{
									int LA182_6 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case DISPINTERFACE:
								case INTERFACE:
									{
									int LA182_7 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case OBJECT:
									{
									int LA182_8 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case RECORD:
									{
									int LA182_9 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case POINTER2:
									{
									int LA182_10 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case POINTER:
									{
									int LA182_11 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case STRING:
									{
									int LA182_12 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case TYPE:
									{
									int LA182_13 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case ANSISTRING:
									{
									int LA182_14 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case FUNCTION:
									{
									int LA182_15 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case PROCEDURE:
									{
									int LA182_16 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case REFERENCE:
									{
									int LA182_17 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case VARIANT:
									{
									int LA182_18 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case LPAREN:
									{
									int LA182_19 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case AT2:
									{
									int LA182_20 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case 199:
									{
									int LA182_21 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case NOT:
									{
									int LA182_22 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case PLUS:
									{
									int LA182_23 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case MINUS:
									{
									int LA182_24 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case TkRealNum:
									{
									int LA182_25 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case TkHexNum:
								case TkIntNum:
									{
									int LA182_26 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case TRUE:
									{
									int LA182_27 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case FALSE:
									{
									int LA182_28 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case NIL:
									{
									int LA182_29 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case 210:
									{
									int LA182_30 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case ControlChar:
									{
									int LA182_31 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case QuotedString:
									{
									int LA182_32 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case 203:
									{
									int LA182_33 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case INHERITED:
									{
									int LA182_34 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case TkIdentifier:
									{
									int LA182_35 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case 198:
									{
									int LA182_36 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case IN:
									{
									int LA182_37 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case 209:
									{
									int LA182_38 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case DOT:
									{
									int LA182_39 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case LT:
									{
									int LA182_40 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case AND:
								case AS:
								case DIV:
								case MOD:
								case OR:
								case SHL:
								case SHR:
								case SLASH:
								case STAR:
								case XOR:
								case 200:
								case 201:
								case 202:
								case 204:
								case 205:
								case 206:
								case 207:
								case 208:
									{
									int LA182_41 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case ABSOLUTE:
								case ADD:
								case AT:
								case BREAK:
								case CONTAINS:
								case CONTINUE:
								case DEFAULT:
								case DISPID:
								case DQ:
								case DW:
								case EXIT:
								case EXPORT:
								case FINAL:
								case HELPER:
								case IMPLEMENTS:
								case INDEX:
								case LOCAL:
								case MESSAGE:
								case NAME:
								case OPERATOR:
								case OUT:
								case PRIVATE:
								case PUBLIC:
								case READ:
								case READONLY:
								case REGISTER:
								case REMOVE:
								case STATIC:
								case STORED:
								case STRICT:
								case UNSAFE:
								case VARARGS:
								case VIRTUAL:
								case WRITE:
								case WRITEONLY:
									{
									int LA182_42 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case EQUAL:
									{
									int LA182_43 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case GE:
								case GT:
								case IS:
								case LE:
								case NOT_EQUAL:
									{
									int LA182_44 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case DOTDOT:
									{
									int LA182_45 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
							}
							switch (alt182) {
								case 1 :
									// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:116: customAttribute
									{
									pushFollow(FOLLOW_customAttribute_in_methodDeclHeading11040);
									customAttribute540=customAttribute();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute540.getTree());
									}
									break;

							}

							pushFollow(FOLLOW_typeDecl_in_methodDeclHeading11044);
							typeDecl541=typeDecl();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl541.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: typeDecl, CLASS, methodName, FUNCTION, customAttribute, customAttribute, formalParameterSection
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 424:30: -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) )
					{
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:33: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_0, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:52: ( 'class' )?
						if ( stream_CLASS.hasNext() ) {
							adaptor.addChild(root_0, stream_CLASS.nextNode());
						}
						stream_CLASS.reset();

						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:63: ^( 'function' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_FUNCTION.nextNode(), root_1);
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:76: ^( TkFunctionName methodName )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_methodName.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:105: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:122: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:149: ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionReturn, "TkFunctionReturn"), root_2);
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:168: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_2, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:187: ( typeDecl )?
						if ( stream_typeDecl.hasNext() ) {
							adaptor.addChild(root_2, stream_typeDecl.nextTree());
						}
						stream_typeDecl.reset();

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:32: ( customAttribute )? 'class' 'operator' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )?
					{
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:32: ( customAttribute )?
					int alt184=2;
					int LA184_0 = input.LA(1);
					if ( (LA184_0==LBRACK) ) {
						alt184=1;
					}
					else if ( (LA184_0==CLASS) ) {
						int LA184_2 = input.LA(2);
						if ( (synpred252_Delphi()) ) {
							alt184=1;
						}
					}
					switch (alt184) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_methodDeclHeading11153);
							customAttribute542=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute542.getTree());
							}
							break;

					}

					string_literal543=(Token)match(input,CLASS,FOLLOW_CLASS_in_methodDeclHeading11157); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_CLASS.add(string_literal543);

					string_literal544=(Token)match(input,OPERATOR,FOLLOW_OPERATOR_in_methodDeclHeading11159); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_OPERATOR.add(string_literal544);

					pushFollow(FOLLOW_methodName_in_methodDeclHeading11161);
					methodName545=methodName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodName.add(methodName545.getTree());
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:81: ( formalParameterSection )?
					int alt185=2;
					int LA185_0 = input.LA(1);
					if ( (LA185_0==LPAREN) ) {
						alt185=1;
					}
					switch (alt185) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:82: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_methodDeclHeading11164);
							formalParameterSection546=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection546.getTree());
							}
							break;

					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:107: ( ':' ( customAttribute )? typeDecl )?
					int alt187=2;
					int LA187_0 = input.LA(1);
					if ( (LA187_0==COLON) ) {
						alt187=1;
					}
					switch (alt187) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:108: ':' ( customAttribute )? typeDecl
							{
							char_literal547=(Token)match(input,COLON,FOLLOW_COLON_in_methodDeclHeading11169); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COLON.add(char_literal547);

							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:112: ( customAttribute )?
							int alt186=2;
							switch ( input.LA(1) ) {
								case LBRACK:
									{
									int LA186_1 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case PACKED:
									{
									int LA186_2 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case ARRAY:
									{
									int LA186_3 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case SET:
									{
									int LA186_4 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case FILE:
									{
									int LA186_5 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case CLASS:
									{
									int LA186_6 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case DISPINTERFACE:
								case INTERFACE:
									{
									int LA186_7 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case OBJECT:
									{
									int LA186_8 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case RECORD:
									{
									int LA186_9 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case POINTER2:
									{
									int LA186_10 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case POINTER:
									{
									int LA186_11 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case STRING:
									{
									int LA186_12 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case TYPE:
									{
									int LA186_13 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case ANSISTRING:
									{
									int LA186_14 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case FUNCTION:
									{
									int LA186_15 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case PROCEDURE:
									{
									int LA186_16 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case REFERENCE:
									{
									int LA186_17 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case VARIANT:
									{
									int LA186_18 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case LPAREN:
									{
									int LA186_19 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case AT2:
									{
									int LA186_20 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case 199:
									{
									int LA186_21 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case NOT:
									{
									int LA186_22 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case PLUS:
									{
									int LA186_23 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case MINUS:
									{
									int LA186_24 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case TkRealNum:
									{
									int LA186_25 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case TkHexNum:
								case TkIntNum:
									{
									int LA186_26 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case TRUE:
									{
									int LA186_27 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case FALSE:
									{
									int LA186_28 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case NIL:
									{
									int LA186_29 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case 210:
									{
									int LA186_30 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case ControlChar:
									{
									int LA186_31 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case QuotedString:
									{
									int LA186_32 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case 203:
									{
									int LA186_33 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case INHERITED:
									{
									int LA186_34 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case TkIdentifier:
									{
									int LA186_35 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case 198:
									{
									int LA186_36 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case IN:
									{
									int LA186_37 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case 209:
									{
									int LA186_38 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case DOT:
									{
									int LA186_39 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case LT:
									{
									int LA186_40 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case AND:
								case AS:
								case DIV:
								case MOD:
								case OR:
								case SHL:
								case SHR:
								case SLASH:
								case STAR:
								case XOR:
								case 200:
								case 201:
								case 202:
								case 204:
								case 205:
								case 206:
								case 207:
								case 208:
									{
									int LA186_41 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case ABSOLUTE:
								case ADD:
								case AT:
								case BREAK:
								case CONTAINS:
								case CONTINUE:
								case DEFAULT:
								case DISPID:
								case DQ:
								case DW:
								case EXIT:
								case EXPORT:
								case FINAL:
								case HELPER:
								case IMPLEMENTS:
								case INDEX:
								case LOCAL:
								case MESSAGE:
								case NAME:
								case OPERATOR:
								case OUT:
								case PRIVATE:
								case PUBLIC:
								case READ:
								case READONLY:
								case REGISTER:
								case REMOVE:
								case STATIC:
								case STORED:
								case STRICT:
								case UNSAFE:
								case VARARGS:
								case VIRTUAL:
								case WRITE:
								case WRITEONLY:
									{
									int LA186_42 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case EQUAL:
									{
									int LA186_43 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case GE:
								case GT:
								case IS:
								case LE:
								case NOT_EQUAL:
									{
									int LA186_44 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
								case DOTDOT:
									{
									int LA186_45 = input.LA(2);
									if ( (synpred254_Delphi()) ) {
										alt186=1;
									}
									}
									break;
							}
							switch (alt186) {
								case 1 :
									// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:113: customAttribute
									{
									pushFollow(FOLLOW_customAttribute_in_methodDeclHeading11172);
									customAttribute548=customAttribute();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute548.getTree());
									}
									break;

							}

							pushFollow(FOLLOW_typeDecl_in_methodDeclHeading11176);
							typeDecl549=typeDecl();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl549.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: customAttribute, CLASS, typeDecl, methodName, customAttribute, formalParameterSection, OPERATOR
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 426:30: -> ( customAttribute )? 'class' ^( 'operator' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) )
					{
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:33: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_0, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						adaptor.addChild(root_0, stream_CLASS.nextNode());
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:60: ^( 'operator' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_OPERATOR.nextNode(), root_1);
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:73: ^( TkFunctionName methodName )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_methodName.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:102: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:119: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:146: ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionReturn, "TkFunctionReturn"), root_2);
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:165: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_2, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:184: ( typeDecl )?
						if ( stream_typeDecl.hasNext() ) {
							adaptor.addChild(root_2, stream_typeDecl.nextTree());
						}
						stream_typeDecl.reset();

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 103, methodDeclHeading_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodDeclHeading"


	public static class methodKey_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodKey"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:428:1: methodKey : ( 'procedure' | 'constructor' | 'destructor' );
	public final DelphiParser.methodKey_return methodKey() throws RecognitionException {
		DelphiParser.methodKey_return retval = new DelphiParser.methodKey_return();
		retval.start = input.LT(1);
		int methodKey_StartIndex = input.index();

		Object root_0 = null;

		Token set550=null;

		Object set550_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:428:30: ( 'procedure' | 'constructor' | 'destructor' )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set550=input.LT(1);
			if ( input.LA(1)==CONSTRUCTOR||input.LA(1)==DESTRUCTOR||input.LA(1)==PROCEDURE ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set550));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 104, methodKey_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodKey"


	public static class methodName_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodName"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:1: methodName : ident ( genericDefinition )? ( '.' ident ( genericDefinition )? )* ;
	public final DelphiParser.methodName_return methodName() throws RecognitionException {
		DelphiParser.methodName_return retval = new DelphiParser.methodName_return();
		retval.start = input.LT(1);
		int methodName_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal553=null;
		ParserRuleReturnScope ident551 =null;
		ParserRuleReturnScope genericDefinition552 =null;
		ParserRuleReturnScope ident554 =null;
		ParserRuleReturnScope genericDefinition555 =null;

		Object char_literal553_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:30: ( ident ( genericDefinition )? ( '.' ident ( genericDefinition )? )* )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:32: ident ( genericDefinition )? ( '.' ident ( genericDefinition )? )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_ident_in_methodName11425);
			ident551=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident551.getTree());

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:38: ( genericDefinition )?
			int alt189=2;
			int LA189_0 = input.LA(1);
			if ( (LA189_0==LT) ) {
				alt189=1;
			}
			switch (alt189) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:39: genericDefinition
					{
					pushFollow(FOLLOW_genericDefinition_in_methodName11428);
					genericDefinition552=genericDefinition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, genericDefinition552.getTree());

					}
					break;

			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:59: ( '.' ident ( genericDefinition )? )*
			loop191:
			while (true) {
				int alt191=2;
				int LA191_0 = input.LA(1);
				if ( (LA191_0==DOT) ) {
					alt191=1;
				}

				switch (alt191) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:60: '.' ident ( genericDefinition )?
					{
					char_literal553=(Token)match(input,DOT,FOLLOW_DOT_in_methodName11433); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal553_tree = (Object)adaptor.create(char_literal553);
					adaptor.addChild(root_0, char_literal553_tree);
					}

					pushFollow(FOLLOW_ident_in_methodName11435);
					ident554=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident554.getTree());

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:70: ( genericDefinition )?
					int alt190=2;
					int LA190_0 = input.LA(1);
					if ( (LA190_0==LT) ) {
						alt190=1;
					}
					switch (alt190) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:71: genericDefinition
							{
							pushFollow(FOLLOW_genericDefinition_in_methodName11438);
							genericDefinition555=genericDefinition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, genericDefinition555.getTree());

							}
							break;

					}

					}
					break;

				default :
					break loop191;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 105, methodName_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodName"


	public static class procDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "procDecl"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:1: procDecl : procDeclHeading ';' ( functionDirective )* ( procBody )? -> procDeclHeading ( procBody )? ;
	public final DelphiParser.procDecl_return procDecl() throws RecognitionException {
		DelphiParser.procDecl_return retval = new DelphiParser.procDecl_return();
		retval.start = input.LT(1);
		int procDecl_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal557=null;
		ParserRuleReturnScope procDeclHeading556 =null;
		ParserRuleReturnScope functionDirective558 =null;
		ParserRuleReturnScope procBody559 =null;

		Object char_literal557_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_procDeclHeading=new RewriteRuleSubtreeStream(adaptor,"rule procDeclHeading");
		RewriteRuleSubtreeStream stream_functionDirective=new RewriteRuleSubtreeStream(adaptor,"rule functionDirective");
		RewriteRuleSubtreeStream stream_procBody=new RewriteRuleSubtreeStream(adaptor,"rule procBody");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:30: ( procDeclHeading ';' ( functionDirective )* ( procBody )? -> procDeclHeading ( procBody )? )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:32: procDeclHeading ';' ( functionDirective )* ( procBody )?
			{
			pushFollow(FOLLOW_procDeclHeading_in_procDecl11499);
			procDeclHeading556=procDeclHeading();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_procDeclHeading.add(procDeclHeading556.getTree());
			char_literal557=(Token)match(input,SEMI,FOLLOW_SEMI_in_procDecl11501); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal557);

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:52: ( functionDirective )*
			loop192:
			while (true) {
				int alt192=2;
				alt192 = dfa192.predict(input);
				switch (alt192) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:53: functionDirective
					{
					pushFollow(FOLLOW_functionDirective_in_procDecl11504);
					functionDirective558=functionDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_functionDirective.add(functionDirective558.getTree());
					}
					break;

				default :
					break loop192;
				}
			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:73: ( procBody )?
			int alt193=2;
			switch ( input.LA(1) ) {
				case FORWARD:
					{
					alt193=1;
					}
					break;
				case EXTERNAL:
					{
					int LA193_2 = input.LA(2);
					if ( (synpred262_Delphi()) ) {
						alt193=1;
					}
					}
					break;
				case LABEL:
					{
					int LA193_3 = input.LA(2);
					if ( (synpred262_Delphi()) ) {
						alt193=1;
					}
					}
					break;
				case CONST:
				case RESOURCESTRING:
					{
					int LA193_4 = input.LA(2);
					if ( (synpred262_Delphi()) ) {
						alt193=1;
					}
					}
					break;
				case TYPE:
					{
					int LA193_5 = input.LA(2);
					if ( (synpred262_Delphi()) ) {
						alt193=1;
					}
					}
					break;
				case THREADVAR:
				case VAR:
					{
					int LA193_6 = input.LA(2);
					if ( (synpred262_Delphi()) ) {
						alt193=1;
					}
					}
					break;
				case LBRACK:
					{
					int LA193_7 = input.LA(2);
					if ( (synpred262_Delphi()) ) {
						alt193=1;
					}
					}
					break;
				case CLASS:
					{
					int LA193_8 = input.LA(2);
					if ( (synpred262_Delphi()) ) {
						alt193=1;
					}
					}
					break;
				case PROCEDURE:
					{
					int LA193_9 = input.LA(2);
					if ( (synpred262_Delphi()) ) {
						alt193=1;
					}
					}
					break;
				case FUNCTION:
					{
					int LA193_10 = input.LA(2);
					if ( (synpred262_Delphi()) ) {
						alt193=1;
					}
					}
					break;
				case CONSTRUCTOR:
				case DESTRUCTOR:
					{
					int LA193_11 = input.LA(2);
					if ( (synpred262_Delphi()) ) {
						alt193=1;
					}
					}
					break;
				case EXPORTS:
					{
					int LA193_12 = input.LA(2);
					if ( (synpred262_Delphi()) ) {
						alt193=1;
					}
					}
					break;
				case BEGIN:
					{
					int LA193_13 = input.LA(2);
					if ( (synpred262_Delphi()) ) {
						alt193=1;
					}
					}
					break;
				case ASM:
					{
					int LA193_14 = input.LA(2);
					if ( (synpred262_Delphi()) ) {
						alt193=1;
					}
					}
					break;
				case SEMI:
					{
					int LA193_15 = input.LA(2);
					if ( (synpred262_Delphi()) ) {
						alt193=1;
					}
					}
					break;
			}
			switch (alt193) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:74: procBody
					{
					pushFollow(FOLLOW_procBody_in_procDecl11509);
					procBody559=procBody();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_procBody.add(procBody559.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: procBody, procDeclHeading
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 434:85: -> procDeclHeading ( procBody )?
			{
				adaptor.addChild(root_0, stream_procDeclHeading.nextTree());
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:104: ( procBody )?
				if ( stream_procBody.hasNext() ) {
					adaptor.addChild(root_0, stream_procBody.nextTree());
				}
				stream_procBody.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 106, procDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "procDecl"


	public static class procDeclHeading_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "procDeclHeading"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:436:1: procDeclHeading : ( ( customAttribute )? 'procedure' ident ( formalParameterSection )? -> ^( 'procedure' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ) | ( customAttribute )? 'function' ident ( formalParameterSection )? ':' typeDecl -> ^( 'function' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn typeDecl ) ) );
	public final DelphiParser.procDeclHeading_return procDeclHeading() throws RecognitionException {
		DelphiParser.procDeclHeading_return retval = new DelphiParser.procDeclHeading_return();
		retval.start = input.LT(1);
		int procDeclHeading_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal561=null;
		Token string_literal565=null;
		Token char_literal568=null;
		ParserRuleReturnScope customAttribute560 =null;
		ParserRuleReturnScope ident562 =null;
		ParserRuleReturnScope formalParameterSection563 =null;
		ParserRuleReturnScope customAttribute564 =null;
		ParserRuleReturnScope ident566 =null;
		ParserRuleReturnScope formalParameterSection567 =null;
		ParserRuleReturnScope typeDecl569 =null;

		Object string_literal561_tree=null;
		Object string_literal565_tree=null;
		Object char_literal568_tree=null;
		RewriteRuleTokenStream stream_PROCEDURE=new RewriteRuleTokenStream(adaptor,"token PROCEDURE");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_formalParameterSection=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterSection");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:436:30: ( ( customAttribute )? 'procedure' ident ( formalParameterSection )? -> ^( 'procedure' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ) | ( customAttribute )? 'function' ident ( formalParameterSection )? ':' typeDecl -> ^( 'function' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn typeDecl ) ) )
			int alt198=2;
			switch ( input.LA(1) ) {
			case LBRACK:
				{
				int LA198_1 = input.LA(2);
				if ( (synpred265_Delphi()) ) {
					alt198=1;
				}
				else if ( (true) ) {
					alt198=2;
				}

				}
				break;
			case PROCEDURE:
				{
				alt198=1;
				}
				break;
			case FUNCTION:
				{
				alt198=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 198, 0, input);
				throw nvae;
			}
			switch (alt198) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:436:32: ( customAttribute )? 'procedure' ident ( formalParameterSection )?
					{
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:436:32: ( customAttribute )?
					int alt194=2;
					int LA194_0 = input.LA(1);
					if ( (LA194_0==LBRACK) ) {
						alt194=1;
					}
					else if ( (LA194_0==PROCEDURE) ) {
						int LA194_2 = input.LA(2);
						if ( (synpred263_Delphi()) ) {
							alt194=1;
						}
					}
					switch (alt194) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:436:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_procDeclHeading11575);
							customAttribute560=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute560.getTree());
							}
							break;

					}

					string_literal561=(Token)match(input,PROCEDURE,FOLLOW_PROCEDURE_in_procDeclHeading11579); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_PROCEDURE.add(string_literal561);

					pushFollow(FOLLOW_ident_in_procDeclHeading11581);
					ident562=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident562.getTree());
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:436:69: ( formalParameterSection )?
					int alt195=2;
					int LA195_0 = input.LA(1);
					if ( (LA195_0==LPAREN) ) {
						alt195=1;
					}
					switch (alt195) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:436:70: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_procDeclHeading11584);
							formalParameterSection563=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection563.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: ident, PROCEDURE, formalParameterSection
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 437:30: -> ^( 'procedure' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) )
					{
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:437:33: ^( 'procedure' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_PROCEDURE.nextNode(), root_1);
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:437:47: ^( TkFunctionName ident )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_ident.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:437:71: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:437:88: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:438:32: ( customAttribute )? 'function' ident ( formalParameterSection )? ':' typeDecl
					{
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:438:32: ( customAttribute )?
					int alt196=2;
					int LA196_0 = input.LA(1);
					if ( (LA196_0==LBRACK) ) {
						alt196=1;
					}
					else if ( (LA196_0==FUNCTION) ) {
						int LA196_2 = input.LA(2);
						if ( (synpred266_Delphi()) ) {
							alt196=1;
						}
					}
					switch (alt196) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:438:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_procDeclHeading11684);
							customAttribute564=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute564.getTree());
							}
							break;

					}

					string_literal565=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_procDeclHeading11688); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_FUNCTION.add(string_literal565);

					pushFollow(FOLLOW_ident_in_procDeclHeading11690);
					ident566=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident566.getTree());
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:438:68: ( formalParameterSection )?
					int alt197=2;
					int LA197_0 = input.LA(1);
					if ( (LA197_0==LPAREN) ) {
						alt197=1;
					}
					switch (alt197) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:438:69: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_procDeclHeading11693);
							formalParameterSection567=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection567.getTree());
							}
							break;

					}

					char_literal568=(Token)match(input,COLON,FOLLOW_COLON_in_procDeclHeading11697); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(char_literal568);

					pushFollow(FOLLOW_typeDecl_in_procDeclHeading11699);
					typeDecl569=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl569.getTree());
					// AST REWRITE
					// elements: FUNCTION, ident, typeDecl, formalParameterSection
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 439:30: -> ^( 'function' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn typeDecl ) )
					{
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:439:33: ^( 'function' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn typeDecl ) )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_FUNCTION.nextNode(), root_1);
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:439:46: ^( TkFunctionName ident )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_ident.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:439:70: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:439:87: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:439:114: ^( TkFunctionReturn typeDecl )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionReturn, "TkFunctionReturn"), root_2);
						adaptor.addChild(root_2, stream_typeDecl.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 107, procDeclHeading_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "procDeclHeading"


	public static class formalParameterSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "formalParameterSection"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:441:1: formalParameterSection : '(' ( formalParameterList )? ')' -> ( formalParameterList )? ;
	public final DelphiParser.formalParameterSection_return formalParameterSection() throws RecognitionException {
		DelphiParser.formalParameterSection_return retval = new DelphiParser.formalParameterSection_return();
		retval.start = input.LT(1);
		int formalParameterSection_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal570=null;
		Token char_literal572=null;
		ParserRuleReturnScope formalParameterList571 =null;

		Object char_literal570_tree=null;
		Object char_literal572_tree=null;
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:441:30: ( '(' ( formalParameterList )? ')' -> ( formalParameterList )? )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:441:32: '(' ( formalParameterList )? ')'
			{
			char_literal570=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_formalParameterSection11799); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(char_literal570);

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:441:36: ( formalParameterList )?
			int alt199=2;
			int LA199_0 = input.LA(1);
			if ( (LA199_0==ABSOLUTE||LA199_0==ADD||LA199_0==ANSISTRING||LA199_0==AT||LA199_0==BREAK||LA199_0==CONST||(LA199_0 >= CONTAINS && LA199_0 <= CONTINUE)||LA199_0==DEFAULT||LA199_0==DISPID||(LA199_0 >= DQ && LA199_0 <= DW)||LA199_0==EXIT||LA199_0==EXPORT||LA199_0==FALSE||LA199_0==FINAL||LA199_0==HELPER||(LA199_0 >= IMPLEMENTS && LA199_0 <= INDEX)||LA199_0==LBRACK||LA199_0==LOCAL||LA199_0==MESSAGE||LA199_0==NAME||LA199_0==OBJECT||LA199_0==OPERATOR||LA199_0==OUT||LA199_0==POINTER||LA199_0==PRIVATE||LA199_0==PUBLIC||(LA199_0 >= READ && LA199_0 <= READONLY)||(LA199_0 >= REFERENCE && LA199_0 <= REGISTER)||LA199_0==REMOVE||LA199_0==STATIC||(LA199_0 >= STORED && LA199_0 <= STRING)||LA199_0==TRUE||LA199_0==TkIdentifier||LA199_0==UNSAFE||(LA199_0 >= VAR && LA199_0 <= VIRTUAL)||(LA199_0 >= WRITE && LA199_0 <= WRITEONLY)||LA199_0==198) ) {
				alt199=1;
			}
			switch (alt199) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:441:37: formalParameterList
					{
					pushFollow(FOLLOW_formalParameterList_in_formalParameterSection11802);
					formalParameterList571=formalParameterList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList571.getTree());
					}
					break;

			}

			char_literal572=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_formalParameterSection11806); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(char_literal572);

			// AST REWRITE
			// elements: formalParameterList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 441:63: -> ( formalParameterList )?
			{
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:441:66: ( formalParameterList )?
				if ( stream_formalParameterList.hasNext() ) {
					adaptor.addChild(root_0, stream_formalParameterList.nextTree());
				}
				stream_formalParameterList.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 108, formalParameterSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "formalParameterSection"


	public static class formalParameterList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "formalParameterList"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:443:1: formalParameterList : formalParameter ( ';' formalParameter )* -> formalParameter ( formalParameter )* ;
	public final DelphiParser.formalParameterList_return formalParameterList() throws RecognitionException {
		DelphiParser.formalParameterList_return retval = new DelphiParser.formalParameterList_return();
		retval.start = input.LT(1);
		int formalParameterList_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal574=null;
		ParserRuleReturnScope formalParameter573 =null;
		ParserRuleReturnScope formalParameter575 =null;

		Object char_literal574_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_formalParameter=new RewriteRuleSubtreeStream(adaptor,"rule formalParameter");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:443:30: ( formalParameter ( ';' formalParameter )* -> formalParameter ( formalParameter )* )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:443:32: formalParameter ( ';' formalParameter )*
			{
			pushFollow(FOLLOW_formalParameter_in_formalParameterList11859);
			formalParameter573=formalParameter();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_formalParameter.add(formalParameter573.getTree());
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:443:48: ( ';' formalParameter )*
			loop200:
			while (true) {
				int alt200=2;
				int LA200_0 = input.LA(1);
				if ( (LA200_0==SEMI) ) {
					alt200=1;
				}

				switch (alt200) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:443:49: ';' formalParameter
					{
					char_literal574=(Token)match(input,SEMI,FOLLOW_SEMI_in_formalParameterList11862); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMI.add(char_literal574);

					pushFollow(FOLLOW_formalParameter_in_formalParameterList11864);
					formalParameter575=formalParameter();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_formalParameter.add(formalParameter575.getTree());
					}
					break;

				default :
					break loop200;
				}
			}

			// AST REWRITE
			// elements: formalParameter, formalParameter
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 443:71: -> formalParameter ( formalParameter )*
			{
				adaptor.addChild(root_0, stream_formalParameter.nextTree());
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:443:90: ( formalParameter )*
				while ( stream_formalParameter.hasNext() ) {
					adaptor.addChild(root_0, stream_formalParameter.nextTree());
				}
				stream_formalParameter.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 109, formalParameterList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "formalParameterList"


	public static class formalParameter_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "formalParameter"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:445:1: formalParameter : ( customAttribute )? ( parmType )? identListFlat ( ':' typeDecl )? ( '=' expression )? -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType ( typeDecl )? ) ( ^( TkVariableParam parmType ) )? ;
	public final DelphiParser.formalParameter_return formalParameter() throws RecognitionException {
		DelphiParser.formalParameter_return retval = new DelphiParser.formalParameter_return();
		retval.start = input.LT(1);
		int formalParameter_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal579=null;
		Token char_literal581=null;
		ParserRuleReturnScope customAttribute576 =null;
		ParserRuleReturnScope parmType577 =null;
		ParserRuleReturnScope identListFlat578 =null;
		ParserRuleReturnScope typeDecl580 =null;
		ParserRuleReturnScope expression582 =null;

		Object char_literal579_tree=null;
		Object char_literal581_tree=null;
		RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_identListFlat=new RewriteRuleSubtreeStream(adaptor,"rule identListFlat");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_parmType=new RewriteRuleSubtreeStream(adaptor,"rule parmType");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:445:30: ( ( customAttribute )? ( parmType )? identListFlat ( ':' typeDecl )? ( '=' expression )? -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType ( typeDecl )? ) ( ^( TkVariableParam parmType ) )? )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:445:32: ( customAttribute )? ( parmType )? identListFlat ( ':' typeDecl )? ( '=' expression )?
			{
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:445:32: ( customAttribute )?
			int alt201=2;
			switch ( input.LA(1) ) {
				case LBRACK:
					{
					alt201=1;
					}
					break;
				case OUT:
					{
					int LA201_2 = input.LA(2);
					if ( (synpred270_Delphi()) ) {
						alt201=1;
					}
					}
					break;
				case TkIdentifier:
					{
					int LA201_3 = input.LA(2);
					if ( (synpred270_Delphi()) ) {
						alt201=1;
					}
					}
					break;
				case 198:
					{
					int LA201_4 = input.LA(2);
					if ( (synpred270_Delphi()) ) {
						alt201=1;
					}
					}
					break;
				case CONST:
				case VAR:
					{
					int LA201_5 = input.LA(2);
					if ( (synpred270_Delphi()) ) {
						alt201=1;
					}
					}
					break;
				case ABSOLUTE:
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DISPID:
				case DQ:
				case DW:
				case EXIT:
				case EXPORT:
				case FALSE:
				case FINAL:
				case HELPER:
				case IMPLEMENTS:
				case IN:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case POINTER:
				case PRIVATE:
				case PUBLIC:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STATIC:
				case STORED:
				case STRICT:
				case STRING:
				case TRUE:
				case UNSAFE:
				case VARARGS:
				case VARIANT:
				case VIRTUAL:
				case WRITE:
				case WRITEONLY:
					{
					int LA201_6 = input.LA(2);
					if ( (synpred270_Delphi()) ) {
						alt201=1;
					}
					}
					break;
			}
			switch (alt201) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:445:33: customAttribute
					{
					pushFollow(FOLLOW_customAttribute_in_formalParameter11926);
					customAttribute576=customAttribute();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute576.getTree());
					}
					break;

			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:445:51: ( parmType )?
			int alt202=2;
			int LA202_0 = input.LA(1);
			if ( (LA202_0==OUT) ) {
				int LA202_1 = input.LA(2);
				if ( (LA202_1==ABSOLUTE||LA202_1==ADD||LA202_1==ANSISTRING||LA202_1==AT||LA202_1==BREAK||(LA202_1 >= CONTAINS && LA202_1 <= CONTINUE)||LA202_1==DEFAULT||LA202_1==DISPID||(LA202_1 >= DQ && LA202_1 <= DW)||LA202_1==EXIT||LA202_1==EXPORT||LA202_1==FALSE||LA202_1==FINAL||LA202_1==HELPER||(LA202_1 >= IMPLEMENTS && LA202_1 <= INDEX)||LA202_1==LOCAL||LA202_1==MESSAGE||LA202_1==NAME||LA202_1==OBJECT||LA202_1==OPERATOR||LA202_1==OUT||LA202_1==POINTER||LA202_1==PRIVATE||LA202_1==PUBLIC||(LA202_1 >= READ && LA202_1 <= READONLY)||(LA202_1 >= REFERENCE && LA202_1 <= REGISTER)||LA202_1==REMOVE||LA202_1==STATIC||(LA202_1 >= STORED && LA202_1 <= STRING)||LA202_1==TRUE||LA202_1==TkIdentifier||LA202_1==UNSAFE||(LA202_1 >= VARARGS && LA202_1 <= VIRTUAL)||(LA202_1 >= WRITE && LA202_1 <= WRITEONLY)||LA202_1==198) ) {
					alt202=1;
				}
			}
			else if ( (LA202_0==CONST||LA202_0==VAR) ) {
				alt202=1;
			}
			switch (alt202) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:445:52: parmType
					{
					pushFollow(FOLLOW_parmType_in_formalParameter11931);
					parmType577=parmType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_parmType.add(parmType577.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_identListFlat_in_formalParameter11935);
			identListFlat578=identListFlat();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identListFlat.add(identListFlat578.getTree());
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:445:77: ( ':' typeDecl )?
			int alt203=2;
			int LA203_0 = input.LA(1);
			if ( (LA203_0==COLON) ) {
				alt203=1;
			}
			switch (alt203) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:445:78: ':' typeDecl
					{
					char_literal579=(Token)match(input,COLON,FOLLOW_COLON_in_formalParameter11938); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(char_literal579);

					pushFollow(FOLLOW_typeDecl_in_formalParameter11940);
					typeDecl580=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl580.getTree());
					}
					break;

			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:445:93: ( '=' expression )?
			int alt204=2;
			int LA204_0 = input.LA(1);
			if ( (LA204_0==EQUAL) ) {
				alt204=1;
			}
			switch (alt204) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:445:94: '=' expression
					{
					char_literal581=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_formalParameter11945); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_EQUAL.add(char_literal581);

					pushFollow(FOLLOW_expression_in_formalParameter11947);
					expression582=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expression.add(expression582.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: customAttribute, typeDecl, identListFlat, parmType
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 445:111: -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType ( typeDecl )? ) ( ^( TkVariableParam parmType ) )?
			{
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:445:114: ( customAttribute )?
				if ( stream_customAttribute.hasNext() ) {
					adaptor.addChild(root_0, stream_customAttribute.nextTree());
				}
				stream_customAttribute.reset();

				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:445:133: ^( TkVariableIdents identListFlat )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableIdents, "TkVariableIdents"), root_1);
				adaptor.addChild(root_1, stream_identListFlat.nextTree());
				adaptor.addChild(root_0, root_1);
				}

				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:445:167: ^( TkVariableType ( typeDecl )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableType, "TkVariableType"), root_1);
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:445:184: ( typeDecl )?
				if ( stream_typeDecl.hasNext() ) {
					adaptor.addChild(root_1, stream_typeDecl.nextTree());
				}
				stream_typeDecl.reset();

				adaptor.addChild(root_0, root_1);
				}

				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:445:195: ( ^( TkVariableParam parmType ) )?
				if ( stream_parmType.hasNext() ) {
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:445:195: ^( TkVariableParam parmType )
					{
					Object root_1 = (Object)adaptor.nil();
					root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableParam, "TkVariableParam"), root_1);
					adaptor.addChild(root_1, stream_parmType.nextTree());
					adaptor.addChild(root_0, root_1);
					}

				}
				stream_parmType.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 110, formalParameter_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "formalParameter"


	public static class parmType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "parmType"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:448:1: parmType : ( 'const' | 'var' | 'out' );
	public final DelphiParser.parmType_return parmType() throws RecognitionException {
		DelphiParser.parmType_return retval = new DelphiParser.parmType_return();
		retval.start = input.LT(1);
		int parmType_StartIndex = input.index();

		Object root_0 = null;

		Token set583=null;

		Object set583_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:448:30: ( 'const' | 'var' | 'out' )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set583=input.LT(1);
			if ( input.LA(1)==CONST||input.LA(1)==OUT||input.LA(1)==VAR ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set583));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 111, parmType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "parmType"


	public static class methodBody_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodBody"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:452:1: methodBody : block ';' -> block ;
	public final DelphiParser.methodBody_return methodBody() throws RecognitionException {
		DelphiParser.methodBody_return retval = new DelphiParser.methodBody_return();
		retval.start = input.LT(1);
		int methodBody_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal585=null;
		ParserRuleReturnScope block584 =null;

		Object char_literal585_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:452:30: ( block ';' -> block )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:452:32: block ';'
			{
			pushFollow(FOLLOW_block_in_methodBody12170);
			block584=block();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_block.add(block584.getTree());
			char_literal585=(Token)match(input,SEMI,FOLLOW_SEMI_in_methodBody12172); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal585);

			// AST REWRITE
			// elements: block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 452:42: -> block
			{
				adaptor.addChild(root_0, stream_block.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 112, methodBody_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodBody"


	public static class procBody_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "procBody"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:454:1: procBody : ( 'forward' ';' ( functionDirective )* | 'external' ( 'name' expression | 'index' expression )* ( functionDirective )* | block ';' );
	public final DelphiParser.procBody_return procBody() throws RecognitionException {
		DelphiParser.procBody_return retval = new DelphiParser.procBody_return();
		retval.start = input.LT(1);
		int procBody_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal586=null;
		Token char_literal587=null;
		Token string_literal589=null;
		Token string_literal590=null;
		Token string_literal592=null;
		Token char_literal596=null;
		ParserRuleReturnScope functionDirective588 =null;
		ParserRuleReturnScope expression591 =null;
		ParserRuleReturnScope expression593 =null;
		ParserRuleReturnScope functionDirective594 =null;
		ParserRuleReturnScope block595 =null;

		Object string_literal586_tree=null;
		Object char_literal587_tree=null;
		Object string_literal589_tree=null;
		Object string_literal590_tree=null;
		Object string_literal592_tree=null;
		Object char_literal596_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:454:30: ( 'forward' ';' ( functionDirective )* | 'external' ( 'name' expression | 'index' expression )* ( functionDirective )* | block ';' )
			int alt208=3;
			switch ( input.LA(1) ) {
			case FORWARD:
				{
				alt208=1;
				}
				break;
			case EXTERNAL:
				{
				alt208=2;
				}
				break;
			case ASM:
			case BEGIN:
			case CLASS:
			case CONST:
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case EXPORTS:
			case FUNCTION:
			case LABEL:
			case LBRACK:
			case PROCEDURE:
			case RESOURCESTRING:
			case SEMI:
			case THREADVAR:
			case TYPE:
			case VAR:
				{
				alt208=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 208, 0, input);
				throw nvae;
			}
			switch (alt208) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:454:32: 'forward' ';' ( functionDirective )*
					{
					root_0 = (Object)adaptor.nil();


					string_literal586=(Token)match(input,FORWARD,FOLLOW_FORWARD_in_procBody12233); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal586_tree = (Object)adaptor.create(string_literal586);
					adaptor.addChild(root_0, string_literal586_tree);
					}

					char_literal587=(Token)match(input,SEMI,FOLLOW_SEMI_in_procBody12235); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal587_tree = (Object)adaptor.create(char_literal587);
					adaptor.addChild(root_0, char_literal587_tree);
					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:454:46: ( functionDirective )*
					loop205:
					while (true) {
						int alt205=2;
						alt205 = dfa205.predict(input);
						switch (alt205) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:454:47: functionDirective
							{
							pushFollow(FOLLOW_functionDirective_in_procBody12238);
							functionDirective588=functionDirective();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, functionDirective588.getTree());

							}
							break;

						default :
							break loop205;
						}
					}

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:455:32: 'external' ( 'name' expression | 'index' expression )* ( functionDirective )*
					{
					root_0 = (Object)adaptor.nil();


					string_literal589=(Token)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_procBody12276); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal589_tree = (Object)adaptor.create(string_literal589);
					adaptor.addChild(root_0, string_literal589_tree);
					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:455:43: ( 'name' expression | 'index' expression )*
					loop206:
					while (true) {
						int alt206=3;
						int LA206_0 = input.LA(1);
						if ( (LA206_0==NAME) ) {
							int LA206_2 = input.LA(2);
							if ( (synpred278_Delphi()) ) {
								alt206=1;
							}

						}
						else if ( (LA206_0==INDEX) ) {
							int LA206_3 = input.LA(2);
							if ( (synpred279_Delphi()) ) {
								alt206=2;
							}

						}

						switch (alt206) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:455:44: 'name' expression
							{
							string_literal590=(Token)match(input,NAME,FOLLOW_NAME_in_procBody12279); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal590_tree = (Object)adaptor.create(string_literal590);
							adaptor.addChild(root_0, string_literal590_tree);
							}

							pushFollow(FOLLOW_expression_in_procBody12281);
							expression591=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression591.getTree());

							}
							break;
						case 2 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:455:64: 'index' expression
							{
							string_literal592=(Token)match(input,INDEX,FOLLOW_INDEX_in_procBody12285); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal592_tree = (Object)adaptor.create(string_literal592);
							adaptor.addChild(root_0, string_literal592_tree);
							}

							pushFollow(FOLLOW_expression_in_procBody12287);
							expression593=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression593.getTree());

							}
							break;

						default :
							break loop206;
						}
					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:455:85: ( functionDirective )*
					loop207:
					while (true) {
						int alt207=2;
						switch ( input.LA(1) ) {
						case REGISTER:
							{
							int LA207_2 = input.LA(2);
							if ( (synpred280_Delphi()) ) {
								alt207=1;
							}

							}
							break;
						case OVERLOAD:
							{
							int LA207_3 = input.LA(2);
							if ( (synpred280_Delphi()) ) {
								alt207=1;
							}

							}
							break;
						case INLINE:
							{
							int LA207_4 = input.LA(2);
							if ( (synpred280_Delphi()) ) {
								alt207=1;
							}

							}
							break;
						case ASSEMBLER:
							{
							int LA207_5 = input.LA(2);
							if ( (synpred280_Delphi()) ) {
								alt207=1;
							}

							}
							break;
						case CDECL:
							{
							int LA207_6 = input.LA(2);
							if ( (synpred280_Delphi()) ) {
								alt207=1;
							}

							}
							break;
						case PASCAL:
							{
							int LA207_7 = input.LA(2);
							if ( (synpred280_Delphi()) ) {
								alt207=1;
							}

							}
							break;
						case EXPORT:
							{
							int LA207_8 = input.LA(2);
							if ( (synpred280_Delphi()) ) {
								alt207=1;
							}

							}
							break;
						case SAFECALL:
							{
							int LA207_9 = input.LA(2);
							if ( (synpred280_Delphi()) ) {
								alt207=1;
							}

							}
							break;
						case STDCALL:
							{
							int LA207_10 = input.LA(2);
							if ( (synpred280_Delphi()) ) {
								alt207=1;
							}

							}
							break;
						case LOCAL:
							{
							int LA207_11 = input.LA(2);
							if ( (synpred280_Delphi()) ) {
								alt207=1;
							}

							}
							break;
						case FAR:
							{
							int LA207_12 = input.LA(2);
							if ( (synpred280_Delphi()) ) {
								alt207=1;
							}

							}
							break;
						case VARARGS:
							{
							int LA207_13 = input.LA(2);
							if ( (synpred280_Delphi()) ) {
								alt207=1;
							}

							}
							break;
						case NEAR:
							{
							int LA207_14 = input.LA(2);
							if ( (synpred280_Delphi()) ) {
								alt207=1;
							}

							}
							break;
						case DEPRECATED:
							{
							int LA207_15 = input.LA(2);
							if ( (synpred280_Delphi()) ) {
								alt207=1;
							}

							}
							break;
						case EXPERIMENTAL:
							{
							int LA207_16 = input.LA(2);
							if ( (synpred280_Delphi()) ) {
								alt207=1;
							}

							}
							break;
						case PLATFORM:
							{
							int LA207_17 = input.LA(2);
							if ( (synpred280_Delphi()) ) {
								alt207=1;
							}

							}
							break;
						case LIBRARY:
							{
							int LA207_18 = input.LA(2);
							if ( (synpred280_Delphi()) ) {
								alt207=1;
							}

							}
							break;
						case UNSAFE:
							{
							int LA207_19 = input.LA(2);
							if ( (synpred280_Delphi()) ) {
								alt207=1;
							}

							}
							break;
						case EXTERNAL:
							{
							int LA207_20 = input.LA(2);
							if ( (synpred280_Delphi()) ) {
								alt207=1;
							}

							}
							break;
						}
						switch (alt207) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:455:86: functionDirective
							{
							pushFollow(FOLLOW_functionDirective_in_procBody12292);
							functionDirective594=functionDirective();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, functionDirective594.getTree());

							}
							break;

						default :
							break loop207;
						}
					}

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:456:32: block ';'
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_block_in_procBody12328);
					block595=block();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, block595.getTree());

					char_literal596=(Token)match(input,SEMI,FOLLOW_SEMI_in_procBody12330); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal596_tree = (Object)adaptor.create(char_literal596);
					adaptor.addChild(root_0, char_literal596_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 113, procBody_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "procBody"


	public static class customAttribute_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "customAttribute"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:1: customAttribute : customAttributeList ;
	public final DelphiParser.customAttribute_return customAttribute() throws RecognitionException {
		DelphiParser.customAttribute_return retval = new DelphiParser.customAttribute_return();
		retval.start = input.LT(1);
		int customAttribute_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope customAttributeList597 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:30: ( customAttributeList )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:32: customAttributeList
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_customAttributeList_in_customAttribute12383);
			customAttributeList597=customAttributeList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, customAttributeList597.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 114, customAttribute_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "customAttribute"


	public static class customAttributeList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "customAttributeList"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:463:1: customAttributeList : ( customAttributeDecl )* ;
	public final DelphiParser.customAttributeList_return customAttributeList() throws RecognitionException {
		DelphiParser.customAttributeList_return retval = new DelphiParser.customAttributeList_return();
		retval.start = input.LT(1);
		int customAttributeList_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope customAttributeDecl598 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:463:30: ( ( customAttributeDecl )* )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:463:32: ( customAttributeDecl )*
			{
			root_0 = (Object)adaptor.nil();


			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:463:32: ( customAttributeDecl )*
			loop209:
			while (true) {
				int alt209=2;
				int LA209_0 = input.LA(1);
				if ( (LA209_0==LBRACK) ) {
					int LA209_35 = input.LA(2);
					if ( (synpred282_Delphi()) ) {
						alt209=1;
					}

				}

				switch (alt209) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:463:33: customAttributeDecl
					{
					pushFollow(FOLLOW_customAttributeDecl_in_customAttributeList12430);
					customAttributeDecl598=customAttributeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, customAttributeDecl598.getTree());

					}
					break;

				default :
					break loop209;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 115, customAttributeList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "customAttributeList"


	public static class customAttributeDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "customAttributeDecl"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:465:1: customAttributeDecl : '[' customAttributeIdent ( '(' ( expressionList )? ')' )? ']' -> ^( TkCustomAttribute '[' customAttributeIdent ( '(' ( expressionList )? ')' )? ']' ) ;
	public final DelphiParser.customAttributeDecl_return customAttributeDecl() throws RecognitionException {
		DelphiParser.customAttributeDecl_return retval = new DelphiParser.customAttributeDecl_return();
		retval.start = input.LT(1);
		int customAttributeDecl_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal599=null;
		Token char_literal601=null;
		Token char_literal603=null;
		Token char_literal604=null;
		ParserRuleReturnScope customAttributeIdent600 =null;
		ParserRuleReturnScope expressionList602 =null;

		Object char_literal599_tree=null;
		Object char_literal601_tree=null;
		Object char_literal603_tree=null;
		Object char_literal604_tree=null;
		RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
		RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
		RewriteRuleSubtreeStream stream_customAttributeIdent=new RewriteRuleSubtreeStream(adaptor,"rule customAttributeIdent");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:465:30: ( '[' customAttributeIdent ( '(' ( expressionList )? ')' )? ']' -> ^( TkCustomAttribute '[' customAttributeIdent ( '(' ( expressionList )? ')' )? ']' ) )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:465:32: '[' customAttributeIdent ( '(' ( expressionList )? ')' )? ']'
			{
			char_literal599=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_customAttributeDecl12478); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LBRACK.add(char_literal599);

			pushFollow(FOLLOW_customAttributeIdent_in_customAttributeDecl12480);
			customAttributeIdent600=customAttributeIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_customAttributeIdent.add(customAttributeIdent600.getTree());
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:465:57: ( '(' ( expressionList )? ')' )?
			int alt211=2;
			int LA211_0 = input.LA(1);
			if ( (LA211_0==LPAREN) ) {
				alt211=1;
			}
			switch (alt211) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:465:58: '(' ( expressionList )? ')'
					{
					char_literal601=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_customAttributeDecl12483); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(char_literal601);

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:465:62: ( expressionList )?
					int alt210=2;
					int LA210_0 = input.LA(1);
					if ( (LA210_0==ABSOLUTE||(LA210_0 >= ADD && LA210_0 <= ANSISTRING)||LA210_0==AS||(LA210_0 >= AT && LA210_0 <= AT2)||LA210_0==BREAK||LA210_0==COMMA||(LA210_0 >= CONTAINS && LA210_0 <= DEFAULT)||LA210_0==DISPID||LA210_0==DIV||LA210_0==DOT||(LA210_0 >= DQ && LA210_0 <= DW)||LA210_0==EQUAL||LA210_0==EXIT||LA210_0==EXPORT||LA210_0==FALSE||LA210_0==FINAL||(LA210_0 >= FUNCTION && LA210_0 <= GE)||(LA210_0 >= GT && LA210_0 <= HELPER)||(LA210_0 >= IMPLEMENTS && LA210_0 <= INHERITED)||LA210_0==IS||LA210_0==LBRACK||LA210_0==LE||(LA210_0 >= LOCAL && LA210_0 <= NAME)||LA210_0==NIL||(LA210_0 >= NOT && LA210_0 <= OBJECT)||(LA210_0 >= OPERATOR && LA210_0 <= OUT)||(LA210_0 >= PLUS && LA210_0 <= PROCEDURE)||LA210_0==PUBLIC||LA210_0==QuotedString||(LA210_0 >= READ && LA210_0 <= READONLY)||(LA210_0 >= REFERENCE && LA210_0 <= REGISTER)||LA210_0==REMOVE||(LA210_0 >= SHL && LA210_0 <= STATIC)||(LA210_0 >= STORED && LA210_0 <= STRING)||LA210_0==TRUE||(LA210_0 >= TkHexNum && LA210_0 <= TkIntNum)||LA210_0==TkRealNum||LA210_0==UNSAFE||(LA210_0 >= VARARGS && LA210_0 <= VIRTUAL)||(LA210_0 >= WRITE && LA210_0 <= WRITEONLY)||(LA210_0 >= XOR && LA210_0 <= 210)) ) {
						alt210=1;
					}
					else if ( (LA210_0==RPAREN) ) {
						int LA210_2 = input.LA(2);
						if ( (synpred283_Delphi()) ) {
							alt210=1;
						}
					}
					switch (alt210) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:465:63: expressionList
							{
							pushFollow(FOLLOW_expressionList_in_customAttributeDecl12486);
							expressionList602=expressionList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_expressionList.add(expressionList602.getTree());
							}
							break;

					}

					char_literal603=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_customAttributeDecl12490); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(char_literal603);

					}
					break;

			}

			char_literal604=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_customAttributeDecl12494); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RBRACK.add(char_literal604);

			// AST REWRITE
			// elements: customAttributeIdent, LPAREN, RPAREN, expressionList, RBRACK, LBRACK
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 465:91: -> ^( TkCustomAttribute '[' customAttributeIdent ( '(' ( expressionList )? ')' )? ']' )
			{
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:465:94: ^( TkCustomAttribute '[' customAttributeIdent ( '(' ( expressionList )? ')' )? ']' )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkCustomAttribute, "TkCustomAttribute"), root_1);
				adaptor.addChild(root_1, stream_LBRACK.nextNode());
				adaptor.addChild(root_1, stream_customAttributeIdent.nextTree());
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:465:139: ( '(' ( expressionList )? ')' )?
				if ( stream_LPAREN.hasNext()||stream_RPAREN.hasNext()||stream_expressionList.hasNext() ) {
					adaptor.addChild(root_1, stream_LPAREN.nextNode());
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:465:144: ( expressionList )?
					if ( stream_expressionList.hasNext() ) {
						adaptor.addChild(root_1, stream_expressionList.nextTree());
					}
					stream_expressionList.reset();

					adaptor.addChild(root_1, stream_RPAREN.nextNode());
				}
				stream_LPAREN.reset();
				stream_RPAREN.reset();
				stream_expressionList.reset();

				adaptor.addChild(root_1, stream_RBRACK.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 116, customAttributeDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "customAttributeDecl"


	public static class customAttributeIdent_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "customAttributeIdent"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:467:1: customAttributeIdent : qualifiedIdent ( ':' qualifiedIdent )? ;
	public final DelphiParser.customAttributeIdent_return customAttributeIdent() throws RecognitionException {
		DelphiParser.customAttributeIdent_return retval = new DelphiParser.customAttributeIdent_return();
		retval.start = input.LT(1);
		int customAttributeIdent_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal606=null;
		ParserRuleReturnScope qualifiedIdent605 =null;
		ParserRuleReturnScope qualifiedIdent607 =null;

		Object char_literal606_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:467:30: ( qualifiedIdent ( ':' qualifiedIdent )? )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:467:32: qualifiedIdent ( ':' qualifiedIdent )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_qualifiedIdent_in_customAttributeIdent12564);
			qualifiedIdent605=qualifiedIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdent605.getTree());

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:467:47: ( ':' qualifiedIdent )?
			int alt212=2;
			int LA212_0 = input.LA(1);
			if ( (LA212_0==COLON) ) {
				alt212=1;
			}
			switch (alt212) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:467:48: ':' qualifiedIdent
					{
					char_literal606=(Token)match(input,COLON,FOLLOW_COLON_in_customAttributeIdent12567); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal606_tree = (Object)adaptor.create(char_literal606);
					adaptor.addChild(root_0, char_literal606_tree);
					}

					pushFollow(FOLLOW_qualifiedIdent_in_customAttributeIdent12569);
					qualifiedIdent607=qualifiedIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdent607.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 117, customAttributeIdent_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "customAttributeIdent"


	public static class expression_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "expression"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:472:1: expression : ( anonymousExpression -> ^( TkAnonymousExpression anonymousExpression ) | simpleExpression ( relOp simpleExpression )? ( '=' expression )? );
	public final DelphiParser.expression_return expression() throws RecognitionException {
		DelphiParser.expression_return retval = new DelphiParser.expression_return();
		retval.start = input.LT(1);
		int expression_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal612=null;
		ParserRuleReturnScope anonymousExpression608 =null;
		ParserRuleReturnScope simpleExpression609 =null;
		ParserRuleReturnScope relOp610 =null;
		ParserRuleReturnScope simpleExpression611 =null;
		ParserRuleReturnScope expression613 =null;

		Object char_literal612_tree=null;
		RewriteRuleSubtreeStream stream_anonymousExpression=new RewriteRuleSubtreeStream(adaptor,"rule anonymousExpression");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:472:30: ( anonymousExpression -> ^( TkAnonymousExpression anonymousExpression ) | simpleExpression ( relOp simpleExpression )? ( '=' expression )? )
			int alt215=2;
			switch ( input.LA(1) ) {
			case PROCEDURE:
				{
				int LA215_1 = input.LA(2);
				if ( (synpred286_Delphi()) ) {
					alt215=1;
				}
				else if ( (true) ) {
					alt215=2;
				}

				}
				break;
			case FUNCTION:
				{
				int LA215_2 = input.LA(2);
				if ( (synpred286_Delphi()) ) {
					alt215=1;
				}
				else if ( (true) ) {
					alt215=2;
				}

				}
				break;
			case EOF:
			case ABSOLUTE:
			case ADD:
			case AND:
			case ANSISTRING:
			case AS:
			case ASM:
			case ASSEMBLER:
			case ASSIGN:
			case AT:
			case AT2:
			case AUTOMATED:
			case BEGIN:
			case BREAK:
			case CASE:
			case CDECL:
			case CLASS:
			case COLON:
			case COMMA:
			case CONST:
			case CONSTRUCTOR:
			case CONTAINS:
			case CONTINUE:
			case ControlChar:
			case DEFAULT:
			case DELAYED:
			case DEPRECATED:
			case DESTRUCTOR:
			case DISPID:
			case DIV:
			case DO:
			case DOT:
			case DOTDOT:
			case DOWNTO:
			case DQ:
			case DW:
			case ELSE:
			case END:
			case EQUAL:
			case EXCEPT:
			case EXIT:
			case EXPERIMENTAL:
			case EXPORT:
			case EXPORTS:
			case EXTERNAL:
			case FALSE:
			case FAR:
			case FINAL:
			case FINALIZATION:
			case FINALLY:
			case GE:
			case GT:
			case HELPER:
			case IMPLEMENTATION:
			case IMPLEMENTS:
			case IN:
			case INDEX:
			case INHERITED:
			case INITIALIZATION:
			case INLINE:
			case IS:
			case LABEL:
			case LBRACK:
			case LE:
			case LIBRARY:
			case LOCAL:
			case LPAREN:
			case LT:
			case MESSAGE:
			case MINUS:
			case MOD:
			case NAME:
			case NEAR:
			case NIL:
			case NODEFAULT:
			case NOT:
			case NOT_EQUAL:
			case OBJECT:
			case OF:
			case ON:
			case OPERATOR:
			case OR:
			case OUT:
			case OVERLOAD:
			case PASCAL:
			case PLATFORM:
			case PLUS:
			case POINTER:
			case POINTER2:
			case PRIVATE:
			case PROPERTY:
			case PROTECTED:
			case PUBLIC:
			case PUBLISHED:
			case QuotedString:
			case RBRACK:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case RESIDENT:
			case RESOURCESTRING:
			case RPAREN:
			case SAFECALL:
			case SEMI:
			case SHL:
			case SHR:
			case SLASH:
			case STAR:
			case STATIC:
			case STDCALL:
			case STORED:
			case STRICT:
			case STRING:
			case THEN:
			case THREADVAR:
			case TO:
			case TRUE:
			case TYPE:
			case TkHexNum:
			case TkIdentifier:
			case TkIntNum:
			case TkRealNum:
			case UNSAFE:
			case UNTIL:
			case VAR:
			case VARARGS:
			case VARIANT:
			case VIRTUAL:
			case WRITE:
			case WRITEONLY:
			case XOR:
			case 198:
			case 199:
			case 200:
			case 201:
			case 202:
			case 203:
			case 204:
			case 205:
			case 206:
			case 207:
			case 208:
			case 209:
			case 210:
				{
				alt215=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 215, 0, input);
				throw nvae;
			}
			switch (alt215) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:472:32: anonymousExpression
					{
					pushFollow(FOLLOW_anonymousExpression_in_expression12629);
					anonymousExpression608=anonymousExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_anonymousExpression.add(anonymousExpression608.getTree());
					// AST REWRITE
					// elements: anonymousExpression
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 472:52: -> ^( TkAnonymousExpression anonymousExpression )
					{
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:472:55: ^( TkAnonymousExpression anonymousExpression )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkAnonymousExpression, "TkAnonymousExpression"), root_1);
						adaptor.addChild(root_1, stream_anonymousExpression.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:473:32: simpleExpression ( relOp simpleExpression )? ( '=' expression )?
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_simpleExpression_in_expression12670);
					simpleExpression609=simpleExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleExpression609.getTree());

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:473:49: ( relOp simpleExpression )?
					int alt213=2;
					switch ( input.LA(1) ) {
						case EQUAL:
							{
							int LA213_1 = input.LA(2);
							if ( (synpred287_Delphi()) ) {
								alt213=1;
							}
							}
							break;
						case IN:
							{
							int LA213_2 = input.LA(2);
							if ( (synpred287_Delphi()) ) {
								alt213=1;
							}
							}
							break;
						case LT:
							{
							int LA213_4 = input.LA(2);
							if ( (synpred287_Delphi()) ) {
								alt213=1;
							}
							}
							break;
						case GT:
							{
							int LA213_5 = input.LA(2);
							if ( (synpred287_Delphi()) ) {
								alt213=1;
							}
							}
							break;
						case GE:
						case IS:
						case LE:
						case NOT_EQUAL:
							{
							int LA213_6 = input.LA(2);
							if ( (synpred287_Delphi()) ) {
								alt213=1;
							}
							}
							break;
					}
					switch (alt213) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:473:50: relOp simpleExpression
							{
							pushFollow(FOLLOW_relOp_in_expression12673);
							relOp610=relOp();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, relOp610.getTree());

							pushFollow(FOLLOW_simpleExpression_in_expression12675);
							simpleExpression611=simpleExpression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleExpression611.getTree());

							}
							break;

					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:473:75: ( '=' expression )?
					int alt214=2;
					int LA214_0 = input.LA(1);
					if ( (LA214_0==EQUAL) ) {
						int LA214_1 = input.LA(2);
						if ( (synpred288_Delphi()) ) {
							alt214=1;
						}
					}
					switch (alt214) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:473:76: '=' expression
							{
							char_literal612=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_expression12680); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal612_tree = (Object)adaptor.create(char_literal612);
							adaptor.addChild(root_0, char_literal612_tree);
							}

							pushFollow(FOLLOW_expression_in_expression12682);
							expression613=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression613.getTree());

							}
							break;

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 118, expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "expression"


	public static class anonymousExpression_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "anonymousExpression"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:475:1: anonymousExpression : ( 'procedure' ( formalParameterSection )? block | 'function' ( formalParameterSection )? ':' typeDecl block );
	public final DelphiParser.anonymousExpression_return anonymousExpression() throws RecognitionException {
		DelphiParser.anonymousExpression_return retval = new DelphiParser.anonymousExpression_return();
		retval.start = input.LT(1);
		int anonymousExpression_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal614=null;
		Token string_literal617=null;
		Token char_literal619=null;
		ParserRuleReturnScope formalParameterSection615 =null;
		ParserRuleReturnScope block616 =null;
		ParserRuleReturnScope formalParameterSection618 =null;
		ParserRuleReturnScope typeDecl620 =null;
		ParserRuleReturnScope block621 =null;

		Object string_literal614_tree=null;
		Object string_literal617_tree=null;
		Object char_literal619_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:475:30: ( 'procedure' ( formalParameterSection )? block | 'function' ( formalParameterSection )? ':' typeDecl block )
			int alt218=2;
			int LA218_0 = input.LA(1);
			if ( (LA218_0==PROCEDURE) ) {
				alt218=1;
			}
			else if ( (LA218_0==FUNCTION) ) {
				alt218=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 218, 0, input);
				throw nvae;
			}

			switch (alt218) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:475:32: 'procedure' ( formalParameterSection )? block
					{
					root_0 = (Object)adaptor.nil();


					string_literal614=(Token)match(input,PROCEDURE,FOLLOW_PROCEDURE_in_anonymousExpression12733); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal614_tree = (Object)adaptor.create(string_literal614);
					adaptor.addChild(root_0, string_literal614_tree);
					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:475:44: ( formalParameterSection )?
					int alt216=2;
					alt216 = dfa216.predict(input);
					switch (alt216) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:475:45: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_anonymousExpression12736);
							formalParameterSection615=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterSection615.getTree());

							}
							break;

					}

					pushFollow(FOLLOW_block_in_anonymousExpression12740);
					block616=block();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, block616.getTree());

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:476:32: 'function' ( formalParameterSection )? ':' typeDecl block
					{
					root_0 = (Object)adaptor.nil();


					string_literal617=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_anonymousExpression12773); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal617_tree = (Object)adaptor.create(string_literal617);
					adaptor.addChild(root_0, string_literal617_tree);
					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:476:43: ( formalParameterSection )?
					int alt217=2;
					int LA217_0 = input.LA(1);
					if ( (LA217_0==LPAREN) ) {
						alt217=1;
					}
					switch (alt217) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:476:44: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_anonymousExpression12776);
							formalParameterSection618=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterSection618.getTree());

							}
							break;

					}

					char_literal619=(Token)match(input,COLON,FOLLOW_COLON_in_anonymousExpression12780); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal619_tree = (Object)adaptor.create(char_literal619);
					adaptor.addChild(root_0, char_literal619_tree);
					}

					pushFollow(FOLLOW_typeDecl_in_anonymousExpression12782);
					typeDecl620=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl620.getTree());

					pushFollow(FOLLOW_block_in_anonymousExpression12784);
					block621=block();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, block621.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 119, anonymousExpression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "anonymousExpression"


	public static class simpleExpression_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "simpleExpression"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:1: simpleExpression : factor ( operator factor )* ;
	public final DelphiParser.simpleExpression_return simpleExpression() throws RecognitionException {
		DelphiParser.simpleExpression_return retval = new DelphiParser.simpleExpression_return();
		retval.start = input.LT(1);
		int simpleExpression_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope factor622 =null;
		ParserRuleReturnScope operator623 =null;
		ParserRuleReturnScope factor624 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:30: ( factor ( operator factor )* )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:32: factor ( operator factor )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_factor_in_simpleExpression12833);
			factor622=factor();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, factor622.getTree());

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:39: ( operator factor )*
			loop219:
			while (true) {
				int alt219=2;
				switch ( input.LA(1) ) {
				case PLUS:
					{
					int LA219_2 = input.LA(2);
					if ( (synpred292_Delphi()) ) {
						alt219=1;
					}

					}
					break;
				case MINUS:
					{
					int LA219_3 = input.LA(2);
					if ( (synpred292_Delphi()) ) {
						alt219=1;
					}

					}
					break;
				case AND:
				case AS:
				case DIV:
				case MOD:
				case OR:
				case SHL:
				case SHR:
				case SLASH:
				case STAR:
				case XOR:
				case 200:
				case 201:
				case 202:
				case 204:
				case 205:
				case 206:
				case 207:
				case 208:
					{
					int LA219_4 = input.LA(2);
					if ( (synpred292_Delphi()) ) {
						alt219=1;
					}

					}
					break;
				}
				switch (alt219) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:40: operator factor
					{
					pushFollow(FOLLOW_operator_in_simpleExpression12836);
					operator623=operator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, operator623.getTree());

					pushFollow(FOLLOW_factor_in_simpleExpression12838);
					factor624=factor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor624.getTree());

					}
					break;

				default :
					break loop219;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 120, simpleExpression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "simpleExpression"


	public static class factor_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "factor"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:480:1: factor : ( '@' factor | '@@' factor | 'not' factor | '+' factor | '-' factor | '^' ident | intRealNum | 'true' | 'false' | 'nil' | 'nil^' | '(' expression ')' designator | '(' expression ')' ( '^' )? ( '.' expression )? | stringFactor ( '.' simpleExpression )? | setSection | designator | typeId '(' expression ')' );
	public final DelphiParser.factor_return factor() throws RecognitionException {
		DelphiParser.factor_return retval = new DelphiParser.factor_return();
		retval.start = input.LT(1);
		int factor_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal625=null;
		Token string_literal627=null;
		Token string_literal629=null;
		Token char_literal631=null;
		Token char_literal633=null;
		Token char_literal635=null;
		Token string_literal638=null;
		Token string_literal639=null;
		Token string_literal640=null;
		Token string_literal641=null;
		Token char_literal642=null;
		Token char_literal644=null;
		Token char_literal646=null;
		Token char_literal648=null;
		Token char_literal649=null;
		Token char_literal650=null;
		Token char_literal653=null;
		Token char_literal658=null;
		Token char_literal660=null;
		ParserRuleReturnScope factor626 =null;
		ParserRuleReturnScope factor628 =null;
		ParserRuleReturnScope factor630 =null;
		ParserRuleReturnScope factor632 =null;
		ParserRuleReturnScope factor634 =null;
		ParserRuleReturnScope ident636 =null;
		ParserRuleReturnScope intRealNum637 =null;
		ParserRuleReturnScope expression643 =null;
		ParserRuleReturnScope designator645 =null;
		ParserRuleReturnScope expression647 =null;
		ParserRuleReturnScope expression651 =null;
		ParserRuleReturnScope stringFactor652 =null;
		ParserRuleReturnScope simpleExpression654 =null;
		ParserRuleReturnScope setSection655 =null;
		ParserRuleReturnScope designator656 =null;
		ParserRuleReturnScope typeId657 =null;
		ParserRuleReturnScope expression659 =null;

		Object char_literal625_tree=null;
		Object string_literal627_tree=null;
		Object string_literal629_tree=null;
		Object char_literal631_tree=null;
		Object char_literal633_tree=null;
		Object char_literal635_tree=null;
		Object string_literal638_tree=null;
		Object string_literal639_tree=null;
		Object string_literal640_tree=null;
		Object string_literal641_tree=null;
		Object char_literal642_tree=null;
		Object char_literal644_tree=null;
		Object char_literal646_tree=null;
		Object char_literal648_tree=null;
		Object char_literal649_tree=null;
		Object char_literal650_tree=null;
		Object char_literal653_tree=null;
		Object char_literal658_tree=null;
		Object char_literal660_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:480:30: ( '@' factor | '@@' factor | 'not' factor | '+' factor | '-' factor | '^' ident | intRealNum | 'true' | 'false' | 'nil' | 'nil^' | '(' expression ')' designator | '(' expression ')' ( '^' )? ( '.' expression )? | stringFactor ( '.' simpleExpression )? | setSection | designator | typeId '(' expression ')' )
			int alt223=17;
			alt223 = dfa223.predict(input);
			switch (alt223) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:480:32: '@' factor
					{
					root_0 = (Object)adaptor.nil();


					char_literal625=(Token)match(input,AT2,FOLLOW_AT2_in_factor12899); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal625_tree = (Object)adaptor.create(char_literal625);
					adaptor.addChild(root_0, char_literal625_tree);
					}

					pushFollow(FOLLOW_factor_in_factor12901);
					factor626=factor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor626.getTree());

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:481:32: '@@' factor
					{
					root_0 = (Object)adaptor.nil();


					string_literal627=(Token)match(input,199,FOLLOW_199_in_factor12934); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal627_tree = (Object)adaptor.create(string_literal627);
					adaptor.addChild(root_0, string_literal627_tree);
					}

					pushFollow(FOLLOW_factor_in_factor12936);
					factor628=factor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor628.getTree());

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:482:32: 'not' factor
					{
					root_0 = (Object)adaptor.nil();


					string_literal629=(Token)match(input,NOT,FOLLOW_NOT_in_factor12976); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal629_tree = (Object)adaptor.create(string_literal629);
					adaptor.addChild(root_0, string_literal629_tree);
					}

					pushFollow(FOLLOW_factor_in_factor12978);
					factor630=factor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor630.getTree());

					}
					break;
				case 4 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:483:32: '+' factor
					{
					root_0 = (Object)adaptor.nil();


					char_literal631=(Token)match(input,PLUS,FOLLOW_PLUS_in_factor13011); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal631_tree = (Object)adaptor.create(char_literal631);
					adaptor.addChild(root_0, char_literal631_tree);
					}

					pushFollow(FOLLOW_factor_in_factor13013);
					factor632=factor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor632.getTree());

					}
					break;
				case 5 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:484:32: '-' factor
					{
					root_0 = (Object)adaptor.nil();


					char_literal633=(Token)match(input,MINUS,FOLLOW_MINUS_in_factor13046); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal633_tree = (Object)adaptor.create(char_literal633);
					adaptor.addChild(root_0, char_literal633_tree);
					}

					pushFollow(FOLLOW_factor_in_factor13048);
					factor634=factor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor634.getTree());

					}
					break;
				case 6 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:485:32: '^' ident
					{
					root_0 = (Object)adaptor.nil();


					char_literal635=(Token)match(input,POINTER2,FOLLOW_POINTER2_in_factor13081); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal635_tree = (Object)adaptor.create(char_literal635);
					adaptor.addChild(root_0, char_literal635_tree);
					}

					pushFollow(FOLLOW_ident_in_factor13083);
					ident636=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident636.getTree());

					}
					break;
				case 7 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:486:32: intRealNum
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_intRealNum_in_factor13127);
					intRealNum637=intRealNum();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, intRealNum637.getTree());

					}
					break;
				case 8 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:32: 'true'
					{
					root_0 = (Object)adaptor.nil();


					string_literal638=(Token)match(input,TRUE,FOLLOW_TRUE_in_factor13160); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal638_tree = (Object)adaptor.create(string_literal638);
					adaptor.addChild(root_0, string_literal638_tree);
					}

					}
					break;
				case 9 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:488:32: 'false'
					{
					root_0 = (Object)adaptor.nil();


					string_literal639=(Token)match(input,FALSE,FOLLOW_FALSE_in_factor13193); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal639_tree = (Object)adaptor.create(string_literal639);
					adaptor.addChild(root_0, string_literal639_tree);
					}

					}
					break;
				case 10 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:489:32: 'nil'
					{
					root_0 = (Object)adaptor.nil();


					string_literal640=(Token)match(input,NIL,FOLLOW_NIL_in_factor13226); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal640_tree = (Object)adaptor.create(string_literal640);
					adaptor.addChild(root_0, string_literal640_tree);
					}

					}
					break;
				case 11 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:32: 'nil^'
					{
					root_0 = (Object)adaptor.nil();


					string_literal641=(Token)match(input,210,FOLLOW_210_in_factor13259); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal641_tree = (Object)adaptor.create(string_literal641);
					adaptor.addChild(root_0, string_literal641_tree);
					}

					}
					break;
				case 12 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:491:32: '(' expression ')' designator
					{
					root_0 = (Object)adaptor.nil();


					char_literal642=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_factor13337); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal642_tree = (Object)adaptor.create(char_literal642);
					adaptor.addChild(root_0, char_literal642_tree);
					}

					pushFollow(FOLLOW_expression_in_factor13339);
					expression643=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression643.getTree());

					char_literal644=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_factor13341); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal644_tree = (Object)adaptor.create(char_literal644);
					adaptor.addChild(root_0, char_literal644_tree);
					}

					pushFollow(FOLLOW_designator_in_factor13343);
					designator645=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator645.getTree());

					}
					break;
				case 13 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:492:32: '(' expression ')' ( '^' )? ( '.' expression )?
					{
					root_0 = (Object)adaptor.nil();


					char_literal646=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_factor13376); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal646_tree = (Object)adaptor.create(char_literal646);
					adaptor.addChild(root_0, char_literal646_tree);
					}

					pushFollow(FOLLOW_expression_in_factor13378);
					expression647=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression647.getTree());

					char_literal648=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_factor13380); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal648_tree = (Object)adaptor.create(char_literal648);
					adaptor.addChild(root_0, char_literal648_tree);
					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:492:51: ( '^' )?
					int alt220=2;
					int LA220_0 = input.LA(1);
					if ( (LA220_0==POINTER2) ) {
						int LA220_1 = input.LA(2);
						if ( (synpred305_Delphi()) ) {
							alt220=1;
						}
					}
					switch (alt220) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:492:52: '^'
							{
							char_literal649=(Token)match(input,POINTER2,FOLLOW_POINTER2_in_factor13383); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal649_tree = (Object)adaptor.create(char_literal649);
							adaptor.addChild(root_0, char_literal649_tree);
							}

							}
							break;

					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:492:58: ( '.' expression )?
					int alt221=2;
					int LA221_0 = input.LA(1);
					if ( (LA221_0==DOT) ) {
						int LA221_1 = input.LA(2);
						if ( (synpred306_Delphi()) ) {
							alt221=1;
						}
					}
					switch (alt221) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:492:59: '.' expression
							{
							char_literal650=(Token)match(input,DOT,FOLLOW_DOT_in_factor13388); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal650_tree = (Object)adaptor.create(char_literal650);
							adaptor.addChild(root_0, char_literal650_tree);
							}

							pushFollow(FOLLOW_expression_in_factor13390);
							expression651=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression651.getTree());

							}
							break;

					}

					}
					break;
				case 14 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:32: stringFactor ( '.' simpleExpression )?
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_stringFactor_in_factor13433);
					stringFactor652=stringFactor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, stringFactor652.getTree());

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:45: ( '.' simpleExpression )?
					int alt222=2;
					int LA222_0 = input.LA(1);
					if ( (LA222_0==DOT) ) {
						int LA222_1 = input.LA(2);
						if ( (synpred308_Delphi()) ) {
							alt222=1;
						}
					}
					switch (alt222) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:46: '.' simpleExpression
							{
							char_literal653=(Token)match(input,DOT,FOLLOW_DOT_in_factor13436); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal653_tree = (Object)adaptor.create(char_literal653);
							adaptor.addChild(root_0, char_literal653_tree);
							}

							pushFollow(FOLLOW_simpleExpression_in_factor13438);
							simpleExpression654=simpleExpression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleExpression654.getTree());

							}
							break;

					}

					}
					break;
				case 15 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:494:32: setSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_setSection_in_factor13473);
					setSection655=setSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, setSection655.getTree());

					}
					break;
				case 16 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:495:32: designator
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_designator_in_factor13506);
					designator656=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator656.getTree());

					}
					break;
				case 17 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:496:32: typeId '(' expression ')'
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_typeId_in_factor13539);
					typeId657=typeId();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeId657.getTree());

					char_literal658=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_factor13541); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal658_tree = (Object)adaptor.create(char_literal658);
					adaptor.addChild(root_0, char_literal658_tree);
					}

					pushFollow(FOLLOW_expression_in_factor13543);
					expression659=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression659.getTree());

					char_literal660=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_factor13545); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal660_tree = (Object)adaptor.create(char_literal660);
					adaptor.addChild(root_0, char_literal660_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 121, factor_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "factor"


	public static class stringFactor_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "stringFactor"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:1: stringFactor : ( ( controlString ) ( QuotedString ( controlString ) )* ( QuotedString )? | QuotedString ( ( controlString ) QuotedString )* ( controlString )? );
	public final DelphiParser.stringFactor_return stringFactor() throws RecognitionException {
		DelphiParser.stringFactor_return retval = new DelphiParser.stringFactor_return();
		retval.start = input.LT(1);
		int stringFactor_StartIndex = input.index();

		Object root_0 = null;

		Token QuotedString662=null;
		Token QuotedString664=null;
		Token QuotedString665=null;
		Token QuotedString667=null;
		ParserRuleReturnScope controlString661 =null;
		ParserRuleReturnScope controlString663 =null;
		ParserRuleReturnScope controlString666 =null;
		ParserRuleReturnScope controlString668 =null;

		Object QuotedString662_tree=null;
		Object QuotedString664_tree=null;
		Object QuotedString665_tree=null;
		Object QuotedString667_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:30: ( ( controlString ) ( QuotedString ( controlString ) )* ( QuotedString )? | QuotedString ( ( controlString ) QuotedString )* ( controlString )? )
			int alt228=2;
			int LA228_0 = input.LA(1);
			if ( (LA228_0==ControlChar) ) {
				alt228=1;
			}
			else if ( (LA228_0==QuotedString) ) {
				alt228=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 228, 0, input);
				throw nvae;
			}

			switch (alt228) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:32: ( controlString ) ( QuotedString ( controlString ) )* ( QuotedString )?
					{
					root_0 = (Object)adaptor.nil();


					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:32: ( controlString )
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:33: controlString
					{
					pushFollow(FOLLOW_controlString_in_stringFactor13599);
					controlString661=controlString();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, controlString661.getTree());

					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:48: ( QuotedString ( controlString ) )*
					loop224:
					while (true) {
						int alt224=2;
						int LA224_0 = input.LA(1);
						if ( (LA224_0==QuotedString) ) {
							int LA224_1 = input.LA(2);
							if ( (LA224_1==ControlChar) ) {
								int LA224_3 = input.LA(3);
								if ( (synpred312_Delphi()) ) {
									alt224=1;
								}

							}

						}

						switch (alt224) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:49: QuotedString ( controlString )
							{
							QuotedString662=(Token)match(input,QuotedString,FOLLOW_QuotedString_in_stringFactor13603); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							QuotedString662_tree = (Object)adaptor.create(QuotedString662);
							adaptor.addChild(root_0, QuotedString662_tree);
							}

							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:62: ( controlString )
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:63: controlString
							{
							pushFollow(FOLLOW_controlString_in_stringFactor13606);
							controlString663=controlString();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, controlString663.getTree());

							}

							}
							break;

						default :
							break loop224;
						}
					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:80: ( QuotedString )?
					int alt225=2;
					int LA225_0 = input.LA(1);
					if ( (LA225_0==QuotedString) ) {
						int LA225_1 = input.LA(2);
						if ( (synpred313_Delphi()) ) {
							alt225=1;
						}
					}
					switch (alt225) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:81: QuotedString
							{
							QuotedString664=(Token)match(input,QuotedString,FOLLOW_QuotedString_in_stringFactor13612); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							QuotedString664_tree = (Object)adaptor.create(QuotedString664);
							adaptor.addChild(root_0, QuotedString664_tree);
							}

							}
							break;

					}

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:32: QuotedString ( ( controlString ) QuotedString )* ( controlString )?
					{
					root_0 = (Object)adaptor.nil();


					QuotedString665=(Token)match(input,QuotedString,FOLLOW_QuotedString_in_stringFactor13647); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					QuotedString665_tree = (Object)adaptor.create(QuotedString665);
					adaptor.addChild(root_0, QuotedString665_tree);
					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:45: ( ( controlString ) QuotedString )*
					loop226:
					while (true) {
						int alt226=2;
						alt226 = dfa226.predict(input);
						switch (alt226) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:46: ( controlString ) QuotedString
							{
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:46: ( controlString )
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:47: controlString
							{
							pushFollow(FOLLOW_controlString_in_stringFactor13651);
							controlString666=controlString();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, controlString666.getTree());

							}

							QuotedString667=(Token)match(input,QuotedString,FOLLOW_QuotedString_in_stringFactor13654); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							QuotedString667_tree = (Object)adaptor.create(QuotedString667);
							adaptor.addChild(root_0, QuotedString667_tree);
							}

							}
							break;

						default :
							break loop226;
						}
					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:77: ( controlString )?
					int alt227=2;
					int LA227_0 = input.LA(1);
					if ( (LA227_0==ControlChar) ) {
						int LA227_1 = input.LA(2);
						if ( (synpred316_Delphi()) ) {
							alt227=1;
						}
					}
					switch (alt227) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:78: controlString
							{
							pushFollow(FOLLOW_controlString_in_stringFactor13659);
							controlString668=controlString();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, controlString668.getTree());

							}
							break;

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 122, stringFactor_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "stringFactor"


	public static class controlString_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "controlString"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:501:1: controlString : ControlChar ( ControlChar )* ;
	public final DelphiParser.controlString_return controlString() throws RecognitionException {
		DelphiParser.controlString_return retval = new DelphiParser.controlString_return();
		retval.start = input.LT(1);
		int controlString_StartIndex = input.index();

		Object root_0 = null;

		Token ControlChar669=null;
		Token ControlChar670=null;

		Object ControlChar669_tree=null;
		Object ControlChar670_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:501:30: ( ControlChar ( ControlChar )* )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:501:32: ControlChar ( ControlChar )*
			{
			root_0 = (Object)adaptor.nil();


			ControlChar669=(Token)match(input,ControlChar,FOLLOW_ControlChar_in_controlString13713); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ControlChar669_tree = (Object)adaptor.create(ControlChar669);
			adaptor.addChild(root_0, ControlChar669_tree);
			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:501:44: ( ControlChar )*
			loop229:
			while (true) {
				int alt229=2;
				int LA229_0 = input.LA(1);
				if ( (LA229_0==ControlChar) ) {
					int LA229_2 = input.LA(2);
					if ( (synpred317_Delphi()) ) {
						alt229=1;
					}

				}

				switch (alt229) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:501:45: ControlChar
					{
					ControlChar670=(Token)match(input,ControlChar,FOLLOW_ControlChar_in_controlString13716); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ControlChar670_tree = (Object)adaptor.create(ControlChar670);
					adaptor.addChild(root_0, ControlChar670_tree);
					}

					}
					break;

				default :
					break loop229;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 123, controlString_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "controlString"


	public static class setSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "setSection"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:503:1: setSection : '[' ( expression ( ( ',' | '..' ) expression )* )? ']' ;
	public final DelphiParser.setSection_return setSection() throws RecognitionException {
		DelphiParser.setSection_return retval = new DelphiParser.setSection_return();
		retval.start = input.LT(1);
		int setSection_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal671=null;
		Token set673=null;
		Token char_literal675=null;
		ParserRuleReturnScope expression672 =null;
		ParserRuleReturnScope expression674 =null;

		Object char_literal671_tree=null;
		Object set673_tree=null;
		Object char_literal675_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:503:30: ( '[' ( expression ( ( ',' | '..' ) expression )* )? ']' )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:503:32: '[' ( expression ( ( ',' | '..' ) expression )* )? ']'
			{
			root_0 = (Object)adaptor.nil();


			char_literal671=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_setSection13773); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal671_tree = (Object)adaptor.create(char_literal671);
			adaptor.addChild(root_0, char_literal671_tree);
			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:503:36: ( expression ( ( ',' | '..' ) expression )* )?
			int alt231=2;
			int LA231_0 = input.LA(1);
			if ( (LA231_0==ABSOLUTE||(LA231_0 >= ADD && LA231_0 <= ANSISTRING)||LA231_0==AS||(LA231_0 >= AT && LA231_0 <= AT2)||LA231_0==BREAK||LA231_0==COMMA||(LA231_0 >= CONTAINS && LA231_0 <= DEFAULT)||LA231_0==DISPID||LA231_0==DIV||(LA231_0 >= DOT && LA231_0 <= DOTDOT)||(LA231_0 >= DQ && LA231_0 <= DW)||LA231_0==EQUAL||LA231_0==EXIT||LA231_0==EXPORT||LA231_0==FALSE||LA231_0==FINAL||(LA231_0 >= FUNCTION && LA231_0 <= GE)||(LA231_0 >= GT && LA231_0 <= HELPER)||(LA231_0 >= IMPLEMENTS && LA231_0 <= INHERITED)||LA231_0==IS||LA231_0==LBRACK||LA231_0==LE||(LA231_0 >= LOCAL && LA231_0 <= NAME)||LA231_0==NIL||(LA231_0 >= NOT && LA231_0 <= OBJECT)||(LA231_0 >= OPERATOR && LA231_0 <= OUT)||(LA231_0 >= PLUS && LA231_0 <= PROCEDURE)||LA231_0==PUBLIC||LA231_0==QuotedString||(LA231_0 >= READ && LA231_0 <= READONLY)||(LA231_0 >= REFERENCE && LA231_0 <= REGISTER)||LA231_0==REMOVE||(LA231_0 >= SHL && LA231_0 <= STATIC)||(LA231_0 >= STORED && LA231_0 <= STRING)||LA231_0==TRUE||(LA231_0 >= TkHexNum && LA231_0 <= TkIntNum)||LA231_0==TkRealNum||LA231_0==UNSAFE||(LA231_0 >= VARARGS && LA231_0 <= VIRTUAL)||(LA231_0 >= WRITE && LA231_0 <= WRITEONLY)||(LA231_0 >= XOR && LA231_0 <= 210)) ) {
				alt231=1;
			}
			else if ( (LA231_0==RBRACK) ) {
				int LA231_2 = input.LA(2);
				if ( (synpred320_Delphi()) ) {
					alt231=1;
				}
			}
			switch (alt231) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:503:37: expression ( ( ',' | '..' ) expression )*
					{
					pushFollow(FOLLOW_expression_in_setSection13776);
					expression672=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression672.getTree());

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:503:48: ( ( ',' | '..' ) expression )*
					loop230:
					while (true) {
						int alt230=2;
						int LA230_0 = input.LA(1);
						if ( (LA230_0==COMMA||LA230_0==DOTDOT) ) {
							alt230=1;
						}

						switch (alt230) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:503:49: ( ',' | '..' ) expression
							{
							set673=input.LT(1);
							if ( input.LA(1)==COMMA||input.LA(1)==DOTDOT ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set673));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							pushFollow(FOLLOW_expression_in_setSection13787);
							expression674=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression674.getTree());

							}
							break;

						default :
							break loop230;
						}
					}

					}
					break;

			}

			char_literal675=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_setSection13793); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal675_tree = (Object)adaptor.create(char_literal675);
			adaptor.addChild(root_0, char_literal675_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 124, setSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "setSection"


	public static class designator_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "designator"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:1: designator : ( 'Inherited' )? ( 'inherited' )? ( ( qualifiedIdent | typeId ) )? ( designatorItem )* ;
	public final DelphiParser.designator_return designator() throws RecognitionException {
		DelphiParser.designator_return retval = new DelphiParser.designator_return();
		retval.start = input.LT(1);
		int designator_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal676=null;
		Token string_literal677=null;
		ParserRuleReturnScope qualifiedIdent678 =null;
		ParserRuleReturnScope typeId679 =null;
		ParserRuleReturnScope designatorItem680 =null;

		Object string_literal676_tree=null;
		Object string_literal677_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:30: ( ( 'Inherited' )? ( 'inherited' )? ( ( qualifiedIdent | typeId ) )? ( designatorItem )* )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:32: ( 'Inherited' )? ( 'inherited' )? ( ( qualifiedIdent | typeId ) )? ( designatorItem )*
			{
			root_0 = (Object)adaptor.nil();


			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:32: ( 'Inherited' )?
			int alt232=2;
			int LA232_0 = input.LA(1);
			if ( (LA232_0==203) ) {
				int LA232_1 = input.LA(2);
				if ( (synpred321_Delphi()) ) {
					alt232=1;
				}
			}
			switch (alt232) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:33: 'Inherited'
					{
					string_literal676=(Token)match(input,203,FOLLOW_203_in_designator13850); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal676_tree = (Object)adaptor.create(string_literal676);
					adaptor.addChild(root_0, string_literal676_tree);
					}

					}
					break;

			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:47: ( 'inherited' )?
			int alt233=2;
			int LA233_0 = input.LA(1);
			if ( (LA233_0==INHERITED) ) {
				int LA233_1 = input.LA(2);
				if ( (synpred322_Delphi()) ) {
					alt233=1;
				}
			}
			switch (alt233) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:48: 'inherited'
					{
					string_literal677=(Token)match(input,INHERITED,FOLLOW_INHERITED_in_designator13855); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal677_tree = (Object)adaptor.create(string_literal677);
					adaptor.addChild(root_0, string_literal677_tree);
					}

					}
					break;

			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:62: ( ( qualifiedIdent | typeId ) )?
			int alt235=2;
			switch ( input.LA(1) ) {
				case TkIdentifier:
					{
					int LA235_1 = input.LA(2);
					if ( (synpred324_Delphi()) ) {
						alt235=1;
					}
					}
					break;
				case 198:
					{
					int LA235_2 = input.LA(2);
					if ( (synpred324_Delphi()) ) {
						alt235=1;
					}
					}
					break;
				case IN:
					{
					int LA235_3 = input.LA(2);
					if ( (synpred324_Delphi()) ) {
						alt235=1;
					}
					}
					break;
				case TRUE:
					{
					int LA235_5 = input.LA(2);
					if ( (synpred324_Delphi()) ) {
						alt235=1;
					}
					}
					break;
				case FALSE:
					{
					int LA235_6 = input.LA(2);
					if ( (synpred324_Delphi()) ) {
						alt235=1;
					}
					}
					break;
				case NAME:
					{
					int LA235_7 = input.LA(2);
					if ( (synpred324_Delphi()) ) {
						alt235=1;
					}
					}
					break;
				case READ:
					{
					int LA235_8 = input.LA(2);
					if ( (synpred324_Delphi()) ) {
						alt235=1;
					}
					}
					break;
				case WRITE:
					{
					int LA235_9 = input.LA(2);
					if ( (synpred324_Delphi()) ) {
						alt235=1;
					}
					}
					break;
				case READONLY:
					{
					int LA235_10 = input.LA(2);
					if ( (synpred324_Delphi()) ) {
						alt235=1;
					}
					}
					break;
				case WRITEONLY:
					{
					int LA235_11 = input.LA(2);
					if ( (synpred324_Delphi()) ) {
						alt235=1;
					}
					}
					break;
				case DISPID:
					{
					int LA235_12 = input.LA(2);
					if ( (synpred324_Delphi()) ) {
						alt235=1;
					}
					}
					break;
				case STORED:
					{
					int LA235_13 = input.LA(2);
					if ( (synpred324_Delphi()) ) {
						alt235=1;
					}
					}
					break;
				case DEFAULT:
					{
					int LA235_14 = input.LA(2);
					if ( (synpred324_Delphi()) ) {
						alt235=1;
					}
					}
					break;
				case IMPLEMENTS:
					{
					int LA235_15 = input.LA(2);
					if ( (synpred324_Delphi()) ) {
						alt235=1;
					}
					}
					break;
				case REGISTER:
					{
					int LA235_16 = input.LA(2);
					if ( (synpred324_Delphi()) ) {
						alt235=1;
					}
					}
					break;
				case EXPORT:
					{
					int LA235_17 = input.LA(2);
					if ( (synpred324_Delphi()) ) {
						alt235=1;
					}
					}
					break;
				case LOCAL:
					{
					int LA235_18 = input.LA(2);
					if ( (synpred324_Delphi()) ) {
						alt235=1;
					}
					}
					break;
				case VARARGS:
					{
					int LA235_19 = input.LA(2);
					if ( (synpred324_Delphi()) ) {
						alt235=1;
					}
					}
					break;
				case UNSAFE:
					{
					int LA235_20 = input.LA(2);
					if ( (synpred324_Delphi()) ) {
						alt235=1;
					}
					}
					break;
				case INDEX:
					{
					int LA235_21 = input.LA(2);
					if ( (synpred324_Delphi()) ) {
						alt235=1;
					}
					}
					break;
				case ABSOLUTE:
					{
					int LA235_22 = input.LA(2);
					if ( (synpred324_Delphi()) ) {
						alt235=1;
					}
					}
					break;
				case STRICT:
					{
					int LA235_23 = input.LA(2);
					if ( (synpred324_Delphi()) ) {
						alt235=1;
					}
					}
					break;
				case PRIVATE:
					{
					int LA235_24 = input.LA(2);
					if ( (synpred324_Delphi()) ) {
						alt235=1;
					}
					}
					break;
				case PUBLIC:
					{
					int LA235_25 = input.LA(2);
					if ( (synpred324_Delphi()) ) {
						alt235=1;
					}
					}
					break;
				case OPERATOR:
					{
					int LA235_26 = input.LA(2);
					if ( (synpred324_Delphi()) ) {
						alt235=1;
					}
					}
					break;
				case AT:
					{
					int LA235_27 = input.LA(2);
					if ( (synpred324_Delphi()) ) {
						alt235=1;
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DQ:
				case DW:
				case EXIT:
				case FINAL:
				case HELPER:
				case MESSAGE:
				case OBJECT:
				case OUT:
				case POINTER:
				case REFERENCE:
				case REMOVE:
				case STATIC:
				case STRING:
				case VARIANT:
				case VIRTUAL:
					{
					int LA235_28 = input.LA(2);
					if ( (synpred324_Delphi()) ) {
						alt235=1;
					}
					}
					break;
			}
			switch (alt235) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:64: ( qualifiedIdent | typeId )
					{
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:64: ( qualifiedIdent | typeId )
					int alt234=2;
					switch ( input.LA(1) ) {
					case TkIdentifier:
						{
						int LA234_1 = input.LA(2);
						if ( (synpred323_Delphi()) ) {
							alt234=1;
						}
						else if ( (true) ) {
							alt234=2;
						}

						}
						break;
					case 198:
						{
						int LA234_2 = input.LA(2);
						if ( (LA234_2==TkIdentifier) ) {
							int LA234_6 = input.LA(3);
							if ( (synpred323_Delphi()) ) {
								alt234=1;
							}
							else if ( (true) ) {
								alt234=2;
							}

						}
						else if ( ((LA234_2 >= ABSOLUTE && LA234_2 <= ASSEMBLY)||LA234_2==AT||LA234_2==AUTOMATED||(LA234_2 >= BEGIN && LA234_2 <= CLASS)||(LA234_2 >= CONST && LA234_2 <= CONTINUE)||LA234_2==DEFAULT||(LA234_2 >= DEPRECATED && LA234_2 <= DO)||(LA234_2 >= DOWNTO && LA234_2 <= DYNAMIC)||(LA234_2 >= ELSE && LA234_2 <= END)||(LA234_2 >= EXCEPT && LA234_2 <= FUNCTION)||LA234_2==GOTO||LA234_2==HELPER||(LA234_2 >= IF && LA234_2 <= LABEL)||(LA234_2 >= LIBRARY && LA234_2 <= LOCAL)||LA234_2==MESSAGE||(LA234_2 >= MOD && LA234_2 <= NOT)||(LA234_2 >= OBJECT && LA234_2 <= PLATFORM)||LA234_2==POINTER||(LA234_2 >= PRIVATE && LA234_2 <= PUBLISHED)||LA234_2==RAISE||(LA234_2 >= READ && LA234_2 <= RESOURCESTRING)||(LA234_2 >= SAFECALL && LA234_2 <= SEALED)||(LA234_2 >= SET && LA234_2 <= SHR)||(LA234_2 >= STATIC && LA234_2 <= TYPE)||(LA234_2 >= UNIT && LA234_2 <= USES)||(LA234_2 >= VAR && LA234_2 <= WRITEONLY)||LA234_2==XOR) ) {
							int LA234_7 = input.LA(3);
							if ( (synpred323_Delphi()) ) {
								alt234=1;
							}
							else if ( (true) ) {
								alt234=2;
							}

						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 234, 2, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case ABSOLUTE:
					case ADD:
					case ANSISTRING:
					case AT:
					case BREAK:
					case CONTAINS:
					case CONTINUE:
					case DEFAULT:
					case DISPID:
					case DQ:
					case DW:
					case EXIT:
					case EXPORT:
					case FALSE:
					case FINAL:
					case HELPER:
					case IMPLEMENTS:
					case IN:
					case INDEX:
					case LOCAL:
					case MESSAGE:
					case NAME:
					case OBJECT:
					case OPERATOR:
					case OUT:
					case POINTER:
					case PRIVATE:
					case PUBLIC:
					case READ:
					case READONLY:
					case REFERENCE:
					case REGISTER:
					case REMOVE:
					case STATIC:
					case STORED:
					case STRICT:
					case STRING:
					case TRUE:
					case UNSAFE:
					case VARARGS:
					case VARIANT:
					case VIRTUAL:
					case WRITE:
					case WRITEONLY:
						{
						int LA234_3 = input.LA(2);
						if ( (synpred323_Delphi()) ) {
							alt234=1;
						}
						else if ( (true) ) {
							alt234=2;
						}

						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 234, 0, input);
						throw nvae;
					}
					switch (alt234) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:65: qualifiedIdent
							{
							pushFollow(FOLLOW_qualifiedIdent_in_designator13862);
							qualifiedIdent678=qualifiedIdent();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdent678.getTree());

							}
							break;
						case 2 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:82: typeId
							{
							pushFollow(FOLLOW_typeId_in_designator13866);
							typeId679=typeId();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, typeId679.getTree());

							}
							break;

					}

					}
					break;

			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:93: ( designatorItem )*
			loop236:
			while (true) {
				int alt236=2;
				alt236 = dfa236.predict(input);
				switch (alt236) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:94: designatorItem
					{
					pushFollow(FOLLOW_designatorItem_in_designator13873);
					designatorItem680=designatorItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designatorItem680.getTree());

					}
					break;

				default :
					break loop236;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 125, designator_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "designator"


	public static class designatorItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "designatorItem"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:508:1: designatorItem : ( '^' | '^^' | ( '.' | '@' ) ident | ( '<' genericTypeIdent ( ',' genericTypeIdent )* '>' ) | '[' expressionList ']' | '(' ( expression ( colonConstruct )? ( ',' expression ( colonConstruct )? )* )? ')' -> '(' ( expression ( colonConstruct )? ( expression ( colonConstruct )? )* )? ')' );
	public final DelphiParser.designatorItem_return designatorItem() throws RecognitionException {
		DelphiParser.designatorItem_return retval = new DelphiParser.designatorItem_return();
		retval.start = input.LT(1);
		int designatorItem_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal681=null;
		Token string_literal682=null;
		Token set683=null;
		Token char_literal685=null;
		Token char_literal687=null;
		Token char_literal689=null;
		Token char_literal690=null;
		Token char_literal692=null;
		Token char_literal693=null;
		Token char_literal696=null;
		Token char_literal699=null;
		ParserRuleReturnScope ident684 =null;
		ParserRuleReturnScope genericTypeIdent686 =null;
		ParserRuleReturnScope genericTypeIdent688 =null;
		ParserRuleReturnScope expressionList691 =null;
		ParserRuleReturnScope expression694 =null;
		ParserRuleReturnScope colonConstruct695 =null;
		ParserRuleReturnScope expression697 =null;
		ParserRuleReturnScope colonConstruct698 =null;

		Object char_literal681_tree=null;
		Object string_literal682_tree=null;
		Object set683_tree=null;
		Object char_literal685_tree=null;
		Object char_literal687_tree=null;
		Object char_literal689_tree=null;
		Object char_literal690_tree=null;
		Object char_literal692_tree=null;
		Object char_literal693_tree=null;
		Object char_literal696_tree=null;
		Object char_literal699_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_colonConstruct=new RewriteRuleSubtreeStream(adaptor,"rule colonConstruct");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:508:30: ( '^' | '^^' | ( '.' | '@' ) ident | ( '<' genericTypeIdent ( ',' genericTypeIdent )* '>' ) | '[' expressionList ']' | '(' ( expression ( colonConstruct )? ( ',' expression ( colonConstruct )? )* )? ')' -> '(' ( expression ( colonConstruct )? ( expression ( colonConstruct )? )* )? ')' )
			int alt242=6;
			switch ( input.LA(1) ) {
			case POINTER2:
				{
				alt242=1;
				}
				break;
			case 209:
				{
				alt242=2;
				}
				break;
			case AT2:
			case DOT:
				{
				alt242=3;
				}
				break;
			case LT:
				{
				alt242=4;
				}
				break;
			case LBRACK:
				{
				alt242=5;
				}
				break;
			case LPAREN:
				{
				alt242=6;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 242, 0, input);
				throw nvae;
			}
			switch (alt242) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:508:32: '^'
					{
					root_0 = (Object)adaptor.nil();


					char_literal681=(Token)match(input,POINTER2,FOLLOW_POINTER2_in_designatorItem13926); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal681_tree = (Object)adaptor.create(char_literal681);
					adaptor.addChild(root_0, char_literal681_tree);
					}

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:509:32: '^^'
					{
					root_0 = (Object)adaptor.nil();


					string_literal682=(Token)match(input,209,FOLLOW_209_in_designatorItem13959); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal682_tree = (Object)adaptor.create(string_literal682);
					adaptor.addChild(root_0, string_literal682_tree);
					}

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:510:32: ( '.' | '@' ) ident
					{
					root_0 = (Object)adaptor.nil();


					set683=input.LT(1);
					if ( input.LA(1)==AT2||input.LA(1)==DOT ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set683));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					pushFollow(FOLLOW_ident_in_designatorItem14000);
					ident684=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident684.getTree());

					}
					break;
				case 4 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:511:32: ( '<' genericTypeIdent ( ',' genericTypeIdent )* '>' )
					{
					root_0 = (Object)adaptor.nil();


					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:511:32: ( '<' genericTypeIdent ( ',' genericTypeIdent )* '>' )
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:511:33: '<' genericTypeIdent ( ',' genericTypeIdent )* '>'
					{
					char_literal685=(Token)match(input,LT,FOLLOW_LT_in_designatorItem14048); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal685_tree = (Object)adaptor.create(char_literal685);
					adaptor.addChild(root_0, char_literal685_tree);
					}

					pushFollow(FOLLOW_genericTypeIdent_in_designatorItem14050);
					genericTypeIdent686=genericTypeIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeIdent686.getTree());

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:511:54: ( ',' genericTypeIdent )*
					loop237:
					while (true) {
						int alt237=2;
						int LA237_0 = input.LA(1);
						if ( (LA237_0==COMMA) ) {
							alt237=1;
						}

						switch (alt237) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:511:55: ',' genericTypeIdent
							{
							char_literal687=(Token)match(input,COMMA,FOLLOW_COMMA_in_designatorItem14053); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal687_tree = (Object)adaptor.create(char_literal687);
							adaptor.addChild(root_0, char_literal687_tree);
							}

							pushFollow(FOLLOW_genericTypeIdent_in_designatorItem14055);
							genericTypeIdent688=genericTypeIdent();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeIdent688.getTree());

							}
							break;

						default :
							break loop237;
						}
					}

					char_literal689=(Token)match(input,GT,FOLLOW_GT_in_designatorItem14059); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal689_tree = (Object)adaptor.create(char_literal689);
					adaptor.addChild(root_0, char_literal689_tree);
					}

					}

					}
					break;
				case 5 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:512:32: '[' expressionList ']'
					{
					root_0 = (Object)adaptor.nil();


					char_literal690=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_designatorItem14100); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal690_tree = (Object)adaptor.create(char_literal690);
					adaptor.addChild(root_0, char_literal690_tree);
					}

					pushFollow(FOLLOW_expressionList_in_designatorItem14102);
					expressionList691=expressionList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList691.getTree());

					char_literal692=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_designatorItem14104); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal692_tree = (Object)adaptor.create(char_literal692);
					adaptor.addChild(root_0, char_literal692_tree);
					}

					}
					break;
				case 6 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:513:32: '(' ( expression ( colonConstruct )? ( ',' expression ( colonConstruct )? )* )? ')'
					{
					char_literal693=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_designatorItem14137); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(char_literal693);

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:513:36: ( expression ( colonConstruct )? ( ',' expression ( colonConstruct )? )* )?
					int alt241=2;
					int LA241_0 = input.LA(1);
					if ( (LA241_0==ABSOLUTE||(LA241_0 >= ADD && LA241_0 <= ANSISTRING)||LA241_0==AS||(LA241_0 >= AT && LA241_0 <= AT2)||LA241_0==BREAK||(LA241_0 >= COLON && LA241_0 <= COMMA)||(LA241_0 >= CONTAINS && LA241_0 <= DEFAULT)||LA241_0==DISPID||LA241_0==DIV||LA241_0==DOT||(LA241_0 >= DQ && LA241_0 <= DW)||LA241_0==EQUAL||LA241_0==EXIT||LA241_0==EXPORT||LA241_0==FALSE||LA241_0==FINAL||(LA241_0 >= FUNCTION && LA241_0 <= GE)||(LA241_0 >= GT && LA241_0 <= HELPER)||(LA241_0 >= IMPLEMENTS && LA241_0 <= INHERITED)||LA241_0==IS||LA241_0==LBRACK||LA241_0==LE||(LA241_0 >= LOCAL && LA241_0 <= NAME)||LA241_0==NIL||(LA241_0 >= NOT && LA241_0 <= OBJECT)||(LA241_0 >= OPERATOR && LA241_0 <= OUT)||(LA241_0 >= PLUS && LA241_0 <= PROCEDURE)||LA241_0==PUBLIC||LA241_0==QuotedString||(LA241_0 >= READ && LA241_0 <= READONLY)||(LA241_0 >= REFERENCE && LA241_0 <= REGISTER)||LA241_0==REMOVE||(LA241_0 >= SHL && LA241_0 <= STATIC)||(LA241_0 >= STORED && LA241_0 <= STRING)||LA241_0==TRUE||(LA241_0 >= TkHexNum && LA241_0 <= TkIntNum)||LA241_0==TkRealNum||LA241_0==UNSAFE||(LA241_0 >= VARARGS && LA241_0 <= VIRTUAL)||(LA241_0 >= WRITE && LA241_0 <= WRITEONLY)||(LA241_0 >= XOR && LA241_0 <= 210)) ) {
						alt241=1;
					}
					else if ( (LA241_0==RPAREN) ) {
						int LA241_2 = input.LA(2);
						if ( (synpred336_Delphi()) ) {
							alt241=1;
						}
					}
					switch (alt241) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:513:37: expression ( colonConstruct )? ( ',' expression ( colonConstruct )? )*
							{
							pushFollow(FOLLOW_expression_in_designatorItem14140);
							expression694=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_expression.add(expression694.getTree());
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:513:48: ( colonConstruct )?
							int alt238=2;
							int LA238_0 = input.LA(1);
							if ( (LA238_0==COLON) ) {
								alt238=1;
							}
							switch (alt238) {
								case 1 :
									// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:513:49: colonConstruct
									{
									pushFollow(FOLLOW_colonConstruct_in_designatorItem14143);
									colonConstruct695=colonConstruct();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_colonConstruct.add(colonConstruct695.getTree());
									}
									break;

							}

							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:513:66: ( ',' expression ( colonConstruct )? )*
							loop240:
							while (true) {
								int alt240=2;
								int LA240_0 = input.LA(1);
								if ( (LA240_0==COMMA) ) {
									alt240=1;
								}

								switch (alt240) {
								case 1 :
									// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:513:67: ',' expression ( colonConstruct )?
									{
									char_literal696=(Token)match(input,COMMA,FOLLOW_COMMA_in_designatorItem14148); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_COMMA.add(char_literal696);

									pushFollow(FOLLOW_expression_in_designatorItem14150);
									expression697=expression();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_expression.add(expression697.getTree());
									// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:513:82: ( colonConstruct )?
									int alt239=2;
									int LA239_0 = input.LA(1);
									if ( (LA239_0==COLON) ) {
										alt239=1;
									}
									switch (alt239) {
										case 1 :
											// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:513:83: colonConstruct
											{
											pushFollow(FOLLOW_colonConstruct_in_designatorItem14153);
											colonConstruct698=colonConstruct();
											state._fsp--;
											if (state.failed) return retval;
											if ( state.backtracking==0 ) stream_colonConstruct.add(colonConstruct698.getTree());
											}
											break;

									}

									}
									break;

								default :
									break loop240;
								}
							}

							}
							break;

					}

					char_literal699=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_designatorItem14161); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(char_literal699);

					// AST REWRITE
					// elements: RPAREN, colonConstruct, expression, expression, colonConstruct, LPAREN
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 513:108: -> '(' ( expression ( colonConstruct )? ( expression ( colonConstruct )? )* )? ')'
					{
						adaptor.addChild(root_0, stream_LPAREN.nextNode());
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:513:115: ( expression ( colonConstruct )? ( expression ( colonConstruct )? )* )?
						if ( stream_colonConstruct.hasNext()||stream_expression.hasNext()||stream_expression.hasNext() ) {
							adaptor.addChild(root_0, stream_expression.nextTree());
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:513:127: ( colonConstruct )?
							if ( stream_colonConstruct.hasNext() ) {
								adaptor.addChild(root_0, stream_colonConstruct.nextTree());
							}
							stream_colonConstruct.reset();

							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:513:145: ( expression ( colonConstruct )? )*
							while ( stream_expression.hasNext() ) {
								adaptor.addChild(root_0, stream_expression.nextTree());
								// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:513:157: ( colonConstruct )?
								if ( stream_colonConstruct.hasNext() ) {
									adaptor.addChild(root_0, stream_colonConstruct.nextTree());
								}
								stream_colonConstruct.reset();

							}
							stream_expression.reset();

						}
						stream_colonConstruct.reset();
						stream_expression.reset();
						stream_expression.reset();

						adaptor.addChild(root_0, stream_RPAREN.nextNode());
					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 126, designatorItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "designatorItem"


	public static class expressionList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "expressionList"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:515:1: expressionList : expression ( ',' expression )* ;
	public final DelphiParser.expressionList_return expressionList() throws RecognitionException {
		DelphiParser.expressionList_return retval = new DelphiParser.expressionList_return();
		retval.start = input.LT(1);
		int expressionList_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal701=null;
		ParserRuleReturnScope expression700 =null;
		ParserRuleReturnScope expression702 =null;

		Object char_literal701_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:515:30: ( expression ( ',' expression )* )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:515:32: expression ( ',' expression )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_expression_in_expressionList14238);
			expression700=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression700.getTree());

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:515:43: ( ',' expression )*
			loop243:
			while (true) {
				int alt243=2;
				int LA243_0 = input.LA(1);
				if ( (LA243_0==COMMA) ) {
					alt243=1;
				}

				switch (alt243) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:515:44: ',' expression
					{
					char_literal701=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList14241); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal701_tree = (Object)adaptor.create(char_literal701);
					adaptor.addChild(root_0, char_literal701_tree);
					}

					pushFollow(FOLLOW_expression_in_expressionList14243);
					expression702=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression702.getTree());

					}
					break;

				default :
					break loop243;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 127, expressionList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "expressionList"


	public static class colonConstruct_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "colonConstruct"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:517:1: colonConstruct : ':' expression ( ':' expression )? ;
	public final DelphiParser.colonConstruct_return colonConstruct() throws RecognitionException {
		DelphiParser.colonConstruct_return retval = new DelphiParser.colonConstruct_return();
		retval.start = input.LT(1);
		int colonConstruct_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal703=null;
		Token char_literal705=null;
		ParserRuleReturnScope expression704 =null;
		ParserRuleReturnScope expression706 =null;

		Object char_literal703_tree=null;
		Object char_literal705_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:517:30: ( ':' expression ( ':' expression )? )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:517:32: ':' expression ( ':' expression )?
			{
			root_0 = (Object)adaptor.nil();


			char_literal703=(Token)match(input,COLON,FOLLOW_COLON_in_colonConstruct14296); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal703_tree = (Object)adaptor.create(char_literal703);
			adaptor.addChild(root_0, char_literal703_tree);
			}

			pushFollow(FOLLOW_expression_in_colonConstruct14298);
			expression704=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression704.getTree());

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:517:47: ( ':' expression )?
			int alt244=2;
			int LA244_0 = input.LA(1);
			if ( (LA244_0==COLON) ) {
				alt244=1;
			}
			switch (alt244) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:517:48: ':' expression
					{
					char_literal705=(Token)match(input,COLON,FOLLOW_COLON_in_colonConstruct14301); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal705_tree = (Object)adaptor.create(char_literal705);
					adaptor.addChild(root_0, char_literal705_tree);
					}

					pushFollow(FOLLOW_expression_in_colonConstruct14303);
					expression706=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression706.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 128, colonConstruct_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "colonConstruct"


	public static class operator_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "operator"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:520:1: operator : ( '+' | '-' | 'or' | 'OR' | 'xor' | 'XOR' | '*' | '/' | 'div' | 'DIV' | 'mod' | 'MOD' | 'and' | 'AND' | 'shl' | 'SHL' | 'shr' | 'SHR' | 'as' | 'AS' );
	public final DelphiParser.operator_return operator() throws RecognitionException {
		DelphiParser.operator_return retval = new DelphiParser.operator_return();
		retval.start = input.LT(1);
		int operator_StartIndex = input.index();

		Object root_0 = null;

		Token set707=null;

		Object set707_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:520:30: ( '+' | '-' | 'or' | 'OR' | 'xor' | 'XOR' | '*' | '/' | 'div' | 'DIV' | 'mod' | 'MOD' | 'and' | 'AND' | 'shl' | 'SHL' | 'shr' | 'SHR' | 'as' | 'AS' )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set707=input.LT(1);
			if ( input.LA(1)==AND||input.LA(1)==AS||input.LA(1)==DIV||(input.LA(1) >= MINUS && input.LA(1) <= MOD)||input.LA(1)==OR||input.LA(1)==PLUS||(input.LA(1) >= SHL && input.LA(1) <= STAR)||input.LA(1)==XOR||(input.LA(1) >= 200 && input.LA(1) <= 202)||(input.LA(1) >= 204 && input.LA(1) <= 208) ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set707));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 129, operator_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "operator"


	public static class relOp_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "relOp"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:541:1: relOp : ( '<' | '>' | '<=' | '>=' | '<>' | '=' | 'in' | 'is' );
	public final DelphiParser.relOp_return relOp() throws RecognitionException {
		DelphiParser.relOp_return retval = new DelphiParser.relOp_return();
		retval.start = input.LT(1);
		int relOp_StartIndex = input.index();

		Object root_0 = null;

		Token set708=null;

		Object set708_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:541:30: ( '<' | '>' | '<=' | '>=' | '<>' | '=' | 'in' | 'is' )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set708=input.LT(1);
			if ( input.LA(1)==EQUAL||input.LA(1)==GE||input.LA(1)==GT||input.LA(1)==IN||input.LA(1)==IS||input.LA(1)==LE||input.LA(1)==LT||input.LA(1)==NOT_EQUAL ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set708));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 130, relOp_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "relOp"


	public static class statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "statement"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:554:1: statement : ( ifStatement | caseStatement | repeatStatement | whileStatement | forStatement | withStatement | tryStatement | raiseStatement | assemblerStatement | compoundStatement | label ':' statement | simpleStatement );
	public final DelphiParser.statement_return statement() throws RecognitionException {
		DelphiParser.statement_return retval = new DelphiParser.statement_return();
		retval.start = input.LT(1);
		int statement_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal720=null;
		ParserRuleReturnScope ifStatement709 =null;
		ParserRuleReturnScope caseStatement710 =null;
		ParserRuleReturnScope repeatStatement711 =null;
		ParserRuleReturnScope whileStatement712 =null;
		ParserRuleReturnScope forStatement713 =null;
		ParserRuleReturnScope withStatement714 =null;
		ParserRuleReturnScope tryStatement715 =null;
		ParserRuleReturnScope raiseStatement716 =null;
		ParserRuleReturnScope assemblerStatement717 =null;
		ParserRuleReturnScope compoundStatement718 =null;
		ParserRuleReturnScope label719 =null;
		ParserRuleReturnScope statement721 =null;
		ParserRuleReturnScope simpleStatement722 =null;

		Object char_literal720_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:554:30: ( ifStatement | caseStatement | repeatStatement | whileStatement | forStatement | withStatement | tryStatement | raiseStatement | assemblerStatement | compoundStatement | label ':' statement | simpleStatement )
			int alt245=12;
			switch ( input.LA(1) ) {
			case IF:
				{
				alt245=1;
				}
				break;
			case CASE:
				{
				alt245=2;
				}
				break;
			case REPEAT:
				{
				alt245=3;
				}
				break;
			case WHILE:
				{
				alt245=4;
				}
				break;
			case FOR:
				{
				alt245=5;
				}
				break;
			case WITH:
				{
				alt245=6;
				}
				break;
			case TRY:
				{
				alt245=7;
				}
				break;
			case RAISE:
				{
				alt245=8;
				}
				break;
			case ASM:
				{
				alt245=9;
				}
				break;
			case BEGIN:
				{
				alt245=10;
				}
				break;
			case TkIdentifier:
				{
				int LA245_11 = input.LA(2);
				if ( (LA245_11==COLON) ) {
					int LA245_22 = input.LA(3);
					if ( (synpred375_Delphi()) ) {
						alt245=11;
					}
					else if ( (true) ) {
						alt245=12;
					}

				}
				else if ( (LA245_11==EOF||LA245_11==ABSOLUTE||(LA245_11 >= ADD && LA245_11 <= ANSISTRING)||LA245_11==AS||(LA245_11 >= ASSIGN && LA245_11 <= AT2)||LA245_11==BREAK||LA245_11==COMMA||(LA245_11 >= CONTAINS && LA245_11 <= DEFAULT)||LA245_11==DISPID||LA245_11==DIV||(LA245_11 >= DOT && LA245_11 <= DOTDOT)||(LA245_11 >= DQ && LA245_11 <= DW)||(LA245_11 >= ELSE && LA245_11 <= EXIT)||LA245_11==EXPORT||LA245_11==FALSE||(LA245_11 >= FINAL && LA245_11 <= FINALLY)||(LA245_11 >= FUNCTION && LA245_11 <= GE)||(LA245_11 >= GT && LA245_11 <= HELPER)||(LA245_11 >= IMPLEMENTS && LA245_11 <= INHERITED)||LA245_11==IS||LA245_11==LBRACK||LA245_11==LE||(LA245_11 >= LOCAL && LA245_11 <= NAME)||LA245_11==NIL||(LA245_11 >= NOT && LA245_11 <= OBJECT)||(LA245_11 >= ON && LA245_11 <= OUT)||(LA245_11 >= PLUS && LA245_11 <= PROCEDURE)||LA245_11==PUBLIC||LA245_11==QuotedString||(LA245_11 >= READ && LA245_11 <= READONLY)||(LA245_11 >= REFERENCE && LA245_11 <= REGISTER)||LA245_11==REMOVE||LA245_11==SEMI||(LA245_11 >= SHL && LA245_11 <= STATIC)||(LA245_11 >= STORED && LA245_11 <= STRING)||LA245_11==TRUE||(LA245_11 >= TkHexNum && LA245_11 <= TkIntNum)||LA245_11==TkRealNum||(LA245_11 >= UNSAFE && LA245_11 <= UNTIL)||(LA245_11 >= VARARGS && LA245_11 <= VIRTUAL)||(LA245_11 >= WRITE && LA245_11 <= WRITEONLY)||(LA245_11 >= XOR && LA245_11 <= 210)) ) {
					alt245=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 245, 11, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TkIntNum:
				{
				int LA245_12 = input.LA(2);
				if ( (LA245_12==COLON) ) {
					int LA245_23 = input.LA(3);
					if ( (synpred375_Delphi()) ) {
						alt245=11;
					}
					else if ( (true) ) {
						alt245=12;
					}

				}
				else if ( (LA245_12==AND||LA245_12==AS||LA245_12==COMMA||LA245_12==DIV||LA245_12==DOTDOT||LA245_12==EQUAL||LA245_12==GE||LA245_12==GT||LA245_12==IN||LA245_12==IS||LA245_12==LE||LA245_12==LT||(LA245_12 >= MINUS && LA245_12 <= MOD)||LA245_12==NOT_EQUAL||LA245_12==OR||LA245_12==PLUS||(LA245_12 >= SHL && LA245_12 <= STAR)||LA245_12==XOR||(LA245_12 >= 200 && LA245_12 <= 202)||(LA245_12 >= 204 && LA245_12 <= 208)) ) {
					alt245=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 245, 12, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TkHexNum:
				{
				int LA245_13 = input.LA(2);
				if ( (LA245_13==COLON) ) {
					int LA245_24 = input.LA(3);
					if ( (synpred375_Delphi()) ) {
						alt245=11;
					}
					else if ( (true) ) {
						alt245=12;
					}

				}
				else if ( (LA245_13==AND||LA245_13==AS||LA245_13==COMMA||LA245_13==DIV||LA245_13==DOTDOT||LA245_13==EQUAL||LA245_13==GE||LA245_13==GT||LA245_13==IN||LA245_13==IS||LA245_13==LE||LA245_13==LT||(LA245_13 >= MINUS && LA245_13 <= MOD)||LA245_13==NOT_EQUAL||LA245_13==OR||LA245_13==PLUS||(LA245_13 >= SHL && LA245_13 <= STAR)||LA245_13==XOR||(LA245_13 >= 200 && LA245_13 <= 202)||(LA245_13 >= 204 && LA245_13 <= 208)) ) {
					alt245=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 245, 13, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TRUE:
				{
				int LA245_14 = input.LA(2);
				if ( (LA245_14==COLON) ) {
					int LA245_25 = input.LA(3);
					if ( (synpred375_Delphi()) ) {
						alt245=11;
					}
					else if ( (true) ) {
						alt245=12;
					}

				}
				else if ( (LA245_14==EOF||LA245_14==ABSOLUTE||(LA245_14 >= ADD && LA245_14 <= ANSISTRING)||LA245_14==AS||(LA245_14 >= ASSIGN && LA245_14 <= AT2)||LA245_14==BREAK||LA245_14==COMMA||(LA245_14 >= CONTAINS && LA245_14 <= DEFAULT)||LA245_14==DISPID||LA245_14==DIV||(LA245_14 >= DOT && LA245_14 <= DOTDOT)||(LA245_14 >= DQ && LA245_14 <= DW)||(LA245_14 >= ELSE && LA245_14 <= EXIT)||LA245_14==EXPORT||LA245_14==FALSE||(LA245_14 >= FINAL && LA245_14 <= FINALLY)||(LA245_14 >= FUNCTION && LA245_14 <= GE)||(LA245_14 >= GT && LA245_14 <= HELPER)||(LA245_14 >= IMPLEMENTS && LA245_14 <= INHERITED)||LA245_14==IS||LA245_14==LBRACK||LA245_14==LE||(LA245_14 >= LOCAL && LA245_14 <= NAME)||LA245_14==NIL||(LA245_14 >= NOT && LA245_14 <= OBJECT)||(LA245_14 >= ON && LA245_14 <= OUT)||(LA245_14 >= PLUS && LA245_14 <= PROCEDURE)||LA245_14==PUBLIC||LA245_14==QuotedString||(LA245_14 >= READ && LA245_14 <= READONLY)||(LA245_14 >= REFERENCE && LA245_14 <= REGISTER)||LA245_14==REMOVE||LA245_14==SEMI||(LA245_14 >= SHL && LA245_14 <= STATIC)||(LA245_14 >= STORED && LA245_14 <= STRING)||LA245_14==TRUE||(LA245_14 >= TkHexNum && LA245_14 <= TkIntNum)||LA245_14==TkRealNum||(LA245_14 >= UNSAFE && LA245_14 <= UNTIL)||(LA245_14 >= VARARGS && LA245_14 <= VIRTUAL)||(LA245_14 >= WRITE && LA245_14 <= WRITEONLY)||(LA245_14 >= XOR && LA245_14 <= 210)) ) {
					alt245=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 245, 14, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EOF:
			case AND:
			case AS:
			case ASSIGN:
			case AT2:
			case COLON:
			case COMMA:
			case ControlChar:
			case DIV:
			case DOT:
			case DOTDOT:
			case ELSE:
			case END:
			case EQUAL:
			case EXCEPT:
			case FINALIZATION:
			case FINALLY:
			case FUNCTION:
			case GE:
			case GOTO:
			case GT:
			case INHERITED:
			case IS:
			case LBRACK:
			case LE:
			case LPAREN:
			case LT:
			case MINUS:
			case MOD:
			case NIL:
			case NOT:
			case NOT_EQUAL:
			case ON:
			case OR:
			case PLUS:
			case POINTER2:
			case PROCEDURE:
			case QuotedString:
			case SEMI:
			case SHL:
			case SHR:
			case SLASH:
			case STAR:
			case TkRealNum:
			case UNTIL:
			case VAR:
			case XOR:
			case 198:
			case 199:
			case 200:
			case 201:
			case 202:
			case 203:
			case 204:
			case 205:
			case 206:
			case 207:
			case 208:
			case 209:
			case 210:
				{
				alt245=12;
				}
				break;
			case FALSE:
				{
				int LA245_16 = input.LA(2);
				if ( (LA245_16==COLON) ) {
					int LA245_26 = input.LA(3);
					if ( (synpred375_Delphi()) ) {
						alt245=11;
					}
					else if ( (true) ) {
						alt245=12;
					}

				}
				else if ( (LA245_16==EOF||LA245_16==ABSOLUTE||(LA245_16 >= ADD && LA245_16 <= ANSISTRING)||LA245_16==AS||(LA245_16 >= ASSIGN && LA245_16 <= AT2)||LA245_16==BREAK||LA245_16==COMMA||(LA245_16 >= CONTAINS && LA245_16 <= DEFAULT)||LA245_16==DISPID||LA245_16==DIV||(LA245_16 >= DOT && LA245_16 <= DOTDOT)||(LA245_16 >= DQ && LA245_16 <= DW)||(LA245_16 >= ELSE && LA245_16 <= EXIT)||LA245_16==EXPORT||LA245_16==FALSE||(LA245_16 >= FINAL && LA245_16 <= FINALLY)||(LA245_16 >= FUNCTION && LA245_16 <= GE)||(LA245_16 >= GT && LA245_16 <= HELPER)||(LA245_16 >= IMPLEMENTS && LA245_16 <= INHERITED)||LA245_16==IS||LA245_16==LBRACK||LA245_16==LE||(LA245_16 >= LOCAL && LA245_16 <= NAME)||LA245_16==NIL||(LA245_16 >= NOT && LA245_16 <= OBJECT)||(LA245_16 >= ON && LA245_16 <= OUT)||(LA245_16 >= PLUS && LA245_16 <= PROCEDURE)||LA245_16==PUBLIC||LA245_16==QuotedString||(LA245_16 >= READ && LA245_16 <= READONLY)||(LA245_16 >= REFERENCE && LA245_16 <= REGISTER)||LA245_16==REMOVE||LA245_16==SEMI||(LA245_16 >= SHL && LA245_16 <= STATIC)||(LA245_16 >= STORED && LA245_16 <= STRING)||LA245_16==TRUE||(LA245_16 >= TkHexNum && LA245_16 <= TkIntNum)||LA245_16==TkRealNum||(LA245_16 >= UNSAFE && LA245_16 <= UNTIL)||(LA245_16 >= VARARGS && LA245_16 <= VIRTUAL)||(LA245_16 >= WRITE && LA245_16 <= WRITEONLY)||(LA245_16 >= XOR && LA245_16 <= 210)) ) {
					alt245=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 245, 16, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case IN:
				{
				int LA245_17 = input.LA(2);
				if ( (LA245_17==COLON) ) {
					int LA245_27 = input.LA(3);
					if ( (synpred375_Delphi()) ) {
						alt245=11;
					}
					else if ( (true) ) {
						alt245=12;
					}

				}
				else if ( (LA245_17==EOF||LA245_17==ABSOLUTE||(LA245_17 >= ADD && LA245_17 <= ANSISTRING)||LA245_17==AS||(LA245_17 >= ASSIGN && LA245_17 <= AT2)||LA245_17==BREAK||LA245_17==COMMA||(LA245_17 >= CONTAINS && LA245_17 <= DEFAULT)||LA245_17==DISPID||LA245_17==DIV||(LA245_17 >= DOT && LA245_17 <= DOTDOT)||(LA245_17 >= DQ && LA245_17 <= DW)||(LA245_17 >= ELSE && LA245_17 <= EXIT)||LA245_17==EXPORT||LA245_17==FALSE||(LA245_17 >= FINAL && LA245_17 <= FINALLY)||(LA245_17 >= FUNCTION && LA245_17 <= GE)||(LA245_17 >= GT && LA245_17 <= HELPER)||(LA245_17 >= IMPLEMENTS && LA245_17 <= INHERITED)||LA245_17==IS||LA245_17==LBRACK||LA245_17==LE||(LA245_17 >= LOCAL && LA245_17 <= NAME)||LA245_17==NIL||(LA245_17 >= NOT && LA245_17 <= OBJECT)||(LA245_17 >= ON && LA245_17 <= OUT)||(LA245_17 >= PLUS && LA245_17 <= PROCEDURE)||LA245_17==PUBLIC||LA245_17==QuotedString||(LA245_17 >= READ && LA245_17 <= READONLY)||(LA245_17 >= REFERENCE && LA245_17 <= REGISTER)||LA245_17==REMOVE||LA245_17==SEMI||(LA245_17 >= SHL && LA245_17 <= STATIC)||(LA245_17 >= STORED && LA245_17 <= STRING)||LA245_17==TRUE||(LA245_17 >= TkHexNum && LA245_17 <= TkIntNum)||LA245_17==TkRealNum||(LA245_17 >= UNSAFE && LA245_17 <= UNTIL)||(LA245_17 >= VARARGS && LA245_17 <= VIRTUAL)||(LA245_17 >= WRITE && LA245_17 <= WRITEONLY)||(LA245_17 >= XOR && LA245_17 <= 210)) ) {
					alt245=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 245, 17, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EXIT:
				{
				int LA245_18 = input.LA(2);
				if ( (LA245_18==COLON) ) {
					int LA245_28 = input.LA(3);
					if ( (synpred375_Delphi()) ) {
						alt245=11;
					}
					else if ( (true) ) {
						alt245=12;
					}

				}
				else if ( (LA245_18==EOF||LA245_18==ABSOLUTE||(LA245_18 >= ADD && LA245_18 <= ANSISTRING)||LA245_18==AS||(LA245_18 >= ASSIGN && LA245_18 <= AT2)||LA245_18==BREAK||LA245_18==COMMA||(LA245_18 >= CONTAINS && LA245_18 <= DEFAULT)||LA245_18==DISPID||LA245_18==DIV||(LA245_18 >= DOT && LA245_18 <= DOTDOT)||(LA245_18 >= DQ && LA245_18 <= DW)||(LA245_18 >= ELSE && LA245_18 <= EXIT)||LA245_18==EXPORT||LA245_18==FALSE||(LA245_18 >= FINAL && LA245_18 <= FINALLY)||(LA245_18 >= FUNCTION && LA245_18 <= GE)||(LA245_18 >= GT && LA245_18 <= HELPER)||(LA245_18 >= IMPLEMENTS && LA245_18 <= INHERITED)||LA245_18==IS||LA245_18==LBRACK||LA245_18==LE||(LA245_18 >= LOCAL && LA245_18 <= NAME)||LA245_18==NIL||(LA245_18 >= NOT && LA245_18 <= OBJECT)||(LA245_18 >= ON && LA245_18 <= OUT)||(LA245_18 >= PLUS && LA245_18 <= PROCEDURE)||LA245_18==PUBLIC||LA245_18==QuotedString||(LA245_18 >= READ && LA245_18 <= READONLY)||(LA245_18 >= REFERENCE && LA245_18 <= REGISTER)||LA245_18==REMOVE||LA245_18==SEMI||(LA245_18 >= SHL && LA245_18 <= STATIC)||(LA245_18 >= STORED && LA245_18 <= STRING)||LA245_18==TRUE||(LA245_18 >= TkHexNum && LA245_18 <= TkIntNum)||LA245_18==TkRealNum||(LA245_18 >= UNSAFE && LA245_18 <= UNTIL)||(LA245_18 >= VARARGS && LA245_18 <= VIRTUAL)||(LA245_18 >= WRITE && LA245_18 <= WRITEONLY)||(LA245_18 >= XOR && LA245_18 <= 210)) ) {
					alt245=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 245, 18, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case BREAK:
				{
				int LA245_19 = input.LA(2);
				if ( (LA245_19==COLON) ) {
					int LA245_29 = input.LA(3);
					if ( (synpred375_Delphi()) ) {
						alt245=11;
					}
					else if ( (true) ) {
						alt245=12;
					}

				}
				else if ( (LA245_19==EOF||LA245_19==ABSOLUTE||(LA245_19 >= ADD && LA245_19 <= ANSISTRING)||LA245_19==AS||(LA245_19 >= ASSIGN && LA245_19 <= AT2)||LA245_19==BREAK||LA245_19==COMMA||(LA245_19 >= CONTAINS && LA245_19 <= DEFAULT)||LA245_19==DISPID||LA245_19==DIV||(LA245_19 >= DOT && LA245_19 <= DOTDOT)||(LA245_19 >= DQ && LA245_19 <= DW)||(LA245_19 >= ELSE && LA245_19 <= EXIT)||LA245_19==EXPORT||LA245_19==FALSE||(LA245_19 >= FINAL && LA245_19 <= FINALLY)||(LA245_19 >= FUNCTION && LA245_19 <= GE)||(LA245_19 >= GT && LA245_19 <= HELPER)||(LA245_19 >= IMPLEMENTS && LA245_19 <= INHERITED)||LA245_19==IS||LA245_19==LBRACK||LA245_19==LE||(LA245_19 >= LOCAL && LA245_19 <= NAME)||LA245_19==NIL||(LA245_19 >= NOT && LA245_19 <= OBJECT)||(LA245_19 >= ON && LA245_19 <= OUT)||(LA245_19 >= PLUS && LA245_19 <= PROCEDURE)||LA245_19==PUBLIC||LA245_19==QuotedString||(LA245_19 >= READ && LA245_19 <= READONLY)||(LA245_19 >= REFERENCE && LA245_19 <= REGISTER)||LA245_19==REMOVE||LA245_19==SEMI||(LA245_19 >= SHL && LA245_19 <= STATIC)||(LA245_19 >= STORED && LA245_19 <= STRING)||LA245_19==TRUE||(LA245_19 >= TkHexNum && LA245_19 <= TkIntNum)||LA245_19==TkRealNum||(LA245_19 >= UNSAFE && LA245_19 <= UNTIL)||(LA245_19 >= VARARGS && LA245_19 <= VIRTUAL)||(LA245_19 >= WRITE && LA245_19 <= WRITEONLY)||(LA245_19 >= XOR && LA245_19 <= 210)) ) {
					alt245=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 245, 19, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CONTINUE:
				{
				int LA245_20 = input.LA(2);
				if ( (LA245_20==COLON) ) {
					int LA245_30 = input.LA(3);
					if ( (synpred375_Delphi()) ) {
						alt245=11;
					}
					else if ( (true) ) {
						alt245=12;
					}

				}
				else if ( (LA245_20==EOF||LA245_20==ABSOLUTE||(LA245_20 >= ADD && LA245_20 <= ANSISTRING)||LA245_20==AS||(LA245_20 >= ASSIGN && LA245_20 <= AT2)||LA245_20==BREAK||LA245_20==COMMA||(LA245_20 >= CONTAINS && LA245_20 <= DEFAULT)||LA245_20==DISPID||LA245_20==DIV||(LA245_20 >= DOT && LA245_20 <= DOTDOT)||(LA245_20 >= DQ && LA245_20 <= DW)||(LA245_20 >= ELSE && LA245_20 <= EXIT)||LA245_20==EXPORT||LA245_20==FALSE||(LA245_20 >= FINAL && LA245_20 <= FINALLY)||(LA245_20 >= FUNCTION && LA245_20 <= GE)||(LA245_20 >= GT && LA245_20 <= HELPER)||(LA245_20 >= IMPLEMENTS && LA245_20 <= INHERITED)||LA245_20==IS||LA245_20==LBRACK||LA245_20==LE||(LA245_20 >= LOCAL && LA245_20 <= NAME)||LA245_20==NIL||(LA245_20 >= NOT && LA245_20 <= OBJECT)||(LA245_20 >= ON && LA245_20 <= OUT)||(LA245_20 >= PLUS && LA245_20 <= PROCEDURE)||LA245_20==PUBLIC||LA245_20==QuotedString||(LA245_20 >= READ && LA245_20 <= READONLY)||(LA245_20 >= REFERENCE && LA245_20 <= REGISTER)||LA245_20==REMOVE||LA245_20==SEMI||(LA245_20 >= SHL && LA245_20 <= STATIC)||(LA245_20 >= STORED && LA245_20 <= STRING)||LA245_20==TRUE||(LA245_20 >= TkHexNum && LA245_20 <= TkIntNum)||LA245_20==TkRealNum||(LA245_20 >= UNSAFE && LA245_20 <= UNTIL)||(LA245_20 >= VARARGS && LA245_20 <= VIRTUAL)||(LA245_20 >= WRITE && LA245_20 <= WRITEONLY)||(LA245_20 >= XOR && LA245_20 <= 210)) ) {
					alt245=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 245, 20, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ABSOLUTE:
			case ADD:
			case ANSISTRING:
			case AT:
			case CONTAINS:
			case DEFAULT:
			case DISPID:
			case DQ:
			case DW:
			case EXPORT:
			case FINAL:
			case HELPER:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case POINTER:
			case PRIVATE:
			case PUBLIC:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STATIC:
			case STORED:
			case STRICT:
			case STRING:
			case UNSAFE:
			case VARARGS:
			case VARIANT:
			case VIRTUAL:
			case WRITE:
			case WRITEONLY:
				{
				int LA245_21 = input.LA(2);
				if ( (LA245_21==COLON) ) {
					int LA245_31 = input.LA(3);
					if ( (synpred375_Delphi()) ) {
						alt245=11;
					}
					else if ( (true) ) {
						alt245=12;
					}

				}
				else if ( (LA245_21==EOF||LA245_21==ABSOLUTE||(LA245_21 >= ADD && LA245_21 <= ANSISTRING)||LA245_21==AS||(LA245_21 >= ASSIGN && LA245_21 <= AT2)||LA245_21==BREAK||LA245_21==COMMA||(LA245_21 >= CONTAINS && LA245_21 <= DEFAULT)||LA245_21==DISPID||LA245_21==DIV||(LA245_21 >= DOT && LA245_21 <= DOTDOT)||(LA245_21 >= DQ && LA245_21 <= DW)||(LA245_21 >= ELSE && LA245_21 <= EXIT)||LA245_21==EXPORT||LA245_21==FALSE||(LA245_21 >= FINAL && LA245_21 <= FINALLY)||(LA245_21 >= FUNCTION && LA245_21 <= GE)||(LA245_21 >= GT && LA245_21 <= HELPER)||(LA245_21 >= IMPLEMENTS && LA245_21 <= INHERITED)||LA245_21==IS||LA245_21==LBRACK||LA245_21==LE||(LA245_21 >= LOCAL && LA245_21 <= NAME)||LA245_21==NIL||(LA245_21 >= NOT && LA245_21 <= OBJECT)||(LA245_21 >= ON && LA245_21 <= OUT)||(LA245_21 >= PLUS && LA245_21 <= PROCEDURE)||LA245_21==PUBLIC||LA245_21==QuotedString||(LA245_21 >= READ && LA245_21 <= READONLY)||(LA245_21 >= REFERENCE && LA245_21 <= REGISTER)||LA245_21==REMOVE||LA245_21==SEMI||(LA245_21 >= SHL && LA245_21 <= STATIC)||(LA245_21 >= STORED && LA245_21 <= STRING)||LA245_21==TRUE||(LA245_21 >= TkHexNum && LA245_21 <= TkIntNum)||LA245_21==TkRealNum||(LA245_21 >= UNSAFE && LA245_21 <= UNTIL)||(LA245_21 >= VARARGS && LA245_21 <= VIRTUAL)||(LA245_21 >= WRITE && LA245_21 <= WRITEONLY)||(LA245_21 >= XOR && LA245_21 <= 210)) ) {
					alt245=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 245, 21, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 245, 0, input);
				throw nvae;
			}
			switch (alt245) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:554:32: ifStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_ifStatement_in_statement15341);
					ifStatement709=ifStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ifStatement709.getTree());

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:555:32: caseStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_caseStatement_in_statement15374);
					caseStatement710=caseStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, caseStatement710.getTree());

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:556:32: repeatStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_repeatStatement_in_statement15407);
					repeatStatement711=repeatStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, repeatStatement711.getTree());

					}
					break;
				case 4 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:557:32: whileStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_whileStatement_in_statement15440);
					whileStatement712=whileStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, whileStatement712.getTree());

					}
					break;
				case 5 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:558:32: forStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_forStatement_in_statement15473);
					forStatement713=forStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, forStatement713.getTree());

					}
					break;
				case 6 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:559:32: withStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_withStatement_in_statement15506);
					withStatement714=withStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, withStatement714.getTree());

					}
					break;
				case 7 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:560:32: tryStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_tryStatement_in_statement15539);
					tryStatement715=tryStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, tryStatement715.getTree());

					}
					break;
				case 8 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:561:32: raiseStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_raiseStatement_in_statement15572);
					raiseStatement716=raiseStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, raiseStatement716.getTree());

					}
					break;
				case 9 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:562:32: assemblerStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_assemblerStatement_in_statement15605);
					assemblerStatement717=assemblerStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, assemblerStatement717.getTree());

					}
					break;
				case 10 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:563:32: compoundStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_compoundStatement_in_statement15638);
					compoundStatement718=compoundStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, compoundStatement718.getTree());

					}
					break;
				case 11 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:564:32: label ':' statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_label_in_statement15671);
					label719=label();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, label719.getTree());

					char_literal720=(Token)match(input,COLON,FOLLOW_COLON_in_statement15673); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal720_tree = (Object)adaptor.create(char_literal720);
					adaptor.addChild(root_0, char_literal720_tree);
					}

					pushFollow(FOLLOW_statement_in_statement15675);
					statement721=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statement721.getTree());

					}
					break;
				case 12 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:565:32: simpleStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_simpleStatement_in_statement15708);
					simpleStatement722=simpleStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleStatement722.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 131, statement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "statement"


	public static class ifStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "ifStatement"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:567:1: ifStatement : 'if' expression 'then' statement ( 'else' statement )? ;
	public final DelphiParser.ifStatement_return ifStatement() throws RecognitionException {
		DelphiParser.ifStatement_return retval = new DelphiParser.ifStatement_return();
		retval.start = input.LT(1);
		int ifStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal723=null;
		Token string_literal725=null;
		Token string_literal727=null;
		ParserRuleReturnScope expression724 =null;
		ParserRuleReturnScope statement726 =null;
		ParserRuleReturnScope statement728 =null;

		Object string_literal723_tree=null;
		Object string_literal725_tree=null;
		Object string_literal727_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:567:30: ( 'if' expression 'then' statement ( 'else' statement )? )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:567:32: 'if' expression 'then' statement ( 'else' statement )?
			{
			root_0 = (Object)adaptor.nil();


			string_literal723=(Token)match(input,IF,FOLLOW_IF_in_ifStatement15762); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal723_tree = (Object)adaptor.create(string_literal723);
			adaptor.addChild(root_0, string_literal723_tree);
			}

			pushFollow(FOLLOW_expression_in_ifStatement15764);
			expression724=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression724.getTree());

			string_literal725=(Token)match(input,THEN,FOLLOW_THEN_in_ifStatement15766); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal725_tree = (Object)adaptor.create(string_literal725);
			adaptor.addChild(root_0, string_literal725_tree);
			}

			pushFollow(FOLLOW_statement_in_ifStatement15768);
			statement726=statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, statement726.getTree());

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:567:65: ( 'else' statement )?
			int alt246=2;
			int LA246_0 = input.LA(1);
			if ( (LA246_0==ELSE) ) {
				int LA246_1 = input.LA(2);
				if ( (synpred376_Delphi()) ) {
					alt246=1;
				}
			}
			switch (alt246) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:567:66: 'else' statement
					{
					string_literal727=(Token)match(input,ELSE,FOLLOW_ELSE_in_ifStatement15771); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal727_tree = (Object)adaptor.create(string_literal727);
					adaptor.addChild(root_0, string_literal727_tree);
					}

					pushFollow(FOLLOW_statement_in_ifStatement15773);
					statement728=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statement728.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 132, ifStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "ifStatement"


	public static class caseStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "caseStatement"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:569:1: caseStatement : 'case' expression 'of' ( caseItem )* ( 'else' statementList ( ';' )? )? 'end' ;
	public final DelphiParser.caseStatement_return caseStatement() throws RecognitionException {
		DelphiParser.caseStatement_return retval = new DelphiParser.caseStatement_return();
		retval.start = input.LT(1);
		int caseStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal729=null;
		Token string_literal731=null;
		Token string_literal733=null;
		Token char_literal735=null;
		Token string_literal736=null;
		ParserRuleReturnScope expression730 =null;
		ParserRuleReturnScope caseItem732 =null;
		ParserRuleReturnScope statementList734 =null;

		Object string_literal729_tree=null;
		Object string_literal731_tree=null;
		Object string_literal733_tree=null;
		Object char_literal735_tree=null;
		Object string_literal736_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:569:30: ( 'case' expression 'of' ( caseItem )* ( 'else' statementList ( ';' )? )? 'end' )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:569:32: 'case' expression 'of' ( caseItem )* ( 'else' statementList ( ';' )? )? 'end'
			{
			root_0 = (Object)adaptor.nil();


			string_literal729=(Token)match(input,CASE,FOLLOW_CASE_in_caseStatement15827); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal729_tree = (Object)adaptor.create(string_literal729);
			adaptor.addChild(root_0, string_literal729_tree);
			}

			pushFollow(FOLLOW_expression_in_caseStatement15829);
			expression730=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression730.getTree());

			string_literal731=(Token)match(input,OF,FOLLOW_OF_in_caseStatement15831); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal731_tree = (Object)adaptor.create(string_literal731);
			adaptor.addChild(root_0, string_literal731_tree);
			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:569:55: ( caseItem )*
			loop247:
			while (true) {
				int alt247=2;
				int LA247_0 = input.LA(1);
				if ( (LA247_0==ABSOLUTE||(LA247_0 >= ADD && LA247_0 <= ANSISTRING)||LA247_0==AS||(LA247_0 >= AT && LA247_0 <= AT2)||LA247_0==BREAK||(LA247_0 >= COLON && LA247_0 <= COMMA)||(LA247_0 >= CONTAINS && LA247_0 <= DEFAULT)||LA247_0==DISPID||LA247_0==DIV||(LA247_0 >= DOT && LA247_0 <= DOTDOT)||(LA247_0 >= DQ && LA247_0 <= DW)||LA247_0==EQUAL||LA247_0==EXIT||LA247_0==EXPORT||LA247_0==FALSE||LA247_0==FINAL||(LA247_0 >= FUNCTION && LA247_0 <= GE)||(LA247_0 >= GT && LA247_0 <= HELPER)||(LA247_0 >= IMPLEMENTS && LA247_0 <= INHERITED)||LA247_0==IS||LA247_0==LBRACK||LA247_0==LE||(LA247_0 >= LOCAL && LA247_0 <= NAME)||LA247_0==NIL||(LA247_0 >= NOT && LA247_0 <= OBJECT)||(LA247_0 >= OPERATOR && LA247_0 <= OUT)||(LA247_0 >= PLUS && LA247_0 <= PROCEDURE)||LA247_0==PUBLIC||LA247_0==QuotedString||(LA247_0 >= READ && LA247_0 <= READONLY)||(LA247_0 >= REFERENCE && LA247_0 <= REGISTER)||LA247_0==REMOVE||(LA247_0 >= SHL && LA247_0 <= STATIC)||(LA247_0 >= STORED && LA247_0 <= STRING)||LA247_0==TRUE||(LA247_0 >= TkHexNum && LA247_0 <= TkIntNum)||LA247_0==TkRealNum||LA247_0==UNSAFE||(LA247_0 >= VARARGS && LA247_0 <= VIRTUAL)||(LA247_0 >= WRITE && LA247_0 <= WRITEONLY)||(LA247_0 >= XOR && LA247_0 <= 210)) ) {
					alt247=1;
				}

				switch (alt247) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:569:56: caseItem
					{
					pushFollow(FOLLOW_caseItem_in_caseStatement15834);
					caseItem732=caseItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, caseItem732.getTree());

					}
					break;

				default :
					break loop247;
				}
			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:569:67: ( 'else' statementList ( ';' )? )?
			int alt249=2;
			int LA249_0 = input.LA(1);
			if ( (LA249_0==ELSE) ) {
				alt249=1;
			}
			switch (alt249) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:569:68: 'else' statementList ( ';' )?
					{
					string_literal733=(Token)match(input,ELSE,FOLLOW_ELSE_in_caseStatement15839); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal733_tree = (Object)adaptor.create(string_literal733);
					adaptor.addChild(root_0, string_literal733_tree);
					}

					pushFollow(FOLLOW_statementList_in_caseStatement15841);
					statementList734=statementList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList734.getTree());

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:569:89: ( ';' )?
					int alt248=2;
					int LA248_0 = input.LA(1);
					if ( (LA248_0==SEMI) ) {
						alt248=1;
					}
					switch (alt248) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:569:90: ';'
							{
							char_literal735=(Token)match(input,SEMI,FOLLOW_SEMI_in_caseStatement15844); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal735_tree = (Object)adaptor.create(char_literal735);
							adaptor.addChild(root_0, char_literal735_tree);
							}

							}
							break;

					}

					}
					break;

			}

			string_literal736=(Token)match(input,END,FOLLOW_END_in_caseStatement15850); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal736_tree = (Object)adaptor.create(string_literal736);
			adaptor.addChild(root_0, string_literal736_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 133, caseStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "caseStatement"


	public static class caseItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "caseItem"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:571:1: caseItem : caseLabel ( ',' caseLabel )* ':' statement ( ';' )? ;
	public final DelphiParser.caseItem_return caseItem() throws RecognitionException {
		DelphiParser.caseItem_return retval = new DelphiParser.caseItem_return();
		retval.start = input.LT(1);
		int caseItem_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal738=null;
		Token char_literal740=null;
		Token char_literal742=null;
		ParserRuleReturnScope caseLabel737 =null;
		ParserRuleReturnScope caseLabel739 =null;
		ParserRuleReturnScope statement741 =null;

		Object char_literal738_tree=null;
		Object char_literal740_tree=null;
		Object char_literal742_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:571:30: ( caseLabel ( ',' caseLabel )* ':' statement ( ';' )? )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:571:32: caseLabel ( ',' caseLabel )* ':' statement ( ';' )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_caseLabel_in_caseItem15907);
			caseLabel737=caseLabel();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, caseLabel737.getTree());

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:571:42: ( ',' caseLabel )*
			loop250:
			while (true) {
				int alt250=2;
				int LA250_0 = input.LA(1);
				if ( (LA250_0==COMMA) ) {
					alt250=1;
				}

				switch (alt250) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:571:43: ',' caseLabel
					{
					char_literal738=(Token)match(input,COMMA,FOLLOW_COMMA_in_caseItem15910); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal738_tree = (Object)adaptor.create(char_literal738);
					adaptor.addChild(root_0, char_literal738_tree);
					}

					pushFollow(FOLLOW_caseLabel_in_caseItem15912);
					caseLabel739=caseLabel();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, caseLabel739.getTree());

					}
					break;

				default :
					break loop250;
				}
			}

			char_literal740=(Token)match(input,COLON,FOLLOW_COLON_in_caseItem15916); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal740_tree = (Object)adaptor.create(char_literal740);
			adaptor.addChild(root_0, char_literal740_tree);
			}

			pushFollow(FOLLOW_statement_in_caseItem15918);
			statement741=statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, statement741.getTree());

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:571:73: ( ';' )?
			int alt251=2;
			int LA251_0 = input.LA(1);
			if ( (LA251_0==SEMI) ) {
				alt251=1;
			}
			switch (alt251) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:571:74: ';'
					{
					char_literal742=(Token)match(input,SEMI,FOLLOW_SEMI_in_caseItem15921); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal742_tree = (Object)adaptor.create(char_literal742);
					adaptor.addChild(root_0, char_literal742_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 134, caseItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "caseItem"


	public static class caseLabel_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "caseLabel"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:573:1: caseLabel : expression ( '..' expression )? ;
	public final DelphiParser.caseLabel_return caseLabel() throws RecognitionException {
		DelphiParser.caseLabel_return retval = new DelphiParser.caseLabel_return();
		retval.start = input.LT(1);
		int caseLabel_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal744=null;
		ParserRuleReturnScope expression743 =null;
		ParserRuleReturnScope expression745 =null;

		Object string_literal744_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:573:30: ( expression ( '..' expression )? )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:573:32: expression ( '..' expression )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_expression_in_caseLabel15980);
			expression743=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression743.getTree());

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:573:43: ( '..' expression )?
			int alt252=2;
			int LA252_0 = input.LA(1);
			if ( (LA252_0==DOTDOT) ) {
				alt252=1;
			}
			switch (alt252) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:573:44: '..' expression
					{
					string_literal744=(Token)match(input,DOTDOT,FOLLOW_DOTDOT_in_caseLabel15983); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal744_tree = (Object)adaptor.create(string_literal744);
					adaptor.addChild(root_0, string_literal744_tree);
					}

					pushFollow(FOLLOW_expression_in_caseLabel15985);
					expression745=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression745.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 135, caseLabel_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "caseLabel"


	public static class repeatStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "repeatStatement"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:575:1: repeatStatement : 'repeat' ( statementList )? 'until' expression ;
	public final DelphiParser.repeatStatement_return repeatStatement() throws RecognitionException {
		DelphiParser.repeatStatement_return retval = new DelphiParser.repeatStatement_return();
		retval.start = input.LT(1);
		int repeatStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal746=null;
		Token string_literal748=null;
		ParserRuleReturnScope statementList747 =null;
		ParserRuleReturnScope expression749 =null;

		Object string_literal746_tree=null;
		Object string_literal748_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:575:30: ( 'repeat' ( statementList )? 'until' expression )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:575:32: 'repeat' ( statementList )? 'until' expression
			{
			root_0 = (Object)adaptor.nil();


			string_literal746=(Token)match(input,REPEAT,FOLLOW_REPEAT_in_repeatStatement16037); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal746_tree = (Object)adaptor.create(string_literal746);
			adaptor.addChild(root_0, string_literal746_tree);
			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:575:41: ( statementList )?
			int alt253=2;
			int LA253_0 = input.LA(1);
			if ( (LA253_0==ABSOLUTE||LA253_0==ADD||LA253_0==ANSISTRING||LA253_0==ASM||(LA253_0 >= ASSIGN && LA253_0 <= AT2)||(LA253_0 >= BEGIN && LA253_0 <= CASE)||(LA253_0 >= CONTAINS && LA253_0 <= CONTINUE)||LA253_0==DEFAULT||LA253_0==DISPID||LA253_0==DOT||(LA253_0 >= DQ && LA253_0 <= DW)||LA253_0==EXIT||LA253_0==EXPORT||LA253_0==FALSE||LA253_0==FINAL||LA253_0==FOR||LA253_0==GOTO||LA253_0==HELPER||LA253_0==IF||(LA253_0 >= IMPLEMENTS && LA253_0 <= INHERITED)||LA253_0==LBRACK||(LA253_0 >= LOCAL && LA253_0 <= MESSAGE)||LA253_0==NAME||LA253_0==OBJECT||LA253_0==OPERATOR||LA253_0==OUT||(LA253_0 >= POINTER && LA253_0 <= PRIVATE)||LA253_0==PUBLIC||LA253_0==RAISE||(LA253_0 >= READ && LA253_0 <= READONLY)||(LA253_0 >= REFERENCE && LA253_0 <= REGISTER)||(LA253_0 >= REMOVE && LA253_0 <= REPEAT)||LA253_0==SEMI||LA253_0==STATIC||(LA253_0 >= STORED && LA253_0 <= STRING)||(LA253_0 >= TRUE && LA253_0 <= TRY)||(LA253_0 >= TkHexNum && LA253_0 <= TkIntNum)||LA253_0==UNSAFE||(LA253_0 >= VAR && LA253_0 <= WRITEONLY)||LA253_0==198||LA253_0==203||LA253_0==209) ) {
				alt253=1;
			}
			else if ( (LA253_0==UNTIL) ) {
				int LA253_2 = input.LA(2);
				if ( (synpred383_Delphi()) ) {
					alt253=1;
				}
			}
			switch (alt253) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:575:42: statementList
					{
					pushFollow(FOLLOW_statementList_in_repeatStatement16040);
					statementList747=statementList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList747.getTree());

					}
					break;

			}

			string_literal748=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_repeatStatement16044); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal748_tree = (Object)adaptor.create(string_literal748);
			adaptor.addChild(root_0, string_literal748_tree);
			}

			pushFollow(FOLLOW_expression_in_repeatStatement16046);
			expression749=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression749.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 136, repeatStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "repeatStatement"


	public static class whileStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "whileStatement"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:577:1: whileStatement : 'while' expression 'do' statement ;
	public final DelphiParser.whileStatement_return whileStatement() throws RecognitionException {
		DelphiParser.whileStatement_return retval = new DelphiParser.whileStatement_return();
		retval.start = input.LT(1);
		int whileStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal750=null;
		Token string_literal752=null;
		ParserRuleReturnScope expression751 =null;
		ParserRuleReturnScope statement753 =null;

		Object string_literal750_tree=null;
		Object string_literal752_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:577:30: ( 'while' expression 'do' statement )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:577:32: 'while' expression 'do' statement
			{
			root_0 = (Object)adaptor.nil();


			string_literal750=(Token)match(input,WHILE,FOLLOW_WHILE_in_whileStatement16097); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal750_tree = (Object)adaptor.create(string_literal750);
			adaptor.addChild(root_0, string_literal750_tree);
			}

			pushFollow(FOLLOW_expression_in_whileStatement16099);
			expression751=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression751.getTree());

			string_literal752=(Token)match(input,DO,FOLLOW_DO_in_whileStatement16101); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal752_tree = (Object)adaptor.create(string_literal752);
			adaptor.addChild(root_0, string_literal752_tree);
			}

			pushFollow(FOLLOW_statement_in_whileStatement16103);
			statement753=statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, statement753.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 137, whileStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "whileStatement"


	public static class forStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "forStatement"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:579:1: forStatement : ( 'for' ( 'var' )? designator ( ':' typeDecl )? ':=' expression 'to' expression 'do' statement | 'for' ( 'var' )? designator ( ':' typeDecl )? ':=' expression 'downto' expression 'do' statement | 'for' ( 'var' )? designator ( ':' typeDecl )? 'in' expression 'do' statement );
	public final DelphiParser.forStatement_return forStatement() throws RecognitionException {
		DelphiParser.forStatement_return retval = new DelphiParser.forStatement_return();
		retval.start = input.LT(1);
		int forStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal754=null;
		Token string_literal755=null;
		Token char_literal757=null;
		Token string_literal759=null;
		Token string_literal761=null;
		Token string_literal763=null;
		Token string_literal765=null;
		Token string_literal766=null;
		Token char_literal768=null;
		Token string_literal770=null;
		Token string_literal772=null;
		Token string_literal774=null;
		Token string_literal776=null;
		Token string_literal777=null;
		Token char_literal779=null;
		Token string_literal781=null;
		Token string_literal783=null;
		ParserRuleReturnScope designator756 =null;
		ParserRuleReturnScope typeDecl758 =null;
		ParserRuleReturnScope expression760 =null;
		ParserRuleReturnScope expression762 =null;
		ParserRuleReturnScope statement764 =null;
		ParserRuleReturnScope designator767 =null;
		ParserRuleReturnScope typeDecl769 =null;
		ParserRuleReturnScope expression771 =null;
		ParserRuleReturnScope expression773 =null;
		ParserRuleReturnScope statement775 =null;
		ParserRuleReturnScope designator778 =null;
		ParserRuleReturnScope typeDecl780 =null;
		ParserRuleReturnScope expression782 =null;
		ParserRuleReturnScope statement784 =null;

		Object string_literal754_tree=null;
		Object string_literal755_tree=null;
		Object char_literal757_tree=null;
		Object string_literal759_tree=null;
		Object string_literal761_tree=null;
		Object string_literal763_tree=null;
		Object string_literal765_tree=null;
		Object string_literal766_tree=null;
		Object char_literal768_tree=null;
		Object string_literal770_tree=null;
		Object string_literal772_tree=null;
		Object string_literal774_tree=null;
		Object string_literal776_tree=null;
		Object string_literal777_tree=null;
		Object char_literal779_tree=null;
		Object string_literal781_tree=null;
		Object string_literal783_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:579:30: ( 'for' ( 'var' )? designator ( ':' typeDecl )? ':=' expression 'to' expression 'do' statement | 'for' ( 'var' )? designator ( ':' typeDecl )? ':=' expression 'downto' expression 'do' statement | 'for' ( 'var' )? designator ( ':' typeDecl )? 'in' expression 'do' statement )
			int alt260=3;
			int LA260_0 = input.LA(1);
			if ( (LA260_0==FOR) ) {
				int LA260_1 = input.LA(2);
				if ( (synpred386_Delphi()) ) {
					alt260=1;
				}
				else if ( (synpred389_Delphi()) ) {
					alt260=2;
				}
				else if ( (true) ) {
					alt260=3;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 260, 0, input);
				throw nvae;
			}

			switch (alt260) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:579:32: 'for' ( 'var' )? designator ( ':' typeDecl )? ':=' expression 'to' expression 'do' statement
					{
					root_0 = (Object)adaptor.nil();


					string_literal754=(Token)match(input,FOR,FOLLOW_FOR_in_forStatement16156); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal754_tree = (Object)adaptor.create(string_literal754);
					adaptor.addChild(root_0, string_literal754_tree);
					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:579:38: ( 'var' )?
					int alt254=2;
					int LA254_0 = input.LA(1);
					if ( (LA254_0==VAR) ) {
						alt254=1;
					}
					switch (alt254) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:579:39: 'var'
							{
							string_literal755=(Token)match(input,VAR,FOLLOW_VAR_in_forStatement16159); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal755_tree = (Object)adaptor.create(string_literal755);
							adaptor.addChild(root_0, string_literal755_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_designator_in_forStatement16163);
					designator756=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator756.getTree());

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:579:58: ( ':' typeDecl )?
					int alt255=2;
					int LA255_0 = input.LA(1);
					if ( (LA255_0==COLON) ) {
						alt255=1;
					}
					switch (alt255) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:579:59: ':' typeDecl
							{
							char_literal757=(Token)match(input,COLON,FOLLOW_COLON_in_forStatement16166); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal757_tree = (Object)adaptor.create(char_literal757);
							adaptor.addChild(root_0, char_literal757_tree);
							}

							pushFollow(FOLLOW_typeDecl_in_forStatement16168);
							typeDecl758=typeDecl();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl758.getTree());

							}
							break;

					}

					string_literal759=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_forStatement16172); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal759_tree = (Object)adaptor.create(string_literal759);
					adaptor.addChild(root_0, string_literal759_tree);
					}

					pushFollow(FOLLOW_expression_in_forStatement16174);
					expression760=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression760.getTree());

					string_literal761=(Token)match(input,TO,FOLLOW_TO_in_forStatement16176); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal761_tree = (Object)adaptor.create(string_literal761);
					adaptor.addChild(root_0, string_literal761_tree);
					}

					pushFollow(FOLLOW_expression_in_forStatement16178);
					expression762=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression762.getTree());

					string_literal763=(Token)match(input,DO,FOLLOW_DO_in_forStatement16180); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal763_tree = (Object)adaptor.create(string_literal763);
					adaptor.addChild(root_0, string_literal763_tree);
					}

					pushFollow(FOLLOW_statement_in_forStatement16182);
					statement764=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statement764.getTree());

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:32: 'for' ( 'var' )? designator ( ':' typeDecl )? ':=' expression 'downto' expression 'do' statement
					{
					root_0 = (Object)adaptor.nil();


					string_literal765=(Token)match(input,FOR,FOLLOW_FOR_in_forStatement16215); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal765_tree = (Object)adaptor.create(string_literal765);
					adaptor.addChild(root_0, string_literal765_tree);
					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:38: ( 'var' )?
					int alt256=2;
					int LA256_0 = input.LA(1);
					if ( (LA256_0==VAR) ) {
						alt256=1;
					}
					switch (alt256) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:39: 'var'
							{
							string_literal766=(Token)match(input,VAR,FOLLOW_VAR_in_forStatement16218); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal766_tree = (Object)adaptor.create(string_literal766);
							adaptor.addChild(root_0, string_literal766_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_designator_in_forStatement16222);
					designator767=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator767.getTree());

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:58: ( ':' typeDecl )?
					int alt257=2;
					int LA257_0 = input.LA(1);
					if ( (LA257_0==COLON) ) {
						alt257=1;
					}
					switch (alt257) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:59: ':' typeDecl
							{
							char_literal768=(Token)match(input,COLON,FOLLOW_COLON_in_forStatement16225); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal768_tree = (Object)adaptor.create(char_literal768);
							adaptor.addChild(root_0, char_literal768_tree);
							}

							pushFollow(FOLLOW_typeDecl_in_forStatement16227);
							typeDecl769=typeDecl();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl769.getTree());

							}
							break;

					}

					string_literal770=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_forStatement16231); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal770_tree = (Object)adaptor.create(string_literal770);
					adaptor.addChild(root_0, string_literal770_tree);
					}

					pushFollow(FOLLOW_expression_in_forStatement16233);
					expression771=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression771.getTree());

					string_literal772=(Token)match(input,DOWNTO,FOLLOW_DOWNTO_in_forStatement16235); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal772_tree = (Object)adaptor.create(string_literal772);
					adaptor.addChild(root_0, string_literal772_tree);
					}

					pushFollow(FOLLOW_expression_in_forStatement16237);
					expression773=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression773.getTree());

					string_literal774=(Token)match(input,DO,FOLLOW_DO_in_forStatement16239); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal774_tree = (Object)adaptor.create(string_literal774);
					adaptor.addChild(root_0, string_literal774_tree);
					}

					pushFollow(FOLLOW_statement_in_forStatement16241);
					statement775=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statement775.getTree());

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:581:32: 'for' ( 'var' )? designator ( ':' typeDecl )? 'in' expression 'do' statement
					{
					root_0 = (Object)adaptor.nil();


					string_literal776=(Token)match(input,FOR,FOLLOW_FOR_in_forStatement16274); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal776_tree = (Object)adaptor.create(string_literal776);
					adaptor.addChild(root_0, string_literal776_tree);
					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:581:38: ( 'var' )?
					int alt258=2;
					int LA258_0 = input.LA(1);
					if ( (LA258_0==VAR) ) {
						alt258=1;
					}
					switch (alt258) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:581:39: 'var'
							{
							string_literal777=(Token)match(input,VAR,FOLLOW_VAR_in_forStatement16277); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal777_tree = (Object)adaptor.create(string_literal777);
							adaptor.addChild(root_0, string_literal777_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_designator_in_forStatement16281);
					designator778=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator778.getTree());

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:581:58: ( ':' typeDecl )?
					int alt259=2;
					int LA259_0 = input.LA(1);
					if ( (LA259_0==COLON) ) {
						alt259=1;
					}
					switch (alt259) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:581:59: ':' typeDecl
							{
							char_literal779=(Token)match(input,COLON,FOLLOW_COLON_in_forStatement16284); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal779_tree = (Object)adaptor.create(char_literal779);
							adaptor.addChild(root_0, char_literal779_tree);
							}

							pushFollow(FOLLOW_typeDecl_in_forStatement16286);
							typeDecl780=typeDecl();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl780.getTree());

							}
							break;

					}

					string_literal781=(Token)match(input,IN,FOLLOW_IN_in_forStatement16290); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal781_tree = (Object)adaptor.create(string_literal781);
					adaptor.addChild(root_0, string_literal781_tree);
					}

					pushFollow(FOLLOW_expression_in_forStatement16292);
					expression782=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression782.getTree());

					string_literal783=(Token)match(input,DO,FOLLOW_DO_in_forStatement16294); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal783_tree = (Object)adaptor.create(string_literal783);
					adaptor.addChild(root_0, string_literal783_tree);
					}

					pushFollow(FOLLOW_statement_in_forStatement16296);
					statement784=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statement784.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 138, forStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "forStatement"


	public static class withStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "withStatement"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:583:1: withStatement : 'with' withItemList 'do' statement ;
	public final DelphiParser.withStatement_return withStatement() throws RecognitionException {
		DelphiParser.withStatement_return retval = new DelphiParser.withStatement_return();
		retval.start = input.LT(1);
		int withStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal785=null;
		Token string_literal787=null;
		ParserRuleReturnScope withItemList786 =null;
		ParserRuleReturnScope statement788 =null;

		Object string_literal785_tree=null;
		Object string_literal787_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:583:30: ( 'with' withItemList 'do' statement )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:583:32: 'with' withItemList 'do' statement
			{
			root_0 = (Object)adaptor.nil();


			string_literal785=(Token)match(input,WITH,FOLLOW_WITH_in_withStatement16348); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal785_tree = (Object)adaptor.create(string_literal785);
			adaptor.addChild(root_0, string_literal785_tree);
			}

			pushFollow(FOLLOW_withItemList_in_withStatement16350);
			withItemList786=withItemList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, withItemList786.getTree());

			string_literal787=(Token)match(input,DO,FOLLOW_DO_in_withStatement16352); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal787_tree = (Object)adaptor.create(string_literal787);
			adaptor.addChild(root_0, string_literal787_tree);
			}

			pushFollow(FOLLOW_statement_in_withStatement16354);
			statement788=statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, statement788.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 139, withStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "withStatement"


	public static class withItemList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "withItemList"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:585:1: withItemList : withItem ( ',' withItem )* ;
	public final DelphiParser.withItemList_return withItemList() throws RecognitionException {
		DelphiParser.withItemList_return retval = new DelphiParser.withItemList_return();
		retval.start = input.LT(1);
		int withItemList_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal790=null;
		ParserRuleReturnScope withItem789 =null;
		ParserRuleReturnScope withItem791 =null;

		Object char_literal790_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:585:30: ( withItem ( ',' withItem )* )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:585:32: withItem ( ',' withItem )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_withItem_in_withItemList16407);
			withItem789=withItem();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, withItem789.getTree());

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:585:41: ( ',' withItem )*
			loop261:
			while (true) {
				int alt261=2;
				int LA261_0 = input.LA(1);
				if ( (LA261_0==COMMA) ) {
					alt261=1;
				}

				switch (alt261) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:585:42: ',' withItem
					{
					char_literal790=(Token)match(input,COMMA,FOLLOW_COMMA_in_withItemList16410); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal790_tree = (Object)adaptor.create(char_literal790);
					adaptor.addChild(root_0, char_literal790_tree);
					}

					pushFollow(FOLLOW_withItem_in_withItemList16412);
					withItem791=withItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, withItem791.getTree());

					}
					break;

				default :
					break loop261;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 140, withItemList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "withItemList"


	public static class withItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "withItem"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:587:1: withItem : designator ( 'as' designator )? ;
	public final DelphiParser.withItem_return withItem() throws RecognitionException {
		DelphiParser.withItem_return retval = new DelphiParser.withItem_return();
		retval.start = input.LT(1);
		int withItem_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal793=null;
		ParserRuleReturnScope designator792 =null;
		ParserRuleReturnScope designator794 =null;

		Object string_literal793_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:587:30: ( designator ( 'as' designator )? )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:587:32: designator ( 'as' designator )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_designator_in_withItem16471);
			designator792=designator();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, designator792.getTree());

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:587:43: ( 'as' designator )?
			int alt262=2;
			int LA262_0 = input.LA(1);
			if ( (LA262_0==AS) ) {
				alt262=1;
			}
			switch (alt262) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:587:44: 'as' designator
					{
					string_literal793=(Token)match(input,AS,FOLLOW_AS_in_withItem16474); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal793_tree = (Object)adaptor.create(string_literal793);
					adaptor.addChild(root_0, string_literal793_tree);
					}

					pushFollow(FOLLOW_designator_in_withItem16476);
					designator794=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator794.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 141, withItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "withItem"


	public static class compoundStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "compoundStatement"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:1: compoundStatement : 'begin' ( statementList )? 'end' -> ^( 'begin' ( statementList )? 'end' ) ;
	public final DelphiParser.compoundStatement_return compoundStatement() throws RecognitionException {
		DelphiParser.compoundStatement_return retval = new DelphiParser.compoundStatement_return();
		retval.start = input.LT(1);
		int compoundStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal795=null;
		Token string_literal797=null;
		ParserRuleReturnScope statementList796 =null;

		Object string_literal795_tree=null;
		Object string_literal797_tree=null;
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleTokenStream stream_BEGIN=new RewriteRuleTokenStream(adaptor,"token BEGIN");
		RewriteRuleSubtreeStream stream_statementList=new RewriteRuleSubtreeStream(adaptor,"rule statementList");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:30: ( 'begin' ( statementList )? 'end' -> ^( 'begin' ( statementList )? 'end' ) )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:32: 'begin' ( statementList )? 'end'
			{
			string_literal795=(Token)match(input,BEGIN,FOLLOW_BEGIN_in_compoundStatement16526); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_BEGIN.add(string_literal795);

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:40: ( statementList )?
			int alt263=2;
			int LA263_0 = input.LA(1);
			if ( (LA263_0==ABSOLUTE||LA263_0==ADD||LA263_0==ANSISTRING||LA263_0==ASM||(LA263_0 >= ASSIGN && LA263_0 <= AT2)||(LA263_0 >= BEGIN && LA263_0 <= CASE)||(LA263_0 >= CONTAINS && LA263_0 <= CONTINUE)||LA263_0==DEFAULT||LA263_0==DISPID||LA263_0==DOT||(LA263_0 >= DQ && LA263_0 <= DW)||LA263_0==EXIT||LA263_0==EXPORT||LA263_0==FALSE||LA263_0==FINAL||LA263_0==FOR||LA263_0==GOTO||LA263_0==HELPER||LA263_0==IF||(LA263_0 >= IMPLEMENTS && LA263_0 <= INHERITED)||LA263_0==LBRACK||(LA263_0 >= LOCAL && LA263_0 <= MESSAGE)||LA263_0==NAME||LA263_0==OBJECT||LA263_0==OPERATOR||LA263_0==OUT||(LA263_0 >= POINTER && LA263_0 <= PRIVATE)||LA263_0==PUBLIC||LA263_0==RAISE||(LA263_0 >= READ && LA263_0 <= READONLY)||(LA263_0 >= REFERENCE && LA263_0 <= REGISTER)||(LA263_0 >= REMOVE && LA263_0 <= REPEAT)||LA263_0==SEMI||LA263_0==STATIC||(LA263_0 >= STORED && LA263_0 <= STRING)||(LA263_0 >= TRUE && LA263_0 <= TRY)||(LA263_0 >= TkHexNum && LA263_0 <= TkIntNum)||LA263_0==UNSAFE||(LA263_0 >= VAR && LA263_0 <= WRITEONLY)||LA263_0==198||LA263_0==203||LA263_0==209) ) {
				alt263=1;
			}
			else if ( (LA263_0==END) ) {
				int LA263_2 = input.LA(2);
				if ( (synpred394_Delphi()) ) {
					alt263=1;
				}
			}
			switch (alt263) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:41: statementList
					{
					pushFollow(FOLLOW_statementList_in_compoundStatement16529);
					statementList796=statementList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_statementList.add(statementList796.getTree());
					}
					break;

			}

			string_literal797=(Token)match(input,END,FOLLOW_END_in_compoundStatement16533); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_END.add(string_literal797);

			// AST REWRITE
			// elements: BEGIN, statementList, END
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 589:63: -> ^( 'begin' ( statementList )? 'end' )
			{
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:66: ^( 'begin' ( statementList )? 'end' )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_BEGIN.nextNode(), root_1);
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:76: ( statementList )?
				if ( stream_statementList.hasNext() ) {
					adaptor.addChild(root_1, stream_statementList.nextTree());
				}
				stream_statementList.reset();

				adaptor.addChild(root_1, stream_END.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 142, compoundStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "compoundStatement"


	public static class statementList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "statementList"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:1: statementList : ( statement )? ( ';' ( statement )? )* ;
	public final DelphiParser.statementList_return statementList() throws RecognitionException {
		DelphiParser.statementList_return retval = new DelphiParser.statementList_return();
		retval.start = input.LT(1);
		int statementList_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal799=null;
		ParserRuleReturnScope statement798 =null;
		ParserRuleReturnScope statement800 =null;

		Object char_literal799_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:30: ( ( statement )? ( ';' ( statement )? )* )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:32: ( statement )? ( ';' ( statement )? )*
			{
			root_0 = (Object)adaptor.nil();


			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:32: ( statement )?
			int alt264=2;
			switch ( input.LA(1) ) {
				case ABSOLUTE:
				case ADD:
				case ANSISTRING:
				case ASM:
				case ASSIGN:
				case AT:
				case AT2:
				case BEGIN:
				case BREAK:
				case CASE:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DISPID:
				case DOT:
				case DQ:
				case DW:
				case EXIT:
				case EXPORT:
				case FALSE:
				case FINAL:
				case FOR:
				case GOTO:
				case HELPER:
				case IF:
				case IMPLEMENTS:
				case IN:
				case INDEX:
				case INHERITED:
				case LBRACK:
				case LOCAL:
				case LPAREN:
				case LT:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case POINTER2:
				case PRIVATE:
				case PUBLIC:
				case RAISE:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case REPEAT:
				case STATIC:
				case STORED:
				case STRICT:
				case STRING:
				case TRUE:
				case TRY:
				case TkHexNum:
				case TkIdentifier:
				case TkIntNum:
				case UNSAFE:
				case VAR:
				case VARARGS:
				case VARIANT:
				case VIRTUAL:
				case WHILE:
				case WITH:
				case WRITE:
				case WRITEONLY:
				case 198:
				case 203:
				case 209:
					{
					alt264=1;
					}
					break;
				case SEMI:
					{
					int LA264_2 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt264=1;
					}
					}
					break;
				case FINALIZATION:
					{
					int LA264_3 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt264=1;
					}
					}
					break;
				case END:
					{
					int LA264_4 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt264=1;
					}
					}
					break;
				case EOF:
					{
					int LA264_5 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt264=1;
					}
					}
					break;
				case UNTIL:
					{
					int LA264_6 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt264=1;
					}
					}
					break;
				case EXCEPT:
					{
					int LA264_7 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt264=1;
					}
					}
					break;
				case FINALLY:
					{
					int LA264_8 = input.LA(2);
					if ( (synpred395_Delphi()) ) {
						alt264=1;
					}
					}
					break;
			}
			switch (alt264) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:33: statement
					{
					pushFollow(FOLLOW_statement_in_statementList16599);
					statement798=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statement798.getTree());

					}
					break;

			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:45: ( ';' ( statement )? )*
			loop266:
			while (true) {
				int alt266=2;
				int LA266_0 = input.LA(1);
				if ( (LA266_0==SEMI) ) {
					int LA266_2 = input.LA(2);
					if ( (synpred397_Delphi()) ) {
						alt266=1;
					}

				}

				switch (alt266) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:46: ';' ( statement )?
					{
					char_literal799=(Token)match(input,SEMI,FOLLOW_SEMI_in_statementList16604); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal799_tree = (Object)adaptor.create(char_literal799);
					adaptor.addChild(root_0, char_literal799_tree);
					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:50: ( statement )?
					int alt265=2;
					switch ( input.LA(1) ) {
						case ABSOLUTE:
						case ADD:
						case ANSISTRING:
						case ASM:
						case ASSIGN:
						case AT:
						case AT2:
						case BEGIN:
						case BREAK:
						case CASE:
						case CONTAINS:
						case CONTINUE:
						case DEFAULT:
						case DISPID:
						case DOT:
						case DQ:
						case DW:
						case EXIT:
						case EXPORT:
						case FALSE:
						case FINAL:
						case FOR:
						case GOTO:
						case HELPER:
						case IF:
						case IMPLEMENTS:
						case IN:
						case INDEX:
						case INHERITED:
						case LBRACK:
						case LOCAL:
						case LPAREN:
						case LT:
						case MESSAGE:
						case NAME:
						case OBJECT:
						case OPERATOR:
						case OUT:
						case POINTER:
						case POINTER2:
						case PRIVATE:
						case PUBLIC:
						case RAISE:
						case READ:
						case READONLY:
						case REFERENCE:
						case REGISTER:
						case REMOVE:
						case REPEAT:
						case STATIC:
						case STORED:
						case STRICT:
						case STRING:
						case TRUE:
						case TRY:
						case TkHexNum:
						case TkIdentifier:
						case TkIntNum:
						case UNSAFE:
						case VAR:
						case VARARGS:
						case VARIANT:
						case VIRTUAL:
						case WHILE:
						case WITH:
						case WRITE:
						case WRITEONLY:
						case 198:
						case 203:
						case 209:
							{
							alt265=1;
							}
							break;
						case FINALIZATION:
							{
							int LA265_2 = input.LA(2);
							if ( (synpred396_Delphi()) ) {
								alt265=1;
							}
							}
							break;
						case END:
							{
							int LA265_3 = input.LA(2);
							if ( (synpred396_Delphi()) ) {
								alt265=1;
							}
							}
							break;
						case EOF:
							{
							int LA265_4 = input.LA(2);
							if ( (synpred396_Delphi()) ) {
								alt265=1;
							}
							}
							break;
						case SEMI:
							{
							int LA265_5 = input.LA(2);
							if ( (synpred396_Delphi()) ) {
								alt265=1;
							}
							}
							break;
						case UNTIL:
							{
							int LA265_6 = input.LA(2);
							if ( (synpred396_Delphi()) ) {
								alt265=1;
							}
							}
							break;
						case EXCEPT:
							{
							int LA265_7 = input.LA(2);
							if ( (synpred396_Delphi()) ) {
								alt265=1;
							}
							}
							break;
						case FINALLY:
							{
							int LA265_8 = input.LA(2);
							if ( (synpred396_Delphi()) ) {
								alt265=1;
							}
							}
							break;
					}
					switch (alt265) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:51: statement
							{
							pushFollow(FOLLOW_statement_in_statementList16607);
							statement800=statement();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, statement800.getTree());

							}
							break;

					}

					}
					break;

				default :
					break loop266;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 143, statementList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "statementList"


	public static class simpleStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "simpleStatement"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:593:1: simpleStatement : ( designator ':=' expression | designator | gotoStatement | inlineVarDeclaration );
	public final DelphiParser.simpleStatement_return simpleStatement() throws RecognitionException {
		DelphiParser.simpleStatement_return retval = new DelphiParser.simpleStatement_return();
		retval.start = input.LT(1);
		int simpleStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal802=null;
		ParserRuleReturnScope designator801 =null;
		ParserRuleReturnScope expression803 =null;
		ParserRuleReturnScope designator804 =null;
		ParserRuleReturnScope gotoStatement805 =null;
		ParserRuleReturnScope inlineVarDeclaration806 =null;

		Object string_literal802_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:593:30: ( designator ':=' expression | designator | gotoStatement | inlineVarDeclaration )
			int alt267=4;
			switch ( input.LA(1) ) {
			case 203:
				{
				int LA267_1 = input.LA(2);
				if ( (synpred398_Delphi()) ) {
					alt267=1;
				}
				else if ( (synpred399_Delphi()) ) {
					alt267=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 267, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case INHERITED:
				{
				int LA267_2 = input.LA(2);
				if ( (synpred398_Delphi()) ) {
					alt267=1;
				}
				else if ( (synpred399_Delphi()) ) {
					alt267=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 267, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TkIdentifier:
				{
				int LA267_3 = input.LA(2);
				if ( (synpred398_Delphi()) ) {
					alt267=1;
				}
				else if ( (synpred399_Delphi()) ) {
					alt267=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 267, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case 198:
				{
				int LA267_4 = input.LA(2);
				if ( (synpred398_Delphi()) ) {
					alt267=1;
				}
				else if ( (synpred399_Delphi()) ) {
					alt267=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 267, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TRUE:
				{
				int LA267_5 = input.LA(2);
				if ( (synpred398_Delphi()) ) {
					alt267=1;
				}
				else if ( (synpred399_Delphi()) ) {
					alt267=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 267, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case POINTER2:
				{
				int LA267_6 = input.LA(2);
				if ( (synpred398_Delphi()) ) {
					alt267=1;
				}
				else if ( (synpred399_Delphi()) ) {
					alt267=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 267, 6, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case 209:
				{
				int LA267_7 = input.LA(2);
				if ( (synpred398_Delphi()) ) {
					alt267=1;
				}
				else if ( (synpred399_Delphi()) ) {
					alt267=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 267, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT2:
				{
				int LA267_8 = input.LA(2);
				if ( (synpred398_Delphi()) ) {
					alt267=1;
				}
				else if ( (synpred399_Delphi()) ) {
					alt267=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 267, 8, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LT:
				{
				int LA267_9 = input.LA(2);
				if ( (synpred398_Delphi()) ) {
					alt267=1;
				}
				else if ( (synpred399_Delphi()) ) {
					alt267=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 267, 9, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LBRACK:
				{
				int LA267_10 = input.LA(2);
				if ( (synpred398_Delphi()) ) {
					alt267=1;
				}
				else if ( (synpred399_Delphi()) ) {
					alt267=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 267, 10, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LPAREN:
				{
				int LA267_11 = input.LA(2);
				if ( (synpred398_Delphi()) ) {
					alt267=1;
				}
				else if ( (synpred399_Delphi()) ) {
					alt267=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 267, 11, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ASSIGN:
				{
				alt267=1;
				}
				break;
			case EOF:
			case AND:
			case AS:
			case COLON:
			case COMMA:
			case ControlChar:
			case DIV:
			case DOTDOT:
			case ELSE:
			case END:
			case EQUAL:
			case EXCEPT:
			case FINALIZATION:
			case FINALLY:
			case FUNCTION:
			case GE:
			case GT:
			case IS:
			case LE:
			case MINUS:
			case MOD:
			case NIL:
			case NOT:
			case NOT_EQUAL:
			case ON:
			case OR:
			case PLUS:
			case PROCEDURE:
			case QuotedString:
			case SEMI:
			case SHL:
			case SHR:
			case SLASH:
			case STAR:
			case TkHexNum:
			case TkIntNum:
			case TkRealNum:
			case UNTIL:
			case XOR:
			case 199:
			case 200:
			case 201:
			case 202:
			case 204:
			case 205:
			case 206:
			case 207:
			case 208:
			case 210:
				{
				alt267=2;
				}
				break;
			case DOT:
				{
				int LA267_19 = input.LA(2);
				if ( (synpred398_Delphi()) ) {
					alt267=1;
				}
				else if ( (synpred399_Delphi()) ) {
					alt267=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 267, 19, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case FALSE:
				{
				int LA267_26 = input.LA(2);
				if ( (synpred398_Delphi()) ) {
					alt267=1;
				}
				else if ( (synpred399_Delphi()) ) {
					alt267=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 267, 26, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case IN:
				{
				int LA267_27 = input.LA(2);
				if ( (synpred398_Delphi()) ) {
					alt267=1;
				}
				else if ( (synpred399_Delphi()) ) {
					alt267=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 267, 27, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EXIT:
				{
				int LA267_33 = input.LA(2);
				if ( (synpred398_Delphi()) ) {
					alt267=1;
				}
				else if ( (synpred399_Delphi()) ) {
					alt267=2;
				}
				else if ( (synpred400_Delphi()) ) {
					alt267=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 267, 33, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case GOTO:
				{
				alt267=3;
				}
				break;
			case BREAK:
				{
				int LA267_45 = input.LA(2);
				if ( (synpred398_Delphi()) ) {
					alt267=1;
				}
				else if ( (synpred399_Delphi()) ) {
					alt267=2;
				}
				else if ( (synpred400_Delphi()) ) {
					alt267=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 267, 45, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CONTINUE:
				{
				int LA267_46 = input.LA(2);
				if ( (synpred398_Delphi()) ) {
					alt267=1;
				}
				else if ( (synpred399_Delphi()) ) {
					alt267=2;
				}
				else if ( (synpred400_Delphi()) ) {
					alt267=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 267, 46, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ABSOLUTE:
			case ADD:
			case ANSISTRING:
			case AT:
			case CONTAINS:
			case DEFAULT:
			case DISPID:
			case DQ:
			case DW:
			case EXPORT:
			case FINAL:
			case HELPER:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case POINTER:
			case PRIVATE:
			case PUBLIC:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STATIC:
			case STORED:
			case STRICT:
			case STRING:
			case UNSAFE:
			case VARARGS:
			case VARIANT:
			case VIRTUAL:
			case WRITE:
			case WRITEONLY:
				{
				int LA267_47 = input.LA(2);
				if ( (synpred398_Delphi()) ) {
					alt267=1;
				}
				else if ( (synpred399_Delphi()) ) {
					alt267=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 267, 47, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case VAR:
				{
				alt267=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 267, 0, input);
				throw nvae;
			}
			switch (alt267) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:593:32: designator ':=' expression
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_designator_in_simpleStatement16661);
					designator801=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator801.getTree());

					string_literal802=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_simpleStatement16663); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal802_tree = (Object)adaptor.create(string_literal802);
					adaptor.addChild(root_0, string_literal802_tree);
					}

					pushFollow(FOLLOW_expression_in_simpleStatement16665);
					expression803=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression803.getTree());

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:594:32: designator
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_designator_in_simpleStatement16698);
					designator804=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator804.getTree());

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:595:32: gotoStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_gotoStatement_in_simpleStatement16732);
					gotoStatement805=gotoStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, gotoStatement805.getTree());

					}
					break;
				case 4 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:596:32: inlineVarDeclaration
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_inlineVarDeclaration_in_simpleStatement16765);
					inlineVarDeclaration806=inlineVarDeclaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineVarDeclaration806.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 144, simpleStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "simpleStatement"


	public static class gotoStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "gotoStatement"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:598:1: gotoStatement : ( 'goto' label | 'exit' ( '(' expression ')' )? | 'break' | 'continue' );
	public final DelphiParser.gotoStatement_return gotoStatement() throws RecognitionException {
		DelphiParser.gotoStatement_return retval = new DelphiParser.gotoStatement_return();
		retval.start = input.LT(1);
		int gotoStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal807=null;
		Token string_literal809=null;
		Token char_literal810=null;
		Token char_literal812=null;
		Token string_literal813=null;
		Token string_literal814=null;
		ParserRuleReturnScope label808 =null;
		ParserRuleReturnScope expression811 =null;

		Object string_literal807_tree=null;
		Object string_literal809_tree=null;
		Object char_literal810_tree=null;
		Object char_literal812_tree=null;
		Object string_literal813_tree=null;
		Object string_literal814_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:598:30: ( 'goto' label | 'exit' ( '(' expression ')' )? | 'break' | 'continue' )
			int alt269=4;
			switch ( input.LA(1) ) {
			case GOTO:
				{
				alt269=1;
				}
				break;
			case EXIT:
				{
				alt269=2;
				}
				break;
			case BREAK:
				{
				alt269=3;
				}
				break;
			case CONTINUE:
				{
				alt269=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 269, 0, input);
				throw nvae;
			}
			switch (alt269) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:598:32: 'goto' label
					{
					root_0 = (Object)adaptor.nil();


					string_literal807=(Token)match(input,GOTO,FOLLOW_GOTO_in_gotoStatement16817); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal807_tree = (Object)adaptor.create(string_literal807);
					adaptor.addChild(root_0, string_literal807_tree);
					}

					pushFollow(FOLLOW_label_in_gotoStatement16819);
					label808=label();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, label808.getTree());

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:599:32: 'exit' ( '(' expression ')' )?
					{
					root_0 = (Object)adaptor.nil();


					string_literal809=(Token)match(input,EXIT,FOLLOW_EXIT_in_gotoStatement16852); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal809_tree = (Object)adaptor.create(string_literal809);
					adaptor.addChild(root_0, string_literal809_tree);
					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:599:39: ( '(' expression ')' )?
					int alt268=2;
					int LA268_0 = input.LA(1);
					if ( (LA268_0==LPAREN) ) {
						int LA268_1 = input.LA(2);
						if ( (synpred402_Delphi()) ) {
							alt268=1;
						}
					}
					switch (alt268) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:599:40: '(' expression ')'
							{
							char_literal810=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_gotoStatement16855); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal810_tree = (Object)adaptor.create(char_literal810);
							adaptor.addChild(root_0, char_literal810_tree);
							}

							pushFollow(FOLLOW_expression_in_gotoStatement16857);
							expression811=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression811.getTree());

							char_literal812=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_gotoStatement16859); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal812_tree = (Object)adaptor.create(char_literal812);
							adaptor.addChild(root_0, char_literal812_tree);
							}

							}
							break;

					}

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:600:32: 'break'
					{
					root_0 = (Object)adaptor.nil();


					string_literal813=(Token)match(input,BREAK,FOLLOW_BREAK_in_gotoStatement16894); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal813_tree = (Object)adaptor.create(string_literal813);
					adaptor.addChild(root_0, string_literal813_tree);
					}

					}
					break;
				case 4 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:601:32: 'continue'
					{
					root_0 = (Object)adaptor.nil();


					string_literal814=(Token)match(input,CONTINUE,FOLLOW_CONTINUE_in_gotoStatement16927); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal814_tree = (Object)adaptor.create(string_literal814);
					adaptor.addChild(root_0, string_literal814_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 145, gotoStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "gotoStatement"


	public static class constExpression_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "constExpression"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:606:1: constExpression : ( '(' recordConstExpression ( ';' recordConstExpression )* ')' | '(' constExpression ( ',' constExpression )* ')' ( constExpression )? | expression );
	public final DelphiParser.constExpression_return constExpression() throws RecognitionException {
		DelphiParser.constExpression_return retval = new DelphiParser.constExpression_return();
		retval.start = input.LT(1);
		int constExpression_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal815=null;
		Token char_literal817=null;
		Token char_literal819=null;
		Token char_literal820=null;
		Token char_literal822=null;
		Token char_literal824=null;
		ParserRuleReturnScope recordConstExpression816 =null;
		ParserRuleReturnScope recordConstExpression818 =null;
		ParserRuleReturnScope constExpression821 =null;
		ParserRuleReturnScope constExpression823 =null;
		ParserRuleReturnScope constExpression825 =null;
		ParserRuleReturnScope expression826 =null;

		Object char_literal815_tree=null;
		Object char_literal817_tree=null;
		Object char_literal819_tree=null;
		Object char_literal820_tree=null;
		Object char_literal822_tree=null;
		Object char_literal824_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 146) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:606:30: ( '(' recordConstExpression ( ';' recordConstExpression )* ')' | '(' constExpression ( ',' constExpression )* ')' ( constExpression )? | expression )
			int alt273=3;
			alt273 = dfa273.predict(input);
			switch (alt273) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:606:32: '(' recordConstExpression ( ';' recordConstExpression )* ')'
					{
					root_0 = (Object)adaptor.nil();


					char_literal815=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_constExpression16980); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal815_tree = (Object)adaptor.create(char_literal815);
					adaptor.addChild(root_0, char_literal815_tree);
					}

					pushFollow(FOLLOW_recordConstExpression_in_constExpression16982);
					recordConstExpression816=recordConstExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, recordConstExpression816.getTree());

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:606:58: ( ';' recordConstExpression )*
					loop270:
					while (true) {
						int alt270=2;
						int LA270_0 = input.LA(1);
						if ( (LA270_0==SEMI) ) {
							alt270=1;
						}

						switch (alt270) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:606:59: ';' recordConstExpression
							{
							char_literal817=(Token)match(input,SEMI,FOLLOW_SEMI_in_constExpression16985); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal817_tree = (Object)adaptor.create(char_literal817);
							adaptor.addChild(root_0, char_literal817_tree);
							}

							pushFollow(FOLLOW_recordConstExpression_in_constExpression16987);
							recordConstExpression818=recordConstExpression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, recordConstExpression818.getTree());

							}
							break;

						default :
							break loop270;
						}
					}

					char_literal819=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_constExpression16991); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal819_tree = (Object)adaptor.create(char_literal819);
					adaptor.addChild(root_0, char_literal819_tree);
					}

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:607:32: '(' constExpression ( ',' constExpression )* ')' ( constExpression )?
					{
					root_0 = (Object)adaptor.nil();


					char_literal820=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_constExpression17025); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal820_tree = (Object)adaptor.create(char_literal820);
					adaptor.addChild(root_0, char_literal820_tree);
					}

					pushFollow(FOLLOW_constExpression_in_constExpression17027);
					constExpression821=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression821.getTree());

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:607:52: ( ',' constExpression )*
					loop271:
					while (true) {
						int alt271=2;
						int LA271_0 = input.LA(1);
						if ( (LA271_0==COMMA) ) {
							alt271=1;
						}

						switch (alt271) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:607:53: ',' constExpression
							{
							char_literal822=(Token)match(input,COMMA,FOLLOW_COMMA_in_constExpression17030); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal822_tree = (Object)adaptor.create(char_literal822);
							adaptor.addChild(root_0, char_literal822_tree);
							}

							pushFollow(FOLLOW_constExpression_in_constExpression17032);
							constExpression823=constExpression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression823.getTree());

							}
							break;

						default :
							break loop271;
						}
					}

					char_literal824=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_constExpression17036); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal824_tree = (Object)adaptor.create(char_literal824);
					adaptor.addChild(root_0, char_literal824_tree);
					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:607:79: ( constExpression )?
					int alt272=2;
					alt272 = dfa272.predict(input);
					switch (alt272) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:607:80: constExpression
							{
							pushFollow(FOLLOW_constExpression_in_constExpression17039);
							constExpression825=constExpression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression825.getTree());

							}
							break;

					}

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:608:32: expression
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_expression_in_constExpression17075);
					expression826=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression826.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 146, constExpression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "constExpression"


	public static class recordConstExpression_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordConstExpression"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:610:1: recordConstExpression : ident ':' constExpression ( ';' )? ;
	public final DelphiParser.recordConstExpression_return recordConstExpression() throws RecognitionException {
		DelphiParser.recordConstExpression_return retval = new DelphiParser.recordConstExpression_return();
		retval.start = input.LT(1);
		int recordConstExpression_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal828=null;
		Token char_literal830=null;
		ParserRuleReturnScope ident827 =null;
		ParserRuleReturnScope constExpression829 =null;

		Object char_literal828_tree=null;
		Object char_literal830_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 147) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:610:30: ( ident ':' constExpression ( ';' )? )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:610:32: ident ':' constExpression ( ';' )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_ident_in_recordConstExpression17119);
			ident827=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident827.getTree());

			char_literal828=(Token)match(input,COLON,FOLLOW_COLON_in_recordConstExpression17121); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal828_tree = (Object)adaptor.create(char_literal828);
			adaptor.addChild(root_0, char_literal828_tree);
			}

			pushFollow(FOLLOW_constExpression_in_recordConstExpression17123);
			constExpression829=constExpression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression829.getTree());

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:610:58: ( ';' )?
			int alt274=2;
			int LA274_0 = input.LA(1);
			if ( (LA274_0==SEMI) ) {
				int LA274_1 = input.LA(2);
				if ( (LA274_1==EOF||LA274_1==RPAREN||LA274_1==SEMI) ) {
					alt274=1;
				}
			}
			switch (alt274) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:610:59: ';'
					{
					char_literal830=(Token)match(input,SEMI,FOLLOW_SEMI_in_recordConstExpression17126); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal830_tree = (Object)adaptor.create(char_literal830);
					adaptor.addChild(root_0, char_literal830_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 147, recordConstExpression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordConstExpression"


	public static class tryStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "tryStatement"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:615:1: tryStatement : ( 'try' ( statementList )? 'except' handlerList 'end' | 'try' ( statementList )? 'finally' ( statementList )? 'end' );
	public final DelphiParser.tryStatement_return tryStatement() throws RecognitionException {
		DelphiParser.tryStatement_return retval = new DelphiParser.tryStatement_return();
		retval.start = input.LT(1);
		int tryStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal831=null;
		Token string_literal833=null;
		Token string_literal835=null;
		Token string_literal836=null;
		Token string_literal838=null;
		Token string_literal840=null;
		ParserRuleReturnScope statementList832 =null;
		ParserRuleReturnScope handlerList834 =null;
		ParserRuleReturnScope statementList837 =null;
		ParserRuleReturnScope statementList839 =null;

		Object string_literal831_tree=null;
		Object string_literal833_tree=null;
		Object string_literal835_tree=null;
		Object string_literal836_tree=null;
		Object string_literal838_tree=null;
		Object string_literal840_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 148) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:615:30: ( 'try' ( statementList )? 'except' handlerList 'end' | 'try' ( statementList )? 'finally' ( statementList )? 'end' )
			int alt278=2;
			int LA278_0 = input.LA(1);
			if ( (LA278_0==TRY) ) {
				int LA278_1 = input.LA(2);
				if ( (synpred412_Delphi()) ) {
					alt278=1;
				}
				else if ( (true) ) {
					alt278=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 278, 0, input);
				throw nvae;
			}

			switch (alt278) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:615:32: 'try' ( statementList )? 'except' handlerList 'end'
					{
					root_0 = (Object)adaptor.nil();


					string_literal831=(Token)match(input,TRY,FOLLOW_TRY_in_tryStatement17184); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal831_tree = (Object)adaptor.create(string_literal831);
					adaptor.addChild(root_0, string_literal831_tree);
					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:615:38: ( statementList )?
					int alt275=2;
					int LA275_0 = input.LA(1);
					if ( (LA275_0==ABSOLUTE||LA275_0==ADD||LA275_0==ANSISTRING||LA275_0==ASM||(LA275_0 >= ASSIGN && LA275_0 <= AT2)||(LA275_0 >= BEGIN && LA275_0 <= CASE)||(LA275_0 >= CONTAINS && LA275_0 <= CONTINUE)||LA275_0==DEFAULT||LA275_0==DISPID||LA275_0==DOT||(LA275_0 >= DQ && LA275_0 <= DW)||LA275_0==EXIT||LA275_0==EXPORT||LA275_0==FALSE||LA275_0==FINAL||LA275_0==FOR||LA275_0==GOTO||LA275_0==HELPER||LA275_0==IF||(LA275_0 >= IMPLEMENTS && LA275_0 <= INHERITED)||LA275_0==LBRACK||(LA275_0 >= LOCAL && LA275_0 <= MESSAGE)||LA275_0==NAME||LA275_0==OBJECT||LA275_0==OPERATOR||LA275_0==OUT||(LA275_0 >= POINTER && LA275_0 <= PRIVATE)||LA275_0==PUBLIC||LA275_0==RAISE||(LA275_0 >= READ && LA275_0 <= READONLY)||(LA275_0 >= REFERENCE && LA275_0 <= REGISTER)||(LA275_0 >= REMOVE && LA275_0 <= REPEAT)||LA275_0==SEMI||LA275_0==STATIC||(LA275_0 >= STORED && LA275_0 <= STRING)||(LA275_0 >= TRUE && LA275_0 <= TRY)||(LA275_0 >= TkHexNum && LA275_0 <= TkIntNum)||LA275_0==UNSAFE||(LA275_0 >= VAR && LA275_0 <= WRITEONLY)||LA275_0==198||LA275_0==203||LA275_0==209) ) {
						alt275=1;
					}
					else if ( (LA275_0==EXCEPT) ) {
						int LA275_2 = input.LA(2);
						if ( (synpred411_Delphi()) ) {
							alt275=1;
						}
					}
					switch (alt275) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:615:39: statementList
							{
							pushFollow(FOLLOW_statementList_in_tryStatement17187);
							statementList832=statementList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList832.getTree());

							}
							break;

					}

					string_literal833=(Token)match(input,EXCEPT,FOLLOW_EXCEPT_in_tryStatement17191); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal833_tree = (Object)adaptor.create(string_literal833);
					adaptor.addChild(root_0, string_literal833_tree);
					}

					pushFollow(FOLLOW_handlerList_in_tryStatement17193);
					handlerList834=handlerList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, handlerList834.getTree());

					string_literal835=(Token)match(input,END,FOLLOW_END_in_tryStatement17195); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal835_tree = (Object)adaptor.create(string_literal835);
					adaptor.addChild(root_0, string_literal835_tree);
					}

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:616:32: 'try' ( statementList )? 'finally' ( statementList )? 'end'
					{
					root_0 = (Object)adaptor.nil();


					string_literal836=(Token)match(input,TRY,FOLLOW_TRY_in_tryStatement17228); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal836_tree = (Object)adaptor.create(string_literal836);
					adaptor.addChild(root_0, string_literal836_tree);
					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:616:38: ( statementList )?
					int alt276=2;
					int LA276_0 = input.LA(1);
					if ( (LA276_0==ABSOLUTE||LA276_0==ADD||LA276_0==ANSISTRING||LA276_0==ASM||(LA276_0 >= ASSIGN && LA276_0 <= AT2)||(LA276_0 >= BEGIN && LA276_0 <= CASE)||(LA276_0 >= CONTAINS && LA276_0 <= CONTINUE)||LA276_0==DEFAULT||LA276_0==DISPID||LA276_0==DOT||(LA276_0 >= DQ && LA276_0 <= DW)||LA276_0==EXIT||LA276_0==EXPORT||LA276_0==FALSE||LA276_0==FINAL||LA276_0==FOR||LA276_0==GOTO||LA276_0==HELPER||LA276_0==IF||(LA276_0 >= IMPLEMENTS && LA276_0 <= INHERITED)||LA276_0==LBRACK||(LA276_0 >= LOCAL && LA276_0 <= MESSAGE)||LA276_0==NAME||LA276_0==OBJECT||LA276_0==OPERATOR||LA276_0==OUT||(LA276_0 >= POINTER && LA276_0 <= PRIVATE)||LA276_0==PUBLIC||LA276_0==RAISE||(LA276_0 >= READ && LA276_0 <= READONLY)||(LA276_0 >= REFERENCE && LA276_0 <= REGISTER)||(LA276_0 >= REMOVE && LA276_0 <= REPEAT)||LA276_0==SEMI||LA276_0==STATIC||(LA276_0 >= STORED && LA276_0 <= STRING)||(LA276_0 >= TRUE && LA276_0 <= TRY)||(LA276_0 >= TkHexNum && LA276_0 <= TkIntNum)||LA276_0==UNSAFE||(LA276_0 >= VAR && LA276_0 <= WRITEONLY)||LA276_0==198||LA276_0==203||LA276_0==209) ) {
						alt276=1;
					}
					else if ( (LA276_0==FINALLY) ) {
						int LA276_2 = input.LA(2);
						if ( (synpred413_Delphi()) ) {
							alt276=1;
						}
					}
					switch (alt276) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:616:39: statementList
							{
							pushFollow(FOLLOW_statementList_in_tryStatement17231);
							statementList837=statementList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList837.getTree());

							}
							break;

					}

					string_literal838=(Token)match(input,FINALLY,FOLLOW_FINALLY_in_tryStatement17235); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal838_tree = (Object)adaptor.create(string_literal838);
					adaptor.addChild(root_0, string_literal838_tree);
					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:616:65: ( statementList )?
					int alt277=2;
					int LA277_0 = input.LA(1);
					if ( (LA277_0==ABSOLUTE||LA277_0==ADD||LA277_0==ANSISTRING||LA277_0==ASM||(LA277_0 >= ASSIGN && LA277_0 <= AT2)||(LA277_0 >= BEGIN && LA277_0 <= CASE)||(LA277_0 >= CONTAINS && LA277_0 <= CONTINUE)||LA277_0==DEFAULT||LA277_0==DISPID||LA277_0==DOT||(LA277_0 >= DQ && LA277_0 <= DW)||LA277_0==EXIT||LA277_0==EXPORT||LA277_0==FALSE||LA277_0==FINAL||LA277_0==FOR||LA277_0==GOTO||LA277_0==HELPER||LA277_0==IF||(LA277_0 >= IMPLEMENTS && LA277_0 <= INHERITED)||LA277_0==LBRACK||(LA277_0 >= LOCAL && LA277_0 <= MESSAGE)||LA277_0==NAME||LA277_0==OBJECT||LA277_0==OPERATOR||LA277_0==OUT||(LA277_0 >= POINTER && LA277_0 <= PRIVATE)||LA277_0==PUBLIC||LA277_0==RAISE||(LA277_0 >= READ && LA277_0 <= READONLY)||(LA277_0 >= REFERENCE && LA277_0 <= REGISTER)||(LA277_0 >= REMOVE && LA277_0 <= REPEAT)||LA277_0==SEMI||LA277_0==STATIC||(LA277_0 >= STORED && LA277_0 <= STRING)||(LA277_0 >= TRUE && LA277_0 <= TRY)||(LA277_0 >= TkHexNum && LA277_0 <= TkIntNum)||LA277_0==UNSAFE||(LA277_0 >= VAR && LA277_0 <= WRITEONLY)||LA277_0==198||LA277_0==203||LA277_0==209) ) {
						alt277=1;
					}
					else if ( (LA277_0==END) ) {
						int LA277_2 = input.LA(2);
						if ( (synpred414_Delphi()) ) {
							alt277=1;
						}
					}
					switch (alt277) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:616:66: statementList
							{
							pushFollow(FOLLOW_statementList_in_tryStatement17238);
							statementList839=statementList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList839.getTree());

							}
							break;

					}

					string_literal840=(Token)match(input,END,FOLLOW_END_in_tryStatement17242); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal840_tree = (Object)adaptor.create(string_literal840);
					adaptor.addChild(root_0, string_literal840_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 148, tryStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "tryStatement"


	public static class handlerList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "handlerList"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:618:1: handlerList : ( ( handler )* ( 'else' statementList )? | statementList );
	public final DelphiParser.handlerList_return handlerList() throws RecognitionException {
		DelphiParser.handlerList_return retval = new DelphiParser.handlerList_return();
		retval.start = input.LT(1);
		int handlerList_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal842=null;
		ParserRuleReturnScope handler841 =null;
		ParserRuleReturnScope statementList843 =null;
		ParserRuleReturnScope statementList844 =null;

		Object string_literal842_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 149) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:618:30: ( ( handler )* ( 'else' statementList )? | statementList )
			int alt281=2;
			switch ( input.LA(1) ) {
			case ELSE:
			case ON:
				{
				alt281=1;
				}
				break;
			case END:
				{
				int LA281_2 = input.LA(2);
				if ( (synpred417_Delphi()) ) {
					alt281=1;
				}
				else if ( (true) ) {
					alt281=2;
				}

				}
				break;
			case ABSOLUTE:
			case ADD:
			case ANSISTRING:
			case ASM:
			case ASSIGN:
			case AT:
			case AT2:
			case BEGIN:
			case BREAK:
			case CASE:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case DISPID:
			case DOT:
			case DQ:
			case DW:
			case EXIT:
			case EXPORT:
			case FALSE:
			case FINAL:
			case FOR:
			case GOTO:
			case HELPER:
			case IF:
			case IMPLEMENTS:
			case IN:
			case INDEX:
			case INHERITED:
			case LBRACK:
			case LOCAL:
			case LPAREN:
			case LT:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case POINTER:
			case POINTER2:
			case PRIVATE:
			case PUBLIC:
			case RAISE:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case REPEAT:
			case SEMI:
			case STATIC:
			case STORED:
			case STRICT:
			case STRING:
			case TRUE:
			case TRY:
			case TkHexNum:
			case TkIdentifier:
			case TkIntNum:
			case UNSAFE:
			case VAR:
			case VARARGS:
			case VARIANT:
			case VIRTUAL:
			case WHILE:
			case WITH:
			case WRITE:
			case WRITEONLY:
			case 198:
			case 203:
			case 209:
				{
				alt281=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 281, 0, input);
				throw nvae;
			}
			switch (alt281) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:618:32: ( handler )* ( 'else' statementList )?
					{
					root_0 = (Object)adaptor.nil();


					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:618:32: ( handler )*
					loop279:
					while (true) {
						int alt279=2;
						int LA279_0 = input.LA(1);
						if ( (LA279_0==ON) ) {
							alt279=1;
						}

						switch (alt279) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:618:33: handler
							{
							pushFollow(FOLLOW_handler_in_handlerList17297);
							handler841=handler();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, handler841.getTree());

							}
							break;

						default :
							break loop279;
						}
					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:618:43: ( 'else' statementList )?
					int alt280=2;
					int LA280_0 = input.LA(1);
					if ( (LA280_0==ELSE) ) {
						alt280=1;
					}
					switch (alt280) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:618:44: 'else' statementList
							{
							string_literal842=(Token)match(input,ELSE,FOLLOW_ELSE_in_handlerList17302); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal842_tree = (Object)adaptor.create(string_literal842);
							adaptor.addChild(root_0, string_literal842_tree);
							}

							pushFollow(FOLLOW_statementList_in_handlerList17304);
							statementList843=statementList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList843.getTree());

							}
							break;

					}

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:619:32: statementList
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_statementList_in_handlerList17339);
					statementList844=statementList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList844.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 149, handlerList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "handlerList"


	public static class handler_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "handler"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:621:1: handler : 'on' ( handlerIdent )? typeId 'do' handlerStatement ;
	public final DelphiParser.handler_return handler() throws RecognitionException {
		DelphiParser.handler_return retval = new DelphiParser.handler_return();
		retval.start = input.LT(1);
		int handler_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal845=null;
		Token string_literal848=null;
		ParserRuleReturnScope handlerIdent846 =null;
		ParserRuleReturnScope typeId847 =null;
		ParserRuleReturnScope handlerStatement849 =null;

		Object string_literal845_tree=null;
		Object string_literal848_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 150) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:621:30: ( 'on' ( handlerIdent )? typeId 'do' handlerStatement )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:621:32: 'on' ( handlerIdent )? typeId 'do' handlerStatement
			{
			root_0 = (Object)adaptor.nil();


			string_literal845=(Token)match(input,ON,FOLLOW_ON_in_handler17397); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal845_tree = (Object)adaptor.create(string_literal845);
			adaptor.addChild(root_0, string_literal845_tree);
			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:621:37: ( handlerIdent )?
			int alt282=2;
			switch ( input.LA(1) ) {
				case TkIdentifier:
					{
					int LA282_1 = input.LA(2);
					if ( (LA282_1==COLON) ) {
						alt282=1;
					}
					}
					break;
				case 198:
					{
					int LA282_2 = input.LA(2);
					if ( (LA282_2==TkIdentifier) ) {
						int LA282_6 = input.LA(3);
						if ( (LA282_6==COLON) ) {
							alt282=1;
						}
					}
					else if ( ((LA282_2 >= ABSOLUTE && LA282_2 <= ASSEMBLY)||LA282_2==AT||LA282_2==AUTOMATED||(LA282_2 >= BEGIN && LA282_2 <= CLASS)||(LA282_2 >= CONST && LA282_2 <= CONTINUE)||LA282_2==DEFAULT||(LA282_2 >= DEPRECATED && LA282_2 <= DO)||(LA282_2 >= DOWNTO && LA282_2 <= DYNAMIC)||(LA282_2 >= ELSE && LA282_2 <= END)||(LA282_2 >= EXCEPT && LA282_2 <= FUNCTION)||LA282_2==GOTO||LA282_2==HELPER||(LA282_2 >= IF && LA282_2 <= LABEL)||(LA282_2 >= LIBRARY && LA282_2 <= LOCAL)||LA282_2==MESSAGE||(LA282_2 >= MOD && LA282_2 <= NOT)||(LA282_2 >= OBJECT && LA282_2 <= PLATFORM)||LA282_2==POINTER||(LA282_2 >= PRIVATE && LA282_2 <= PUBLISHED)||LA282_2==RAISE||(LA282_2 >= READ && LA282_2 <= RESOURCESTRING)||(LA282_2 >= SAFECALL && LA282_2 <= SEALED)||(LA282_2 >= SET && LA282_2 <= SHR)||(LA282_2 >= STATIC && LA282_2 <= TYPE)||(LA282_2 >= UNIT && LA282_2 <= USES)||(LA282_2 >= VAR && LA282_2 <= WRITEONLY)||LA282_2==XOR) ) {
						int LA282_7 = input.LA(3);
						if ( (LA282_7==COLON) ) {
							alt282=1;
						}
					}
					}
					break;
				case ABSOLUTE:
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DISPID:
				case DQ:
				case DW:
				case EXIT:
				case EXPORT:
				case FALSE:
				case FINAL:
				case HELPER:
				case IMPLEMENTS:
				case IN:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case PRIVATE:
				case PUBLIC:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STATIC:
				case STORED:
				case STRICT:
				case STRING:
				case TRUE:
				case UNSAFE:
				case VARARGS:
				case VARIANT:
				case VIRTUAL:
				case WRITE:
				case WRITEONLY:
					{
					int LA282_3 = input.LA(2);
					if ( (LA282_3==COLON) ) {
						alt282=1;
					}
					}
					break;
			}
			switch (alt282) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:621:38: handlerIdent
					{
					pushFollow(FOLLOW_handlerIdent_in_handler17400);
					handlerIdent846=handlerIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, handlerIdent846.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_typeId_in_handler17404);
			typeId847=typeId();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, typeId847.getTree());

			string_literal848=(Token)match(input,DO,FOLLOW_DO_in_handler17406); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal848_tree = (Object)adaptor.create(string_literal848);
			adaptor.addChild(root_0, string_literal848_tree);
			}

			pushFollow(FOLLOW_handlerStatement_in_handler17408);
			handlerStatement849=handlerStatement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, handlerStatement849.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 150, handler_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "handler"


	public static class handlerIdent_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "handlerIdent"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:623:1: handlerIdent : ident ':' ;
	public final DelphiParser.handlerIdent_return handlerIdent() throws RecognitionException {
		DelphiParser.handlerIdent_return retval = new DelphiParser.handlerIdent_return();
		retval.start = input.LT(1);
		int handlerIdent_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal851=null;
		ParserRuleReturnScope ident850 =null;

		Object char_literal851_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 151) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:623:30: ( ident ':' )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:623:32: ident ':'
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_ident_in_handlerIdent17463);
			ident850=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident850.getTree());

			char_literal851=(Token)match(input,COLON,FOLLOW_COLON_in_handlerIdent17465); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal851_tree = (Object)adaptor.create(char_literal851);
			adaptor.addChild(root_0, char_literal851_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 151, handlerIdent_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "handlerIdent"


	public static class handlerStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "handlerStatement"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:625:1: handlerStatement : ( statement ( ';' )? | ';' );
	public final DelphiParser.handlerStatement_return handlerStatement() throws RecognitionException {
		DelphiParser.handlerStatement_return retval = new DelphiParser.handlerStatement_return();
		retval.start = input.LT(1);
		int handlerStatement_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal853=null;
		Token char_literal854=null;
		ParserRuleReturnScope statement852 =null;

		Object char_literal853_tree=null;
		Object char_literal854_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:625:30: ( statement ( ';' )? | ';' )
			int alt284=2;
			int LA284_0 = input.LA(1);
			if ( (LA284_0==EOF||LA284_0==ABSOLUTE||LA284_0==ADD||LA284_0==ANSISTRING||LA284_0==ASM||(LA284_0 >= ASSIGN && LA284_0 <= AT2)||(LA284_0 >= BEGIN && LA284_0 <= CASE)||(LA284_0 >= CONTAINS && LA284_0 <= CONTINUE)||LA284_0==DEFAULT||LA284_0==DISPID||LA284_0==DOT||(LA284_0 >= DQ && LA284_0 <= DW)||(LA284_0 >= ELSE && LA284_0 <= END)||LA284_0==EXIT||LA284_0==EXPORT||LA284_0==FALSE||LA284_0==FINAL||LA284_0==FOR||LA284_0==GOTO||LA284_0==HELPER||LA284_0==IF||(LA284_0 >= IMPLEMENTS && LA284_0 <= INHERITED)||LA284_0==LBRACK||(LA284_0 >= LOCAL && LA284_0 <= MESSAGE)||LA284_0==NAME||LA284_0==OBJECT||(LA284_0 >= ON && LA284_0 <= OPERATOR)||LA284_0==OUT||(LA284_0 >= POINTER && LA284_0 <= PRIVATE)||LA284_0==PUBLIC||LA284_0==RAISE||(LA284_0 >= READ && LA284_0 <= READONLY)||(LA284_0 >= REFERENCE && LA284_0 <= REGISTER)||(LA284_0 >= REMOVE && LA284_0 <= REPEAT)||LA284_0==STATIC||(LA284_0 >= STORED && LA284_0 <= STRING)||(LA284_0 >= TRUE && LA284_0 <= TRY)||(LA284_0 >= TkHexNum && LA284_0 <= TkIntNum)||LA284_0==UNSAFE||(LA284_0 >= VAR && LA284_0 <= WRITEONLY)||LA284_0==198||LA284_0==203||LA284_0==209) ) {
				alt284=1;
			}
			else if ( (LA284_0==SEMI) ) {
				int LA284_2 = input.LA(2);
				if ( (synpred420_Delphi()) ) {
					alt284=1;
				}
				else if ( (true) ) {
					alt284=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 284, 0, input);
				throw nvae;
			}

			switch (alt284) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:625:32: statement ( ';' )?
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_statement_in_handlerStatement17514);
					statement852=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statement852.getTree());

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:625:42: ( ';' )?
					int alt283=2;
					int LA283_0 = input.LA(1);
					if ( (LA283_0==SEMI) ) {
						alt283=1;
					}
					switch (alt283) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:625:43: ';'
							{
							char_literal853=(Token)match(input,SEMI,FOLLOW_SEMI_in_handlerStatement17517); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal853_tree = (Object)adaptor.create(char_literal853);
							adaptor.addChild(root_0, char_literal853_tree);
							}

							}
							break;

					}

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:626:32: ';'
					{
					root_0 = (Object)adaptor.nil();


					char_literal854=(Token)match(input,SEMI,FOLLOW_SEMI_in_handlerStatement17552); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal854_tree = (Object)adaptor.create(char_literal854);
					adaptor.addChild(root_0, char_literal854_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 152, handlerStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "handlerStatement"


	public static class raiseStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "raiseStatement"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:628:1: raiseStatement : 'raise' ( designator )? ( AT designator )? ;
	public final DelphiParser.raiseStatement_return raiseStatement() throws RecognitionException {
		DelphiParser.raiseStatement_return retval = new DelphiParser.raiseStatement_return();
		retval.start = input.LT(1);
		int raiseStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal855=null;
		Token AT857=null;
		ParserRuleReturnScope designator856 =null;
		ParserRuleReturnScope designator858 =null;

		Object string_literal855_tree=null;
		Object AT857_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 153) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:628:30: ( 'raise' ( designator )? ( AT designator )? )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:628:32: 'raise' ( designator )? ( AT designator )?
			{
			root_0 = (Object)adaptor.nil();


			string_literal855=(Token)match(input,RAISE,FOLLOW_RAISE_in_raiseStatement17603); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal855_tree = (Object)adaptor.create(string_literal855);
			adaptor.addChild(root_0, string_literal855_tree);
			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:628:40: ( designator )?
			int alt285=2;
			switch ( input.LA(1) ) {
				case 203:
					{
					int LA285_1 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case INHERITED:
					{
					int LA285_2 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case TkIdentifier:
					{
					int LA285_3 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case 198:
					{
					int LA285_4 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case AT:
					{
					int LA285_5 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case POINTER2:
					{
					int LA285_6 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case 209:
					{
					int LA285_7 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case AT2:
					{
					int LA285_8 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case LT:
					{
					int LA285_9 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case LBRACK:
					{
					int LA285_10 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case LPAREN:
					{
					int LA285_11 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case TRUE:
					{
					int LA285_12 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case ELSE:
					{
					int LA285_13 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case EOF:
					{
					int LA285_14 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case SEMI:
					{
					int LA285_15 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case END:
					{
					int LA285_16 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case PROCEDURE:
					{
					int LA285_17 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case FUNCTION:
					{
					int LA285_18 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case DOT:
					{
					int LA285_19 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case 199:
					{
					int LA285_20 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case NOT:
					{
					int LA285_21 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case PLUS:
					{
					int LA285_22 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case MINUS:
					{
					int LA285_23 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case TkRealNum:
					{
					int LA285_24 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case TkHexNum:
				case TkIntNum:
					{
					int LA285_25 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case FALSE:
					{
					int LA285_26 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case IN:
					{
					int LA285_27 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case NIL:
					{
					int LA285_28 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case 210:
					{
					int LA285_29 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case ControlChar:
					{
					int LA285_30 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case QuotedString:
					{
					int LA285_31 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case AND:
				case AS:
				case DIV:
				case MOD:
				case OR:
				case SHL:
				case SHR:
				case SLASH:
				case STAR:
				case XOR:
				case 200:
				case 201:
				case 202:
				case 204:
				case 205:
				case 206:
				case 207:
				case 208:
					{
					int LA285_32 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case ABSOLUTE:
				case ADD:
				case ANSISTRING:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DISPID:
				case DQ:
				case DW:
				case EXIT:
				case EXPORT:
				case FINAL:
				case HELPER:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case PRIVATE:
				case PUBLIC:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STATIC:
				case STORED:
				case STRICT:
				case STRING:
				case UNSAFE:
				case VARARGS:
				case VARIANT:
				case VIRTUAL:
				case WRITE:
				case WRITEONLY:
					{
					int LA285_33 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case EQUAL:
					{
					int LA285_34 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case GE:
				case GT:
				case IS:
				case LE:
				case NOT_EQUAL:
					{
					int LA285_35 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case DOTDOT:
					{
					int LA285_36 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case COMMA:
					{
					int LA285_37 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case COLON:
					{
					int LA285_38 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case FINALIZATION:
					{
					int LA285_39 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case UNTIL:
					{
					int LA285_40 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case EXCEPT:
					{
					int LA285_41 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case FINALLY:
					{
					int LA285_42 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
				case ON:
					{
					int LA285_43 = input.LA(2);
					if ( (synpred421_Delphi()) ) {
						alt285=1;
					}
					}
					break;
			}
			switch (alt285) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:628:41: designator
					{
					pushFollow(FOLLOW_designator_in_raiseStatement17606);
					designator856=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator856.getTree());

					}
					break;

			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:628:54: ( AT designator )?
			int alt286=2;
			int LA286_0 = input.LA(1);
			if ( (LA286_0==AT) ) {
				int LA286_1 = input.LA(2);
				if ( (synpred422_Delphi()) ) {
					alt286=1;
				}
			}
			switch (alt286) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:628:55: AT designator
					{
					AT857=(Token)match(input,AT,FOLLOW_AT_in_raiseStatement17611); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					AT857_tree = (Object)adaptor.create(AT857);
					adaptor.addChild(root_0, AT857_tree);
					}

					pushFollow(FOLLOW_designator_in_raiseStatement17613);
					designator858=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator858.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 153, raiseStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "raiseStatement"


	public static class assemblerStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "assemblerStatement"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:633:1: assemblerStatement : 'asm' (~ ( 'end' ) )* 'end' ;
	public final DelphiParser.assemblerStatement_return assemblerStatement() throws RecognitionException {
		DelphiParser.assemblerStatement_return retval = new DelphiParser.assemblerStatement_return();
		retval.start = input.LT(1);
		int assemblerStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal859=null;
		Token set860=null;
		Token string_literal861=null;

		Object string_literal859_tree=null;
		Object set860_tree=null;
		Object string_literal861_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:633:30: ( 'asm' (~ ( 'end' ) )* 'end' )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:633:32: 'asm' (~ ( 'end' ) )* 'end'
			{
			root_0 = (Object)adaptor.nil();


			string_literal859=(Token)match(input,ASM,FOLLOW_ASM_in_assemblerStatement17666); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal859_tree = (Object)adaptor.create(string_literal859);
			adaptor.addChild(root_0, string_literal859_tree);
			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:633:38: (~ ( 'end' ) )*
			loop287:
			while (true) {
				int alt287=2;
				int LA287_0 = input.LA(1);
				if ( ((LA287_0 >= ABSOLUTE && LA287_0 <= ELSE)||(LA287_0 >= EQUAL && LA287_0 <= 210)) ) {
					alt287=1;
				}

				switch (alt287) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
					{
					set860=input.LT(1);
					if ( (input.LA(1) >= ABSOLUTE && input.LA(1) <= ELSE)||(input.LA(1) >= EQUAL && input.LA(1) <= 210) ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set860));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

				default :
					break loop287;
				}
			}

			string_literal861=(Token)match(input,END,FOLLOW_END_in_assemblerStatement17674); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal861_tree = (Object)adaptor.create(string_literal861);
			adaptor.addChild(root_0, string_literal861_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 154, assemblerStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "assemblerStatement"


	public static class methodDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodDirective"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:638:1: methodDirective : ( reintroduceDirective | overloadDirective | bindingDirective | abstractDirective | inlineDirective | callConvention | hintingDirective ';' | oldCallConventionDirective | dispIDDirective | externalDirective );
	public final DelphiParser.methodDirective_return methodDirective() throws RecognitionException {
		DelphiParser.methodDirective_return retval = new DelphiParser.methodDirective_return();
		retval.start = input.LT(1);
		int methodDirective_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal869=null;
		ParserRuleReturnScope reintroduceDirective862 =null;
		ParserRuleReturnScope overloadDirective863 =null;
		ParserRuleReturnScope bindingDirective864 =null;
		ParserRuleReturnScope abstractDirective865 =null;
		ParserRuleReturnScope inlineDirective866 =null;
		ParserRuleReturnScope callConvention867 =null;
		ParserRuleReturnScope hintingDirective868 =null;
		ParserRuleReturnScope oldCallConventionDirective870 =null;
		ParserRuleReturnScope dispIDDirective871 =null;
		ParserRuleReturnScope externalDirective872 =null;

		Object char_literal869_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 155) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:638:30: ( reintroduceDirective | overloadDirective | bindingDirective | abstractDirective | inlineDirective | callConvention | hintingDirective ';' | oldCallConventionDirective | dispIDDirective | externalDirective )
			int alt288=10;
			switch ( input.LA(1) ) {
			case REINTRODUCE:
				{
				alt288=1;
				}
				break;
			case OVERLOAD:
				{
				alt288=2;
				}
				break;
			case DYNAMIC:
			case MESSAGE:
			case OVERRIDE:
			case STATIC:
			case VIRTUAL:
				{
				alt288=3;
				}
				break;
			case ABSTRACT:
			case FINAL:
				{
				alt288=4;
				}
				break;
			case ASSEMBLER:
			case INLINE:
				{
				alt288=5;
				}
				break;
			case CDECL:
			case EXPORT:
			case PASCAL:
			case REGISTER:
			case SAFECALL:
			case STDCALL:
				{
				alt288=6;
				}
				break;
			case DEPRECATED:
			case EXPERIMENTAL:
			case LIBRARY:
			case PLATFORM:
				{
				alt288=7;
				}
				break;
			case FAR:
			case LOCAL:
			case NEAR:
				{
				alt288=8;
				}
				break;
			case DISPID:
				{
				alt288=9;
				}
				break;
			case EXTERNAL:
			case VARARGS:
				{
				alt288=10;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 288, 0, input);
				throw nvae;
			}
			switch (alt288) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:638:32: reintroduceDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_reintroduceDirective_in_methodDirective17747);
					reintroduceDirective862=reintroduceDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, reintroduceDirective862.getTree());

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:639:32: overloadDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_overloadDirective_in_methodDirective17789);
					overloadDirective863=overloadDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, overloadDirective863.getTree());

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:640:32: bindingDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_bindingDirective_in_methodDirective17834);
					bindingDirective864=bindingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bindingDirective864.getTree());

					}
					break;
				case 4 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:641:32: abstractDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_abstractDirective_in_methodDirective17880);
					abstractDirective865=abstractDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, abstractDirective865.getTree());

					}
					break;
				case 5 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:642:32: inlineDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_inlineDirective_in_methodDirective17925);
					inlineDirective866=inlineDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineDirective866.getTree());

					}
					break;
				case 6 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:643:32: callConvention
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_callConvention_in_methodDirective17972);
					callConvention867=callConvention();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, callConvention867.getTree());

					}
					break;
				case 7 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:644:32: hintingDirective ';'
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_hintingDirective_in_methodDirective18020);
					hintingDirective868=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, hintingDirective868.getTree());

					char_literal869=(Token)match(input,SEMI,FOLLOW_SEMI_in_methodDirective18022); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal869_tree = (Object)adaptor.create(char_literal869);
					adaptor.addChild(root_0, char_literal869_tree);
					}

					}
					break;
				case 8 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:645:32: oldCallConventionDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_oldCallConventionDirective_in_methodDirective18064);
					oldCallConventionDirective870=oldCallConventionDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, oldCallConventionDirective870.getTree());

					}
					break;
				case 9 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:646:32: dispIDDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_dispIDDirective_in_methodDirective18100);
					dispIDDirective871=dispIDDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dispIDDirective871.getTree());

					}
					break;
				case 10 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:647:32: externalDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_externalDirective_in_methodDirective18133);
					externalDirective872=externalDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, externalDirective872.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 155, methodDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodDirective"


	public static class functionDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "functionDirective"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:649:1: functionDirective : ( overloadDirective | inlineDirective | callConvention | oldCallConventionDirective | hintingDirective ';' | ( callConventionNoSemi )? externalDirective | externalDirective | 'unsafe' ';' );
	public final DelphiParser.functionDirective_return functionDirective() throws RecognitionException {
		DelphiParser.functionDirective_return retval = new DelphiParser.functionDirective_return();
		retval.start = input.LT(1);
		int functionDirective_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal878=null;
		Token string_literal882=null;
		Token char_literal883=null;
		ParserRuleReturnScope overloadDirective873 =null;
		ParserRuleReturnScope inlineDirective874 =null;
		ParserRuleReturnScope callConvention875 =null;
		ParserRuleReturnScope oldCallConventionDirective876 =null;
		ParserRuleReturnScope hintingDirective877 =null;
		ParserRuleReturnScope callConventionNoSemi879 =null;
		ParserRuleReturnScope externalDirective880 =null;
		ParserRuleReturnScope externalDirective881 =null;

		Object char_literal878_tree=null;
		Object string_literal882_tree=null;
		Object char_literal883_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 156) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:649:30: ( overloadDirective | inlineDirective | callConvention | oldCallConventionDirective | hintingDirective ';' | ( callConventionNoSemi )? externalDirective | externalDirective | 'unsafe' ';' )
			int alt290=8;
			switch ( input.LA(1) ) {
			case OVERLOAD:
				{
				alt290=1;
				}
				break;
			case ASSEMBLER:
			case INLINE:
				{
				alt290=2;
				}
				break;
			case CDECL:
				{
				int LA290_4 = input.LA(2);
				if ( (synpred436_Delphi()) ) {
					alt290=3;
				}
				else if ( (synpred440_Delphi()) ) {
					alt290=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 290, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PASCAL:
				{
				int LA290_5 = input.LA(2);
				if ( (synpred436_Delphi()) ) {
					alt290=3;
				}
				else if ( (synpred440_Delphi()) ) {
					alt290=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 290, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case REGISTER:
				{
				int LA290_6 = input.LA(2);
				if ( (synpred436_Delphi()) ) {
					alt290=3;
				}
				else if ( (synpred440_Delphi()) ) {
					alt290=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 290, 6, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SAFECALL:
				{
				int LA290_7 = input.LA(2);
				if ( (synpred436_Delphi()) ) {
					alt290=3;
				}
				else if ( (synpred440_Delphi()) ) {
					alt290=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 290, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case STDCALL:
				{
				int LA290_8 = input.LA(2);
				if ( (synpred436_Delphi()) ) {
					alt290=3;
				}
				else if ( (synpred440_Delphi()) ) {
					alt290=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 290, 8, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EXPORT:
				{
				int LA290_9 = input.LA(2);
				if ( (synpred436_Delphi()) ) {
					alt290=3;
				}
				else if ( (synpred440_Delphi()) ) {
					alt290=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 290, 9, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case FAR:
			case LOCAL:
			case NEAR:
				{
				alt290=4;
				}
				break;
			case DEPRECATED:
			case EXPERIMENTAL:
			case LIBRARY:
			case PLATFORM:
				{
				alt290=5;
				}
				break;
			case VARARGS:
				{
				int LA290_17 = input.LA(2);
				if ( (synpred440_Delphi()) ) {
					alt290=6;
				}
				else if ( (synpred441_Delphi()) ) {
					alt290=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 290, 17, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EXTERNAL:
				{
				int LA290_18 = input.LA(2);
				if ( (synpred440_Delphi()) ) {
					alt290=6;
				}
				else if ( (synpred441_Delphi()) ) {
					alt290=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 290, 18, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case UNSAFE:
				{
				alt290=8;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 290, 0, input);
				throw nvae;
			}
			switch (alt290) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:649:32: overloadDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_overloadDirective_in_functionDirective18181);
					overloadDirective873=overloadDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, overloadDirective873.getTree());

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:650:32: inlineDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_inlineDirective_in_functionDirective18224);
					inlineDirective874=inlineDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineDirective874.getTree());

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:651:32: callConvention
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_callConvention_in_functionDirective18269);
					callConvention875=callConvention();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, callConvention875.getTree());

					}
					break;
				case 4 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:652:32: oldCallConventionDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_oldCallConventionDirective_in_functionDirective18315);
					oldCallConventionDirective876=oldCallConventionDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, oldCallConventionDirective876.getTree());

					}
					break;
				case 5 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:653:32: hintingDirective ';'
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_hintingDirective_in_functionDirective18349);
					hintingDirective877=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, hintingDirective877.getTree());

					char_literal878=(Token)match(input,SEMI,FOLLOW_SEMI_in_functionDirective18351); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal878_tree = (Object)adaptor.create(char_literal878);
					adaptor.addChild(root_0, char_literal878_tree);
					}

					}
					break;
				case 6 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:654:32: ( callConventionNoSemi )? externalDirective
					{
					root_0 = (Object)adaptor.nil();


					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:654:32: ( callConventionNoSemi )?
					int alt289=2;
					int LA289_0 = input.LA(1);
					if ( (LA289_0==CDECL||LA289_0==EXPORT||LA289_0==PASCAL||LA289_0==REGISTER||LA289_0==SAFECALL||LA289_0==STDCALL) ) {
						alt289=1;
					}
					switch (alt289) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:654:33: callConventionNoSemi
							{
							pushFollow(FOLLOW_callConventionNoSemi_in_functionDirective18392);
							callConventionNoSemi879=callConventionNoSemi();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, callConventionNoSemi879.getTree());

							}
							break;

					}

					pushFollow(FOLLOW_externalDirective_in_functionDirective18396);
					externalDirective880=externalDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, externalDirective880.getTree());

					}
					break;
				case 7 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:655:32: externalDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_externalDirective_in_functionDirective18439);
					externalDirective881=externalDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, externalDirective881.getTree());

					}
					break;
				case 8 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:656:32: 'unsafe' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal882=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_functionDirective18472); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal882_tree = (Object)adaptor.create(string_literal882);
					adaptor.addChild(root_0, string_literal882_tree);
					}

					char_literal883=(Token)match(input,SEMI,FOLLOW_SEMI_in_functionDirective18474); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal883_tree = (Object)adaptor.create(char_literal883);
					adaptor.addChild(root_0, char_literal883_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 156, functionDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "functionDirective"


	public static class reintroduceDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "reintroduceDirective"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:658:1: reintroduceDirective : 'reintroduce' ( ';' )? ;
	public final DelphiParser.reintroduceDirective_return reintroduceDirective() throws RecognitionException {
		DelphiParser.reintroduceDirective_return retval = new DelphiParser.reintroduceDirective_return();
		retval.start = input.LT(1);
		int reintroduceDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal884=null;
		Token char_literal885=null;

		Object string_literal884_tree=null;
		Object char_literal885_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 157) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:658:30: ( 'reintroduce' ( ';' )? )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:658:32: 'reintroduce' ( ';' )?
			{
			root_0 = (Object)adaptor.nil();


			string_literal884=(Token)match(input,REINTRODUCE,FOLLOW_REINTRODUCE_in_reintroduceDirective18534); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal884_tree = (Object)adaptor.create(string_literal884);
			adaptor.addChild(root_0, string_literal884_tree);
			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:658:46: ( ';' )?
			int alt291=2;
			int LA291_0 = input.LA(1);
			if ( (LA291_0==SEMI) ) {
				int LA291_1 = input.LA(2);
				if ( (synpred442_Delphi()) ) {
					alt291=1;
				}
			}
			switch (alt291) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:658:47: ';'
					{
					char_literal885=(Token)match(input,SEMI,FOLLOW_SEMI_in_reintroduceDirective18537); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal885_tree = (Object)adaptor.create(char_literal885);
					adaptor.addChild(root_0, char_literal885_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 157, reintroduceDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "reintroduceDirective"


	public static class overloadDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "overloadDirective"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:660:1: overloadDirective : 'overload' ( ';' )? ;
	public final DelphiParser.overloadDirective_return overloadDirective() throws RecognitionException {
		DelphiParser.overloadDirective_return retval = new DelphiParser.overloadDirective_return();
		retval.start = input.LT(1);
		int overloadDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal886=null;
		Token char_literal887=null;

		Object string_literal886_tree=null;
		Object char_literal887_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 158) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:660:30: ( 'overload' ( ';' )? )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:660:32: 'overload' ( ';' )?
			{
			root_0 = (Object)adaptor.nil();


			string_literal886=(Token)match(input,OVERLOAD,FOLLOW_OVERLOAD_in_overloadDirective18587); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal886_tree = (Object)adaptor.create(string_literal886);
			adaptor.addChild(root_0, string_literal886_tree);
			}

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:660:43: ( ';' )?
			int alt292=2;
			int LA292_0 = input.LA(1);
			if ( (LA292_0==SEMI) ) {
				int LA292_1 = input.LA(2);
				if ( (synpred443_Delphi()) ) {
					alt292=1;
				}
			}
			switch (alt292) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:660:44: ';'
					{
					char_literal887=(Token)match(input,SEMI,FOLLOW_SEMI_in_overloadDirective18590); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal887_tree = (Object)adaptor.create(char_literal887);
					adaptor.addChild(root_0, char_literal887_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 158, overloadDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "overloadDirective"


	public static class bindingDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "bindingDirective"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:662:1: bindingDirective : ( 'message' expression ';' | 'static' ';' | 'dynamic' ';' | 'override' ';' | 'virtual' ';' );
	public final DelphiParser.bindingDirective_return bindingDirective() throws RecognitionException {
		DelphiParser.bindingDirective_return retval = new DelphiParser.bindingDirective_return();
		retval.start = input.LT(1);
		int bindingDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal888=null;
		Token char_literal890=null;
		Token string_literal891=null;
		Token char_literal892=null;
		Token string_literal893=null;
		Token char_literal894=null;
		Token string_literal895=null;
		Token char_literal896=null;
		Token string_literal897=null;
		Token char_literal898=null;
		ParserRuleReturnScope expression889 =null;

		Object string_literal888_tree=null;
		Object char_literal890_tree=null;
		Object string_literal891_tree=null;
		Object char_literal892_tree=null;
		Object string_literal893_tree=null;
		Object char_literal894_tree=null;
		Object string_literal895_tree=null;
		Object char_literal896_tree=null;
		Object string_literal897_tree=null;
		Object char_literal898_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 159) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:662:30: ( 'message' expression ';' | 'static' ';' | 'dynamic' ';' | 'override' ';' | 'virtual' ';' )
			int alt293=5;
			switch ( input.LA(1) ) {
			case MESSAGE:
				{
				alt293=1;
				}
				break;
			case STATIC:
				{
				alt293=2;
				}
				break;
			case DYNAMIC:
				{
				alt293=3;
				}
				break;
			case OVERRIDE:
				{
				alt293=4;
				}
				break;
			case VIRTUAL:
				{
				alt293=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 293, 0, input);
				throw nvae;
			}
			switch (alt293) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:662:32: 'message' expression ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal888=(Token)match(input,MESSAGE,FOLLOW_MESSAGE_in_bindingDirective18645); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal888_tree = (Object)adaptor.create(string_literal888);
					adaptor.addChild(root_0, string_literal888_tree);
					}

					pushFollow(FOLLOW_expression_in_bindingDirective18647);
					expression889=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression889.getTree());

					char_literal890=(Token)match(input,SEMI,FOLLOW_SEMI_in_bindingDirective18649); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal890_tree = (Object)adaptor.create(char_literal890);
					adaptor.addChild(root_0, char_literal890_tree);
					}

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:663:32: 'static' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal891=(Token)match(input,STATIC,FOLLOW_STATIC_in_bindingDirective18682); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal891_tree = (Object)adaptor.create(string_literal891);
					adaptor.addChild(root_0, string_literal891_tree);
					}

					char_literal892=(Token)match(input,SEMI,FOLLOW_SEMI_in_bindingDirective18684); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal892_tree = (Object)adaptor.create(char_literal892);
					adaptor.addChild(root_0, char_literal892_tree);
					}

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:664:32: 'dynamic' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal893=(Token)match(input,DYNAMIC,FOLLOW_DYNAMIC_in_bindingDirective18717); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal893_tree = (Object)adaptor.create(string_literal893);
					adaptor.addChild(root_0, string_literal893_tree);
					}

					char_literal894=(Token)match(input,SEMI,FOLLOW_SEMI_in_bindingDirective18719); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal894_tree = (Object)adaptor.create(char_literal894);
					adaptor.addChild(root_0, char_literal894_tree);
					}

					}
					break;
				case 4 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:665:32: 'override' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal895=(Token)match(input,OVERRIDE,FOLLOW_OVERRIDE_in_bindingDirective18752); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal895_tree = (Object)adaptor.create(string_literal895);
					adaptor.addChild(root_0, string_literal895_tree);
					}

					char_literal896=(Token)match(input,SEMI,FOLLOW_SEMI_in_bindingDirective18754); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal896_tree = (Object)adaptor.create(char_literal896);
					adaptor.addChild(root_0, char_literal896_tree);
					}

					}
					break;
				case 5 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:666:32: 'virtual' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal897=(Token)match(input,VIRTUAL,FOLLOW_VIRTUAL_in_bindingDirective18787); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal897_tree = (Object)adaptor.create(string_literal897);
					adaptor.addChild(root_0, string_literal897_tree);
					}

					char_literal898=(Token)match(input,SEMI,FOLLOW_SEMI_in_bindingDirective18789); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal898_tree = (Object)adaptor.create(char_literal898);
					adaptor.addChild(root_0, char_literal898_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 159, bindingDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "bindingDirective"


	public static class abstractDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "abstractDirective"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:668:1: abstractDirective : ( 'abstract' ';' | 'final' ';' );
	public final DelphiParser.abstractDirective_return abstractDirective() throws RecognitionException {
		DelphiParser.abstractDirective_return retval = new DelphiParser.abstractDirective_return();
		retval.start = input.LT(1);
		int abstractDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal899=null;
		Token char_literal900=null;
		Token string_literal901=null;
		Token char_literal902=null;

		Object string_literal899_tree=null;
		Object char_literal900_tree=null;
		Object string_literal901_tree=null;
		Object char_literal902_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 160) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:668:30: ( 'abstract' ';' | 'final' ';' )
			int alt294=2;
			int LA294_0 = input.LA(1);
			if ( (LA294_0==ABSTRACT) ) {
				alt294=1;
			}
			else if ( (LA294_0==FINAL) ) {
				alt294=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 294, 0, input);
				throw nvae;
			}

			switch (alt294) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:668:32: 'abstract' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal899=(Token)match(input,ABSTRACT,FOLLOW_ABSTRACT_in_abstractDirective18837); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal899_tree = (Object)adaptor.create(string_literal899);
					adaptor.addChild(root_0, string_literal899_tree);
					}

					char_literal900=(Token)match(input,SEMI,FOLLOW_SEMI_in_abstractDirective18839); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal900_tree = (Object)adaptor.create(char_literal900);
					adaptor.addChild(root_0, char_literal900_tree);
					}

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:669:32: 'final' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal901=(Token)match(input,FINAL,FOLLOW_FINAL_in_abstractDirective18872); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal901_tree = (Object)adaptor.create(string_literal901);
					adaptor.addChild(root_0, string_literal901_tree);
					}

					char_literal902=(Token)match(input,SEMI,FOLLOW_SEMI_in_abstractDirective18874); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal902_tree = (Object)adaptor.create(char_literal902);
					adaptor.addChild(root_0, char_literal902_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 160, abstractDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "abstractDirective"


	public static class inlineDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "inlineDirective"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:671:1: inlineDirective : ( 'inline' ';' | 'assembler' ';' );
	public final DelphiParser.inlineDirective_return inlineDirective() throws RecognitionException {
		DelphiParser.inlineDirective_return retval = new DelphiParser.inlineDirective_return();
		retval.start = input.LT(1);
		int inlineDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal903=null;
		Token char_literal904=null;
		Token string_literal905=null;
		Token char_literal906=null;

		Object string_literal903_tree=null;
		Object char_literal904_tree=null;
		Object string_literal905_tree=null;
		Object char_literal906_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 161) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:671:30: ( 'inline' ';' | 'assembler' ';' )
			int alt295=2;
			int LA295_0 = input.LA(1);
			if ( (LA295_0==INLINE) ) {
				alt295=1;
			}
			else if ( (LA295_0==ASSEMBLER) ) {
				alt295=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 295, 0, input);
				throw nvae;
			}

			switch (alt295) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:671:32: 'inline' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal903=(Token)match(input,INLINE,FOLLOW_INLINE_in_inlineDirective18924); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal903_tree = (Object)adaptor.create(string_literal903);
					adaptor.addChild(root_0, string_literal903_tree);
					}

					char_literal904=(Token)match(input,SEMI,FOLLOW_SEMI_in_inlineDirective18926); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal904_tree = (Object)adaptor.create(char_literal904);
					adaptor.addChild(root_0, char_literal904_tree);
					}

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:672:32: 'assembler' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal905=(Token)match(input,ASSEMBLER,FOLLOW_ASSEMBLER_in_inlineDirective18959); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal905_tree = (Object)adaptor.create(string_literal905);
					adaptor.addChild(root_0, string_literal905_tree);
					}

					char_literal906=(Token)match(input,SEMI,FOLLOW_SEMI_in_inlineDirective18961); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal906_tree = (Object)adaptor.create(char_literal906);
					adaptor.addChild(root_0, char_literal906_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 161, inlineDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "inlineDirective"


	public static class callConvention_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "callConvention"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:674:1: callConvention : ( 'cdecl' ';' | 'pascal' ';' | 'register' ';' | 'safecall' ';' | 'stdcall' ';' | 'export' ';' );
	public final DelphiParser.callConvention_return callConvention() throws RecognitionException {
		DelphiParser.callConvention_return retval = new DelphiParser.callConvention_return();
		retval.start = input.LT(1);
		int callConvention_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal907=null;
		Token char_literal908=null;
		Token string_literal909=null;
		Token char_literal910=null;
		Token string_literal911=null;
		Token char_literal912=null;
		Token string_literal913=null;
		Token char_literal914=null;
		Token string_literal915=null;
		Token char_literal916=null;
		Token string_literal917=null;
		Token char_literal918=null;

		Object string_literal907_tree=null;
		Object char_literal908_tree=null;
		Object string_literal909_tree=null;
		Object char_literal910_tree=null;
		Object string_literal911_tree=null;
		Object char_literal912_tree=null;
		Object string_literal913_tree=null;
		Object char_literal914_tree=null;
		Object string_literal915_tree=null;
		Object char_literal916_tree=null;
		Object string_literal917_tree=null;
		Object char_literal918_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 162) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:674:30: ( 'cdecl' ';' | 'pascal' ';' | 'register' ';' | 'safecall' ';' | 'stdcall' ';' | 'export' ';' )
			int alt296=6;
			switch ( input.LA(1) ) {
			case CDECL:
				{
				alt296=1;
				}
				break;
			case PASCAL:
				{
				alt296=2;
				}
				break;
			case REGISTER:
				{
				alt296=3;
				}
				break;
			case SAFECALL:
				{
				alt296=4;
				}
				break;
			case STDCALL:
				{
				alt296=5;
				}
				break;
			case EXPORT:
				{
				alt296=6;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 296, 0, input);
				throw nvae;
			}
			switch (alt296) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:674:32: 'cdecl' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal907=(Token)match(input,CDECL,FOLLOW_CDECL_in_callConvention19013); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal907_tree = (Object)adaptor.create(string_literal907);
					adaptor.addChild(root_0, string_literal907_tree);
					}

					char_literal908=(Token)match(input,SEMI,FOLLOW_SEMI_in_callConvention19015); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal908_tree = (Object)adaptor.create(char_literal908);
					adaptor.addChild(root_0, char_literal908_tree);
					}

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:675:32: 'pascal' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal909=(Token)match(input,PASCAL,FOLLOW_PASCAL_in_callConvention19052); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal909_tree = (Object)adaptor.create(string_literal909);
					adaptor.addChild(root_0, string_literal909_tree);
					}

					char_literal910=(Token)match(input,SEMI,FOLLOW_SEMI_in_callConvention19054); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal910_tree = (Object)adaptor.create(char_literal910);
					adaptor.addChild(root_0, char_literal910_tree);
					}

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:676:32: 'register' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal911=(Token)match(input,REGISTER,FOLLOW_REGISTER_in_callConvention19090); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal911_tree = (Object)adaptor.create(string_literal911);
					adaptor.addChild(root_0, string_literal911_tree);
					}

					char_literal912=(Token)match(input,SEMI,FOLLOW_SEMI_in_callConvention19092); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal912_tree = (Object)adaptor.create(char_literal912);
					adaptor.addChild(root_0, char_literal912_tree);
					}

					}
					break;
				case 4 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:677:32: 'safecall' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal913=(Token)match(input,SAFECALL,FOLLOW_SAFECALL_in_callConvention19126); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal913_tree = (Object)adaptor.create(string_literal913);
					adaptor.addChild(root_0, string_literal913_tree);
					}

					char_literal914=(Token)match(input,SEMI,FOLLOW_SEMI_in_callConvention19128); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal914_tree = (Object)adaptor.create(char_literal914);
					adaptor.addChild(root_0, char_literal914_tree);
					}

					}
					break;
				case 5 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:678:32: 'stdcall' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal915=(Token)match(input,STDCALL,FOLLOW_STDCALL_in_callConvention19162); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal915_tree = (Object)adaptor.create(string_literal915);
					adaptor.addChild(root_0, string_literal915_tree);
					}

					char_literal916=(Token)match(input,SEMI,FOLLOW_SEMI_in_callConvention19164); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal916_tree = (Object)adaptor.create(char_literal916);
					adaptor.addChild(root_0, char_literal916_tree);
					}

					}
					break;
				case 6 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:679:32: 'export' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal917=(Token)match(input,EXPORT,FOLLOW_EXPORT_in_callConvention19199); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal917_tree = (Object)adaptor.create(string_literal917);
					adaptor.addChild(root_0, string_literal917_tree);
					}

					char_literal918=(Token)match(input,SEMI,FOLLOW_SEMI_in_callConvention19201); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal918_tree = (Object)adaptor.create(char_literal918);
					adaptor.addChild(root_0, char_literal918_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 162, callConvention_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "callConvention"


	public static class callConventionNoSemi_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "callConventionNoSemi"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:681:1: callConventionNoSemi : ( 'cdecl' | 'pascal' | 'register' | 'safecall' | 'stdcall' | 'export' );
	public final DelphiParser.callConventionNoSemi_return callConventionNoSemi() throws RecognitionException {
		DelphiParser.callConventionNoSemi_return retval = new DelphiParser.callConventionNoSemi_return();
		retval.start = input.LT(1);
		int callConventionNoSemi_StartIndex = input.index();

		Object root_0 = null;

		Token set919=null;

		Object set919_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 163) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:681:30: ( 'cdecl' | 'pascal' | 'register' | 'safecall' | 'stdcall' | 'export' )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set919=input.LT(1);
			if ( input.LA(1)==CDECL||input.LA(1)==EXPORT||input.LA(1)==PASCAL||input.LA(1)==REGISTER||input.LA(1)==SAFECALL||input.LA(1)==STDCALL ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set919));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 163, callConventionNoSemi_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "callConventionNoSemi"


	public static class oldCallConventionDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "oldCallConventionDirective"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:688:1: oldCallConventionDirective : ( 'far' ';' | 'local' ';' | 'near' ';' );
	public final DelphiParser.oldCallConventionDirective_return oldCallConventionDirective() throws RecognitionException {
		DelphiParser.oldCallConventionDirective_return retval = new DelphiParser.oldCallConventionDirective_return();
		retval.start = input.LT(1);
		int oldCallConventionDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal920=null;
		Token char_literal921=null;
		Token string_literal922=null;
		Token char_literal923=null;
		Token string_literal924=null;
		Token char_literal925=null;

		Object string_literal920_tree=null;
		Object char_literal921_tree=null;
		Object string_literal922_tree=null;
		Object char_literal923_tree=null;
		Object string_literal924_tree=null;
		Object char_literal925_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 164) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:688:30: ( 'far' ';' | 'local' ';' | 'near' ';' )
			int alt297=3;
			switch ( input.LA(1) ) {
			case FAR:
				{
				alt297=1;
				}
				break;
			case LOCAL:
				{
				alt297=2;
				}
				break;
			case NEAR:
				{
				alt297=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 297, 0, input);
				throw nvae;
			}
			switch (alt297) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:688:32: 'far' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal920=(Token)match(input,FAR,FOLLOW_FAR_in_oldCallConventionDirective19467); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal920_tree = (Object)adaptor.create(string_literal920);
					adaptor.addChild(root_0, string_literal920_tree);
					}

					char_literal921=(Token)match(input,SEMI,FOLLOW_SEMI_in_oldCallConventionDirective19469); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal921_tree = (Object)adaptor.create(char_literal921);
					adaptor.addChild(root_0, char_literal921_tree);
					}

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:689:32: 'local' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal922=(Token)match(input,LOCAL,FOLLOW_LOCAL_in_oldCallConventionDirective19508); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal922_tree = (Object)adaptor.create(string_literal922);
					adaptor.addChild(root_0, string_literal922_tree);
					}

					char_literal923=(Token)match(input,SEMI,FOLLOW_SEMI_in_oldCallConventionDirective19510); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal923_tree = (Object)adaptor.create(char_literal923);
					adaptor.addChild(root_0, char_literal923_tree);
					}

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:690:32: 'near' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal924=(Token)match(input,NEAR,FOLLOW_NEAR_in_oldCallConventionDirective19547); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal924_tree = (Object)adaptor.create(string_literal924);
					adaptor.addChild(root_0, string_literal924_tree);
					}

					char_literal925=(Token)match(input,SEMI,FOLLOW_SEMI_in_oldCallConventionDirective19549); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal925_tree = (Object)adaptor.create(char_literal925);
					adaptor.addChild(root_0, char_literal925_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 164, oldCallConventionDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "oldCallConventionDirective"


	public static class hintingDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "hintingDirective"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:692:1: hintingDirective : ( 'deprecated' ( stringFactor )? | 'experimental' | 'platform' | 'library' );
	public final DelphiParser.hintingDirective_return hintingDirective() throws RecognitionException {
		DelphiParser.hintingDirective_return retval = new DelphiParser.hintingDirective_return();
		retval.start = input.LT(1);
		int hintingDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal926=null;
		Token string_literal928=null;
		Token string_literal929=null;
		Token string_literal930=null;
		ParserRuleReturnScope stringFactor927 =null;

		Object string_literal926_tree=null;
		Object string_literal928_tree=null;
		Object string_literal929_tree=null;
		Object string_literal930_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 165) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:692:30: ( 'deprecated' ( stringFactor )? | 'experimental' | 'platform' | 'library' )
			int alt299=4;
			switch ( input.LA(1) ) {
			case DEPRECATED:
				{
				alt299=1;
				}
				break;
			case EXPERIMENTAL:
				{
				alt299=2;
				}
				break;
			case PLATFORM:
				{
				alt299=3;
				}
				break;
			case LIBRARY:
				{
				alt299=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 299, 0, input);
				throw nvae;
			}
			switch (alt299) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:692:32: 'deprecated' ( stringFactor )?
					{
					root_0 = (Object)adaptor.nil();


					string_literal926=(Token)match(input,DEPRECATED,FOLLOW_DEPRECATED_in_hintingDirective19603); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal926_tree = (Object)adaptor.create(string_literal926);
					adaptor.addChild(root_0, string_literal926_tree);
					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:692:45: ( stringFactor )?
					int alt298=2;
					int LA298_0 = input.LA(1);
					if ( (LA298_0==ControlChar||LA298_0==QuotedString) ) {
						alt298=1;
					}
					switch (alt298) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:692:46: stringFactor
							{
							pushFollow(FOLLOW_stringFactor_in_hintingDirective19606);
							stringFactor927=stringFactor();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, stringFactor927.getTree());

							}
							break;

					}

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:693:32: 'experimental'
					{
					root_0 = (Object)adaptor.nil();


					string_literal928=(Token)match(input,EXPERIMENTAL,FOLLOW_EXPERIMENTAL_in_hintingDirective19641); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal928_tree = (Object)adaptor.create(string_literal928);
					adaptor.addChild(root_0, string_literal928_tree);
					}

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:694:32: 'platform'
					{
					root_0 = (Object)adaptor.nil();


					string_literal929=(Token)match(input,PLATFORM,FOLLOW_PLATFORM_in_hintingDirective19676); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal929_tree = (Object)adaptor.create(string_literal929);
					adaptor.addChild(root_0, string_literal929_tree);
					}

					}
					break;
				case 4 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:695:32: 'library'
					{
					root_0 = (Object)adaptor.nil();


					string_literal930=(Token)match(input,LIBRARY,FOLLOW_LIBRARY_in_hintingDirective19709); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal930_tree = (Object)adaptor.create(string_literal930);
					adaptor.addChild(root_0, string_literal930_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 165, hintingDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "hintingDirective"


	public static class externalDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "externalDirective"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:697:1: externalDirective : ( 'varargs' ';' | 'external' ';' | 'external' constExpression ( externalSpecifier )* ( 'delayed' )? ';' );
	public final DelphiParser.externalDirective_return externalDirective() throws RecognitionException {
		DelphiParser.externalDirective_return retval = new DelphiParser.externalDirective_return();
		retval.start = input.LT(1);
		int externalDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal931=null;
		Token char_literal932=null;
		Token string_literal933=null;
		Token char_literal934=null;
		Token string_literal935=null;
		Token string_literal938=null;
		Token char_literal939=null;
		ParserRuleReturnScope constExpression936 =null;
		ParserRuleReturnScope externalSpecifier937 =null;

		Object string_literal931_tree=null;
		Object char_literal932_tree=null;
		Object string_literal933_tree=null;
		Object char_literal934_tree=null;
		Object string_literal935_tree=null;
		Object string_literal938_tree=null;
		Object char_literal939_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 166) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:697:30: ( 'varargs' ';' | 'external' ';' | 'external' constExpression ( externalSpecifier )* ( 'delayed' )? ';' )
			int alt302=3;
			int LA302_0 = input.LA(1);
			if ( (LA302_0==VARARGS) ) {
				alt302=1;
			}
			else if ( (LA302_0==EXTERNAL) ) {
				int LA302_2 = input.LA(2);
				if ( (LA302_2==SEMI) ) {
					int LA302_3 = input.LA(3);
					if ( (synpred467_Delphi()) ) {
						alt302=2;
					}
					else if ( (true) ) {
						alt302=3;
					}

				}
				else if ( (LA302_2==ABSOLUTE||(LA302_2 >= ADD && LA302_2 <= ANSISTRING)||LA302_2==AS||(LA302_2 >= AT && LA302_2 <= AT2)||LA302_2==BREAK||(LA302_2 >= CONTAINS && LA302_2 <= DELAYED)||LA302_2==DISPID||LA302_2==DIV||LA302_2==DOT||(LA302_2 >= DQ && LA302_2 <= DW)||LA302_2==EQUAL||LA302_2==EXIT||LA302_2==EXPORT||LA302_2==FALSE||LA302_2==FINAL||(LA302_2 >= FUNCTION && LA302_2 <= GE)||(LA302_2 >= GT && LA302_2 <= HELPER)||(LA302_2 >= IMPLEMENTS && LA302_2 <= INHERITED)||LA302_2==IS||LA302_2==LBRACK||LA302_2==LE||(LA302_2 >= LOCAL && LA302_2 <= NAME)||LA302_2==NIL||(LA302_2 >= NOT && LA302_2 <= OBJECT)||(LA302_2 >= OPERATOR && LA302_2 <= OUT)||(LA302_2 >= PLUS && LA302_2 <= PROCEDURE)||LA302_2==PUBLIC||LA302_2==QuotedString||(LA302_2 >= READ && LA302_2 <= READONLY)||(LA302_2 >= REFERENCE && LA302_2 <= REGISTER)||LA302_2==REMOVE||(LA302_2 >= SHL && LA302_2 <= STATIC)||(LA302_2 >= STORED && LA302_2 <= STRING)||LA302_2==TRUE||(LA302_2 >= TkHexNum && LA302_2 <= TkIntNum)||LA302_2==TkRealNum||LA302_2==UNSAFE||(LA302_2 >= VARARGS && LA302_2 <= VIRTUAL)||(LA302_2 >= WRITE && LA302_2 <= WRITEONLY)||(LA302_2 >= XOR && LA302_2 <= 210)) ) {
					alt302=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 302, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 302, 0, input);
				throw nvae;
			}

			switch (alt302) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:697:32: 'varargs' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal931=(Token)match(input,VARARGS,FOLLOW_VARARGS_in_externalDirective19757); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal931_tree = (Object)adaptor.create(string_literal931);
					adaptor.addChild(root_0, string_literal931_tree);
					}

					char_literal932=(Token)match(input,SEMI,FOLLOW_SEMI_in_externalDirective19759); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal932_tree = (Object)adaptor.create(char_literal932);
					adaptor.addChild(root_0, char_literal932_tree);
					}

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:698:32: 'external' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal933=(Token)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_externalDirective19795); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal933_tree = (Object)adaptor.create(string_literal933);
					adaptor.addChild(root_0, string_literal933_tree);
					}

					char_literal934=(Token)match(input,SEMI,FOLLOW_SEMI_in_externalDirective19797); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal934_tree = (Object)adaptor.create(char_literal934);
					adaptor.addChild(root_0, char_literal934_tree);
					}

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:699:32: 'external' constExpression ( externalSpecifier )* ( 'delayed' )? ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal935=(Token)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_externalDirective19830); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal935_tree = (Object)adaptor.create(string_literal935);
					adaptor.addChild(root_0, string_literal935_tree);
					}

					pushFollow(FOLLOW_constExpression_in_externalDirective19832);
					constExpression936=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression936.getTree());

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:699:59: ( externalSpecifier )*
					loop300:
					while (true) {
						int alt300=2;
						int LA300_0 = input.LA(1);
						if ( (LA300_0==INDEX||LA300_0==NAME) ) {
							alt300=1;
						}

						switch (alt300) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:699:60: externalSpecifier
							{
							pushFollow(FOLLOW_externalSpecifier_in_externalDirective19835);
							externalSpecifier937=externalSpecifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, externalSpecifier937.getTree());

							}
							break;

						default :
							break loop300;
						}
					}

					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:699:80: ( 'delayed' )?
					int alt301=2;
					int LA301_0 = input.LA(1);
					if ( (LA301_0==DELAYED) ) {
						alt301=1;
					}
					switch (alt301) {
						case 1 :
							// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:699:81: 'delayed'
							{
							string_literal938=(Token)match(input,DELAYED,FOLLOW_DELAYED_in_externalDirective19840); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal938_tree = (Object)adaptor.create(string_literal938);
							adaptor.addChild(root_0, string_literal938_tree);
							}

							}
							break;

					}

					char_literal939=(Token)match(input,SEMI,FOLLOW_SEMI_in_externalDirective19844); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal939_tree = (Object)adaptor.create(char_literal939);
					adaptor.addChild(root_0, char_literal939_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 166, externalDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "externalDirective"


	public static class externalSpecifier_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "externalSpecifier"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:701:1: externalSpecifier : ( 'name' constExpression | 'index' constExpression );
	public final DelphiParser.externalSpecifier_return externalSpecifier() throws RecognitionException {
		DelphiParser.externalSpecifier_return retval = new DelphiParser.externalSpecifier_return();
		retval.start = input.LT(1);
		int externalSpecifier_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal940=null;
		Token string_literal942=null;
		ParserRuleReturnScope constExpression941 =null;
		ParserRuleReturnScope constExpression943 =null;

		Object string_literal940_tree=null;
		Object string_literal942_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 167) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:701:30: ( 'name' constExpression | 'index' constExpression )
			int alt303=2;
			int LA303_0 = input.LA(1);
			if ( (LA303_0==NAME) ) {
				alt303=1;
			}
			else if ( (LA303_0==INDEX) ) {
				alt303=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 303, 0, input);
				throw nvae;
			}

			switch (alt303) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:701:32: 'name' constExpression
					{
					root_0 = (Object)adaptor.nil();


					string_literal940=(Token)match(input,NAME,FOLLOW_NAME_in_externalSpecifier19893); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal940_tree = (Object)adaptor.create(string_literal940);
					adaptor.addChild(root_0, string_literal940_tree);
					}

					pushFollow(FOLLOW_constExpression_in_externalSpecifier19895);
					constExpression941=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression941.getTree());

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:702:32: 'index' constExpression
					{
					root_0 = (Object)adaptor.nil();


					string_literal942=(Token)match(input,INDEX,FOLLOW_INDEX_in_externalSpecifier19928); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal942_tree = (Object)adaptor.create(string_literal942);
					adaptor.addChild(root_0, string_literal942_tree);
					}

					pushFollow(FOLLOW_constExpression_in_externalSpecifier19930);
					constExpression943=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression943.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 167, externalSpecifier_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "externalSpecifier"


	public static class dispIDDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "dispIDDirective"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:704:1: dispIDDirective : 'dispid' expression ';' ;
	public final DelphiParser.dispIDDirective_return dispIDDirective() throws RecognitionException {
		DelphiParser.dispIDDirective_return retval = new DelphiParser.dispIDDirective_return();
		retval.start = input.LT(1);
		int dispIDDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal944=null;
		Token char_literal946=null;
		ParserRuleReturnScope expression945 =null;

		Object string_literal944_tree=null;
		Object char_literal946_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 168) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:704:30: ( 'dispid' expression ';' )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:704:32: 'dispid' expression ';'
			{
			root_0 = (Object)adaptor.nil();


			string_literal944=(Token)match(input,DISPID,FOLLOW_DISPID_in_dispIDDirective19983); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal944_tree = (Object)adaptor.create(string_literal944);
			adaptor.addChild(root_0, string_literal944_tree);
			}

			pushFollow(FOLLOW_expression_in_dispIDDirective19985);
			expression945=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression945.getTree());

			char_literal946=(Token)match(input,SEMI,FOLLOW_SEMI_in_dispIDDirective19987); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal946_tree = (Object)adaptor.create(char_literal946);
			adaptor.addChild(root_0, char_literal946_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 168, dispIDDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "dispIDDirective"


	public static class ident_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "ident"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:709:1: ident : ( TkIdentifier | '&' TkIdentifier -> TkIdentifier | '&' keywordsAsIdentifier -> keywordsAsIdentifier | usedKeywordsAsNames );
	public final DelphiParser.ident_return ident() throws RecognitionException {
		DelphiParser.ident_return retval = new DelphiParser.ident_return();
		retval.start = input.LT(1);
		int ident_StartIndex = input.index();

		Object root_0 = null;

		Token TkIdentifier947=null;
		Token char_literal948=null;
		Token TkIdentifier949=null;
		Token char_literal950=null;
		ParserRuleReturnScope keywordsAsIdentifier951 =null;
		ParserRuleReturnScope usedKeywordsAsNames952 =null;

		Object TkIdentifier947_tree=null;
		Object char_literal948_tree=null;
		Object TkIdentifier949_tree=null;
		Object char_literal950_tree=null;
		RewriteRuleTokenStream stream_198=new RewriteRuleTokenStream(adaptor,"token 198");
		RewriteRuleTokenStream stream_TkIdentifier=new RewriteRuleTokenStream(adaptor,"token TkIdentifier");
		RewriteRuleSubtreeStream stream_keywordsAsIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule keywordsAsIdentifier");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 169) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:709:30: ( TkIdentifier | '&' TkIdentifier -> TkIdentifier | '&' keywordsAsIdentifier -> keywordsAsIdentifier | usedKeywordsAsNames )
			int alt304=4;
			switch ( input.LA(1) ) {
			case TkIdentifier:
				{
				alt304=1;
				}
				break;
			case 198:
				{
				int LA304_2 = input.LA(2);
				if ( (LA304_2==TkIdentifier) ) {
					alt304=2;
				}
				else if ( ((LA304_2 >= ABSOLUTE && LA304_2 <= ASSEMBLY)||LA304_2==AT||LA304_2==AUTOMATED||(LA304_2 >= BEGIN && LA304_2 <= CLASS)||(LA304_2 >= CONST && LA304_2 <= CONTINUE)||LA304_2==DEFAULT||(LA304_2 >= DEPRECATED && LA304_2 <= DO)||(LA304_2 >= DOWNTO && LA304_2 <= DYNAMIC)||(LA304_2 >= ELSE && LA304_2 <= END)||(LA304_2 >= EXCEPT && LA304_2 <= FUNCTION)||LA304_2==GOTO||LA304_2==HELPER||(LA304_2 >= IF && LA304_2 <= LABEL)||(LA304_2 >= LIBRARY && LA304_2 <= LOCAL)||LA304_2==MESSAGE||(LA304_2 >= MOD && LA304_2 <= NOT)||(LA304_2 >= OBJECT && LA304_2 <= PLATFORM)||LA304_2==POINTER||(LA304_2 >= PRIVATE && LA304_2 <= PUBLISHED)||LA304_2==RAISE||(LA304_2 >= READ && LA304_2 <= RESOURCESTRING)||(LA304_2 >= SAFECALL && LA304_2 <= SEALED)||(LA304_2 >= SET && LA304_2 <= SHR)||(LA304_2 >= STATIC && LA304_2 <= TYPE)||(LA304_2 >= UNIT && LA304_2 <= USES)||(LA304_2 >= VAR && LA304_2 <= WRITEONLY)||LA304_2==XOR) ) {
					alt304=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 304, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ABSOLUTE:
			case ADD:
			case ANSISTRING:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case DISPID:
			case DQ:
			case DW:
			case EXIT:
			case EXPORT:
			case FALSE:
			case FINAL:
			case HELPER:
			case IMPLEMENTS:
			case IN:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case POINTER:
			case PRIVATE:
			case PUBLIC:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STATIC:
			case STORED:
			case STRICT:
			case STRING:
			case TRUE:
			case UNSAFE:
			case VARARGS:
			case VARIANT:
			case VIRTUAL:
			case WRITE:
			case WRITEONLY:
				{
				alt304=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 304, 0, input);
				throw nvae;
			}
			switch (alt304) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:709:32: TkIdentifier
					{
					root_0 = (Object)adaptor.nil();


					TkIdentifier947=(Token)match(input,TkIdentifier,FOLLOW_TkIdentifier_in_ident20050); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TkIdentifier947_tree = (Object)adaptor.create(TkIdentifier947);
					adaptor.addChild(root_0, TkIdentifier947_tree);
					}

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:710:32: '&' TkIdentifier
					{
					char_literal948=(Token)match(input,198,FOLLOW_198_in_ident20083); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_198.add(char_literal948);

					TkIdentifier949=(Token)match(input,TkIdentifier,FOLLOW_TkIdentifier_in_ident20085); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_TkIdentifier.add(TkIdentifier949);

					// AST REWRITE
					// elements: TkIdentifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 710:49: -> TkIdentifier
					{
						adaptor.addChild(root_0, stream_TkIdentifier.nextNode());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:711:32: '&' keywordsAsIdentifier
					{
					char_literal950=(Token)match(input,198,FOLLOW_198_in_ident20122); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_198.add(char_literal950);

					pushFollow(FOLLOW_keywordsAsIdentifier_in_ident20124);
					keywordsAsIdentifier951=keywordsAsIdentifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_keywordsAsIdentifier.add(keywordsAsIdentifier951.getTree());
					// AST REWRITE
					// elements: keywordsAsIdentifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 711:57: -> keywordsAsIdentifier
					{
						adaptor.addChild(root_0, stream_keywordsAsIdentifier.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:712:32: usedKeywordsAsNames
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_usedKeywordsAsNames_in_ident20161);
					usedKeywordsAsNames952=usedKeywordsAsNames();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, usedKeywordsAsNames952.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 169, ident_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "ident"


	public static class usedKeywordsAsNames_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "usedKeywordsAsNames"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:714:1: usedKeywordsAsNames : ( ( ABSOLUTE | ADD | ANSISTRING | AT | BREAK | CONTAINS | CONTINUE | DEFAULT | DQ | DW | DISPID | EXIT | EXPORT ) | ( FALSE | FINAL | HELPER | IMPLEMENTS | IN | INDEX | LOCAL | MESSAGE | NAME ) | ( OBJECT | OUT | OPERATOR | POINTER | PUBLIC | PRIVATE | READ | READONLY | REFERENCE | REGISTER | REMOVE | STORED ) | ( STRICT | STRING | STATIC | TRUE | UNSAFE | VARARGS | VARIANT | VIRTUAL | WRITE | WRITEONLY ) );
	public final DelphiParser.usedKeywordsAsNames_return usedKeywordsAsNames() throws RecognitionException {
		DelphiParser.usedKeywordsAsNames_return retval = new DelphiParser.usedKeywordsAsNames_return();
		retval.start = input.LT(1);
		int usedKeywordsAsNames_StartIndex = input.index();

		Object root_0 = null;

		Token set953=null;

		Object set953_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 170) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:714:30: ( ( ABSOLUTE | ADD | ANSISTRING | AT | BREAK | CONTAINS | CONTINUE | DEFAULT | DQ | DW | DISPID | EXIT | EXPORT ) | ( FALSE | FINAL | HELPER | IMPLEMENTS | IN | INDEX | LOCAL | MESSAGE | NAME ) | ( OBJECT | OUT | OPERATOR | POINTER | PUBLIC | PRIVATE | READ | READONLY | REFERENCE | REGISTER | REMOVE | STORED ) | ( STRICT | STRING | STATIC | TRUE | UNSAFE | VARARGS | VARIANT | VIRTUAL | WRITE | WRITEONLY ) )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set953=input.LT(1);
			if ( input.LA(1)==ABSOLUTE||input.LA(1)==ADD||input.LA(1)==ANSISTRING||input.LA(1)==AT||input.LA(1)==BREAK||(input.LA(1) >= CONTAINS && input.LA(1) <= CONTINUE)||input.LA(1)==DEFAULT||input.LA(1)==DISPID||(input.LA(1) >= DQ && input.LA(1) <= DW)||input.LA(1)==EXIT||input.LA(1)==EXPORT||input.LA(1)==FALSE||input.LA(1)==FINAL||input.LA(1)==HELPER||(input.LA(1) >= IMPLEMENTS && input.LA(1) <= INDEX)||input.LA(1)==LOCAL||input.LA(1)==MESSAGE||input.LA(1)==NAME||input.LA(1)==OBJECT||input.LA(1)==OPERATOR||input.LA(1)==OUT||input.LA(1)==POINTER||input.LA(1)==PRIVATE||input.LA(1)==PUBLIC||(input.LA(1) >= READ && input.LA(1) <= READONLY)||(input.LA(1) >= REFERENCE && input.LA(1) <= REGISTER)||input.LA(1)==REMOVE||input.LA(1)==STATIC||(input.LA(1) >= STORED && input.LA(1) <= STRING)||input.LA(1)==TRUE||input.LA(1)==UNSAFE||(input.LA(1) >= VARARGS && input.LA(1) <= VIRTUAL)||(input.LA(1) >= WRITE && input.LA(1) <= WRITEONLY) ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set953));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 170, usedKeywordsAsNames_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "usedKeywordsAsNames"


	public static class keywordsAsIdentifier_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "keywordsAsIdentifier"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:719:1: keywordsAsIdentifier : ( ( ABSOLUTE | ABSTRACT | ADD | AND | ANSISTRING | ARRAY | AS | ASM | ASSEMBLER | ASSEMBLY ) | ( AT | AUTOMATED | BEGIN | BREAK | CASE | CDECL | CLASS | CONST | CONSTRUCTOR | CONTAINS ) | ( CONTINUE | DEFAULT | DEPRECATED | DESTRUCTOR | DISPID | DISPINTERFACE | DIV | DO | DOWNTO ) | ( DQ | DW | DYNAMIC | ELSE | END | EXCEPT | EXIT | EXPERIMENTAL | EXPORT | EXPORTS | EXTERNAL ) | ( FAR | FILE | FINAL | FINALIZATION | FINALLY | FOR | FORWARD | FUNCTION | GOTO | HELPER | IF ) | ( IMPLEMENTATION | IMPLEMENTS | IN | INDEX | INHERITED | INITIALIZATION | INLINE | INTERFACE ) | ( IS | LABEL | LIBRARY | LOCAL | MESSAGE | MOD | NAME | NEAR | NIL | NODEFAULT | NOT | OBJECT ) | ( OF | ON | OPERATOR | OR | OUT | OVERLOAD | OVERRIDE | PACKAGE | PACKED | PASCAL | PLATFORM ) | ( POINTER | PRIVATE | PROCEDURE | PROGRAM | PROPERTY | PROTECTED | PUBLIC | PUBLISHED | RAISE ) | ( READ | READONLY | RECORD | REFERENCE | REGISTER | REINTRODUCE | REMOVE | REPEAT | REQUIRES ) | ( RESIDENT | RESOURCESTRING | SAFECALL | SEALED | SET | SHL | SHR | STATIC | STDCALL | STORED ) | ( STRICT | STRING | THEN | THREADVAR | TO | TRY | TYPE | UNIT | UNSAFE | UNTIL | USES | VAR ) | ( VARARGS | VARIANT | VIRTUAL | WHILE | WITH | WRITE | WRITEONLY | XOR | FALSE | TRUE ) );
	public final DelphiParser.keywordsAsIdentifier_return keywordsAsIdentifier() throws RecognitionException {
		DelphiParser.keywordsAsIdentifier_return retval = new DelphiParser.keywordsAsIdentifier_return();
		retval.start = input.LT(1);
		int keywordsAsIdentifier_StartIndex = input.index();

		Object root_0 = null;

		Token set954=null;

		Object set954_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 171) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:719:30: ( ( ABSOLUTE | ABSTRACT | ADD | AND | ANSISTRING | ARRAY | AS | ASM | ASSEMBLER | ASSEMBLY ) | ( AT | AUTOMATED | BEGIN | BREAK | CASE | CDECL | CLASS | CONST | CONSTRUCTOR | CONTAINS ) | ( CONTINUE | DEFAULT | DEPRECATED | DESTRUCTOR | DISPID | DISPINTERFACE | DIV | DO | DOWNTO ) | ( DQ | DW | DYNAMIC | ELSE | END | EXCEPT | EXIT | EXPERIMENTAL | EXPORT | EXPORTS | EXTERNAL ) | ( FAR | FILE | FINAL | FINALIZATION | FINALLY | FOR | FORWARD | FUNCTION | GOTO | HELPER | IF ) | ( IMPLEMENTATION | IMPLEMENTS | IN | INDEX | INHERITED | INITIALIZATION | INLINE | INTERFACE ) | ( IS | LABEL | LIBRARY | LOCAL | MESSAGE | MOD | NAME | NEAR | NIL | NODEFAULT | NOT | OBJECT ) | ( OF | ON | OPERATOR | OR | OUT | OVERLOAD | OVERRIDE | PACKAGE | PACKED | PASCAL | PLATFORM ) | ( POINTER | PRIVATE | PROCEDURE | PROGRAM | PROPERTY | PROTECTED | PUBLIC | PUBLISHED | RAISE ) | ( READ | READONLY | RECORD | REFERENCE | REGISTER | REINTRODUCE | REMOVE | REPEAT | REQUIRES ) | ( RESIDENT | RESOURCESTRING | SAFECALL | SEALED | SET | SHL | SHR | STATIC | STDCALL | STORED ) | ( STRICT | STRING | THEN | THREADVAR | TO | TRY | TYPE | UNIT | UNSAFE | UNTIL | USES | VAR ) | ( VARARGS | VARIANT | VIRTUAL | WHILE | WITH | WRITE | WRITEONLY | XOR | FALSE | TRUE ) )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set954=input.LT(1);
			if ( (input.LA(1) >= ABSOLUTE && input.LA(1) <= ASSEMBLY)||input.LA(1)==AT||input.LA(1)==AUTOMATED||(input.LA(1) >= BEGIN && input.LA(1) <= CLASS)||(input.LA(1) >= CONST && input.LA(1) <= CONTINUE)||input.LA(1)==DEFAULT||(input.LA(1) >= DEPRECATED && input.LA(1) <= DO)||(input.LA(1) >= DOWNTO && input.LA(1) <= DYNAMIC)||(input.LA(1) >= ELSE && input.LA(1) <= END)||(input.LA(1) >= EXCEPT && input.LA(1) <= FUNCTION)||input.LA(1)==GOTO||input.LA(1)==HELPER||(input.LA(1) >= IF && input.LA(1) <= LABEL)||(input.LA(1) >= LIBRARY && input.LA(1) <= LOCAL)||input.LA(1)==MESSAGE||(input.LA(1) >= MOD && input.LA(1) <= NOT)||(input.LA(1) >= OBJECT && input.LA(1) <= PLATFORM)||input.LA(1)==POINTER||(input.LA(1) >= PRIVATE && input.LA(1) <= PUBLISHED)||input.LA(1)==RAISE||(input.LA(1) >= READ && input.LA(1) <= RESOURCESTRING)||(input.LA(1) >= SAFECALL && input.LA(1) <= SEALED)||(input.LA(1) >= SET && input.LA(1) <= SHR)||(input.LA(1) >= STATIC && input.LA(1) <= TYPE)||(input.LA(1) >= UNIT && input.LA(1) <= USES)||(input.LA(1) >= VAR && input.LA(1) <= WRITEONLY)||input.LA(1)==XOR ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set954));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 171, keywordsAsIdentifier_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "keywordsAsIdentifier"


	public static class identList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "identList"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:733:1: identList : ident ( ',' ident )* -> ^( ident ( ident )* ) ;
	public final DelphiParser.identList_return identList() throws RecognitionException {
		DelphiParser.identList_return retval = new DelphiParser.identList_return();
		retval.start = input.LT(1);
		int identList_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal956=null;
		ParserRuleReturnScope ident955 =null;
		ParserRuleReturnScope ident957 =null;

		Object char_literal956_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 172) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:733:30: ( ident ( ',' ident )* -> ^( ident ( ident )* ) )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:733:32: ident ( ',' ident )*
			{
			pushFollow(FOLLOW_ident_in_identList21474);
			ident955=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_ident.add(ident955.getTree());
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:733:38: ( ',' ident )*
			loop305:
			while (true) {
				int alt305=2;
				int LA305_0 = input.LA(1);
				if ( (LA305_0==COMMA) ) {
					alt305=1;
				}

				switch (alt305) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:733:39: ',' ident
					{
					char_literal956=(Token)match(input,COMMA,FOLLOW_COMMA_in_identList21477); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(char_literal956);

					pushFollow(FOLLOW_ident_in_identList21479);
					ident957=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident957.getTree());
					}
					break;

				default :
					break loop305;
				}
			}

			// AST REWRITE
			// elements: ident, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 733:51: -> ^( ident ( ident )* )
			{
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:733:54: ^( ident ( ident )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_ident.nextNode(), root_1);
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:733:62: ( ident )*
				while ( stream_ident.hasNext() ) {
					adaptor.addChild(root_1, stream_ident.nextTree());
				}
				stream_ident.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 172, identList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "identList"


	public static class identListFlat_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "identListFlat"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:735:1: identListFlat : ident ( ',' ident )* -> ident ( ident )* ;
	public final DelphiParser.identListFlat_return identListFlat() throws RecognitionException {
		DelphiParser.identListFlat_return retval = new DelphiParser.identListFlat_return();
		retval.start = input.LT(1);
		int identListFlat_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal959=null;
		ParserRuleReturnScope ident958 =null;
		ParserRuleReturnScope ident960 =null;

		Object char_literal959_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 173) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:735:30: ( ident ( ',' ident )* -> ident ( ident )* )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:735:32: ident ( ',' ident )*
			{
			pushFollow(FOLLOW_ident_in_identListFlat21544);
			ident958=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_ident.add(ident958.getTree());
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:735:38: ( ',' ident )*
			loop306:
			while (true) {
				int alt306=2;
				int LA306_0 = input.LA(1);
				if ( (LA306_0==COMMA) ) {
					alt306=1;
				}

				switch (alt306) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:735:39: ',' ident
					{
					char_literal959=(Token)match(input,COMMA,FOLLOW_COMMA_in_identListFlat21547); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(char_literal959);

					pushFollow(FOLLOW_ident_in_identListFlat21549);
					ident960=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident960.getTree());
					}
					break;

				default :
					break loop306;
				}
			}

			// AST REWRITE
			// elements: ident, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 735:51: -> ident ( ident )*
			{
				adaptor.addChild(root_0, stream_ident.nextTree());
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:735:60: ( ident )*
				while ( stream_ident.hasNext() ) {
					adaptor.addChild(root_0, stream_ident.nextTree());
				}
				stream_ident.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 173, identListFlat_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "identListFlat"


	public static class label_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "label"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:737:1: label : ( TkIdentifier | TkIntNum | TkHexNum | usedKeywordsAsNames );
	public final DelphiParser.label_return label() throws RecognitionException {
		DelphiParser.label_return retval = new DelphiParser.label_return();
		retval.start = input.LT(1);
		int label_StartIndex = input.index();

		Object root_0 = null;

		Token TkIdentifier961=null;
		Token TkIntNum962=null;
		Token TkHexNum963=null;
		ParserRuleReturnScope usedKeywordsAsNames964 =null;

		Object TkIdentifier961_tree=null;
		Object TkIntNum962_tree=null;
		Object TkHexNum963_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 174) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:737:30: ( TkIdentifier | TkIntNum | TkHexNum | usedKeywordsAsNames )
			int alt307=4;
			switch ( input.LA(1) ) {
			case TkIdentifier:
				{
				alt307=1;
				}
				break;
			case TkIntNum:
				{
				alt307=2;
				}
				break;
			case TkHexNum:
				{
				alt307=3;
				}
				break;
			case ABSOLUTE:
			case ADD:
			case ANSISTRING:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case DISPID:
			case DQ:
			case DW:
			case EXIT:
			case EXPORT:
			case FALSE:
			case FINAL:
			case HELPER:
			case IMPLEMENTS:
			case IN:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case POINTER:
			case PRIVATE:
			case PUBLIC:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STATIC:
			case STORED:
			case STRICT:
			case STRING:
			case TRUE:
			case UNSAFE:
			case VARARGS:
			case VARIANT:
			case VIRTUAL:
			case WRITE:
			case WRITEONLY:
				{
				alt307=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 307, 0, input);
				throw nvae;
			}
			switch (alt307) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:737:32: TkIdentifier
					{
					root_0 = (Object)adaptor.nil();


					TkIdentifier961=(Token)match(input,TkIdentifier,FOLLOW_TkIdentifier_in_label21623); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TkIdentifier961_tree = (Object)adaptor.create(TkIdentifier961);
					adaptor.addChild(root_0, TkIdentifier961_tree);
					}

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:738:32: TkIntNum
					{
					root_0 = (Object)adaptor.nil();


					TkIntNum962=(Token)match(input,TkIntNum,FOLLOW_TkIntNum_in_label21656); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TkIntNum962_tree = (Object)adaptor.create(TkIntNum962);
					adaptor.addChild(root_0, TkIntNum962_tree);
					}

					}
					break;
				case 3 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:739:32: TkHexNum
					{
					root_0 = (Object)adaptor.nil();


					TkHexNum963=(Token)match(input,TkHexNum,FOLLOW_TkHexNum_in_label21689); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TkHexNum963_tree = (Object)adaptor.create(TkHexNum963);
					adaptor.addChild(root_0, TkHexNum963_tree);
					}

					}
					break;
				case 4 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:740:32: usedKeywordsAsNames
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_usedKeywordsAsNames_in_label21722);
					usedKeywordsAsNames964=usedKeywordsAsNames();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, usedKeywordsAsNames964.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 174, label_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "label"


	public static class intRealNum_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "intRealNum"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:742:1: intRealNum : ( TkRealNum | intNum );
	public final DelphiParser.intRealNum_return intRealNum() throws RecognitionException {
		DelphiParser.intRealNum_return retval = new DelphiParser.intRealNum_return();
		retval.start = input.LT(1);
		int intRealNum_StartIndex = input.index();

		Object root_0 = null;

		Token TkRealNum965=null;
		ParserRuleReturnScope intNum966 =null;

		Object TkRealNum965_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 175) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:742:30: ( TkRealNum | intNum )
			int alt308=2;
			int LA308_0 = input.LA(1);
			if ( (LA308_0==TkRealNum) ) {
				alt308=1;
			}
			else if ( (LA308_0==TkHexNum||LA308_0==TkIntNum) ) {
				alt308=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 308, 0, input);
				throw nvae;
			}

			switch (alt308) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:742:32: TkRealNum
					{
					root_0 = (Object)adaptor.nil();


					TkRealNum965=(Token)match(input,TkRealNum,FOLLOW_TkRealNum_in_intRealNum21777); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TkRealNum965_tree = (Object)adaptor.create(TkRealNum965);
					adaptor.addChild(root_0, TkRealNum965_tree);
					}

					}
					break;
				case 2 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:743:32: intNum
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_intNum_in_intRealNum21810);
					intNum966=intNum();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, intNum966.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 175, intRealNum_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "intRealNum"


	public static class intNum_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "intNum"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:745:1: intNum : ( TkIntNum | TkHexNum );
	public final DelphiParser.intNum_return intNum() throws RecognitionException {
		DelphiParser.intNum_return retval = new DelphiParser.intNum_return();
		retval.start = input.LT(1);
		int intNum_StartIndex = input.index();

		Object root_0 = null;

		Token set967=null;

		Object set967_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 176) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:745:30: ( TkIntNum | TkHexNum )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set967=input.LT(1);
			if ( input.LA(1)==TkHexNum||input.LA(1)==TkIntNum ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set967));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 176, intNum_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "intNum"


	public static class namespaceName_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "namespaceName"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:748:1: namespaceName : ident ( '.' ident )* ;
	public final DelphiParser.namespaceName_return namespaceName() throws RecognitionException {
		DelphiParser.namespaceName_return retval = new DelphiParser.namespaceName_return();
		retval.start = input.LT(1);
		int namespaceName_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal969=null;
		ParserRuleReturnScope ident968 =null;
		ParserRuleReturnScope ident970 =null;

		Object char_literal969_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 177) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:748:30: ( ident ( '.' ident )* )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:748:32: ident ( '.' ident )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_ident_in_namespaceName21954);
			ident968=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident968.getTree());

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:748:38: ( '.' ident )*
			loop309:
			while (true) {
				int alt309=2;
				int LA309_0 = input.LA(1);
				if ( (LA309_0==DOT) ) {
					alt309=1;
				}

				switch (alt309) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:748:39: '.' ident
					{
					char_literal969=(Token)match(input,DOT,FOLLOW_DOT_in_namespaceName21957); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal969_tree = (Object)adaptor.create(char_literal969);
					adaptor.addChild(root_0, char_literal969_tree);
					}

					pushFollow(FOLLOW_ident_in_namespaceName21959);
					ident970=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident970.getTree());

					}
					break;

				default :
					break loop309;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 177, namespaceName_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "namespaceName"


	public static class qualifiedIdent_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "qualifiedIdent"
	// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:750:1: qualifiedIdent : ( ident '.' )* ident ;
	public final DelphiParser.qualifiedIdent_return qualifiedIdent() throws RecognitionException {
		DelphiParser.qualifiedIdent_return retval = new DelphiParser.qualifiedIdent_return();
		retval.start = input.LT(1);
		int qualifiedIdent_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal972=null;
		ParserRuleReturnScope ident971 =null;
		ParserRuleReturnScope ident973 =null;

		Object char_literal972_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 178) ) { return retval; }

			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:750:30: ( ( ident '.' )* ident )
			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:750:33: ( ident '.' )* ident
			{
			root_0 = (Object)adaptor.nil();


			// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:750:33: ( ident '.' )*
			loop310:
			while (true) {
				int alt310=2;
				switch ( input.LA(1) ) {
				case TkIdentifier:
					{
					int LA310_1 = input.LA(2);
					if ( (LA310_1==DOT) ) {
						int LA310_5 = input.LA(3);
						if ( (synpred656_Delphi()) ) {
							alt310=1;
						}

					}

					}
					break;
				case 198:
					{
					int LA310_2 = input.LA(2);
					if ( (LA310_2==TkIdentifier) ) {
						int LA310_6 = input.LA(3);
						if ( (LA310_6==DOT) ) {
							int LA310_10 = input.LA(4);
							if ( (synpred656_Delphi()) ) {
								alt310=1;
							}

						}

					}
					else if ( ((LA310_2 >= ABSOLUTE && LA310_2 <= ASSEMBLY)||LA310_2==AT||LA310_2==AUTOMATED||(LA310_2 >= BEGIN && LA310_2 <= CLASS)||(LA310_2 >= CONST && LA310_2 <= CONTINUE)||LA310_2==DEFAULT||(LA310_2 >= DEPRECATED && LA310_2 <= DO)||(LA310_2 >= DOWNTO && LA310_2 <= DYNAMIC)||(LA310_2 >= ELSE && LA310_2 <= END)||(LA310_2 >= EXCEPT && LA310_2 <= FUNCTION)||LA310_2==GOTO||LA310_2==HELPER||(LA310_2 >= IF && LA310_2 <= LABEL)||(LA310_2 >= LIBRARY && LA310_2 <= LOCAL)||LA310_2==MESSAGE||(LA310_2 >= MOD && LA310_2 <= NOT)||(LA310_2 >= OBJECT && LA310_2 <= PLATFORM)||LA310_2==POINTER||(LA310_2 >= PRIVATE && LA310_2 <= PUBLISHED)||LA310_2==RAISE||(LA310_2 >= READ && LA310_2 <= RESOURCESTRING)||(LA310_2 >= SAFECALL && LA310_2 <= SEALED)||(LA310_2 >= SET && LA310_2 <= SHR)||(LA310_2 >= STATIC && LA310_2 <= TYPE)||(LA310_2 >= UNIT && LA310_2 <= USES)||(LA310_2 >= VAR && LA310_2 <= WRITEONLY)||LA310_2==XOR) ) {
						int LA310_7 = input.LA(3);
						if ( (LA310_7==DOT) ) {
							int LA310_11 = input.LA(4);
							if ( (synpred656_Delphi()) ) {
								alt310=1;
							}

						}

					}

					}
					break;
				case ABSOLUTE:
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DISPID:
				case DQ:
				case DW:
				case EXIT:
				case EXPORT:
				case FALSE:
				case FINAL:
				case HELPER:
				case IMPLEMENTS:
				case IN:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case PRIVATE:
				case PUBLIC:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STATIC:
				case STORED:
				case STRICT:
				case STRING:
				case TRUE:
				case UNSAFE:
				case VARARGS:
				case VARIANT:
				case VIRTUAL:
				case WRITE:
				case WRITEONLY:
					{
					int LA310_3 = input.LA(2);
					if ( (LA310_3==DOT) ) {
						int LA310_8 = input.LA(3);
						if ( (synpred656_Delphi()) ) {
							alt310=1;
						}

					}

					}
					break;
				}
				switch (alt310) {
				case 1 :
					// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:750:34: ident '.'
					{
					pushFollow(FOLLOW_ident_in_qualifiedIdent22014);
					ident971=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident971.getTree());

					char_literal972=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedIdent22016); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal972_tree = (Object)adaptor.create(char_literal972);
					adaptor.addChild(root_0, char_literal972_tree);
					}

					}
					break;

				default :
					break loop310;
				}
			}

			pushFollow(FOLLOW_ident_in_qualifiedIdent22021);
			ident973=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident973.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 178, qualifiedIdent_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "qualifiedIdent"

	// $ANTLR start synpred23_Delphi
	public final void synpred23_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:135:33: ( declSection )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:135:33: declSection
		{
		pushFollow(FOLLOW_declSection_in_synpred23_Delphi1593);
		declSection();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred23_Delphi

	// $ANTLR start synpred24_Delphi
	public final void synpred24_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:135:48: ( blockBody )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:135:48: blockBody
		{
		pushFollow(FOLLOW_blockBody_in_synpred24_Delphi1598);
		blockBody();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred24_Delphi

	// $ANTLR start synpred30_Delphi
	public final void synpred30_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:144:32: ( methodDecl )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:144:32: methodDecl
		{
		pushFollow(FOLLOW_methodDecl_in_synpred30_Delphi1875);
		methodDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred30_Delphi

	// $ANTLR start synpred31_Delphi
	public final void synpred31_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:145:32: ( procDecl )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:145:32: procDecl
		{
		pushFollow(FOLLOW_procDecl_in_synpred31_Delphi1908);
		procDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred31_Delphi

	// $ANTLR start synpred35_Delphi
	public final void synpred35_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:151:32: ( exportedProcHeading )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:151:32: exportedProcHeading
		{
		pushFollow(FOLLOW_exportedProcHeading_in_synpred35_Delphi2092);
		exportedProcHeading();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred35_Delphi

	// $ANTLR start synpred37_Delphi
	public final void synpred37_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:153:32: ( procDecl )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:153:32: procDecl
		{
		pushFollow(FOLLOW_procDecl_in_synpred37_Delphi2158);
		procDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred37_Delphi

	// $ANTLR start synpred39_Delphi
	public final void synpred39_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:158:42: ( constDeclaration )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:158:42: constDeclaration
		{
		pushFollow(FOLLOW_constDeclaration_in_synpred39_Delphi2307);
		constDeclaration();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred39_Delphi

	// $ANTLR start synpred41_Delphi
	public final void synpred41_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:33: ( customAttribute )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred41_Delphi2462);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred41_Delphi

	// $ANTLR start synpred44_Delphi
	public final void synpred44_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:165:56: ( typeDeclaration )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:165:56: typeDeclaration
		{
		pushFollow(FOLLOW_typeDeclaration_in_synpred44_Delphi2556);
		typeDeclaration();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred44_Delphi

	// $ANTLR start synpred45_Delphi
	public final void synpred45_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:33: ( customAttribute )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred45_Delphi2622);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred45_Delphi

	// $ANTLR start synpred47_Delphi
	public final void synpred47_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:55: ( varDeclaration )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:55: varDeclaration
		{
		pushFollow(FOLLOW_varDeclaration_in_synpred47_Delphi2719);
		varDeclaration();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred47_Delphi

	// $ANTLR start synpred49_Delphi
	public final void synpred49_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:33: ( customAttribute )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred49_Delphi2879);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred49_Delphi

	// $ANTLR start synpred53_Delphi
	public final void synpred53_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:177:32: ( 'var' ident ( ':' typeDecl )? ':=' expression )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:177:32: 'var' ident ( ':' typeDecl )? ':=' expression
		{
		match(input,VAR,FOLLOW_VAR_in_synpred53_Delphi2963); if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred53_Delphi2965);
		ident();
		state._fsp--;
		if (state.failed) return;

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:177:44: ( ':' typeDecl )?
		int alt312=2;
		int LA312_0 = input.LA(1);
		if ( (LA312_0==COLON) ) {
			alt312=1;
		}
		switch (alt312) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:177:45: ':' typeDecl
				{
				match(input,COLON,FOLLOW_COLON_in_synpred53_Delphi2968); if (state.failed) return;

				pushFollow(FOLLOW_typeDecl_in_synpred53_Delphi2970);
				typeDecl();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred53_Delphi2974); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred53_Delphi2976);
		expression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred53_Delphi

	// $ANTLR start synpred54_Delphi
	public final void synpred54_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:180:32: ( 'absolute' qualifiedIdent )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:180:32: 'absolute' qualifiedIdent
		{
		match(input,ABSOLUTE,FOLLOW_ABSOLUTE_in_synpred54_Delphi3070); if (state.failed) return;

		pushFollow(FOLLOW_qualifiedIdent_in_synpred54_Delphi3072);
		qualifiedIdent();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred54_Delphi

	// $ANTLR start synpred55_Delphi
	public final void synpred55_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:181:32: ( 'absolute' constExpression )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:181:32: 'absolute' constExpression
		{
		match(input,ABSOLUTE,FOLLOW_ABSOLUTE_in_synpred55_Delphi3105); if (state.failed) return;

		pushFollow(FOLLOW_constExpression_in_synpred55_Delphi3107);
		constExpression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred55_Delphi

	// $ANTLR start synpred62_Delphi
	public final void synpred62_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:191:32: ( strucType )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:191:32: strucType
		{
		pushFollow(FOLLOW_strucType_in_synpred62_Delphi3352);
		strucType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred62_Delphi

	// $ANTLR start synpred63_Delphi
	public final void synpred63_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:192:32: ( pointerType )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:192:32: pointerType
		{
		pushFollow(FOLLOW_pointerType_in_synpred63_Delphi3385);
		pointerType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred63_Delphi

	// $ANTLR start synpred64_Delphi
	public final void synpred64_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:193:32: ( stringType )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:193:32: stringType
		{
		pushFollow(FOLLOW_stringType_in_synpred64_Delphi3418);
		stringType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred64_Delphi

	// $ANTLR start synpred65_Delphi
	public final void synpred65_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:194:32: ( procedureType )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:194:32: procedureType
		{
		pushFollow(FOLLOW_procedureType_in_synpred65_Delphi3451);
		procedureType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred65_Delphi

	// $ANTLR start synpred66_Delphi
	public final void synpred66_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:195:32: ( variantType )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:195:32: variantType
		{
		pushFollow(FOLLOW_variantType_in_synpred66_Delphi3484);
		variantType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred66_Delphi

	// $ANTLR start synpred67_Delphi
	public final void synpred67_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:32: ( subRangeType )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:32: subRangeType
		{
		pushFollow(FOLLOW_subRangeType_in_synpred67_Delphi3517);
		subRangeType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred67_Delphi

	// $ANTLR start synpred69_Delphi
	public final void synpred69_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:50: ( genericPostfix )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:50: genericPostfix
		{
		pushFollow(FOLLOW_genericPostfix_in_synpred69_Delphi3558);
		genericPostfix();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred69_Delphi

	// $ANTLR start synpred70_Delphi
	public final void synpred70_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:68: ( '.' typeDecl )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:68: '.' typeDecl
		{
		match(input,DOT,FOLLOW_DOT_in_synpred70_Delphi3563); if (state.failed) return;

		pushFollow(FOLLOW_typeDecl_in_synpred70_Delphi3565);
		typeDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred70_Delphi

	// $ANTLR start synpred71_Delphi
	public final void synpred71_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:84: ( paranthesePostfix )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:84: paranthesePostfix
		{
		pushFollow(FOLLOW_paranthesePostfix_in_synpred71_Delphi3570);
		paranthesePostfix();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred71_Delphi

	// $ANTLR start synpred72_Delphi
	public final void synpred72_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:32: ( ( 'type' )? typeId ( genericPostfix )? ( '.' typeDecl )* ( paranthesePostfix )? )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:32: ( 'type' )? typeId ( genericPostfix )? ( '.' typeDecl )* ( paranthesePostfix )?
		{
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:32: ( 'type' )?
		int alt314=2;
		int LA314_0 = input.LA(1);
		if ( (LA314_0==TYPE) ) {
			alt314=1;
		}
		switch (alt314) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:33: 'type'
				{
				match(input,TYPE,FOLLOW_TYPE_in_synpred72_Delphi3551); if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_typeId_in_synpred72_Delphi3555);
		typeId();
		state._fsp--;
		if (state.failed) return;

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:49: ( genericPostfix )?
		int alt315=2;
		int LA315_0 = input.LA(1);
		if ( (LA315_0==LT) ) {
			alt315=1;
		}
		switch (alt315) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:50: genericPostfix
				{
				pushFollow(FOLLOW_genericPostfix_in_synpred72_Delphi3558);
				genericPostfix();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:67: ( '.' typeDecl )*
		loop316:
		while (true) {
			int alt316=2;
			int LA316_0 = input.LA(1);
			if ( (LA316_0==DOT) ) {
				alt316=1;
			}

			switch (alt316) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:68: '.' typeDecl
				{
				match(input,DOT,FOLLOW_DOT_in_synpred72_Delphi3563); if (state.failed) return;

				pushFollow(FOLLOW_typeDecl_in_synpred72_Delphi3565);
				typeDecl();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop316;
			}
		}

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:83: ( paranthesePostfix )?
		int alt317=2;
		int LA317_0 = input.LA(1);
		if ( (LA317_0==LPAREN) ) {
			alt317=1;
		}
		switch (alt317) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:197:84: paranthesePostfix
				{
				pushFollow(FOLLOW_paranthesePostfix_in_synpred72_Delphi3570);
				paranthesePostfix();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred72_Delphi

	// $ANTLR start synpred83_Delphi
	public final void synpred83_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:222:40: ( 'of' typeDecl )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:222:40: 'of' typeDecl
		{
		match(input,OF,FOLLOW_OF_in_synpred83_Delphi4323); if (state.failed) return;

		pushFollow(FOLLOW_typeDecl_in_synpred83_Delphi4325);
		typeDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred83_Delphi

	// $ANTLR start synpred85_Delphi
	public final void synpred85_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:227:42: ( '[' expression ']' )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:227:42: '[' expression ']'
		{
		match(input,LBRACK,FOLLOW_LBRACK_in_synpred85_Delphi4474); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred85_Delphi4476);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,RBRACK,FOLLOW_RBRACK_in_synpred85_Delphi4478); if (state.failed) return;

		}

	}
	// $ANTLR end synpred85_Delphi

	// $ANTLR start synpred88_Delphi
	public final void synpred88_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:228:54: ( codePageNumber )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:228:54: codePageNumber
		{
		pushFollow(FOLLOW_codePageNumber_in_synpred88_Delphi4525);
		codePageNumber();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred88_Delphi

	// $ANTLR start synpred89_Delphi
	public final void synpred89_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:232:32: ( methodType )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:232:32: methodType
		{
		pushFollow(FOLLOW_methodType_in_synpred89_Delphi4634);
		methodType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred89_Delphi

	// $ANTLR start synpred90_Delphi
	public final void synpred90_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:233:32: ( simpleProcedureType )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:233:32: simpleProcedureType
		{
		pushFollow(FOLLOW_simpleProcedureType_in_synpred90_Delphi4667);
		simpleProcedureType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred90_Delphi

	// $ANTLR start synpred92_Delphi
	public final void synpred92_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:238:55: ( ( ';' )? callConventionNoSemi )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:238:55: ( ';' )? callConventionNoSemi
		{
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:238:55: ( ';' )?
		int alt323=2;
		int LA323_0 = input.LA(1);
		if ( (LA323_0==SEMI) ) {
			alt323=1;
		}
		switch (alt323) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:238:56: ';'
				{
				match(input,SEMI,FOLLOW_SEMI_in_synpred92_Delphi4810); if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_callConventionNoSemi_in_synpred92_Delphi4814);
		callConventionNoSemi();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred92_Delphi

	// $ANTLR start synpred94_Delphi
	public final void synpred94_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:242:74: ( customAttribute )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:242:74: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred94_Delphi4922);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred94_Delphi

	// $ANTLR start synpred96_Delphi
	public final void synpred96_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:243:45: ( formalParameterSection )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:243:45: formalParameterSection
		{
		pushFollow(FOLLOW_formalParameterSection_in_synpred96_Delphi4977);
		formalParameterSection();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred96_Delphi

	// $ANTLR start synpred110_Delphi
	public final void synpred110_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:277:32: ( classTypeTypeDecl )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:277:32: classTypeTypeDecl
		{
		pushFollow(FOLLOW_classTypeTypeDecl_in_synpred110_Delphi5839);
		classTypeTypeDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred110_Delphi

	// $ANTLR start synpred111_Delphi
	public final void synpred111_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:278:32: ( classHelperDecl )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:278:32: classHelperDecl
		{
		pushFollow(FOLLOW_classHelperDecl_in_synpred111_Delphi5872);
		classHelperDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred111_Delphi

	// $ANTLR start synpred112_Delphi
	public final void synpred112_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:279:32: ( classTypeDecl )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:279:32: classTypeDecl
		{
		pushFollow(FOLLOW_classTypeDecl_in_synpred112_Delphi5913);
		classTypeDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred112_Delphi

	// $ANTLR start synpred115_Delphi
	public final void synpred115_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:32: ( recordDecl )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:32: recordDecl
		{
		pushFollow(FOLLOW_recordDecl_in_synpred115_Delphi6036);
		recordDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred115_Delphi

	// $ANTLR start synpred119_Delphi
	public final void synpred119_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:287:32: ( 'class' ( classState )? ( classParent )? ( classItem )* 'end' )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:287:32: 'class' ( classState )? ( classParent )? ( classItem )* 'end'
		{
		match(input,CLASS,FOLLOW_CLASS_in_synpred119_Delphi6197); if (state.failed) return;

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:287:40: ( classState )?
		int alt328=2;
		int LA328_0 = input.LA(1);
		if ( (LA328_0==ABSTRACT||LA328_0==SEALED) ) {
			alt328=1;
		}
		switch (alt328) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:287:41: classState
				{
				pushFollow(FOLLOW_classState_in_synpred119_Delphi6200);
				classState();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:287:54: ( classParent )?
		int alt329=2;
		int LA329_0 = input.LA(1);
		if ( (LA329_0==LPAREN) ) {
			alt329=1;
		}
		switch (alt329) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:287:55: classParent
				{
				pushFollow(FOLLOW_classParent_in_synpred119_Delphi6205);
				classParent();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:287:69: ( classItem )*
		loop330:
		while (true) {
			int alt330=2;
			int LA330_0 = input.LA(1);
			if ( (LA330_0==ABSOLUTE||LA330_0==ADD||LA330_0==ANSISTRING||LA330_0==AT||LA330_0==AUTOMATED||LA330_0==BREAK||LA330_0==CLASS||(LA330_0 >= CONST && LA330_0 <= CONTINUE)||LA330_0==DEFAULT||(LA330_0 >= DESTRUCTOR && LA330_0 <= DISPID)||(LA330_0 >= DQ && LA330_0 <= DW)||LA330_0==EXIT||LA330_0==EXPORT||LA330_0==FALSE||LA330_0==FINAL||LA330_0==FUNCTION||LA330_0==HELPER||(LA330_0 >= IMPLEMENTS && LA330_0 <= INDEX)||LA330_0==LBRACK||LA330_0==LOCAL||LA330_0==MESSAGE||LA330_0==NAME||LA330_0==OBJECT||LA330_0==OPERATOR||LA330_0==OUT||LA330_0==POINTER||(LA330_0 >= PRIVATE && LA330_0 <= PROCEDURE)||(LA330_0 >= PROPERTY && LA330_0 <= PUBLISHED)||(LA330_0 >= READ && LA330_0 <= READONLY)||(LA330_0 >= REFERENCE && LA330_0 <= REGISTER)||LA330_0==REMOVE||LA330_0==RESOURCESTRING||LA330_0==STATIC||(LA330_0 >= STORED && LA330_0 <= STRING)||LA330_0==THREADVAR||LA330_0==TRUE||LA330_0==TYPE||LA330_0==TkIdentifier||LA330_0==UNSAFE||(LA330_0 >= VAR && LA330_0 <= VIRTUAL)||(LA330_0 >= WRITE && LA330_0 <= WRITEONLY)||LA330_0==198) ) {
				alt330=1;
			}

			switch (alt330) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:287:70: classItem
				{
				pushFollow(FOLLOW_classItem_in_synpred119_Delphi6210);
				classItem();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop330;
			}
		}

		match(input,END,FOLLOW_END_in_synpred119_Delphi6214); if (state.failed) return;

		}

	}
	// $ANTLR end synpred119_Delphi

	// $ANTLR start synpred121_Delphi
	public final void synpred121_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:288:55: ( classParent )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:288:55: classParent
		{
		pushFollow(FOLLOW_classParent_in_synpred121_Delphi6273);
		classParent();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred121_Delphi

	// $ANTLR start synpred124_Delphi
	public final void synpred124_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:295:32: ( visibility )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:295:32: visibility
		{
		pushFollow(FOLLOW_visibility_in_synpred124_Delphi6510);
		visibility();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred124_Delphi

	// $ANTLR start synpred125_Delphi
	public final void synpred125_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:296:32: ( classMethod )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:296:32: classMethod
		{
		pushFollow(FOLLOW_classMethod_in_synpred125_Delphi6543);
		classMethod();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred125_Delphi

	// $ANTLR start synpred126_Delphi
	public final void synpred126_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:297:32: ( classField )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:297:32: classField
		{
		pushFollow(FOLLOW_classField_in_synpred126_Delphi6576);
		classField();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred126_Delphi

	// $ANTLR start synpred127_Delphi
	public final void synpred127_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:298:32: ( classProperty )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:298:32: classProperty
		{
		pushFollow(FOLLOW_classProperty_in_synpred127_Delphi6609);
		classProperty();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred127_Delphi

	// $ANTLR start synpred134_Delphi
	public final void synpred134_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:306:32: ( classMethod )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:306:32: classMethod
		{
		pushFollow(FOLLOW_classMethod_in_synpred134_Delphi6879);
		classMethod();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred134_Delphi

	// $ANTLR start synpred135_Delphi
	public final void synpred135_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:307:32: ( classProperty )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:307:32: classProperty
		{
		pushFollow(FOLLOW_classProperty_in_synpred135_Delphi6912);
		classProperty();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred135_Delphi

	// $ANTLR start synpred142_Delphi
	public final void synpred142_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:312:32: ( interfaceKey ( classParent )? ( interfaceGuid )? ( interfaceItem )* 'end' )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:312:32: interfaceKey ( classParent )? ( interfaceGuid )? ( interfaceItem )* 'end'
		{
		pushFollow(FOLLOW_interfaceKey_in_synpred142_Delphi7064);
		interfaceKey();
		state._fsp--;
		if (state.failed) return;

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:312:45: ( classParent )?
		int alt331=2;
		int LA331_0 = input.LA(1);
		if ( (LA331_0==LPAREN) ) {
			alt331=1;
		}
		switch (alt331) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:312:46: classParent
				{
				pushFollow(FOLLOW_classParent_in_synpred142_Delphi7067);
				classParent();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:312:60: ( interfaceGuid )?
		int alt332=2;
		int LA332_0 = input.LA(1);
		if ( (LA332_0==LBRACK) ) {
			int LA332_1 = input.LA(2);
			if ( (LA332_1==QuotedString) ) {
				alt332=1;
			}
		}
		switch (alt332) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:312:61: interfaceGuid
				{
				pushFollow(FOLLOW_interfaceGuid_in_synpred142_Delphi7072);
				interfaceGuid();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:312:77: ( interfaceItem )*
		loop333:
		while (true) {
			int alt333=2;
			int LA333_0 = input.LA(1);
			if ( (LA333_0==CLASS||LA333_0==CONSTRUCTOR||LA333_0==DESTRUCTOR||LA333_0==FUNCTION||LA333_0==LBRACK||LA333_0==OPERATOR||LA333_0==PROCEDURE||LA333_0==PROPERTY) ) {
				alt333=1;
			}

			switch (alt333) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:312:78: interfaceItem
				{
				pushFollow(FOLLOW_interfaceItem_in_synpred142_Delphi7077);
				interfaceItem();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop333;
			}
		}

		match(input,END,FOLLOW_END_in_synpred142_Delphi7081); if (state.failed) return;

		}

	}
	// $ANTLR end synpred142_Delphi

	// $ANTLR start synpred143_Delphi
	public final void synpred143_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:314:46: ( classParent )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:314:46: classParent
		{
		pushFollow(FOLLOW_classParent_in_synpred143_Delphi7175);
		classParent();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred143_Delphi

	// $ANTLR start synpred145_Delphi
	public final void synpred145_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:322:32: ( classMethod )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:322:32: classMethod
		{
		pushFollow(FOLLOW_classMethod_in_synpred145_Delphi7418);
		classMethod();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred145_Delphi

	// $ANTLR start synpred146_Delphi
	public final void synpred146_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:323:33: ( 'class' )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:323:33: 'class'
		{
		match(input,CLASS,FOLLOW_CLASS_in_synpred146_Delphi7452); if (state.failed) return;

		}

	}
	// $ANTLR end synpred146_Delphi

	// $ANTLR start synpred149_Delphi
	public final void synpred149_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:327:32: ( visibility )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:327:32: visibility
		{
		pushFollow(FOLLOW_visibility_in_synpred149_Delphi7592);
		visibility();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred149_Delphi

	// $ANTLR start synpred150_Delphi
	public final void synpred150_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:328:32: ( classMethod )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:328:32: classMethod
		{
		pushFollow(FOLLOW_classMethod_in_synpred150_Delphi7625);
		classMethod();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred150_Delphi

	// $ANTLR start synpred151_Delphi
	public final void synpred151_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:331:32: ( simpleRecord )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:331:32: simpleRecord
		{
		pushFollow(FOLLOW_simpleRecord_in_synpred151_Delphi7713);
		simpleRecord();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred151_Delphi

	// $ANTLR start synpred152_Delphi
	public final void synpred152_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:334:42: ( recordField )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:334:42: recordField
		{
		pushFollow(FOLLOW_recordField_in_synpred152_Delphi7802);
		recordField();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred152_Delphi

	// $ANTLR start synpred154_Delphi
	public final void synpred154_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:336:42: ( recordField )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:336:42: recordField
		{
		pushFollow(FOLLOW_recordField_in_synpred154_Delphi7880);
		recordField();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred154_Delphi

	// $ANTLR start synpred156_Delphi
	public final void synpred156_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:338:32: ( visibility )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:338:32: visibility
		{
		pushFollow(FOLLOW_visibility_in_synpred156_Delphi7962);
		visibility();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred156_Delphi

	// $ANTLR start synpred157_Delphi
	public final void synpred157_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:339:32: ( classMethod )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:339:32: classMethod
		{
		pushFollow(FOLLOW_classMethod_in_synpred157_Delphi8000);
		classMethod();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred157_Delphi

	// $ANTLR start synpred158_Delphi
	public final void synpred158_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:340:32: ( classProperty )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:340:32: classProperty
		{
		pushFollow(FOLLOW_classProperty_in_synpred158_Delphi8033);
		classProperty();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred158_Delphi

	// $ANTLR start synpred161_Delphi
	public final void synpred161_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:343:32: ( recordField )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:343:32: recordField
		{
		pushFollow(FOLLOW_recordField_in_synpred161_Delphi8132);
		recordField();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred161_Delphi

	// $ANTLR start synpred176_Delphi
	public final void synpred176_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:360:32: ( classMethod )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:360:32: classMethod
		{
		pushFollow(FOLLOW_classMethod_in_synpred176_Delphi8703);
		classMethod();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred176_Delphi

	// $ANTLR start synpred177_Delphi
	public final void synpred177_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:33: ( customAttribute )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred177_Delphi8791);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred177_Delphi

	// $ANTLR start synpred182_Delphi
	public final void synpred182_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:32: ( ( customAttribute )? ( 'class' )? methodKey ident ( genericDefinition )? ( formalParameterSection )? ';' ( methodDirective )* )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:32: ( customAttribute )? ( 'class' )? methodKey ident ( genericDefinition )? ( formalParameterSection )? ';' ( methodDirective )*
		{
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:32: ( customAttribute )?
		int alt334=2;
		switch ( input.LA(1) ) {
			case LBRACK:
				{
				alt334=1;
				}
				break;
			case CLASS:
				{
				int LA334_2 = input.LA(2);
				if ( (synpred177_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case PROCEDURE:
				{
				int LA334_3 = input.LA(2);
				if ( (synpred177_Delphi()) ) {
					alt334=1;
				}
				}
				break;
		}
		switch (alt334) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:33: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred182_Delphi8791);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:51: ( 'class' )?
		int alt335=2;
		int LA335_0 = input.LA(1);
		if ( (LA335_0==CLASS) ) {
			alt335=1;
		}
		switch (alt335) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:52: 'class'
				{
				match(input,CLASS,FOLLOW_CLASS_in_synpred182_Delphi8796); if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_methodKey_in_synpred182_Delphi8800);
		methodKey();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred182_Delphi8802);
		ident();
		state._fsp--;
		if (state.failed) return;

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:78: ( genericDefinition )?
		int alt336=2;
		int LA336_0 = input.LA(1);
		if ( (LA336_0==LT) ) {
			alt336=1;
		}
		switch (alt336) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:79: genericDefinition
				{
				pushFollow(FOLLOW_genericDefinition_in_synpred182_Delphi8805);
				genericDefinition();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:99: ( formalParameterSection )?
		int alt337=2;
		int LA337_0 = input.LA(1);
		if ( (LA337_0==LPAREN) ) {
			alt337=1;
		}
		switch (alt337) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:100: formalParameterSection
				{
				pushFollow(FOLLOW_formalParameterSection_in_synpred182_Delphi8810);
				formalParameterSection();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		match(input,SEMI,FOLLOW_SEMI_in_synpred182_Delphi8814); if (state.failed) return;

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:129: ( methodDirective )*
		loop338:
		while (true) {
			int alt338=2;
			int LA338_0 = input.LA(1);
			if ( (LA338_0==ABSTRACT||LA338_0==ASSEMBLER||LA338_0==CDECL||LA338_0==DEPRECATED||LA338_0==DISPID||LA338_0==DYNAMIC||(LA338_0 >= EXPERIMENTAL && LA338_0 <= EXPORT)||LA338_0==EXTERNAL||LA338_0==FAR||LA338_0==FINAL||LA338_0==INLINE||(LA338_0 >= LIBRARY && LA338_0 <= LOCAL)||LA338_0==MESSAGE||LA338_0==NEAR||(LA338_0 >= OVERLOAD && LA338_0 <= OVERRIDE)||(LA338_0 >= PASCAL && LA338_0 <= PLATFORM)||(LA338_0 >= REGISTER && LA338_0 <= REINTRODUCE)||LA338_0==SAFECALL||(LA338_0 >= STATIC && LA338_0 <= STDCALL)||LA338_0==VARARGS||LA338_0==VIRTUAL) ) {
				alt338=1;
			}

			switch (alt338) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:130: methodDirective
				{
				pushFollow(FOLLOW_methodDirective_in_synpred182_Delphi8817);
				methodDirective();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop338;
			}
		}

		}

	}
	// $ANTLR end synpred182_Delphi

	// $ANTLR start synpred183_Delphi
	public final void synpred183_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:33: ( customAttribute )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred183_Delphi8925);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred183_Delphi

	// $ANTLR start synpred187_Delphi
	public final void synpred187_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:131: ( customAttribute )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:131: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred187_Delphi8951);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred187_Delphi

	// $ANTLR start synpred189_Delphi
	public final void synpred189_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:32: ( ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( methodDirective )* )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:32: ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( methodDirective )*
		{
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:32: ( customAttribute )?
		int alt339=2;
		switch ( input.LA(1) ) {
			case LBRACK:
				{
				alt339=1;
				}
				break;
			case CLASS:
				{
				int LA339_2 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt339=1;
				}
				}
				break;
			case FUNCTION:
				{
				int LA339_3 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt339=1;
				}
				}
				break;
		}
		switch (alt339) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:33: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred189_Delphi8925);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:51: ( 'class' )?
		int alt340=2;
		int LA340_0 = input.LA(1);
		if ( (LA340_0==CLASS) ) {
			alt340=1;
		}
		switch (alt340) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:52: 'class'
				{
				match(input,CLASS,FOLLOW_CLASS_in_synpred189_Delphi8930); if (state.failed) return;

				}
				break;

		}

		match(input,FUNCTION,FOLLOW_FUNCTION_in_synpred189_Delphi8934); if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred189_Delphi8936);
		ident();
		state._fsp--;
		if (state.failed) return;

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:79: ( genericDefinition )?
		int alt341=2;
		int LA341_0 = input.LA(1);
		if ( (LA341_0==LT) ) {
			alt341=1;
		}
		switch (alt341) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:80: genericDefinition
				{
				pushFollow(FOLLOW_genericDefinition_in_synpred189_Delphi8939);
				genericDefinition();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:100: ( formalParameterSection )?
		int alt342=2;
		int LA342_0 = input.LA(1);
		if ( (LA342_0==LPAREN) ) {
			alt342=1;
		}
		switch (alt342) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:101: formalParameterSection
				{
				pushFollow(FOLLOW_formalParameterSection_in_synpred189_Delphi8944);
				formalParameterSection();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		match(input,COLON,FOLLOW_COLON_in_synpred189_Delphi8948); if (state.failed) return;

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:130: ( customAttribute )?
		int alt343=2;
		switch ( input.LA(1) ) {
			case LBRACK:
				{
				int LA343_1 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case PACKED:
				{
				int LA343_2 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case ARRAY:
				{
				int LA343_3 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case SET:
				{
				int LA343_4 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case FILE:
				{
				int LA343_5 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case CLASS:
				{
				int LA343_6 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case DISPINTERFACE:
			case INTERFACE:
				{
				int LA343_7 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case OBJECT:
				{
				int LA343_8 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case RECORD:
				{
				int LA343_9 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case POINTER2:
				{
				int LA343_10 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case POINTER:
				{
				int LA343_11 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case STRING:
				{
				int LA343_12 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case TYPE:
				{
				int LA343_13 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case ANSISTRING:
				{
				int LA343_14 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case FUNCTION:
				{
				int LA343_15 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case PROCEDURE:
				{
				int LA343_16 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case REFERENCE:
				{
				int LA343_17 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case VARIANT:
				{
				int LA343_18 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case LPAREN:
				{
				int LA343_19 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case AT2:
				{
				int LA343_20 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case 199:
				{
				int LA343_21 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case NOT:
				{
				int LA343_22 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case PLUS:
				{
				int LA343_23 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case MINUS:
				{
				int LA343_24 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case TkRealNum:
				{
				int LA343_25 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case TkHexNum:
			case TkIntNum:
				{
				int LA343_26 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case TRUE:
				{
				int LA343_27 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case FALSE:
				{
				int LA343_28 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case NIL:
				{
				int LA343_29 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case 210:
				{
				int LA343_30 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case ControlChar:
				{
				int LA343_31 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case QuotedString:
				{
				int LA343_32 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case 203:
				{
				int LA343_33 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case INHERITED:
				{
				int LA343_34 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case TkIdentifier:
				{
				int LA343_35 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case 198:
				{
				int LA343_36 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case IN:
				{
				int LA343_37 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case 209:
				{
				int LA343_38 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case DOT:
				{
				int LA343_39 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case LT:
				{
				int LA343_40 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case AND:
			case AS:
			case DIV:
			case MOD:
			case OR:
			case SHL:
			case SHR:
			case SLASH:
			case STAR:
			case XOR:
			case 200:
			case 201:
			case 202:
			case 204:
			case 205:
			case 206:
			case 207:
			case 208:
				{
				int LA343_41 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case ABSOLUTE:
			case ADD:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case DISPID:
			case DQ:
			case DW:
			case EXIT:
			case EXPORT:
			case FINAL:
			case HELPER:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OPERATOR:
			case OUT:
			case PRIVATE:
			case PUBLIC:
			case READ:
			case READONLY:
			case REGISTER:
			case REMOVE:
			case STATIC:
			case STORED:
			case STRICT:
			case UNSAFE:
			case VARARGS:
			case VIRTUAL:
			case WRITE:
			case WRITEONLY:
				{
				int LA343_42 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case EQUAL:
				{
				int LA343_43 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case GE:
			case GT:
			case IS:
			case LE:
			case NOT_EQUAL:
				{
				int LA343_44 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case DOTDOT:
				{
				int LA343_45 = input.LA(2);
				if ( (synpred187_Delphi()) ) {
					alt343=1;
				}
				}
				break;
		}
		switch (alt343) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:131: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred189_Delphi8951);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_typeDecl_in_synpred189_Delphi8955);
		typeDecl();
		state._fsp--;
		if (state.failed) return;

		match(input,SEMI,FOLLOW_SEMI_in_synpred189_Delphi8957); if (state.failed) return;

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:162: ( methodDirective )*
		loop344:
		while (true) {
			int alt344=2;
			int LA344_0 = input.LA(1);
			if ( (LA344_0==ABSTRACT||LA344_0==ASSEMBLER||LA344_0==CDECL||LA344_0==DEPRECATED||LA344_0==DISPID||LA344_0==DYNAMIC||(LA344_0 >= EXPERIMENTAL && LA344_0 <= EXPORT)||LA344_0==EXTERNAL||LA344_0==FAR||LA344_0==FINAL||LA344_0==INLINE||(LA344_0 >= LIBRARY && LA344_0 <= LOCAL)||LA344_0==MESSAGE||LA344_0==NEAR||(LA344_0 >= OVERLOAD && LA344_0 <= OVERRIDE)||(LA344_0 >= PASCAL && LA344_0 <= PLATFORM)||(LA344_0 >= REGISTER && LA344_0 <= REINTRODUCE)||LA344_0==SAFECALL||(LA344_0 >= STATIC && LA344_0 <= STDCALL)||LA344_0==VARARGS||LA344_0==VIRTUAL) ) {
				alt344=1;
			}

			switch (alt344) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:163: methodDirective
				{
				pushFollow(FOLLOW_methodDirective_in_synpred189_Delphi8960);
				methodDirective();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop344;
			}
		}

		}

	}
	// $ANTLR end synpred189_Delphi

	// $ANTLR start synpred190_Delphi
	public final void synpred190_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:367:33: ( customAttribute )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:367:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred190_Delphi9077);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred190_Delphi

	// $ANTLR start synpred194_Delphi
	public final void synpred194_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:367:131: ( customAttribute )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:367:131: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred194_Delphi9103);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred194_Delphi

	// $ANTLR start synpred196_Delphi
	public final void synpred196_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:367:32: ( ( customAttribute )? ( 'class' )? 'operator' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( methodDirective )* )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:367:32: ( customAttribute )? ( 'class' )? 'operator' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( methodDirective )*
		{
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:367:32: ( customAttribute )?
		int alt345=2;
		switch ( input.LA(1) ) {
			case LBRACK:
				{
				alt345=1;
				}
				break;
			case CLASS:
				{
				int LA345_2 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt345=1;
				}
				}
				break;
			case OPERATOR:
				{
				int LA345_3 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt345=1;
				}
				}
				break;
		}
		switch (alt345) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:367:33: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred196_Delphi9077);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:367:51: ( 'class' )?
		int alt346=2;
		int LA346_0 = input.LA(1);
		if ( (LA346_0==CLASS) ) {
			alt346=1;
		}
		switch (alt346) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:367:52: 'class'
				{
				match(input,CLASS,FOLLOW_CLASS_in_synpred196_Delphi9082); if (state.failed) return;

				}
				break;

		}

		match(input,OPERATOR,FOLLOW_OPERATOR_in_synpred196_Delphi9086); if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred196_Delphi9088);
		ident();
		state._fsp--;
		if (state.failed) return;

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:367:79: ( genericDefinition )?
		int alt347=2;
		int LA347_0 = input.LA(1);
		if ( (LA347_0==LT) ) {
			alt347=1;
		}
		switch (alt347) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:367:80: genericDefinition
				{
				pushFollow(FOLLOW_genericDefinition_in_synpred196_Delphi9091);
				genericDefinition();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:367:100: ( formalParameterSection )?
		int alt348=2;
		int LA348_0 = input.LA(1);
		if ( (LA348_0==LPAREN) ) {
			alt348=1;
		}
		switch (alt348) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:367:101: formalParameterSection
				{
				pushFollow(FOLLOW_formalParameterSection_in_synpred196_Delphi9096);
				formalParameterSection();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		match(input,COLON,FOLLOW_COLON_in_synpred196_Delphi9100); if (state.failed) return;

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:367:130: ( customAttribute )?
		int alt349=2;
		switch ( input.LA(1) ) {
			case LBRACK:
				{
				int LA349_1 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case PACKED:
				{
				int LA349_2 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case ARRAY:
				{
				int LA349_3 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case SET:
				{
				int LA349_4 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case FILE:
				{
				int LA349_5 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case CLASS:
				{
				int LA349_6 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case DISPINTERFACE:
			case INTERFACE:
				{
				int LA349_7 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case OBJECT:
				{
				int LA349_8 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case RECORD:
				{
				int LA349_9 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case POINTER2:
				{
				int LA349_10 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case POINTER:
				{
				int LA349_11 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case STRING:
				{
				int LA349_12 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case TYPE:
				{
				int LA349_13 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case ANSISTRING:
				{
				int LA349_14 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case FUNCTION:
				{
				int LA349_15 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case PROCEDURE:
				{
				int LA349_16 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case REFERENCE:
				{
				int LA349_17 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case VARIANT:
				{
				int LA349_18 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case LPAREN:
				{
				int LA349_19 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case AT2:
				{
				int LA349_20 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case 199:
				{
				int LA349_21 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case NOT:
				{
				int LA349_22 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case PLUS:
				{
				int LA349_23 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case MINUS:
				{
				int LA349_24 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case TkRealNum:
				{
				int LA349_25 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case TkHexNum:
			case TkIntNum:
				{
				int LA349_26 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case TRUE:
				{
				int LA349_27 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case FALSE:
				{
				int LA349_28 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case NIL:
				{
				int LA349_29 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case 210:
				{
				int LA349_30 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case ControlChar:
				{
				int LA349_31 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case QuotedString:
				{
				int LA349_32 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case 203:
				{
				int LA349_33 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case INHERITED:
				{
				int LA349_34 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case TkIdentifier:
				{
				int LA349_35 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case 198:
				{
				int LA349_36 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case IN:
				{
				int LA349_37 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case 209:
				{
				int LA349_38 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case DOT:
				{
				int LA349_39 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case LT:
				{
				int LA349_40 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case AND:
			case AS:
			case DIV:
			case MOD:
			case OR:
			case SHL:
			case SHR:
			case SLASH:
			case STAR:
			case XOR:
			case 200:
			case 201:
			case 202:
			case 204:
			case 205:
			case 206:
			case 207:
			case 208:
				{
				int LA349_41 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case ABSOLUTE:
			case ADD:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case DISPID:
			case DQ:
			case DW:
			case EXIT:
			case EXPORT:
			case FINAL:
			case HELPER:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OPERATOR:
			case OUT:
			case PRIVATE:
			case PUBLIC:
			case READ:
			case READONLY:
			case REGISTER:
			case REMOVE:
			case STATIC:
			case STORED:
			case STRICT:
			case UNSAFE:
			case VARARGS:
			case VIRTUAL:
			case WRITE:
			case WRITEONLY:
				{
				int LA349_42 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case EQUAL:
				{
				int LA349_43 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case GE:
			case GT:
			case IS:
			case LE:
			case NOT_EQUAL:
				{
				int LA349_44 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
			case DOTDOT:
				{
				int LA349_45 = input.LA(2);
				if ( (synpred194_Delphi()) ) {
					alt349=1;
				}
				}
				break;
		}
		switch (alt349) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:367:131: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred196_Delphi9103);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_typeDecl_in_synpred196_Delphi9107);
		typeDecl();
		state._fsp--;
		if (state.failed) return;

		match(input,SEMI,FOLLOW_SEMI_in_synpred196_Delphi9109); if (state.failed) return;

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:367:162: ( methodDirective )*
		loop350:
		while (true) {
			int alt350=2;
			int LA350_0 = input.LA(1);
			if ( (LA350_0==ABSTRACT||LA350_0==ASSEMBLER||LA350_0==CDECL||LA350_0==DEPRECATED||LA350_0==DISPID||LA350_0==DYNAMIC||(LA350_0 >= EXPERIMENTAL && LA350_0 <= EXPORT)||LA350_0==EXTERNAL||LA350_0==FAR||LA350_0==FINAL||LA350_0==INLINE||(LA350_0 >= LIBRARY && LA350_0 <= LOCAL)||LA350_0==MESSAGE||LA350_0==NEAR||(LA350_0 >= OVERLOAD && LA350_0 <= OVERRIDE)||(LA350_0 >= PASCAL && LA350_0 <= PLATFORM)||(LA350_0 >= REGISTER && LA350_0 <= REINTRODUCE)||LA350_0==SAFECALL||(LA350_0 >= STATIC && LA350_0 <= STDCALL)||LA350_0==VARARGS||LA350_0==VIRTUAL) ) {
				alt350=1;
			}

			switch (alt350) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:367:163: methodDirective
				{
				pushFollow(FOLLOW_methodDirective_in_synpred196_Delphi9112);
				methodDirective();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop350;
			}
		}

		}

	}
	// $ANTLR end synpred196_Delphi

	// $ANTLR start synpred197_Delphi
	public final void synpred197_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:369:33: ( customAttribute )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:369:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred197_Delphi9226);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred197_Delphi

	// $ANTLR start synpred200_Delphi
	public final void synpred200_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:369:32: ( ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? '.' ident '=' ident ';' )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:369:32: ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? '.' ident '=' ident ';'
		{
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:369:32: ( customAttribute )?
		int alt351=2;
		switch ( input.LA(1) ) {
			case LBRACK:
				{
				alt351=1;
				}
				break;
			case CLASS:
				{
				int LA351_2 = input.LA(2);
				if ( (synpred197_Delphi()) ) {
					alt351=1;
				}
				}
				break;
			case FUNCTION:
				{
				int LA351_3 = input.LA(2);
				if ( (synpred197_Delphi()) ) {
					alt351=1;
				}
				}
				break;
		}
		switch (alt351) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:369:33: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred200_Delphi9226);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:369:51: ( 'class' )?
		int alt352=2;
		int LA352_0 = input.LA(1);
		if ( (LA352_0==CLASS) ) {
			alt352=1;
		}
		switch (alt352) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:369:52: 'class'
				{
				match(input,CLASS,FOLLOW_CLASS_in_synpred200_Delphi9231); if (state.failed) return;

				}
				break;

		}

		match(input,FUNCTION,FOLLOW_FUNCTION_in_synpred200_Delphi9235); if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred200_Delphi9237);
		ident();
		state._fsp--;
		if (state.failed) return;

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:369:79: ( genericDefinition )?
		int alt353=2;
		int LA353_0 = input.LA(1);
		if ( (LA353_0==LT) ) {
			alt353=1;
		}
		switch (alt353) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:369:80: genericDefinition
				{
				pushFollow(FOLLOW_genericDefinition_in_synpred200_Delphi9240);
				genericDefinition();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		match(input,DOT,FOLLOW_DOT_in_synpred200_Delphi9244); if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred200_Delphi9246);
		ident();
		state._fsp--;
		if (state.failed) return;

		match(input,EQUAL,FOLLOW_EQUAL_in_synpred200_Delphi9248); if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred200_Delphi9250);
		ident();
		state._fsp--;
		if (state.failed) return;

		match(input,SEMI,FOLLOW_SEMI_in_synpred200_Delphi9252); if (state.failed) return;

		}

	}
	// $ANTLR end synpred200_Delphi

	// $ANTLR start synpred201_Delphi
	public final void synpred201_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:370:33: ( customAttribute )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:370:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred201_Delphi9286);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred201_Delphi

	// $ANTLR start synpred204_Delphi
	public final void synpred204_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:372:33: ( customAttribute )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:372:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred204_Delphi9368);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred204_Delphi

	// $ANTLR start synpred206_Delphi
	public final void synpred206_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:375:33: ( customAttribute )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:375:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred206_Delphi9489);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred206_Delphi

	// $ANTLR start synpred213_Delphi
	public final void synpred213_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:382:52: ( ';' )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:382:52: ';'
		{
		match(input,SEMI,FOLLOW_SEMI_in_synpred213_Delphi9749); if (state.failed) return;

		}

	}
	// $ANTLR end synpred213_Delphi

	// $ANTLR start synpred217_Delphi
	public final void synpred217_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:387:32: ( 'default' expression )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:387:32: 'default' expression
		{
		match(input,DEFAULT,FOLLOW_DEFAULT_in_synpred217_Delphi9900); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred217_Delphi9902);
		expression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred217_Delphi

	// $ANTLR start synpred218_Delphi
	public final void synpred218_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:388:32: ( 'default' )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:388:32: 'default'
		{
		match(input,DEFAULT,FOLLOW_DEFAULT_in_synpred218_Delphi9935); if (state.failed) return;

		}

	}
	// $ANTLR end synpred218_Delphi

	// $ANTLR start synpred221_Delphi
	public final void synpred221_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:393:32: ( 'default' expression ';' )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:393:32: 'default' expression ';'
		{
		match(input,DEFAULT,FOLLOW_DEFAULT_in_synpred221_Delphi10100); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred221_Delphi10102);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,SEMI,FOLLOW_SEMI_in_synpred221_Delphi10104); if (state.failed) return;

		}

	}
	// $ANTLR end synpred221_Delphi

	// $ANTLR start synpred222_Delphi
	public final void synpred222_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:394:32: ( 'default' ';' )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:394:32: 'default' ';'
		{
		match(input,DEFAULT,FOLLOW_DEFAULT_in_synpred222_Delphi10137); if (state.failed) return;

		match(input,SEMI,FOLLOW_SEMI_in_synpred222_Delphi10139); if (state.failed) return;

		}

	}
	// $ANTLR end synpred222_Delphi

	// $ANTLR start synpred235_Delphi
	public final void synpred235_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:416:81: ( customAttribute )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:416:81: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred235_Delphi10722);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred235_Delphi

	// $ANTLR start synpred240_Delphi
	public final void synpred240_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:55: ( methodDirective )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:55: methodDirective
		{
		pushFollow(FOLLOW_methodDirective_in_synpred240_Delphi10840);
		methodDirective();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred240_Delphi

	// $ANTLR start synpred241_Delphi
	public final void synpred241_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:74: ( methodBody )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:74: methodBody
		{
		pushFollow(FOLLOW_methodBody_in_synpred241_Delphi10845);
		methodBody();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred241_Delphi

	// $ANTLR start synpred242_Delphi
	public final void synpred242_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:33: ( customAttribute )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred242_Delphi10905);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred242_Delphi

	// $ANTLR start synpred245_Delphi
	public final void synpred245_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:32: ( ( customAttribute )? ( 'class' )? methodKey methodName ( formalParameterSection )? )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:32: ( customAttribute )? ( 'class' )? methodKey methodName ( formalParameterSection )?
		{
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:32: ( customAttribute )?
		int alt360=2;
		switch ( input.LA(1) ) {
			case LBRACK:
				{
				alt360=1;
				}
				break;
			case CLASS:
				{
				int LA360_2 = input.LA(2);
				if ( (synpred242_Delphi()) ) {
					alt360=1;
				}
				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case PROCEDURE:
				{
				int LA360_3 = input.LA(2);
				if ( (synpred242_Delphi()) ) {
					alt360=1;
				}
				}
				break;
		}
		switch (alt360) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:33: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred245_Delphi10905);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:51: ( 'class' )?
		int alt361=2;
		int LA361_0 = input.LA(1);
		if ( (LA361_0==CLASS) ) {
			alt361=1;
		}
		switch (alt361) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:52: 'class'
				{
				match(input,CLASS,FOLLOW_CLASS_in_synpred245_Delphi10910); if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_methodKey_in_synpred245_Delphi10915);
		methodKey();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_methodName_in_synpred245_Delphi10917);
		methodName();
		state._fsp--;
		if (state.failed) return;

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:84: ( formalParameterSection )?
		int alt362=2;
		int LA362_0 = input.LA(1);
		if ( (LA362_0==LPAREN) ) {
			alt362=1;
		}
		switch (alt362) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:85: formalParameterSection
				{
				pushFollow(FOLLOW_formalParameterSection_in_synpred245_Delphi10920);
				formalParameterSection();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred245_Delphi

	// $ANTLR start synpred246_Delphi
	public final void synpred246_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:33: ( customAttribute )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred246_Delphi11018);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred246_Delphi

	// $ANTLR start synpred249_Delphi
	public final void synpred249_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:116: ( customAttribute )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:116: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred249_Delphi11040);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred249_Delphi

	// $ANTLR start synpred251_Delphi
	public final void synpred251_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:32: ( ( customAttribute )? ( 'class' )? 'function' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )? )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:32: ( customAttribute )? ( 'class' )? 'function' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )?
		{
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:32: ( customAttribute )?
		int alt364=2;
		switch ( input.LA(1) ) {
			case LBRACK:
				{
				alt364=1;
				}
				break;
			case CLASS:
				{
				int LA364_2 = input.LA(2);
				if ( (synpred246_Delphi()) ) {
					alt364=1;
				}
				}
				break;
			case FUNCTION:
				{
				int LA364_3 = input.LA(2);
				if ( (synpred246_Delphi()) ) {
					alt364=1;
				}
				}
				break;
		}
		switch (alt364) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:33: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred251_Delphi11018);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:51: ( 'class' )?
		int alt365=2;
		int LA365_0 = input.LA(1);
		if ( (LA365_0==CLASS) ) {
			alt365=1;
		}
		switch (alt365) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:52: 'class'
				{
				match(input,CLASS,FOLLOW_CLASS_in_synpred251_Delphi11023); if (state.failed) return;

				}
				break;

		}

		match(input,FUNCTION,FOLLOW_FUNCTION_in_synpred251_Delphi11027); if (state.failed) return;

		pushFollow(FOLLOW_methodName_in_synpred251_Delphi11029);
		methodName();
		state._fsp--;
		if (state.failed) return;

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:84: ( formalParameterSection )?
		int alt366=2;
		int LA366_0 = input.LA(1);
		if ( (LA366_0==LPAREN) ) {
			alt366=1;
		}
		switch (alt366) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:85: formalParameterSection
				{
				pushFollow(FOLLOW_formalParameterSection_in_synpred251_Delphi11032);
				formalParameterSection();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:110: ( ':' ( customAttribute )? typeDecl )?
		int alt368=2;
		int LA368_0 = input.LA(1);
		if ( (LA368_0==COLON) ) {
			alt368=1;
		}
		switch (alt368) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:111: ':' ( customAttribute )? typeDecl
				{
				match(input,COLON,FOLLOW_COLON_in_synpred251_Delphi11037); if (state.failed) return;

				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:115: ( customAttribute )?
				int alt367=2;
				switch ( input.LA(1) ) {
					case LBRACK:
						{
						int LA367_1 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case PACKED:
						{
						int LA367_2 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case ARRAY:
						{
						int LA367_3 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case SET:
						{
						int LA367_4 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case FILE:
						{
						int LA367_5 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case CLASS:
						{
						int LA367_6 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case DISPINTERFACE:
					case INTERFACE:
						{
						int LA367_7 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case OBJECT:
						{
						int LA367_8 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case RECORD:
						{
						int LA367_9 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case POINTER2:
						{
						int LA367_10 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case POINTER:
						{
						int LA367_11 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case STRING:
						{
						int LA367_12 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case TYPE:
						{
						int LA367_13 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case ANSISTRING:
						{
						int LA367_14 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case FUNCTION:
						{
						int LA367_15 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case PROCEDURE:
						{
						int LA367_16 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case REFERENCE:
						{
						int LA367_17 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case VARIANT:
						{
						int LA367_18 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case LPAREN:
						{
						int LA367_19 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case AT2:
						{
						int LA367_20 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case 199:
						{
						int LA367_21 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case NOT:
						{
						int LA367_22 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case PLUS:
						{
						int LA367_23 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case MINUS:
						{
						int LA367_24 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case TkRealNum:
						{
						int LA367_25 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case TkHexNum:
					case TkIntNum:
						{
						int LA367_26 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case TRUE:
						{
						int LA367_27 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case FALSE:
						{
						int LA367_28 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case NIL:
						{
						int LA367_29 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case 210:
						{
						int LA367_30 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case ControlChar:
						{
						int LA367_31 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case QuotedString:
						{
						int LA367_32 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case 203:
						{
						int LA367_33 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case INHERITED:
						{
						int LA367_34 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case TkIdentifier:
						{
						int LA367_35 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case 198:
						{
						int LA367_36 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case IN:
						{
						int LA367_37 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case 209:
						{
						int LA367_38 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case DOT:
						{
						int LA367_39 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case LT:
						{
						int LA367_40 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case AND:
					case AS:
					case DIV:
					case MOD:
					case OR:
					case SHL:
					case SHR:
					case SLASH:
					case STAR:
					case XOR:
					case 200:
					case 201:
					case 202:
					case 204:
					case 205:
					case 206:
					case 207:
					case 208:
						{
						int LA367_41 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case ABSOLUTE:
					case ADD:
					case AT:
					case BREAK:
					case CONTAINS:
					case CONTINUE:
					case DEFAULT:
					case DISPID:
					case DQ:
					case DW:
					case EXIT:
					case EXPORT:
					case FINAL:
					case HELPER:
					case IMPLEMENTS:
					case INDEX:
					case LOCAL:
					case MESSAGE:
					case NAME:
					case OPERATOR:
					case OUT:
					case PRIVATE:
					case PUBLIC:
					case READ:
					case READONLY:
					case REGISTER:
					case REMOVE:
					case STATIC:
					case STORED:
					case STRICT:
					case UNSAFE:
					case VARARGS:
					case VIRTUAL:
					case WRITE:
					case WRITEONLY:
						{
						int LA367_42 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case EQUAL:
						{
						int LA367_43 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case GE:
					case GT:
					case IS:
					case LE:
					case NOT_EQUAL:
						{
						int LA367_44 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
					case DOTDOT:
						{
						int LA367_45 = input.LA(2);
						if ( (synpred249_Delphi()) ) {
							alt367=1;
						}
						}
						break;
				}
				switch (alt367) {
					case 1 :
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:116: customAttribute
						{
						pushFollow(FOLLOW_customAttribute_in_synpred251_Delphi11040);
						customAttribute();
						state._fsp--;
						if (state.failed) return;

						}
						break;

				}

				pushFollow(FOLLOW_typeDecl_in_synpred251_Delphi11044);
				typeDecl();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred251_Delphi

	// $ANTLR start synpred252_Delphi
	public final void synpred252_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:33: ( customAttribute )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred252_Delphi11153);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred252_Delphi

	// $ANTLR start synpred254_Delphi
	public final void synpred254_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:113: ( customAttribute )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:113: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred254_Delphi11172);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred254_Delphi

	// $ANTLR start synpred261_Delphi
	public final void synpred261_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:53: ( functionDirective )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:53: functionDirective
		{
		pushFollow(FOLLOW_functionDirective_in_synpred261_Delphi11504);
		functionDirective();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred261_Delphi

	// $ANTLR start synpred262_Delphi
	public final void synpred262_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:74: ( procBody )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:74: procBody
		{
		pushFollow(FOLLOW_procBody_in_synpred262_Delphi11509);
		procBody();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred262_Delphi

	// $ANTLR start synpred263_Delphi
	public final void synpred263_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:436:33: ( customAttribute )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:436:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred263_Delphi11575);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred263_Delphi

	// $ANTLR start synpred265_Delphi
	public final void synpred265_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:436:32: ( ( customAttribute )? 'procedure' ident ( formalParameterSection )? )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:436:32: ( customAttribute )? 'procedure' ident ( formalParameterSection )?
		{
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:436:32: ( customAttribute )?
		int alt371=2;
		int LA371_0 = input.LA(1);
		if ( (LA371_0==LBRACK) ) {
			alt371=1;
		}
		else if ( (LA371_0==PROCEDURE) ) {
			int LA371_2 = input.LA(2);
			if ( (synpred263_Delphi()) ) {
				alt371=1;
			}
		}
		switch (alt371) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:436:33: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred265_Delphi11575);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		match(input,PROCEDURE,FOLLOW_PROCEDURE_in_synpred265_Delphi11579); if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred265_Delphi11581);
		ident();
		state._fsp--;
		if (state.failed) return;

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:436:69: ( formalParameterSection )?
		int alt372=2;
		int LA372_0 = input.LA(1);
		if ( (LA372_0==LPAREN) ) {
			alt372=1;
		}
		switch (alt372) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:436:70: formalParameterSection
				{
				pushFollow(FOLLOW_formalParameterSection_in_synpred265_Delphi11584);
				formalParameterSection();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred265_Delphi

	// $ANTLR start synpred266_Delphi
	public final void synpred266_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:438:33: ( customAttribute )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:438:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred266_Delphi11684);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred266_Delphi

	// $ANTLR start synpred270_Delphi
	public final void synpred270_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:445:33: ( customAttribute )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:445:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred270_Delphi11926);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred270_Delphi

	// $ANTLR start synpred276_Delphi
	public final void synpred276_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:454:47: ( functionDirective )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:454:47: functionDirective
		{
		pushFollow(FOLLOW_functionDirective_in_synpred276_Delphi12238);
		functionDirective();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred276_Delphi

	// $ANTLR start synpred278_Delphi
	public final void synpred278_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:455:44: ( 'name' expression )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:455:44: 'name' expression
		{
		match(input,NAME,FOLLOW_NAME_in_synpred278_Delphi12279); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred278_Delphi12281);
		expression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred278_Delphi

	// $ANTLR start synpred279_Delphi
	public final void synpred279_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:455:64: ( 'index' expression )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:455:64: 'index' expression
		{
		match(input,INDEX,FOLLOW_INDEX_in_synpred279_Delphi12285); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred279_Delphi12287);
		expression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred279_Delphi

	// $ANTLR start synpred280_Delphi
	public final void synpred280_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:455:86: ( functionDirective )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:455:86: functionDirective
		{
		pushFollow(FOLLOW_functionDirective_in_synpred280_Delphi12292);
		functionDirective();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred280_Delphi

	// $ANTLR start synpred282_Delphi
	public final void synpred282_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:463:33: ( customAttributeDecl )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:463:33: customAttributeDecl
		{
		pushFollow(FOLLOW_customAttributeDecl_in_synpred282_Delphi12430);
		customAttributeDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred282_Delphi

	// $ANTLR start synpred283_Delphi
	public final void synpred283_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:465:63: ( expressionList )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:465:63: expressionList
		{
		pushFollow(FOLLOW_expressionList_in_synpred283_Delphi12486);
		expressionList();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred283_Delphi

	// $ANTLR start synpred286_Delphi
	public final void synpred286_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:472:32: ( anonymousExpression )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:472:32: anonymousExpression
		{
		pushFollow(FOLLOW_anonymousExpression_in_synpred286_Delphi12629);
		anonymousExpression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred286_Delphi

	// $ANTLR start synpred287_Delphi
	public final void synpred287_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:473:50: ( relOp simpleExpression )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:473:50: relOp simpleExpression
		{
		pushFollow(FOLLOW_relOp_in_synpred287_Delphi12673);
		relOp();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_simpleExpression_in_synpred287_Delphi12675);
		simpleExpression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred287_Delphi

	// $ANTLR start synpred288_Delphi
	public final void synpred288_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:473:76: ( '=' expression )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:473:76: '=' expression
		{
		match(input,EQUAL,FOLLOW_EQUAL_in_synpred288_Delphi12680); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred288_Delphi12682);
		expression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred288_Delphi

	// $ANTLR start synpred289_Delphi
	public final void synpred289_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:475:45: ( formalParameterSection )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:475:45: formalParameterSection
		{
		pushFollow(FOLLOW_formalParameterSection_in_synpred289_Delphi12736);
		formalParameterSection();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred289_Delphi

	// $ANTLR start synpred292_Delphi
	public final void synpred292_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:40: ( operator factor )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:40: operator factor
		{
		pushFollow(FOLLOW_operator_in_synpred292_Delphi12836);
		operator();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_factor_in_synpred292_Delphi12838);
		factor();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred292_Delphi

	// $ANTLR start synpred293_Delphi
	public final void synpred293_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:480:32: ( '@' factor )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:480:32: '@' factor
		{
		match(input,AT2,FOLLOW_AT2_in_synpred293_Delphi12899); if (state.failed) return;

		pushFollow(FOLLOW_factor_in_synpred293_Delphi12901);
		factor();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred293_Delphi

	// $ANTLR start synpred294_Delphi
	public final void synpred294_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:481:32: ( '@@' factor )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:481:32: '@@' factor
		{
		match(input,199,FOLLOW_199_in_synpred294_Delphi12934); if (state.failed) return;

		pushFollow(FOLLOW_factor_in_synpred294_Delphi12936);
		factor();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred294_Delphi

	// $ANTLR start synpred295_Delphi
	public final void synpred295_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:482:32: ( 'not' factor )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:482:32: 'not' factor
		{
		match(input,NOT,FOLLOW_NOT_in_synpred295_Delphi12976); if (state.failed) return;

		pushFollow(FOLLOW_factor_in_synpred295_Delphi12978);
		factor();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred295_Delphi

	// $ANTLR start synpred296_Delphi
	public final void synpred296_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:483:32: ( '+' factor )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:483:32: '+' factor
		{
		match(input,PLUS,FOLLOW_PLUS_in_synpred296_Delphi13011); if (state.failed) return;

		pushFollow(FOLLOW_factor_in_synpred296_Delphi13013);
		factor();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred296_Delphi

	// $ANTLR start synpred297_Delphi
	public final void synpred297_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:484:32: ( '-' factor )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:484:32: '-' factor
		{
		match(input,MINUS,FOLLOW_MINUS_in_synpred297_Delphi13046); if (state.failed) return;

		pushFollow(FOLLOW_factor_in_synpred297_Delphi13048);
		factor();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred297_Delphi

	// $ANTLR start synpred298_Delphi
	public final void synpred298_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:485:32: ( '^' ident )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:485:32: '^' ident
		{
		match(input,POINTER2,FOLLOW_POINTER2_in_synpred298_Delphi13081); if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred298_Delphi13083);
		ident();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred298_Delphi

	// $ANTLR start synpred299_Delphi
	public final void synpred299_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:486:32: ( intRealNum )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:486:32: intRealNum
		{
		pushFollow(FOLLOW_intRealNum_in_synpred299_Delphi13127);
		intRealNum();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred299_Delphi

	// $ANTLR start synpred300_Delphi
	public final void synpred300_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:32: ( 'true' )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:32: 'true'
		{
		match(input,TRUE,FOLLOW_TRUE_in_synpred300_Delphi13160); if (state.failed) return;

		}

	}
	// $ANTLR end synpred300_Delphi

	// $ANTLR start synpred301_Delphi
	public final void synpred301_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:488:32: ( 'false' )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:488:32: 'false'
		{
		match(input,FALSE,FOLLOW_FALSE_in_synpred301_Delphi13193); if (state.failed) return;

		}

	}
	// $ANTLR end synpred301_Delphi

	// $ANTLR start synpred302_Delphi
	public final void synpred302_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:489:32: ( 'nil' )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:489:32: 'nil'
		{
		match(input,NIL,FOLLOW_NIL_in_synpred302_Delphi13226); if (state.failed) return;

		}

	}
	// $ANTLR end synpred302_Delphi

	// $ANTLR start synpred303_Delphi
	public final void synpred303_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:32: ( 'nil^' )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:32: 'nil^'
		{
		match(input,210,FOLLOW_210_in_synpred303_Delphi13259); if (state.failed) return;

		}

	}
	// $ANTLR end synpred303_Delphi

	// $ANTLR start synpred304_Delphi
	public final void synpred304_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:491:32: ( '(' expression ')' designator )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:491:32: '(' expression ')' designator
		{
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred304_Delphi13337); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred304_Delphi13339);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,RPAREN,FOLLOW_RPAREN_in_synpred304_Delphi13341); if (state.failed) return;

		pushFollow(FOLLOW_designator_in_synpred304_Delphi13343);
		designator();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred304_Delphi

	// $ANTLR start synpred305_Delphi
	public final void synpred305_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:492:52: ( '^' )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:492:52: '^'
		{
		match(input,POINTER2,FOLLOW_POINTER2_in_synpred305_Delphi13383); if (state.failed) return;

		}

	}
	// $ANTLR end synpred305_Delphi

	// $ANTLR start synpred306_Delphi
	public final void synpred306_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:492:59: ( '.' expression )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:492:59: '.' expression
		{
		match(input,DOT,FOLLOW_DOT_in_synpred306_Delphi13388); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred306_Delphi13390);
		expression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred306_Delphi

	// $ANTLR start synpred307_Delphi
	public final void synpred307_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:492:32: ( '(' expression ')' ( '^' )? ( '.' expression )? )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:492:32: '(' expression ')' ( '^' )? ( '.' expression )?
		{
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred307_Delphi13376); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred307_Delphi13378);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,RPAREN,FOLLOW_RPAREN_in_synpred307_Delphi13380); if (state.failed) return;

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:492:51: ( '^' )?
		int alt378=2;
		int LA378_0 = input.LA(1);
		if ( (LA378_0==POINTER2) ) {
			alt378=1;
		}
		switch (alt378) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:492:52: '^'
				{
				match(input,POINTER2,FOLLOW_POINTER2_in_synpred307_Delphi13383); if (state.failed) return;

				}
				break;

		}

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:492:58: ( '.' expression )?
		int alt379=2;
		int LA379_0 = input.LA(1);
		if ( (LA379_0==DOT) ) {
			alt379=1;
		}
		switch (alt379) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:492:59: '.' expression
				{
				match(input,DOT,FOLLOW_DOT_in_synpred307_Delphi13388); if (state.failed) return;

				pushFollow(FOLLOW_expression_in_synpred307_Delphi13390);
				expression();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred307_Delphi

	// $ANTLR start synpred308_Delphi
	public final void synpred308_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:46: ( '.' simpleExpression )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:46: '.' simpleExpression
		{
		match(input,DOT,FOLLOW_DOT_in_synpred308_Delphi13436); if (state.failed) return;

		pushFollow(FOLLOW_simpleExpression_in_synpred308_Delphi13438);
		simpleExpression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred308_Delphi

	// $ANTLR start synpred309_Delphi
	public final void synpred309_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:32: ( stringFactor ( '.' simpleExpression )? )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:32: stringFactor ( '.' simpleExpression )?
		{
		pushFollow(FOLLOW_stringFactor_in_synpred309_Delphi13433);
		stringFactor();
		state._fsp--;
		if (state.failed) return;

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:45: ( '.' simpleExpression )?
		int alt380=2;
		int LA380_0 = input.LA(1);
		if ( (LA380_0==DOT) ) {
			alt380=1;
		}
		switch (alt380) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:46: '.' simpleExpression
				{
				match(input,DOT,FOLLOW_DOT_in_synpred309_Delphi13436); if (state.failed) return;

				pushFollow(FOLLOW_simpleExpression_in_synpred309_Delphi13438);
				simpleExpression();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred309_Delphi

	// $ANTLR start synpred310_Delphi
	public final void synpred310_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:494:32: ( setSection )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:494:32: setSection
		{
		pushFollow(FOLLOW_setSection_in_synpred310_Delphi13473);
		setSection();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred310_Delphi

	// $ANTLR start synpred311_Delphi
	public final void synpred311_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:495:32: ( designator )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:495:32: designator
		{
		pushFollow(FOLLOW_designator_in_synpred311_Delphi13506);
		designator();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred311_Delphi

	// $ANTLR start synpred312_Delphi
	public final void synpred312_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:49: ( QuotedString ( controlString ) )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:49: QuotedString ( controlString )
		{
		match(input,QuotedString,FOLLOW_QuotedString_in_synpred312_Delphi13603); if (state.failed) return;

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:62: ( controlString )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:63: controlString
		{
		pushFollow(FOLLOW_controlString_in_synpred312_Delphi13606);
		controlString();
		state._fsp--;
		if (state.failed) return;

		}

		}

	}
	// $ANTLR end synpred312_Delphi

	// $ANTLR start synpred313_Delphi
	public final void synpred313_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:81: ( QuotedString )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:81: QuotedString
		{
		match(input,QuotedString,FOLLOW_QuotedString_in_synpred313_Delphi13612); if (state.failed) return;

		}

	}
	// $ANTLR end synpred313_Delphi

	// $ANTLR start synpred315_Delphi
	public final void synpred315_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:46: ( ( controlString ) QuotedString )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:46: ( controlString ) QuotedString
		{
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:46: ( controlString )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:47: controlString
		{
		pushFollow(FOLLOW_controlString_in_synpred315_Delphi13651);
		controlString();
		state._fsp--;
		if (state.failed) return;

		}

		match(input,QuotedString,FOLLOW_QuotedString_in_synpred315_Delphi13654); if (state.failed) return;

		}

	}
	// $ANTLR end synpred315_Delphi

	// $ANTLR start synpred316_Delphi
	public final void synpred316_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:78: ( controlString )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:78: controlString
		{
		pushFollow(FOLLOW_controlString_in_synpred316_Delphi13659);
		controlString();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred316_Delphi

	// $ANTLR start synpred317_Delphi
	public final void synpred317_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:501:45: ( ControlChar )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:501:45: ControlChar
		{
		match(input,ControlChar,FOLLOW_ControlChar_in_synpred317_Delphi13716); if (state.failed) return;

		}

	}
	// $ANTLR end synpred317_Delphi

	// $ANTLR start synpred320_Delphi
	public final void synpred320_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:503:37: ( expression ( ( ',' | '..' ) expression )* )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:503:37: expression ( ( ',' | '..' ) expression )*
		{
		pushFollow(FOLLOW_expression_in_synpred320_Delphi13776);
		expression();
		state._fsp--;
		if (state.failed) return;

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:503:48: ( ( ',' | '..' ) expression )*
		loop383:
		while (true) {
			int alt383=2;
			int LA383_0 = input.LA(1);
			if ( (LA383_0==COMMA||LA383_0==DOTDOT) ) {
				alt383=1;
			}

			switch (alt383) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:503:49: ( ',' | '..' ) expression
				{
				if ( input.LA(1)==COMMA||input.LA(1)==DOTDOT ) {
					input.consume();
					state.errorRecovery=false;
					state.failed=false;
				}
				else {
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					throw mse;
				}
				pushFollow(FOLLOW_expression_in_synpred320_Delphi13787);
				expression();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop383;
			}
		}

		}

	}
	// $ANTLR end synpred320_Delphi

	// $ANTLR start synpred321_Delphi
	public final void synpred321_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:33: ( 'Inherited' )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:33: 'Inherited'
		{
		match(input,203,FOLLOW_203_in_synpred321_Delphi13850); if (state.failed) return;

		}

	}
	// $ANTLR end synpred321_Delphi

	// $ANTLR start synpred322_Delphi
	public final void synpred322_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:48: ( 'inherited' )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:48: 'inherited'
		{
		match(input,INHERITED,FOLLOW_INHERITED_in_synpred322_Delphi13855); if (state.failed) return;

		}

	}
	// $ANTLR end synpred322_Delphi

	// $ANTLR start synpred323_Delphi
	public final void synpred323_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:65: ( qualifiedIdent )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:65: qualifiedIdent
		{
		pushFollow(FOLLOW_qualifiedIdent_in_synpred323_Delphi13862);
		qualifiedIdent();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred323_Delphi

	// $ANTLR start synpred324_Delphi
	public final void synpred324_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:64: ( ( qualifiedIdent | typeId ) )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:64: ( qualifiedIdent | typeId )
		{
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:64: ( qualifiedIdent | typeId )
		int alt384=2;
		switch ( input.LA(1) ) {
		case TkIdentifier:
			{
			int LA384_1 = input.LA(2);
			if ( (synpred323_Delphi()) ) {
				alt384=1;
			}
			else if ( (true) ) {
				alt384=2;
			}

			}
			break;
		case 198:
			{
			int LA384_2 = input.LA(2);
			if ( (LA384_2==TkIdentifier) ) {
				int LA384_6 = input.LA(3);
				if ( (synpred323_Delphi()) ) {
					alt384=1;
				}
				else if ( (true) ) {
					alt384=2;
				}

			}
			else if ( ((LA384_2 >= ABSOLUTE && LA384_2 <= ASSEMBLY)||LA384_2==AT||LA384_2==AUTOMATED||(LA384_2 >= BEGIN && LA384_2 <= CLASS)||(LA384_2 >= CONST && LA384_2 <= CONTINUE)||LA384_2==DEFAULT||(LA384_2 >= DEPRECATED && LA384_2 <= DO)||(LA384_2 >= DOWNTO && LA384_2 <= DYNAMIC)||(LA384_2 >= ELSE && LA384_2 <= END)||(LA384_2 >= EXCEPT && LA384_2 <= FUNCTION)||LA384_2==GOTO||LA384_2==HELPER||(LA384_2 >= IF && LA384_2 <= LABEL)||(LA384_2 >= LIBRARY && LA384_2 <= LOCAL)||LA384_2==MESSAGE||(LA384_2 >= MOD && LA384_2 <= NOT)||(LA384_2 >= OBJECT && LA384_2 <= PLATFORM)||LA384_2==POINTER||(LA384_2 >= PRIVATE && LA384_2 <= PUBLISHED)||LA384_2==RAISE||(LA384_2 >= READ && LA384_2 <= RESOURCESTRING)||(LA384_2 >= SAFECALL && LA384_2 <= SEALED)||(LA384_2 >= SET && LA384_2 <= SHR)||(LA384_2 >= STATIC && LA384_2 <= TYPE)||(LA384_2 >= UNIT && LA384_2 <= USES)||(LA384_2 >= VAR && LA384_2 <= WRITEONLY)||LA384_2==XOR) ) {
				int LA384_7 = input.LA(3);
				if ( (synpred323_Delphi()) ) {
					alt384=1;
				}
				else if ( (true) ) {
					alt384=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				int nvaeMark = input.mark();
				try {
					input.consume();
					NoViableAltException nvae =
						new NoViableAltException("", 384, 2, input);
					throw nvae;
				} finally {
					input.rewind(nvaeMark);
				}
			}

			}
			break;
		case ABSOLUTE:
		case ADD:
		case ANSISTRING:
		case AT:
		case BREAK:
		case CONTAINS:
		case CONTINUE:
		case DEFAULT:
		case DISPID:
		case DQ:
		case DW:
		case EXIT:
		case EXPORT:
		case FALSE:
		case FINAL:
		case HELPER:
		case IMPLEMENTS:
		case IN:
		case INDEX:
		case LOCAL:
		case MESSAGE:
		case NAME:
		case OBJECT:
		case OPERATOR:
		case OUT:
		case POINTER:
		case PRIVATE:
		case PUBLIC:
		case READ:
		case READONLY:
		case REFERENCE:
		case REGISTER:
		case REMOVE:
		case STATIC:
		case STORED:
		case STRICT:
		case STRING:
		case TRUE:
		case UNSAFE:
		case VARARGS:
		case VARIANT:
		case VIRTUAL:
		case WRITE:
		case WRITEONLY:
			{
			int LA384_3 = input.LA(2);
			if ( (synpred323_Delphi()) ) {
				alt384=1;
			}
			else if ( (true) ) {
				alt384=2;
			}

			}
			break;
		default:
			if (state.backtracking>0) {state.failed=true; return;}
			NoViableAltException nvae =
				new NoViableAltException("", 384, 0, input);
			throw nvae;
		}
		switch (alt384) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:65: qualifiedIdent
				{
				pushFollow(FOLLOW_qualifiedIdent_in_synpred324_Delphi13862);
				qualifiedIdent();
				state._fsp--;
				if (state.failed) return;

				}
				break;
			case 2 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:82: typeId
				{
				pushFollow(FOLLOW_typeId_in_synpred324_Delphi13866);
				typeId();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred324_Delphi

	// $ANTLR start synpred325_Delphi
	public final void synpred325_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:94: ( designatorItem )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:94: designatorItem
		{
		pushFollow(FOLLOW_designatorItem_in_synpred325_Delphi13873);
		designatorItem();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred325_Delphi

	// $ANTLR start synpred336_Delphi
	public final void synpred336_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:513:37: ( expression ( colonConstruct )? ( ',' expression ( colonConstruct )? )* )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:513:37: expression ( colonConstruct )? ( ',' expression ( colonConstruct )? )*
		{
		pushFollow(FOLLOW_expression_in_synpred336_Delphi14140);
		expression();
		state._fsp--;
		if (state.failed) return;

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:513:48: ( colonConstruct )?
		int alt387=2;
		int LA387_0 = input.LA(1);
		if ( (LA387_0==COLON) ) {
			alt387=1;
		}
		switch (alt387) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:513:49: colonConstruct
				{
				pushFollow(FOLLOW_colonConstruct_in_synpred336_Delphi14143);
				colonConstruct();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:513:66: ( ',' expression ( colonConstruct )? )*
		loop389:
		while (true) {
			int alt389=2;
			int LA389_0 = input.LA(1);
			if ( (LA389_0==COMMA) ) {
				alt389=1;
			}

			switch (alt389) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:513:67: ',' expression ( colonConstruct )?
				{
				match(input,COMMA,FOLLOW_COMMA_in_synpred336_Delphi14148); if (state.failed) return;

				pushFollow(FOLLOW_expression_in_synpred336_Delphi14150);
				expression();
				state._fsp--;
				if (state.failed) return;

				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:513:82: ( colonConstruct )?
				int alt388=2;
				int LA388_0 = input.LA(1);
				if ( (LA388_0==COLON) ) {
					alt388=1;
				}
				switch (alt388) {
					case 1 :
						// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:513:83: colonConstruct
						{
						pushFollow(FOLLOW_colonConstruct_in_synpred336_Delphi14153);
						colonConstruct();
						state._fsp--;
						if (state.failed) return;

						}
						break;

				}

				}
				break;

			default :
				break loop389;
			}
		}

		}

	}
	// $ANTLR end synpred336_Delphi

	// $ANTLR start synpred375_Delphi
	public final void synpred375_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:564:32: ( label ':' statement )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:564:32: label ':' statement
		{
		pushFollow(FOLLOW_label_in_synpred375_Delphi15671);
		label();
		state._fsp--;
		if (state.failed) return;

		match(input,COLON,FOLLOW_COLON_in_synpred375_Delphi15673); if (state.failed) return;

		pushFollow(FOLLOW_statement_in_synpred375_Delphi15675);
		statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred375_Delphi

	// $ANTLR start synpred376_Delphi
	public final void synpred376_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:567:66: ( 'else' statement )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:567:66: 'else' statement
		{
		match(input,ELSE,FOLLOW_ELSE_in_synpred376_Delphi15771); if (state.failed) return;

		pushFollow(FOLLOW_statement_in_synpred376_Delphi15773);
		statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred376_Delphi

	// $ANTLR start synpred383_Delphi
	public final void synpred383_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:575:42: ( statementList )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:575:42: statementList
		{
		pushFollow(FOLLOW_statementList_in_synpred383_Delphi16040);
		statementList();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred383_Delphi

	// $ANTLR start synpred386_Delphi
	public final void synpred386_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:579:32: ( 'for' ( 'var' )? designator ( ':' typeDecl )? ':=' expression 'to' expression 'do' statement )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:579:32: 'for' ( 'var' )? designator ( ':' typeDecl )? ':=' expression 'to' expression 'do' statement
		{
		match(input,FOR,FOLLOW_FOR_in_synpred386_Delphi16156); if (state.failed) return;

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:579:38: ( 'var' )?
		int alt391=2;
		int LA391_0 = input.LA(1);
		if ( (LA391_0==VAR) ) {
			alt391=1;
		}
		switch (alt391) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:579:39: 'var'
				{
				match(input,VAR,FOLLOW_VAR_in_synpred386_Delphi16159); if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_designator_in_synpred386_Delphi16163);
		designator();
		state._fsp--;
		if (state.failed) return;

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:579:58: ( ':' typeDecl )?
		int alt392=2;
		int LA392_0 = input.LA(1);
		if ( (LA392_0==COLON) ) {
			alt392=1;
		}
		switch (alt392) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:579:59: ':' typeDecl
				{
				match(input,COLON,FOLLOW_COLON_in_synpred386_Delphi16166); if (state.failed) return;

				pushFollow(FOLLOW_typeDecl_in_synpred386_Delphi16168);
				typeDecl();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred386_Delphi16172); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred386_Delphi16174);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,TO,FOLLOW_TO_in_synpred386_Delphi16176); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred386_Delphi16178);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,DO,FOLLOW_DO_in_synpred386_Delphi16180); if (state.failed) return;

		pushFollow(FOLLOW_statement_in_synpred386_Delphi16182);
		statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred386_Delphi

	// $ANTLR start synpred389_Delphi
	public final void synpred389_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:32: ( 'for' ( 'var' )? designator ( ':' typeDecl )? ':=' expression 'downto' expression 'do' statement )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:32: 'for' ( 'var' )? designator ( ':' typeDecl )? ':=' expression 'downto' expression 'do' statement
		{
		match(input,FOR,FOLLOW_FOR_in_synpred389_Delphi16215); if (state.failed) return;

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:38: ( 'var' )?
		int alt393=2;
		int LA393_0 = input.LA(1);
		if ( (LA393_0==VAR) ) {
			alt393=1;
		}
		switch (alt393) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:39: 'var'
				{
				match(input,VAR,FOLLOW_VAR_in_synpred389_Delphi16218); if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_designator_in_synpred389_Delphi16222);
		designator();
		state._fsp--;
		if (state.failed) return;

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:58: ( ':' typeDecl )?
		int alt394=2;
		int LA394_0 = input.LA(1);
		if ( (LA394_0==COLON) ) {
			alt394=1;
		}
		switch (alt394) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:59: ':' typeDecl
				{
				match(input,COLON,FOLLOW_COLON_in_synpred389_Delphi16225); if (state.failed) return;

				pushFollow(FOLLOW_typeDecl_in_synpred389_Delphi16227);
				typeDecl();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred389_Delphi16231); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred389_Delphi16233);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,DOWNTO,FOLLOW_DOWNTO_in_synpred389_Delphi16235); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred389_Delphi16237);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,DO,FOLLOW_DO_in_synpred389_Delphi16239); if (state.failed) return;

		pushFollow(FOLLOW_statement_in_synpred389_Delphi16241);
		statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred389_Delphi

	// $ANTLR start synpred394_Delphi
	public final void synpred394_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:41: ( statementList )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:41: statementList
		{
		pushFollow(FOLLOW_statementList_in_synpred394_Delphi16529);
		statementList();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred394_Delphi

	// $ANTLR start synpred395_Delphi
	public final void synpred395_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:33: ( statement )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:33: statement
		{
		pushFollow(FOLLOW_statement_in_synpred395_Delphi16599);
		statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred395_Delphi

	// $ANTLR start synpred396_Delphi
	public final void synpred396_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:51: ( statement )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:51: statement
		{
		pushFollow(FOLLOW_statement_in_synpred396_Delphi16607);
		statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred396_Delphi

	// $ANTLR start synpred397_Delphi
	public final void synpred397_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:46: ( ';' ( statement )? )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:46: ';' ( statement )?
		{
		match(input,SEMI,FOLLOW_SEMI_in_synpred397_Delphi16604); if (state.failed) return;

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:50: ( statement )?
		int alt395=2;
		int LA395_0 = input.LA(1);
		if ( (LA395_0==ABSOLUTE||LA395_0==ADD||LA395_0==ANSISTRING||LA395_0==ASM||(LA395_0 >= ASSIGN && LA395_0 <= AT2)||(LA395_0 >= BEGIN && LA395_0 <= CASE)||(LA395_0 >= CONTAINS && LA395_0 <= CONTINUE)||LA395_0==DEFAULT||LA395_0==DISPID||LA395_0==DOT||(LA395_0 >= DQ && LA395_0 <= DW)||LA395_0==EXIT||LA395_0==EXPORT||LA395_0==FALSE||LA395_0==FINAL||LA395_0==FOR||LA395_0==GOTO||LA395_0==HELPER||LA395_0==IF||(LA395_0 >= IMPLEMENTS && LA395_0 <= INHERITED)||LA395_0==LBRACK||(LA395_0 >= LOCAL && LA395_0 <= MESSAGE)||LA395_0==NAME||LA395_0==OBJECT||LA395_0==OPERATOR||LA395_0==OUT||(LA395_0 >= POINTER && LA395_0 <= PRIVATE)||LA395_0==PUBLIC||LA395_0==RAISE||(LA395_0 >= READ && LA395_0 <= READONLY)||(LA395_0 >= REFERENCE && LA395_0 <= REGISTER)||(LA395_0 >= REMOVE && LA395_0 <= REPEAT)||LA395_0==STATIC||(LA395_0 >= STORED && LA395_0 <= STRING)||(LA395_0 >= TRUE && LA395_0 <= TRY)||(LA395_0 >= TkHexNum && LA395_0 <= TkIntNum)||LA395_0==UNSAFE||(LA395_0 >= VAR && LA395_0 <= WRITEONLY)||LA395_0==198||LA395_0==203||LA395_0==209) ) {
			alt395=1;
		}
		else if ( (LA395_0==EOF) ) {
			int LA395_2 = input.LA(2);
			if ( (synpred396_Delphi()) ) {
				alt395=1;
			}
		}
		switch (alt395) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:51: statement
				{
				pushFollow(FOLLOW_statement_in_synpred397_Delphi16607);
				statement();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred397_Delphi

	// $ANTLR start synpred398_Delphi
	public final void synpred398_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:593:32: ( designator ':=' expression )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:593:32: designator ':=' expression
		{
		pushFollow(FOLLOW_designator_in_synpred398_Delphi16661);
		designator();
		state._fsp--;
		if (state.failed) return;

		match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred398_Delphi16663); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred398_Delphi16665);
		expression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred398_Delphi

	// $ANTLR start synpred399_Delphi
	public final void synpred399_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:594:32: ( designator )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:594:32: designator
		{
		pushFollow(FOLLOW_designator_in_synpred399_Delphi16698);
		designator();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred399_Delphi

	// $ANTLR start synpred400_Delphi
	public final void synpred400_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:595:32: ( gotoStatement )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:595:32: gotoStatement
		{
		pushFollow(FOLLOW_gotoStatement_in_synpred400_Delphi16732);
		gotoStatement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred400_Delphi

	// $ANTLR start synpred402_Delphi
	public final void synpred402_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:599:40: ( '(' expression ')' )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:599:40: '(' expression ')'
		{
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred402_Delphi16855); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred402_Delphi16857);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,RPAREN,FOLLOW_RPAREN_in_synpred402_Delphi16859); if (state.failed) return;

		}

	}
	// $ANTLR end synpred402_Delphi

	// $ANTLR start synpred406_Delphi
	public final void synpred406_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:606:32: ( '(' recordConstExpression ( ';' recordConstExpression )* ')' )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:606:32: '(' recordConstExpression ( ';' recordConstExpression )* ')'
		{
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred406_Delphi16980); if (state.failed) return;

		pushFollow(FOLLOW_recordConstExpression_in_synpred406_Delphi16982);
		recordConstExpression();
		state._fsp--;
		if (state.failed) return;

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:606:58: ( ';' recordConstExpression )*
		loop397:
		while (true) {
			int alt397=2;
			int LA397_0 = input.LA(1);
			if ( (LA397_0==SEMI) ) {
				alt397=1;
			}

			switch (alt397) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:606:59: ';' recordConstExpression
				{
				match(input,SEMI,FOLLOW_SEMI_in_synpred406_Delphi16985); if (state.failed) return;

				pushFollow(FOLLOW_recordConstExpression_in_synpred406_Delphi16987);
				recordConstExpression();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop397;
			}
		}

		match(input,RPAREN,FOLLOW_RPAREN_in_synpred406_Delphi16991); if (state.failed) return;

		}

	}
	// $ANTLR end synpred406_Delphi

	// $ANTLR start synpred408_Delphi
	public final void synpred408_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:607:80: ( constExpression )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:607:80: constExpression
		{
		pushFollow(FOLLOW_constExpression_in_synpred408_Delphi17039);
		constExpression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred408_Delphi

	// $ANTLR start synpred409_Delphi
	public final void synpred409_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:607:32: ( '(' constExpression ( ',' constExpression )* ')' ( constExpression )? )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:607:32: '(' constExpression ( ',' constExpression )* ')' ( constExpression )?
		{
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred409_Delphi17025); if (state.failed) return;

		pushFollow(FOLLOW_constExpression_in_synpred409_Delphi17027);
		constExpression();
		state._fsp--;
		if (state.failed) return;

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:607:52: ( ',' constExpression )*
		loop398:
		while (true) {
			int alt398=2;
			int LA398_0 = input.LA(1);
			if ( (LA398_0==COMMA) ) {
				alt398=1;
			}

			switch (alt398) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:607:53: ',' constExpression
				{
				match(input,COMMA,FOLLOW_COMMA_in_synpred409_Delphi17030); if (state.failed) return;

				pushFollow(FOLLOW_constExpression_in_synpred409_Delphi17032);
				constExpression();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop398;
			}
		}

		match(input,RPAREN,FOLLOW_RPAREN_in_synpred409_Delphi17036); if (state.failed) return;

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:607:79: ( constExpression )?
		int alt399=2;
		int LA399_0 = input.LA(1);
		if ( (LA399_0==ABSOLUTE||(LA399_0 >= ADD && LA399_0 <= ANSISTRING)||LA399_0==AS||(LA399_0 >= AT && LA399_0 <= AT2)||LA399_0==BREAK||(LA399_0 >= CONTAINS && LA399_0 <= DEFAULT)||LA399_0==DISPID||LA399_0==DIV||LA399_0==DOT||(LA399_0 >= DQ && LA399_0 <= DW)||LA399_0==EQUAL||LA399_0==EXIT||LA399_0==EXPORT||LA399_0==FALSE||LA399_0==FINAL||(LA399_0 >= FUNCTION && LA399_0 <= GE)||(LA399_0 >= GT && LA399_0 <= HELPER)||(LA399_0 >= IMPLEMENTS && LA399_0 <= INHERITED)||LA399_0==IS||LA399_0==LBRACK||LA399_0==LE||(LA399_0 >= LOCAL && LA399_0 <= NAME)||LA399_0==NIL||(LA399_0 >= NOT && LA399_0 <= OBJECT)||(LA399_0 >= OPERATOR && LA399_0 <= OUT)||(LA399_0 >= PLUS && LA399_0 <= PROCEDURE)||LA399_0==PUBLIC||LA399_0==QuotedString||(LA399_0 >= READ && LA399_0 <= READONLY)||(LA399_0 >= REFERENCE && LA399_0 <= REGISTER)||LA399_0==REMOVE||(LA399_0 >= SHL && LA399_0 <= STATIC)||(LA399_0 >= STORED && LA399_0 <= STRING)||LA399_0==TRUE||(LA399_0 >= TkHexNum && LA399_0 <= TkIntNum)||LA399_0==TkRealNum||LA399_0==UNSAFE||(LA399_0 >= VARARGS && LA399_0 <= VIRTUAL)||(LA399_0 >= WRITE && LA399_0 <= WRITEONLY)||(LA399_0 >= XOR && LA399_0 <= 210)) ) {
			alt399=1;
		}
		else if ( (LA399_0==EOF) ) {
			int LA399_2 = input.LA(2);
			if ( (synpred408_Delphi()) ) {
				alt399=1;
			}
		}
		switch (alt399) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:607:80: constExpression
				{
				pushFollow(FOLLOW_constExpression_in_synpred409_Delphi17039);
				constExpression();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred409_Delphi

	// $ANTLR start synpred411_Delphi
	public final void synpred411_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:615:39: ( statementList )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:615:39: statementList
		{
		pushFollow(FOLLOW_statementList_in_synpred411_Delphi17187);
		statementList();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred411_Delphi

	// $ANTLR start synpred412_Delphi
	public final void synpred412_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:615:32: ( 'try' ( statementList )? 'except' handlerList 'end' )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:615:32: 'try' ( statementList )? 'except' handlerList 'end'
		{
		match(input,TRY,FOLLOW_TRY_in_synpred412_Delphi17184); if (state.failed) return;

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:615:38: ( statementList )?
		int alt400=2;
		int LA400_0 = input.LA(1);
		if ( (LA400_0==ABSOLUTE||LA400_0==ADD||LA400_0==ANSISTRING||LA400_0==ASM||(LA400_0 >= ASSIGN && LA400_0 <= AT2)||(LA400_0 >= BEGIN && LA400_0 <= CASE)||(LA400_0 >= CONTAINS && LA400_0 <= CONTINUE)||LA400_0==DEFAULT||LA400_0==DISPID||LA400_0==DOT||(LA400_0 >= DQ && LA400_0 <= DW)||LA400_0==EXIT||LA400_0==EXPORT||LA400_0==FALSE||LA400_0==FINAL||LA400_0==FOR||LA400_0==GOTO||LA400_0==HELPER||LA400_0==IF||(LA400_0 >= IMPLEMENTS && LA400_0 <= INHERITED)||LA400_0==LBRACK||(LA400_0 >= LOCAL && LA400_0 <= MESSAGE)||LA400_0==NAME||LA400_0==OBJECT||LA400_0==OPERATOR||LA400_0==OUT||(LA400_0 >= POINTER && LA400_0 <= PRIVATE)||LA400_0==PUBLIC||LA400_0==RAISE||(LA400_0 >= READ && LA400_0 <= READONLY)||(LA400_0 >= REFERENCE && LA400_0 <= REGISTER)||(LA400_0 >= REMOVE && LA400_0 <= REPEAT)||LA400_0==SEMI||LA400_0==STATIC||(LA400_0 >= STORED && LA400_0 <= STRING)||(LA400_0 >= TRUE && LA400_0 <= TRY)||(LA400_0 >= TkHexNum && LA400_0 <= TkIntNum)||LA400_0==UNSAFE||(LA400_0 >= VAR && LA400_0 <= WRITEONLY)||LA400_0==198||LA400_0==203||LA400_0==209) ) {
			alt400=1;
		}
		else if ( (LA400_0==EXCEPT) ) {
			int LA400_2 = input.LA(2);
			if ( (synpred411_Delphi()) ) {
				alt400=1;
			}
		}
		switch (alt400) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:615:39: statementList
				{
				pushFollow(FOLLOW_statementList_in_synpred412_Delphi17187);
				statementList();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		match(input,EXCEPT,FOLLOW_EXCEPT_in_synpred412_Delphi17191); if (state.failed) return;

		pushFollow(FOLLOW_handlerList_in_synpred412_Delphi17193);
		handlerList();
		state._fsp--;
		if (state.failed) return;

		match(input,END,FOLLOW_END_in_synpred412_Delphi17195); if (state.failed) return;

		}

	}
	// $ANTLR end synpred412_Delphi

	// $ANTLR start synpred413_Delphi
	public final void synpred413_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:616:39: ( statementList )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:616:39: statementList
		{
		pushFollow(FOLLOW_statementList_in_synpred413_Delphi17231);
		statementList();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred413_Delphi

	// $ANTLR start synpred414_Delphi
	public final void synpred414_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:616:66: ( statementList )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:616:66: statementList
		{
		pushFollow(FOLLOW_statementList_in_synpred414_Delphi17238);
		statementList();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred414_Delphi

	// $ANTLR start synpred417_Delphi
	public final void synpred417_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:618:32: ( ( handler )* ( 'else' statementList )? )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:618:32: ( handler )* ( 'else' statementList )?
		{
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:618:32: ( handler )*
		loop401:
		while (true) {
			int alt401=2;
			int LA401_0 = input.LA(1);
			if ( (LA401_0==ON) ) {
				alt401=1;
			}

			switch (alt401) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:618:33: handler
				{
				pushFollow(FOLLOW_handler_in_synpred417_Delphi17297);
				handler();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop401;
			}
		}

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:618:43: ( 'else' statementList )?
		int alt402=2;
		int LA402_0 = input.LA(1);
		if ( (LA402_0==ELSE) ) {
			alt402=1;
		}
		switch (alt402) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:618:44: 'else' statementList
				{
				match(input,ELSE,FOLLOW_ELSE_in_synpred417_Delphi17302); if (state.failed) return;

				pushFollow(FOLLOW_statementList_in_synpred417_Delphi17304);
				statementList();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred417_Delphi

	// $ANTLR start synpred420_Delphi
	public final void synpred420_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:625:32: ( statement ( ';' )? )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:625:32: statement ( ';' )?
		{
		pushFollow(FOLLOW_statement_in_synpred420_Delphi17514);
		statement();
		state._fsp--;
		if (state.failed) return;

		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:625:42: ( ';' )?
		int alt403=2;
		int LA403_0 = input.LA(1);
		if ( (LA403_0==SEMI) ) {
			alt403=1;
		}
		switch (alt403) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:625:43: ';'
				{
				match(input,SEMI,FOLLOW_SEMI_in_synpred420_Delphi17517); if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred420_Delphi

	// $ANTLR start synpred421_Delphi
	public final void synpred421_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:628:41: ( designator )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:628:41: designator
		{
		pushFollow(FOLLOW_designator_in_synpred421_Delphi17606);
		designator();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred421_Delphi

	// $ANTLR start synpred422_Delphi
	public final void synpred422_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:628:55: ( AT designator )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:628:55: AT designator
		{
		match(input,AT,FOLLOW_AT_in_synpred422_Delphi17611); if (state.failed) return;

		pushFollow(FOLLOW_designator_in_synpred422_Delphi17613);
		designator();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred422_Delphi

	// $ANTLR start synpred436_Delphi
	public final void synpred436_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:651:32: ( callConvention )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:651:32: callConvention
		{
		pushFollow(FOLLOW_callConvention_in_synpred436_Delphi18269);
		callConvention();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred436_Delphi

	// $ANTLR start synpred440_Delphi
	public final void synpred440_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:654:32: ( ( callConventionNoSemi )? externalDirective )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:654:32: ( callConventionNoSemi )? externalDirective
		{
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:654:32: ( callConventionNoSemi )?
		int alt404=2;
		int LA404_0 = input.LA(1);
		if ( (LA404_0==CDECL||LA404_0==EXPORT||LA404_0==PASCAL||LA404_0==REGISTER||LA404_0==SAFECALL||LA404_0==STDCALL) ) {
			alt404=1;
		}
		switch (alt404) {
			case 1 :
				// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:654:33: callConventionNoSemi
				{
				pushFollow(FOLLOW_callConventionNoSemi_in_synpred440_Delphi18392);
				callConventionNoSemi();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_externalDirective_in_synpred440_Delphi18396);
		externalDirective();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred440_Delphi

	// $ANTLR start synpred441_Delphi
	public final void synpred441_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:655:32: ( externalDirective )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:655:32: externalDirective
		{
		pushFollow(FOLLOW_externalDirective_in_synpred441_Delphi18439);
		externalDirective();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred441_Delphi

	// $ANTLR start synpred442_Delphi
	public final void synpred442_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:658:47: ( ';' )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:658:47: ';'
		{
		match(input,SEMI,FOLLOW_SEMI_in_synpred442_Delphi18537); if (state.failed) return;

		}

	}
	// $ANTLR end synpred442_Delphi

	// $ANTLR start synpred443_Delphi
	public final void synpred443_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:660:44: ( ';' )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:660:44: ';'
		{
		match(input,SEMI,FOLLOW_SEMI_in_synpred443_Delphi18590); if (state.failed) return;

		}

	}
	// $ANTLR end synpred443_Delphi

	// $ANTLR start synpred467_Delphi
	public final void synpred467_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:698:32: ( 'external' ';' )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:698:32: 'external' ';'
		{
		match(input,EXTERNAL,FOLLOW_EXTERNAL_in_synpred467_Delphi19795); if (state.failed) return;

		match(input,SEMI,FOLLOW_SEMI_in_synpred467_Delphi19797); if (state.failed) return;

		}

	}
	// $ANTLR end synpred467_Delphi

	// $ANTLR start synpred656_Delphi
	public final void synpred656_Delphi_fragment() throws RecognitionException {
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:750:34: ( ident '.' )
		// D:\\Projects\\SonarDelphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:750:34: ident '.'
		{
		pushFollow(FOLLOW_ident_in_synpred656_Delphi22014);
		ident();
		state._fsp--;
		if (state.failed) return;

		match(input,DOT,FOLLOW_DOT_in_synpred656_Delphi22016); if (state.failed) return;

		}

	}
	// $ANTLR end synpred656_Delphi

	// Delegated rules

	public final boolean synpred31_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred31_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred35_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred35_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred30_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred30_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred71_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred71_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred70_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred70_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred72_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred72_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred394_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred394_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred261_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred261_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred262_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred262_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred299_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred299_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred297_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred297_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred310_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred310_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred317_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred317_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred296_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred296_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred298_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred298_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred312_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred312_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred315_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred315_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred316_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred316_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred311_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred311_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred313_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred313_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred408_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred408_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred125_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred125_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred417_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred417_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred442_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred442_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred134_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred134_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred293_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred293_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred295_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred295_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred406_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred406_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred440_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred440_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred127_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred127_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred121_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred121_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred413_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred413_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred263_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred263_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred265_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred265_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred254_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred254_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred398_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred398_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred66_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred66_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred396_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred396_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred218_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred218_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred252_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred252_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred400_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred400_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred402_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred402_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred39_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred39_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred411_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred411_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred64_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred64_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred389_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred389_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred37_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred37_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred221_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred221_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred24_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred24_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred197_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred197_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred383_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred383_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred62_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred62_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred176_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred176_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred251_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred251_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred83_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred83_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred157_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred157_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred305_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred305_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred306_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred306_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred324_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred324_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred320_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred320_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred158_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred158_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred270_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred270_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred323_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred323_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred309_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred309_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred154_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred154_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred301_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred301_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred135_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred135_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred302_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred302_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred288_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred288_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred289_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred289_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred124_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred124_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred150_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred150_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred292_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred292_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred414_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred414_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred443_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred443_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred421_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred421_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred161_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred161_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred436_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred436_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred266_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred266_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred183_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred183_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred190_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred190_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred397_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred397_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred69_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred69_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred65_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred65_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred386_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred386_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred54_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred54_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred375_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred375_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred194_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred194_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred47_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred47_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred222_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred222_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred204_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred204_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred187_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred187_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred189_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred189_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred240_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred240_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred200_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred200_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred206_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred206_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred201_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred201_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred336_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred336_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred656_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred656_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred149_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred149_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred467_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred467_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred94_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred94_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred90_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred90_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred92_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred92_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred145_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred145_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred143_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred143_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred283_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred283_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred280_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred280_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred146_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred146_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred282_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred282_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred142_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred142_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred276_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred276_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred300_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred300_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred151_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred151_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred249_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred249_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred278_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred278_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred88_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred88_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred420_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred420_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred422_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred422_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred112_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred112_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred110_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred110_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred182_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred182_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred241_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred241_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred245_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred245_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred376_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred376_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred53_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred53_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred55_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred55_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred44_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred44_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred41_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred41_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred213_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred213_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred177_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred177_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred23_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred23_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred322_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred322_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred304_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred304_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred321_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred321_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred156_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred156_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred325_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred325_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred308_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred308_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred303_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred303_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred307_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred307_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred286_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred286_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred287_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred287_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred441_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred441_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred409_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred409_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred89_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred89_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred294_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred294_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred126_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred126_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred152_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred152_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred279_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred279_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred96_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred96_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred399_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred399_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred412_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred412_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred85_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred85_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred115_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred115_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred119_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred119_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred111_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred111_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred49_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred49_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred395_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred395_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred235_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred235_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred217_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred217_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred242_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred242_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred246_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred246_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred67_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred67_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred63_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred63_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred45_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred45_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred196_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred196_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}


	protected DFA26 dfa26 = new DFA26(this);
	protected DFA30 dfa30 = new DFA30(this);
	protected DFA33 dfa33 = new DFA33(this);
	protected DFA57 dfa57 = new DFA57(this);
	protected DFA59 dfa59 = new DFA59(this);
	protected DFA61 dfa61 = new DFA61(this);
	protected DFA70 dfa70 = new DFA70(this);
	protected DFA88 dfa88 = new DFA88(this);
	protected DFA100 dfa100 = new DFA100(this);
	protected DFA174 dfa174 = new DFA174(this);
	protected DFA192 dfa192 = new DFA192(this);
	protected DFA205 dfa205 = new DFA205(this);
	protected DFA216 dfa216 = new DFA216(this);
	protected DFA223 dfa223 = new DFA223(this);
	protected DFA226 dfa226 = new DFA226(this);
	protected DFA236 dfa236 = new DFA236(this);
	protected DFA273 dfa273 = new DFA273(this);
	protected DFA272 dfa272 = new DFA272(this);
	static final String DFA26_eotS =
		"\152\uffff";
	static final String DFA26_eofS =
		"\1\1\151\uffff";
	static final String DFA26_minS =
		"\1\4\7\uffff\1\0\22\uffff\2\0\7\uffff\3\0\3\uffff\1\0\12\uffff\1\0\3\uffff"+
		"\7\0\1\uffff\1\0\5\uffff\1\0\2\uffff\1\0\1\uffff\1\0\5\uffff\1\0\1\uffff"+
		"\1\0\1\uffff\1\0\5\uffff\1\0\2\uffff\1\0\1\uffff\2\0\2\uffff\1\0\4\uffff";
	static final String DFA26_maxS =
		"\1\u00d2\7\uffff\1\0\22\uffff\2\0\7\uffff\3\0\3\uffff\1\0\12\uffff\1\0"+
		"\3\uffff\7\0\1\uffff\1\0\5\uffff\1\0\2\uffff\1\0\1\uffff\1\0\5\uffff\1"+
		"\0\1\uffff\1\0\1\uffff\1\0\5\uffff\1\0\2\uffff\1\0\1\uffff\2\0\2\uffff"+
		"\1\0\4\uffff";
	static final String DFA26_acceptS =
		"\1\uffff\1\2\147\uffff\1\1";
	static final String DFA26_specialS =
		"\10\uffff\1\0\22\uffff\1\1\1\2\7\uffff\1\3\1\4\1\5\3\uffff\1\6\12\uffff"+
		"\1\7\3\uffff\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\uffff\1\17\5\uffff\1"+
		"\20\2\uffff\1\21\1\uffff\1\22\5\uffff\1\23\1\uffff\1\24\1\uffff\1\25\5"+
		"\uffff\1\26\2\uffff\1\27\1\uffff\1\30\1\31\2\uffff\1\32\4\uffff}>";
	static final String[] DFA26_transitionS = {
			"\1\126\1\uffff\1\145\1\1\1\145\1\uffff\3\1\1\uffff\1\1\1\145\2\1\1\uffff"+
			"\1\1\1\145\5\1\1\uffff\2\1\2\145\1\1\1\76\3\1\1\74\1\uffff\5\1\2\145"+
			"\3\uffff\4\1\1\145\1\1\1\107\2\1\1\34\1\1\1\uffff\1\145\2\1\2\uffff\2"+
			"\1\1\uffff\1\1\1\145\3\uffff\1\1\1\77\1\46\1\124\3\1\1\uffff\2\1\1\10"+
			"\2\uffff\2\1\1\112\2\1\1\145\2\1\1\52\5\1\1\145\2\1\1\142\1\1\1\145\1"+
			"\1\3\uffff\3\1\1\145\1\1\1\137\1\1\1\uffff\2\1\1\141\2\1\1\uffff\1\1"+
			"\2\uffff\1\65\1\72\1\uffff\1\145\1\101\1\uffff\1\145\2\uffff\4\1\1\uffff"+
			"\1\1\1\uffff\4\1\1\145\1\1\1\75\1\134\1\145\3\1\1\33\1\uffff\1\1\15\uffff"+
			"\1\1\1\44\1\1\3\uffff\1\1\6\uffff\1\122\1\1\2\uffff\1\1\1\114\2\145\2"+
			"\uffff\1\71\1\73\1\uffff\1\1\1\45\14\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			""
	};

	static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_eotS);
	static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_eofS);
	static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_minS);
	static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_maxS);
	static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_acceptS);
	static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_specialS);
	static final short[][] DFA26_transition;

	static {
		int numStates = DFA26_transitionS.length;
		DFA26_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA26_transition[i] = DFA.unpackEncodedString(DFA26_transitionS[i]);
		}
	}

	protected class DFA26 extends DFA {

		public DFA26(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 26;
			this.eot = DFA26_eot;
			this.eof = DFA26_eof;
			this.min = DFA26_min;
			this.max = DFA26_max;
			this.accept = DFA26_accept;
			this.special = DFA26_special;
			this.transition = DFA26_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 158:41: ( constDeclaration )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA26_8 = input.LA(1);
						 
						int index26_8 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_8);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA26_27 = input.LA(1);
						 
						int index26_27 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_27);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA26_28 = input.LA(1);
						 
						int index26_28 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_28);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA26_36 = input.LA(1);
						 
						int index26_36 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_36);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA26_37 = input.LA(1);
						 
						int index26_37 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_37);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA26_38 = input.LA(1);
						 
						int index26_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_38);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA26_42 = input.LA(1);
						 
						int index26_42 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_42);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA26_53 = input.LA(1);
						 
						int index26_53 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_53);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA26_57 = input.LA(1);
						 
						int index26_57 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_57);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA26_58 = input.LA(1);
						 
						int index26_58 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_58);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA26_59 = input.LA(1);
						 
						int index26_59 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_59);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA26_60 = input.LA(1);
						 
						int index26_60 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_60);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA26_61 = input.LA(1);
						 
						int index26_61 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_61);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA26_62 = input.LA(1);
						 
						int index26_62 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_62);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA26_63 = input.LA(1);
						 
						int index26_63 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_63);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA26_65 = input.LA(1);
						 
						int index26_65 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_65);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA26_71 = input.LA(1);
						 
						int index26_71 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_71);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA26_74 = input.LA(1);
						 
						int index26_74 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_74);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA26_76 = input.LA(1);
						 
						int index26_76 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_76);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA26_82 = input.LA(1);
						 
						int index26_82 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_82);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA26_84 = input.LA(1);
						 
						int index26_84 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_84);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA26_86 = input.LA(1);
						 
						int index26_86 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_86);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA26_92 = input.LA(1);
						 
						int index26_92 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_92);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA26_95 = input.LA(1);
						 
						int index26_95 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_95);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA26_97 = input.LA(1);
						 
						int index26_97 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_97);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA26_98 = input.LA(1);
						 
						int index26_98 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_98);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA26_101 = input.LA(1);
						 
						int index26_101 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_101);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 26, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA30_eotS =
		"\152\uffff";
	static final String DFA30_eofS =
		"\1\1\151\uffff";
	static final String DFA30_minS =
		"\1\4\7\uffff\1\0\22\uffff\2\0\7\uffff\3\0\3\uffff\1\0\12\uffff\1\0\3\uffff"+
		"\7\0\1\uffff\1\0\5\uffff\1\0\2\uffff\1\0\1\uffff\1\0\5\uffff\1\0\1\uffff"+
		"\1\0\1\uffff\1\0\5\uffff\1\0\2\uffff\1\0\1\uffff\2\0\2\uffff\1\0\4\uffff";
	static final String DFA30_maxS =
		"\1\u00d2\7\uffff\1\0\22\uffff\2\0\7\uffff\3\0\3\uffff\1\0\12\uffff\1\0"+
		"\3\uffff\7\0\1\uffff\1\0\5\uffff\1\0\2\uffff\1\0\1\uffff\1\0\5\uffff\1"+
		"\0\1\uffff\1\0\1\uffff\1\0\5\uffff\1\0\2\uffff\1\0\1\uffff\2\0\2\uffff"+
		"\1\0\4\uffff";
	static final String DFA30_acceptS =
		"\1\uffff\1\2\147\uffff\1\1";
	static final String DFA30_specialS =
		"\10\uffff\1\0\22\uffff\1\1\1\2\7\uffff\1\3\1\4\1\5\3\uffff\1\6\12\uffff"+
		"\1\7\3\uffff\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\uffff\1\17\5\uffff\1"+
		"\20\2\uffff\1\21\1\uffff\1\22\5\uffff\1\23\1\uffff\1\24\1\uffff\1\25\5"+
		"\uffff\1\26\2\uffff\1\27\1\uffff\1\30\1\31\2\uffff\1\32\4\uffff}>";
	static final String[] DFA30_transitionS = {
			"\1\126\1\uffff\1\145\1\1\1\145\1\uffff\3\1\1\uffff\1\1\1\145\2\1\1\uffff"+
			"\1\1\1\145\5\1\1\uffff\2\1\2\145\1\1\1\76\3\1\1\74\1\uffff\5\1\2\145"+
			"\3\uffff\4\1\1\145\1\1\1\107\2\1\1\34\1\1\1\uffff\1\145\2\1\2\uffff\2"+
			"\1\1\uffff\1\1\1\145\3\uffff\1\1\1\77\1\46\1\124\3\1\1\uffff\2\1\1\10"+
			"\2\uffff\2\1\1\112\2\1\1\145\2\1\1\52\5\1\1\145\2\1\1\142\1\1\1\145\1"+
			"\1\3\uffff\3\1\1\145\1\1\1\137\1\1\1\uffff\2\1\1\141\2\1\1\uffff\1\1"+
			"\2\uffff\1\65\1\72\1\uffff\1\145\1\101\1\uffff\1\145\2\uffff\4\1\1\uffff"+
			"\1\1\1\uffff\4\1\1\145\1\1\1\75\1\134\1\145\3\1\1\33\1\uffff\1\1\15\uffff"+
			"\1\1\1\44\1\1\3\uffff\1\1\6\uffff\1\122\1\1\2\uffff\1\1\1\114\2\145\2"+
			"\uffff\1\71\1\73\1\uffff\1\1\1\45\14\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			""
	};

	static final short[] DFA30_eot = DFA.unpackEncodedString(DFA30_eotS);
	static final short[] DFA30_eof = DFA.unpackEncodedString(DFA30_eofS);
	static final char[] DFA30_min = DFA.unpackEncodedStringToUnsignedChars(DFA30_minS);
	static final char[] DFA30_max = DFA.unpackEncodedStringToUnsignedChars(DFA30_maxS);
	static final short[] DFA30_accept = DFA.unpackEncodedString(DFA30_acceptS);
	static final short[] DFA30_special = DFA.unpackEncodedString(DFA30_specialS);
	static final short[][] DFA30_transition;

	static {
		int numStates = DFA30_transitionS.length;
		DFA30_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA30_transition[i] = DFA.unpackEncodedString(DFA30_transitionS[i]);
		}
	}

	protected class DFA30 extends DFA {

		public DFA30(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 30;
			this.eot = DFA30_eot;
			this.eof = DFA30_eof;
			this.min = DFA30_min;
			this.max = DFA30_max;
			this.accept = DFA30_accept;
			this.special = DFA30_special;
			this.transition = DFA30_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 165:55: ( typeDeclaration )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA30_8 = input.LA(1);
						 
						int index30_8 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_8);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA30_27 = input.LA(1);
						 
						int index30_27 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_27);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA30_28 = input.LA(1);
						 
						int index30_28 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_28);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA30_36 = input.LA(1);
						 
						int index30_36 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_36);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA30_37 = input.LA(1);
						 
						int index30_37 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_37);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA30_38 = input.LA(1);
						 
						int index30_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_38);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA30_42 = input.LA(1);
						 
						int index30_42 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_42);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA30_53 = input.LA(1);
						 
						int index30_53 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_53);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA30_57 = input.LA(1);
						 
						int index30_57 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_57);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA30_58 = input.LA(1);
						 
						int index30_58 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_58);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA30_59 = input.LA(1);
						 
						int index30_59 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_59);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA30_60 = input.LA(1);
						 
						int index30_60 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_60);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA30_61 = input.LA(1);
						 
						int index30_61 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_61);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA30_62 = input.LA(1);
						 
						int index30_62 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_62);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA30_63 = input.LA(1);
						 
						int index30_63 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_63);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA30_65 = input.LA(1);
						 
						int index30_65 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_65);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA30_71 = input.LA(1);
						 
						int index30_71 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_71);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA30_74 = input.LA(1);
						 
						int index30_74 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_74);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA30_76 = input.LA(1);
						 
						int index30_76 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_76);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA30_82 = input.LA(1);
						 
						int index30_82 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_82);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA30_84 = input.LA(1);
						 
						int index30_84 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_84);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA30_86 = input.LA(1);
						 
						int index30_86 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_86);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA30_92 = input.LA(1);
						 
						int index30_92 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_92);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA30_95 = input.LA(1);
						 
						int index30_95 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_95);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA30_97 = input.LA(1);
						 
						int index30_97 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_97);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA30_98 = input.LA(1);
						 
						int index30_98 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_98);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA30_101 = input.LA(1);
						 
						int index30_101 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_101);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 30, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA33_eotS =
		"\152\uffff";
	static final String DFA33_eofS =
		"\1\1\151\uffff";
	static final String DFA33_minS =
		"\1\4\7\uffff\1\0\22\uffff\2\0\7\uffff\3\0\3\uffff\1\0\12\uffff\1\0\3\uffff"+
		"\7\0\1\uffff\1\0\5\uffff\1\0\2\uffff\1\0\1\uffff\1\0\5\uffff\1\0\1\uffff"+
		"\1\0\1\uffff\1\0\5\uffff\1\0\2\uffff\1\0\1\uffff\2\0\2\uffff\1\0\4\uffff";
	static final String DFA33_maxS =
		"\1\u00d2\7\uffff\1\0\22\uffff\2\0\7\uffff\3\0\3\uffff\1\0\12\uffff\1\0"+
		"\3\uffff\7\0\1\uffff\1\0\5\uffff\1\0\2\uffff\1\0\1\uffff\1\0\5\uffff\1"+
		"\0\1\uffff\1\0\1\uffff\1\0\5\uffff\1\0\2\uffff\1\0\1\uffff\2\0\2\uffff"+
		"\1\0\4\uffff";
	static final String DFA33_acceptS =
		"\1\uffff\1\2\147\uffff\1\1";
	static final String DFA33_specialS =
		"\10\uffff\1\0\22\uffff\1\1\1\2\7\uffff\1\3\1\4\1\5\3\uffff\1\6\12\uffff"+
		"\1\7\3\uffff\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\uffff\1\17\5\uffff\1"+
		"\20\2\uffff\1\21\1\uffff\1\22\5\uffff\1\23\1\uffff\1\24\1\uffff\1\25\5"+
		"\uffff\1\26\2\uffff\1\27\1\uffff\1\30\1\31\2\uffff\1\32\4\uffff}>";
	static final String[] DFA33_transitionS = {
			"\1\126\1\uffff\1\145\1\1\1\145\1\uffff\3\1\1\uffff\1\1\1\145\2\1\1\uffff"+
			"\1\1\1\145\5\1\1\uffff\2\1\2\145\1\1\1\76\3\1\1\74\1\uffff\5\1\2\145"+
			"\3\uffff\4\1\1\145\1\1\1\107\2\1\1\34\1\1\1\uffff\1\145\2\1\2\uffff\2"+
			"\1\1\uffff\1\1\1\145\3\uffff\1\1\1\77\1\46\1\124\3\1\1\uffff\2\1\1\10"+
			"\2\uffff\2\1\1\112\2\1\1\145\2\1\1\52\5\1\1\145\2\1\1\142\1\1\1\145\1"+
			"\1\3\uffff\3\1\1\145\1\1\1\137\1\1\1\uffff\2\1\1\141\2\1\1\uffff\1\1"+
			"\2\uffff\1\65\1\72\1\uffff\1\145\1\101\1\uffff\1\145\2\uffff\4\1\1\uffff"+
			"\1\1\1\uffff\4\1\1\145\1\1\1\75\1\134\1\145\3\1\1\33\1\uffff\1\1\15\uffff"+
			"\1\1\1\44\1\1\3\uffff\1\1\6\uffff\1\122\1\1\2\uffff\1\1\1\114\2\145\2"+
			"\uffff\1\71\1\73\1\uffff\1\1\1\45\14\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			""
	};

	static final short[] DFA33_eot = DFA.unpackEncodedString(DFA33_eotS);
	static final short[] DFA33_eof = DFA.unpackEncodedString(DFA33_eofS);
	static final char[] DFA33_min = DFA.unpackEncodedStringToUnsignedChars(DFA33_minS);
	static final char[] DFA33_max = DFA.unpackEncodedStringToUnsignedChars(DFA33_maxS);
	static final short[] DFA33_accept = DFA.unpackEncodedString(DFA33_acceptS);
	static final short[] DFA33_special = DFA.unpackEncodedString(DFA33_specialS);
	static final short[][] DFA33_transition;

	static {
		int numStates = DFA33_transitionS.length;
		DFA33_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA33_transition[i] = DFA.unpackEncodedString(DFA33_transitionS[i]);
		}
	}

	protected class DFA33 extends DFA {

		public DFA33(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 33;
			this.eot = DFA33_eot;
			this.eof = DFA33_eof;
			this.min = DFA33_min;
			this.max = DFA33_max;
			this.accept = DFA33_accept;
			this.special = DFA33_special;
			this.transition = DFA33_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 169:54: ( varDeclaration )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA33_8 = input.LA(1);
						 
						int index33_8 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_8);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA33_27 = input.LA(1);
						 
						int index33_27 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_27);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA33_28 = input.LA(1);
						 
						int index33_28 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_28);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA33_36 = input.LA(1);
						 
						int index33_36 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_36);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA33_37 = input.LA(1);
						 
						int index33_37 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_37);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA33_38 = input.LA(1);
						 
						int index33_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_38);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA33_42 = input.LA(1);
						 
						int index33_42 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_42);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA33_53 = input.LA(1);
						 
						int index33_53 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_53);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA33_57 = input.LA(1);
						 
						int index33_57 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_57);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA33_58 = input.LA(1);
						 
						int index33_58 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_58);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA33_59 = input.LA(1);
						 
						int index33_59 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_59);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA33_60 = input.LA(1);
						 
						int index33_60 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_60);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA33_61 = input.LA(1);
						 
						int index33_61 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_61);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA33_62 = input.LA(1);
						 
						int index33_62 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_62);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA33_63 = input.LA(1);
						 
						int index33_63 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_63);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA33_65 = input.LA(1);
						 
						int index33_65 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_65);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA33_71 = input.LA(1);
						 
						int index33_71 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_71);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA33_74 = input.LA(1);
						 
						int index33_74 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_74);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA33_76 = input.LA(1);
						 
						int index33_76 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_76);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA33_82 = input.LA(1);
						 
						int index33_82 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_82);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA33_84 = input.LA(1);
						 
						int index33_84 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_84);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA33_86 = input.LA(1);
						 
						int index33_86 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_86);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA33_92 = input.LA(1);
						 
						int index33_92 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_92);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA33_95 = input.LA(1);
						 
						int index33_95 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_95);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA33_97 = input.LA(1);
						 
						int index33_97 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_97);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA33_98 = input.LA(1);
						 
						int index33_98 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_98);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA33_101 = input.LA(1);
						 
						int index33_101 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_101);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 33, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA57_eotS =
		"\27\uffff";
	static final String DFA57_eofS =
		"\1\uffff\1\11\1\uffff\1\11\1\uffff\3\11\2\uffff\2\11\1\uffff\1\11\1\uffff"+
		"\2\11\1\uffff\5\11";
	static final String DFA57_minS =
		"\1\4\1\7\1\4\1\7\1\uffff\1\7\1\4\1\7\1\4\1\uffff\2\7\1\4\1\7\1\4\2\7\1"+
		"\4\5\7";
	static final String DFA57_maxS =
		"\1\u00d2\1\u00d1\1\u00c5\1\u00d1\1\uffff\1\u00d1\1\u00d2\1\u00d1\1\u00c6"+
		"\1\uffff\2\u00d1\1\u00c6\1\u00d1\1\u00c5\2\u00d1\1\u00c5\5\u00d1";
	static final String DFA57_acceptS =
		"\4\uffff\1\2\4\uffff\1\1\15\uffff";
	static final String DFA57_specialS =
		"\27\uffff}>";
	static final String[] DFA57_transitionS = {
			"\1\7\1\uffff\1\7\1\4\1\7\1\uffff\1\4\4\uffff\1\7\1\4\3\uffff\1\7\10\uffff"+
			"\2\7\1\4\1\7\3\uffff\1\7\1\uffff\1\4\1\uffff\2\4\1\uffff\2\7\5\uffff"+
			"\1\4\1\uffff\1\7\1\uffff\1\7\2\uffff\1\5\2\uffff\1\7\4\uffff\2\4\1\uffff"+
			"\1\4\1\7\4\uffff\1\7\1\6\1\7\1\4\3\uffff\1\4\1\uffff\1\4\2\uffff\1\4"+
			"\1\uffff\1\7\2\4\1\7\2\4\1\7\1\uffff\1\4\1\uffff\2\4\1\7\2\uffff\1\7"+
			"\1\4\1\7\6\uffff\1\4\1\7\1\4\1\7\1\4\3\uffff\1\7\1\uffff\1\4\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\11\uffff\4\4\1\7\1\uffff\3\7\3\uffff\1\3"+
			"\17\uffff\1\4\1\1\1\4\3\uffff\1\4\6\uffff\1\7\4\uffff\3\7\2\uffff\2\7"+
			"\1\uffff\1\4\1\2\14\4",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\11\14\uffff\1\4\1\uffff\1\10"+
			"\1\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1"+
			"\uffff\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1"+
			"\4\7\uffff\1\4\1\uffff\1\4\11\uffff\1\11\22\uffff\4\4\62\uffff\1\4\2"+
			"\uffff\3\4\1\uffff\6\4",
			"\12\13\1\uffff\1\13\1\uffff\1\13\1\uffff\5\13\3\uffff\4\13\1\uffff\1"+
			"\13\1\uffff\6\13\2\uffff\4\13\2\uffff\2\13\1\uffff\17\13\1\uffff\1\13"+
			"\1\uffff\1\13\2\uffff\13\13\4\uffff\2\13\2\uffff\1\13\1\uffff\6\13\1"+
			"\uffff\14\13\1\uffff\1\13\1\uffff\7\13\1\uffff\1\13\3\uffff\13\13\1\uffff"+
			"\2\13\1\uffff\3\13\2\uffff\13\13\16\uffff\1\12\12\uffff\4\13\1\uffff"+
			"\10\13\1\uffff\1\13",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\11\14\uffff\1\4\1\uffff\1\10"+
			"\1\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1"+
			"\uffff\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1"+
			"\4\7\uffff\1\4\1\uffff\1\4\11\uffff\1\11\22\uffff\4\4\62\uffff\1\4\2"+
			"\uffff\3\4\1\uffff\6\4",
			"",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\11\14\uffff\1\4\1\uffff\1\10"+
			"\1\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1"+
			"\uffff\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1"+
			"\4\7\uffff\1\4\1\uffff\1\4\11\uffff\1\11\22\uffff\4\4\62\uffff\1\4\2"+
			"\uffff\3\4\1\uffff\6\4",
			"\1\4\1\uffff\3\4\1\uffff\1\4\4\uffff\2\4\3\uffff\1\4\4\uffff\1\11\3"+
			"\uffff\4\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\14\1\4\1\uffff\2\4\5\uffff"+
			"\1\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\2\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\2\4\4\uffff\4\4\3\uffff\1\4\1\uffff\1\4\2\uffff\1\4\1\uffff\7\4\1\uffff"+
			"\1\4\1\uffff\3\4\2\uffff\3\4\6\uffff\4\4\4\uffff\1\4\1\uffff\1\4\1\uffff"+
			"\1\11\2\uffff\2\4\1\uffff\2\4\1\uffff\1\4\11\uffff\5\4\1\uffff\3\4\3"+
			"\uffff\1\4\17\uffff\3\4\3\uffff\1\4\6\uffff\1\4\4\uffff\3\4\2\uffff\2"+
			"\4\1\uffff\16\4",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\11\14\uffff\1\4\1\uffff\1\10"+
			"\1\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1"+
			"\uffff\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1"+
			"\4\7\uffff\1\4\1\uffff\1\4\11\uffff\1\11\22\uffff\4\4\62\uffff\1\4\2"+
			"\uffff\3\4\1\uffff\6\4",
			"\1\17\1\uffff\1\17\1\uffff\1\17\6\uffff\1\17\4\uffff\1\17\10\uffff\2"+
			"\17\1\uffff\1\17\3\uffff\1\17\6\uffff\2\17\7\uffff\1\17\1\uffff\1\17"+
			"\2\uffff\1\17\2\uffff\1\17\10\uffff\1\17\4\uffff\3\17\13\uffff\1\17\2"+
			"\uffff\1\17\2\uffff\1\17\5\uffff\1\17\2\uffff\1\17\1\uffff\1\17\7\uffff"+
			"\1\17\1\uffff\1\17\4\uffff\1\17\6\uffff\2\17\1\uffff\2\17\1\uffff\1\17"+
			"\15\uffff\1\17\1\uffff\3\17\3\uffff\1\17\20\uffff\1\15\13\uffff\1\17"+
			"\4\uffff\3\17\2\uffff\2\17\2\uffff\1\16",
			"",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\11\14\uffff\1\4\1\uffff\1\10"+
			"\1\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1"+
			"\uffff\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1"+
			"\4\7\uffff\1\4\1\uffff\1\4\11\uffff\1\11\22\uffff\4\4\62\uffff\1\4\2"+
			"\uffff\3\4\1\uffff\6\4",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\11\14\uffff\1\4\1\uffff\1\10"+
			"\1\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1"+
			"\uffff\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1"+
			"\4\7\uffff\1\4\1\uffff\1\4\11\uffff\1\11\22\uffff\4\4\62\uffff\1\4\2"+
			"\uffff\3\4\1\uffff\6\4",
			"\1\22\1\uffff\1\22\1\uffff\1\22\6\uffff\1\22\4\uffff\1\22\10\uffff\2"+
			"\22\1\uffff\1\22\3\uffff\1\22\6\uffff\2\22\7\uffff\1\22\1\uffff\1\22"+
			"\2\uffff\1\22\2\uffff\1\22\10\uffff\1\22\4\uffff\3\22\13\uffff\1\22\2"+
			"\uffff\1\22\2\uffff\1\22\5\uffff\1\22\2\uffff\1\22\1\uffff\1\22\7\uffff"+
			"\1\22\1\uffff\1\22\4\uffff\1\22\6\uffff\2\22\1\uffff\2\22\1\uffff\1\22"+
			"\15\uffff\1\22\1\uffff\3\22\3\uffff\1\22\20\uffff\1\20\13\uffff\1\22"+
			"\4\uffff\3\22\2\uffff\2\22\2\uffff\1\21",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\11\14\uffff\1\4\1\uffff\1\10"+
			"\1\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1"+
			"\uffff\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1"+
			"\4\7\uffff\1\4\1\uffff\1\4\11\uffff\1\11\22\uffff\4\4\62\uffff\1\4\2"+
			"\uffff\3\4\1\uffff\6\4",
			"\12\24\1\uffff\1\24\1\uffff\1\24\1\uffff\5\24\3\uffff\4\24\1\uffff\1"+
			"\24\1\uffff\6\24\2\uffff\4\24\2\uffff\2\24\1\uffff\17\24\1\uffff\1\24"+
			"\1\uffff\1\24\2\uffff\13\24\4\uffff\2\24\2\uffff\1\24\1\uffff\6\24\1"+
			"\uffff\14\24\1\uffff\1\24\1\uffff\7\24\1\uffff\1\24\3\uffff\13\24\1\uffff"+
			"\2\24\1\uffff\3\24\2\uffff\13\24\16\uffff\1\23\12\uffff\4\24\1\uffff"+
			"\10\24\1\uffff\1\24",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\11\14\uffff\1\4\1\uffff\1\10"+
			"\1\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1"+
			"\uffff\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1"+
			"\4\7\uffff\1\4\1\uffff\1\4\11\uffff\1\11\22\uffff\4\4\62\uffff\1\4\2"+
			"\uffff\3\4\1\uffff\6\4",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\11\14\uffff\1\4\1\uffff\1\14"+
			"\1\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1"+
			"\uffff\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1"+
			"\4\7\uffff\1\4\1\uffff\1\4\11\uffff\1\11\22\uffff\4\4\62\uffff\1\4\2"+
			"\uffff\3\4\1\uffff\6\4",
			"\12\26\1\uffff\1\26\1\uffff\1\26\1\uffff\5\26\3\uffff\4\26\1\uffff\1"+
			"\26\1\uffff\6\26\2\uffff\4\26\2\uffff\2\26\1\uffff\17\26\1\uffff\1\26"+
			"\1\uffff\1\26\2\uffff\13\26\4\uffff\2\26\2\uffff\1\26\1\uffff\6\26\1"+
			"\uffff\14\26\1\uffff\1\26\1\uffff\7\26\1\uffff\1\26\3\uffff\13\26\1\uffff"+
			"\2\26\1\uffff\3\26\2\uffff\13\26\16\uffff\1\25\12\uffff\4\26\1\uffff"+
			"\10\26\1\uffff\1\26",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\11\14\uffff\1\4\1\uffff\1\14"+
			"\1\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1"+
			"\uffff\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1"+
			"\4\7\uffff\1\4\1\uffff\1\4\11\uffff\1\11\22\uffff\4\4\62\uffff\1\4\2"+
			"\uffff\3\4\1\uffff\6\4",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\11\14\uffff\1\4\1\uffff\1\10"+
			"\1\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1"+
			"\uffff\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1"+
			"\4\7\uffff\1\4\1\uffff\1\4\11\uffff\1\11\22\uffff\4\4\62\uffff\1\4\2"+
			"\uffff\3\4\1\uffff\6\4",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\11\14\uffff\1\4\1\uffff\1\10"+
			"\1\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1"+
			"\uffff\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1"+
			"\4\7\uffff\1\4\1\uffff\1\4\11\uffff\1\11\22\uffff\4\4\62\uffff\1\4\2"+
			"\uffff\3\4\1\uffff\6\4",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\11\14\uffff\1\4\1\uffff\1\14"+
			"\1\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1"+
			"\uffff\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1"+
			"\4\7\uffff\1\4\1\uffff\1\4\11\uffff\1\11\22\uffff\4\4\62\uffff\1\4\2"+
			"\uffff\3\4\1\uffff\6\4",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\11\14\uffff\1\4\1\uffff\1\14"+
			"\1\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1"+
			"\uffff\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1"+
			"\4\7\uffff\1\4\1\uffff\1\4\11\uffff\1\11\22\uffff\4\4\62\uffff\1\4\2"+
			"\uffff\3\4\1\uffff\6\4"
	};

	static final short[] DFA57_eot = DFA.unpackEncodedString(DFA57_eotS);
	static final short[] DFA57_eof = DFA.unpackEncodedString(DFA57_eofS);
	static final char[] DFA57_min = DFA.unpackEncodedStringToUnsignedChars(DFA57_minS);
	static final char[] DFA57_max = DFA.unpackEncodedStringToUnsignedChars(DFA57_maxS);
	static final short[] DFA57_accept = DFA.unpackEncodedString(DFA57_acceptS);
	static final short[] DFA57_special = DFA.unpackEncodedString(DFA57_specialS);
	static final short[][] DFA57_transition;

	static {
		int numStates = DFA57_transitionS.length;
		DFA57_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA57_transition[i] = DFA.unpackEncodedString(DFA57_transitionS[i]);
		}
	}

	protected class DFA57 extends DFA {

		public DFA57(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 57;
			this.eot = DFA57_eot;
			this.eof = DFA57_eof;
			this.min = DFA57_min;
			this.max = DFA57_max;
			this.accept = DFA57_accept;
			this.special = DFA57_special;
			this.transition = DFA57_transition;
		}
		@Override
		public String getDescription() {
			return "212:1: arrayIndex : ( typeId | expression '..' expression );";
		}
	}

	static final String DFA59_eotS =
		"\152\uffff";
	static final String DFA59_eofS =
		"\1\2\151\uffff";
	static final String DFA59_minS =
		"\1\4\1\0\150\uffff";
	static final String DFA59_maxS =
		"\1\u00d2\1\0\150\uffff";
	static final String DFA59_acceptS =
		"\2\uffff\1\2\146\uffff\1\1";
	static final String DFA59_specialS =
		"\1\uffff\1\0\150\uffff}>";
	static final String[] DFA59_transitionS = {
			"\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff\4\2\1\uffff\7\2\1\uffff\12\2\1\uffff"+
			"\7\2\3\uffff\13\2\1\uffff\3\2\2\uffff\2\2\1\uffff\2\2\3\uffff\7\2\1\uffff"+
			"\3\2\2\uffff\17\2\1\1\5\2\3\uffff\7\2\1\uffff\5\2\1\uffff\1\2\2\uffff"+
			"\2\2\1\uffff\2\2\1\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff\15\2\1\uffff"+
			"\1\2\15\uffff\3\2\3\uffff\1\2\6\uffff\2\2\2\uffff\4\2\2\uffff\2\2\1\uffff"+
			"\16\2",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA59_eot = DFA.unpackEncodedString(DFA59_eotS);
	static final short[] DFA59_eof = DFA.unpackEncodedString(DFA59_eofS);
	static final char[] DFA59_min = DFA.unpackEncodedStringToUnsignedChars(DFA59_minS);
	static final char[] DFA59_max = DFA.unpackEncodedStringToUnsignedChars(DFA59_maxS);
	static final short[] DFA59_accept = DFA.unpackEncodedString(DFA59_acceptS);
	static final short[] DFA59_special = DFA.unpackEncodedString(DFA59_specialS);
	static final short[][] DFA59_transition;

	static {
		int numStates = DFA59_transitionS.length;
		DFA59_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA59_transition[i] = DFA.unpackEncodedString(DFA59_transitionS[i]);
		}
	}

	protected class DFA59 extends DFA {

		public DFA59(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 59;
			this.eot = DFA59_eot;
			this.eof = DFA59_eof;
			this.min = DFA59_min;
			this.max = DFA59_max;
			this.accept = DFA59_accept;
			this.special = DFA59_special;
			this.transition = DFA59_transition;
		}
		@Override
		public String getDescription() {
			return "222:39: ( 'of' typeDecl )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA59_1 = input.LA(1);
						 
						int index59_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred83_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index59_1);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 59, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA61_eotS =
		"\152\uffff";
	static final String DFA61_eofS =
		"\1\2\151\uffff";
	static final String DFA61_minS =
		"\1\4\1\0\150\uffff";
	static final String DFA61_maxS =
		"\1\u00d2\1\0\150\uffff";
	static final String DFA61_acceptS =
		"\2\uffff\1\2\146\uffff\1\1";
	static final String DFA61_specialS =
		"\1\uffff\1\0\150\uffff}>";
	static final String[] DFA61_transitionS = {
			"\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff\4\2\1\uffff\7\2\1\uffff\12\2\1\uffff"+
			"\7\2\3\uffff\13\2\1\uffff\3\2\2\uffff\2\2\1\uffff\2\2\3\uffff\7\2\1\uffff"+
			"\2\2\1\1\2\uffff\25\2\3\uffff\7\2\1\uffff\5\2\1\uffff\1\2\2\uffff\2\2"+
			"\1\uffff\2\2\1\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff\15\2\1\uffff"+
			"\1\2\15\uffff\3\2\3\uffff\1\2\6\uffff\2\2\2\uffff\4\2\2\uffff\2\2\1\uffff"+
			"\16\2",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA61_eot = DFA.unpackEncodedString(DFA61_eotS);
	static final short[] DFA61_eof = DFA.unpackEncodedString(DFA61_eofS);
	static final char[] DFA61_min = DFA.unpackEncodedStringToUnsignedChars(DFA61_minS);
	static final char[] DFA61_max = DFA.unpackEncodedStringToUnsignedChars(DFA61_maxS);
	static final short[] DFA61_accept = DFA.unpackEncodedString(DFA61_acceptS);
	static final short[] DFA61_special = DFA.unpackEncodedString(DFA61_specialS);
	static final short[][] DFA61_transition;

	static {
		int numStates = DFA61_transitionS.length;
		DFA61_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA61_transition[i] = DFA.unpackEncodedString(DFA61_transitionS[i]);
		}
	}

	protected class DFA61 extends DFA {

		public DFA61(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 61;
			this.eot = DFA61_eot;
			this.eof = DFA61_eof;
			this.min = DFA61_min;
			this.max = DFA61_max;
			this.accept = DFA61_accept;
			this.special = DFA61_special;
			this.transition = DFA61_transition;
		}
		@Override
		public String getDescription() {
			return "227:41: ( '[' expression ']' )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA61_1 = input.LA(1);
						 
						int index61_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred85_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index61_1);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 61, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA70_eotS =
		"\152\uffff";
	static final String DFA70_eofS =
		"\1\2\151\uffff";
	static final String DFA70_minS =
		"\1\4\1\0\150\uffff";
	static final String DFA70_maxS =
		"\1\u00d2\1\0\150\uffff";
	static final String DFA70_acceptS =
		"\2\uffff\1\2\146\uffff\1\1";
	static final String DFA70_specialS =
		"\1\uffff\1\0\150\uffff}>";
	static final String[] DFA70_transitionS = {
			"\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff\4\2\1\uffff\7\2\1\uffff\12\2\1\uffff"+
			"\7\2\3\uffff\13\2\1\uffff\3\2\2\uffff\2\2\1\uffff\2\2\3\uffff\7\2\1\uffff"+
			"\3\2\2\uffff\3\2\1\1\21\2\3\uffff\7\2\1\uffff\5\2\1\uffff\1\2\2\uffff"+
			"\2\2\1\uffff\2\2\1\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff\15\2\1\uffff"+
			"\1\2\15\uffff\3\2\3\uffff\1\2\6\uffff\2\2\2\uffff\4\2\2\uffff\2\2\1\uffff"+
			"\16\2",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA70_eot = DFA.unpackEncodedString(DFA70_eotS);
	static final short[] DFA70_eof = DFA.unpackEncodedString(DFA70_eofS);
	static final char[] DFA70_min = DFA.unpackEncodedStringToUnsignedChars(DFA70_minS);
	static final char[] DFA70_max = DFA.unpackEncodedStringToUnsignedChars(DFA70_maxS);
	static final short[] DFA70_accept = DFA.unpackEncodedString(DFA70_acceptS);
	static final short[] DFA70_special = DFA.unpackEncodedString(DFA70_specialS);
	static final short[][] DFA70_transition;

	static {
		int numStates = DFA70_transitionS.length;
		DFA70_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA70_transition[i] = DFA.unpackEncodedString(DFA70_transitionS[i]);
		}
	}

	protected class DFA70 extends DFA {

		public DFA70(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 70;
			this.eot = DFA70_eot;
			this.eof = DFA70_eof;
			this.min = DFA70_min;
			this.max = DFA70_max;
			this.accept = DFA70_accept;
			this.special = DFA70_special;
			this.transition = DFA70_transition;
		}
		@Override
		public String getDescription() {
			return "243:44: ( formalParameterSection )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA70_1 = input.LA(1);
						 
						int index70_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred96_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index70_1);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 70, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA88_eotS =
		"\152\uffff";
	static final String DFA88_eofS =
		"\1\2\151\uffff";
	static final String DFA88_minS =
		"\1\4\1\0\150\uffff";
	static final String DFA88_maxS =
		"\1\u00d2\1\0\150\uffff";
	static final String DFA88_acceptS =
		"\2\uffff\1\2\146\uffff\1\1";
	static final String DFA88_specialS =
		"\1\uffff\1\0\150\uffff}>";
	static final String[] DFA88_transitionS = {
			"\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff\4\2\1\uffff\7\2\1\uffff\12\2\1\uffff"+
			"\7\2\3\uffff\13\2\1\uffff\3\2\2\uffff\2\2\1\uffff\2\2\3\uffff\7\2\1\uffff"+
			"\3\2\2\uffff\3\2\1\1\21\2\3\uffff\7\2\1\uffff\5\2\1\uffff\1\2\2\uffff"+
			"\2\2\1\uffff\2\2\1\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff\15\2\1\uffff"+
			"\1\2\15\uffff\3\2\3\uffff\1\2\6\uffff\2\2\2\uffff\4\2\2\uffff\2\2\1\uffff"+
			"\16\2",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA88_eot = DFA.unpackEncodedString(DFA88_eotS);
	static final short[] DFA88_eof = DFA.unpackEncodedString(DFA88_eofS);
	static final char[] DFA88_min = DFA.unpackEncodedStringToUnsignedChars(DFA88_minS);
	static final char[] DFA88_max = DFA.unpackEncodedStringToUnsignedChars(DFA88_maxS);
	static final short[] DFA88_accept = DFA.unpackEncodedString(DFA88_acceptS);
	static final short[] DFA88_special = DFA.unpackEncodedString(DFA88_specialS);
	static final short[][] DFA88_transition;

	static {
		int numStates = DFA88_transitionS.length;
		DFA88_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA88_transition[i] = DFA.unpackEncodedString(DFA88_transitionS[i]);
		}
	}

	protected class DFA88 extends DFA {

		public DFA88(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 88;
			this.eot = DFA88_eot;
			this.eof = DFA88_eof;
			this.min = DFA88_min;
			this.max = DFA88_max;
			this.accept = DFA88_accept;
			this.special = DFA88_special;
			this.transition = DFA88_transition;
		}
		@Override
		public String getDescription() {
			return "288:54: ( classParent )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA88_1 = input.LA(1);
						 
						int index88_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred121_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index88_1);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 88, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA100_eotS =
		"\152\uffff";
	static final String DFA100_eofS =
		"\1\2\151\uffff";
	static final String DFA100_minS =
		"\1\4\1\0\150\uffff";
	static final String DFA100_maxS =
		"\1\u00d2\1\0\150\uffff";
	static final String DFA100_acceptS =
		"\2\uffff\1\2\146\uffff\1\1";
	static final String DFA100_specialS =
		"\1\uffff\1\0\150\uffff}>";
	static final String[] DFA100_transitionS = {
			"\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff\4\2\1\uffff\7\2\1\uffff\12\2\1\uffff"+
			"\7\2\3\uffff\13\2\1\uffff\3\2\2\uffff\2\2\1\uffff\2\2\3\uffff\7\2\1\uffff"+
			"\3\2\2\uffff\3\2\1\1\21\2\3\uffff\7\2\1\uffff\5\2\1\uffff\1\2\2\uffff"+
			"\2\2\1\uffff\2\2\1\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff\15\2\1\uffff"+
			"\1\2\15\uffff\3\2\3\uffff\1\2\6\uffff\2\2\2\uffff\4\2\2\uffff\2\2\1\uffff"+
			"\16\2",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA100_eot = DFA.unpackEncodedString(DFA100_eotS);
	static final short[] DFA100_eof = DFA.unpackEncodedString(DFA100_eofS);
	static final char[] DFA100_min = DFA.unpackEncodedStringToUnsignedChars(DFA100_minS);
	static final char[] DFA100_max = DFA.unpackEncodedStringToUnsignedChars(DFA100_maxS);
	static final short[] DFA100_accept = DFA.unpackEncodedString(DFA100_acceptS);
	static final short[] DFA100_special = DFA.unpackEncodedString(DFA100_specialS);
	static final short[][] DFA100_transition;

	static {
		int numStates = DFA100_transitionS.length;
		DFA100_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA100_transition[i] = DFA.unpackEncodedString(DFA100_transitionS[i]);
		}
	}

	protected class DFA100 extends DFA {

		public DFA100(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 100;
			this.eot = DFA100_eot;
			this.eof = DFA100_eof;
			this.min = DFA100_min;
			this.max = DFA100_max;
			this.accept = DFA100_accept;
			this.special = DFA100_special;
			this.transition = DFA100_transition;
		}
		@Override
		public String getDescription() {
			return "314:45: ( classParent )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA100_1 = input.LA(1);
						 
						int index100_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred143_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index100_1);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 100, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA174_eotS =
		"\161\uffff";
	static final String DFA174_eofS =
		"\1\1\160\uffff";
	static final String DFA174_minS =
		"\1\4\73\uffff\1\0\4\uffff\21\0\1\uffff\1\0\21\uffff\1\0\4\uffff\2\0\2"+
		"\uffff\1\0\2\uffff";
	static final String DFA174_maxS =
		"\1\u00d2\73\uffff\1\0\4\uffff\21\0\1\uffff\1\0\21\uffff\1\0\4\uffff\2"+
		"\0\2\uffff\1\0\2\uffff";
	static final String DFA174_acceptS =
		"\1\uffff\1\2\147\uffff\1\1\7\uffff";
	static final String DFA174_specialS =
		"\74\uffff\1\0\4\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
		"\1\14\1\15\1\16\1\17\1\20\1\21\1\uffff\1\22\21\uffff\1\23\4\uffff\1\24"+
		"\1\25\2\uffff\1\26\2\uffff}>";
	static final String[] DFA174_transitionS = {
			"\1\1\1\151\3\1\1\uffff\2\1\1\104\1\uffff\4\1\1\uffff\3\1\1\105\3\1\1"+
			"\uffff\7\1\1\116\1\1\1\74\1\uffff\7\1\1\151\2\uffff\5\1\1\117\1\107\1"+
			"\1\1\123\1\1\1\113\1\uffff\1\156\2\1\2\uffff\2\1\1\uffff\2\1\3\uffff"+
			"\6\1\1\103\1\uffff\3\1\2\uffff\1\1\1\121\1\112\2\1\1\145\3\1\1\115\12"+
			"\1\1\102\1\151\2\uffff\1\106\1\120\5\1\1\uffff\5\1\1\uffff\1\1\2\uffff"+
			"\2\1\1\uffff\1\1\1\101\1\151\1\1\2\uffff\3\1\1\110\1\uffff\1\1\1\uffff"+
			"\4\1\1\152\1\111\7\1\1\uffff\1\1\15\uffff\3\1\3\uffff\1\1\6\uffff\2\1"+
			"\2\uffff\1\1\1\114\1\1\1\153\2\uffff\2\1\1\uffff\16\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			""
	};

	static final short[] DFA174_eot = DFA.unpackEncodedString(DFA174_eotS);
	static final short[] DFA174_eof = DFA.unpackEncodedString(DFA174_eofS);
	static final char[] DFA174_min = DFA.unpackEncodedStringToUnsignedChars(DFA174_minS);
	static final char[] DFA174_max = DFA.unpackEncodedStringToUnsignedChars(DFA174_maxS);
	static final short[] DFA174_accept = DFA.unpackEncodedString(DFA174_acceptS);
	static final short[] DFA174_special = DFA.unpackEncodedString(DFA174_specialS);
	static final short[][] DFA174_transition;

	static {
		int numStates = DFA174_transitionS.length;
		DFA174_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA174_transition[i] = DFA.unpackEncodedString(DFA174_transitionS[i]);
		}
	}

	protected class DFA174 extends DFA {

		public DFA174(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 174;
			this.eot = DFA174_eot;
			this.eof = DFA174_eof;
			this.min = DFA174_min;
			this.max = DFA174_max;
			this.accept = DFA174_accept;
			this.special = DFA174_special;
			this.transition = DFA174_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 419:54: ( methodDirective )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA174_60 = input.LA(1);
						 
						int index174_60 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred240_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index174_60);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA174_65 = input.LA(1);
						 
						int index174_65 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred240_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index174_65);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA174_66 = input.LA(1);
						 
						int index174_66 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred240_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index174_66);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA174_67 = input.LA(1);
						 
						int index174_67 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred240_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index174_67);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA174_68 = input.LA(1);
						 
						int index174_68 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred240_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index174_68);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA174_69 = input.LA(1);
						 
						int index174_69 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred240_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index174_69);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA174_70 = input.LA(1);
						 
						int index174_70 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred240_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index174_70);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA174_71 = input.LA(1);
						 
						int index174_71 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred240_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index174_71);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA174_72 = input.LA(1);
						 
						int index174_72 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred240_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index174_72);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA174_73 = input.LA(1);
						 
						int index174_73 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred240_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index174_73);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA174_74 = input.LA(1);
						 
						int index174_74 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred240_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index174_74);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA174_75 = input.LA(1);
						 
						int index174_75 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred240_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index174_75);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA174_76 = input.LA(1);
						 
						int index174_76 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred240_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index174_76);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA174_77 = input.LA(1);
						 
						int index174_77 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred240_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index174_77);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA174_78 = input.LA(1);
						 
						int index174_78 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred240_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index174_78);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA174_79 = input.LA(1);
						 
						int index174_79 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred240_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index174_79);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA174_80 = input.LA(1);
						 
						int index174_80 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred240_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index174_80);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA174_81 = input.LA(1);
						 
						int index174_81 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred240_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index174_81);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA174_83 = input.LA(1);
						 
						int index174_83 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred240_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index174_83);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA174_101 = input.LA(1);
						 
						int index174_101 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred240_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index174_101);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA174_106 = input.LA(1);
						 
						int index174_106 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred240_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index174_106);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA174_107 = input.LA(1);
						 
						int index174_107 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred240_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index174_107);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA174_110 = input.LA(1);
						 
						int index174_110 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred240_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index174_110);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 174, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA192_eotS =
		"\153\uffff";
	static final String DFA192_eofS =
		"\1\1\152\uffff";
	static final String DFA192_minS =
		"\1\4\1\uffff\1\0\100\uffff\22\0\26\uffff";
	static final String DFA192_maxS =
		"\1\u00d2\1\uffff\1\0\100\uffff\22\0\26\uffff";
	static final String DFA192_acceptS =
		"\1\uffff\1\2\150\uffff\1\1";
	static final String DFA192_specialS =
		"\2\uffff\1\0\100\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
		"\1\14\1\15\1\16\1\17\1\20\1\21\1\22\26\uffff}>";
	static final String[] DFA192_transitionS = {
			"\1\1\1\uffff\3\1\1\uffff\2\1\1\106\1\uffff\4\1\1\uffff\3\1\1\107\3\1"+
			"\1\uffff\7\1\1\120\2\1\1\uffff\7\1\3\uffff\5\1\1\121\1\111\1\1\1\2\1"+
			"\1\1\115\1\uffff\3\1\1\uffff\3\1\1\uffff\2\1\3\uffff\6\1\1\105\1\uffff"+
			"\3\1\2\uffff\1\1\1\123\1\114\6\1\1\117\12\1\1\104\3\uffff\1\110\1\122"+
			"\5\1\1\uffff\5\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\1\103\1\uffff\1"+
			"\1\2\uffff\3\1\1\112\1\uffff\1\1\1\uffff\5\1\1\113\7\1\1\uffff\1\1\15"+
			"\uffff\3\1\3\uffff\1\1\6\uffff\1\124\1\1\2\uffff\1\1\1\116\2\1\2\uffff"+
			"\2\1\1\uffff\16\1",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA192_eot = DFA.unpackEncodedString(DFA192_eotS);
	static final short[] DFA192_eof = DFA.unpackEncodedString(DFA192_eofS);
	static final char[] DFA192_min = DFA.unpackEncodedStringToUnsignedChars(DFA192_minS);
	static final char[] DFA192_max = DFA.unpackEncodedStringToUnsignedChars(DFA192_maxS);
	static final short[] DFA192_accept = DFA.unpackEncodedString(DFA192_acceptS);
	static final short[] DFA192_special = DFA.unpackEncodedString(DFA192_specialS);
	static final short[][] DFA192_transition;

	static {
		int numStates = DFA192_transitionS.length;
		DFA192_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA192_transition[i] = DFA.unpackEncodedString(DFA192_transitionS[i]);
		}
	}

	protected class DFA192 extends DFA {

		public DFA192(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 192;
			this.eot = DFA192_eot;
			this.eof = DFA192_eof;
			this.min = DFA192_min;
			this.max = DFA192_max;
			this.accept = DFA192_accept;
			this.special = DFA192_special;
			this.transition = DFA192_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 434:52: ( functionDirective )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA192_2 = input.LA(1);
						 
						int index192_2 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred261_Delphi()) ) {s = 106;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index192_2);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA192_67 = input.LA(1);
						 
						int index192_67 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred261_Delphi()) ) {s = 106;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index192_67);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA192_68 = input.LA(1);
						 
						int index192_68 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred261_Delphi()) ) {s = 106;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index192_68);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA192_69 = input.LA(1);
						 
						int index192_69 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred261_Delphi()) ) {s = 106;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index192_69);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA192_70 = input.LA(1);
						 
						int index192_70 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred261_Delphi()) ) {s = 106;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index192_70);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA192_71 = input.LA(1);
						 
						int index192_71 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred261_Delphi()) ) {s = 106;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index192_71);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA192_72 = input.LA(1);
						 
						int index192_72 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred261_Delphi()) ) {s = 106;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index192_72);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA192_73 = input.LA(1);
						 
						int index192_73 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred261_Delphi()) ) {s = 106;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index192_73);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA192_74 = input.LA(1);
						 
						int index192_74 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred261_Delphi()) ) {s = 106;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index192_74);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA192_75 = input.LA(1);
						 
						int index192_75 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred261_Delphi()) ) {s = 106;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index192_75);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA192_76 = input.LA(1);
						 
						int index192_76 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred261_Delphi()) ) {s = 106;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index192_76);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA192_77 = input.LA(1);
						 
						int index192_77 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred261_Delphi()) ) {s = 106;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index192_77);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA192_78 = input.LA(1);
						 
						int index192_78 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred261_Delphi()) ) {s = 106;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index192_78);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA192_79 = input.LA(1);
						 
						int index192_79 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred261_Delphi()) ) {s = 106;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index192_79);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA192_80 = input.LA(1);
						 
						int index192_80 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred261_Delphi()) ) {s = 106;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index192_80);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA192_81 = input.LA(1);
						 
						int index192_81 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred261_Delphi()) ) {s = 106;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index192_81);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA192_82 = input.LA(1);
						 
						int index192_82 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred261_Delphi()) ) {s = 106;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index192_82);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA192_83 = input.LA(1);
						 
						int index192_83 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred261_Delphi()) ) {s = 106;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index192_83);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA192_84 = input.LA(1);
						 
						int index192_84 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred261_Delphi()) ) {s = 106;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index192_84);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 192, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA205_eotS =
		"\152\uffff";
	static final String DFA205_eofS =
		"\1\1\151\uffff";
	static final String DFA205_minS =
		"\1\4\100\uffff\23\0\26\uffff";
	static final String DFA205_maxS =
		"\1\u00d2\100\uffff\23\0\26\uffff";
	static final String DFA205_acceptS =
		"\1\uffff\1\2\147\uffff\1\1";
	static final String DFA205_specialS =
		"\101\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
		"\15\1\16\1\17\1\20\1\21\1\22\26\uffff}>";
	static final String[] DFA205_transitionS = {
			"\1\1\1\uffff\3\1\1\uffff\2\1\1\104\1\uffff\4\1\1\uffff\3\1\1\105\3\1"+
			"\1\uffff\7\1\1\116\2\1\1\uffff\7\1\3\uffff\5\1\1\117\1\107\1\1\1\123"+
			"\1\1\1\113\1\uffff\3\1\2\uffff\2\1\1\uffff\2\1\3\uffff\6\1\1\103\1\uffff"+
			"\3\1\2\uffff\1\1\1\121\1\112\6\1\1\115\12\1\1\102\3\uffff\1\106\1\120"+
			"\5\1\1\uffff\5\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\1\101\1\uffff\1"+
			"\1\2\uffff\3\1\1\110\1\uffff\1\1\1\uffff\5\1\1\111\7\1\1\uffff\1\1\15"+
			"\uffff\3\1\3\uffff\1\1\6\uffff\1\122\1\1\2\uffff\1\1\1\114\2\1\2\uffff"+
			"\2\1\1\uffff\16\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA205_eot = DFA.unpackEncodedString(DFA205_eotS);
	static final short[] DFA205_eof = DFA.unpackEncodedString(DFA205_eofS);
	static final char[] DFA205_min = DFA.unpackEncodedStringToUnsignedChars(DFA205_minS);
	static final char[] DFA205_max = DFA.unpackEncodedStringToUnsignedChars(DFA205_maxS);
	static final short[] DFA205_accept = DFA.unpackEncodedString(DFA205_acceptS);
	static final short[] DFA205_special = DFA.unpackEncodedString(DFA205_specialS);
	static final short[][] DFA205_transition;

	static {
		int numStates = DFA205_transitionS.length;
		DFA205_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA205_transition[i] = DFA.unpackEncodedString(DFA205_transitionS[i]);
		}
	}

	protected class DFA205 extends DFA {

		public DFA205(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 205;
			this.eot = DFA205_eot;
			this.eof = DFA205_eof;
			this.min = DFA205_min;
			this.max = DFA205_max;
			this.accept = DFA205_accept;
			this.special = DFA205_special;
			this.transition = DFA205_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 454:46: ( functionDirective )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA205_65 = input.LA(1);
						 
						int index205_65 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred276_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index205_65);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA205_66 = input.LA(1);
						 
						int index205_66 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred276_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index205_66);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA205_67 = input.LA(1);
						 
						int index205_67 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred276_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index205_67);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA205_68 = input.LA(1);
						 
						int index205_68 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred276_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index205_68);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA205_69 = input.LA(1);
						 
						int index205_69 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred276_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index205_69);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA205_70 = input.LA(1);
						 
						int index205_70 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred276_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index205_70);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA205_71 = input.LA(1);
						 
						int index205_71 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred276_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index205_71);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA205_72 = input.LA(1);
						 
						int index205_72 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred276_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index205_72);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA205_73 = input.LA(1);
						 
						int index205_73 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred276_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index205_73);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA205_74 = input.LA(1);
						 
						int index205_74 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred276_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index205_74);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA205_75 = input.LA(1);
						 
						int index205_75 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred276_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index205_75);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA205_76 = input.LA(1);
						 
						int index205_76 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred276_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index205_76);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA205_77 = input.LA(1);
						 
						int index205_77 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred276_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index205_77);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA205_78 = input.LA(1);
						 
						int index205_78 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred276_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index205_78);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA205_79 = input.LA(1);
						 
						int index205_79 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred276_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index205_79);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA205_80 = input.LA(1);
						 
						int index205_80 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred276_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index205_80);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA205_81 = input.LA(1);
						 
						int index205_81 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred276_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index205_81);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA205_82 = input.LA(1);
						 
						int index205_82 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred276_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index205_82);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA205_83 = input.LA(1);
						 
						int index205_83 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred276_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index205_83);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 205, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA216_eotS =
		"\152\uffff";
	static final String DFA216_eofS =
		"\1\2\151\uffff";
	static final String DFA216_minS =
		"\1\4\1\0\150\uffff";
	static final String DFA216_maxS =
		"\1\u00d2\1\0\150\uffff";
	static final String DFA216_acceptS =
		"\2\uffff\1\2\146\uffff\1\1";
	static final String DFA216_specialS =
		"\1\uffff\1\0\150\uffff}>";
	static final String[] DFA216_transitionS = {
			"\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff\4\2\1\uffff\7\2\1\uffff\12\2\1\uffff"+
			"\7\2\3\uffff\13\2\1\uffff\3\2\2\uffff\2\2\1\uffff\2\2\3\uffff\7\2\1\uffff"+
			"\3\2\2\uffff\3\2\1\1\21\2\3\uffff\7\2\1\uffff\5\2\1\uffff\1\2\2\uffff"+
			"\2\2\1\uffff\2\2\1\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff\15\2\1\uffff"+
			"\1\2\15\uffff\3\2\3\uffff\1\2\6\uffff\2\2\2\uffff\4\2\2\uffff\2\2\1\uffff"+
			"\16\2",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA216_eot = DFA.unpackEncodedString(DFA216_eotS);
	static final short[] DFA216_eof = DFA.unpackEncodedString(DFA216_eofS);
	static final char[] DFA216_min = DFA.unpackEncodedStringToUnsignedChars(DFA216_minS);
	static final char[] DFA216_max = DFA.unpackEncodedStringToUnsignedChars(DFA216_maxS);
	static final short[] DFA216_accept = DFA.unpackEncodedString(DFA216_acceptS);
	static final short[] DFA216_special = DFA.unpackEncodedString(DFA216_specialS);
	static final short[][] DFA216_transition;

	static {
		int numStates = DFA216_transitionS.length;
		DFA216_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA216_transition[i] = DFA.unpackEncodedString(DFA216_transitionS[i]);
		}
	}

	protected class DFA216 extends DFA {

		public DFA216(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 216;
			this.eot = DFA216_eot;
			this.eof = DFA216_eof;
			this.min = DFA216_min;
			this.max = DFA216_max;
			this.accept = DFA216_accept;
			this.special = DFA216_special;
			this.transition = DFA216_transition;
		}
		@Override
		public String getDescription() {
			return "475:44: ( formalParameterSection )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA216_1 = input.LA(1);
						 
						int index216_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred289_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index216_1);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 216, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA223_eotS =
		"\171\uffff";
	static final String DFA223_eofS =
		"\1\21\170\uffff";
	static final String DFA223_minS =
		"\1\4\20\0\2\uffff\3\0\4\uffff\1\0\20\uffff\1\0\3\uffff\7\0\1\uffff\1\0"+
		"\5\uffff\1\0\2\uffff\1\0\1\uffff\1\0\5\uffff\1\0\1\uffff\1\0\13\uffff"+
		"\1\0\5\uffff\1\0\2\uffff\1\0\1\uffff\2\0\2\uffff\1\0\23\uffff";
	static final String DFA223_maxS =
		"\1\u00d2\20\0\2\uffff\3\0\4\uffff\1\0\20\uffff\1\0\3\uffff\7\0\1\uffff"+
		"\1\0\5\uffff\1\0\2\uffff\1\0\1\uffff\1\0\5\uffff\1\0\1\uffff\1\0\13\uffff"+
		"\1\0\5\uffff\1\0\2\uffff\1\0\1\uffff\2\0\2\uffff\1\0\23\uffff";
	static final String DFA223_acceptS =
		"\21\uffff\1\20\127\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\21\1\11\1"+
		"\12\1\13\1\14\1\15\1\16\1\17";
	static final String DFA223_specialS =
		"\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
		"\1\16\1\17\2\uffff\1\20\1\21\1\22\4\uffff\1\23\20\uffff\1\24\3\uffff\1"+
		"\25\1\26\1\27\1\30\1\31\1\32\1\33\1\uffff\1\34\5\uffff\1\35\2\uffff\1"+
		"\36\1\uffff\1\37\5\uffff\1\40\1\uffff\1\41\13\uffff\1\42\5\uffff\1\43"+
		"\2\uffff\1\44\1\uffff\1\45\1\46\2\uffff\1\47\23\uffff}>";
	static final String[] DFA223_transitionS = {
			"\1\126\1\uffff\1\145\1\21\1\145\1\uffff\3\21\1\uffff\1\21\1\145\1\1\1"+
			"\21\1\uffff\1\21\1\145\5\21\1\uffff\2\21\2\145\1\16\1\64\3\21\1\62\1"+
			"\uffff\5\21\2\145\3\uffff\4\21\1\145\1\21\1\75\2\21\1\12\1\21\1\uffff"+
			"\1\145\2\21\2\uffff\2\21\1\uffff\1\21\1\145\3\uffff\1\21\1\65\1\25\1"+
			"\112\3\21\1\uffff\2\21\1\20\2\uffff\2\21\1\100\1\15\1\21\1\145\1\5\1"+
			"\21\1\32\1\21\1\13\1\21\1\3\1\21\1\145\2\21\1\142\1\21\1\145\1\21\3\uffff"+
			"\2\21\1\4\1\145\1\6\1\137\1\21\1\uffff\2\21\1\141\1\21\1\17\1\uffff\1"+
			"\21\2\uffff\1\53\1\60\1\uffff\1\145\1\67\1\uffff\1\145\2\uffff\4\21\1"+
			"\uffff\1\21\1\uffff\4\21\1\145\1\21\1\63\1\134\1\145\3\21\1\11\1\uffff"+
			"\1\21\15\uffff\1\10\1\23\1\10\3\uffff\1\7\6\uffff\1\110\1\21\2\uffff"+
			"\1\21\1\102\2\145\2\uffff\1\57\1\61\1\uffff\1\21\1\24\1\2\12\21\1\14",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA223_eot = DFA.unpackEncodedString(DFA223_eotS);
	static final short[] DFA223_eof = DFA.unpackEncodedString(DFA223_eofS);
	static final char[] DFA223_min = DFA.unpackEncodedStringToUnsignedChars(DFA223_minS);
	static final char[] DFA223_max = DFA.unpackEncodedStringToUnsignedChars(DFA223_maxS);
	static final short[] DFA223_accept = DFA.unpackEncodedString(DFA223_acceptS);
	static final short[] DFA223_special = DFA.unpackEncodedString(DFA223_specialS);
	static final short[][] DFA223_transition;

	static {
		int numStates = DFA223_transitionS.length;
		DFA223_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA223_transition[i] = DFA.unpackEncodedString(DFA223_transitionS[i]);
		}
	}

	protected class DFA223 extends DFA {

		public DFA223(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 223;
			this.eot = DFA223_eot;
			this.eof = DFA223_eof;
			this.min = DFA223_min;
			this.max = DFA223_max;
			this.accept = DFA223_accept;
			this.special = DFA223_special;
			this.transition = DFA223_transition;
		}
		@Override
		public String getDescription() {
			return "480:1: factor : ( '@' factor | '@@' factor | 'not' factor | '+' factor | '-' factor | '^' ident | intRealNum | 'true' | 'false' | 'nil' | 'nil^' | '(' expression ')' designator | '(' expression ')' ( '^' )? ( '.' expression )? | stringFactor ( '.' simpleExpression )? | setSection | designator | typeId '(' expression ')' );";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA223_1 = input.LA(1);
						 
						int index223_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred293_Delphi()) ) {s = 105;}
						else if ( (synpred311_Delphi()) ) {s = 17;}
						 
						input.seek(index223_1);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA223_2 = input.LA(1);
						 
						int index223_2 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred294_Delphi()) ) {s = 106;}
						else if ( (synpred311_Delphi()) ) {s = 17;}
						 
						input.seek(index223_2);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA223_3 = input.LA(1);
						 
						int index223_3 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred295_Delphi()) ) {s = 107;}
						else if ( (synpred311_Delphi()) ) {s = 17;}
						 
						input.seek(index223_3);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA223_4 = input.LA(1);
						 
						int index223_4 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred296_Delphi()) ) {s = 108;}
						else if ( (synpred311_Delphi()) ) {s = 17;}
						 
						input.seek(index223_4);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA223_5 = input.LA(1);
						 
						int index223_5 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred297_Delphi()) ) {s = 109;}
						else if ( (synpred311_Delphi()) ) {s = 17;}
						 
						input.seek(index223_5);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA223_6 = input.LA(1);
						 
						int index223_6 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred298_Delphi()) ) {s = 110;}
						else if ( (synpred311_Delphi()) ) {s = 17;}
						 
						input.seek(index223_6);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA223_7 = input.LA(1);
						 
						int index223_7 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred299_Delphi()) ) {s = 111;}
						else if ( (synpred311_Delphi()) ) {s = 17;}
						 
						input.seek(index223_7);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA223_8 = input.LA(1);
						 
						int index223_8 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred299_Delphi()) ) {s = 111;}
						else if ( (synpred311_Delphi()) ) {s = 17;}
						 
						input.seek(index223_8);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA223_9 = input.LA(1);
						 
						int index223_9 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred300_Delphi()) ) {s = 112;}
						else if ( (synpred311_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index223_9);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA223_10 = input.LA(1);
						 
						int index223_10 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred301_Delphi()) ) {s = 114;}
						else if ( (synpred311_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index223_10);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA223_11 = input.LA(1);
						 
						int index223_11 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred302_Delphi()) ) {s = 115;}
						else if ( (synpred311_Delphi()) ) {s = 17;}
						 
						input.seek(index223_11);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA223_12 = input.LA(1);
						 
						int index223_12 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred303_Delphi()) ) {s = 116;}
						else if ( (synpred311_Delphi()) ) {s = 17;}
						 
						input.seek(index223_12);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA223_13 = input.LA(1);
						 
						int index223_13 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred304_Delphi()) ) {s = 117;}
						else if ( (synpred307_Delphi()) ) {s = 118;}
						else if ( (synpred311_Delphi()) ) {s = 17;}
						 
						input.seek(index223_13);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA223_14 = input.LA(1);
						 
						int index223_14 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred309_Delphi()) ) {s = 119;}
						else if ( (synpred311_Delphi()) ) {s = 17;}
						 
						input.seek(index223_14);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA223_15 = input.LA(1);
						 
						int index223_15 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred309_Delphi()) ) {s = 119;}
						else if ( (synpred311_Delphi()) ) {s = 17;}
						 
						input.seek(index223_15);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA223_16 = input.LA(1);
						 
						int index223_16 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred310_Delphi()) ) {s = 120;}
						else if ( (synpred311_Delphi()) ) {s = 17;}
						 
						input.seek(index223_16);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA223_19 = input.LA(1);
						 
						int index223_19 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred311_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index223_19);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA223_20 = input.LA(1);
						 
						int index223_20 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred311_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index223_20);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA223_21 = input.LA(1);
						 
						int index223_21 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred311_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index223_21);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA223_26 = input.LA(1);
						 
						int index223_26 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred311_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index223_26);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA223_43 = input.LA(1);
						 
						int index223_43 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred311_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index223_43);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA223_47 = input.LA(1);
						 
						int index223_47 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred311_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index223_47);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA223_48 = input.LA(1);
						 
						int index223_48 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred311_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index223_48);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA223_49 = input.LA(1);
						 
						int index223_49 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred311_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index223_49);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA223_50 = input.LA(1);
						 
						int index223_50 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred311_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index223_50);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA223_51 = input.LA(1);
						 
						int index223_51 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred311_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index223_51);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA223_52 = input.LA(1);
						 
						int index223_52 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred311_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index223_52);
						if ( s>=0 ) return s;
						break;

					case 27 : 
						int LA223_53 = input.LA(1);
						 
						int index223_53 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred311_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index223_53);
						if ( s>=0 ) return s;
						break;

					case 28 : 
						int LA223_55 = input.LA(1);
						 
						int index223_55 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred311_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index223_55);
						if ( s>=0 ) return s;
						break;

					case 29 : 
						int LA223_61 = input.LA(1);
						 
						int index223_61 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred311_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index223_61);
						if ( s>=0 ) return s;
						break;

					case 30 : 
						int LA223_64 = input.LA(1);
						 
						int index223_64 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred311_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index223_64);
						if ( s>=0 ) return s;
						break;

					case 31 : 
						int LA223_66 = input.LA(1);
						 
						int index223_66 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred311_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index223_66);
						if ( s>=0 ) return s;
						break;

					case 32 : 
						int LA223_72 = input.LA(1);
						 
						int index223_72 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred311_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index223_72);
						if ( s>=0 ) return s;
						break;

					case 33 : 
						int LA223_74 = input.LA(1);
						 
						int index223_74 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred311_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index223_74);
						if ( s>=0 ) return s;
						break;

					case 34 : 
						int LA223_86 = input.LA(1);
						 
						int index223_86 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred311_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index223_86);
						if ( s>=0 ) return s;
						break;

					case 35 : 
						int LA223_92 = input.LA(1);
						 
						int index223_92 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred311_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index223_92);
						if ( s>=0 ) return s;
						break;

					case 36 : 
						int LA223_95 = input.LA(1);
						 
						int index223_95 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred311_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index223_95);
						if ( s>=0 ) return s;
						break;

					case 37 : 
						int LA223_97 = input.LA(1);
						 
						int index223_97 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred311_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index223_97);
						if ( s>=0 ) return s;
						break;

					case 38 : 
						int LA223_98 = input.LA(1);
						 
						int index223_98 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred311_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index223_98);
						if ( s>=0 ) return s;
						break;

					case 39 : 
						int LA223_101 = input.LA(1);
						 
						int index223_101 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred311_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index223_101);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 223, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA226_eotS =
		"\7\uffff";
	static final String DFA226_eofS =
		"\2\2\1\uffff\1\2\3\uffff";
	static final String DFA226_minS =
		"\2\4\1\uffff\1\4\2\0\1\uffff";
	static final String DFA226_maxS =
		"\2\u00d2\1\uffff\1\u00d2\2\0\1\uffff";
	static final String DFA226_acceptS =
		"\2\uffff\1\2\3\uffff\1\1";
	static final String DFA226_specialS =
		"\4\uffff\1\0\1\1\1\uffff}>";
	static final String[] DFA226_transitionS = {
			"\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff\4\2\1\uffff\7\2\1\uffff\4\2\1\1"+
			"\5\2\1\uffff\7\2\3\uffff\13\2\1\uffff\3\2\2\uffff\2\2\1\uffff\2\2\3\uffff"+
			"\7\2\1\uffff\3\2\2\uffff\25\2\3\uffff\7\2\1\uffff\5\2\1\uffff\1\2\2\uffff"+
			"\2\2\1\uffff\2\2\1\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff\15\2\1\uffff"+
			"\1\2\15\uffff\3\2\3\uffff\1\2\6\uffff\2\2\2\uffff\4\2\2\uffff\2\2\1\uffff"+
			"\16\2",
			"\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff\4\2\1\uffff\7\2\1\uffff\4\2\1\3"+
			"\5\2\1\uffff\7\2\3\uffff\13\2\1\uffff\3\2\2\uffff\2\2\1\uffff\2\2\3\uffff"+
			"\7\2\1\uffff\3\2\2\uffff\25\2\3\uffff\7\2\1\uffff\4\2\1\4\1\uffff\1\2"+
			"\2\uffff\2\2\1\uffff\2\2\1\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff"+
			"\15\2\1\uffff\1\2\15\uffff\3\2\3\uffff\1\2\6\uffff\2\2\2\uffff\4\2\2"+
			"\uffff\2\2\1\uffff\16\2",
			"",
			"\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff\4\2\1\uffff\7\2\1\uffff\4\2\1\3"+
			"\5\2\1\uffff\7\2\3\uffff\13\2\1\uffff\3\2\2\uffff\2\2\1\uffff\2\2\3\uffff"+
			"\7\2\1\uffff\3\2\2\uffff\25\2\3\uffff\7\2\1\uffff\4\2\1\5\1\uffff\1\2"+
			"\2\uffff\2\2\1\uffff\2\2\1\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff"+
			"\15\2\1\uffff\1\2\15\uffff\3\2\3\uffff\1\2\6\uffff\2\2\2\uffff\4\2\2"+
			"\uffff\2\2\1\uffff\16\2",
			"\1\uffff",
			"\1\uffff",
			""
	};

	static final short[] DFA226_eot = DFA.unpackEncodedString(DFA226_eotS);
	static final short[] DFA226_eof = DFA.unpackEncodedString(DFA226_eofS);
	static final char[] DFA226_min = DFA.unpackEncodedStringToUnsignedChars(DFA226_minS);
	static final char[] DFA226_max = DFA.unpackEncodedStringToUnsignedChars(DFA226_maxS);
	static final short[] DFA226_accept = DFA.unpackEncodedString(DFA226_acceptS);
	static final short[] DFA226_special = DFA.unpackEncodedString(DFA226_specialS);
	static final short[][] DFA226_transition;

	static {
		int numStates = DFA226_transitionS.length;
		DFA226_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA226_transition[i] = DFA.unpackEncodedString(DFA226_transitionS[i]);
		}
	}

	protected class DFA226 extends DFA {

		public DFA226(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 226;
			this.eot = DFA226_eot;
			this.eof = DFA226_eof;
			this.min = DFA226_min;
			this.max = DFA226_max;
			this.accept = DFA226_accept;
			this.special = DFA226_special;
			this.transition = DFA226_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 499:45: ( ( controlString ) QuotedString )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA226_4 = input.LA(1);
						 
						int index226_4 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred315_Delphi()) ) {s = 6;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index226_4);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA226_5 = input.LA(1);
						 
						int index226_5 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred315_Delphi()) ) {s = 6;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index226_5);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 226, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA236_eotS =
		"\154\uffff";
	static final String DFA236_eofS =
		"\1\1\153\uffff";
	static final String DFA236_minS =
		"\1\4\11\uffff\1\0\4\uffff\1\0\6\uffff\1\0\2\uffff\1\0\4\uffff\1\0\1\uffff"+
		"\2\0\112\uffff";
	static final String DFA236_maxS =
		"\1\u00d2\11\uffff\1\0\4\uffff\1\0\6\uffff\1\0\2\uffff\1\0\4\uffff\1\0"+
		"\1\uffff\2\0\112\uffff";
	static final String DFA236_acceptS =
		"\1\uffff\1\2\151\uffff\1\1";
	static final String DFA236_specialS =
		"\12\uffff\1\0\4\uffff\1\1\6\uffff\1\2\2\uffff\1\3\4\uffff\1\4\1\uffff"+
		"\1\5\1\6\112\uffff}>";
	static final String[] DFA236_transitionS = {
			"\1\1\1\uffff\3\1\1\uffff\3\1\1\uffff\2\1\1\12\1\1\1\uffff\7\1\1\uffff"+
			"\12\1\1\uffff\2\1\1\41\4\1\3\uffff\13\1\1\uffff\3\1\2\uffff\2\1\1\uffff"+
			"\2\1\3\uffff\7\1\1\uffff\2\1\1\31\2\uffff\3\1\1\26\1\36\20\1\3\uffff"+
			"\4\1\1\17\2\1\1\uffff\5\1\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff"+
			"\1\1\2\uffff\4\1\1\uffff\1\1\1\uffff\15\1\1\uffff\1\1\15\uffff\3\1\3"+
			"\uffff\1\1\6\uffff\2\1\2\uffff\4\1\2\uffff\2\1\1\uffff\14\1\1\40\1\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA236_eot = DFA.unpackEncodedString(DFA236_eotS);
	static final short[] DFA236_eof = DFA.unpackEncodedString(DFA236_eofS);
	static final char[] DFA236_min = DFA.unpackEncodedStringToUnsignedChars(DFA236_minS);
	static final char[] DFA236_max = DFA.unpackEncodedStringToUnsignedChars(DFA236_maxS);
	static final short[] DFA236_accept = DFA.unpackEncodedString(DFA236_acceptS);
	static final short[] DFA236_special = DFA.unpackEncodedString(DFA236_specialS);
	static final short[][] DFA236_transition;

	static {
		int numStates = DFA236_transitionS.length;
		DFA236_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA236_transition[i] = DFA.unpackEncodedString(DFA236_transitionS[i]);
		}
	}

	protected class DFA236 extends DFA {

		public DFA236(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 236;
			this.eot = DFA236_eot;
			this.eof = DFA236_eof;
			this.min = DFA236_min;
			this.max = DFA236_max;
			this.accept = DFA236_accept;
			this.special = DFA236_special;
			this.transition = DFA236_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 506:93: ( designatorItem )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA236_10 = input.LA(1);
						 
						int index236_10 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred325_Delphi()) ) {s = 107;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index236_10);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA236_15 = input.LA(1);
						 
						int index236_15 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred325_Delphi()) ) {s = 107;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index236_15);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA236_22 = input.LA(1);
						 
						int index236_22 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred325_Delphi()) ) {s = 107;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index236_22);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA236_25 = input.LA(1);
						 
						int index236_25 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred325_Delphi()) ) {s = 107;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index236_25);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA236_30 = input.LA(1);
						 
						int index236_30 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred325_Delphi()) ) {s = 107;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index236_30);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA236_32 = input.LA(1);
						 
						int index236_32 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred325_Delphi()) ) {s = 107;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index236_32);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA236_33 = input.LA(1);
						 
						int index236_33 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred325_Delphi()) ) {s = 107;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index236_33);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 236, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA273_eotS =
		"\153\uffff";
	static final String DFA273_eofS =
		"\1\2\152\uffff";
	static final String DFA273_minS =
		"\1\4\1\0\151\uffff";
	static final String DFA273_maxS =
		"\1\u00d2\1\0\151\uffff";
	static final String DFA273_acceptS =
		"\2\uffff\1\3\146\uffff\1\1\1\2";
	static final String DFA273_specialS =
		"\1\uffff\1\0\151\uffff}>";
	static final String[] DFA273_transitionS = {
			"\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff\4\2\1\uffff\7\2\1\uffff\12\2\1\uffff"+
			"\7\2\3\uffff\13\2\1\uffff\3\2\2\uffff\2\2\1\uffff\2\2\3\uffff\7\2\1\uffff"+
			"\3\2\2\uffff\3\2\1\1\21\2\3\uffff\7\2\1\uffff\5\2\1\uffff\1\2\2\uffff"+
			"\2\2\1\uffff\2\2\1\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff\15\2\1\uffff"+
			"\1\2\15\uffff\3\2\3\uffff\1\2\6\uffff\2\2\2\uffff\4\2\2\uffff\2\2\1\uffff"+
			"\16\2",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA273_eot = DFA.unpackEncodedString(DFA273_eotS);
	static final short[] DFA273_eof = DFA.unpackEncodedString(DFA273_eofS);
	static final char[] DFA273_min = DFA.unpackEncodedStringToUnsignedChars(DFA273_minS);
	static final char[] DFA273_max = DFA.unpackEncodedStringToUnsignedChars(DFA273_maxS);
	static final short[] DFA273_accept = DFA.unpackEncodedString(DFA273_acceptS);
	static final short[] DFA273_special = DFA.unpackEncodedString(DFA273_specialS);
	static final short[][] DFA273_transition;

	static {
		int numStates = DFA273_transitionS.length;
		DFA273_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA273_transition[i] = DFA.unpackEncodedString(DFA273_transitionS[i]);
		}
	}

	protected class DFA273 extends DFA {

		public DFA273(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 273;
			this.eot = DFA273_eot;
			this.eof = DFA273_eof;
			this.min = DFA273_min;
			this.max = DFA273_max;
			this.accept = DFA273_accept;
			this.special = DFA273_special;
			this.transition = DFA273_transition;
		}
		@Override
		public String getDescription() {
			return "606:1: constExpression : ( '(' recordConstExpression ( ';' recordConstExpression )* ')' | '(' constExpression ( ',' constExpression )* ')' ( constExpression )? | expression );";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA273_1 = input.LA(1);
						 
						int index273_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred406_Delphi()) ) {s = 105;}
						else if ( (synpred409_Delphi()) ) {s = 106;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index273_1);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 273, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA272_eotS =
		"\153\uffff";
	static final String DFA272_eofS =
		"\1\44\152\uffff";
	static final String DFA272_minS =
		"\1\4\150\0\2\uffff";
	static final String DFA272_maxS =
		"\1\u00d2\150\0\2\uffff";
	static final String DFA272_acceptS =
		"\151\uffff\1\1\1\2";
	static final String DFA272_specialS =
		"\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
		"\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
		"\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
		"\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
		"\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
		"\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117\1\120"+
		"\1\121\1\122\1\123\1\124\1\125\1\126\1\127\1\130\1\131\1\132\1\133\1\134"+
		"\1\135\1\136\1\137\1\140\1\141\1\142\1\143\1\144\1\145\1\146\1\147\2\uffff}>";
	static final String[] DFA272_transitionS = {
			"\1\34\1\uffff\1\143\1\33\1\143\1\uffff\1\33\1\110\1\126\1\uffff\1\47"+
			"\1\143\1\4\1\72\1\uffff\1\107\1\143\1\102\1\63\1\73\1\53\1\52\1\uffff"+
			"\1\77\1\74\2\143\1\20\1\120\1\150\1\37\1\74\1\116\1\uffff\1\33\1\145"+
			"\1\31\1\45\1\147\2\143\3\uffff\1\50\1\51\1\35\1\56\1\143\1\40\1\131\1"+
			"\106\1\137\1\15\1\133\1\uffff\1\143\1\54\1\57\2\uffff\1\3\1\64\1\uffff"+
			"\1\36\1\143\3\uffff\1\142\1\121\1\27\1\140\1\24\1\141\1\125\1\uffff\1"+
			"\64\1\105\1\22\2\uffff\1\64\1\42\1\123\1\1\1\32\1\143\1\10\1\33\1\75"+
			"\1\135\1\16\1\122\1\6\1\64\1\143\1\61\1\60\1\70\1\33\1\143\1\124\3\uffff"+
			"\1\127\1\41\1\7\1\143\1\11\1\65\1\2\1\uffff\1\76\1\66\1\67\1\71\1\21"+
			"\1\uffff\1\104\2\uffff\1\111\1\114\1\uffff\1\143\1\46\1\uffff\1\143\2"+
			"\uffff\1\112\1\77\1\103\1\130\1\uffff\1\43\1\uffff\4\33\1\143\1\132\1"+
			"\117\1\62\1\143\1\144\1\101\1\146\1\14\1\uffff\1\100\15\uffff\1\13\1"+
			"\25\1\13\3\uffff\1\12\6\uffff\1\136\1\55\2\uffff\1\101\1\134\2\143\2"+
			"\uffff\1\113\1\115\1\uffff\1\33\1\26\1\5\3\33\1\23\5\33\1\30\1\17",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			""
	};

	static final short[] DFA272_eot = DFA.unpackEncodedString(DFA272_eotS);
	static final short[] DFA272_eof = DFA.unpackEncodedString(DFA272_eofS);
	static final char[] DFA272_min = DFA.unpackEncodedStringToUnsignedChars(DFA272_minS);
	static final char[] DFA272_max = DFA.unpackEncodedStringToUnsignedChars(DFA272_maxS);
	static final short[] DFA272_accept = DFA.unpackEncodedString(DFA272_acceptS);
	static final short[] DFA272_special = DFA.unpackEncodedString(DFA272_specialS);
	static final short[][] DFA272_transition;

	static {
		int numStates = DFA272_transitionS.length;
		DFA272_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA272_transition[i] = DFA.unpackEncodedString(DFA272_transitionS[i]);
		}
	}

	protected class DFA272 extends DFA {

		public DFA272(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 272;
			this.eot = DFA272_eot;
			this.eof = DFA272_eof;
			this.min = DFA272_min;
			this.max = DFA272_max;
			this.accept = DFA272_accept;
			this.special = DFA272_special;
			this.transition = DFA272_transition;
		}
		@Override
		public String getDescription() {
			return "607:79: ( constExpression )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA272_1 = input.LA(1);
						 
						int index272_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_1);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA272_2 = input.LA(1);
						 
						int index272_2 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_2);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA272_3 = input.LA(1);
						 
						int index272_3 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_3);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA272_4 = input.LA(1);
						 
						int index272_4 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_4);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA272_5 = input.LA(1);
						 
						int index272_5 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_5);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA272_6 = input.LA(1);
						 
						int index272_6 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_6);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA272_7 = input.LA(1);
						 
						int index272_7 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_7);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA272_8 = input.LA(1);
						 
						int index272_8 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_8);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA272_9 = input.LA(1);
						 
						int index272_9 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_9);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA272_10 = input.LA(1);
						 
						int index272_10 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_10);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA272_11 = input.LA(1);
						 
						int index272_11 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_11);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA272_12 = input.LA(1);
						 
						int index272_12 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_12);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA272_13 = input.LA(1);
						 
						int index272_13 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_13);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA272_14 = input.LA(1);
						 
						int index272_14 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_14);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA272_15 = input.LA(1);
						 
						int index272_15 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_15);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA272_16 = input.LA(1);
						 
						int index272_16 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_16);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA272_17 = input.LA(1);
						 
						int index272_17 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_17);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA272_18 = input.LA(1);
						 
						int index272_18 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_18);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA272_19 = input.LA(1);
						 
						int index272_19 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_19);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA272_20 = input.LA(1);
						 
						int index272_20 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_20);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA272_21 = input.LA(1);
						 
						int index272_21 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_21);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA272_22 = input.LA(1);
						 
						int index272_22 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_22);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA272_23 = input.LA(1);
						 
						int index272_23 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_23);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA272_24 = input.LA(1);
						 
						int index272_24 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_24);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA272_25 = input.LA(1);
						 
						int index272_25 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_25);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA272_26 = input.LA(1);
						 
						int index272_26 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_26);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA272_27 = input.LA(1);
						 
						int index272_27 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_27);
						if ( s>=0 ) return s;
						break;

					case 27 : 
						int LA272_28 = input.LA(1);
						 
						int index272_28 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_28);
						if ( s>=0 ) return s;
						break;

					case 28 : 
						int LA272_29 = input.LA(1);
						 
						int index272_29 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_29);
						if ( s>=0 ) return s;
						break;

					case 29 : 
						int LA272_30 = input.LA(1);
						 
						int index272_30 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_30);
						if ( s>=0 ) return s;
						break;

					case 30 : 
						int LA272_31 = input.LA(1);
						 
						int index272_31 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_31);
						if ( s>=0 ) return s;
						break;

					case 31 : 
						int LA272_32 = input.LA(1);
						 
						int index272_32 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_32);
						if ( s>=0 ) return s;
						break;

					case 32 : 
						int LA272_33 = input.LA(1);
						 
						int index272_33 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_33);
						if ( s>=0 ) return s;
						break;

					case 33 : 
						int LA272_34 = input.LA(1);
						 
						int index272_34 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_34);
						if ( s>=0 ) return s;
						break;

					case 34 : 
						int LA272_35 = input.LA(1);
						 
						int index272_35 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_35);
						if ( s>=0 ) return s;
						break;

					case 35 : 
						int LA272_36 = input.LA(1);
						 
						int index272_36 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_36);
						if ( s>=0 ) return s;
						break;

					case 36 : 
						int LA272_37 = input.LA(1);
						 
						int index272_37 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_37);
						if ( s>=0 ) return s;
						break;

					case 37 : 
						int LA272_38 = input.LA(1);
						 
						int index272_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_38);
						if ( s>=0 ) return s;
						break;

					case 38 : 
						int LA272_39 = input.LA(1);
						 
						int index272_39 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_39);
						if ( s>=0 ) return s;
						break;

					case 39 : 
						int LA272_40 = input.LA(1);
						 
						int index272_40 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_40);
						if ( s>=0 ) return s;
						break;

					case 40 : 
						int LA272_41 = input.LA(1);
						 
						int index272_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_41);
						if ( s>=0 ) return s;
						break;

					case 41 : 
						int LA272_42 = input.LA(1);
						 
						int index272_42 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_42);
						if ( s>=0 ) return s;
						break;

					case 42 : 
						int LA272_43 = input.LA(1);
						 
						int index272_43 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_43);
						if ( s>=0 ) return s;
						break;

					case 43 : 
						int LA272_44 = input.LA(1);
						 
						int index272_44 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_44);
						if ( s>=0 ) return s;
						break;

					case 44 : 
						int LA272_45 = input.LA(1);
						 
						int index272_45 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_45);
						if ( s>=0 ) return s;
						break;

					case 45 : 
						int LA272_46 = input.LA(1);
						 
						int index272_46 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_46);
						if ( s>=0 ) return s;
						break;

					case 46 : 
						int LA272_47 = input.LA(1);
						 
						int index272_47 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_47);
						if ( s>=0 ) return s;
						break;

					case 47 : 
						int LA272_48 = input.LA(1);
						 
						int index272_48 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_48);
						if ( s>=0 ) return s;
						break;

					case 48 : 
						int LA272_49 = input.LA(1);
						 
						int index272_49 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_49);
						if ( s>=0 ) return s;
						break;

					case 49 : 
						int LA272_50 = input.LA(1);
						 
						int index272_50 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_50);
						if ( s>=0 ) return s;
						break;

					case 50 : 
						int LA272_51 = input.LA(1);
						 
						int index272_51 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_51);
						if ( s>=0 ) return s;
						break;

					case 51 : 
						int LA272_52 = input.LA(1);
						 
						int index272_52 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_52);
						if ( s>=0 ) return s;
						break;

					case 52 : 
						int LA272_53 = input.LA(1);
						 
						int index272_53 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_53);
						if ( s>=0 ) return s;
						break;

					case 53 : 
						int LA272_54 = input.LA(1);
						 
						int index272_54 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_54);
						if ( s>=0 ) return s;
						break;

					case 54 : 
						int LA272_55 = input.LA(1);
						 
						int index272_55 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_55);
						if ( s>=0 ) return s;
						break;

					case 55 : 
						int LA272_56 = input.LA(1);
						 
						int index272_56 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_56);
						if ( s>=0 ) return s;
						break;

					case 56 : 
						int LA272_57 = input.LA(1);
						 
						int index272_57 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_57);
						if ( s>=0 ) return s;
						break;

					case 57 : 
						int LA272_58 = input.LA(1);
						 
						int index272_58 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_58);
						if ( s>=0 ) return s;
						break;

					case 58 : 
						int LA272_59 = input.LA(1);
						 
						int index272_59 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_59);
						if ( s>=0 ) return s;
						break;

					case 59 : 
						int LA272_60 = input.LA(1);
						 
						int index272_60 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_60);
						if ( s>=0 ) return s;
						break;

					case 60 : 
						int LA272_61 = input.LA(1);
						 
						int index272_61 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_61);
						if ( s>=0 ) return s;
						break;

					case 61 : 
						int LA272_62 = input.LA(1);
						 
						int index272_62 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_62);
						if ( s>=0 ) return s;
						break;

					case 62 : 
						int LA272_63 = input.LA(1);
						 
						int index272_63 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_63);
						if ( s>=0 ) return s;
						break;

					case 63 : 
						int LA272_64 = input.LA(1);
						 
						int index272_64 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_64);
						if ( s>=0 ) return s;
						break;

					case 64 : 
						int LA272_65 = input.LA(1);
						 
						int index272_65 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_65);
						if ( s>=0 ) return s;
						break;

					case 65 : 
						int LA272_66 = input.LA(1);
						 
						int index272_66 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_66);
						if ( s>=0 ) return s;
						break;

					case 66 : 
						int LA272_67 = input.LA(1);
						 
						int index272_67 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_67);
						if ( s>=0 ) return s;
						break;

					case 67 : 
						int LA272_68 = input.LA(1);
						 
						int index272_68 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_68);
						if ( s>=0 ) return s;
						break;

					case 68 : 
						int LA272_69 = input.LA(1);
						 
						int index272_69 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_69);
						if ( s>=0 ) return s;
						break;

					case 69 : 
						int LA272_70 = input.LA(1);
						 
						int index272_70 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_70);
						if ( s>=0 ) return s;
						break;

					case 70 : 
						int LA272_71 = input.LA(1);
						 
						int index272_71 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_71);
						if ( s>=0 ) return s;
						break;

					case 71 : 
						int LA272_72 = input.LA(1);
						 
						int index272_72 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_72);
						if ( s>=0 ) return s;
						break;

					case 72 : 
						int LA272_73 = input.LA(1);
						 
						int index272_73 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_73);
						if ( s>=0 ) return s;
						break;

					case 73 : 
						int LA272_74 = input.LA(1);
						 
						int index272_74 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_74);
						if ( s>=0 ) return s;
						break;

					case 74 : 
						int LA272_75 = input.LA(1);
						 
						int index272_75 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_75);
						if ( s>=0 ) return s;
						break;

					case 75 : 
						int LA272_76 = input.LA(1);
						 
						int index272_76 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_76);
						if ( s>=0 ) return s;
						break;

					case 76 : 
						int LA272_77 = input.LA(1);
						 
						int index272_77 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_77);
						if ( s>=0 ) return s;
						break;

					case 77 : 
						int LA272_78 = input.LA(1);
						 
						int index272_78 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_78);
						if ( s>=0 ) return s;
						break;

					case 78 : 
						int LA272_79 = input.LA(1);
						 
						int index272_79 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_79);
						if ( s>=0 ) return s;
						break;

					case 79 : 
						int LA272_80 = input.LA(1);
						 
						int index272_80 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_80);
						if ( s>=0 ) return s;
						break;

					case 80 : 
						int LA272_81 = input.LA(1);
						 
						int index272_81 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_81);
						if ( s>=0 ) return s;
						break;

					case 81 : 
						int LA272_82 = input.LA(1);
						 
						int index272_82 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_82);
						if ( s>=0 ) return s;
						break;

					case 82 : 
						int LA272_83 = input.LA(1);
						 
						int index272_83 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_83);
						if ( s>=0 ) return s;
						break;

					case 83 : 
						int LA272_84 = input.LA(1);
						 
						int index272_84 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_84);
						if ( s>=0 ) return s;
						break;

					case 84 : 
						int LA272_85 = input.LA(1);
						 
						int index272_85 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_85);
						if ( s>=0 ) return s;
						break;

					case 85 : 
						int LA272_86 = input.LA(1);
						 
						int index272_86 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_86);
						if ( s>=0 ) return s;
						break;

					case 86 : 
						int LA272_87 = input.LA(1);
						 
						int index272_87 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_87);
						if ( s>=0 ) return s;
						break;

					case 87 : 
						int LA272_88 = input.LA(1);
						 
						int index272_88 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_88);
						if ( s>=0 ) return s;
						break;

					case 88 : 
						int LA272_89 = input.LA(1);
						 
						int index272_89 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_89);
						if ( s>=0 ) return s;
						break;

					case 89 : 
						int LA272_90 = input.LA(1);
						 
						int index272_90 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_90);
						if ( s>=0 ) return s;
						break;

					case 90 : 
						int LA272_91 = input.LA(1);
						 
						int index272_91 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_91);
						if ( s>=0 ) return s;
						break;

					case 91 : 
						int LA272_92 = input.LA(1);
						 
						int index272_92 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_92);
						if ( s>=0 ) return s;
						break;

					case 92 : 
						int LA272_93 = input.LA(1);
						 
						int index272_93 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_93);
						if ( s>=0 ) return s;
						break;

					case 93 : 
						int LA272_94 = input.LA(1);
						 
						int index272_94 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_94);
						if ( s>=0 ) return s;
						break;

					case 94 : 
						int LA272_95 = input.LA(1);
						 
						int index272_95 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_95);
						if ( s>=0 ) return s;
						break;

					case 95 : 
						int LA272_96 = input.LA(1);
						 
						int index272_96 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_96);
						if ( s>=0 ) return s;
						break;

					case 96 : 
						int LA272_97 = input.LA(1);
						 
						int index272_97 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_97);
						if ( s>=0 ) return s;
						break;

					case 97 : 
						int LA272_98 = input.LA(1);
						 
						int index272_98 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_98);
						if ( s>=0 ) return s;
						break;

					case 98 : 
						int LA272_99 = input.LA(1);
						 
						int index272_99 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_99);
						if ( s>=0 ) return s;
						break;

					case 99 : 
						int LA272_100 = input.LA(1);
						 
						int index272_100 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_100);
						if ( s>=0 ) return s;
						break;

					case 100 : 
						int LA272_101 = input.LA(1);
						 
						int index272_101 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_101);
						if ( s>=0 ) return s;
						break;

					case 101 : 
						int LA272_102 = input.LA(1);
						 
						int index272_102 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_102);
						if ( s>=0 ) return s;
						break;

					case 102 : 
						int LA272_103 = input.LA(1);
						 
						int index272_103 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_103);
						if ( s>=0 ) return s;
						break;

					case 103 : 
						int LA272_104 = input.LA(1);
						 
						int index272_104 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred408_Delphi()) ) {s = 105;}
						else if ( (true) ) {s = 106;}
						 
						input.seek(index272_104);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 272, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	public static final BitSet FOLLOW_program_in_file93 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_library_in_file97 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unit_in_file101 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_packageE_in_file105 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_programHead_in_program168 = new BitSet(new long[]{0x0080010818880800L,0x00100000000C0002L,0x1400000022000200L});
	public static final BitSet FOLLOW_usesFileClause_in_program173 = new BitSet(new long[]{0x0080010818880800L,0x00100000000C0002L,0x1000000022000200L});
	public static final BitSet FOLLOW_block_in_program177 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_program179 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PROGRAM_in_programHead233 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_namespaceName_in_programHead235 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_programParmSeq_in_programHead238 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_programHead242 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_programParmSeq293 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8042DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_programParmSeq296 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_COMMA_in_programParmSeq299 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_programParmSeq301 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_programParmSeq308 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_libraryHead_in_library366 = new BitSet(new long[]{0x0080010818880800L,0x00100000000C0002L,0x1400000022000200L});
	public static final BitSet FOLLOW_usesFileClause_in_library369 = new BitSet(new long[]{0x0080010818880800L,0x00100000000C0002L,0x1000000022000200L});
	public static final BitSet FOLLOW_block_in_library373 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_library375 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LIBRARY_in_libraryHead429 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_namespaceName_in_libraryHead431 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_hintingDirective_in_libraryHead434 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_libraryHead438 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_packageHead_in_packageE503 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_requiresClause_in_packageE505 = new BitSet(new long[]{0x0002000020000000L});
	public static final BitSet FOLLOW_containsClause_in_packageE508 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_packageE512 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_packageE514 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PACKAGE_in_packageHead568 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_namespaceName_in_packageHead570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_packageHead572 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unitHead_in_unit633 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_unitInterface_in_unit635 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_unitImplementation_in_unit637 = new BitSet(new long[]{0x0002000000080000L,0x0000000000004000L});
	public static final BitSet FOLLOW_unitBlock_in_unit639 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_unit641 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UNIT_in_unitHead698 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_namespaceName_in_unitHead700 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_hintingDirective_in_unitHead703 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_unitHead707 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTERFACE_in_unitInterface772 = new BitSet(new long[]{0x0080000818800002L,0x0010000000080002L,0x1400000022000200L});
	public static final BitSet FOLLOW_usesClause_in_unitInterface775 = new BitSet(new long[]{0x0080000818800002L,0x0010000000080002L,0x1000000022000200L});
	public static final BitSet FOLLOW_interfaceDecl_in_unitInterface780 = new BitSet(new long[]{0x0080000818800002L,0x0010000000080002L,0x1000000022000200L});
	public static final BitSet FOLLOW_IMPLEMENTATION_in_unitImplementation845 = new BitSet(new long[]{0x0080000818800002L,0x00100000000C0002L,0x1400000022000200L});
	public static final BitSet FOLLOW_usesClause_in_unitImplementation848 = new BitSet(new long[]{0x0080000818800002L,0x00100000000C0002L,0x1000000022000200L});
	public static final BitSet FOLLOW_declSection_in_unitImplementation853 = new BitSet(new long[]{0x0080000818800002L,0x00100000000C0002L,0x1000000022000200L});
	public static final BitSet FOLLOW_unitInitialization_in_unitBlock927 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_unitBlock929 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_compoundStatement_in_unitBlock962 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_END_in_unitBlock995 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INITIALIZATION_in_unitInitialization1042 = new BitSet(new long[]{0xB25019116039C950L,0x890E02904F083D28L,0xF100380018E8206DL,0x000000000002084FL});
	public static final BitSet FOLLOW_statementList_in_unitInitialization1044 = new BitSet(new long[]{0x2000000000000002L});
	public static final BitSet FOLLOW_unitFinalization_in_unitInitialization1047 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FINALIZATION_in_unitFinalization1098 = new BitSet(new long[]{0x925019116039C950L,0x890E02904F083D28L,0xF100380018E8206DL,0x000000000002084FL});
	public static final BitSet FOLLOW_statementList_in_unitFinalization1100 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONTAINS_in_containsClause1154 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_namespaceFileNameList_in_containsClause1156 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REQUIRES_in_requiresClause1207 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_namespaceNameList_in_requiresClause1209 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_USES_in_usesClause1264 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_namespaceNameList_in_usesClause1266 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_USES_in_usesFileClause1325 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_namespaceFileNameList_in_usesFileClause1327 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespaceFileName_in_namespaceFileNameList1379 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_COMMA_in_namespaceFileNameList1382 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_namespaceFileName_in_namespaceFileNameList1384 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_namespaceFileNameList1388 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespaceName_in_namespaceFileName1445 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000800L});
	public static final BitSet FOLLOW_IN_in_namespaceFileName1448 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_QuotedString_in_namespaceFileName1450 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespaceName_in_namespaceNameList1511 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_COMMA_in_namespaceNameList1514 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_namespaceName_in_namespaceNameList1516 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_namespaceNameList1520 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_declSection_in_block1593 = new BitSet(new long[]{0x0080000818880802L,0x00100000000C0002L,0x1000000022000200L});
	public static final BitSet FOLLOW_blockBody_in_block1598 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_compoundStatement_in_blockBody1656 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_assemblerStatement_in_blockBody1689 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_labelDeclSection_in_declSection1743 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constSection_in_declSection1776 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeSection_in_declSection1809 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_varSection_in_declSection1842 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_methodDecl_in_declSection1875 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procDecl_in_declSection1908 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exportsSection_in_declSection1941 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constSection_in_interfaceDecl1993 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeSection_in_interfaceDecl2026 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_varSection_in_interfaceDecl2059 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exportedProcHeading_in_interfaceDecl2092 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exportsSection_in_interfaceDecl2125 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procDecl_in_interfaceDecl2158 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_methodDecl_in_interfaceDecl2191 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LABEL_in_labelDeclSection2240 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100380008E8002DL,0x000000000000000CL});
	public static final BitSet FOLLOW_label_in_labelDeclSection2242 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_COMMA_in_labelDeclSection2245 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100380008E8002DL,0x000000000000000CL});
	public static final BitSet FOLLOW_label_in_labelDeclSection2247 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_labelDeclSection2251 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constKey_in_constSection2304 = new BitSet(new long[]{0x1250181160108152L,0x810A029049081C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_constDeclaration_in_constSection2307 = new BitSet(new long[]{0x1250181160108152L,0x810A029049081C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_customAttribute_in_constDeclaration2462 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_constDeclaration2466 = new BitSet(new long[]{0x0004000001000000L});
	public static final BitSet FOLLOW_COLON_in_constDeclaration2469 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_constDeclaration2471 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_EQUAL_in_constDeclaration2475 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_constExpression_in_constDeclaration2477 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_hintingDirective_in_constDeclaration2480 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_constDeclaration2484 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TYPE_in_typeSection2551 = new BitSet(new long[]{0x1250181160108150L,0x810A029049081C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_typeDeclaration_in_typeSection2553 = new BitSet(new long[]{0x1250181160108152L,0x810A029049081C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_typeDeclaration_in_typeSection2556 = new BitSet(new long[]{0x1250181160108152L,0x810A029049081C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_customAttribute_in_typeDeclaration2622 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_genericTypeIdent_in_typeDeclaration2626 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_EQUAL_in_typeDeclaration2628 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_typeDeclaration2630 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_hintingDirective_in_typeDeclaration2633 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_typeDeclaration2637 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_varKey_in_varSection2714 = new BitSet(new long[]{0x1250181160108150L,0x810A029049081C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_varDeclaration_in_varSection2716 = new BitSet(new long[]{0x1250181160108152L,0x810A029049081C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_varDeclaration_in_varSection2719 = new BitSet(new long[]{0x1250181160108152L,0x810A029049081C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_customAttribute_in_varDeclaration2879 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_identListFlat_in_varDeclaration2883 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_varDeclaration2885 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_varDeclaration2887 = new BitSet(new long[]{0x0024000400000010L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_varValueSpec_in_varDeclaration2890 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_hintingDirective_in_varDeclaration2895 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_varDeclaration2899 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VAR_in_inlineVarDeclaration2963 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_inlineVarDeclaration2965 = new BitSet(new long[]{0x0000000001004000L});
	public static final BitSet FOLLOW_COLON_in_inlineVarDeclaration2968 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_inlineVarDeclaration2970 = new BitSet(new long[]{0x0000000000004000L});
	public static final BitSet FOLLOW_ASSIGN_in_inlineVarDeclaration2974 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_inlineVarDeclaration2976 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VAR_in_inlineVarDeclaration3009 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_inlineVarDeclaration3011 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_inlineVarDeclaration3013 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_inlineVarDeclaration3015 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ABSOLUTE_in_varValueSpec3070 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_qualifiedIdent_in_varValueSpec3072 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ABSOLUTE_in_varValueSpec3105 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_constExpression_in_varValueSpec3107 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EQUAL_in_varValueSpec3140 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_constExpression_in_varValueSpec3142 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXPORTS_in_exportsSection3193 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_exportsSection3195 = new BitSet(new long[]{0x0000000002000000L,0x0000000042001000L,0x0000000000002100L});
	public static final BitSet FOLLOW_exportItem_in_exportsSection3197 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_COMMA_in_exportsSection3200 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_exportsSection3202 = new BitSet(new long[]{0x0000000002000000L,0x0000000042001000L,0x0000000000002100L});
	public static final BitSet FOLLOW_exportItem_in_exportsSection3204 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_exportsSection3208 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_exportItem3264 = new BitSet(new long[]{0x1250181168108150L,0x810A029049081C20L,0xF100100008E8042DL,0x000000000000004CL});
	public static final BitSet FOLLOW_formalParameterList_in_exportItem3267 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_exportItem3271 = new BitSet(new long[]{0x0000000000000002L,0x0000000040001000L,0x0000000000000100L});
	public static final BitSet FOLLOW_INDEX_in_exportItem3276 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_exportItem3278 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_NAME_in_exportItem3283 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_exportItem3285 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_RESIDENT_in_exportItem3290 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_strucType_in_typeDecl3352 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pointerType_in_typeDecl3385 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_stringType_in_typeDecl3418 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedureType_in_typeDecl3451 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_variantType_in_typeDecl3484 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subRangeType_in_typeDecl3517 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TYPE_in_typeDecl3551 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_typeId_in_typeDecl3555 = new BitSet(new long[]{0x0000010000000002L,0x0000000006000000L});
	public static final BitSet FOLLOW_genericPostfix_in_typeDecl3558 = new BitSet(new long[]{0x0000010000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_DOT_in_typeDecl3563 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_typeDecl3565 = new BitSet(new long[]{0x0000010000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_paranthesePostfix_in_typeDecl3570 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleType_in_typeDecl3605 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PACKED_in_strucType3691 = new BitSet(new long[]{0x0800002000800200L,0x0000001000010000L,0x0000000000004002L});
	public static final BitSet FOLLOW_strucTypePart_in_strucType3695 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_arrayType_in_strucTypePart3751 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_setType_in_strucTypePart3784 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fileType_in_strucTypePart3817 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classDecl_in_strucTypePart3850 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ARRAY_in_arrayType3908 = new BitSet(new long[]{0x0000000000000000L,0x0000002000080000L});
	public static final BitSet FOLLOW_LBRACK_in_arrayType3911 = new BitSet(new long[]{0x12501911E2118150L,0x951F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_arrayIndex_in_arrayType3914 = new BitSet(new long[]{0x0000000002000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_COMMA_in_arrayType3919 = new BitSet(new long[]{0x12501911E2118150L,0x951F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_arrayIndex_in_arrayType3922 = new BitSet(new long[]{0x0000000002000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_arrayType3928 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_OF_in_arrayType3932 = new BitSet(new long[]{0x1A501931E8918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_arraySubType_in_arrayType3934 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeId_in_arrayIndex4060 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_arrayIndex4093 = new BitSet(new long[]{0x0000020000000000L});
	public static final BitSet FOLLOW_DOTDOT_in_arrayIndex4095 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_arrayIndex4097 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONST_in_arraySubType4151 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeDecl_in_arraySubType4184 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SET_in_setType4242 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_OF_in_setType4244 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_setType4246 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FILE_in_fileType4320 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
	public static final BitSet FOLLOW_OF_in_fileType4323 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_fileType4325 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_POINTER2_in_pointerType4381 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_pointerType4383 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_POINTER_in_pointerType4416 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRING_in_stringType4471 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
	public static final BitSet FOLLOW_LBRACK_in_stringType4474 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_stringType4476 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_stringType4478 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TYPE_in_stringType4518 = new BitSet(new long[]{0x0000000000000100L});
	public static final BitSet FOLLOW_ANSISTRING_in_stringType4522 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_codePageNumber_in_stringType4525 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_codePageNumber4578 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000280000000000L});
	public static final BitSet FOLLOW_intNum_in_codePageNumber4580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_codePageNumber4582 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_methodType_in_procedureType4634 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleProcedureType_in_procedureType4667 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedureReference_in_procedureType4700 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedureTypeHeading_in_methodType4755 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_OF_in_methodType4757 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_OBJECT_in_methodType4759 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedureTypeHeading_in_simpleProcedureType4805 = new BitSet(new long[]{0x0040000000400002L,0x0000400000000000L,0x0000000000102808L});
	public static final BitSet FOLLOW_SEMI_in_simpleProcedureType4810 = new BitSet(new long[]{0x0040000000400000L,0x0000400000000000L,0x0000000000100808L});
	public static final BitSet FOLLOW_callConventionNoSemi_in_simpleProcedureType4814 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REFERENCE_in_procedureReference4863 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_TO_in_procedureReference4865 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000002L});
	public static final BitSet FOLLOW_procedureTypeHeading_in_procedureReference4867 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_procedureTypeHeading4912 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_procedureTypeHeading4915 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_procedureTypeHeading4919 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_customAttribute_in_procedureTypeHeading4922 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_procedureTypeHeading4926 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PROCEDURE_in_procedureTypeHeading4974 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_procedureTypeHeading4977 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARIANT_in_variantType5033 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_simpleType5089 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_enumType_in_simpleType5122 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constExpression_in_subRangeType5175 = new BitSet(new long[]{0x0000020000000000L});
	public static final BitSet FOLLOW_DOTDOT_in_subRangeType5177 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_constExpression_in_subRangeType5179 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_enumType5236 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_enumType5238 = new BitSet(new long[]{0x0004000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_EQUAL_in_enumType5241 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_enumType5243 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_COMMA_in_enumType5248 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_enumType5250 = new BitSet(new long[]{0x0004000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_EQUAL_in_enumType5253 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_enumType5255 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_enumType5262 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_qualifiedIdent_in_typeId5321 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_qualifiedIdent_in_genericTypeIdent5373 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
	public static final BitSet FOLLOW_genericDefinition_in_genericTypeIdent5376 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LT_in_genericDefinition5433 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_innerGeneric_in_genericDefinition5435 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_genericDefinition5438 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_innerGeneric_in_genericDefinition5440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000002000L});
	public static final BitSet FOLLOW_GT_in_genericDefinition5444 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_genericTypeIdent_in_innerGeneric5497 = new BitSet(new long[]{0x0000000003000002L});
	public static final BitSet FOLLOW_COMMA_in_innerGeneric5500 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_genericTypeIdent_in_innerGeneric5502 = new BitSet(new long[]{0x0000000003000002L});
	public static final BitSet FOLLOW_COLON_in_innerGeneric5507 = new BitSet(new long[]{0x1250181170908150L,0x810A029049001C20L,0xE100100008E8002FL,0x000000000000004CL});
	public static final BitSet FOLLOW_genericConstraint_in_innerGeneric5509 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_COMMA_in_innerGeneric5512 = new BitSet(new long[]{0x1250181170908150L,0x810A029049001C20L,0xE100100008E8002FL,0x000000000000004CL});
	public static final BitSet FOLLOW_genericConstraint_in_innerGeneric5514 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_genericTypeIdent_in_genericConstraint5566 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RECORD_in_genericConstraint5599 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_genericConstraint5632 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONSTRUCTOR_in_genericConstraint5665 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LT_in_genericPostfix5716 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_genericPostfix5718 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_COMMA_in_genericPostfix5721 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_genericPostfix5723 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_GT_in_genericPostfix5727 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_paranthesePostfix5775 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002280000000000L});
	public static final BitSet FOLLOW_intRealNum_in_paranthesePostfix5777 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_paranthesePostfix5779 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classTypeTypeDecl_in_classDecl5839 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classHelperDecl_in_classDecl5872 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classTypeDecl_in_classDecl5913 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_interfaceTypeDecl_in_classDecl5954 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_objectDecl_in_classDecl5995 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_recordDecl_in_classDecl6036 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_recordHelperDecl_in_classDecl6077 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classTypeTypeDecl6133 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_OF_in_classTypeTypeDecl6135 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_typeId_in_classTypeTypeDecl6137 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classTypeDecl6197 = new BitSet(new long[]{0x1252181978928170L,0x83DA02904B081C22L,0xF10010002AE8122DL,0x000000000000004CL});
	public static final BitSet FOLLOW_classState_in_classTypeDecl6200 = new BitSet(new long[]{0x1252181978928150L,0x83DA02904B081C22L,0xF10010002AE8022DL,0x000000000000004CL});
	public static final BitSet FOLLOW_classParent_in_classTypeDecl6205 = new BitSet(new long[]{0x1252181978928150L,0x83DA029049081C22L,0xF10010002AE8022DL,0x000000000000004CL});
	public static final BitSet FOLLOW_classItem_in_classTypeDecl6210 = new BitSet(new long[]{0x1252181978928150L,0x83DA029049081C22L,0xF10010002AE8022DL,0x000000000000004CL});
	public static final BitSet FOLLOW_END_in_classTypeDecl6214 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classTypeDecl6265 = new BitSet(new long[]{0x0000000000000022L,0x0000000002000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_classState_in_classTypeDecl6268 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_classParent_in_classTypeDecl6273 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_classParent6431 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_genericTypeIdent_in_classParent6433 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_COMMA_in_classParent6436 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_genericTypeIdent_in_classParent6438 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_classParent6442 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_classItem6510 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_classItem6543 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classField_in_classItem6576 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classProperty_in_classItem6609 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constSection_in_classItem6642 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeSection_in_classItem6675 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classItem6709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000000002000000L});
	public static final BitSet FOLLOW_varSection_in_classItem6713 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classHelperDecl6763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_HELPER_in_classHelperDecl6765 = new BitSet(new long[]{0x8000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_classParent_in_classHelperDecl6768 = new BitSet(new long[]{0x8000000000000000L});
	public static final BitSet FOLLOW_FOR_in_classHelperDecl6772 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_typeId_in_classHelperDecl6774 = new BitSet(new long[]{0x0002000818820000L,0x03D8008000080002L,0x1000000022400200L});
	public static final BitSet FOLLOW_classHelperItem_in_classHelperDecl6777 = new BitSet(new long[]{0x0002000818820000L,0x03D8008000080002L,0x1000000022400200L});
	public static final BitSet FOLLOW_END_in_classHelperDecl6781 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_classHelperItem6846 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_classHelperItem6879 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classProperty_in_classHelperItem6912 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constSection_in_classHelperItem6945 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeSection_in_classHelperItem6978 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classHelperItem7012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000000002000000L});
	public static final BitSet FOLLOW_varSection_in_classHelperItem7016 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_interfaceKey_in_interfaceTypeDecl7064 = new BitSet(new long[]{0x0002000810800000L,0x0050008002080002L});
	public static final BitSet FOLLOW_classParent_in_interfaceTypeDecl7067 = new BitSet(new long[]{0x0002000810800000L,0x0050008000080002L});
	public static final BitSet FOLLOW_interfaceGuid_in_interfaceTypeDecl7072 = new BitSet(new long[]{0x0002000810800000L,0x0050008000080002L});
	public static final BitSet FOLLOW_interfaceItem_in_interfaceTypeDecl7077 = new BitSet(new long[]{0x0002000810800000L,0x0050008000080002L});
	public static final BitSet FOLLOW_END_in_interfaceTypeDecl7081 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_interfaceKey_in_interfaceTypeDecl7172 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_classParent_in_interfaceTypeDecl7175 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACK_in_interfaceGuid7358 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_QuotedString_in_interfaceGuid7360 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_interfaceGuid7362 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_interfaceItem7418 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_interfaceItem7452 = new BitSet(new long[]{0x0000000000800000L,0x0040000000080000L});
	public static final BitSet FOLLOW_classProperty_in_interfaceItem7456 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OBJECT_in_objectDecl7511 = new BitSet(new long[]{0x1252181970928150L,0x839A02904B081C22L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_classParent_in_objectDecl7514 = new BitSet(new long[]{0x1252181970928150L,0x839A029049081C22L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_objectItem_in_objectDecl7519 = new BitSet(new long[]{0x1252181970928150L,0x839A029049081C22L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_END_in_objectDecl7523 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_objectItem7592 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_objectItem7625 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classField_in_objectItem7658 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleRecord_in_recordDecl7713 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_variantRecord_in_recordDecl7746 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RECORD_in_simpleRecord7799 = new BitSet(new long[]{0x1252181978928150L,0x83DA029049081C22L,0xF10010002AE8022DL,0x000000000000004CL});
	public static final BitSet FOLLOW_recordField_in_simpleRecord7802 = new BitSet(new long[]{0x1252181978928150L,0x83DA029049081C22L,0xF10010002AE8022DL,0x000000000000004CL});
	public static final BitSet FOLLOW_recordItem_in_simpleRecord7807 = new BitSet(new long[]{0x1252181978928150L,0x83DA029049081C22L,0xF10010002AE8022DL,0x000000000000004CL});
	public static final BitSet FOLLOW_END_in_simpleRecord7811 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RECORD_in_variantRecord7877 = new BitSet(new long[]{0x1250181978B28150L,0x83DA029049081C22L,0xF10010002AE8022DL,0x000000000000004CL});
	public static final BitSet FOLLOW_recordField_in_variantRecord7880 = new BitSet(new long[]{0x1250181978B28150L,0x83DA029049081C22L,0xF10010002AE8022DL,0x000000000000004CL});
	public static final BitSet FOLLOW_recordItem_in_variantRecord7885 = new BitSet(new long[]{0x1250181978B28150L,0x83DA029049081C22L,0xF10010002AE8022DL,0x000000000000004CL});
	public static final BitSet FOLLOW_recordVariantSection_in_variantRecord7889 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_variantRecord7891 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_recordItem7962 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_recordItem8000 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classProperty_in_recordItem8033 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constSection_in_recordItem8066 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeSection_in_recordItem8099 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_recordField_in_recordItem8132 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_recordItem8166 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000000002000000L});
	public static final BitSet FOLLOW_varSection_in_recordItem8170 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identList_in_recordField8224 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_recordField8226 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_recordField8228 = new BitSet(new long[]{0x0020000400000002L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_hintingDirective_in_recordField8231 = new BitSet(new long[]{0x0020000400000002L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_recordField8236 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identList_in_recordVariantField8326 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_recordVariantField8328 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_recordVariantField8330 = new BitSet(new long[]{0x0020000400000002L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_hintingDirective_in_recordVariantField8333 = new BitSet(new long[]{0x0020000400000002L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_recordVariantField8338 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CASE_in_recordVariantSection8425 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_ident_in_recordVariantSection8428 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_recordVariantSection8430 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_recordVariantSection8434 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_OF_in_recordVariantSection8436 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8202DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_recordVariant_in_recordVariantSection8439 = new BitSet(new long[]{0x12501911E0118152L,0x851F02955F083C22L,0xE102380008E8202DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_SEMI_in_recordVariantSection8443 = new BitSet(new long[]{0x12501911E0118152L,0x851F02955F083C22L,0xE102380008E8202DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_recordVariant_in_recordVariantSection8447 = new BitSet(new long[]{0x12501911E0118152L,0x851F02955F083C22L,0xE102380008E8202DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_SEMI_in_recordVariantSection8451 = new BitSet(new long[]{0x12501911E0118152L,0x851F02955F083C22L,0xE102380008E8202DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_constExpression_in_recordVariant8505 = new BitSet(new long[]{0x0000000003000000L});
	public static final BitSet FOLLOW_COMMA_in_recordVariant8508 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_constExpression_in_recordVariant8510 = new BitSet(new long[]{0x0000000003000000L});
	public static final BitSet FOLLOW_COLON_in_recordVariant8514 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_LPAREN_in_recordVariant8516 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8042DL,0x000000000000004CL});
	public static final BitSet FOLLOW_recordVariantField_in_recordVariant8519 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8042DL,0x000000000000004CL});
	public static final BitSet FOLLOW_RPAREN_in_recordVariant8523 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RECORD_in_recordHelperDecl8575 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_HELPER_in_recordHelperDecl8577 = new BitSet(new long[]{0x8000000000000000L});
	public static final BitSet FOLLOW_FOR_in_recordHelperDecl8579 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_typeId_in_recordHelperDecl8581 = new BitSet(new long[]{0x0002000818820000L,0x03D8008000080002L,0x0000000000400200L});
	public static final BitSet FOLLOW_recordHelperItem_in_recordHelperDecl8584 = new BitSet(new long[]{0x0002000818820000L,0x03D8008000080002L,0x0000000000400200L});
	public static final BitSet FOLLOW_END_in_recordHelperDecl8588 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_recordHelperItem8637 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constSection_in_recordHelperItem8670 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_recordHelperItem8703 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classProperty_in_recordHelperItem8736 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_classMethod8791 = new BitSet(new long[]{0x0000000810800000L,0x0010000000000000L});
	public static final BitSet FOLLOW_CLASS_in_classMethod8796 = new BitSet(new long[]{0x0000000810000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_methodKey_in_classMethod8800 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_classMethod8802 = new BitSet(new long[]{0x0000000000000000L,0x0000000006000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_genericDefinition_in_classMethod8805 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_formalParameterSection_in_classMethod8810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classMethod8814 = new BitSet(new long[]{0x1560201400401022L,0x0000CC0089808000L,0xA000000000180818L});
	public static final BitSet FOLLOW_methodDirective_in_classMethod8817 = new BitSet(new long[]{0x1560201400401022L,0x0000CC0089808000L,0xA000000000180818L});
	public static final BitSet FOLLOW_customAttribute_in_classMethod8925 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classMethod8930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_classMethod8934 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_classMethod8936 = new BitSet(new long[]{0x0000000001000000L,0x0000000006000000L});
	public static final BitSet FOLLOW_genericDefinition_in_classMethod8939 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_classMethod8944 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_classMethod8948 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_customAttribute_in_classMethod8951 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_classMethod8955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classMethod8957 = new BitSet(new long[]{0x1560201400401022L,0x0000CC0089808000L,0xA000000000180818L});
	public static final BitSet FOLLOW_methodDirective_in_classMethod8960 = new BitSet(new long[]{0x1560201400401022L,0x0000CC0089808000L,0xA000000000180818L});
	public static final BitSet FOLLOW_customAttribute_in_classMethod9077 = new BitSet(new long[]{0x0000000000800000L,0x0000008000000000L});
	public static final BitSet FOLLOW_CLASS_in_classMethod9082 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_OPERATOR_in_classMethod9086 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_classMethod9088 = new BitSet(new long[]{0x0000000001000000L,0x0000000006000000L});
	public static final BitSet FOLLOW_genericDefinition_in_classMethod9091 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_classMethod9096 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_classMethod9100 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_customAttribute_in_classMethod9103 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_classMethod9107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classMethod9109 = new BitSet(new long[]{0x1560201400401022L,0x0000CC0089808000L,0xA000000000180818L});
	public static final BitSet FOLLOW_methodDirective_in_classMethod9112 = new BitSet(new long[]{0x1560201400401022L,0x0000CC0089808000L,0xA000000000180818L});
	public static final BitSet FOLLOW_customAttribute_in_classMethod9226 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classMethod9231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_classMethod9235 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_classMethod9237 = new BitSet(new long[]{0x0000010000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_genericDefinition_in_classMethod9240 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_classMethod9244 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_classMethod9246 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_EQUAL_in_classMethod9248 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_classMethod9250 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classMethod9252 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_classMethod9286 = new BitSet(new long[]{0x0000000000800000L,0x0010000000000000L});
	public static final BitSet FOLLOW_CLASS_in_classMethod9291 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_PROCEDURE_in_classMethod9295 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_classMethod9297 = new BitSet(new long[]{0x0000010000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_genericDefinition_in_classMethod9300 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_classMethod9304 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_classMethod9306 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_EQUAL_in_classMethod9308 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_classMethod9310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classMethod9312 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_classField9368 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_identList_in_classField9372 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_classField9374 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_classField9376 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_hintingDirective_in_classField9379 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classField9384 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_classProperty9489 = new BitSet(new long[]{0x0000000000800000L,0x0040000000000000L});
	public static final BitSet FOLLOW_CLASS_in_classProperty9494 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_PROPERTY_in_classProperty9498 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_classProperty9500 = new BitSet(new long[]{0x0000001101000000L,0x8000000200081400L,0x0000000000202001L,0x000000000000000CL});
	public static final BitSet FOLLOW_classPropertyArray_in_classProperty9503 = new BitSet(new long[]{0x0000001101000000L,0x8000000200001400L,0x0000000000202001L,0x000000000000000CL});
	public static final BitSet FOLLOW_COLON_in_classProperty9508 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_genericTypeIdent_in_classProperty9510 = new BitSet(new long[]{0x0000001100000000L,0x8000000200001400L,0x0000000000202001L,0x000000000000000CL});
	public static final BitSet FOLLOW_classPropertyIndex_in_classProperty9515 = new BitSet(new long[]{0x0000001100000000L,0x8000000200000400L,0x0000000000202001L,0x000000000000000CL});
	public static final BitSet FOLLOW_classPropertySpecifier_in_classProperty9520 = new BitSet(new long[]{0x0000001100000000L,0x8000000200000400L,0x0000000000202001L,0x000000000000000CL});
	public static final BitSet FOLLOW_SEMI_in_classProperty9524 = new BitSet(new long[]{0x0000000100000002L,0x0000000200000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_classPropertyEndSpecifier_in_classProperty9527 = new BitSet(new long[]{0x0000000100000002L,0x0000000200000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_LBRACK_in_classPropertyArray9693 = new BitSet(new long[]{0x1250181168108150L,0x810A029049081C20L,0xF100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_formalParameterList_in_classPropertyArray9695 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_classPropertyArray9697 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INDEX_in_classPropertyIndex9744 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_classPropertyIndex9746 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classPropertyIndex9749 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classPropertyReadWrite_in_classPropertySpecifier9796 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classPropertyDispInterface_in_classPropertySpecifier9832 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STORED_in_classPropertySpecifier9865 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_classPropertySpecifier9867 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_classPropertySpecifier9900 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_classPropertySpecifier9902 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_classPropertySpecifier9935 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NODEFAULT_in_classPropertySpecifier9984 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IMPLEMENTS_in_classPropertySpecifier10017 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_genericTypeIdent_in_classPropertySpecifier10019 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STORED_in_classPropertyEndSpecifier10059 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_classPropertyEndSpecifier10061 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classPropertyEndSpecifier10063 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_classPropertyEndSpecifier10100 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_classPropertyEndSpecifier10102 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classPropertyEndSpecifier10104 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_classPropertyEndSpecifier10137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classPropertyEndSpecifier10139 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NODEFAULT_in_classPropertyEndSpecifier10172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classPropertyEndSpecifier10174 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_READ_in_classPropertyReadWrite10218 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_qualifiedIdent_in_classPropertyReadWrite10220 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
	public static final BitSet FOLLOW_LBRACK_in_classPropertyReadWrite10223 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_classPropertyReadWrite10225 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_classPropertyReadWrite10227 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WRITE_in_classPropertyReadWrite10301 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_qualifiedIdent_in_classPropertyReadWrite10303 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
	public static final BitSet FOLLOW_LBRACK_in_classPropertyReadWrite10306 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_classPropertyReadWrite10308 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_classPropertyReadWrite10310 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_READONLY_in_classPropertyDispInterface10389 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classPropertyDispInterface10391 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WRITEONLY_in_classPropertyDispInterface10424 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classPropertyDispInterface10426 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dispIDDirective_in_classPropertyDispInterface10459 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRICT_in_visibility10515 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_PROTECTED_in_visibility10519 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRICT_in_visibility10553 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_PRIVATE_in_visibility10557 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PUBLIC_in_visibility10590 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PUBLISHED_in_visibility10623 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AUTOMATED_in_visibility10656 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PROCEDURE_in_exportedProcHeading10710 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_exportedProcHeading10712 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_exportedProcHeading10715 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_exportedProcHeading10719 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_customAttribute_in_exportedProcHeading10722 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_exportedProcHeading10726 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_exportedProcHeading10728 = new BitSet(new long[]{0x0560000400401002L,0x0000C40081808000L,0x2100000000100808L});
	public static final BitSet FOLLOW_functionDirective_in_exportedProcHeading10731 = new BitSet(new long[]{0x0560000400401002L,0x0000C40081808000L,0x2100000000100808L});
	public static final BitSet FOLLOW_FUNCTION_in_exportedProcHeading10766 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_exportedProcHeading10768 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_formalParameterSection_in_exportedProcHeading10771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_exportedProcHeading10775 = new BitSet(new long[]{0x0560000400401002L,0x0000C40081808000L,0x2100000000100808L});
	public static final BitSet FOLLOW_functionDirective_in_exportedProcHeading10778 = new BitSet(new long[]{0x0560000400401002L,0x0000C40081808000L,0x2100000000100808L});
	public static final BitSet FOLLOW_methodDeclHeading_in_methodDecl10835 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_methodDecl10837 = new BitSet(new long[]{0x15E0201C18C81822L,0x0010CC00898C8002L,0xB000000022182A18L});
	public static final BitSet FOLLOW_methodDirective_in_methodDecl10840 = new BitSet(new long[]{0x15E0201C18C81822L,0x0010CC00898C8002L,0xB000000022182A18L});
	public static final BitSet FOLLOW_methodBody_in_methodDecl10845 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_methodDeclHeading10905 = new BitSet(new long[]{0x0000000810800000L,0x0010000000000000L});
	public static final BitSet FOLLOW_CLASS_in_methodDeclHeading10910 = new BitSet(new long[]{0x0000000810000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_methodKey_in_methodDeclHeading10915 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_methodName_in_methodDeclHeading10917 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_methodDeclHeading10920 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_methodDeclHeading11018 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_methodDeclHeading11023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_methodDeclHeading11027 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_methodName_in_methodDeclHeading11029 = new BitSet(new long[]{0x0000000001000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_methodDeclHeading11032 = new BitSet(new long[]{0x0000000001000002L});
	public static final BitSet FOLLOW_COLON_in_methodDeclHeading11037 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_customAttribute_in_methodDeclHeading11040 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_methodDeclHeading11044 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_methodDeclHeading11153 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_CLASS_in_methodDeclHeading11157 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_OPERATOR_in_methodDeclHeading11159 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_methodName_in_methodDeclHeading11161 = new BitSet(new long[]{0x0000000001000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_methodDeclHeading11164 = new BitSet(new long[]{0x0000000001000002L});
	public static final BitSet FOLLOW_COLON_in_methodDeclHeading11169 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_customAttribute_in_methodDeclHeading11172 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_methodDeclHeading11176 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_methodName11425 = new BitSet(new long[]{0x0000010000000002L,0x0000000004000000L});
	public static final BitSet FOLLOW_genericDefinition_in_methodName11428 = new BitSet(new long[]{0x0000010000000002L});
	public static final BitSet FOLLOW_DOT_in_methodName11433 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_methodName11435 = new BitSet(new long[]{0x0000010000000002L,0x0000000004000000L});
	public static final BitSet FOLLOW_genericDefinition_in_methodName11438 = new BitSet(new long[]{0x0000010000000002L});
	public static final BitSet FOLLOW_procDeclHeading_in_procDecl11499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_procDecl11501 = new BitSet(new long[]{0x05E0000C18C81802L,0x0010C400818C8003L,0x3100000022102A08L});
	public static final BitSet FOLLOW_functionDirective_in_procDecl11504 = new BitSet(new long[]{0x05E0000C18C81802L,0x0010C400818C8003L,0x3100000022102A08L});
	public static final BitSet FOLLOW_procBody_in_procDecl11509 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_procDeclHeading11575 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_PROCEDURE_in_procDeclHeading11579 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_procDeclHeading11581 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_procDeclHeading11584 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_procDeclHeading11684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_procDeclHeading11688 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_procDeclHeading11690 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_procDeclHeading11693 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_procDeclHeading11697 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_procDeclHeading11699 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_formalParameterSection11799 = new BitSet(new long[]{0x1250181168108150L,0x810A029049081C20L,0xF100100008E8042DL,0x000000000000004CL});
	public static final BitSet FOLLOW_formalParameterList_in_formalParameterSection11802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_formalParameterSection11806 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_formalParameter_in_formalParameterList11859 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_formalParameterList11862 = new BitSet(new long[]{0x1250181168108150L,0x810A029049081C20L,0xF100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_formalParameter_in_formalParameterList11864 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_customAttribute_in_formalParameter11926 = new BitSet(new long[]{0x1250181168108150L,0x810A029049001C20L,0xF100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_parmType_in_formalParameter11931 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_identListFlat_in_formalParameter11935 = new BitSet(new long[]{0x0004000001000002L});
	public static final BitSet FOLLOW_COLON_in_formalParameter11938 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_formalParameter11940 = new BitSet(new long[]{0x0004000000000002L});
	public static final BitSet FOLLOW_EQUAL_in_formalParameter11945 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_formalParameter11947 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_block_in_methodBody12170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_methodBody12172 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FORWARD_in_procBody12233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_procBody12235 = new BitSet(new long[]{0x0560000400401002L,0x0000C40081808000L,0x2100000000100808L});
	public static final BitSet FOLLOW_functionDirective_in_procBody12238 = new BitSet(new long[]{0x0560000400401002L,0x0000C40081808000L,0x2100000000100808L});
	public static final BitSet FOLLOW_EXTERNAL_in_procBody12276 = new BitSet(new long[]{0x0560000400401002L,0x0000C400C1809000L,0x2100000000100808L});
	public static final BitSet FOLLOW_NAME_in_procBody12279 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_procBody12281 = new BitSet(new long[]{0x0560000400401002L,0x0000C400C1809000L,0x2100000000100808L});
	public static final BitSet FOLLOW_INDEX_in_procBody12285 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_procBody12287 = new BitSet(new long[]{0x0560000400401002L,0x0000C400C1809000L,0x2100000000100808L});
	public static final BitSet FOLLOW_functionDirective_in_procBody12292 = new BitSet(new long[]{0x0560000400401002L,0x0000C40081808000L,0x2100000000100808L});
	public static final BitSet FOLLOW_block_in_procBody12328 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_procBody12330 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttributeList_in_customAttribute12383 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttributeDecl_in_customAttributeList12430 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
	public static final BitSet FOLLOW_LBRACK_in_customAttributeDecl12478 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_customAttributeIdent_in_customAttributeDecl12480 = new BitSet(new long[]{0x0000000000000000L,0x1000000002000000L});
	public static final BitSet FOLLOW_LPAREN_in_customAttributeDecl12483 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8042DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expressionList_in_customAttributeDecl12486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_customAttributeDecl12490 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_customAttributeDecl12494 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_qualifiedIdent_in_customAttributeIdent12564 = new BitSet(new long[]{0x0000000001000002L});
	public static final BitSet FOLLOW_COLON_in_customAttributeIdent12567 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_qualifiedIdent_in_customAttributeIdent12569 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_anonymousExpression_in_expression12629 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleExpression_in_expression12670 = new BitSet(new long[]{0x0004000000000002L,0x0000000804420814L});
	public static final BitSet FOLLOW_relOp_in_expression12673 = new BitSet(new long[]{0x12501911E0118150L,0x850F02955F083C20L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_simpleExpression_in_expression12675 = new BitSet(new long[]{0x0004000000000002L});
	public static final BitSet FOLLOW_EQUAL_in_expression12680 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_expression12682 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PROCEDURE_in_anonymousExpression12733 = new BitSet(new long[]{0x0080000818880800L,0x00100000020C0002L,0x1000000022000200L});
	public static final BitSet FOLLOW_formalParameterSection_in_anonymousExpression12736 = new BitSet(new long[]{0x0080000818880800L,0x00100000000C0002L,0x1000000022000200L});
	public static final BitSet FOLLOW_block_in_anonymousExpression12740 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_anonymousExpression12773 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_anonymousExpression12776 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_anonymousExpression12780 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_anonymousExpression12782 = new BitSet(new long[]{0x0080000818880800L,0x00100000000C0002L,0x1000000022000200L});
	public static final BitSet FOLLOW_block_in_anonymousExpression12784 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_factor_in_simpleExpression12833 = new BitSet(new long[]{0x0000004000000482L,0x0001010030000000L,0x0000000000078000L,0x000000000001F720L});
	public static final BitSet FOLLOW_operator_in_simpleExpression12836 = new BitSet(new long[]{0x12501911E0118150L,0x850F02955F083C20L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_factor_in_simpleExpression12838 = new BitSet(new long[]{0x0000004000000482L,0x0001010030000000L,0x0000000000078000L,0x000000000001F720L});
	public static final BitSet FOLLOW_AT2_in_factor12899 = new BitSet(new long[]{0x12501911E0118150L,0x850F02955F083C20L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_factor_in_factor12901 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_199_in_factor12934 = new BitSet(new long[]{0x12501911E0118150L,0x850F02955F083C20L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_factor_in_factor12936 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_in_factor12976 = new BitSet(new long[]{0x12501911E0118150L,0x850F02955F083C20L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_factor_in_factor12978 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLUS_in_factor13011 = new BitSet(new long[]{0x12501911E0118150L,0x850F02955F083C20L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_factor_in_factor13013 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MINUS_in_factor13046 = new BitSet(new long[]{0x12501911E0118150L,0x850F02955F083C20L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_factor_in_factor13048 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_POINTER2_in_factor13081 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_factor13083 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_intRealNum_in_factor13127 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRUE_in_factor13160 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FALSE_in_factor13193 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NIL_in_factor13226 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_210_in_factor13259 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_factor13337 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_factor13339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_factor13341 = new BitSet(new long[]{0x1250191160118150L,0x810E02904F083C20L,0xE100100008E8002DL,0x000000000002084CL});
	public static final BitSet FOLLOW_designator_in_factor13343 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_factor13376 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_factor13378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_factor13380 = new BitSet(new long[]{0x0000010000000002L,0x0004000000000000L});
	public static final BitSet FOLLOW_POINTER2_in_factor13383 = new BitSet(new long[]{0x0000010000000002L});
	public static final BitSet FOLLOW_DOT_in_factor13388 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_factor13390 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_stringFactor_in_factor13433 = new BitSet(new long[]{0x0000010000000002L});
	public static final BitSet FOLLOW_DOT_in_factor13436 = new BitSet(new long[]{0x12501911E0118150L,0x850F02955F083C20L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_simpleExpression_in_factor13438 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_setSection_in_factor13473 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designator_in_factor13506 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeId_in_factor13539 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_LPAREN_in_factor13541 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_factor13543 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_factor13545 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_controlString_in_stringFactor13599 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
	public static final BitSet FOLLOW_QuotedString_in_stringFactor13603 = new BitSet(new long[]{0x0000000080000000L});
	public static final BitSet FOLLOW_controlString_in_stringFactor13606 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
	public static final BitSet FOLLOW_QuotedString_in_stringFactor13612 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_QuotedString_in_stringFactor13647 = new BitSet(new long[]{0x0000000080000002L});
	public static final BitSet FOLLOW_controlString_in_stringFactor13651 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_QuotedString_in_stringFactor13654 = new BitSet(new long[]{0x0000000080000002L});
	public static final BitSet FOLLOW_controlString_in_stringFactor13659 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ControlChar_in_controlString13713 = new BitSet(new long[]{0x0000000080000002L});
	public static final BitSet FOLLOW_ControlChar_in_controlString13716 = new BitSet(new long[]{0x0000000080000002L});
	public static final BitSet FOLLOW_LBRACK_in_setSection13773 = new BitSet(new long[]{0x12501911E0118150L,0x951F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_setSection13776 = new BitSet(new long[]{0x0000020002000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_set_in_setSection13779 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_setSection13787 = new BitSet(new long[]{0x0000020002000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_setSection13793 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_203_in_designator13850 = new BitSet(new long[]{0x1250191160118152L,0x810E02904F083C20L,0xE100100008E8002DL,0x000000000002004CL});
	public static final BitSet FOLLOW_INHERITED_in_designator13855 = new BitSet(new long[]{0x1250191160118152L,0x810E02904F081C20L,0xE100100008E8002DL,0x000000000002004CL});
	public static final BitSet FOLLOW_qualifiedIdent_in_designator13862 = new BitSet(new long[]{0x0000010000010002L,0x0004000006080000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_typeId_in_designator13866 = new BitSet(new long[]{0x0000010000010002L,0x0004000006080000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_designatorItem_in_designator13873 = new BitSet(new long[]{0x0000010000010002L,0x0004000006080000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_POINTER2_in_designatorItem13926 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_209_in_designatorItem13959 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_designatorItem13992 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_designatorItem14000 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LT_in_designatorItem14048 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_genericTypeIdent_in_designatorItem14050 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_COMMA_in_designatorItem14053 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_genericTypeIdent_in_designatorItem14055 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_GT_in_designatorItem14059 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACK_in_designatorItem14100 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expressionList_in_designatorItem14102 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_designatorItem14104 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_designatorItem14137 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8042DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_designatorItem14140 = new BitSet(new long[]{0x0000000003000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_colonConstruct_in_designatorItem14143 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_COMMA_in_designatorItem14148 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_designatorItem14150 = new BitSet(new long[]{0x0000000003000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_colonConstruct_in_designatorItem14153 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_designatorItem14161 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_expressionList14238 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_COMMA_in_expressionList14241 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_expressionList14243 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_COLON_in_colonConstruct14296 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_colonConstruct14298 = new BitSet(new long[]{0x0000000001000002L});
	public static final BitSet FOLLOW_COLON_in_colonConstruct14301 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_colonConstruct14303 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ifStatement_in_statement15341 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_caseStatement_in_statement15374 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_repeatStatement_in_statement15407 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_whileStatement_in_statement15440 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_forStatement_in_statement15473 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_withStatement_in_statement15506 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tryStatement_in_statement15539 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_raiseStatement_in_statement15572 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_assemblerStatement_in_statement15605 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_compoundStatement_in_statement15638 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_label_in_statement15671 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_statement15673 = new BitSet(new long[]{0x925019116039C950L,0x890E02904F083D28L,0xF100380018E8006DL,0x000000000002084FL});
	public static final BitSet FOLLOW_statement_in_statement15675 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleStatement_in_statement15708 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IF_in_ifStatement15762 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_ifStatement15764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_THEN_in_ifStatement15766 = new BitSet(new long[]{0x925019116039C950L,0x890E02904F083D28L,0xF100380018E8006DL,0x000000000002084FL});
	public static final BitSet FOLLOW_statement_in_ifStatement15768 = new BitSet(new long[]{0x0001000000000002L});
	public static final BitSet FOLLOW_ELSE_in_ifStatement15771 = new BitSet(new long[]{0x925019116039C950L,0x890E02904F083D28L,0xF100380018E8006DL,0x000000000002084FL});
	public static final BitSet FOLLOW_statement_in_ifStatement15773 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CASE_in_caseStatement15827 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_caseStatement15829 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_OF_in_caseStatement15831 = new BitSet(new long[]{0x12531911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_caseItem_in_caseStatement15834 = new BitSet(new long[]{0x12531911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_ELSE_in_caseStatement15839 = new BitSet(new long[]{0x925219116039C950L,0x890E02904F083D28L,0xF100380018E8206DL,0x000000000002084FL});
	public static final BitSet FOLLOW_statementList_in_caseStatement15841 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_caseStatement15844 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_caseStatement15850 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_caseLabel_in_caseItem15907 = new BitSet(new long[]{0x0000000003000000L});
	public static final BitSet FOLLOW_COMMA_in_caseItem15910 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_caseLabel_in_caseItem15912 = new BitSet(new long[]{0x0000000003000000L});
	public static final BitSet FOLLOW_COLON_in_caseItem15916 = new BitSet(new long[]{0x925019116039C950L,0x890E02904F083D28L,0xF100380018E8006DL,0x000000000002084FL});
	public static final BitSet FOLLOW_statement_in_caseItem15918 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_caseItem15921 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_caseLabel15980 = new BitSet(new long[]{0x0000020000000002L});
	public static final BitSet FOLLOW_DOTDOT_in_caseLabel15983 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_caseLabel15985 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REPEAT_in_repeatStatement16037 = new BitSet(new long[]{0x925019116039C950L,0x890E02904F083D28L,0xF300380018E8206DL,0x000000000002084FL});
	public static final BitSet FOLLOW_statementList_in_repeatStatement16040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_UNTIL_in_repeatStatement16044 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_repeatStatement16046 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WHILE_in_whileStatement16097 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_whileStatement16099 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_whileStatement16101 = new BitSet(new long[]{0x925019116039C950L,0x890E02904F083D28L,0xF100380018E8006DL,0x000000000002084FL});
	public static final BitSet FOLLOW_statement_in_whileStatement16103 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_in_forStatement16156 = new BitSet(new long[]{0x125019116111C150L,0x810E02904F083C20L,0xF100100008E8002DL,0x000000000002084CL});
	public static final BitSet FOLLOW_VAR_in_forStatement16159 = new BitSet(new long[]{0x125019116111C150L,0x810E02904F083C20L,0xE100100008E8002DL,0x000000000002084CL});
	public static final BitSet FOLLOW_designator_in_forStatement16163 = new BitSet(new long[]{0x0000000001004000L});
	public static final BitSet FOLLOW_COLON_in_forStatement16166 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_forStatement16168 = new BitSet(new long[]{0x0000000000004000L});
	public static final BitSet FOLLOW_ASSIGN_in_forStatement16172 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_forStatement16174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_TO_in_forStatement16176 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_forStatement16178 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_forStatement16180 = new BitSet(new long[]{0x925019116039C950L,0x890E02904F083D28L,0xF100380018E8006DL,0x000000000002084FL});
	public static final BitSet FOLLOW_statement_in_forStatement16182 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_in_forStatement16215 = new BitSet(new long[]{0x125019116111C150L,0x810E02904F083C20L,0xF100100008E8002DL,0x000000000002084CL});
	public static final BitSet FOLLOW_VAR_in_forStatement16218 = new BitSet(new long[]{0x125019116111C150L,0x810E02904F083C20L,0xE100100008E8002DL,0x000000000002084CL});
	public static final BitSet FOLLOW_designator_in_forStatement16222 = new BitSet(new long[]{0x0000000001004000L});
	public static final BitSet FOLLOW_COLON_in_forStatement16225 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_forStatement16227 = new BitSet(new long[]{0x0000000000004000L});
	public static final BitSet FOLLOW_ASSIGN_in_forStatement16231 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_forStatement16233 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_DOWNTO_in_forStatement16235 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_forStatement16237 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_forStatement16239 = new BitSet(new long[]{0x925019116039C950L,0x890E02904F083D28L,0xF100380018E8006DL,0x000000000002084FL});
	public static final BitSet FOLLOW_statement_in_forStatement16241 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_in_forStatement16274 = new BitSet(new long[]{0x1250191161118150L,0x810E02904F083C20L,0xF100100008E8002DL,0x000000000002084CL});
	public static final BitSet FOLLOW_VAR_in_forStatement16277 = new BitSet(new long[]{0x1250191161118150L,0x810E02904F083C20L,0xE100100008E8002DL,0x000000000002084CL});
	public static final BitSet FOLLOW_designator_in_forStatement16281 = new BitSet(new long[]{0x0000000001000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_COLON_in_forStatement16284 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_forStatement16286 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_IN_in_forStatement16290 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_forStatement16292 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_forStatement16294 = new BitSet(new long[]{0x925019116039C950L,0x890E02904F083D28L,0xF100380018E8006DL,0x000000000002084FL});
	public static final BitSet FOLLOW_statement_in_forStatement16296 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WITH_in_withStatement16348 = new BitSet(new long[]{0x1250191160118550L,0x810E02904F083C20L,0xE100100008E8002DL,0x000000000002084CL});
	public static final BitSet FOLLOW_withItemList_in_withStatement16350 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_withStatement16352 = new BitSet(new long[]{0x925019116039C950L,0x890E02904F083D28L,0xF100380018E8006DL,0x000000000002084FL});
	public static final BitSet FOLLOW_statement_in_withStatement16354 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_withItem_in_withItemList16407 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_COMMA_in_withItemList16410 = new BitSet(new long[]{0x1250191160118550L,0x810E02904F083C20L,0xE100100008E8002DL,0x000000000002084CL});
	public static final BitSet FOLLOW_withItem_in_withItemList16412 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_designator_in_withItem16471 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_AS_in_withItem16474 = new BitSet(new long[]{0x1250191160118150L,0x810E02904F083C20L,0xE100100008E8002DL,0x000000000002084CL});
	public static final BitSet FOLLOW_designator_in_withItem16476 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BEGIN_in_compoundStatement16526 = new BitSet(new long[]{0x925219116039C950L,0x890E02904F083D28L,0xF100380018E8206DL,0x000000000002084FL});
	public static final BitSet FOLLOW_statementList_in_compoundStatement16529 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_compoundStatement16533 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statement_in_statementList16599 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_statementList16604 = new BitSet(new long[]{0x925019116039C952L,0x890E02904F083D28L,0xF100380018E8206DL,0x000000000002084FL});
	public static final BitSet FOLLOW_statement_in_statementList16607 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_designator_in_simpleStatement16661 = new BitSet(new long[]{0x0000000000004000L});
	public static final BitSet FOLLOW_ASSIGN_in_simpleStatement16663 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_simpleStatement16665 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designator_in_simpleStatement16698 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_gotoStatement_in_simpleStatement16732 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_inlineVarDeclaration_in_simpleStatement16765 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GOTO_in_gotoStatement16817 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100380008E8002DL,0x000000000000000CL});
	public static final BitSet FOLLOW_label_in_gotoStatement16819 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXIT_in_gotoStatement16852 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_LPAREN_in_gotoStatement16855 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_gotoStatement16857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_gotoStatement16859 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BREAK_in_gotoStatement16894 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONTINUE_in_gotoStatement16927 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_constExpression16980 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_recordConstExpression_in_constExpression16982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002400L});
	public static final BitSet FOLLOW_SEMI_in_constExpression16985 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_recordConstExpression_in_constExpression16987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002400L});
	public static final BitSet FOLLOW_RPAREN_in_constExpression16991 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_constExpression17025 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_constExpression_in_constExpression17027 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_COMMA_in_constExpression17030 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_constExpression_in_constExpression17032 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_constExpression17036 = new BitSet(new long[]{0x12501911E0118152L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_constExpression_in_constExpression17039 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_constExpression17075 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_recordConstExpression17119 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_recordConstExpression17121 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_constExpression_in_recordConstExpression17123 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_recordConstExpression17126 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRY_in_tryStatement17184 = new BitSet(new long[]{0x925819116039C950L,0x890E02904F083D28L,0xF100380018E8206DL,0x000000000002084FL});
	public static final BitSet FOLLOW_statementList_in_tryStatement17187 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_EXCEPT_in_tryStatement17191 = new BitSet(new long[]{0x925319116039C950L,0x890E02D04F083D28L,0xF100380018E8206DL,0x000000000002084FL});
	public static final BitSet FOLLOW_handlerList_in_tryStatement17193 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_tryStatement17195 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRY_in_tryStatement17228 = new BitSet(new long[]{0xD25019116039C950L,0x890E02904F083D28L,0xF100380018E8206DL,0x000000000002084FL});
	public static final BitSet FOLLOW_statementList_in_tryStatement17231 = new BitSet(new long[]{0x4000000000000000L});
	public static final BitSet FOLLOW_FINALLY_in_tryStatement17235 = new BitSet(new long[]{0x925219116039C950L,0x890E02904F083D28L,0xF100380018E8206DL,0x000000000002084FL});
	public static final BitSet FOLLOW_statementList_in_tryStatement17238 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_tryStatement17242 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_handler_in_handlerList17297 = new BitSet(new long[]{0x0001000000000002L,0x0000004000000000L});
	public static final BitSet FOLLOW_ELSE_in_handlerList17302 = new BitSet(new long[]{0x925019116039C950L,0x890E02904F083D28L,0xF100380018E8206DL,0x000000000002084FL});
	public static final BitSet FOLLOW_statementList_in_handlerList17304 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statementList_in_handlerList17339 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ON_in_handler17397 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_handlerIdent_in_handler17400 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_typeId_in_handler17404 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_handler17406 = new BitSet(new long[]{0x925019116039C950L,0x890E02904F083D28L,0xF100380018E8206DL,0x000000000002084FL});
	public static final BitSet FOLLOW_handlerStatement_in_handler17408 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_handlerIdent17463 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_handlerIdent17465 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statement_in_handlerStatement17514 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_handlerStatement17517 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_handlerStatement17552 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RAISE_in_raiseStatement17603 = new BitSet(new long[]{0x1250191160118150L,0x810E02904F083C20L,0xE100100008E8002DL,0x000000000002084CL});
	public static final BitSet FOLLOW_designator_in_raiseStatement17606 = new BitSet(new long[]{0x0000000000008002L});
	public static final BitSet FOLLOW_AT_in_raiseStatement17611 = new BitSet(new long[]{0x1250191160118150L,0x810E02904F083C20L,0xE100100008E8002DL,0x000000000002084CL});
	public static final BitSet FOLLOW_designator_in_raiseStatement17613 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ASM_in_assemblerStatement17666 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x000000000007FFFFL});
	public static final BitSet FOLLOW_END_in_assemblerStatement17674 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_reintroduceDirective_in_methodDirective17747 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_overloadDirective_in_methodDirective17789 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bindingDirective_in_methodDirective17834 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_abstractDirective_in_methodDirective17880 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_inlineDirective_in_methodDirective17925 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_callConvention_in_methodDirective17972 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_hintingDirective_in_methodDirective18020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_methodDirective18022 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_oldCallConventionDirective_in_methodDirective18064 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dispIDDirective_in_methodDirective18100 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_externalDirective_in_methodDirective18133 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_overloadDirective_in_functionDirective18181 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_inlineDirective_in_functionDirective18224 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_callConvention_in_functionDirective18269 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_oldCallConventionDirective_in_functionDirective18315 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_hintingDirective_in_functionDirective18349 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_functionDirective18351 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_callConventionNoSemi_in_functionDirective18392 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_externalDirective_in_functionDirective18396 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_externalDirective_in_functionDirective18439 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UNSAFE_in_functionDirective18472 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_functionDirective18474 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REINTRODUCE_in_reintroduceDirective18534 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_reintroduceDirective18537 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OVERLOAD_in_overloadDirective18587 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_overloadDirective18590 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MESSAGE_in_bindingDirective18645 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_bindingDirective18647 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_bindingDirective18649 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STATIC_in_bindingDirective18682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_bindingDirective18684 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DYNAMIC_in_bindingDirective18717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_bindingDirective18719 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OVERRIDE_in_bindingDirective18752 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_bindingDirective18754 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VIRTUAL_in_bindingDirective18787 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_bindingDirective18789 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ABSTRACT_in_abstractDirective18837 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_abstractDirective18839 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FINAL_in_abstractDirective18872 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_abstractDirective18874 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INLINE_in_inlineDirective18924 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_inlineDirective18926 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ASSEMBLER_in_inlineDirective18959 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_inlineDirective18961 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CDECL_in_callConvention19013 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_callConvention19015 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PASCAL_in_callConvention19052 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_callConvention19054 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REGISTER_in_callConvention19090 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_callConvention19092 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SAFECALL_in_callConvention19126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_callConvention19128 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STDCALL_in_callConvention19162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_callConvention19164 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXPORT_in_callConvention19199 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_callConvention19201 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FAR_in_oldCallConventionDirective19467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_oldCallConventionDirective19469 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOCAL_in_oldCallConventionDirective19508 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_oldCallConventionDirective19510 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NEAR_in_oldCallConventionDirective19547 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_oldCallConventionDirective19549 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEPRECATED_in_hintingDirective19603 = new BitSet(new long[]{0x0000000080000002L,0x0400000000000000L});
	public static final BitSet FOLLOW_stringFactor_in_hintingDirective19606 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXPERIMENTAL_in_hintingDirective19641 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLATFORM_in_hintingDirective19676 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LIBRARY_in_hintingDirective19709 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARARGS_in_externalDirective19757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_externalDirective19759 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXTERNAL_in_externalDirective19795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_externalDirective19797 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXTERNAL_in_externalDirective19830 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_constExpression_in_externalDirective19832 = new BitSet(new long[]{0x0000000200000000L,0x0000000040001000L,0x0000000000002000L});
	public static final BitSet FOLLOW_externalSpecifier_in_externalDirective19835 = new BitSet(new long[]{0x0000000200000000L,0x0000000040001000L,0x0000000000002000L});
	public static final BitSet FOLLOW_DELAYED_in_externalDirective19840 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_externalDirective19844 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NAME_in_externalSpecifier19893 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_constExpression_in_externalSpecifier19895 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INDEX_in_externalSpecifier19928 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_constExpression_in_externalSpecifier19930 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DISPID_in_dispIDDirective19983 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_dispIDDirective19985 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_dispIDDirective19987 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TkIdentifier_in_ident20050 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_198_in_ident20083 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_TkIdentifier_in_ident20085 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_198_in_ident20122 = new BitSet(new long[]{0xFFFB3CFD78FABFF0L,0x8BFAFFF7E987FF2BL,0xF78000003FF9DBFFL,0x000000000000002FL});
	public static final BitSet FOLLOW_keywordsAsIdentifier_in_ident20124 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_usedKeywordsAsNames_in_ident20161 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_identList21474 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_COMMA_in_identList21477 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_identList21479 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_ident_in_identListFlat21544 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_COMMA_in_identListFlat21547 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_identListFlat21549 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_TkIdentifier_in_label21623 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TkIntNum_in_label21656 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TkHexNum_in_label21689 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_usedKeywordsAsNames_in_label21722 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TkRealNum_in_intRealNum21777 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_intNum_in_intRealNum21810 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_namespaceName21954 = new BitSet(new long[]{0x0000010000000002L});
	public static final BitSet FOLLOW_DOT_in_namespaceName21957 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_namespaceName21959 = new BitSet(new long[]{0x0000010000000002L});
	public static final BitSet FOLLOW_ident_in_qualifiedIdent22014 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_qualifiedIdent22016 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_qualifiedIdent22021 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_declSection_in_synpred23_Delphi1593 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_blockBody_in_synpred24_Delphi1598 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_methodDecl_in_synpred30_Delphi1875 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procDecl_in_synpred31_Delphi1908 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exportedProcHeading_in_synpred35_Delphi2092 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procDecl_in_synpred37_Delphi2158 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constDeclaration_in_synpred39_Delphi2307 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred41_Delphi2462 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeDeclaration_in_synpred44_Delphi2556 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred45_Delphi2622 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_varDeclaration_in_synpred47_Delphi2719 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred49_Delphi2879 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VAR_in_synpred53_Delphi2963 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_synpred53_Delphi2965 = new BitSet(new long[]{0x0000000001004000L});
	public static final BitSet FOLLOW_COLON_in_synpred53_Delphi2968 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_synpred53_Delphi2970 = new BitSet(new long[]{0x0000000000004000L});
	public static final BitSet FOLLOW_ASSIGN_in_synpred53_Delphi2974 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_synpred53_Delphi2976 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ABSOLUTE_in_synpred54_Delphi3070 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_qualifiedIdent_in_synpred54_Delphi3072 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ABSOLUTE_in_synpred55_Delphi3105 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_constExpression_in_synpred55_Delphi3107 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_strucType_in_synpred62_Delphi3352 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pointerType_in_synpred63_Delphi3385 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_stringType_in_synpred64_Delphi3418 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedureType_in_synpred65_Delphi3451 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_variantType_in_synpred66_Delphi3484 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subRangeType_in_synpred67_Delphi3517 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_genericPostfix_in_synpred69_Delphi3558 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_synpred70_Delphi3563 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_synpred70_Delphi3565 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_paranthesePostfix_in_synpred71_Delphi3570 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TYPE_in_synpred72_Delphi3551 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_typeId_in_synpred72_Delphi3555 = new BitSet(new long[]{0x0000010000000002L,0x0000000006000000L});
	public static final BitSet FOLLOW_genericPostfix_in_synpred72_Delphi3558 = new BitSet(new long[]{0x0000010000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_DOT_in_synpred72_Delphi3563 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_synpred72_Delphi3565 = new BitSet(new long[]{0x0000010000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_paranthesePostfix_in_synpred72_Delphi3570 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OF_in_synpred83_Delphi4323 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_synpred83_Delphi4325 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACK_in_synpred85_Delphi4474 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_synpred85_Delphi4476 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_synpred85_Delphi4478 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_codePageNumber_in_synpred88_Delphi4525 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_methodType_in_synpred89_Delphi4634 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleProcedureType_in_synpred90_Delphi4667 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_synpred92_Delphi4810 = new BitSet(new long[]{0x0040000000400000L,0x0000400000000000L,0x0000000000100808L});
	public static final BitSet FOLLOW_callConventionNoSemi_in_synpred92_Delphi4814 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred94_Delphi4922 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred96_Delphi4977 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classTypeTypeDecl_in_synpred110_Delphi5839 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classHelperDecl_in_synpred111_Delphi5872 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classTypeDecl_in_synpred112_Delphi5913 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_recordDecl_in_synpred115_Delphi6036 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_synpred119_Delphi6197 = new BitSet(new long[]{0x1252181978928170L,0x83DA02904B081C22L,0xF10010002AE8122DL,0x000000000000004CL});
	public static final BitSet FOLLOW_classState_in_synpred119_Delphi6200 = new BitSet(new long[]{0x1252181978928150L,0x83DA02904B081C22L,0xF10010002AE8022DL,0x000000000000004CL});
	public static final BitSet FOLLOW_classParent_in_synpred119_Delphi6205 = new BitSet(new long[]{0x1252181978928150L,0x83DA029049081C22L,0xF10010002AE8022DL,0x000000000000004CL});
	public static final BitSet FOLLOW_classItem_in_synpred119_Delphi6210 = new BitSet(new long[]{0x1252181978928150L,0x83DA029049081C22L,0xF10010002AE8022DL,0x000000000000004CL});
	public static final BitSet FOLLOW_END_in_synpred119_Delphi6214 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classParent_in_synpred121_Delphi6273 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_synpred124_Delphi6510 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_synpred125_Delphi6543 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classField_in_synpred126_Delphi6576 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classProperty_in_synpred127_Delphi6609 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_synpred134_Delphi6879 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classProperty_in_synpred135_Delphi6912 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_interfaceKey_in_synpred142_Delphi7064 = new BitSet(new long[]{0x0002000810800000L,0x0050008002080002L});
	public static final BitSet FOLLOW_classParent_in_synpred142_Delphi7067 = new BitSet(new long[]{0x0002000810800000L,0x0050008000080002L});
	public static final BitSet FOLLOW_interfaceGuid_in_synpred142_Delphi7072 = new BitSet(new long[]{0x0002000810800000L,0x0050008000080002L});
	public static final BitSet FOLLOW_interfaceItem_in_synpred142_Delphi7077 = new BitSet(new long[]{0x0002000810800000L,0x0050008000080002L});
	public static final BitSet FOLLOW_END_in_synpred142_Delphi7081 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classParent_in_synpred143_Delphi7175 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_synpred145_Delphi7418 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_synpred146_Delphi7452 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_synpred149_Delphi7592 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_synpred150_Delphi7625 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleRecord_in_synpred151_Delphi7713 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_recordField_in_synpred152_Delphi7802 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_recordField_in_synpred154_Delphi7880 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_synpred156_Delphi7962 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_synpred157_Delphi8000 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classProperty_in_synpred158_Delphi8033 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_recordField_in_synpred161_Delphi8132 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_synpred176_Delphi8703 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred177_Delphi8791 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred182_Delphi8791 = new BitSet(new long[]{0x0000000810800000L,0x0010000000000000L});
	public static final BitSet FOLLOW_CLASS_in_synpred182_Delphi8796 = new BitSet(new long[]{0x0000000810000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_methodKey_in_synpred182_Delphi8800 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_synpred182_Delphi8802 = new BitSet(new long[]{0x0000000000000000L,0x0000000006000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_genericDefinition_in_synpred182_Delphi8805 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred182_Delphi8810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_synpred182_Delphi8814 = new BitSet(new long[]{0x1560201400401022L,0x0000CC0089808000L,0xA000000000180818L});
	public static final BitSet FOLLOW_methodDirective_in_synpred182_Delphi8817 = new BitSet(new long[]{0x1560201400401022L,0x0000CC0089808000L,0xA000000000180818L});
	public static final BitSet FOLLOW_customAttribute_in_synpred183_Delphi8925 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred187_Delphi8951 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred189_Delphi8925 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_synpred189_Delphi8930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_synpred189_Delphi8934 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_synpred189_Delphi8936 = new BitSet(new long[]{0x0000000001000000L,0x0000000006000000L});
	public static final BitSet FOLLOW_genericDefinition_in_synpred189_Delphi8939 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred189_Delphi8944 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_synpred189_Delphi8948 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_customAttribute_in_synpred189_Delphi8951 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_synpred189_Delphi8955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_synpred189_Delphi8957 = new BitSet(new long[]{0x1560201400401022L,0x0000CC0089808000L,0xA000000000180818L});
	public static final BitSet FOLLOW_methodDirective_in_synpred189_Delphi8960 = new BitSet(new long[]{0x1560201400401022L,0x0000CC0089808000L,0xA000000000180818L});
	public static final BitSet FOLLOW_customAttribute_in_synpred190_Delphi9077 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred194_Delphi9103 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred196_Delphi9077 = new BitSet(new long[]{0x0000000000800000L,0x0000008000000000L});
	public static final BitSet FOLLOW_CLASS_in_synpred196_Delphi9082 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_OPERATOR_in_synpred196_Delphi9086 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_synpred196_Delphi9088 = new BitSet(new long[]{0x0000000001000000L,0x0000000006000000L});
	public static final BitSet FOLLOW_genericDefinition_in_synpred196_Delphi9091 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred196_Delphi9096 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_synpred196_Delphi9100 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_customAttribute_in_synpred196_Delphi9103 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_synpred196_Delphi9107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_synpred196_Delphi9109 = new BitSet(new long[]{0x1560201400401022L,0x0000CC0089808000L,0xA000000000180818L});
	public static final BitSet FOLLOW_methodDirective_in_synpred196_Delphi9112 = new BitSet(new long[]{0x1560201400401022L,0x0000CC0089808000L,0xA000000000180818L});
	public static final BitSet FOLLOW_customAttribute_in_synpred197_Delphi9226 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred200_Delphi9226 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_synpred200_Delphi9231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_synpred200_Delphi9235 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_synpred200_Delphi9237 = new BitSet(new long[]{0x0000010000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_genericDefinition_in_synpred200_Delphi9240 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_synpred200_Delphi9244 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_synpred200_Delphi9246 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_EQUAL_in_synpred200_Delphi9248 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_synpred200_Delphi9250 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_synpred200_Delphi9252 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred201_Delphi9286 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred204_Delphi9368 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred206_Delphi9489 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_synpred213_Delphi9749 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_synpred217_Delphi9900 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_synpred217_Delphi9902 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_synpred218_Delphi9935 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_synpred221_Delphi10100 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_synpred221_Delphi10102 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_synpred221_Delphi10104 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_synpred222_Delphi10137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_synpred222_Delphi10139 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred235_Delphi10722 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_methodDirective_in_synpred240_Delphi10840 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_methodBody_in_synpred241_Delphi10845 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred242_Delphi10905 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred245_Delphi10905 = new BitSet(new long[]{0x0000000810800000L,0x0010000000000000L});
	public static final BitSet FOLLOW_CLASS_in_synpred245_Delphi10910 = new BitSet(new long[]{0x0000000810000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_methodKey_in_synpred245_Delphi10915 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_methodName_in_synpred245_Delphi10917 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred245_Delphi10920 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred246_Delphi11018 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred249_Delphi11040 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred251_Delphi11018 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_synpred251_Delphi11023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_synpred251_Delphi11027 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_methodName_in_synpred251_Delphi11029 = new BitSet(new long[]{0x0000000001000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred251_Delphi11032 = new BitSet(new long[]{0x0000000001000002L});
	public static final BitSet FOLLOW_COLON_in_synpred251_Delphi11037 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_customAttribute_in_synpred251_Delphi11040 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_synpred251_Delphi11044 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred252_Delphi11153 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred254_Delphi11172 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionDirective_in_synpred261_Delphi11504 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procBody_in_synpred262_Delphi11509 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred263_Delphi11575 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred265_Delphi11575 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_PROCEDURE_in_synpred265_Delphi11579 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_synpred265_Delphi11581 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred265_Delphi11584 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred266_Delphi11684 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred270_Delphi11926 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionDirective_in_synpred276_Delphi12238 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NAME_in_synpred278_Delphi12279 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_synpred278_Delphi12281 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INDEX_in_synpred279_Delphi12285 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_synpred279_Delphi12287 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionDirective_in_synpred280_Delphi12292 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttributeDecl_in_synpred282_Delphi12430 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expressionList_in_synpred283_Delphi12486 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_anonymousExpression_in_synpred286_Delphi12629 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_relOp_in_synpred287_Delphi12673 = new BitSet(new long[]{0x12501911E0118150L,0x850F02955F083C20L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_simpleExpression_in_synpred287_Delphi12675 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EQUAL_in_synpred288_Delphi12680 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_synpred288_Delphi12682 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred289_Delphi12736 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_operator_in_synpred292_Delphi12836 = new BitSet(new long[]{0x12501911E0118150L,0x850F02955F083C20L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_factor_in_synpred292_Delphi12838 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT2_in_synpred293_Delphi12899 = new BitSet(new long[]{0x12501911E0118150L,0x850F02955F083C20L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_factor_in_synpred293_Delphi12901 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_199_in_synpred294_Delphi12934 = new BitSet(new long[]{0x12501911E0118150L,0x850F02955F083C20L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_factor_in_synpred294_Delphi12936 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_in_synpred295_Delphi12976 = new BitSet(new long[]{0x12501911E0118150L,0x850F02955F083C20L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_factor_in_synpred295_Delphi12978 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLUS_in_synpred296_Delphi13011 = new BitSet(new long[]{0x12501911E0118150L,0x850F02955F083C20L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_factor_in_synpred296_Delphi13013 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MINUS_in_synpred297_Delphi13046 = new BitSet(new long[]{0x12501911E0118150L,0x850F02955F083C20L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_factor_in_synpred297_Delphi13048 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_POINTER2_in_synpred298_Delphi13081 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_synpred298_Delphi13083 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_intRealNum_in_synpred299_Delphi13127 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRUE_in_synpred300_Delphi13160 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FALSE_in_synpred301_Delphi13193 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NIL_in_synpred302_Delphi13226 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_210_in_synpred303_Delphi13259 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_synpred304_Delphi13337 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_synpred304_Delphi13339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_synpred304_Delphi13341 = new BitSet(new long[]{0x1250191160118150L,0x810E02904F083C20L,0xE100100008E8002DL,0x000000000002084CL});
	public static final BitSet FOLLOW_designator_in_synpred304_Delphi13343 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_POINTER2_in_synpred305_Delphi13383 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_synpred306_Delphi13388 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_synpred306_Delphi13390 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_synpred307_Delphi13376 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_synpred307_Delphi13378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_synpred307_Delphi13380 = new BitSet(new long[]{0x0000010000000002L,0x0004000000000000L});
	public static final BitSet FOLLOW_POINTER2_in_synpred307_Delphi13383 = new BitSet(new long[]{0x0000010000000002L});
	public static final BitSet FOLLOW_DOT_in_synpred307_Delphi13388 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_synpred307_Delphi13390 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_synpred308_Delphi13436 = new BitSet(new long[]{0x12501911E0118150L,0x850F02955F083C20L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_simpleExpression_in_synpred308_Delphi13438 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_stringFactor_in_synpred309_Delphi13433 = new BitSet(new long[]{0x0000010000000002L});
	public static final BitSet FOLLOW_DOT_in_synpred309_Delphi13436 = new BitSet(new long[]{0x12501911E0118150L,0x850F02955F083C20L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_simpleExpression_in_synpred309_Delphi13438 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_setSection_in_synpred310_Delphi13473 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designator_in_synpred311_Delphi13506 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_QuotedString_in_synpred312_Delphi13603 = new BitSet(new long[]{0x0000000080000000L});
	public static final BitSet FOLLOW_controlString_in_synpred312_Delphi13606 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_QuotedString_in_synpred313_Delphi13612 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_controlString_in_synpred315_Delphi13651 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_QuotedString_in_synpred315_Delphi13654 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_controlString_in_synpred316_Delphi13659 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ControlChar_in_synpred317_Delphi13716 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_synpred320_Delphi13776 = new BitSet(new long[]{0x0000020002000002L});
	public static final BitSet FOLLOW_set_in_synpred320_Delphi13779 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_synpred320_Delphi13787 = new BitSet(new long[]{0x0000020002000002L});
	public static final BitSet FOLLOW_203_in_synpred321_Delphi13850 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INHERITED_in_synpred322_Delphi13855 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_qualifiedIdent_in_synpred323_Delphi13862 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_qualifiedIdent_in_synpred324_Delphi13862 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeId_in_synpred324_Delphi13866 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designatorItem_in_synpred325_Delphi13873 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_synpred336_Delphi14140 = new BitSet(new long[]{0x0000000003000002L});
	public static final BitSet FOLLOW_colonConstruct_in_synpred336_Delphi14143 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_COMMA_in_synpred336_Delphi14148 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_synpred336_Delphi14150 = new BitSet(new long[]{0x0000000003000002L});
	public static final BitSet FOLLOW_colonConstruct_in_synpred336_Delphi14153 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_label_in_synpred375_Delphi15671 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_synpred375_Delphi15673 = new BitSet(new long[]{0x925019116039C950L,0x890E02904F083D28L,0xF100380018E8006DL,0x000000000002084FL});
	public static final BitSet FOLLOW_statement_in_synpred375_Delphi15675 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ELSE_in_synpred376_Delphi15771 = new BitSet(new long[]{0x925019116039C950L,0x890E02904F083D28L,0xF100380018E8006DL,0x000000000002084FL});
	public static final BitSet FOLLOW_statement_in_synpred376_Delphi15773 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statementList_in_synpred383_Delphi16040 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_in_synpred386_Delphi16156 = new BitSet(new long[]{0x125019116111C150L,0x810E02904F083C20L,0xF100100008E8002DL,0x000000000002084CL});
	public static final BitSet FOLLOW_VAR_in_synpred386_Delphi16159 = new BitSet(new long[]{0x125019116111C150L,0x810E02904F083C20L,0xE100100008E8002DL,0x000000000002084CL});
	public static final BitSet FOLLOW_designator_in_synpred386_Delphi16163 = new BitSet(new long[]{0x0000000001004000L});
	public static final BitSet FOLLOW_COLON_in_synpred386_Delphi16166 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_synpred386_Delphi16168 = new BitSet(new long[]{0x0000000000004000L});
	public static final BitSet FOLLOW_ASSIGN_in_synpred386_Delphi16172 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_synpred386_Delphi16174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_TO_in_synpred386_Delphi16176 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_synpred386_Delphi16178 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_synpred386_Delphi16180 = new BitSet(new long[]{0x925019116039C950L,0x890E02904F083D28L,0xF100380018E8006DL,0x000000000002084FL});
	public static final BitSet FOLLOW_statement_in_synpred386_Delphi16182 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_in_synpred389_Delphi16215 = new BitSet(new long[]{0x125019116111C150L,0x810E02904F083C20L,0xF100100008E8002DL,0x000000000002084CL});
	public static final BitSet FOLLOW_VAR_in_synpred389_Delphi16218 = new BitSet(new long[]{0x125019116111C150L,0x810E02904F083C20L,0xE100100008E8002DL,0x000000000002084CL});
	public static final BitSet FOLLOW_designator_in_synpred389_Delphi16222 = new BitSet(new long[]{0x0000000001004000L});
	public static final BitSet FOLLOW_COLON_in_synpred389_Delphi16225 = new BitSet(new long[]{0x1A501931E0918350L,0x851F22955F093C22L,0xE102380028E8402FL,0x00000000000608CCL});
	public static final BitSet FOLLOW_typeDecl_in_synpred389_Delphi16227 = new BitSet(new long[]{0x0000000000004000L});
	public static final BitSet FOLLOW_ASSIGN_in_synpred389_Delphi16231 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_synpred389_Delphi16233 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_DOWNTO_in_synpred389_Delphi16235 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_synpred389_Delphi16237 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_synpred389_Delphi16239 = new BitSet(new long[]{0x925019116039C950L,0x890E02904F083D28L,0xF100380018E8006DL,0x000000000002084FL});
	public static final BitSet FOLLOW_statement_in_synpred389_Delphi16241 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statementList_in_synpred394_Delphi16529 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statement_in_synpred395_Delphi16599 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statement_in_synpred396_Delphi16607 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_synpred397_Delphi16604 = new BitSet(new long[]{0x925019116039C952L,0x890E02904F083D28L,0xF100380018E8006DL,0x000000000002084FL});
	public static final BitSet FOLLOW_statement_in_synpred397_Delphi16607 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designator_in_synpred398_Delphi16661 = new BitSet(new long[]{0x0000000000004000L});
	public static final BitSet FOLLOW_ASSIGN_in_synpred398_Delphi16663 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_synpred398_Delphi16665 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designator_in_synpred399_Delphi16698 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_gotoStatement_in_synpred400_Delphi16732 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_synpred402_Delphi16855 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_expression_in_synpred402_Delphi16857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_synpred402_Delphi16859 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_synpred406_Delphi16980 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_recordConstExpression_in_synpred406_Delphi16982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002400L});
	public static final BitSet FOLLOW_SEMI_in_synpred406_Delphi16985 = new BitSet(new long[]{0x1250181160108150L,0x810A029049001C20L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_recordConstExpression_in_synpred406_Delphi16987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002400L});
	public static final BitSet FOLLOW_RPAREN_in_synpred406_Delphi16991 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constExpression_in_synpred408_Delphi17039 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_synpred409_Delphi17025 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_constExpression_in_synpred409_Delphi17027 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_COMMA_in_synpred409_Delphi17030 = new BitSet(new long[]{0x12501911E0118150L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_constExpression_in_synpred409_Delphi17032 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_synpred409_Delphi17036 = new BitSet(new long[]{0x12501911E0118152L,0x851F02955F083C22L,0xE102380008E8002DL,0x00000000000608CCL});
	public static final BitSet FOLLOW_constExpression_in_synpred409_Delphi17039 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statementList_in_synpred411_Delphi17187 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRY_in_synpred412_Delphi17184 = new BitSet(new long[]{0x925819116039C950L,0x890E02904F083D28L,0xF100380018E8206DL,0x000000000002084FL});
	public static final BitSet FOLLOW_statementList_in_synpred412_Delphi17187 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_EXCEPT_in_synpred412_Delphi17191 = new BitSet(new long[]{0x925319116039C950L,0x890E02D04F083D28L,0xF100380018E8206DL,0x000000000002084FL});
	public static final BitSet FOLLOW_handlerList_in_synpred412_Delphi17193 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_synpred412_Delphi17195 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statementList_in_synpred413_Delphi17231 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statementList_in_synpred414_Delphi17238 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_handler_in_synpred417_Delphi17297 = new BitSet(new long[]{0x0001000000000002L,0x0000004000000000L});
	public static final BitSet FOLLOW_ELSE_in_synpred417_Delphi17302 = new BitSet(new long[]{0x925019116039C950L,0x890E02904F083D28L,0xF100380018E8206DL,0x000000000002084FL});
	public static final BitSet FOLLOW_statementList_in_synpred417_Delphi17304 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statement_in_synpred420_Delphi17514 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_synpred420_Delphi17517 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designator_in_synpred421_Delphi17606 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_in_synpred422_Delphi17611 = new BitSet(new long[]{0x1250191160118150L,0x810E02904F083C20L,0xE100100008E8002DL,0x000000000002084CL});
	public static final BitSet FOLLOW_designator_in_synpred422_Delphi17613 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_callConvention_in_synpred436_Delphi18269 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_callConventionNoSemi_in_synpred440_Delphi18392 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_externalDirective_in_synpred440_Delphi18396 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_externalDirective_in_synpred441_Delphi18439 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_synpred442_Delphi18537 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_synpred443_Delphi18590 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXTERNAL_in_synpred467_Delphi19795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_synpred467_Delphi19797 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_synpred656_Delphi22014 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_synpred656_Delphi22016 = new BitSet(new long[]{0x0000000000000002L});
}
