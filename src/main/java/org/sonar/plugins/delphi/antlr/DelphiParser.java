// $ANTLR null C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g 2020-04-17 18:20:00

/*
 * Sonar Delphi Plugin
 * Copyright (C) 2010 SonarSource
 * dev@sonar.codehaus.org
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
 */

package org.sonar.plugins.delphi.antlr;

/**
* Delphi Parser class generated by Antlr. Provides tokens and tree parsing methods.
**/


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


@SuppressWarnings("all")
public class DelphiParser extends Parser {
	public static final String[] tokenNames = new String[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABSOLUTE", "ABSTRACT", "ADD", 
		"AND", "ANSISTRING", "ARRAY", "AS", "ASM", "ASSEMBLER", "ASSEMBLY", "ASSIGN", 
		"AT", "AT2", "AUTOMATED", "Alpha", "BEGIN", "BREAK", "CASE", "CDECL", 
		"CLASS", "COLON", "COMMA", "COMMENT", "CONST", "CONSTRUCTOR", "CONTAINS", 
		"CONTINUE", "ControlChar", "ControlString", "DEFAULT", "DEPRECATED", "DESTRUCTOR", 
		"DISPID", "DISPINTERFACE", "DIV", "DO", "DOT", "DOTDOT", "DOWNTO", "DQ", 
		"DW", "DYNAMIC", "Digit", "Digitseq", "ELSE", "END", "EQUAL", "EXCEPT", 
		"EXIT", "EXPERIMENTAL", "EXPORT", "EXPORTS", "EXTERNAL", "FALSE", "FAR", 
		"FILE", "FINAL", "FINALIZATION", "FINALLY", "FOR", "FORWARD", "FUNCTION", 
		"GE", "GOTO", "GT", "HELPER", "Hexdigit", "Hexdigitseq", "IF", "IMPLEMENTATION", 
		"IMPLEMENTS", "IN", "INDEX", "INHERITED", "INITIALIZATION", "INLINE", 
		"INTERFACE", "IS", "LABEL", "LBRACK", "LBRACK2", "LCURLY", "LE", "LIBRARY", 
		"LOCAL", "LPAREN", "LT", "MESSAGE", "MINUS", "MOD", "NAME", "NEAR", "NIL", 
		"NODEFAULT", "NOT", "NOT_EQUAL", "OBJECT", "OF", "ON", "OPERATOR", "OR", 
		"OUT", "OVERLOAD", "OVERRIDE", "PACKAGE", "PACKED", "PASCAL", "PLATFORM", 
		"PLUS", "POINTER", "POINTER2", "PRIVATE", "PROCEDURE", "PROGRAM", "PROPERTY", 
		"PROTECTED", "PUBLIC", "PUBLISHED", "QuotedString", "RAISE", "RBRACK", 
		"RBRACK2", "RCURLY", "READ", "READONLY", "RECORD", "REFERENCE", "REGISTER", 
		"REINTRODUCE", "REMOVE", "REPEAT", "REQUIRES", "RESIDENT", "RESOURCESTRING", 
		"RPAREN", "SAFECALL", "SEALED", "SEMI", "SET", "SHL", "SHR", "SLASH", 
		"STAR", "STATIC", "STDCALL", "STORED", "STRICT", "STRING", "THEN", "THREADVAR", 
		"TO", "TRUE", "TRY", "TYPE", "TkAnonymousExpression", "TkClass", "TkClassField", 
		"TkClassOfType", "TkClassParents", "TkCustomAttribute", "TkCustomAttributeArgs", 
		"TkFunctionArgs", "TkFunctionBody", "TkFunctionName", "TkFunctionReturn", 
		"TkGlobalFunction", "TkGuid", "TkHexNum", "TkIdentifier", "TkIntNum", 
		"TkInterface", "TkNewType", "TkObject", "TkRealNum", "TkRecord", "TkRecordHelper", 
		"TkVariableIdents", "TkVariableParam", "TkVariableType", "UNIT", "UNSAFE", 
		"UNTIL", "USES", "UnicodeBOM", "VAR", "VARARGS", "VARIANT", "VIRTUAL", 
		"WHILE", "WITH", "WRITE", "WRITEONLY", "WS", "XOR", "'&'", "'@@'", "'^^'"
	};
	public static final int EOF=-1;
	public static final int T__198=198;
	public static final int T__199=199;
	public static final int T__200=200;
	public static final int ABSOLUTE=4;
	public static final int ABSTRACT=5;
	public static final int ADD=6;
	public static final int AND=7;
	public static final int ANSISTRING=8;
	public static final int ARRAY=9;
	public static final int AS=10;
	public static final int ASM=11;
	public static final int ASSEMBLER=12;
	public static final int ASSEMBLY=13;
	public static final int ASSIGN=14;
	public static final int AT=15;
	public static final int AT2=16;
	public static final int AUTOMATED=17;
	public static final int Alpha=18;
	public static final int BEGIN=19;
	public static final int BREAK=20;
	public static final int CASE=21;
	public static final int CDECL=22;
	public static final int CLASS=23;
	public static final int COLON=24;
	public static final int COMMA=25;
	public static final int COMMENT=26;
	public static final int CONST=27;
	public static final int CONSTRUCTOR=28;
	public static final int CONTAINS=29;
	public static final int CONTINUE=30;
	public static final int ControlChar=31;
	public static final int ControlString=32;
	public static final int DEFAULT=33;
	public static final int DEPRECATED=34;
	public static final int DESTRUCTOR=35;
	public static final int DISPID=36;
	public static final int DISPINTERFACE=37;
	public static final int DIV=38;
	public static final int DO=39;
	public static final int DOT=40;
	public static final int DOTDOT=41;
	public static final int DOWNTO=42;
	public static final int DQ=43;
	public static final int DW=44;
	public static final int DYNAMIC=45;
	public static final int Digit=46;
	public static final int Digitseq=47;
	public static final int ELSE=48;
	public static final int END=49;
	public static final int EQUAL=50;
	public static final int EXCEPT=51;
	public static final int EXIT=52;
	public static final int EXPERIMENTAL=53;
	public static final int EXPORT=54;
	public static final int EXPORTS=55;
	public static final int EXTERNAL=56;
	public static final int FALSE=57;
	public static final int FAR=58;
	public static final int FILE=59;
	public static final int FINAL=60;
	public static final int FINALIZATION=61;
	public static final int FINALLY=62;
	public static final int FOR=63;
	public static final int FORWARD=64;
	public static final int FUNCTION=65;
	public static final int GE=66;
	public static final int GOTO=67;
	public static final int GT=68;
	public static final int HELPER=69;
	public static final int Hexdigit=70;
	public static final int Hexdigitseq=71;
	public static final int IF=72;
	public static final int IMPLEMENTATION=73;
	public static final int IMPLEMENTS=74;
	public static final int IN=75;
	public static final int INDEX=76;
	public static final int INHERITED=77;
	public static final int INITIALIZATION=78;
	public static final int INLINE=79;
	public static final int INTERFACE=80;
	public static final int IS=81;
	public static final int LABEL=82;
	public static final int LBRACK=83;
	public static final int LBRACK2=84;
	public static final int LCURLY=85;
	public static final int LE=86;
	public static final int LIBRARY=87;
	public static final int LOCAL=88;
	public static final int LPAREN=89;
	public static final int LT=90;
	public static final int MESSAGE=91;
	public static final int MINUS=92;
	public static final int MOD=93;
	public static final int NAME=94;
	public static final int NEAR=95;
	public static final int NIL=96;
	public static final int NODEFAULT=97;
	public static final int NOT=98;
	public static final int NOT_EQUAL=99;
	public static final int OBJECT=100;
	public static final int OF=101;
	public static final int ON=102;
	public static final int OPERATOR=103;
	public static final int OR=104;
	public static final int OUT=105;
	public static final int OVERLOAD=106;
	public static final int OVERRIDE=107;
	public static final int PACKAGE=108;
	public static final int PACKED=109;
	public static final int PASCAL=110;
	public static final int PLATFORM=111;
	public static final int PLUS=112;
	public static final int POINTER=113;
	public static final int POINTER2=114;
	public static final int PRIVATE=115;
	public static final int PROCEDURE=116;
	public static final int PROGRAM=117;
	public static final int PROPERTY=118;
	public static final int PROTECTED=119;
	public static final int PUBLIC=120;
	public static final int PUBLISHED=121;
	public static final int QuotedString=122;
	public static final int RAISE=123;
	public static final int RBRACK=124;
	public static final int RBRACK2=125;
	public static final int RCURLY=126;
	public static final int READ=127;
	public static final int READONLY=128;
	public static final int RECORD=129;
	public static final int REFERENCE=130;
	public static final int REGISTER=131;
	public static final int REINTRODUCE=132;
	public static final int REMOVE=133;
	public static final int REPEAT=134;
	public static final int REQUIRES=135;
	public static final int RESIDENT=136;
	public static final int RESOURCESTRING=137;
	public static final int RPAREN=138;
	public static final int SAFECALL=139;
	public static final int SEALED=140;
	public static final int SEMI=141;
	public static final int SET=142;
	public static final int SHL=143;
	public static final int SHR=144;
	public static final int SLASH=145;
	public static final int STAR=146;
	public static final int STATIC=147;
	public static final int STDCALL=148;
	public static final int STORED=149;
	public static final int STRICT=150;
	public static final int STRING=151;
	public static final int THEN=152;
	public static final int THREADVAR=153;
	public static final int TO=154;
	public static final int TRUE=155;
	public static final int TRY=156;
	public static final int TYPE=157;
	public static final int TkAnonymousExpression=158;
	public static final int TkClass=159;
	public static final int TkClassField=160;
	public static final int TkClassOfType=161;
	public static final int TkClassParents=162;
	public static final int TkCustomAttribute=163;
	public static final int TkCustomAttributeArgs=164;
	public static final int TkFunctionArgs=165;
	public static final int TkFunctionBody=166;
	public static final int TkFunctionName=167;
	public static final int TkFunctionReturn=168;
	public static final int TkGlobalFunction=169;
	public static final int TkGuid=170;
	public static final int TkHexNum=171;
	public static final int TkIdentifier=172;
	public static final int TkIntNum=173;
	public static final int TkInterface=174;
	public static final int TkNewType=175;
	public static final int TkObject=176;
	public static final int TkRealNum=177;
	public static final int TkRecord=178;
	public static final int TkRecordHelper=179;
	public static final int TkVariableIdents=180;
	public static final int TkVariableParam=181;
	public static final int TkVariableType=182;
	public static final int UNIT=183;
	public static final int UNSAFE=184;
	public static final int UNTIL=185;
	public static final int USES=186;
	public static final int UnicodeBOM=187;
	public static final int VAR=188;
	public static final int VARARGS=189;
	public static final int VARIANT=190;
	public static final int VIRTUAL=191;
	public static final int WHILE=192;
	public static final int WITH=193;
	public static final int WRITE=194;
	public static final int WRITEONLY=195;
	public static final int WS=196;
	public static final int XOR=197;

	// delegates
	public Parser[] getDelegates() {
		return new Parser[] {};
	}

	// delegators


	public DelphiParser(TokenStream input) {
		this(input, new RecognizerSharedState());
	}
	public DelphiParser(TokenStream input, RecognizerSharedState state) {
		super(input, state);
		this.state.ruleMemo = new HashMap[805+1];


	}

	protected TreeAdaptor adaptor = new CommonTreeAdaptor();

	public void setTreeAdaptor(TreeAdaptor adaptor) {
		this.adaptor = adaptor;
	}
	public TreeAdaptor getTreeAdaptor() {
		return adaptor;
	}
	@Override public String[] getTokenNames() { return DelphiParser.tokenNames; }
	@Override public String getGrammarFileName() { return "C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g"; }


	public static class file_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "file"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:79:1: file : ( program | library | unit | packageE );
	public final DelphiParser.file_return file() throws RecognitionException {
		DelphiParser.file_return retval = new DelphiParser.file_return();
		retval.start = input.LT(1);
		int file_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope program1 =null;
		ParserRuleReturnScope library2 =null;
		ParserRuleReturnScope unit3 =null;
		ParserRuleReturnScope packageE4 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:79:30: ( program | library | unit | packageE )
			int alt1=4;
			switch ( input.LA(1) ) {
			case ASM:
			case BEGIN:
			case CLASS:
			case CONST:
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case DOT:
			case EXPORTS:
			case FUNCTION:
			case LABEL:
			case LBRACK:
			case PROCEDURE:
			case PROGRAM:
			case RESOURCESTRING:
			case THREADVAR:
			case TYPE:
			case USES:
			case VAR:
				{
				alt1=1;
				}
				break;
			case LIBRARY:
				{
				alt1=2;
				}
				break;
			case UNIT:
				{
				alt1=3;
				}
				break;
			case PACKAGE:
				{
				alt1=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 1, 0, input);
				throw nvae;
			}
			switch (alt1) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:79:32: program
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_program_in_file93);
					program1=program();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, program1.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:79:42: library
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_library_in_file97);
					library2=library();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, library2.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:79:52: unit
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_unit_in_file101);
					unit3=unit();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, unit3.getTree());

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:79:59: packageE
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_packageE_in_file105);
					packageE4=packageE();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, packageE4.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 1, file_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "file"


	public static class program_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "program"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:85:1: program : ( programHead )? ( usesFileClause )? block '.' ;
	public final DelphiParser.program_return program() throws RecognitionException {
		DelphiParser.program_return retval = new DelphiParser.program_return();
		retval.start = input.LT(1);
		int program_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal8=null;
		ParserRuleReturnScope programHead5 =null;
		ParserRuleReturnScope usesFileClause6 =null;
		ParserRuleReturnScope block7 =null;

		Object char_literal8_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:85:30: ( ( programHead )? ( usesFileClause )? block '.' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:85:32: ( programHead )? ( usesFileClause )? block '.'
			{
			root_0 = (Object)adaptor.nil();


			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:85:32: ( programHead )?
			int alt2=2;
			int LA2_0 = input.LA(1);
			if ( (LA2_0==PROGRAM) ) {
				alt2=1;
			}
			switch (alt2) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:85:33: programHead
					{
					pushFollow(FOLLOW_programHead_in_program168);
					programHead5=programHead();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, programHead5.getTree());

					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:85:47: ( usesFileClause )?
			int alt3=2;
			int LA3_0 = input.LA(1);
			if ( (LA3_0==USES) ) {
				alt3=1;
			}
			switch (alt3) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:85:48: usesFileClause
					{
					pushFollow(FOLLOW_usesFileClause_in_program173);
					usesFileClause6=usesFileClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, usesFileClause6.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_block_in_program177);
			block7=block();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, block7.getTree());

			char_literal8=(Token)match(input,DOT,FOLLOW_DOT_in_program179); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal8_tree = (Object)adaptor.create(char_literal8);
			adaptor.addChild(root_0, char_literal8_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 2, program_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "program"


	public static class programHead_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "programHead"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:87:1: programHead : 'program' namespaceName ( programParmSeq )? ';' ;
	public final DelphiParser.programHead_return programHead() throws RecognitionException {
		DelphiParser.programHead_return retval = new DelphiParser.programHead_return();
		retval.start = input.LT(1);
		int programHead_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal9=null;
		Token char_literal12=null;
		ParserRuleReturnScope namespaceName10 =null;
		ParserRuleReturnScope programParmSeq11 =null;

		Object string_literal9_tree=null;
		Object char_literal12_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:87:30: ( 'program' namespaceName ( programParmSeq )? ';' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:87:32: 'program' namespaceName ( programParmSeq )? ';'
			{
			root_0 = (Object)adaptor.nil();


			string_literal9=(Token)match(input,PROGRAM,FOLLOW_PROGRAM_in_programHead233); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal9_tree = (Object)adaptor.create(string_literal9);
			adaptor.addChild(root_0, string_literal9_tree);
			}

			pushFollow(FOLLOW_namespaceName_in_programHead235);
			namespaceName10=namespaceName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, namespaceName10.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:87:56: ( programParmSeq )?
			int alt4=2;
			int LA4_0 = input.LA(1);
			if ( (LA4_0==LPAREN) ) {
				alt4=1;
			}
			switch (alt4) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:87:57: programParmSeq
					{
					pushFollow(FOLLOW_programParmSeq_in_programHead238);
					programParmSeq11=programParmSeq();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, programParmSeq11.getTree());

					}
					break;

			}

			char_literal12=(Token)match(input,SEMI,FOLLOW_SEMI_in_programHead242); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal12_tree = (Object)adaptor.create(char_literal12);
			adaptor.addChild(root_0, char_literal12_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 3, programHead_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "programHead"


	public static class programParmSeq_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "programParmSeq"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:89:1: programParmSeq : '(' ( ident ( ',' ident )* )? ')' ;
	public final DelphiParser.programParmSeq_return programParmSeq() throws RecognitionException {
		DelphiParser.programParmSeq_return retval = new DelphiParser.programParmSeq_return();
		retval.start = input.LT(1);
		int programParmSeq_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal13=null;
		Token char_literal15=null;
		Token char_literal17=null;
		ParserRuleReturnScope ident14 =null;
		ParserRuleReturnScope ident16 =null;

		Object char_literal13_tree=null;
		Object char_literal15_tree=null;
		Object char_literal17_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:89:30: ( '(' ( ident ( ',' ident )* )? ')' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:89:32: '(' ( ident ( ',' ident )* )? ')'
			{
			root_0 = (Object)adaptor.nil();


			char_literal13=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_programParmSeq293); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal13_tree = (Object)adaptor.create(char_literal13);
			adaptor.addChild(root_0, char_literal13_tree);
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:89:36: ( ident ( ',' ident )* )?
			int alt6=2;
			int LA6_0 = input.LA(1);
			if ( (LA6_0==ADD||LA6_0==ANSISTRING||LA6_0==AT||LA6_0==BREAK||(LA6_0 >= CONTAINS && LA6_0 <= CONTINUE)||LA6_0==DEFAULT||(LA6_0 >= DQ && LA6_0 <= DW)||LA6_0==EXIT||LA6_0==EXPORT||LA6_0==FALSE||LA6_0==FINAL||LA6_0==IMPLEMENTS||LA6_0==INDEX||LA6_0==LOCAL||LA6_0==MESSAGE||LA6_0==NAME||LA6_0==OBJECT||LA6_0==OPERATOR||LA6_0==OUT||LA6_0==POINTER||(LA6_0 >= READ && LA6_0 <= READONLY)||(LA6_0 >= REFERENCE && LA6_0 <= REGISTER)||LA6_0==REMOVE||LA6_0==STATIC||(LA6_0 >= STORED && LA6_0 <= STRING)||LA6_0==TRUE||LA6_0==TkIdentifier||LA6_0==UNSAFE||(LA6_0 >= VARARGS && LA6_0 <= VIRTUAL)||(LA6_0 >= WRITE && LA6_0 <= WRITEONLY)||LA6_0==198) ) {
				alt6=1;
			}
			switch (alt6) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:89:37: ident ( ',' ident )*
					{
					pushFollow(FOLLOW_ident_in_programParmSeq296);
					ident14=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident14.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:89:43: ( ',' ident )*
					loop5:
					while (true) {
						int alt5=2;
						int LA5_0 = input.LA(1);
						if ( (LA5_0==COMMA) ) {
							alt5=1;
						}

						switch (alt5) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:89:44: ',' ident
							{
							char_literal15=(Token)match(input,COMMA,FOLLOW_COMMA_in_programParmSeq299); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal15_tree = (Object)adaptor.create(char_literal15);
							adaptor.addChild(root_0, char_literal15_tree);
							}

							pushFollow(FOLLOW_ident_in_programParmSeq301);
							ident16=ident();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, ident16.getTree());

							}
							break;

						default :
							break loop5;
						}
					}

					}
					break;

			}

			char_literal17=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_programParmSeq308); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal17_tree = (Object)adaptor.create(char_literal17);
			adaptor.addChild(root_0, char_literal17_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 4, programParmSeq_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "programParmSeq"


	public static class library_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "library"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:91:1: library : libraryHead ( usesFileClause )? block '.' ;
	public final DelphiParser.library_return library() throws RecognitionException {
		DelphiParser.library_return retval = new DelphiParser.library_return();
		retval.start = input.LT(1);
		int library_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal21=null;
		ParserRuleReturnScope libraryHead18 =null;
		ParserRuleReturnScope usesFileClause19 =null;
		ParserRuleReturnScope block20 =null;

		Object char_literal21_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:91:30: ( libraryHead ( usesFileClause )? block '.' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:91:32: libraryHead ( usesFileClause )? block '.'
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_libraryHead_in_library366);
			libraryHead18=libraryHead();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, libraryHead18.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:91:44: ( usesFileClause )?
			int alt7=2;
			int LA7_0 = input.LA(1);
			if ( (LA7_0==USES) ) {
				alt7=1;
			}
			switch (alt7) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:91:45: usesFileClause
					{
					pushFollow(FOLLOW_usesFileClause_in_library369);
					usesFileClause19=usesFileClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, usesFileClause19.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_block_in_library373);
			block20=block();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, block20.getTree());

			char_literal21=(Token)match(input,DOT,FOLLOW_DOT_in_library375); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal21_tree = (Object)adaptor.create(char_literal21);
			adaptor.addChild(root_0, char_literal21_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 5, library_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "library"


	public static class libraryHead_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "libraryHead"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:93:1: libraryHead : 'library' namespaceName ( hintingDirective )* ';' -> ^( 'library' namespaceName ) ;
	public final DelphiParser.libraryHead_return libraryHead() throws RecognitionException {
		DelphiParser.libraryHead_return retval = new DelphiParser.libraryHead_return();
		retval.start = input.LT(1);
		int libraryHead_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal22=null;
		Token char_literal25=null;
		ParserRuleReturnScope namespaceName23 =null;
		ParserRuleReturnScope hintingDirective24 =null;

		Object string_literal22_tree=null;
		Object char_literal25_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_LIBRARY=new RewriteRuleTokenStream(adaptor,"token LIBRARY");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_namespaceName=new RewriteRuleSubtreeStream(adaptor,"rule namespaceName");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:93:30: ( 'library' namespaceName ( hintingDirective )* ';' -> ^( 'library' namespaceName ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:93:32: 'library' namespaceName ( hintingDirective )* ';'
			{
			string_literal22=(Token)match(input,LIBRARY,FOLLOW_LIBRARY_in_libraryHead429); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LIBRARY.add(string_literal22);

			pushFollow(FOLLOW_namespaceName_in_libraryHead431);
			namespaceName23=namespaceName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespaceName.add(namespaceName23.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:93:56: ( hintingDirective )*
			loop8:
			while (true) {
				int alt8=2;
				int LA8_0 = input.LA(1);
				if ( (LA8_0==DEPRECATED||LA8_0==EXPERIMENTAL||LA8_0==LIBRARY||LA8_0==PLATFORM) ) {
					alt8=1;
				}

				switch (alt8) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:93:57: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_libraryHead434);
					hintingDirective24=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective24.getTree());
					}
					break;

				default :
					break loop8;
				}
			}

			char_literal25=(Token)match(input,SEMI,FOLLOW_SEMI_in_libraryHead438); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal25);

			// AST REWRITE
			// elements: namespaceName, LIBRARY
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 93:80: -> ^( 'library' namespaceName )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:93:83: ^( 'library' namespaceName )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_LIBRARY.nextNode(), root_1);
				adaptor.addChild(root_1, stream_namespaceName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 6, libraryHead_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "libraryHead"


	public static class packageE_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "packageE"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:95:1: packageE : packageHead requiresClause ( containsClause )? 'end' '.' ;
	public final DelphiParser.packageE_return packageE() throws RecognitionException {
		DelphiParser.packageE_return retval = new DelphiParser.packageE_return();
		retval.start = input.LT(1);
		int packageE_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal29=null;
		Token char_literal30=null;
		ParserRuleReturnScope packageHead26 =null;
		ParserRuleReturnScope requiresClause27 =null;
		ParserRuleReturnScope containsClause28 =null;

		Object string_literal29_tree=null;
		Object char_literal30_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:95:30: ( packageHead requiresClause ( containsClause )? 'end' '.' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:95:32: packageHead requiresClause ( containsClause )? 'end' '.'
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_packageHead_in_packageE503);
			packageHead26=packageHead();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, packageHead26.getTree());

			pushFollow(FOLLOW_requiresClause_in_packageE505);
			requiresClause27=requiresClause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, requiresClause27.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:95:59: ( containsClause )?
			int alt9=2;
			int LA9_0 = input.LA(1);
			if ( (LA9_0==CONTAINS) ) {
				alt9=1;
			}
			switch (alt9) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:95:60: containsClause
					{
					pushFollow(FOLLOW_containsClause_in_packageE508);
					containsClause28=containsClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, containsClause28.getTree());

					}
					break;

			}

			string_literal29=(Token)match(input,END,FOLLOW_END_in_packageE512); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal29_tree = (Object)adaptor.create(string_literal29);
			adaptor.addChild(root_0, string_literal29_tree);
			}

			char_literal30=(Token)match(input,DOT,FOLLOW_DOT_in_packageE514); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal30_tree = (Object)adaptor.create(char_literal30);
			adaptor.addChild(root_0, char_literal30_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 7, packageE_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "packageE"


	public static class packageHead_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "packageHead"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:97:1: packageHead : 'package' namespaceName ';' ;
	public final DelphiParser.packageHead_return packageHead() throws RecognitionException {
		DelphiParser.packageHead_return retval = new DelphiParser.packageHead_return();
		retval.start = input.LT(1);
		int packageHead_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal31=null;
		Token char_literal33=null;
		ParserRuleReturnScope namespaceName32 =null;

		Object string_literal31_tree=null;
		Object char_literal33_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:97:30: ( 'package' namespaceName ';' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:97:32: 'package' namespaceName ';'
			{
			root_0 = (Object)adaptor.nil();


			string_literal31=(Token)match(input,PACKAGE,FOLLOW_PACKAGE_in_packageHead568); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal31_tree = (Object)adaptor.create(string_literal31);
			adaptor.addChild(root_0, string_literal31_tree);
			}

			pushFollow(FOLLOW_namespaceName_in_packageHead570);
			namespaceName32=namespaceName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, namespaceName32.getTree());

			char_literal33=(Token)match(input,SEMI,FOLLOW_SEMI_in_packageHead572); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal33_tree = (Object)adaptor.create(char_literal33);
			adaptor.addChild(root_0, char_literal33_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 8, packageHead_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "packageHead"


	public static class unit_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unit"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:99:1: unit : unitHead unitInterface unitImplementation unitBlock '.' ;
	public final DelphiParser.unit_return unit() throws RecognitionException {
		DelphiParser.unit_return retval = new DelphiParser.unit_return();
		retval.start = input.LT(1);
		int unit_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal38=null;
		ParserRuleReturnScope unitHead34 =null;
		ParserRuleReturnScope unitInterface35 =null;
		ParserRuleReturnScope unitImplementation36 =null;
		ParserRuleReturnScope unitBlock37 =null;

		Object char_literal38_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:99:30: ( unitHead unitInterface unitImplementation unitBlock '.' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:99:32: unitHead unitInterface unitImplementation unitBlock '.'
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_unitHead_in_unit633);
			unitHead34=unitHead();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, unitHead34.getTree());

			pushFollow(FOLLOW_unitInterface_in_unit635);
			unitInterface35=unitInterface();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, unitInterface35.getTree());

			pushFollow(FOLLOW_unitImplementation_in_unit637);
			unitImplementation36=unitImplementation();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, unitImplementation36.getTree());

			pushFollow(FOLLOW_unitBlock_in_unit639);
			unitBlock37=unitBlock();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, unitBlock37.getTree());

			char_literal38=(Token)match(input,DOT,FOLLOW_DOT_in_unit641); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal38_tree = (Object)adaptor.create(char_literal38);
			adaptor.addChild(root_0, char_literal38_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 9, unit_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unit"


	public static class unitHead_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unitHead"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:101:1: unitHead : 'unit' namespaceName ( hintingDirective )* ';' -> ^( 'unit' namespaceName ( hintingDirective )* ) ;
	public final DelphiParser.unitHead_return unitHead() throws RecognitionException {
		DelphiParser.unitHead_return retval = new DelphiParser.unitHead_return();
		retval.start = input.LT(1);
		int unitHead_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal39=null;
		Token char_literal42=null;
		ParserRuleReturnScope namespaceName40 =null;
		ParserRuleReturnScope hintingDirective41 =null;

		Object string_literal39_tree=null;
		Object char_literal42_tree=null;
		RewriteRuleTokenStream stream_UNIT=new RewriteRuleTokenStream(adaptor,"token UNIT");
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_namespaceName=new RewriteRuleSubtreeStream(adaptor,"rule namespaceName");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:101:30: ( 'unit' namespaceName ( hintingDirective )* ';' -> ^( 'unit' namespaceName ( hintingDirective )* ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:101:32: 'unit' namespaceName ( hintingDirective )* ';'
			{
			string_literal39=(Token)match(input,UNIT,FOLLOW_UNIT_in_unitHead698); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_UNIT.add(string_literal39);

			pushFollow(FOLLOW_namespaceName_in_unitHead700);
			namespaceName40=namespaceName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespaceName.add(namespaceName40.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:101:53: ( hintingDirective )*
			loop10:
			while (true) {
				int alt10=2;
				int LA10_0 = input.LA(1);
				if ( (LA10_0==DEPRECATED||LA10_0==EXPERIMENTAL||LA10_0==LIBRARY||LA10_0==PLATFORM) ) {
					alt10=1;
				}

				switch (alt10) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:101:54: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_unitHead703);
					hintingDirective41=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective41.getTree());
					}
					break;

				default :
					break loop10;
				}
			}

			char_literal42=(Token)match(input,SEMI,FOLLOW_SEMI_in_unitHead707); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal42);

			// AST REWRITE
			// elements: namespaceName, hintingDirective, UNIT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 101:77: -> ^( 'unit' namespaceName ( hintingDirective )* )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:101:80: ^( 'unit' namespaceName ( hintingDirective )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_UNIT.nextNode(), root_1);
				adaptor.addChild(root_1, stream_namespaceName.nextTree());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:101:103: ( hintingDirective )*
				while ( stream_hintingDirective.hasNext() ) {
					adaptor.addChild(root_1, stream_hintingDirective.nextTree());
				}
				stream_hintingDirective.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 10, unitHead_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unitHead"


	public static class unitInterface_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unitInterface"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:103:1: unitInterface : 'interface' ( usesClause )? ( interfaceDecl )* -> ^( 'interface' ( usesClause )? ( interfaceDecl )* ) ;
	public final DelphiParser.unitInterface_return unitInterface() throws RecognitionException {
		DelphiParser.unitInterface_return retval = new DelphiParser.unitInterface_return();
		retval.start = input.LT(1);
		int unitInterface_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal43=null;
		ParserRuleReturnScope usesClause44 =null;
		ParserRuleReturnScope interfaceDecl45 =null;

		Object string_literal43_tree=null;
		RewriteRuleTokenStream stream_INTERFACE=new RewriteRuleTokenStream(adaptor,"token INTERFACE");
		RewriteRuleSubtreeStream stream_interfaceDecl=new RewriteRuleSubtreeStream(adaptor,"rule interfaceDecl");
		RewriteRuleSubtreeStream stream_usesClause=new RewriteRuleSubtreeStream(adaptor,"rule usesClause");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:103:30: ( 'interface' ( usesClause )? ( interfaceDecl )* -> ^( 'interface' ( usesClause )? ( interfaceDecl )* ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:103:32: 'interface' ( usesClause )? ( interfaceDecl )*
			{
			string_literal43=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_unitInterface772); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_INTERFACE.add(string_literal43);

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:103:44: ( usesClause )?
			int alt11=2;
			int LA11_0 = input.LA(1);
			if ( (LA11_0==USES) ) {
				alt11=1;
			}
			switch (alt11) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:103:45: usesClause
					{
					pushFollow(FOLLOW_usesClause_in_unitInterface775);
					usesClause44=usesClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_usesClause.add(usesClause44.getTree());
					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:103:58: ( interfaceDecl )*
			loop12:
			while (true) {
				int alt12=2;
				int LA12_0 = input.LA(1);
				if ( (LA12_0==CLASS||(LA12_0 >= CONST && LA12_0 <= CONSTRUCTOR)||LA12_0==DESTRUCTOR||LA12_0==EXPORTS||LA12_0==FUNCTION||LA12_0==LBRACK||LA12_0==PROCEDURE||LA12_0==RESOURCESTRING||LA12_0==THREADVAR||LA12_0==TYPE||LA12_0==VAR) ) {
					alt12=1;
				}

				switch (alt12) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:103:59: interfaceDecl
					{
					pushFollow(FOLLOW_interfaceDecl_in_unitInterface780);
					interfaceDecl45=interfaceDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_interfaceDecl.add(interfaceDecl45.getTree());
					}
					break;

				default :
					break loop12;
				}
			}

			// AST REWRITE
			// elements: usesClause, interfaceDecl, INTERFACE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 103:75: -> ^( 'interface' ( usesClause )? ( interfaceDecl )* )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:103:78: ^( 'interface' ( usesClause )? ( interfaceDecl )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_INTERFACE.nextNode(), root_1);
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:103:92: ( usesClause )?
				if ( stream_usesClause.hasNext() ) {
					adaptor.addChild(root_1, stream_usesClause.nextTree());
				}
				stream_usesClause.reset();

				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:103:106: ( interfaceDecl )*
				while ( stream_interfaceDecl.hasNext() ) {
					adaptor.addChild(root_1, stream_interfaceDecl.nextTree());
				}
				stream_interfaceDecl.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 11, unitInterface_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unitInterface"


	public static class unitImplementation_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unitImplementation"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:105:1: unitImplementation : 'implementation' ( usesClause )? ( declSection )* -> ^( 'implementation' ( usesClause )? ( declSection )* ) ;
	public final DelphiParser.unitImplementation_return unitImplementation() throws RecognitionException {
		DelphiParser.unitImplementation_return retval = new DelphiParser.unitImplementation_return();
		retval.start = input.LT(1);
		int unitImplementation_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal46=null;
		ParserRuleReturnScope usesClause47 =null;
		ParserRuleReturnScope declSection48 =null;

		Object string_literal46_tree=null;
		RewriteRuleTokenStream stream_IMPLEMENTATION=new RewriteRuleTokenStream(adaptor,"token IMPLEMENTATION");
		RewriteRuleSubtreeStream stream_declSection=new RewriteRuleSubtreeStream(adaptor,"rule declSection");
		RewriteRuleSubtreeStream stream_usesClause=new RewriteRuleSubtreeStream(adaptor,"rule usesClause");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:105:30: ( 'implementation' ( usesClause )? ( declSection )* -> ^( 'implementation' ( usesClause )? ( declSection )* ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:105:32: 'implementation' ( usesClause )? ( declSection )*
			{
			string_literal46=(Token)match(input,IMPLEMENTATION,FOLLOW_IMPLEMENTATION_in_unitImplementation845); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_IMPLEMENTATION.add(string_literal46);

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:105:49: ( usesClause )?
			int alt13=2;
			int LA13_0 = input.LA(1);
			if ( (LA13_0==USES) ) {
				alt13=1;
			}
			switch (alt13) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:105:50: usesClause
					{
					pushFollow(FOLLOW_usesClause_in_unitImplementation848);
					usesClause47=usesClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_usesClause.add(usesClause47.getTree());
					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:105:63: ( declSection )*
			loop14:
			while (true) {
				int alt14=2;
				int LA14_0 = input.LA(1);
				if ( (LA14_0==CLASS||(LA14_0 >= CONST && LA14_0 <= CONSTRUCTOR)||LA14_0==DESTRUCTOR||LA14_0==EXPORTS||LA14_0==FUNCTION||(LA14_0 >= LABEL && LA14_0 <= LBRACK)||LA14_0==PROCEDURE||LA14_0==RESOURCESTRING||LA14_0==THREADVAR||LA14_0==TYPE||LA14_0==VAR) ) {
					alt14=1;
				}

				switch (alt14) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:105:64: declSection
					{
					pushFollow(FOLLOW_declSection_in_unitImplementation853);
					declSection48=declSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_declSection.add(declSection48.getTree());
					}
					break;

				default :
					break loop14;
				}
			}

			// AST REWRITE
			// elements: declSection, IMPLEMENTATION, usesClause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 105:78: -> ^( 'implementation' ( usesClause )? ( declSection )* )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:105:81: ^( 'implementation' ( usesClause )? ( declSection )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_IMPLEMENTATION.nextNode(), root_1);
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:105:100: ( usesClause )?
				if ( stream_usesClause.hasNext() ) {
					adaptor.addChild(root_1, stream_usesClause.nextTree());
				}
				stream_usesClause.reset();

				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:105:114: ( declSection )*
				while ( stream_declSection.hasNext() ) {
					adaptor.addChild(root_1, stream_declSection.nextTree());
				}
				stream_declSection.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 12, unitImplementation_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unitImplementation"


	public static class unitBlock_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unitBlock"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:107:1: unitBlock : ( unitInitialization 'end' | compoundStatement | 'end' );
	public final DelphiParser.unitBlock_return unitBlock() throws RecognitionException {
		DelphiParser.unitBlock_return retval = new DelphiParser.unitBlock_return();
		retval.start = input.LT(1);
		int unitBlock_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal50=null;
		Token string_literal52=null;
		ParserRuleReturnScope unitInitialization49 =null;
		ParserRuleReturnScope compoundStatement51 =null;

		Object string_literal50_tree=null;
		Object string_literal52_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:107:30: ( unitInitialization 'end' | compoundStatement | 'end' )
			int alt15=3;
			switch ( input.LA(1) ) {
			case INITIALIZATION:
				{
				alt15=1;
				}
				break;
			case BEGIN:
				{
				alt15=2;
				}
				break;
			case END:
				{
				alt15=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 15, 0, input);
				throw nvae;
			}
			switch (alt15) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:107:32: unitInitialization 'end'
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_unitInitialization_in_unitBlock927);
					unitInitialization49=unitInitialization();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, unitInitialization49.getTree());

					string_literal50=(Token)match(input,END,FOLLOW_END_in_unitBlock929); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal50_tree = (Object)adaptor.create(string_literal50);
					adaptor.addChild(root_0, string_literal50_tree);
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:108:32: compoundStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_compoundStatement_in_unitBlock962);
					compoundStatement51=compoundStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, compoundStatement51.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:109:32: 'end'
					{
					root_0 = (Object)adaptor.nil();


					string_literal52=(Token)match(input,END,FOLLOW_END_in_unitBlock995); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal52_tree = (Object)adaptor.create(string_literal52);
					adaptor.addChild(root_0, string_literal52_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 13, unitBlock_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unitBlock"


	public static class unitInitialization_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unitInitialization"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:111:1: unitInitialization : 'initialization' statementList ( unitFinalization )? ;
	public final DelphiParser.unitInitialization_return unitInitialization() throws RecognitionException {
		DelphiParser.unitInitialization_return retval = new DelphiParser.unitInitialization_return();
		retval.start = input.LT(1);
		int unitInitialization_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal53=null;
		ParserRuleReturnScope statementList54 =null;
		ParserRuleReturnScope unitFinalization55 =null;

		Object string_literal53_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:111:30: ( 'initialization' statementList ( unitFinalization )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:111:32: 'initialization' statementList ( unitFinalization )?
			{
			root_0 = (Object)adaptor.nil();


			string_literal53=(Token)match(input,INITIALIZATION,FOLLOW_INITIALIZATION_in_unitInitialization1042); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal53_tree = (Object)adaptor.create(string_literal53);
			adaptor.addChild(root_0, string_literal53_tree);
			}

			pushFollow(FOLLOW_statementList_in_unitInitialization1044);
			statementList54=statementList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList54.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:111:63: ( unitFinalization )?
			int alt16=2;
			int LA16_0 = input.LA(1);
			if ( (LA16_0==FINALIZATION) ) {
				alt16=1;
			}
			switch (alt16) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:111:64: unitFinalization
					{
					pushFollow(FOLLOW_unitFinalization_in_unitInitialization1047);
					unitFinalization55=unitFinalization();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, unitFinalization55.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 14, unitInitialization_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unitInitialization"


	public static class unitFinalization_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unitFinalization"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:113:1: unitFinalization : 'finalization' statementList ;
	public final DelphiParser.unitFinalization_return unitFinalization() throws RecognitionException {
		DelphiParser.unitFinalization_return retval = new DelphiParser.unitFinalization_return();
		retval.start = input.LT(1);
		int unitFinalization_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal56=null;
		ParserRuleReturnScope statementList57 =null;

		Object string_literal56_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:113:30: ( 'finalization' statementList )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:113:32: 'finalization' statementList
			{
			root_0 = (Object)adaptor.nil();


			string_literal56=(Token)match(input,FINALIZATION,FOLLOW_FINALIZATION_in_unitFinalization1098); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal56_tree = (Object)adaptor.create(string_literal56);
			adaptor.addChild(root_0, string_literal56_tree);
			}

			pushFollow(FOLLOW_statementList_in_unitFinalization1100);
			statementList57=statementList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList57.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 15, unitFinalization_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unitFinalization"


	public static class containsClause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "containsClause"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:118:1: containsClause : 'contains' namespaceFileNameList ;
	public final DelphiParser.containsClause_return containsClause() throws RecognitionException {
		DelphiParser.containsClause_return retval = new DelphiParser.containsClause_return();
		retval.start = input.LT(1);
		int containsClause_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal58=null;
		ParserRuleReturnScope namespaceFileNameList59 =null;

		Object string_literal58_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:118:30: ( 'contains' namespaceFileNameList )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:118:32: 'contains' namespaceFileNameList
			{
			root_0 = (Object)adaptor.nil();


			string_literal58=(Token)match(input,CONTAINS,FOLLOW_CONTAINS_in_containsClause1154); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal58_tree = (Object)adaptor.create(string_literal58);
			adaptor.addChild(root_0, string_literal58_tree);
			}

			pushFollow(FOLLOW_namespaceFileNameList_in_containsClause1156);
			namespaceFileNameList59=namespaceFileNameList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, namespaceFileNameList59.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 16, containsClause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "containsClause"


	public static class requiresClause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "requiresClause"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:120:1: requiresClause : 'requires' namespaceNameList ;
	public final DelphiParser.requiresClause_return requiresClause() throws RecognitionException {
		DelphiParser.requiresClause_return retval = new DelphiParser.requiresClause_return();
		retval.start = input.LT(1);
		int requiresClause_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal60=null;
		ParserRuleReturnScope namespaceNameList61 =null;

		Object string_literal60_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:120:30: ( 'requires' namespaceNameList )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:120:32: 'requires' namespaceNameList
			{
			root_0 = (Object)adaptor.nil();


			string_literal60=(Token)match(input,REQUIRES,FOLLOW_REQUIRES_in_requiresClause1207); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal60_tree = (Object)adaptor.create(string_literal60);
			adaptor.addChild(root_0, string_literal60_tree);
			}

			pushFollow(FOLLOW_namespaceNameList_in_requiresClause1209);
			namespaceNameList61=namespaceNameList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, namespaceNameList61.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 17, requiresClause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "requiresClause"


	public static class usesClause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "usesClause"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:122:1: usesClause : 'uses' namespaceNameList -> ^( 'uses' namespaceNameList ) ;
	public final DelphiParser.usesClause_return usesClause() throws RecognitionException {
		DelphiParser.usesClause_return retval = new DelphiParser.usesClause_return();
		retval.start = input.LT(1);
		int usesClause_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal62=null;
		ParserRuleReturnScope namespaceNameList63 =null;

		Object string_literal62_tree=null;
		RewriteRuleTokenStream stream_USES=new RewriteRuleTokenStream(adaptor,"token USES");
		RewriteRuleSubtreeStream stream_namespaceNameList=new RewriteRuleSubtreeStream(adaptor,"rule namespaceNameList");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:122:30: ( 'uses' namespaceNameList -> ^( 'uses' namespaceNameList ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:122:32: 'uses' namespaceNameList
			{
			string_literal62=(Token)match(input,USES,FOLLOW_USES_in_usesClause1264); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_USES.add(string_literal62);

			pushFollow(FOLLOW_namespaceNameList_in_usesClause1266);
			namespaceNameList63=namespaceNameList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespaceNameList.add(namespaceNameList63.getTree());
			// AST REWRITE
			// elements: namespaceNameList, USES
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 122:57: -> ^( 'uses' namespaceNameList )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:122:60: ^( 'uses' namespaceNameList )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_USES.nextNode(), root_1);
				adaptor.addChild(root_1, stream_namespaceNameList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 18, usesClause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "usesClause"


	public static class usesFileClause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "usesFileClause"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:124:1: usesFileClause : 'uses' namespaceFileNameList -> ^( 'uses' namespaceFileNameList ) ;
	public final DelphiParser.usesFileClause_return usesFileClause() throws RecognitionException {
		DelphiParser.usesFileClause_return retval = new DelphiParser.usesFileClause_return();
		retval.start = input.LT(1);
		int usesFileClause_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal64=null;
		ParserRuleReturnScope namespaceFileNameList65 =null;

		Object string_literal64_tree=null;
		RewriteRuleTokenStream stream_USES=new RewriteRuleTokenStream(adaptor,"token USES");
		RewriteRuleSubtreeStream stream_namespaceFileNameList=new RewriteRuleSubtreeStream(adaptor,"rule namespaceFileNameList");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:124:30: ( 'uses' namespaceFileNameList -> ^( 'uses' namespaceFileNameList ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:124:32: 'uses' namespaceFileNameList
			{
			string_literal64=(Token)match(input,USES,FOLLOW_USES_in_usesFileClause1325); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_USES.add(string_literal64);

			pushFollow(FOLLOW_namespaceFileNameList_in_usesFileClause1327);
			namespaceFileNameList65=namespaceFileNameList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespaceFileNameList.add(namespaceFileNameList65.getTree());
			// AST REWRITE
			// elements: namespaceFileNameList, USES
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 124:61: -> ^( 'uses' namespaceFileNameList )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:124:64: ^( 'uses' namespaceFileNameList )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_USES.nextNode(), root_1);
				adaptor.addChild(root_1, stream_namespaceFileNameList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 19, usesFileClause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "usesFileClause"


	public static class namespaceFileNameList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "namespaceFileNameList"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:1: namespaceFileNameList : namespaceFileName ( ',' namespaceFileName )* ';' -> namespaceFileName ( namespaceFileName )* ;
	public final DelphiParser.namespaceFileNameList_return namespaceFileNameList() throws RecognitionException {
		DelphiParser.namespaceFileNameList_return retval = new DelphiParser.namespaceFileNameList_return();
		retval.start = input.LT(1);
		int namespaceFileNameList_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal67=null;
		Token char_literal69=null;
		ParserRuleReturnScope namespaceFileName66 =null;
		ParserRuleReturnScope namespaceFileName68 =null;

		Object char_literal67_tree=null;
		Object char_literal69_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_namespaceFileName=new RewriteRuleSubtreeStream(adaptor,"rule namespaceFileName");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:30: ( namespaceFileName ( ',' namespaceFileName )* ';' -> namespaceFileName ( namespaceFileName )* )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:32: namespaceFileName ( ',' namespaceFileName )* ';'
			{
			pushFollow(FOLLOW_namespaceFileName_in_namespaceFileNameList1379);
			namespaceFileName66=namespaceFileName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespaceFileName.add(namespaceFileName66.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:50: ( ',' namespaceFileName )*
			loop17:
			while (true) {
				int alt17=2;
				int LA17_0 = input.LA(1);
				if ( (LA17_0==COMMA) ) {
					alt17=1;
				}

				switch (alt17) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:51: ',' namespaceFileName
					{
					char_literal67=(Token)match(input,COMMA,FOLLOW_COMMA_in_namespaceFileNameList1382); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(char_literal67);

					pushFollow(FOLLOW_namespaceFileName_in_namespaceFileNameList1384);
					namespaceFileName68=namespaceFileName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_namespaceFileName.add(namespaceFileName68.getTree());
					}
					break;

				default :
					break loop17;
				}
			}

			char_literal69=(Token)match(input,SEMI,FOLLOW_SEMI_in_namespaceFileNameList1388); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal69);

			// AST REWRITE
			// elements: namespaceFileName, namespaceFileName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 126:79: -> namespaceFileName ( namespaceFileName )*
			{
				adaptor.addChild(root_0, stream_namespaceFileName.nextTree());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:100: ( namespaceFileName )*
				while ( stream_namespaceFileName.hasNext() ) {
					adaptor.addChild(root_0, stream_namespaceFileName.nextTree());
				}
				stream_namespaceFileName.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 20, namespaceFileNameList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "namespaceFileNameList"


	public static class namespaceFileName_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "namespaceFileName"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:128:1: namespaceFileName : namespaceName ( 'in' QuotedString )? -> ^( namespaceName ( QuotedString )? ) ;
	public final DelphiParser.namespaceFileName_return namespaceFileName() throws RecognitionException {
		DelphiParser.namespaceFileName_return retval = new DelphiParser.namespaceFileName_return();
		retval.start = input.LT(1);
		int namespaceFileName_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal71=null;
		Token QuotedString72=null;
		ParserRuleReturnScope namespaceName70 =null;

		Object string_literal71_tree=null;
		Object QuotedString72_tree=null;
		RewriteRuleTokenStream stream_IN=new RewriteRuleTokenStream(adaptor,"token IN");
		RewriteRuleTokenStream stream_QuotedString=new RewriteRuleTokenStream(adaptor,"token QuotedString");
		RewriteRuleSubtreeStream stream_namespaceName=new RewriteRuleSubtreeStream(adaptor,"rule namespaceName");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:128:30: ( namespaceName ( 'in' QuotedString )? -> ^( namespaceName ( QuotedString )? ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:128:32: namespaceName ( 'in' QuotedString )?
			{
			pushFollow(FOLLOW_namespaceName_in_namespaceFileName1445);
			namespaceName70=namespaceName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespaceName.add(namespaceName70.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:128:46: ( 'in' QuotedString )?
			int alt18=2;
			int LA18_0 = input.LA(1);
			if ( (LA18_0==IN) ) {
				alt18=1;
			}
			switch (alt18) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:128:47: 'in' QuotedString
					{
					string_literal71=(Token)match(input,IN,FOLLOW_IN_in_namespaceFileName1448); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_IN.add(string_literal71);

					QuotedString72=(Token)match(input,QuotedString,FOLLOW_QuotedString_in_namespaceFileName1450); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_QuotedString.add(QuotedString72);

					}
					break;

			}

			// AST REWRITE
			// elements: QuotedString, namespaceName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 128:67: -> ^( namespaceName ( QuotedString )? )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:128:70: ^( namespaceName ( QuotedString )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_namespaceName.nextNode(), root_1);
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:128:86: ( QuotedString )?
				if ( stream_QuotedString.hasNext() ) {
					adaptor.addChild(root_1, stream_QuotedString.nextNode());
				}
				stream_QuotedString.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 21, namespaceFileName_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "namespaceFileName"


	public static class namespaceNameList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "namespaceNameList"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:130:1: namespaceNameList : namespaceName ( ',' namespaceName )* ';' -> namespaceName ( namespaceName )* ;
	public final DelphiParser.namespaceNameList_return namespaceNameList() throws RecognitionException {
		DelphiParser.namespaceNameList_return retval = new DelphiParser.namespaceNameList_return();
		retval.start = input.LT(1);
		int namespaceNameList_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal74=null;
		Token char_literal76=null;
		ParserRuleReturnScope namespaceName73 =null;
		ParserRuleReturnScope namespaceName75 =null;

		Object char_literal74_tree=null;
		Object char_literal76_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_namespaceName=new RewriteRuleSubtreeStream(adaptor,"rule namespaceName");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:130:30: ( namespaceName ( ',' namespaceName )* ';' -> namespaceName ( namespaceName )* )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:130:32: namespaceName ( ',' namespaceName )* ';'
			{
			pushFollow(FOLLOW_namespaceName_in_namespaceNameList1511);
			namespaceName73=namespaceName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespaceName.add(namespaceName73.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:130:46: ( ',' namespaceName )*
			loop19:
			while (true) {
				int alt19=2;
				int LA19_0 = input.LA(1);
				if ( (LA19_0==COMMA) ) {
					alt19=1;
				}

				switch (alt19) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:130:47: ',' namespaceName
					{
					char_literal74=(Token)match(input,COMMA,FOLLOW_COMMA_in_namespaceNameList1514); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(char_literal74);

					pushFollow(FOLLOW_namespaceName_in_namespaceNameList1516);
					namespaceName75=namespaceName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_namespaceName.add(namespaceName75.getTree());
					}
					break;

				default :
					break loop19;
				}
			}

			char_literal76=(Token)match(input,SEMI,FOLLOW_SEMI_in_namespaceNameList1520); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal76);

			// AST REWRITE
			// elements: namespaceName, namespaceName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 130:71: -> namespaceName ( namespaceName )*
			{
				adaptor.addChild(root_0, stream_namespaceName.nextTree());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:130:88: ( namespaceName )*
				while ( stream_namespaceName.hasNext() ) {
					adaptor.addChild(root_0, stream_namespaceName.nextTree());
				}
				stream_namespaceName.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 22, namespaceNameList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "namespaceNameList"


	public static class block_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "block"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:135:1: block : ( declSection )* ( blockBody )? ;
	public final DelphiParser.block_return block() throws RecognitionException {
		DelphiParser.block_return retval = new DelphiParser.block_return();
		retval.start = input.LT(1);
		int block_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope declSection77 =null;
		ParserRuleReturnScope blockBody78 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:135:30: ( ( declSection )* ( blockBody )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:135:32: ( declSection )* ( blockBody )?
			{
			root_0 = (Object)adaptor.nil();


			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:135:32: ( declSection )*
			loop20:
			while (true) {
				int alt20=2;
				switch ( input.LA(1) ) {
				case LABEL:
					{
					int LA20_2 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case CONST:
				case RESOURCESTRING:
					{
					int LA20_3 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case TYPE:
					{
					int LA20_4 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case THREADVAR:
				case VAR:
					{
					int LA20_5 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case LBRACK:
					{
					int LA20_6 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case CLASS:
					{
					int LA20_7 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case PROCEDURE:
					{
					int LA20_8 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case FUNCTION:
					{
					int LA20_9 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case CONSTRUCTOR:
				case DESTRUCTOR:
					{
					int LA20_10 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case EXPORTS:
					{
					int LA20_11 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				}
				switch (alt20) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:135:33: declSection
					{
					pushFollow(FOLLOW_declSection_in_block1593);
					declSection77=declSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, declSection77.getTree());

					}
					break;

				default :
					break loop20;
				}
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:135:47: ( blockBody )?
			int alt21=2;
			int LA21_0 = input.LA(1);
			if ( (LA21_0==BEGIN) ) {
				int LA21_1 = input.LA(2);
				if ( (synpred24_Delphi()) ) {
					alt21=1;
				}
			}
			else if ( (LA21_0==ASM) ) {
				int LA21_2 = input.LA(2);
				if ( (synpred24_Delphi()) ) {
					alt21=1;
				}
			}
			switch (alt21) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:135:48: blockBody
					{
					pushFollow(FOLLOW_blockBody_in_block1598);
					blockBody78=blockBody();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, blockBody78.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 23, block_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "block"


	public static class blockBody_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "blockBody"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:137:1: blockBody : ( compoundStatement | assemblerStatement );
	public final DelphiParser.blockBody_return blockBody() throws RecognitionException {
		DelphiParser.blockBody_return retval = new DelphiParser.blockBody_return();
		retval.start = input.LT(1);
		int blockBody_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope compoundStatement79 =null;
		ParserRuleReturnScope assemblerStatement80 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:137:30: ( compoundStatement | assemblerStatement )
			int alt22=2;
			int LA22_0 = input.LA(1);
			if ( (LA22_0==BEGIN) ) {
				alt22=1;
			}
			else if ( (LA22_0==ASM) ) {
				alt22=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 22, 0, input);
				throw nvae;
			}

			switch (alt22) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:137:32: compoundStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_compoundStatement_in_blockBody1656);
					compoundStatement79=compoundStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, compoundStatement79.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:138:32: assemblerStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_assemblerStatement_in_blockBody1689);
					assemblerStatement80=assemblerStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, assemblerStatement80.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 24, blockBody_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "blockBody"


	public static class declSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "declSection"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:140:1: declSection : ( labelDeclSection | constSection | typeSection | varSection | methodDecl | procDecl | exportsSection );
	public final DelphiParser.declSection_return declSection() throws RecognitionException {
		DelphiParser.declSection_return retval = new DelphiParser.declSection_return();
		retval.start = input.LT(1);
		int declSection_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope labelDeclSection81 =null;
		ParserRuleReturnScope constSection82 =null;
		ParserRuleReturnScope typeSection83 =null;
		ParserRuleReturnScope varSection84 =null;
		ParserRuleReturnScope methodDecl85 =null;
		ParserRuleReturnScope procDecl86 =null;
		ParserRuleReturnScope exportsSection87 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:140:30: ( labelDeclSection | constSection | typeSection | varSection | methodDecl | procDecl | exportsSection )
			int alt23=7;
			switch ( input.LA(1) ) {
			case LABEL:
				{
				alt23=1;
				}
				break;
			case CONST:
			case RESOURCESTRING:
				{
				alt23=2;
				}
				break;
			case TYPE:
				{
				alt23=3;
				}
				break;
			case THREADVAR:
			case VAR:
				{
				alt23=4;
				}
				break;
			case LBRACK:
				{
				int LA23_5 = input.LA(2);
				if ( (synpred30_Delphi()) ) {
					alt23=5;
				}
				else if ( (synpred31_Delphi()) ) {
					alt23=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 23, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CLASS:
			case CONSTRUCTOR:
			case DESTRUCTOR:
				{
				alt23=5;
				}
				break;
			case PROCEDURE:
				{
				int LA23_7 = input.LA(2);
				if ( (synpred30_Delphi()) ) {
					alt23=5;
				}
				else if ( (synpred31_Delphi()) ) {
					alt23=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 23, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case FUNCTION:
				{
				int LA23_8 = input.LA(2);
				if ( (synpred30_Delphi()) ) {
					alt23=5;
				}
				else if ( (synpred31_Delphi()) ) {
					alt23=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 23, 8, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EXPORTS:
				{
				alt23=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 23, 0, input);
				throw nvae;
			}
			switch (alt23) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:140:32: labelDeclSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_labelDeclSection_in_declSection1743);
					labelDeclSection81=labelDeclSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, labelDeclSection81.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:141:32: constSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_constSection_in_declSection1776);
					constSection82=constSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constSection82.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:142:32: typeSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_typeSection_in_declSection1809);
					typeSection83=typeSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeSection83.getTree());

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:143:32: varSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_varSection_in_declSection1842);
					varSection84=varSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, varSection84.getTree());

					}
					break;
				case 5 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:144:32: methodDecl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_methodDecl_in_declSection1875);
					methodDecl85=methodDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, methodDecl85.getTree());

					}
					break;
				case 6 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:145:32: procDecl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_procDecl_in_declSection1908);
					procDecl86=procDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, procDecl86.getTree());

					}
					break;
				case 7 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:146:32: exportsSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_exportsSection_in_declSection1941);
					exportsSection87=exportsSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exportsSection87.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 25, declSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "declSection"


	public static class interfaceDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "interfaceDecl"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:148:1: interfaceDecl : ( constSection | typeSection | varSection | exportedProcHeading | exportsSection | procDecl | methodDecl );
	public final DelphiParser.interfaceDecl_return interfaceDecl() throws RecognitionException {
		DelphiParser.interfaceDecl_return retval = new DelphiParser.interfaceDecl_return();
		retval.start = input.LT(1);
		int interfaceDecl_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope constSection88 =null;
		ParserRuleReturnScope typeSection89 =null;
		ParserRuleReturnScope varSection90 =null;
		ParserRuleReturnScope exportedProcHeading91 =null;
		ParserRuleReturnScope exportsSection92 =null;
		ParserRuleReturnScope procDecl93 =null;
		ParserRuleReturnScope methodDecl94 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:148:30: ( constSection | typeSection | varSection | exportedProcHeading | exportsSection | procDecl | methodDecl )
			int alt24=7;
			switch ( input.LA(1) ) {
			case CONST:
			case RESOURCESTRING:
				{
				alt24=1;
				}
				break;
			case TYPE:
				{
				alt24=2;
				}
				break;
			case THREADVAR:
			case VAR:
				{
				alt24=3;
				}
				break;
			case PROCEDURE:
				{
				int LA24_4 = input.LA(2);
				if ( (synpred35_Delphi()) ) {
					alt24=4;
				}
				else if ( (synpred37_Delphi()) ) {
					alt24=6;
				}
				else if ( (true) ) {
					alt24=7;
				}

				}
				break;
			case FUNCTION:
				{
				int LA24_5 = input.LA(2);
				if ( (synpred35_Delphi()) ) {
					alt24=4;
				}
				else if ( (synpred37_Delphi()) ) {
					alt24=6;
				}
				else if ( (true) ) {
					alt24=7;
				}

				}
				break;
			case EXPORTS:
				{
				alt24=5;
				}
				break;
			case LBRACK:
				{
				int LA24_7 = input.LA(2);
				if ( (synpred37_Delphi()) ) {
					alt24=6;
				}
				else if ( (true) ) {
					alt24=7;
				}

				}
				break;
			case CLASS:
			case CONSTRUCTOR:
			case DESTRUCTOR:
				{
				alt24=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 24, 0, input);
				throw nvae;
			}
			switch (alt24) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:148:32: constSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_constSection_in_interfaceDecl1993);
					constSection88=constSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constSection88.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:149:32: typeSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_typeSection_in_interfaceDecl2026);
					typeSection89=typeSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeSection89.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:32: varSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_varSection_in_interfaceDecl2059);
					varSection90=varSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, varSection90.getTree());

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:151:32: exportedProcHeading
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_exportedProcHeading_in_interfaceDecl2092);
					exportedProcHeading91=exportedProcHeading();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exportedProcHeading91.getTree());

					}
					break;
				case 5 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:152:32: exportsSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_exportsSection_in_interfaceDecl2125);
					exportsSection92=exportsSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exportsSection92.getTree());

					}
					break;
				case 6 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:153:32: procDecl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_procDecl_in_interfaceDecl2158);
					procDecl93=procDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, procDecl93.getTree());

					}
					break;
				case 7 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:154:32: methodDecl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_methodDecl_in_interfaceDecl2191);
					methodDecl94=methodDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, methodDecl94.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 26, interfaceDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interfaceDecl"


	public static class labelDeclSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "labelDeclSection"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:156:1: labelDeclSection : 'label' label ( ',' label )* ';' ;
	public final DelphiParser.labelDeclSection_return labelDeclSection() throws RecognitionException {
		DelphiParser.labelDeclSection_return retval = new DelphiParser.labelDeclSection_return();
		retval.start = input.LT(1);
		int labelDeclSection_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal95=null;
		Token char_literal97=null;
		Token char_literal99=null;
		ParserRuleReturnScope label96 =null;
		ParserRuleReturnScope label98 =null;

		Object string_literal95_tree=null;
		Object char_literal97_tree=null;
		Object char_literal99_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:156:30: ( 'label' label ( ',' label )* ';' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:156:32: 'label' label ( ',' label )* ';'
			{
			root_0 = (Object)adaptor.nil();


			string_literal95=(Token)match(input,LABEL,FOLLOW_LABEL_in_labelDeclSection2240); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal95_tree = (Object)adaptor.create(string_literal95);
			adaptor.addChild(root_0, string_literal95_tree);
			}

			pushFollow(FOLLOW_label_in_labelDeclSection2242);
			label96=label();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, label96.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:156:46: ( ',' label )*
			loop25:
			while (true) {
				int alt25=2;
				int LA25_0 = input.LA(1);
				if ( (LA25_0==COMMA) ) {
					alt25=1;
				}

				switch (alt25) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:156:47: ',' label
					{
					char_literal97=(Token)match(input,COMMA,FOLLOW_COMMA_in_labelDeclSection2245); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal97_tree = (Object)adaptor.create(char_literal97);
					adaptor.addChild(root_0, char_literal97_tree);
					}

					pushFollow(FOLLOW_label_in_labelDeclSection2247);
					label98=label();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, label98.getTree());

					}
					break;

				default :
					break loop25;
				}
			}

			char_literal99=(Token)match(input,SEMI,FOLLOW_SEMI_in_labelDeclSection2251); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal99_tree = (Object)adaptor.create(char_literal99);
			adaptor.addChild(root_0, char_literal99_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 27, labelDeclSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "labelDeclSection"


	public static class constSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "constSection"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:158:1: constSection : constKey ( constDeclaration )* -> ^( constKey ( constDeclaration )* ) ;
	public final DelphiParser.constSection_return constSection() throws RecognitionException {
		DelphiParser.constSection_return retval = new DelphiParser.constSection_return();
		retval.start = input.LT(1);
		int constSection_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope constKey100 =null;
		ParserRuleReturnScope constDeclaration101 =null;

		RewriteRuleSubtreeStream stream_constDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule constDeclaration");
		RewriteRuleSubtreeStream stream_constKey=new RewriteRuleSubtreeStream(adaptor,"rule constKey");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:158:30: ( constKey ( constDeclaration )* -> ^( constKey ( constDeclaration )* ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:158:32: constKey ( constDeclaration )*
			{
			pushFollow(FOLLOW_constKey_in_constSection2304);
			constKey100=constKey();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_constKey.add(constKey100.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:158:41: ( constDeclaration )*
			loop26:
			while (true) {
				int alt26=2;
				alt26 = dfa26.predict(input);
				switch (alt26) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:158:42: constDeclaration
					{
					pushFollow(FOLLOW_constDeclaration_in_constSection2307);
					constDeclaration101=constDeclaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_constDeclaration.add(constDeclaration101.getTree());
					}
					break;

				default :
					break loop26;
				}
			}

			// AST REWRITE
			// elements: constKey, constDeclaration
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 158:61: -> ^( constKey ( constDeclaration )* )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:158:64: ^( constKey ( constDeclaration )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_constKey.nextNode(), root_1);
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:158:75: ( constDeclaration )*
				while ( stream_constDeclaration.hasNext() ) {
					adaptor.addChild(root_1, stream_constDeclaration.nextTree());
				}
				stream_constDeclaration.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 28, constSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "constSection"


	public static class constKey_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "constKey"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:160:1: constKey : ( 'const' | 'resourcestring' );
	public final DelphiParser.constKey_return constKey() throws RecognitionException {
		DelphiParser.constKey_return retval = new DelphiParser.constKey_return();
		retval.start = input.LT(1);
		int constKey_StartIndex = input.index();

		Object root_0 = null;

		Token set102=null;

		Object set102_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:160:30: ( 'const' | 'resourcestring' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set102=input.LT(1);
			if ( input.LA(1)==CONST||input.LA(1)==RESOURCESTRING ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set102));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 29, constKey_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "constKey"


	public static class constDeclaration_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "constDeclaration"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:1: constDeclaration : ( customAttribute )? ident ( ':' typeDecl )? '=' constExpression ( hintingDirective )* ';' -> ident ( typeDecl )? '=' constExpression ;
	public final DelphiParser.constDeclaration_return constDeclaration() throws RecognitionException {
		DelphiParser.constDeclaration_return retval = new DelphiParser.constDeclaration_return();
		retval.start = input.LT(1);
		int constDeclaration_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal105=null;
		Token char_literal107=null;
		Token char_literal110=null;
		ParserRuleReturnScope customAttribute103 =null;
		ParserRuleReturnScope ident104 =null;
		ParserRuleReturnScope typeDecl106 =null;
		ParserRuleReturnScope constExpression108 =null;
		ParserRuleReturnScope hintingDirective109 =null;

		Object char_literal105_tree=null;
		Object char_literal107_tree=null;
		Object char_literal110_tree=null;
		RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_constExpression=new RewriteRuleSubtreeStream(adaptor,"rule constExpression");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:30: ( ( customAttribute )? ident ( ':' typeDecl )? '=' constExpression ( hintingDirective )* ';' -> ident ( typeDecl )? '=' constExpression )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:32: ( customAttribute )? ident ( ':' typeDecl )? '=' constExpression ( hintingDirective )* ';'
			{
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:32: ( customAttribute )?
			int alt27=2;
			switch ( input.LA(1) ) {
				case LBRACK:
					{
					alt27=1;
					}
					break;
				case TkIdentifier:
					{
					int LA27_2 = input.LA(2);
					if ( (synpred41_Delphi()) ) {
						alt27=1;
					}
					}
					break;
				case 198:
					{
					int LA27_3 = input.LA(2);
					if ( (synpred41_Delphi()) ) {
						alt27=1;
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DQ:
				case DW:
				case EXIT:
				case EXPORT:
				case FALSE:
				case FINAL:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STATIC:
				case STORED:
				case STRICT:
				case STRING:
				case TRUE:
				case UNSAFE:
				case VARARGS:
				case VARIANT:
				case VIRTUAL:
				case WRITE:
				case WRITEONLY:
					{
					int LA27_4 = input.LA(2);
					if ( (synpred41_Delphi()) ) {
						alt27=1;
					}
					}
					break;
			}
			switch (alt27) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:33: customAttribute
					{
					pushFollow(FOLLOW_customAttribute_in_constDeclaration2462);
					customAttribute103=customAttribute();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute103.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_ident_in_constDeclaration2466);
			ident104=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_ident.add(ident104.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:57: ( ':' typeDecl )?
			int alt28=2;
			int LA28_0 = input.LA(1);
			if ( (LA28_0==COLON) ) {
				alt28=1;
			}
			switch (alt28) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:58: ':' typeDecl
					{
					char_literal105=(Token)match(input,COLON,FOLLOW_COLON_in_constDeclaration2469); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(char_literal105);

					pushFollow(FOLLOW_typeDecl_in_constDeclaration2471);
					typeDecl106=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl106.getTree());
					}
					break;

			}

			char_literal107=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_constDeclaration2475); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_EQUAL.add(char_literal107);

			pushFollow(FOLLOW_constExpression_in_constDeclaration2477);
			constExpression108=constExpression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_constExpression.add(constExpression108.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:93: ( hintingDirective )*
			loop29:
			while (true) {
				int alt29=2;
				int LA29_0 = input.LA(1);
				if ( (LA29_0==DEPRECATED||LA29_0==EXPERIMENTAL||LA29_0==LIBRARY||LA29_0==PLATFORM) ) {
					alt29=1;
				}

				switch (alt29) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:94: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_constDeclaration2480);
					hintingDirective109=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective109.getTree());
					}
					break;

				default :
					break loop29;
				}
			}

			char_literal110=(Token)match(input,SEMI,FOLLOW_SEMI_in_constDeclaration2484); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal110);

			// AST REWRITE
			// elements: EQUAL, typeDecl, ident, constExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 163:117: -> ident ( typeDecl )? '=' constExpression
			{
				adaptor.addChild(root_0, stream_ident.nextTree());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:126: ( typeDecl )?
				if ( stream_typeDecl.hasNext() ) {
					adaptor.addChild(root_0, stream_typeDecl.nextTree());
				}
				stream_typeDecl.reset();

				adaptor.addChild(root_0, stream_EQUAL.nextNode());
				adaptor.addChild(root_0, stream_constExpression.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 30, constDeclaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "constDeclaration"


	public static class typeSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "typeSection"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:165:1: typeSection : 'type' typeDeclaration ( typeDeclaration )* -> ^( 'type' typeDeclaration ( typeDeclaration )* ) ;
	public final DelphiParser.typeSection_return typeSection() throws RecognitionException {
		DelphiParser.typeSection_return retval = new DelphiParser.typeSection_return();
		retval.start = input.LT(1);
		int typeSection_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal111=null;
		ParserRuleReturnScope typeDeclaration112 =null;
		ParserRuleReturnScope typeDeclaration113 =null;

		Object string_literal111_tree=null;
		RewriteRuleTokenStream stream_TYPE=new RewriteRuleTokenStream(adaptor,"token TYPE");
		RewriteRuleSubtreeStream stream_typeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule typeDeclaration");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:165:30: ( 'type' typeDeclaration ( typeDeclaration )* -> ^( 'type' typeDeclaration ( typeDeclaration )* ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:165:32: 'type' typeDeclaration ( typeDeclaration )*
			{
			string_literal111=(Token)match(input,TYPE,FOLLOW_TYPE_in_typeSection2551); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_TYPE.add(string_literal111);

			pushFollow(FOLLOW_typeDeclaration_in_typeSection2553);
			typeDeclaration112=typeDeclaration();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeDeclaration.add(typeDeclaration112.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:165:55: ( typeDeclaration )*
			loop30:
			while (true) {
				int alt30=2;
				alt30 = dfa30.predict(input);
				switch (alt30) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:165:56: typeDeclaration
					{
					pushFollow(FOLLOW_typeDeclaration_in_typeSection2556);
					typeDeclaration113=typeDeclaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_typeDeclaration.add(typeDeclaration113.getTree());
					}
					break;

				default :
					break loop30;
				}
			}

			// AST REWRITE
			// elements: typeDeclaration, TYPE, typeDeclaration
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 165:74: -> ^( 'type' typeDeclaration ( typeDeclaration )* )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:165:77: ^( 'type' typeDeclaration ( typeDeclaration )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_TYPE.nextNode(), root_1);
				adaptor.addChild(root_1, stream_typeDeclaration.nextTree());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:165:102: ( typeDeclaration )*
				while ( stream_typeDeclaration.hasNext() ) {
					adaptor.addChild(root_1, stream_typeDeclaration.nextTree());
				}
				stream_typeDeclaration.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 31, typeSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "typeSection"


	public static class typeDeclaration_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "typeDeclaration"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:1: typeDeclaration : ( customAttribute )? genericTypeIdent '=' typeDecl ( hintingDirective )* ';' -> ^( TkNewType ( customAttribute )? ^( genericTypeIdent typeDecl ( hintingDirective )* ) ) ;
	public final DelphiParser.typeDeclaration_return typeDeclaration() throws RecognitionException {
		DelphiParser.typeDeclaration_return retval = new DelphiParser.typeDeclaration_return();
		retval.start = input.LT(1);
		int typeDeclaration_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal116=null;
		Token char_literal119=null;
		ParserRuleReturnScope customAttribute114 =null;
		ParserRuleReturnScope genericTypeIdent115 =null;
		ParserRuleReturnScope typeDecl117 =null;
		ParserRuleReturnScope hintingDirective118 =null;

		Object char_literal116_tree=null;
		Object char_literal119_tree=null;
		RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_genericTypeIdent=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeIdent");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:30: ( ( customAttribute )? genericTypeIdent '=' typeDecl ( hintingDirective )* ';' -> ^( TkNewType ( customAttribute )? ^( genericTypeIdent typeDecl ( hintingDirective )* ) ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:32: ( customAttribute )? genericTypeIdent '=' typeDecl ( hintingDirective )* ';'
			{
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:32: ( customAttribute )?
			int alt31=2;
			switch ( input.LA(1) ) {
				case LBRACK:
					{
					alt31=1;
					}
					break;
				case TkIdentifier:
					{
					int LA31_2 = input.LA(2);
					if ( (synpred45_Delphi()) ) {
						alt31=1;
					}
					}
					break;
				case 198:
					{
					int LA31_3 = input.LA(2);
					if ( (synpred45_Delphi()) ) {
						alt31=1;
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DQ:
				case DW:
				case EXIT:
				case EXPORT:
				case FALSE:
				case FINAL:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STATIC:
				case STORED:
				case STRICT:
				case STRING:
				case TRUE:
				case UNSAFE:
				case VARARGS:
				case VARIANT:
				case VIRTUAL:
				case WRITE:
				case WRITEONLY:
					{
					int LA31_4 = input.LA(2);
					if ( (synpred45_Delphi()) ) {
						alt31=1;
					}
					}
					break;
			}
			switch (alt31) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:33: customAttribute
					{
					pushFollow(FOLLOW_customAttribute_in_typeDeclaration2622);
					customAttribute114=customAttribute();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute114.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_genericTypeIdent_in_typeDeclaration2626);
			genericTypeIdent115=genericTypeIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_genericTypeIdent.add(genericTypeIdent115.getTree());
			char_literal116=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_typeDeclaration2628); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_EQUAL.add(char_literal116);

			pushFollow(FOLLOW_typeDecl_in_typeDeclaration2630);
			typeDecl117=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl117.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:81: ( hintingDirective )*
			loop32:
			while (true) {
				int alt32=2;
				int LA32_0 = input.LA(1);
				if ( (LA32_0==DEPRECATED||LA32_0==EXPERIMENTAL||LA32_0==LIBRARY||LA32_0==PLATFORM) ) {
					alt32=1;
				}

				switch (alt32) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:82: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_typeDeclaration2633);
					hintingDirective118=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective118.getTree());
					}
					break;

				default :
					break loop32;
				}
			}

			char_literal119=(Token)match(input,SEMI,FOLLOW_SEMI_in_typeDeclaration2637); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal119);

			// AST REWRITE
			// elements: hintingDirective, typeDecl, genericTypeIdent, customAttribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 167:105: -> ^( TkNewType ( customAttribute )? ^( genericTypeIdent typeDecl ( hintingDirective )* ) )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:108: ^( TkNewType ( customAttribute )? ^( genericTypeIdent typeDecl ( hintingDirective )* ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkNewType, "TkNewType"), root_1);
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:120: ( customAttribute )?
				if ( stream_customAttribute.hasNext() ) {
					adaptor.addChild(root_1, stream_customAttribute.nextTree());
				}
				stream_customAttribute.reset();

				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:139: ^( genericTypeIdent typeDecl ( hintingDirective )* )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot(stream_genericTypeIdent.nextNode(), root_2);
				adaptor.addChild(root_2, stream_typeDecl.nextTree());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:167: ( hintingDirective )*
				while ( stream_hintingDirective.hasNext() ) {
					adaptor.addChild(root_2, stream_hintingDirective.nextTree());
				}
				stream_hintingDirective.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 32, typeDeclaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "typeDeclaration"


	public static class varSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "varSection"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:1: varSection : varKey varDeclaration ( varDeclaration )* -> ^( varKey varDeclaration ( varDeclaration )* ) ;
	public final DelphiParser.varSection_return varSection() throws RecognitionException {
		DelphiParser.varSection_return retval = new DelphiParser.varSection_return();
		retval.start = input.LT(1);
		int varSection_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope varKey120 =null;
		ParserRuleReturnScope varDeclaration121 =null;
		ParserRuleReturnScope varDeclaration122 =null;

		RewriteRuleSubtreeStream stream_varDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule varDeclaration");
		RewriteRuleSubtreeStream stream_varKey=new RewriteRuleSubtreeStream(adaptor,"rule varKey");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:30: ( varKey varDeclaration ( varDeclaration )* -> ^( varKey varDeclaration ( varDeclaration )* ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:32: varKey varDeclaration ( varDeclaration )*
			{
			pushFollow(FOLLOW_varKey_in_varSection2714);
			varKey120=varKey();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_varKey.add(varKey120.getTree());
			pushFollow(FOLLOW_varDeclaration_in_varSection2716);
			varDeclaration121=varDeclaration();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_varDeclaration.add(varDeclaration121.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:54: ( varDeclaration )*
			loop33:
			while (true) {
				int alt33=2;
				alt33 = dfa33.predict(input);
				switch (alt33) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:55: varDeclaration
					{
					pushFollow(FOLLOW_varDeclaration_in_varSection2719);
					varDeclaration122=varDeclaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_varDeclaration.add(varDeclaration122.getTree());
					}
					break;

				default :
					break loop33;
				}
			}

			// AST REWRITE
			// elements: varKey, varDeclaration, varDeclaration
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 169:72: -> ^( varKey varDeclaration ( varDeclaration )* )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:75: ^( varKey varDeclaration ( varDeclaration )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_varKey.nextNode(), root_1);
				adaptor.addChild(root_1, stream_varDeclaration.nextTree());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:99: ( varDeclaration )*
				while ( stream_varDeclaration.hasNext() ) {
					adaptor.addChild(root_1, stream_varDeclaration.nextTree());
				}
				stream_varDeclaration.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 33, varSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "varSection"


	public static class varKey_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "varKey"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:171:1: varKey : ( 'var' | 'threadvar' );
	public final DelphiParser.varKey_return varKey() throws RecognitionException {
		DelphiParser.varKey_return retval = new DelphiParser.varKey_return();
		retval.start = input.LT(1);
		int varKey_StartIndex = input.index();

		Object root_0 = null;

		Token set123=null;

		Object set123_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:171:30: ( 'var' | 'threadvar' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set123=input.LT(1);
			if ( input.LA(1)==THREADVAR||input.LA(1)==VAR ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set123));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 34, varKey_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "varKey"


	public static class varDeclaration_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "varDeclaration"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:1: varDeclaration : ( customAttribute )? identListFlat ':' typeDecl ( varValueSpec )? ( hintingDirective )* ';' -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType typeDecl ) ;
	public final DelphiParser.varDeclaration_return varDeclaration() throws RecognitionException {
		DelphiParser.varDeclaration_return retval = new DelphiParser.varDeclaration_return();
		retval.start = input.LT(1);
		int varDeclaration_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal126=null;
		Token char_literal130=null;
		ParserRuleReturnScope customAttribute124 =null;
		ParserRuleReturnScope identListFlat125 =null;
		ParserRuleReturnScope typeDecl127 =null;
		ParserRuleReturnScope varValueSpec128 =null;
		ParserRuleReturnScope hintingDirective129 =null;

		Object char_literal126_tree=null;
		Object char_literal130_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_identListFlat=new RewriteRuleSubtreeStream(adaptor,"rule identListFlat");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_varValueSpec=new RewriteRuleSubtreeStream(adaptor,"rule varValueSpec");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:30: ( ( customAttribute )? identListFlat ':' typeDecl ( varValueSpec )? ( hintingDirective )* ';' -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType typeDecl ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:32: ( customAttribute )? identListFlat ':' typeDecl ( varValueSpec )? ( hintingDirective )* ';'
			{
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:32: ( customAttribute )?
			int alt34=2;
			switch ( input.LA(1) ) {
				case LBRACK:
					{
					alt34=1;
					}
					break;
				case TkIdentifier:
					{
					int LA34_2 = input.LA(2);
					if ( (synpred49_Delphi()) ) {
						alt34=1;
					}
					}
					break;
				case 198:
					{
					int LA34_3 = input.LA(2);
					if ( (synpred49_Delphi()) ) {
						alt34=1;
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DQ:
				case DW:
				case EXIT:
				case EXPORT:
				case FALSE:
				case FINAL:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STATIC:
				case STORED:
				case STRICT:
				case STRING:
				case TRUE:
				case UNSAFE:
				case VARARGS:
				case VARIANT:
				case VIRTUAL:
				case WRITE:
				case WRITEONLY:
					{
					int LA34_4 = input.LA(2);
					if ( (synpred49_Delphi()) ) {
						alt34=1;
					}
					}
					break;
			}
			switch (alt34) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:33: customAttribute
					{
					pushFollow(FOLLOW_customAttribute_in_varDeclaration2879);
					customAttribute124=customAttribute();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute124.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_identListFlat_in_varDeclaration2883);
			identListFlat125=identListFlat();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identListFlat.add(identListFlat125.getTree());
			char_literal126=(Token)match(input,COLON,FOLLOW_COLON_in_varDeclaration2885); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_COLON.add(char_literal126);

			pushFollow(FOLLOW_typeDecl_in_varDeclaration2887);
			typeDecl127=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl127.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:78: ( varValueSpec )?
			int alt35=2;
			int LA35_0 = input.LA(1);
			if ( (LA35_0==ABSOLUTE||LA35_0==EQUAL) ) {
				alt35=1;
			}
			switch (alt35) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:79: varValueSpec
					{
					pushFollow(FOLLOW_varValueSpec_in_varDeclaration2890);
					varValueSpec128=varValueSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_varValueSpec.add(varValueSpec128.getTree());
					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:94: ( hintingDirective )*
			loop36:
			while (true) {
				int alt36=2;
				int LA36_0 = input.LA(1);
				if ( (LA36_0==DEPRECATED||LA36_0==EXPERIMENTAL||LA36_0==LIBRARY||LA36_0==PLATFORM) ) {
					alt36=1;
				}

				switch (alt36) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:95: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_varDeclaration2895);
					hintingDirective129=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective129.getTree());
					}
					break;

				default :
					break loop36;
				}
			}

			char_literal130=(Token)match(input,SEMI,FOLLOW_SEMI_in_varDeclaration2899); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal130);

			// AST REWRITE
			// elements: identListFlat, customAttribute, typeDecl
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 175:118: -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType typeDecl )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:121: ( customAttribute )?
				if ( stream_customAttribute.hasNext() ) {
					adaptor.addChild(root_0, stream_customAttribute.nextTree());
				}
				stream_customAttribute.reset();

				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:140: ^( TkVariableIdents identListFlat )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableIdents, "TkVariableIdents"), root_1);
				adaptor.addChild(root_1, stream_identListFlat.nextTree());
				adaptor.addChild(root_0, root_1);
				}

				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:174: ^( TkVariableType typeDecl )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableType, "TkVariableType"), root_1);
				adaptor.addChild(root_1, stream_typeDecl.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 35, varDeclaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "varDeclaration"


	public static class varValueSpec_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "varValueSpec"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:177:1: varValueSpec : ( 'absolute' ident | 'absolute' constExpression | '=' constExpression );
	public final DelphiParser.varValueSpec_return varValueSpec() throws RecognitionException {
		DelphiParser.varValueSpec_return retval = new DelphiParser.varValueSpec_return();
		retval.start = input.LT(1);
		int varValueSpec_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal131=null;
		Token string_literal133=null;
		Token char_literal135=null;
		ParserRuleReturnScope ident132 =null;
		ParserRuleReturnScope constExpression134 =null;
		ParserRuleReturnScope constExpression136 =null;

		Object string_literal131_tree=null;
		Object string_literal133_tree=null;
		Object char_literal135_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:177:30: ( 'absolute' ident | 'absolute' constExpression | '=' constExpression )
			int alt37=3;
			int LA37_0 = input.LA(1);
			if ( (LA37_0==ABSOLUTE) ) {
				switch ( input.LA(2) ) {
				case TkIdentifier:
					{
					int LA37_3 = input.LA(3);
					if ( (synpred52_Delphi()) ) {
						alt37=1;
					}
					else if ( (synpred53_Delphi()) ) {
						alt37=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 37, 3, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case 198:
					{
					int LA37_4 = input.LA(3);
					if ( (LA37_4==TkIdentifier) ) {
						int LA37_10 = input.LA(4);
						if ( (synpred52_Delphi()) ) {
							alt37=1;
						}
						else if ( (synpred53_Delphi()) ) {
							alt37=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 37, 10, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}
					else if ( ((LA37_4 >= ABSOLUTE && LA37_4 <= ASSEMBLY)||LA37_4==AT||LA37_4==AUTOMATED||(LA37_4 >= BEGIN && LA37_4 <= CLASS)||(LA37_4 >= CONST && LA37_4 <= CONTINUE)||(LA37_4 >= DEFAULT && LA37_4 <= DO)||(LA37_4 >= DOWNTO && LA37_4 <= DYNAMIC)||(LA37_4 >= ELSE && LA37_4 <= END)||(LA37_4 >= EXCEPT && LA37_4 <= FUNCTION)||LA37_4==GOTO||LA37_4==HELPER||(LA37_4 >= IF && LA37_4 <= LABEL)||(LA37_4 >= LIBRARY && LA37_4 <= LOCAL)||LA37_4==MESSAGE||(LA37_4 >= MOD && LA37_4 <= NOT)||(LA37_4 >= OBJECT && LA37_4 <= PLATFORM)||LA37_4==POINTER||(LA37_4 >= PRIVATE && LA37_4 <= PUBLISHED)||LA37_4==RAISE||(LA37_4 >= READ && LA37_4 <= RESOURCESTRING)||(LA37_4 >= SAFECALL && LA37_4 <= SEALED)||(LA37_4 >= SET && LA37_4 <= SHR)||(LA37_4 >= STATIC && LA37_4 <= TYPE)||(LA37_4 >= UNIT && LA37_4 <= USES)||(LA37_4 >= VAR && LA37_4 <= WRITEONLY)||LA37_4==XOR) ) {
						int LA37_11 = input.LA(4);
						if ( (synpred52_Delphi()) ) {
							alt37=1;
						}
						else if ( (synpred53_Delphi()) ) {
							alt37=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 37, 11, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 37, 4, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case TRUE:
					{
					int LA37_5 = input.LA(3);
					if ( (synpred52_Delphi()) ) {
						alt37=1;
					}
					else if ( (synpred53_Delphi()) ) {
						alt37=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 37, 5, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case EOF:
				case AND:
				case AS:
				case AT2:
				case ControlChar:
				case ControlString:
				case DEPRECATED:
				case DIV:
				case DOT:
				case EQUAL:
				case EXPERIMENTAL:
				case FUNCTION:
				case GE:
				case GT:
				case IN:
				case INHERITED:
				case IS:
				case LBRACK:
				case LE:
				case LIBRARY:
				case LPAREN:
				case LT:
				case MINUS:
				case MOD:
				case NIL:
				case NOT:
				case NOT_EQUAL:
				case OR:
				case PLATFORM:
				case PLUS:
				case POINTER2:
				case PROCEDURE:
				case QuotedString:
				case SEMI:
				case SHL:
				case SHR:
				case SLASH:
				case STAR:
				case TkHexNum:
				case TkIntNum:
				case TkRealNum:
				case XOR:
				case 199:
				case 200:
					{
					alt37=2;
					}
					break;
				case FALSE:
					{
					int LA37_7 = input.LA(3);
					if ( (synpred52_Delphi()) ) {
						alt37=1;
					}
					else if ( (synpred53_Delphi()) ) {
						alt37=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 37, 7, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DQ:
				case DW:
				case EXIT:
				case EXPORT:
				case FINAL:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STATIC:
				case STORED:
				case STRICT:
				case STRING:
				case UNSAFE:
				case VARARGS:
				case VARIANT:
				case VIRTUAL:
				case WRITE:
				case WRITEONLY:
					{
					int LA37_8 = input.LA(3);
					if ( (synpred52_Delphi()) ) {
						alt37=1;
					}
					else if ( (synpred53_Delphi()) ) {
						alt37=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 37, 8, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 37, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
			}
			else if ( (LA37_0==EQUAL) ) {
				alt37=3;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 37, 0, input);
				throw nvae;
			}

			switch (alt37) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:177:32: 'absolute' ident
					{
					root_0 = (Object)adaptor.nil();


					string_literal131=(Token)match(input,ABSOLUTE,FOLLOW_ABSOLUTE_in_varValueSpec2971); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal131_tree = (Object)adaptor.create(string_literal131);
					adaptor.addChild(root_0, string_literal131_tree);
					}

					pushFollow(FOLLOW_ident_in_varValueSpec2973);
					ident132=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident132.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:178:32: 'absolute' constExpression
					{
					root_0 = (Object)adaptor.nil();


					string_literal133=(Token)match(input,ABSOLUTE,FOLLOW_ABSOLUTE_in_varValueSpec3006); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal133_tree = (Object)adaptor.create(string_literal133);
					adaptor.addChild(root_0, string_literal133_tree);
					}

					pushFollow(FOLLOW_constExpression_in_varValueSpec3008);
					constExpression134=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression134.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:179:32: '=' constExpression
					{
					root_0 = (Object)adaptor.nil();


					char_literal135=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_varValueSpec3041); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal135_tree = (Object)adaptor.create(char_literal135);
					adaptor.addChild(root_0, char_literal135_tree);
					}

					pushFollow(FOLLOW_constExpression_in_varValueSpec3043);
					constExpression136=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression136.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 36, varValueSpec_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "varValueSpec"


	public static class exportsSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "exportsSection"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:181:1: exportsSection : 'exports' ident exportItem ( ',' ident exportItem )* ';' ;
	public final DelphiParser.exportsSection_return exportsSection() throws RecognitionException {
		DelphiParser.exportsSection_return retval = new DelphiParser.exportsSection_return();
		retval.start = input.LT(1);
		int exportsSection_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal137=null;
		Token char_literal140=null;
		Token char_literal143=null;
		ParserRuleReturnScope ident138 =null;
		ParserRuleReturnScope exportItem139 =null;
		ParserRuleReturnScope ident141 =null;
		ParserRuleReturnScope exportItem142 =null;

		Object string_literal137_tree=null;
		Object char_literal140_tree=null;
		Object char_literal143_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:181:30: ( 'exports' ident exportItem ( ',' ident exportItem )* ';' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:181:32: 'exports' ident exportItem ( ',' ident exportItem )* ';'
			{
			root_0 = (Object)adaptor.nil();


			string_literal137=(Token)match(input,EXPORTS,FOLLOW_EXPORTS_in_exportsSection3094); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal137_tree = (Object)adaptor.create(string_literal137);
			adaptor.addChild(root_0, string_literal137_tree);
			}

			pushFollow(FOLLOW_ident_in_exportsSection3096);
			ident138=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident138.getTree());

			pushFollow(FOLLOW_exportItem_in_exportsSection3098);
			exportItem139=exportItem();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, exportItem139.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:181:59: ( ',' ident exportItem )*
			loop38:
			while (true) {
				int alt38=2;
				int LA38_0 = input.LA(1);
				if ( (LA38_0==COMMA) ) {
					alt38=1;
				}

				switch (alt38) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:181:60: ',' ident exportItem
					{
					char_literal140=(Token)match(input,COMMA,FOLLOW_COMMA_in_exportsSection3101); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal140_tree = (Object)adaptor.create(char_literal140);
					adaptor.addChild(root_0, char_literal140_tree);
					}

					pushFollow(FOLLOW_ident_in_exportsSection3103);
					ident141=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident141.getTree());

					pushFollow(FOLLOW_exportItem_in_exportsSection3105);
					exportItem142=exportItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exportItem142.getTree());

					}
					break;

				default :
					break loop38;
				}
			}

			char_literal143=(Token)match(input,SEMI,FOLLOW_SEMI_in_exportsSection3109); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal143_tree = (Object)adaptor.create(char_literal143);
			adaptor.addChild(root_0, char_literal143_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 37, exportsSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "exportsSection"


	public static class exportItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "exportItem"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:183:1: exportItem : ( '(' ( formalParameterList )? ')' )? ( INDEX expression )? ( NAME expression )? ( 'resident' )? ;
	public final DelphiParser.exportItem_return exportItem() throws RecognitionException {
		DelphiParser.exportItem_return retval = new DelphiParser.exportItem_return();
		retval.start = input.LT(1);
		int exportItem_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal144=null;
		Token char_literal146=null;
		Token INDEX147=null;
		Token NAME149=null;
		Token string_literal151=null;
		ParserRuleReturnScope formalParameterList145 =null;
		ParserRuleReturnScope expression148 =null;
		ParserRuleReturnScope expression150 =null;

		Object char_literal144_tree=null;
		Object char_literal146_tree=null;
		Object INDEX147_tree=null;
		Object NAME149_tree=null;
		Object string_literal151_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:183:30: ( ( '(' ( formalParameterList )? ')' )? ( INDEX expression )? ( NAME expression )? ( 'resident' )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:183:32: ( '(' ( formalParameterList )? ')' )? ( INDEX expression )? ( NAME expression )? ( 'resident' )?
			{
			root_0 = (Object)adaptor.nil();


			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:183:32: ( '(' ( formalParameterList )? ')' )?
			int alt40=2;
			int LA40_0 = input.LA(1);
			if ( (LA40_0==LPAREN) ) {
				alt40=1;
			}
			switch (alt40) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:183:33: '(' ( formalParameterList )? ')'
					{
					char_literal144=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_exportItem3165); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal144_tree = (Object)adaptor.create(char_literal144);
					adaptor.addChild(root_0, char_literal144_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:183:37: ( formalParameterList )?
					int alt39=2;
					int LA39_0 = input.LA(1);
					if ( (LA39_0==ADD||LA39_0==ANSISTRING||LA39_0==AT||LA39_0==BREAK||LA39_0==CONST||(LA39_0 >= CONTAINS && LA39_0 <= CONTINUE)||LA39_0==DEFAULT||(LA39_0 >= DQ && LA39_0 <= DW)||LA39_0==EXIT||LA39_0==EXPORT||LA39_0==FALSE||LA39_0==FINAL||LA39_0==IMPLEMENTS||LA39_0==INDEX||LA39_0==LBRACK||LA39_0==LOCAL||LA39_0==MESSAGE||LA39_0==NAME||LA39_0==OBJECT||LA39_0==OPERATOR||LA39_0==OUT||LA39_0==POINTER||(LA39_0 >= READ && LA39_0 <= READONLY)||(LA39_0 >= REFERENCE && LA39_0 <= REGISTER)||LA39_0==REMOVE||LA39_0==STATIC||(LA39_0 >= STORED && LA39_0 <= STRING)||LA39_0==TRUE||LA39_0==TkIdentifier||LA39_0==UNSAFE||(LA39_0 >= VAR && LA39_0 <= VIRTUAL)||(LA39_0 >= WRITE && LA39_0 <= WRITEONLY)||LA39_0==198) ) {
						alt39=1;
					}
					switch (alt39) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:183:38: formalParameterList
							{
							pushFollow(FOLLOW_formalParameterList_in_exportItem3168);
							formalParameterList145=formalParameterList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterList145.getTree());

							}
							break;

					}

					char_literal146=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_exportItem3172); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal146_tree = (Object)adaptor.create(char_literal146);
					adaptor.addChild(root_0, char_literal146_tree);
					}

					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:183:66: ( INDEX expression )?
			int alt41=2;
			int LA41_0 = input.LA(1);
			if ( (LA41_0==INDEX) ) {
				alt41=1;
			}
			switch (alt41) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:183:67: INDEX expression
					{
					INDEX147=(Token)match(input,INDEX,FOLLOW_INDEX_in_exportItem3177); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INDEX147_tree = (Object)adaptor.create(INDEX147);
					adaptor.addChild(root_0, INDEX147_tree);
					}

					pushFollow(FOLLOW_expression_in_exportItem3179);
					expression148=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression148.getTree());

					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:183:86: ( NAME expression )?
			int alt42=2;
			int LA42_0 = input.LA(1);
			if ( (LA42_0==NAME) ) {
				alt42=1;
			}
			switch (alt42) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:183:87: NAME expression
					{
					NAME149=(Token)match(input,NAME,FOLLOW_NAME_in_exportItem3184); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NAME149_tree = (Object)adaptor.create(NAME149);
					adaptor.addChild(root_0, NAME149_tree);
					}

					pushFollow(FOLLOW_expression_in_exportItem3186);
					expression150=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression150.getTree());

					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:183:105: ( 'resident' )?
			int alt43=2;
			int LA43_0 = input.LA(1);
			if ( (LA43_0==RESIDENT) ) {
				alt43=1;
			}
			switch (alt43) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:183:106: 'resident'
					{
					string_literal151=(Token)match(input,RESIDENT,FOLLOW_RESIDENT_in_exportItem3191); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal151_tree = (Object)adaptor.create(string_literal151);
					adaptor.addChild(root_0, string_literal151_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 38, exportItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "exportItem"


	public static class typeDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "typeDecl"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:188:1: typeDecl : ( strucType | pointerType | stringType | procedureType | variantType | ( 'type' )? typeId ( genericPostfix )? ( '.' typeDecl )* ( paranthesePostfix )? | simpleType );
	public final DelphiParser.typeDecl_return typeDecl() throws RecognitionException {
		DelphiParser.typeDecl_return retval = new DelphiParser.typeDecl_return();
		retval.start = input.LT(1);
		int typeDecl_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal157=null;
		Token char_literal160=null;
		ParserRuleReturnScope strucType152 =null;
		ParserRuleReturnScope pointerType153 =null;
		ParserRuleReturnScope stringType154 =null;
		ParserRuleReturnScope procedureType155 =null;
		ParserRuleReturnScope variantType156 =null;
		ParserRuleReturnScope typeId158 =null;
		ParserRuleReturnScope genericPostfix159 =null;
		ParserRuleReturnScope typeDecl161 =null;
		ParserRuleReturnScope paranthesePostfix162 =null;
		ParserRuleReturnScope simpleType163 =null;

		Object string_literal157_tree=null;
		Object char_literal160_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:188:30: ( strucType | pointerType | stringType | procedureType | variantType | ( 'type' )? typeId ( genericPostfix )? ( '.' typeDecl )* ( paranthesePostfix )? | simpleType )
			int alt48=7;
			alt48 = dfa48.predict(input);
			switch (alt48) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:188:32: strucType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_strucType_in_typeDecl3253);
					strucType152=strucType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, strucType152.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:189:32: pointerType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_pointerType_in_typeDecl3286);
					pointerType153=pointerType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pointerType153.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:190:32: stringType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_stringType_in_typeDecl3319);
					stringType154=stringType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, stringType154.getTree());

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:191:32: procedureType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_procedureType_in_typeDecl3352);
					procedureType155=procedureType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureType155.getTree());

					}
					break;
				case 5 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:192:32: variantType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_variantType_in_typeDecl3385);
					variantType156=variantType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, variantType156.getTree());

					}
					break;
				case 6 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:193:32: ( 'type' )? typeId ( genericPostfix )? ( '.' typeDecl )* ( paranthesePostfix )?
					{
					root_0 = (Object)adaptor.nil();


					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:193:32: ( 'type' )?
					int alt44=2;
					int LA44_0 = input.LA(1);
					if ( (LA44_0==TYPE) ) {
						alt44=1;
					}
					switch (alt44) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:193:33: 'type'
							{
							string_literal157=(Token)match(input,TYPE,FOLLOW_TYPE_in_typeDecl3419); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal157_tree = (Object)adaptor.create(string_literal157);
							adaptor.addChild(root_0, string_literal157_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_typeId_in_typeDecl3423);
					typeId158=typeId();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeId158.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:193:49: ( genericPostfix )?
					int alt45=2;
					int LA45_0 = input.LA(1);
					if ( (LA45_0==LT) ) {
						int LA45_1 = input.LA(2);
						if ( (synpred66_Delphi()) ) {
							alt45=1;
						}
					}
					switch (alt45) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:193:50: genericPostfix
							{
							pushFollow(FOLLOW_genericPostfix_in_typeDecl3426);
							genericPostfix159=genericPostfix();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, genericPostfix159.getTree());

							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:193:67: ( '.' typeDecl )*
					loop46:
					while (true) {
						int alt46=2;
						int LA46_0 = input.LA(1);
						if ( (LA46_0==DOT) ) {
							int LA46_2 = input.LA(2);
							if ( (synpred67_Delphi()) ) {
								alt46=1;
							}

						}

						switch (alt46) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:193:68: '.' typeDecl
							{
							char_literal160=(Token)match(input,DOT,FOLLOW_DOT_in_typeDecl3431); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal160_tree = (Object)adaptor.create(char_literal160);
							adaptor.addChild(root_0, char_literal160_tree);
							}

							pushFollow(FOLLOW_typeDecl_in_typeDecl3433);
							typeDecl161=typeDecl();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl161.getTree());

							}
							break;

						default :
							break loop46;
						}
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:193:83: ( paranthesePostfix )?
					int alt47=2;
					int LA47_0 = input.LA(1);
					if ( (LA47_0==LPAREN) ) {
						int LA47_1 = input.LA(2);
						if ( (synpred68_Delphi()) ) {
							alt47=1;
						}
					}
					switch (alt47) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:193:84: paranthesePostfix
							{
							pushFollow(FOLLOW_paranthesePostfix_in_typeDecl3438);
							paranthesePostfix162=paranthesePostfix();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, paranthesePostfix162.getTree());

							}
							break;

					}

					}
					break;
				case 7 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:194:32: simpleType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_simpleType_in_typeDecl3473);
					simpleType163=simpleType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleType163.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 39, typeDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "typeDecl"


	public static class strucType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "strucType"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:1: strucType : ( 'packed' )? strucTypePart -> strucTypePart ;
	public final DelphiParser.strucType_return strucType() throws RecognitionException {
		DelphiParser.strucType_return retval = new DelphiParser.strucType_return();
		retval.start = input.LT(1);
		int strucType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal164=null;
		ParserRuleReturnScope strucTypePart165 =null;

		Object string_literal164_tree=null;
		RewriteRuleTokenStream stream_PACKED=new RewriteRuleTokenStream(adaptor,"token PACKED");
		RewriteRuleSubtreeStream stream_strucTypePart=new RewriteRuleSubtreeStream(adaptor,"rule strucTypePart");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:30: ( ( 'packed' )? strucTypePart -> strucTypePart )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:32: ( 'packed' )? strucTypePart
			{
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:32: ( 'packed' )?
			int alt49=2;
			int LA49_0 = input.LA(1);
			if ( (LA49_0==PACKED) ) {
				alt49=1;
			}
			switch (alt49) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:33: 'packed'
					{
					string_literal164=(Token)match(input,PACKED,FOLLOW_PACKED_in_strucType3559); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_PACKED.add(string_literal164);

					}
					break;

			}

			pushFollow(FOLLOW_strucTypePart_in_strucType3563);
			strucTypePart165=strucTypePart();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_strucTypePart.add(strucTypePart165.getTree());
			// AST REWRITE
			// elements: strucTypePart
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 196:58: -> strucTypePart
			{
				adaptor.addChild(root_0, stream_strucTypePart.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 40, strucType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "strucType"


	public static class strucTypePart_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "strucTypePart"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:198:1: strucTypePart : ( arrayType | setType | fileType | classDecl );
	public final DelphiParser.strucTypePart_return strucTypePart() throws RecognitionException {
		DelphiParser.strucTypePart_return retval = new DelphiParser.strucTypePart_return();
		retval.start = input.LT(1);
		int strucTypePart_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope arrayType166 =null;
		ParserRuleReturnScope setType167 =null;
		ParserRuleReturnScope fileType168 =null;
		ParserRuleReturnScope classDecl169 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:198:30: ( arrayType | setType | fileType | classDecl )
			int alt50=4;
			switch ( input.LA(1) ) {
			case ARRAY:
				{
				alt50=1;
				}
				break;
			case SET:
				{
				alt50=2;
				}
				break;
			case FILE:
				{
				alt50=3;
				}
				break;
			case CLASS:
			case DISPINTERFACE:
			case INTERFACE:
			case OBJECT:
			case RECORD:
				{
				alt50=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 50, 0, input);
				throw nvae;
			}
			switch (alt50) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:198:32: arrayType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_arrayType_in_strucTypePart3619);
					arrayType166=arrayType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayType166.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:199:32: setType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_setType_in_strucTypePart3652);
					setType167=setType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, setType167.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:200:32: fileType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_fileType_in_strucTypePart3685);
					fileType168=fileType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, fileType168.getTree());

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:201:32: classDecl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classDecl_in_strucTypePart3718);
					classDecl169=classDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classDecl169.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 41, strucTypePart_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "strucTypePart"


	public static class arrayType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "arrayType"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:204:1: arrayType : 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? 'of' arraySubType -> ^( arraySubType 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? ) ;
	public final DelphiParser.arrayType_return arrayType() throws RecognitionException {
		DelphiParser.arrayType_return retval = new DelphiParser.arrayType_return();
		retval.start = input.LT(1);
		int arrayType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal170=null;
		Token char_literal171=null;
		Token char_literal173=null;
		Token char_literal175=null;
		Token string_literal176=null;
		ParserRuleReturnScope arrayIndex172 =null;
		ParserRuleReturnScope arrayIndex174 =null;
		ParserRuleReturnScope arraySubType177 =null;

		Object string_literal170_tree=null;
		Object char_literal171_tree=null;
		Object char_literal173_tree=null;
		Object char_literal175_tree=null;
		Object string_literal176_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
		RewriteRuleTokenStream stream_ARRAY=new RewriteRuleTokenStream(adaptor,"token ARRAY");
		RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
		RewriteRuleTokenStream stream_OF=new RewriteRuleTokenStream(adaptor,"token OF");
		RewriteRuleSubtreeStream stream_arraySubType=new RewriteRuleSubtreeStream(adaptor,"rule arraySubType");
		RewriteRuleSubtreeStream stream_arrayIndex=new RewriteRuleSubtreeStream(adaptor,"rule arrayIndex");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:204:30: ( 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? 'of' arraySubType -> ^( arraySubType 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:204:33: 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? 'of' arraySubType
			{
			string_literal170=(Token)match(input,ARRAY,FOLLOW_ARRAY_in_arrayType3776); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_ARRAY.add(string_literal170);

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:204:41: ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )?
			int alt54=2;
			int LA54_0 = input.LA(1);
			if ( (LA54_0==LBRACK) ) {
				alt54=1;
			}
			switch (alt54) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:204:42: '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']'
					{
					char_literal171=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_arrayType3779); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LBRACK.add(char_literal171);

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:204:46: ( arrayIndex )?
					int alt51=2;
					int LA51_0 = input.LA(1);
					if ( ((LA51_0 >= ADD && LA51_0 <= ANSISTRING)||LA51_0==AS||(LA51_0 >= AT && LA51_0 <= AT2)||LA51_0==BREAK||(LA51_0 >= CONTAINS && LA51_0 <= DEFAULT)||LA51_0==DIV||(LA51_0 >= DOT && LA51_0 <= DOTDOT)||(LA51_0 >= DQ && LA51_0 <= DW)||LA51_0==EQUAL||LA51_0==EXIT||LA51_0==EXPORT||LA51_0==FALSE||LA51_0==FINAL||(LA51_0 >= FUNCTION && LA51_0 <= GE)||LA51_0==GT||(LA51_0 >= IMPLEMENTS && LA51_0 <= INHERITED)||LA51_0==IS||LA51_0==LBRACK||LA51_0==LE||(LA51_0 >= LOCAL && LA51_0 <= NAME)||LA51_0==NIL||(LA51_0 >= NOT && LA51_0 <= OBJECT)||(LA51_0 >= OPERATOR && LA51_0 <= OUT)||(LA51_0 >= PLUS && LA51_0 <= POINTER2)||LA51_0==PROCEDURE||LA51_0==QuotedString||(LA51_0 >= READ && LA51_0 <= READONLY)||(LA51_0 >= REFERENCE && LA51_0 <= REGISTER)||LA51_0==REMOVE||(LA51_0 >= SHL && LA51_0 <= STATIC)||(LA51_0 >= STORED && LA51_0 <= STRING)||LA51_0==TRUE||(LA51_0 >= TkHexNum && LA51_0 <= TkIntNum)||LA51_0==TkRealNum||LA51_0==UNSAFE||(LA51_0 >= VARARGS && LA51_0 <= VIRTUAL)||(LA51_0 >= WRITE && LA51_0 <= WRITEONLY)||(LA51_0 >= XOR && LA51_0 <= 200)) ) {
						alt51=1;
					}
					switch (alt51) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:204:47: arrayIndex
							{
							pushFollow(FOLLOW_arrayIndex_in_arrayType3782);
							arrayIndex172=arrayIndex();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_arrayIndex.add(arrayIndex172.getTree());
							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:204:60: ( ',' ( arrayIndex )? )*
					loop53:
					while (true) {
						int alt53=2;
						int LA53_0 = input.LA(1);
						if ( (LA53_0==COMMA) ) {
							alt53=1;
						}

						switch (alt53) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:204:61: ',' ( arrayIndex )?
							{
							char_literal173=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayType3787); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(char_literal173);

							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:204:65: ( arrayIndex )?
							int alt52=2;
							int LA52_0 = input.LA(1);
							if ( ((LA52_0 >= ADD && LA52_0 <= ANSISTRING)||LA52_0==AS||(LA52_0 >= AT && LA52_0 <= AT2)||LA52_0==BREAK||(LA52_0 >= CONTAINS && LA52_0 <= DEFAULT)||LA52_0==DIV||(LA52_0 >= DOT && LA52_0 <= DOTDOT)||(LA52_0 >= DQ && LA52_0 <= DW)||LA52_0==EQUAL||LA52_0==EXIT||LA52_0==EXPORT||LA52_0==FALSE||LA52_0==FINAL||(LA52_0 >= FUNCTION && LA52_0 <= GE)||LA52_0==GT||(LA52_0 >= IMPLEMENTS && LA52_0 <= INHERITED)||LA52_0==IS||LA52_0==LBRACK||LA52_0==LE||(LA52_0 >= LOCAL && LA52_0 <= NAME)||LA52_0==NIL||(LA52_0 >= NOT && LA52_0 <= OBJECT)||(LA52_0 >= OPERATOR && LA52_0 <= OUT)||(LA52_0 >= PLUS && LA52_0 <= POINTER2)||LA52_0==PROCEDURE||LA52_0==QuotedString||(LA52_0 >= READ && LA52_0 <= READONLY)||(LA52_0 >= REFERENCE && LA52_0 <= REGISTER)||LA52_0==REMOVE||(LA52_0 >= SHL && LA52_0 <= STATIC)||(LA52_0 >= STORED && LA52_0 <= STRING)||LA52_0==TRUE||(LA52_0 >= TkHexNum && LA52_0 <= TkIntNum)||LA52_0==TkRealNum||LA52_0==UNSAFE||(LA52_0 >= VARARGS && LA52_0 <= VIRTUAL)||(LA52_0 >= WRITE && LA52_0 <= WRITEONLY)||(LA52_0 >= XOR && LA52_0 <= 200)) ) {
								alt52=1;
							}
							switch (alt52) {
								case 1 :
									// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:204:66: arrayIndex
									{
									pushFollow(FOLLOW_arrayIndex_in_arrayType3790);
									arrayIndex174=arrayIndex();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_arrayIndex.add(arrayIndex174.getTree());
									}
									break;

							}

							}
							break;

						default :
							break loop53;
						}
					}

					char_literal175=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_arrayType3796); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RBRACK.add(char_literal175);

					}
					break;

			}

			string_literal176=(Token)match(input,OF,FOLLOW_OF_in_arrayType3800); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_OF.add(string_literal176);

			pushFollow(FOLLOW_arraySubType_in_arrayType3802);
			arraySubType177=arraySubType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_arraySubType.add(arraySubType177.getTree());
			// AST REWRITE
			// elements: ARRAY, arrayIndex, COMMA, RBRACK, LBRACK, arrayIndex, arraySubType
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 205:30: -> ^( arraySubType 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:205:33: ^( arraySubType 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_arraySubType.nextNode(), root_1);
				adaptor.addChild(root_1, stream_ARRAY.nextNode());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:205:56: ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )?
				if ( stream_arrayIndex.hasNext()||stream_COMMA.hasNext()||stream_RBRACK.hasNext()||stream_LBRACK.hasNext() ) {
					adaptor.addChild(root_1, stream_LBRACK.nextNode());
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:205:61: ( arrayIndex )?
					if ( stream_arrayIndex.hasNext() ) {
						adaptor.addChild(root_1, stream_arrayIndex.nextTree());
					}
					stream_arrayIndex.reset();

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:205:75: ( ',' ( arrayIndex )? )*
					while ( stream_COMMA.hasNext() ) {
						adaptor.addChild(root_1, stream_COMMA.nextNode());
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:205:80: ( arrayIndex )?
						if ( stream_arrayIndex.hasNext() ) {
							adaptor.addChild(root_1, stream_arrayIndex.nextTree());
						}
						stream_arrayIndex.reset();

					}
					stream_COMMA.reset();

					adaptor.addChild(root_1, stream_RBRACK.nextNode());
				}
				stream_arrayIndex.reset();
				stream_COMMA.reset();
				stream_RBRACK.reset();
				stream_LBRACK.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 42, arrayType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "arrayType"


	public static class arrayIndex_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "arrayIndex"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:208:1: arrayIndex : ( typeId | expression '..' expression );
	public final DelphiParser.arrayIndex_return arrayIndex() throws RecognitionException {
		DelphiParser.arrayIndex_return retval = new DelphiParser.arrayIndex_return();
		retval.start = input.LT(1);
		int arrayIndex_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal180=null;
		ParserRuleReturnScope typeId178 =null;
		ParserRuleReturnScope expression179 =null;
		ParserRuleReturnScope expression181 =null;

		Object string_literal180_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:208:30: ( typeId | expression '..' expression )
			int alt55=2;
			alt55 = dfa55.predict(input);
			switch (alt55) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:208:32: typeId
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_typeId_in_arrayIndex3928);
					typeId178=typeId();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeId178.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:209:32: expression '..' expression
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_expression_in_arrayIndex3961);
					expression179=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression179.getTree());

					string_literal180=(Token)match(input,DOTDOT,FOLLOW_DOTDOT_in_arrayIndex3963); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal180_tree = (Object)adaptor.create(string_literal180);
					adaptor.addChild(root_0, string_literal180_tree);
					}

					pushFollow(FOLLOW_expression_in_arrayIndex3965);
					expression181=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression181.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 43, arrayIndex_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "arrayIndex"


	public static class arraySubType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "arraySubType"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:212:1: arraySubType : ( 'const' | typeDecl );
	public final DelphiParser.arraySubType_return arraySubType() throws RecognitionException {
		DelphiParser.arraySubType_return retval = new DelphiParser.arraySubType_return();
		retval.start = input.LT(1);
		int arraySubType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal182=null;
		ParserRuleReturnScope typeDecl183 =null;

		Object string_literal182_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:212:30: ( 'const' | typeDecl )
			int alt56=2;
			int LA56_0 = input.LA(1);
			if ( (LA56_0==CONST) ) {
				int LA56_1 = input.LA(2);
				if ( (synpred79_Delphi()) ) {
					alt56=1;
				}
				else if ( (true) ) {
					alt56=2;
				}

			}
			else if ( (LA56_0==EOF||LA56_0==ABSOLUTE||(LA56_0 >= ADD && LA56_0 <= ASSEMBLER)||(LA56_0 >= AT && LA56_0 <= AUTOMATED)||(LA56_0 >= BEGIN && LA56_0 <= COMMA)||(LA56_0 >= CONSTRUCTOR && LA56_0 <= DW)||(LA56_0 >= ELSE && LA56_0 <= FINALLY)||(LA56_0 >= FUNCTION && LA56_0 <= GE)||LA56_0==GT||(LA56_0 >= IMPLEMENTATION && LA56_0 <= LBRACK)||(LA56_0 >= LE && LA56_0 <= OVERLOAD)||(LA56_0 >= PACKED && LA56_0 <= PROCEDURE)||(LA56_0 >= PROPERTY && LA56_0 <= QuotedString)||LA56_0==RBRACK||(LA56_0 >= READ && LA56_0 <= REGISTER)||LA56_0==REMOVE||(LA56_0 >= RESIDENT && LA56_0 <= SAFECALL)||(LA56_0 >= SEMI && LA56_0 <= TRUE)||LA56_0==TYPE||(LA56_0 >= TkHexNum && LA56_0 <= TkIntNum)||LA56_0==TkRealNum||(LA56_0 >= UNSAFE && LA56_0 <= UNTIL)||(LA56_0 >= VAR && LA56_0 <= VIRTUAL)||(LA56_0 >= WRITE && LA56_0 <= WRITEONLY)||(LA56_0 >= XOR && LA56_0 <= 200)) ) {
				alt56=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 56, 0, input);
				throw nvae;
			}

			switch (alt56) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:212:32: 'const'
					{
					root_0 = (Object)adaptor.nil();


					string_literal182=(Token)match(input,CONST,FOLLOW_CONST_in_arraySubType4019); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal182_tree = (Object)adaptor.create(string_literal182);
					adaptor.addChild(root_0, string_literal182_tree);
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:213:32: typeDecl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_typeDecl_in_arraySubType4052);
					typeDecl183=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl183.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 44, arraySubType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "arraySubType"


	public static class setType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "setType"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:215:1: setType : 'set' 'of' typeDecl -> 'set' typeDecl ;
	public final DelphiParser.setType_return setType() throws RecognitionException {
		DelphiParser.setType_return retval = new DelphiParser.setType_return();
		retval.start = input.LT(1);
		int setType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal184=null;
		Token string_literal185=null;
		ParserRuleReturnScope typeDecl186 =null;

		Object string_literal184_tree=null;
		Object string_literal185_tree=null;
		RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
		RewriteRuleTokenStream stream_OF=new RewriteRuleTokenStream(adaptor,"token OF");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:215:30: ( 'set' 'of' typeDecl -> 'set' typeDecl )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:215:32: 'set' 'of' typeDecl
			{
			string_literal184=(Token)match(input,SET,FOLLOW_SET_in_setType4110); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SET.add(string_literal184);

			string_literal185=(Token)match(input,OF,FOLLOW_OF_in_setType4112); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_OF.add(string_literal185);

			pushFollow(FOLLOW_typeDecl_in_setType4114);
			typeDecl186=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl186.getTree());
			// AST REWRITE
			// elements: typeDecl, SET
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 215:52: -> 'set' typeDecl
			{
				adaptor.addChild(root_0, stream_SET.nextNode());
				adaptor.addChild(root_0, stream_typeDecl.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 45, setType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "setType"


	public static class fileType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "fileType"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:218:1: fileType : 'file' ( 'of' typeDecl )? ;
	public final DelphiParser.fileType_return fileType() throws RecognitionException {
		DelphiParser.fileType_return retval = new DelphiParser.fileType_return();
		retval.start = input.LT(1);
		int fileType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal187=null;
		Token string_literal188=null;
		ParserRuleReturnScope typeDecl189 =null;

		Object string_literal187_tree=null;
		Object string_literal188_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:218:30: ( 'file' ( 'of' typeDecl )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:218:32: 'file' ( 'of' typeDecl )?
			{
			root_0 = (Object)adaptor.nil();


			string_literal187=(Token)match(input,FILE,FOLLOW_FILE_in_fileType4188); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal187_tree = (Object)adaptor.create(string_literal187);
			adaptor.addChild(root_0, string_literal187_tree);
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:218:39: ( 'of' typeDecl )?
			int alt57=2;
			int LA57_0 = input.LA(1);
			if ( (LA57_0==OF) ) {
				int LA57_1 = input.LA(2);
				if ( (synpred80_Delphi()) ) {
					alt57=1;
				}
			}
			switch (alt57) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:218:40: 'of' typeDecl
					{
					string_literal188=(Token)match(input,OF,FOLLOW_OF_in_fileType4191); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal188_tree = (Object)adaptor.create(string_literal188);
					adaptor.addChild(root_0, string_literal188_tree);
					}

					pushFollow(FOLLOW_typeDecl_in_fileType4193);
					typeDecl189=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl189.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 46, fileType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "fileType"


	public static class pointerType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "pointerType"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:220:1: pointerType : ( '^' typeDecl | 'pointer' );
	public final DelphiParser.pointerType_return pointerType() throws RecognitionException {
		DelphiParser.pointerType_return retval = new DelphiParser.pointerType_return();
		retval.start = input.LT(1);
		int pointerType_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal190=null;
		Token string_literal192=null;
		ParserRuleReturnScope typeDecl191 =null;

		Object char_literal190_tree=null;
		Object string_literal192_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:220:30: ( '^' typeDecl | 'pointer' )
			int alt58=2;
			int LA58_0 = input.LA(1);
			if ( (LA58_0==POINTER2) ) {
				alt58=1;
			}
			else if ( (LA58_0==POINTER) ) {
				alt58=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 58, 0, input);
				throw nvae;
			}

			switch (alt58) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:220:32: '^' typeDecl
					{
					root_0 = (Object)adaptor.nil();


					char_literal190=(Token)match(input,POINTER2,FOLLOW_POINTER2_in_pointerType4249); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal190_tree = (Object)adaptor.create(char_literal190);
					adaptor.addChild(root_0, char_literal190_tree);
					}

					pushFollow(FOLLOW_typeDecl_in_pointerType4251);
					typeDecl191=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl191.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:221:32: 'pointer'
					{
					root_0 = (Object)adaptor.nil();


					string_literal192=(Token)match(input,POINTER,FOLLOW_POINTER_in_pointerType4284); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal192_tree = (Object)adaptor.create(string_literal192);
					adaptor.addChild(root_0, string_literal192_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 47, pointerType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "pointerType"


	public static class stringType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "stringType"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:223:1: stringType : ( 'string' ( '[' expression ']' )? -> 'string' | ( 'type' )? ANSISTRING ( codePageNumber )? );
	public final DelphiParser.stringType_return stringType() throws RecognitionException {
		DelphiParser.stringType_return retval = new DelphiParser.stringType_return();
		retval.start = input.LT(1);
		int stringType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal193=null;
		Token char_literal194=null;
		Token char_literal196=null;
		Token string_literal197=null;
		Token ANSISTRING198=null;
		ParserRuleReturnScope expression195 =null;
		ParserRuleReturnScope codePageNumber199 =null;

		Object string_literal193_tree=null;
		Object char_literal194_tree=null;
		Object char_literal196_tree=null;
		Object string_literal197_tree=null;
		Object ANSISTRING198_tree=null;
		RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
		RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
		RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:223:30: ( 'string' ( '[' expression ']' )? -> 'string' | ( 'type' )? ANSISTRING ( codePageNumber )? )
			int alt62=2;
			int LA62_0 = input.LA(1);
			if ( (LA62_0==STRING) ) {
				alt62=1;
			}
			else if ( (LA62_0==ANSISTRING||LA62_0==TYPE) ) {
				alt62=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 62, 0, input);
				throw nvae;
			}

			switch (alt62) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:223:32: 'string' ( '[' expression ']' )?
					{
					string_literal193=(Token)match(input,STRING,FOLLOW_STRING_in_stringType4339); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_STRING.add(string_literal193);

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:223:41: ( '[' expression ']' )?
					int alt59=2;
					alt59 = dfa59.predict(input);
					switch (alt59) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:223:42: '[' expression ']'
							{
							char_literal194=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_stringType4342); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LBRACK.add(char_literal194);

							pushFollow(FOLLOW_expression_in_stringType4344);
							expression195=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_expression.add(expression195.getTree());
							char_literal196=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_stringType4346); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_RBRACK.add(char_literal196);

							}
							break;

					}

					// AST REWRITE
					// elements: STRING
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 223:63: -> 'string'
					{
						adaptor.addChild(root_0, stream_STRING.nextNode());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:224:32: ( 'type' )? ANSISTRING ( codePageNumber )?
					{
					root_0 = (Object)adaptor.nil();


					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:224:32: ( 'type' )?
					int alt60=2;
					int LA60_0 = input.LA(1);
					if ( (LA60_0==TYPE) ) {
						alt60=1;
					}
					switch (alt60) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:224:33: 'type'
							{
							string_literal197=(Token)match(input,TYPE,FOLLOW_TYPE_in_stringType4386); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal197_tree = (Object)adaptor.create(string_literal197);
							adaptor.addChild(root_0, string_literal197_tree);
							}

							}
							break;

					}

					ANSISTRING198=(Token)match(input,ANSISTRING,FOLLOW_ANSISTRING_in_stringType4390); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ANSISTRING198_tree = (Object)adaptor.create(ANSISTRING198);
					adaptor.addChild(root_0, ANSISTRING198_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:224:53: ( codePageNumber )?
					int alt61=2;
					int LA61_0 = input.LA(1);
					if ( (LA61_0==LPAREN) ) {
						int LA61_1 = input.LA(2);
						if ( (LA61_1==TkHexNum||LA61_1==TkIntNum) ) {
							int LA61_3 = input.LA(3);
							if ( (LA61_3==RPAREN) ) {
								int LA61_4 = input.LA(4);
								if ( (synpred85_Delphi()) ) {
									alt61=1;
								}
							}
						}
					}
					switch (alt61) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:224:54: codePageNumber
							{
							pushFollow(FOLLOW_codePageNumber_in_stringType4393);
							codePageNumber199=codePageNumber();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, codePageNumber199.getTree());

							}
							break;

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 48, stringType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "stringType"


	public static class codePageNumber_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "codePageNumber"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:1: codePageNumber : '(' intNum ')' ;
	public final DelphiParser.codePageNumber_return codePageNumber() throws RecognitionException {
		DelphiParser.codePageNumber_return retval = new DelphiParser.codePageNumber_return();
		retval.start = input.LT(1);
		int codePageNumber_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal200=null;
		Token char_literal202=null;
		ParserRuleReturnScope intNum201 =null;

		Object char_literal200_tree=null;
		Object char_literal202_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:30: ( '(' intNum ')' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:226:32: '(' intNum ')'
			{
			root_0 = (Object)adaptor.nil();


			char_literal200=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_codePageNumber4446); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal200_tree = (Object)adaptor.create(char_literal200);
			adaptor.addChild(root_0, char_literal200_tree);
			}

			pushFollow(FOLLOW_intNum_in_codePageNumber4448);
			intNum201=intNum();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, intNum201.getTree());

			char_literal202=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_codePageNumber4450); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal202_tree = (Object)adaptor.create(char_literal202);
			adaptor.addChild(root_0, char_literal202_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 49, codePageNumber_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "codePageNumber"


	public static class procedureType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "procedureType"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:228:1: procedureType : ( methodType | simpleProcedureType | procedureReference );
	public final DelphiParser.procedureType_return procedureType() throws RecognitionException {
		DelphiParser.procedureType_return retval = new DelphiParser.procedureType_return();
		retval.start = input.LT(1);
		int procedureType_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope methodType203 =null;
		ParserRuleReturnScope simpleProcedureType204 =null;
		ParserRuleReturnScope procedureReference205 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:228:30: ( methodType | simpleProcedureType | procedureReference )
			int alt63=3;
			switch ( input.LA(1) ) {
			case FUNCTION:
				{
				int LA63_1 = input.LA(2);
				if ( (synpred86_Delphi()) ) {
					alt63=1;
				}
				else if ( (synpred87_Delphi()) ) {
					alt63=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 63, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PROCEDURE:
				{
				int LA63_2 = input.LA(2);
				if ( (synpred86_Delphi()) ) {
					alt63=1;
				}
				else if ( (synpred87_Delphi()) ) {
					alt63=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 63, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case REFERENCE:
				{
				alt63=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 63, 0, input);
				throw nvae;
			}
			switch (alt63) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:228:32: methodType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_methodType_in_procedureType4502);
					methodType203=methodType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, methodType203.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:229:32: simpleProcedureType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_simpleProcedureType_in_procedureType4535);
					simpleProcedureType204=simpleProcedureType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleProcedureType204.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:230:32: procedureReference
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_procedureReference_in_procedureType4568);
					procedureReference205=procedureReference();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureReference205.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 50, procedureType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "procedureType"


	public static class methodType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodType"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:232:1: methodType : procedureTypeHeading 'of' 'object' ;
	public final DelphiParser.methodType_return methodType() throws RecognitionException {
		DelphiParser.methodType_return retval = new DelphiParser.methodType_return();
		retval.start = input.LT(1);
		int methodType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal207=null;
		Token string_literal208=null;
		ParserRuleReturnScope procedureTypeHeading206 =null;

		Object string_literal207_tree=null;
		Object string_literal208_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:232:30: ( procedureTypeHeading 'of' 'object' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:232:32: procedureTypeHeading 'of' 'object'
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_procedureTypeHeading_in_methodType4623);
			procedureTypeHeading206=procedureTypeHeading();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureTypeHeading206.getTree());

			string_literal207=(Token)match(input,OF,FOLLOW_OF_in_methodType4625); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal207_tree = (Object)adaptor.create(string_literal207);
			adaptor.addChild(root_0, string_literal207_tree);
			}

			string_literal208=(Token)match(input,OBJECT,FOLLOW_OBJECT_in_methodType4627); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal208_tree = (Object)adaptor.create(string_literal208);
			adaptor.addChild(root_0, string_literal208_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 51, methodType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodType"


	public static class simpleProcedureType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "simpleProcedureType"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:234:1: simpleProcedureType : procedureTypeHeading ( ( ';' )? callConventionNoSemi )? ;
	public final DelphiParser.simpleProcedureType_return simpleProcedureType() throws RecognitionException {
		DelphiParser.simpleProcedureType_return retval = new DelphiParser.simpleProcedureType_return();
		retval.start = input.LT(1);
		int simpleProcedureType_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal210=null;
		ParserRuleReturnScope procedureTypeHeading209 =null;
		ParserRuleReturnScope callConventionNoSemi211 =null;

		Object char_literal210_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:234:30: ( procedureTypeHeading ( ( ';' )? callConventionNoSemi )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:234:32: procedureTypeHeading ( ( ';' )? callConventionNoSemi )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_procedureTypeHeading_in_simpleProcedureType4673);
			procedureTypeHeading209=procedureTypeHeading();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureTypeHeading209.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:234:53: ( ( ';' )? callConventionNoSemi )?
			int alt65=2;
			switch ( input.LA(1) ) {
				case SEMI:
					{
					int LA65_1 = input.LA(2);
					if ( (synpred89_Delphi()) ) {
						alt65=1;
					}
					}
					break;
				case REGISTER:
					{
					int LA65_2 = input.LA(2);
					if ( (synpred89_Delphi()) ) {
						alt65=1;
					}
					}
					break;
				case CDECL:
					{
					int LA65_4 = input.LA(2);
					if ( (synpred89_Delphi()) ) {
						alt65=1;
					}
					}
					break;
				case PASCAL:
					{
					int LA65_5 = input.LA(2);
					if ( (synpred89_Delphi()) ) {
						alt65=1;
					}
					}
					break;
				case SAFECALL:
					{
					int LA65_6 = input.LA(2);
					if ( (synpred89_Delphi()) ) {
						alt65=1;
					}
					}
					break;
				case EXPORT:
					{
					int LA65_7 = input.LA(2);
					if ( (synpred89_Delphi()) ) {
						alt65=1;
					}
					}
					break;
				case STDCALL:
					{
					int LA65_8 = input.LA(2);
					if ( (synpred89_Delphi()) ) {
						alt65=1;
					}
					}
					break;
			}
			switch (alt65) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:234:55: ( ';' )? callConventionNoSemi
					{
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:234:55: ( ';' )?
					int alt64=2;
					int LA64_0 = input.LA(1);
					if ( (LA64_0==SEMI) ) {
						alt64=1;
					}
					switch (alt64) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:234:56: ';'
							{
							char_literal210=(Token)match(input,SEMI,FOLLOW_SEMI_in_simpleProcedureType4678); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal210_tree = (Object)adaptor.create(char_literal210);
							adaptor.addChild(root_0, char_literal210_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_callConventionNoSemi_in_simpleProcedureType4682);
					callConventionNoSemi211=callConventionNoSemi();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, callConventionNoSemi211.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 52, simpleProcedureType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "simpleProcedureType"


	public static class procedureReference_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "procedureReference"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:236:1: procedureReference : 'reference' 'to' procedureTypeHeading ;
	public final DelphiParser.procedureReference_return procedureReference() throws RecognitionException {
		DelphiParser.procedureReference_return retval = new DelphiParser.procedureReference_return();
		retval.start = input.LT(1);
		int procedureReference_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal212=null;
		Token string_literal213=null;
		ParserRuleReturnScope procedureTypeHeading214 =null;

		Object string_literal212_tree=null;
		Object string_literal213_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:236:30: ( 'reference' 'to' procedureTypeHeading )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:236:32: 'reference' 'to' procedureTypeHeading
			{
			root_0 = (Object)adaptor.nil();


			string_literal212=(Token)match(input,REFERENCE,FOLLOW_REFERENCE_in_procedureReference4731); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal212_tree = (Object)adaptor.create(string_literal212);
			adaptor.addChild(root_0, string_literal212_tree);
			}

			string_literal213=(Token)match(input,TO,FOLLOW_TO_in_procedureReference4733); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal213_tree = (Object)adaptor.create(string_literal213);
			adaptor.addChild(root_0, string_literal213_tree);
			}

			pushFollow(FOLLOW_procedureTypeHeading_in_procedureReference4735);
			procedureTypeHeading214=procedureTypeHeading();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureTypeHeading214.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 53, procedureReference_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "procedureReference"


	public static class procedureTypeHeading_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "procedureTypeHeading"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:238:1: procedureTypeHeading : ( 'function' ( formalParameterSection )? ':' ( customAttribute )? typeDecl -> 'function' ( formalParameterSection )? ^( TkFunctionReturn typeDecl ) | 'procedure' ( formalParameterSection )? );
	public final DelphiParser.procedureTypeHeading_return procedureTypeHeading() throws RecognitionException {
		DelphiParser.procedureTypeHeading_return retval = new DelphiParser.procedureTypeHeading_return();
		retval.start = input.LT(1);
		int procedureTypeHeading_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal215=null;
		Token char_literal217=null;
		Token string_literal220=null;
		ParserRuleReturnScope formalParameterSection216 =null;
		ParserRuleReturnScope customAttribute218 =null;
		ParserRuleReturnScope typeDecl219 =null;
		ParserRuleReturnScope formalParameterSection221 =null;

		Object string_literal215_tree=null;
		Object char_literal217_tree=null;
		Object string_literal220_tree=null;
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_formalParameterSection=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterSection");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:238:30: ( 'function' ( formalParameterSection )? ':' ( customAttribute )? typeDecl -> 'function' ( formalParameterSection )? ^( TkFunctionReturn typeDecl ) | 'procedure' ( formalParameterSection )? )
			int alt69=2;
			int LA69_0 = input.LA(1);
			if ( (LA69_0==FUNCTION) ) {
				alt69=1;
			}
			else if ( (LA69_0==PROCEDURE) ) {
				alt69=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 69, 0, input);
				throw nvae;
			}

			switch (alt69) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:238:32: 'function' ( formalParameterSection )? ':' ( customAttribute )? typeDecl
					{
					string_literal215=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_procedureTypeHeading4780); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_FUNCTION.add(string_literal215);

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:238:43: ( formalParameterSection )?
					int alt66=2;
					int LA66_0 = input.LA(1);
					if ( (LA66_0==LPAREN) ) {
						alt66=1;
					}
					switch (alt66) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:238:44: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_procedureTypeHeading4783);
							formalParameterSection216=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection216.getTree());
							}
							break;

					}

					char_literal217=(Token)match(input,COLON,FOLLOW_COLON_in_procedureTypeHeading4787); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(char_literal217);

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:238:73: ( customAttribute )?
					int alt67=2;
					alt67 = dfa67.predict(input);
					switch (alt67) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:238:74: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_procedureTypeHeading4790);
							customAttribute218=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute218.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_typeDecl_in_procedureTypeHeading4794);
					typeDecl219=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl219.getTree());
					// AST REWRITE
					// elements: FUNCTION, typeDecl, formalParameterSection
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 238:101: -> 'function' ( formalParameterSection )? ^( TkFunctionReturn typeDecl )
					{
						adaptor.addChild(root_0, stream_FUNCTION.nextNode());
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:238:115: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_0, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:238:141: ^( TkFunctionReturn typeDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionReturn, "TkFunctionReturn"), root_1);
						adaptor.addChild(root_1, stream_typeDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:239:32: 'procedure' ( formalParameterSection )?
					{
					root_0 = (Object)adaptor.nil();


					string_literal220=(Token)match(input,PROCEDURE,FOLLOW_PROCEDURE_in_procedureTypeHeading4842); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal220_tree = (Object)adaptor.create(string_literal220);
					adaptor.addChild(root_0, string_literal220_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:239:44: ( formalParameterSection )?
					int alt68=2;
					alt68 = dfa68.predict(input);
					switch (alt68) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:239:45: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_procedureTypeHeading4845);
							formalParameterSection221=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterSection221.getTree());

							}
							break;

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 54, procedureTypeHeading_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "procedureTypeHeading"


	public static class variantType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "variantType"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:241:1: variantType : 'variant' ;
	public final DelphiParser.variantType_return variantType() throws RecognitionException {
		DelphiParser.variantType_return retval = new DelphiParser.variantType_return();
		retval.start = input.LT(1);
		int variantType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal222=null;

		Object string_literal222_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:241:30: ( 'variant' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:241:32: 'variant'
			{
			root_0 = (Object)adaptor.nil();


			string_literal222=(Token)match(input,VARIANT,FOLLOW_VARIANT_in_variantType4901); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal222_tree = (Object)adaptor.create(string_literal222);
			adaptor.addChild(root_0, string_literal222_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 55, variantType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "variantType"


	public static class simpleType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "simpleType"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:243:1: simpleType : ( ident | subRangeType | enumType );
	public final DelphiParser.simpleType_return simpleType() throws RecognitionException {
		DelphiParser.simpleType_return retval = new DelphiParser.simpleType_return();
		retval.start = input.LT(1);
		int simpleType_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope ident223 =null;
		ParserRuleReturnScope subRangeType224 =null;
		ParserRuleReturnScope enumType225 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:243:30: ( ident | subRangeType | enumType )
			int alt70=3;
			alt70 = dfa70.predict(input);
			switch (alt70) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:243:32: ident
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_ident_in_simpleType4957);
					ident223=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident223.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:244:32: subRangeType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_subRangeType_in_simpleType4990);
					subRangeType224=subRangeType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, subRangeType224.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:245:32: enumType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_enumType_in_simpleType5023);
					enumType225=enumType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, enumType225.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 56, simpleType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "simpleType"


	public static class subRangeType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "subRangeType"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:247:1: subRangeType : constExpression ( '..' constExpression )? ;
	public final DelphiParser.subRangeType_return subRangeType() throws RecognitionException {
		DelphiParser.subRangeType_return retval = new DelphiParser.subRangeType_return();
		retval.start = input.LT(1);
		int subRangeType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal227=null;
		ParserRuleReturnScope constExpression226 =null;
		ParserRuleReturnScope constExpression228 =null;

		Object string_literal227_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:247:30: ( constExpression ( '..' constExpression )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:247:32: constExpression ( '..' constExpression )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_constExpression_in_subRangeType5076);
			constExpression226=constExpression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression226.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:247:48: ( '..' constExpression )?
			int alt71=2;
			int LA71_0 = input.LA(1);
			if ( (LA71_0==DOTDOT) ) {
				int LA71_1 = input.LA(2);
				if ( (synpred96_Delphi()) ) {
					alt71=1;
				}
			}
			switch (alt71) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:247:49: '..' constExpression
					{
					string_literal227=(Token)match(input,DOTDOT,FOLLOW_DOTDOT_in_subRangeType5079); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal227_tree = (Object)adaptor.create(string_literal227);
					adaptor.addChild(root_0, string_literal227_tree);
					}

					pushFollow(FOLLOW_constExpression_in_subRangeType5081);
					constExpression228=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression228.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 57, subRangeType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "subRangeType"


	public static class enumType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "enumType"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:249:1: enumType : '(' ident ( '=' expression )? ( ',' ident ( '=' expression )? )* ')' ;
	public final DelphiParser.enumType_return enumType() throws RecognitionException {
		DelphiParser.enumType_return retval = new DelphiParser.enumType_return();
		retval.start = input.LT(1);
		int enumType_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal229=null;
		Token char_literal231=null;
		Token char_literal233=null;
		Token char_literal235=null;
		Token char_literal237=null;
		ParserRuleReturnScope ident230 =null;
		ParserRuleReturnScope expression232 =null;
		ParserRuleReturnScope ident234 =null;
		ParserRuleReturnScope expression236 =null;

		Object char_literal229_tree=null;
		Object char_literal231_tree=null;
		Object char_literal233_tree=null;
		Object char_literal235_tree=null;
		Object char_literal237_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:249:30: ( '(' ident ( '=' expression )? ( ',' ident ( '=' expression )? )* ')' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:249:32: '(' ident ( '=' expression )? ( ',' ident ( '=' expression )? )* ')'
			{
			root_0 = (Object)adaptor.nil();


			char_literal229=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_enumType5140); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal229_tree = (Object)adaptor.create(char_literal229);
			adaptor.addChild(root_0, char_literal229_tree);
			}

			pushFollow(FOLLOW_ident_in_enumType5142);
			ident230=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident230.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:249:42: ( '=' expression )?
			int alt72=2;
			int LA72_0 = input.LA(1);
			if ( (LA72_0==EQUAL) ) {
				alt72=1;
			}
			switch (alt72) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:249:43: '=' expression
					{
					char_literal231=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_enumType5145); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal231_tree = (Object)adaptor.create(char_literal231);
					adaptor.addChild(root_0, char_literal231_tree);
					}

					pushFollow(FOLLOW_expression_in_enumType5147);
					expression232=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression232.getTree());

					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:249:60: ( ',' ident ( '=' expression )? )*
			loop74:
			while (true) {
				int alt74=2;
				int LA74_0 = input.LA(1);
				if ( (LA74_0==COMMA) ) {
					alt74=1;
				}

				switch (alt74) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:249:61: ',' ident ( '=' expression )?
					{
					char_literal233=(Token)match(input,COMMA,FOLLOW_COMMA_in_enumType5152); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal233_tree = (Object)adaptor.create(char_literal233);
					adaptor.addChild(root_0, char_literal233_tree);
					}

					pushFollow(FOLLOW_ident_in_enumType5154);
					ident234=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident234.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:249:71: ( '=' expression )?
					int alt73=2;
					int LA73_0 = input.LA(1);
					if ( (LA73_0==EQUAL) ) {
						alt73=1;
					}
					switch (alt73) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:249:72: '=' expression
							{
							char_literal235=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_enumType5157); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal235_tree = (Object)adaptor.create(char_literal235);
							adaptor.addChild(root_0, char_literal235_tree);
							}

							pushFollow(FOLLOW_expression_in_enumType5159);
							expression236=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression236.getTree());

							}
							break;

					}

					}
					break;

				default :
					break loop74;
				}
			}

			char_literal237=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_enumType5166); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal237_tree = (Object)adaptor.create(char_literal237);
			adaptor.addChild(root_0, char_literal237_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 58, enumType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "enumType"


	public static class typeId_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "typeId"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:251:1: typeId : qualifiedIdent ;
	public final DelphiParser.typeId_return typeId() throws RecognitionException {
		DelphiParser.typeId_return retval = new DelphiParser.typeId_return();
		retval.start = input.LT(1);
		int typeId_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope qualifiedIdent238 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:251:30: ( qualifiedIdent )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:251:32: qualifiedIdent
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_qualifiedIdent_in_typeId5225);
			qualifiedIdent238=qualifiedIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdent238.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 59, typeId_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "typeId"


	public static class genericTypeIdent_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "genericTypeIdent"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:256:1: genericTypeIdent : qualifiedIdent ( genericDefinition )? -> qualifiedIdent ;
	public final DelphiParser.genericTypeIdent_return genericTypeIdent() throws RecognitionException {
		DelphiParser.genericTypeIdent_return retval = new DelphiParser.genericTypeIdent_return();
		retval.start = input.LT(1);
		int genericTypeIdent_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope qualifiedIdent239 =null;
		ParserRuleReturnScope genericDefinition240 =null;

		RewriteRuleSubtreeStream stream_genericDefinition=new RewriteRuleSubtreeStream(adaptor,"rule genericDefinition");
		RewriteRuleSubtreeStream stream_qualifiedIdent=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdent");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:256:30: ( qualifiedIdent ( genericDefinition )? -> qualifiedIdent )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:256:32: qualifiedIdent ( genericDefinition )?
			{
			pushFollow(FOLLOW_qualifiedIdent_in_genericTypeIdent5277);
			qualifiedIdent239=qualifiedIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_qualifiedIdent.add(qualifiedIdent239.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:256:47: ( genericDefinition )?
			int alt75=2;
			int LA75_0 = input.LA(1);
			if ( (LA75_0==LT) ) {
				alt75=1;
			}
			switch (alt75) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:256:48: genericDefinition
					{
					pushFollow(FOLLOW_genericDefinition_in_genericTypeIdent5280);
					genericDefinition240=genericDefinition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_genericDefinition.add(genericDefinition240.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: qualifiedIdent
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 256:68: -> qualifiedIdent
			{
				adaptor.addChild(root_0, stream_qualifiedIdent.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 60, genericTypeIdent_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "genericTypeIdent"


	public static class genericDefinition_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "genericDefinition"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:258:1: genericDefinition : '<' innerGeneric ( ';' innerGeneric )* '>' ;
	public final DelphiParser.genericDefinition_return genericDefinition() throws RecognitionException {
		DelphiParser.genericDefinition_return retval = new DelphiParser.genericDefinition_return();
		retval.start = input.LT(1);
		int genericDefinition_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal241=null;
		Token char_literal243=null;
		Token char_literal245=null;
		ParserRuleReturnScope innerGeneric242 =null;
		ParserRuleReturnScope innerGeneric244 =null;

		Object char_literal241_tree=null;
		Object char_literal243_tree=null;
		Object char_literal245_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:258:29: ( '<' innerGeneric ( ';' innerGeneric )* '>' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:258:31: '<' innerGeneric ( ';' innerGeneric )* '>'
			{
			root_0 = (Object)adaptor.nil();


			char_literal241=(Token)match(input,LT,FOLLOW_LT_in_genericDefinition5337); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal241_tree = (Object)adaptor.create(char_literal241);
			adaptor.addChild(root_0, char_literal241_tree);
			}

			pushFollow(FOLLOW_innerGeneric_in_genericDefinition5339);
			innerGeneric242=innerGeneric();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, innerGeneric242.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:258:48: ( ';' innerGeneric )*
			loop76:
			while (true) {
				int alt76=2;
				int LA76_0 = input.LA(1);
				if ( (LA76_0==SEMI) ) {
					alt76=1;
				}

				switch (alt76) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:258:49: ';' innerGeneric
					{
					char_literal243=(Token)match(input,SEMI,FOLLOW_SEMI_in_genericDefinition5342); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal243_tree = (Object)adaptor.create(char_literal243);
					adaptor.addChild(root_0, char_literal243_tree);
					}

					pushFollow(FOLLOW_innerGeneric_in_genericDefinition5344);
					innerGeneric244=innerGeneric();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, innerGeneric244.getTree());

					}
					break;

				default :
					break loop76;
				}
			}

			char_literal245=(Token)match(input,GT,FOLLOW_GT_in_genericDefinition5348); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal245_tree = (Object)adaptor.create(char_literal245);
			adaptor.addChild(root_0, char_literal245_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 61, genericDefinition_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "genericDefinition"


	public static class innerGeneric_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "innerGeneric"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:260:1: innerGeneric : genericTypeIdent ( ',' genericTypeIdent )* ( ':' genericConstraint ( ',' genericConstraint )* )? ;
	public final DelphiParser.innerGeneric_return innerGeneric() throws RecognitionException {
		DelphiParser.innerGeneric_return retval = new DelphiParser.innerGeneric_return();
		retval.start = input.LT(1);
		int innerGeneric_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal247=null;
		Token char_literal249=null;
		Token char_literal251=null;
		ParserRuleReturnScope genericTypeIdent246 =null;
		ParserRuleReturnScope genericTypeIdent248 =null;
		ParserRuleReturnScope genericConstraint250 =null;
		ParserRuleReturnScope genericConstraint252 =null;

		Object char_literal247_tree=null;
		Object char_literal249_tree=null;
		Object char_literal251_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:260:30: ( genericTypeIdent ( ',' genericTypeIdent )* ( ':' genericConstraint ( ',' genericConstraint )* )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:260:32: genericTypeIdent ( ',' genericTypeIdent )* ( ':' genericConstraint ( ',' genericConstraint )* )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_genericTypeIdent_in_innerGeneric5401);
			genericTypeIdent246=genericTypeIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeIdent246.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:260:49: ( ',' genericTypeIdent )*
			loop77:
			while (true) {
				int alt77=2;
				int LA77_0 = input.LA(1);
				if ( (LA77_0==COMMA) ) {
					alt77=1;
				}

				switch (alt77) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:260:50: ',' genericTypeIdent
					{
					char_literal247=(Token)match(input,COMMA,FOLLOW_COMMA_in_innerGeneric5404); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal247_tree = (Object)adaptor.create(char_literal247);
					adaptor.addChild(root_0, char_literal247_tree);
					}

					pushFollow(FOLLOW_genericTypeIdent_in_innerGeneric5406);
					genericTypeIdent248=genericTypeIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeIdent248.getTree());

					}
					break;

				default :
					break loop77;
				}
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:260:73: ( ':' genericConstraint ( ',' genericConstraint )* )?
			int alt79=2;
			int LA79_0 = input.LA(1);
			if ( (LA79_0==COLON) ) {
				alt79=1;
			}
			switch (alt79) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:260:74: ':' genericConstraint ( ',' genericConstraint )*
					{
					char_literal249=(Token)match(input,COLON,FOLLOW_COLON_in_innerGeneric5411); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal249_tree = (Object)adaptor.create(char_literal249);
					adaptor.addChild(root_0, char_literal249_tree);
					}

					pushFollow(FOLLOW_genericConstraint_in_innerGeneric5413);
					genericConstraint250=genericConstraint();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, genericConstraint250.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:260:96: ( ',' genericConstraint )*
					loop78:
					while (true) {
						int alt78=2;
						int LA78_0 = input.LA(1);
						if ( (LA78_0==COMMA) ) {
							alt78=1;
						}

						switch (alt78) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:260:97: ',' genericConstraint
							{
							char_literal251=(Token)match(input,COMMA,FOLLOW_COMMA_in_innerGeneric5416); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal251_tree = (Object)adaptor.create(char_literal251);
							adaptor.addChild(root_0, char_literal251_tree);
							}

							pushFollow(FOLLOW_genericConstraint_in_innerGeneric5418);
							genericConstraint252=genericConstraint();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, genericConstraint252.getTree());

							}
							break;

						default :
							break loop78;
						}
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 62, innerGeneric_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "innerGeneric"


	public static class genericConstraint_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "genericConstraint"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:262:1: genericConstraint : ( genericTypeIdent | 'record' | 'class' | 'constructor' );
	public final DelphiParser.genericConstraint_return genericConstraint() throws RecognitionException {
		DelphiParser.genericConstraint_return retval = new DelphiParser.genericConstraint_return();
		retval.start = input.LT(1);
		int genericConstraint_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal254=null;
		Token string_literal255=null;
		Token string_literal256=null;
		ParserRuleReturnScope genericTypeIdent253 =null;

		Object string_literal254_tree=null;
		Object string_literal255_tree=null;
		Object string_literal256_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:262:30: ( genericTypeIdent | 'record' | 'class' | 'constructor' )
			int alt80=4;
			switch ( input.LA(1) ) {
			case ADD:
			case ANSISTRING:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case DQ:
			case DW:
			case EXIT:
			case EXPORT:
			case FALSE:
			case FINAL:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STATIC:
			case STORED:
			case STRICT:
			case STRING:
			case TRUE:
			case TkIdentifier:
			case UNSAFE:
			case VARARGS:
			case VARIANT:
			case VIRTUAL:
			case WRITE:
			case WRITEONLY:
			case 198:
				{
				alt80=1;
				}
				break;
			case RECORD:
				{
				alt80=2;
				}
				break;
			case CLASS:
				{
				alt80=3;
				}
				break;
			case CONSTRUCTOR:
				{
				alt80=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 80, 0, input);
				throw nvae;
			}
			switch (alt80) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:262:32: genericTypeIdent
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_genericTypeIdent_in_genericConstraint5470);
					genericTypeIdent253=genericTypeIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeIdent253.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:263:32: 'record'
					{
					root_0 = (Object)adaptor.nil();


					string_literal254=(Token)match(input,RECORD,FOLLOW_RECORD_in_genericConstraint5503); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal254_tree = (Object)adaptor.create(string_literal254);
					adaptor.addChild(root_0, string_literal254_tree);
					}

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:264:32: 'class'
					{
					root_0 = (Object)adaptor.nil();


					string_literal255=(Token)match(input,CLASS,FOLLOW_CLASS_in_genericConstraint5536); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal255_tree = (Object)adaptor.create(string_literal255);
					adaptor.addChild(root_0, string_literal255_tree);
					}

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:265:32: 'constructor'
					{
					root_0 = (Object)adaptor.nil();


					string_literal256=(Token)match(input,CONSTRUCTOR,FOLLOW_CONSTRUCTOR_in_genericConstraint5569); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal256_tree = (Object)adaptor.create(string_literal256);
					adaptor.addChild(root_0, string_literal256_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 63, genericConstraint_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "genericConstraint"


	public static class genericPostfix_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "genericPostfix"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:267:1: genericPostfix : '<' typeDecl ( ',' typeDecl )* '>' ;
	public final DelphiParser.genericPostfix_return genericPostfix() throws RecognitionException {
		DelphiParser.genericPostfix_return retval = new DelphiParser.genericPostfix_return();
		retval.start = input.LT(1);
		int genericPostfix_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal257=null;
		Token char_literal259=null;
		Token char_literal261=null;
		ParserRuleReturnScope typeDecl258 =null;
		ParserRuleReturnScope typeDecl260 =null;

		Object char_literal257_tree=null;
		Object char_literal259_tree=null;
		Object char_literal261_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:267:30: ( '<' typeDecl ( ',' typeDecl )* '>' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:267:32: '<' typeDecl ( ',' typeDecl )* '>'
			{
			root_0 = (Object)adaptor.nil();


			char_literal257=(Token)match(input,LT,FOLLOW_LT_in_genericPostfix5620); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal257_tree = (Object)adaptor.create(char_literal257);
			adaptor.addChild(root_0, char_literal257_tree);
			}

			pushFollow(FOLLOW_typeDecl_in_genericPostfix5622);
			typeDecl258=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl258.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:267:45: ( ',' typeDecl )*
			loop81:
			while (true) {
				int alt81=2;
				int LA81_0 = input.LA(1);
				if ( (LA81_0==COMMA) ) {
					alt81=1;
				}

				switch (alt81) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:267:46: ',' typeDecl
					{
					char_literal259=(Token)match(input,COMMA,FOLLOW_COMMA_in_genericPostfix5625); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal259_tree = (Object)adaptor.create(char_literal259);
					adaptor.addChild(root_0, char_literal259_tree);
					}

					pushFollow(FOLLOW_typeDecl_in_genericPostfix5627);
					typeDecl260=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl260.getTree());

					}
					break;

				default :
					break loop81;
				}
			}

			char_literal261=(Token)match(input,GT,FOLLOW_GT_in_genericPostfix5631); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal261_tree = (Object)adaptor.create(char_literal261);
			adaptor.addChild(root_0, char_literal261_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 64, genericPostfix_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "genericPostfix"


	public static class paranthesePostfix_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "paranthesePostfix"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:269:1: paranthesePostfix : '(' intRealNum ')' ;
	public final DelphiParser.paranthesePostfix_return paranthesePostfix() throws RecognitionException {
		DelphiParser.paranthesePostfix_return retval = new DelphiParser.paranthesePostfix_return();
		retval.start = input.LT(1);
		int paranthesePostfix_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal262=null;
		Token char_literal264=null;
		ParserRuleReturnScope intRealNum263 =null;

		Object char_literal262_tree=null;
		Object char_literal264_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:269:30: ( '(' intRealNum ')' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:269:32: '(' intRealNum ')'
			{
			root_0 = (Object)adaptor.nil();


			char_literal262=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_paranthesePostfix5679); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal262_tree = (Object)adaptor.create(char_literal262);
			adaptor.addChild(root_0, char_literal262_tree);
			}

			pushFollow(FOLLOW_intRealNum_in_paranthesePostfix5681);
			intRealNum263=intRealNum();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, intRealNum263.getTree());

			char_literal264=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_paranthesePostfix5683); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal264_tree = (Object)adaptor.create(char_literal264);
			adaptor.addChild(root_0, char_literal264_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 65, paranthesePostfix_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "paranthesePostfix"


	public static class classDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classDecl"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:274:1: classDecl : ( classTypeTypeDecl | classTypeDecl -> ^( TkClass classTypeDecl ) | classHelperDecl -> ^( TkClass classHelperDecl ) | interfaceTypeDecl -> ^( TkInterface interfaceTypeDecl ) | objectDecl -> ^( TkObject objectDecl ) | recordDecl -> ^( TkRecord recordDecl ) | recordHelperDecl -> ^( TkRecordHelper recordHelperDecl ) );
	public final DelphiParser.classDecl_return classDecl() throws RecognitionException {
		DelphiParser.classDecl_return retval = new DelphiParser.classDecl_return();
		retval.start = input.LT(1);
		int classDecl_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope classTypeTypeDecl265 =null;
		ParserRuleReturnScope classTypeDecl266 =null;
		ParserRuleReturnScope classHelperDecl267 =null;
		ParserRuleReturnScope interfaceTypeDecl268 =null;
		ParserRuleReturnScope objectDecl269 =null;
		ParserRuleReturnScope recordDecl270 =null;
		ParserRuleReturnScope recordHelperDecl271 =null;

		RewriteRuleSubtreeStream stream_interfaceTypeDecl=new RewriteRuleSubtreeStream(adaptor,"rule interfaceTypeDecl");
		RewriteRuleSubtreeStream stream_recordHelperDecl=new RewriteRuleSubtreeStream(adaptor,"rule recordHelperDecl");
		RewriteRuleSubtreeStream stream_objectDecl=new RewriteRuleSubtreeStream(adaptor,"rule objectDecl");
		RewriteRuleSubtreeStream stream_classHelperDecl=new RewriteRuleSubtreeStream(adaptor,"rule classHelperDecl");
		RewriteRuleSubtreeStream stream_recordDecl=new RewriteRuleSubtreeStream(adaptor,"rule recordDecl");
		RewriteRuleSubtreeStream stream_classTypeDecl=new RewriteRuleSubtreeStream(adaptor,"rule classTypeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:274:30: ( classTypeTypeDecl | classTypeDecl -> ^( TkClass classTypeDecl ) | classHelperDecl -> ^( TkClass classHelperDecl ) | interfaceTypeDecl -> ^( TkInterface interfaceTypeDecl ) | objectDecl -> ^( TkObject objectDecl ) | recordDecl -> ^( TkRecord recordDecl ) | recordHelperDecl -> ^( TkRecordHelper recordHelperDecl ) )
			int alt82=7;
			switch ( input.LA(1) ) {
			case CLASS:
				{
				switch ( input.LA(2) ) {
				case OF:
					{
					switch ( input.LA(3) ) {
					case OBJECT:
						{
						int LA82_10 = input.LA(4);
						if ( (synpred109_Delphi()) ) {
							alt82=1;
						}
						else if ( (synpred110_Delphi()) ) {
							alt82=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 82, 10, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case TkIdentifier:
						{
						int LA82_11 = input.LA(4);
						if ( (synpred109_Delphi()) ) {
							alt82=1;
						}
						else if ( (synpred110_Delphi()) ) {
							alt82=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 82, 11, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case 198:
						{
						int LA82_12 = input.LA(4);
						if ( (LA82_12==TkIdentifier) ) {
							int LA82_17 = input.LA(5);
							if ( (synpred109_Delphi()) ) {
								alt82=1;
							}
							else if ( (synpred110_Delphi()) ) {
								alt82=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 82, 17, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}
						else if ( ((LA82_12 >= ABSOLUTE && LA82_12 <= ASSEMBLY)||LA82_12==AT||LA82_12==AUTOMATED||(LA82_12 >= BEGIN && LA82_12 <= CLASS)||(LA82_12 >= CONST && LA82_12 <= CONTINUE)||(LA82_12 >= DEFAULT && LA82_12 <= DO)||(LA82_12 >= DOWNTO && LA82_12 <= DYNAMIC)||(LA82_12 >= ELSE && LA82_12 <= END)||(LA82_12 >= EXCEPT && LA82_12 <= FUNCTION)||LA82_12==GOTO||LA82_12==HELPER||(LA82_12 >= IF && LA82_12 <= LABEL)||(LA82_12 >= LIBRARY && LA82_12 <= LOCAL)||LA82_12==MESSAGE||(LA82_12 >= MOD && LA82_12 <= NOT)||(LA82_12 >= OBJECT && LA82_12 <= PLATFORM)||LA82_12==POINTER||(LA82_12 >= PRIVATE && LA82_12 <= PUBLISHED)||LA82_12==RAISE||(LA82_12 >= READ && LA82_12 <= RESOURCESTRING)||(LA82_12 >= SAFECALL && LA82_12 <= SEALED)||(LA82_12 >= SET && LA82_12 <= SHR)||(LA82_12 >= STATIC && LA82_12 <= TYPE)||(LA82_12 >= UNIT && LA82_12 <= USES)||(LA82_12 >= VAR && LA82_12 <= WRITEONLY)||LA82_12==XOR) ) {
							int LA82_18 = input.LA(5);
							if ( (synpred109_Delphi()) ) {
								alt82=1;
							}
							else if ( (synpred110_Delphi()) ) {
								alt82=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 82, 18, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 82, 12, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case TRUE:
						{
						int LA82_13 = input.LA(4);
						if ( (synpred109_Delphi()) ) {
							alt82=1;
						}
						else if ( (synpred110_Delphi()) ) {
							alt82=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 82, 13, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case AND:
					case AS:
					case AT2:
					case COLON:
					case COMMA:
					case ControlChar:
					case ControlString:
					case DIV:
					case DOT:
					case DOTDOT:
					case ELSE:
					case END:
					case EQUAL:
					case FUNCTION:
					case GE:
					case GT:
					case IN:
					case INHERITED:
					case IS:
					case LBRACK:
					case LE:
					case LPAREN:
					case LT:
					case MINUS:
					case MOD:
					case NIL:
					case NOT:
					case NOT_EQUAL:
					case OR:
					case PLUS:
					case POINTER2:
					case PROCEDURE:
					case QuotedString:
					case SEMI:
					case SHL:
					case SHR:
					case SLASH:
					case STAR:
					case TkHexNum:
					case TkIntNum:
					case TkRealNum:
					case XOR:
					case 199:
					case 200:
						{
						alt82=2;
						}
						break;
					case FALSE:
						{
						int LA82_14 = input.LA(4);
						if ( (synpred109_Delphi()) ) {
							alt82=1;
						}
						else if ( (synpred110_Delphi()) ) {
							alt82=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 82, 14, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case ADD:
					case ANSISTRING:
					case AT:
					case BREAK:
					case CONTAINS:
					case CONTINUE:
					case DEFAULT:
					case DQ:
					case DW:
					case EXIT:
					case EXPORT:
					case FINAL:
					case IMPLEMENTS:
					case INDEX:
					case LOCAL:
					case MESSAGE:
					case NAME:
					case OPERATOR:
					case OUT:
					case POINTER:
					case READ:
					case READONLY:
					case REFERENCE:
					case REGISTER:
					case REMOVE:
					case STATIC:
					case STORED:
					case STRICT:
					case STRING:
					case UNSAFE:
					case VARARGS:
					case VARIANT:
					case VIRTUAL:
					case WRITE:
					case WRITEONLY:
						{
						int LA82_15 = input.LA(4);
						if ( (synpred109_Delphi()) ) {
							alt82=1;
						}
						else if ( (synpred110_Delphi()) ) {
							alt82=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 82, 15, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 82, 5, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}
					}
					break;
				case HELPER:
					{
					alt82=3;
					}
					break;
				case EOF:
				case ABSOLUTE:
				case ABSTRACT:
				case ADD:
				case AND:
				case ANSISTRING:
				case AS:
				case ASM:
				case ASSEMBLER:
				case AT:
				case AT2:
				case AUTOMATED:
				case BEGIN:
				case BREAK:
				case CASE:
				case CDECL:
				case CLASS:
				case COLON:
				case COMMA:
				case CONST:
				case CONSTRUCTOR:
				case CONTAINS:
				case CONTINUE:
				case ControlChar:
				case ControlString:
				case DEFAULT:
				case DEPRECATED:
				case DESTRUCTOR:
				case DISPID:
				case DIV:
				case DO:
				case DOT:
				case DOTDOT:
				case DOWNTO:
				case DQ:
				case DW:
				case ELSE:
				case END:
				case EQUAL:
				case EXCEPT:
				case EXIT:
				case EXPERIMENTAL:
				case EXPORT:
				case EXPORTS:
				case EXTERNAL:
				case FALSE:
				case FAR:
				case FINAL:
				case FINALIZATION:
				case FINALLY:
				case FUNCTION:
				case GE:
				case GT:
				case IMPLEMENTATION:
				case IMPLEMENTS:
				case IN:
				case INDEX:
				case INHERITED:
				case INITIALIZATION:
				case INLINE:
				case IS:
				case LABEL:
				case LBRACK:
				case LE:
				case LIBRARY:
				case LOCAL:
				case LPAREN:
				case LT:
				case MESSAGE:
				case MINUS:
				case MOD:
				case NAME:
				case NEAR:
				case NIL:
				case NODEFAULT:
				case NOT:
				case NOT_EQUAL:
				case OBJECT:
				case ON:
				case OPERATOR:
				case OR:
				case OUT:
				case OVERLOAD:
				case PASCAL:
				case PLATFORM:
				case PLUS:
				case POINTER:
				case POINTER2:
				case PRIVATE:
				case PROCEDURE:
				case PROPERTY:
				case PROTECTED:
				case PUBLIC:
				case PUBLISHED:
				case QuotedString:
				case RBRACK:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case RESIDENT:
				case RESOURCESTRING:
				case RPAREN:
				case SAFECALL:
				case SEALED:
				case SEMI:
				case SHL:
				case SHR:
				case SLASH:
				case STAR:
				case STATIC:
				case STDCALL:
				case STORED:
				case STRICT:
				case STRING:
				case THEN:
				case THREADVAR:
				case TO:
				case TRUE:
				case TYPE:
				case TkHexNum:
				case TkIdentifier:
				case TkIntNum:
				case TkRealNum:
				case UNSAFE:
				case UNTIL:
				case VAR:
				case VARARGS:
				case VARIANT:
				case VIRTUAL:
				case WRITE:
				case WRITEONLY:
				case XOR:
				case 198:
				case 199:
				case 200:
					{
					alt82=2;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 82, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case DISPINTERFACE:
			case INTERFACE:
				{
				alt82=4;
				}
				break;
			case OBJECT:
				{
				alt82=5;
				}
				break;
			case RECORD:
				{
				int LA82_4 = input.LA(2);
				if ( (LA82_4==HELPER) ) {
					alt82=7;
				}
				else if ( (LA82_4==ADD||LA82_4==ANSISTRING||LA82_4==AT||LA82_4==AUTOMATED||(LA82_4 >= BREAK && LA82_4 <= CASE)||LA82_4==CLASS||(LA82_4 >= CONST && LA82_4 <= CONTINUE)||LA82_4==DEFAULT||LA82_4==DESTRUCTOR||(LA82_4 >= DQ && LA82_4 <= DW)||LA82_4==END||LA82_4==EXIT||LA82_4==EXPORT||LA82_4==FALSE||LA82_4==FINAL||LA82_4==FUNCTION||LA82_4==IMPLEMENTS||LA82_4==INDEX||LA82_4==LBRACK||LA82_4==LOCAL||LA82_4==MESSAGE||LA82_4==NAME||LA82_4==OBJECT||LA82_4==OPERATOR||LA82_4==OUT||LA82_4==POINTER||(LA82_4 >= PRIVATE && LA82_4 <= PROCEDURE)||(LA82_4 >= PROPERTY && LA82_4 <= PUBLISHED)||(LA82_4 >= READ && LA82_4 <= READONLY)||(LA82_4 >= REFERENCE && LA82_4 <= REGISTER)||LA82_4==REMOVE||LA82_4==RESOURCESTRING||LA82_4==STATIC||(LA82_4 >= STORED && LA82_4 <= STRING)||LA82_4==THREADVAR||LA82_4==TRUE||LA82_4==TYPE||LA82_4==TkIdentifier||LA82_4==UNSAFE||(LA82_4 >= VAR && LA82_4 <= VIRTUAL)||(LA82_4 >= WRITE && LA82_4 <= WRITEONLY)||LA82_4==198) ) {
					alt82=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 82, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 82, 0, input);
				throw nvae;
			}
			switch (alt82) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:274:32: classTypeTypeDecl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classTypeTypeDecl_in_classDecl5743);
					classTypeTypeDecl265=classTypeTypeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classTypeTypeDecl265.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:275:32: classTypeDecl
					{
					pushFollow(FOLLOW_classTypeDecl_in_classDecl5776);
					classTypeDecl266=classTypeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classTypeDecl.add(classTypeDecl266.getTree());
					// AST REWRITE
					// elements: classTypeDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 275:46: -> ^( TkClass classTypeDecl )
					{
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:275:49: ^( TkClass classTypeDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClass, "TkClass"), root_1);
						adaptor.addChild(root_1, stream_classTypeDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:276:32: classHelperDecl
					{
					pushFollow(FOLLOW_classHelperDecl_in_classDecl5817);
					classHelperDecl267=classHelperDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classHelperDecl.add(classHelperDecl267.getTree());
					// AST REWRITE
					// elements: classHelperDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 276:48: -> ^( TkClass classHelperDecl )
					{
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:276:51: ^( TkClass classHelperDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClass, "TkClass"), root_1);
						adaptor.addChild(root_1, stream_classHelperDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:277:32: interfaceTypeDecl
					{
					pushFollow(FOLLOW_interfaceTypeDecl_in_classDecl5858);
					interfaceTypeDecl268=interfaceTypeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_interfaceTypeDecl.add(interfaceTypeDecl268.getTree());
					// AST REWRITE
					// elements: interfaceTypeDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 277:50: -> ^( TkInterface interfaceTypeDecl )
					{
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:277:53: ^( TkInterface interfaceTypeDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkInterface, "TkInterface"), root_1);
						adaptor.addChild(root_1, stream_interfaceTypeDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 5 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:278:32: objectDecl
					{
					pushFollow(FOLLOW_objectDecl_in_classDecl5899);
					objectDecl269=objectDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_objectDecl.add(objectDecl269.getTree());
					// AST REWRITE
					// elements: objectDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 278:43: -> ^( TkObject objectDecl )
					{
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:278:46: ^( TkObject objectDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkObject, "TkObject"), root_1);
						adaptor.addChild(root_1, stream_objectDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 6 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:279:32: recordDecl
					{
					pushFollow(FOLLOW_recordDecl_in_classDecl5940);
					recordDecl270=recordDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_recordDecl.add(recordDecl270.getTree());
					// AST REWRITE
					// elements: recordDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 279:43: -> ^( TkRecord recordDecl )
					{
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:279:46: ^( TkRecord recordDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkRecord, "TkRecord"), root_1);
						adaptor.addChild(root_1, stream_recordDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 7 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:280:32: recordHelperDecl
					{
					pushFollow(FOLLOW_recordHelperDecl_in_classDecl5981);
					recordHelperDecl271=recordHelperDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_recordHelperDecl.add(recordHelperDecl271.getTree());
					// AST REWRITE
					// elements: recordHelperDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 280:49: -> ^( TkRecordHelper recordHelperDecl )
					{
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:280:52: ^( TkRecordHelper recordHelperDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkRecordHelper, "TkRecordHelper"), root_1);
						adaptor.addChild(root_1, stream_recordHelperDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 66, classDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classDecl"


	public static class classTypeTypeDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classTypeTypeDecl"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:1: classTypeTypeDecl : 'class' 'of' typeId -> ^( TkClassOfType typeId ) ;
	public final DelphiParser.classTypeTypeDecl_return classTypeTypeDecl() throws RecognitionException {
		DelphiParser.classTypeTypeDecl_return retval = new DelphiParser.classTypeTypeDecl_return();
		retval.start = input.LT(1);
		int classTypeTypeDecl_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal272=null;
		Token string_literal273=null;
		ParserRuleReturnScope typeId274 =null;

		Object string_literal272_tree=null;
		Object string_literal273_tree=null;
		RewriteRuleTokenStream stream_OF=new RewriteRuleTokenStream(adaptor,"token OF");
		RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
		RewriteRuleSubtreeStream stream_typeId=new RewriteRuleSubtreeStream(adaptor,"rule typeId");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:30: ( 'class' 'of' typeId -> ^( TkClassOfType typeId ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:32: 'class' 'of' typeId
			{
			string_literal272=(Token)match(input,CLASS,FOLLOW_CLASS_in_classTypeTypeDecl6037); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_CLASS.add(string_literal272);

			string_literal273=(Token)match(input,OF,FOLLOW_OF_in_classTypeTypeDecl6039); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_OF.add(string_literal273);

			pushFollow(FOLLOW_typeId_in_classTypeTypeDecl6041);
			typeId274=typeId();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeId.add(typeId274.getTree());
			// AST REWRITE
			// elements: typeId
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 282:52: -> ^( TkClassOfType typeId )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:55: ^( TkClassOfType typeId )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClassOfType, "TkClassOfType"), root_1);
				adaptor.addChild(root_1, stream_typeId.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 67, classTypeTypeDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classTypeTypeDecl"


	public static class classTypeDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classTypeDecl"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:1: classTypeDecl : ( 'class' ( classState )? ( classParent )? ( classItem )* 'end' -> 'class' ^( TkClassParents ( classParent )? ) ( classItem )* | 'class' ( classParent )? -> 'class' ^( TkClassParents ( classParent )? ) );
	public final DelphiParser.classTypeDecl_return classTypeDecl() throws RecognitionException {
		DelphiParser.classTypeDecl_return retval = new DelphiParser.classTypeDecl_return();
		retval.start = input.LT(1);
		int classTypeDecl_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal275=null;
		Token string_literal279=null;
		Token string_literal280=null;
		ParserRuleReturnScope classState276 =null;
		ParserRuleReturnScope classParent277 =null;
		ParserRuleReturnScope classItem278 =null;
		ParserRuleReturnScope classParent281 =null;

		Object string_literal275_tree=null;
		Object string_literal279_tree=null;
		Object string_literal280_tree=null;
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
		RewriteRuleSubtreeStream stream_classState=new RewriteRuleSubtreeStream(adaptor,"rule classState");
		RewriteRuleSubtreeStream stream_classParent=new RewriteRuleSubtreeStream(adaptor,"rule classParent");
		RewriteRuleSubtreeStream stream_classItem=new RewriteRuleSubtreeStream(adaptor,"rule classItem");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:30: ( 'class' ( classState )? ( classParent )? ( classItem )* 'end' -> 'class' ^( TkClassParents ( classParent )? ) ( classItem )* | 'class' ( classParent )? -> 'class' ^( TkClassParents ( classParent )? ) )
			int alt87=2;
			int LA87_0 = input.LA(1);
			if ( (LA87_0==CLASS) ) {
				int LA87_1 = input.LA(2);
				if ( (synpred118_Delphi()) ) {
					alt87=1;
				}
				else if ( (true) ) {
					alt87=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 87, 0, input);
				throw nvae;
			}

			switch (alt87) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:32: 'class' ( classState )? ( classParent )? ( classItem )* 'end'
					{
					string_literal275=(Token)match(input,CLASS,FOLLOW_CLASS_in_classTypeDecl6101); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_CLASS.add(string_literal275);

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:40: ( classState )?
					int alt83=2;
					int LA83_0 = input.LA(1);
					if ( (LA83_0==ABSTRACT||LA83_0==SEALED) ) {
						alt83=1;
					}
					switch (alt83) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:41: classState
							{
							pushFollow(FOLLOW_classState_in_classTypeDecl6104);
							classState276=classState();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_classState.add(classState276.getTree());
							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:54: ( classParent )?
					int alt84=2;
					int LA84_0 = input.LA(1);
					if ( (LA84_0==LPAREN) ) {
						alt84=1;
					}
					switch (alt84) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:55: classParent
							{
							pushFollow(FOLLOW_classParent_in_classTypeDecl6109);
							classParent277=classParent();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_classParent.add(classParent277.getTree());
							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:69: ( classItem )*
					loop85:
					while (true) {
						int alt85=2;
						int LA85_0 = input.LA(1);
						if ( (LA85_0==ADD||LA85_0==ANSISTRING||LA85_0==AT||LA85_0==AUTOMATED||LA85_0==BREAK||LA85_0==CLASS||(LA85_0 >= CONST && LA85_0 <= CONTINUE)||LA85_0==DEFAULT||LA85_0==DESTRUCTOR||(LA85_0 >= DQ && LA85_0 <= DW)||LA85_0==EXIT||LA85_0==EXPORT||LA85_0==FALSE||LA85_0==FINAL||LA85_0==FUNCTION||LA85_0==IMPLEMENTS||LA85_0==INDEX||LA85_0==LBRACK||LA85_0==LOCAL||LA85_0==MESSAGE||LA85_0==NAME||LA85_0==OBJECT||LA85_0==OPERATOR||LA85_0==OUT||LA85_0==POINTER||(LA85_0 >= PRIVATE && LA85_0 <= PROCEDURE)||(LA85_0 >= PROPERTY && LA85_0 <= PUBLISHED)||(LA85_0 >= READ && LA85_0 <= READONLY)||(LA85_0 >= REFERENCE && LA85_0 <= REGISTER)||LA85_0==REMOVE||LA85_0==RESOURCESTRING||LA85_0==STATIC||(LA85_0 >= STORED && LA85_0 <= STRING)||LA85_0==THREADVAR||LA85_0==TRUE||LA85_0==TYPE||LA85_0==TkIdentifier||LA85_0==UNSAFE||(LA85_0 >= VAR && LA85_0 <= VIRTUAL)||(LA85_0 >= WRITE && LA85_0 <= WRITEONLY)||LA85_0==198) ) {
							alt85=1;
						}

						switch (alt85) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:70: classItem
							{
							pushFollow(FOLLOW_classItem_in_classTypeDecl6114);
							classItem278=classItem();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_classItem.add(classItem278.getTree());
							}
							break;

						default :
							break loop85;
						}
					}

					string_literal279=(Token)match(input,END,FOLLOW_END_in_classTypeDecl6118); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_END.add(string_literal279);

					// AST REWRITE
					// elements: classItem, CLASS, classParent
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 284:88: -> 'class' ^( TkClassParents ( classParent )? ) ( classItem )*
					{
						adaptor.addChild(root_0, stream_CLASS.nextNode());
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:99: ^( TkClassParents ( classParent )? )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClassParents, "TkClassParents"), root_1);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:116: ( classParent )?
						if ( stream_classParent.hasNext() ) {
							adaptor.addChild(root_1, stream_classParent.nextTree());
						}
						stream_classParent.reset();

						adaptor.addChild(root_0, root_1);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:132: ( classItem )*
						while ( stream_classItem.hasNext() ) {
							adaptor.addChild(root_0, stream_classItem.nextTree());
						}
						stream_classItem.reset();

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:285:32: 'class' ( classParent )?
					{
					string_literal280=(Token)match(input,CLASS,FOLLOW_CLASS_in_classTypeDecl6169); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_CLASS.add(string_literal280);

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:285:40: ( classParent )?
					int alt86=2;
					alt86 = dfa86.predict(input);
					switch (alt86) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:285:41: classParent
							{
							pushFollow(FOLLOW_classParent_in_classTypeDecl6172);
							classParent281=classParent();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_classParent.add(classParent281.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: CLASS, classParent
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 285:55: -> 'class' ^( TkClassParents ( classParent )? )
					{
						adaptor.addChild(root_0, stream_CLASS.nextNode());
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:285:66: ^( TkClassParents ( classParent )? )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClassParents, "TkClassParents"), root_1);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:285:83: ( classParent )?
						if ( stream_classParent.hasNext() ) {
							adaptor.addChild(root_1, stream_classParent.nextTree());
						}
						stream_classParent.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 68, classTypeDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classTypeDecl"


	public static class classState_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classState"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:287:1: classState : ( 'sealed' | 'abstract' );
	public final DelphiParser.classState_return classState() throws RecognitionException {
		DelphiParser.classState_return retval = new DelphiParser.classState_return();
		retval.start = input.LT(1);
		int classState_StartIndex = input.index();

		Object root_0 = null;

		Token set282=null;

		Object set282_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:287:30: ( 'sealed' | 'abstract' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set282=input.LT(1);
			if ( input.LA(1)==ABSTRACT||input.LA(1)==SEALED ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set282));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 69, classState_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classState"


	public static class classParent_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classParent"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:290:1: classParent : '(' genericTypeIdent ( ',' genericTypeIdent )* ')' -> genericTypeIdent ( genericTypeIdent )* ;
	public final DelphiParser.classParent_return classParent() throws RecognitionException {
		DelphiParser.classParent_return retval = new DelphiParser.classParent_return();
		retval.start = input.LT(1);
		int classParent_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal283=null;
		Token char_literal285=null;
		Token char_literal287=null;
		ParserRuleReturnScope genericTypeIdent284 =null;
		ParserRuleReturnScope genericTypeIdent286 =null;

		Object char_literal283_tree=null;
		Object char_literal285_tree=null;
		Object char_literal287_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_genericTypeIdent=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeIdent");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:290:30: ( '(' genericTypeIdent ( ',' genericTypeIdent )* ')' -> genericTypeIdent ( genericTypeIdent )* )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:290:32: '(' genericTypeIdent ( ',' genericTypeIdent )* ')'
			{
			char_literal283=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_classParent6329); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(char_literal283);

			pushFollow(FOLLOW_genericTypeIdent_in_classParent6331);
			genericTypeIdent284=genericTypeIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_genericTypeIdent.add(genericTypeIdent284.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:290:53: ( ',' genericTypeIdent )*
			loop88:
			while (true) {
				int alt88=2;
				int LA88_0 = input.LA(1);
				if ( (LA88_0==COMMA) ) {
					alt88=1;
				}

				switch (alt88) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:290:54: ',' genericTypeIdent
					{
					char_literal285=(Token)match(input,COMMA,FOLLOW_COMMA_in_classParent6334); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(char_literal285);

					pushFollow(FOLLOW_genericTypeIdent_in_classParent6336);
					genericTypeIdent286=genericTypeIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_genericTypeIdent.add(genericTypeIdent286.getTree());
					}
					break;

				default :
					break loop88;
				}
			}

			char_literal287=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_classParent6340); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(char_literal287);

			// AST REWRITE
			// elements: genericTypeIdent, genericTypeIdent
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 290:81: -> genericTypeIdent ( genericTypeIdent )*
			{
				adaptor.addChild(root_0, stream_genericTypeIdent.nextTree());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:290:101: ( genericTypeIdent )*
				while ( stream_genericTypeIdent.hasNext() ) {
					adaptor.addChild(root_0, stream_genericTypeIdent.nextTree());
				}
				stream_genericTypeIdent.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 70, classParent_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classParent"


	public static class classItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classItem"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:292:1: classItem : ( visibility | classMethod | classField | classProperty | constSection | typeSection | ( 'class' )? varSection );
	public final DelphiParser.classItem_return classItem() throws RecognitionException {
		DelphiParser.classItem_return retval = new DelphiParser.classItem_return();
		retval.start = input.LT(1);
		int classItem_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal294=null;
		ParserRuleReturnScope visibility288 =null;
		ParserRuleReturnScope classMethod289 =null;
		ParserRuleReturnScope classField290 =null;
		ParserRuleReturnScope classProperty291 =null;
		ParserRuleReturnScope constSection292 =null;
		ParserRuleReturnScope typeSection293 =null;
		ParserRuleReturnScope varSection295 =null;

		Object string_literal294_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:292:30: ( visibility | classMethod | classField | classProperty | constSection | typeSection | ( 'class' )? varSection )
			int alt90=7;
			switch ( input.LA(1) ) {
			case STRICT:
				{
				int LA90_1 = input.LA(2);
				if ( (synpred122_Delphi()) ) {
					alt90=1;
				}
				else if ( (synpred124_Delphi()) ) {
					alt90=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 90, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AUTOMATED:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case PUBLISHED:
				{
				alt90=1;
				}
				break;
			case LBRACK:
				{
				int LA90_7 = input.LA(2);
				if ( (synpred123_Delphi()) ) {
					alt90=2;
				}
				else if ( (synpred124_Delphi()) ) {
					alt90=3;
				}
				else if ( (synpred125_Delphi()) ) {
					alt90=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 90, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CLASS:
				{
				int LA90_8 = input.LA(2);
				if ( (synpred123_Delphi()) ) {
					alt90=2;
				}
				else if ( (synpred125_Delphi()) ) {
					alt90=4;
				}
				else if ( (true) ) {
					alt90=7;
				}

				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case FUNCTION:
			case PROCEDURE:
				{
				alt90=2;
				}
				break;
			case OPERATOR:
				{
				int LA90_11 = input.LA(2);
				if ( (synpred123_Delphi()) ) {
					alt90=2;
				}
				else if ( (synpred124_Delphi()) ) {
					alt90=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 90, 11, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ADD:
			case ANSISTRING:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case DQ:
			case DW:
			case EXIT:
			case EXPORT:
			case FALSE:
			case FINAL:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OUT:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STATIC:
			case STORED:
			case STRING:
			case TRUE:
			case TkIdentifier:
			case UNSAFE:
			case VARARGS:
			case VARIANT:
			case VIRTUAL:
			case WRITE:
			case WRITEONLY:
			case 198:
				{
				alt90=3;
				}
				break;
			case PROPERTY:
				{
				alt90=4;
				}
				break;
			case CONST:
			case RESOURCESTRING:
				{
				alt90=5;
				}
				break;
			case TYPE:
				{
				alt90=6;
				}
				break;
			case THREADVAR:
			case VAR:
				{
				alt90=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 90, 0, input);
				throw nvae;
			}
			switch (alt90) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:292:32: visibility
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_visibility_in_classItem6408);
					visibility288=visibility();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, visibility288.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:293:32: classMethod
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classMethod_in_classItem6441);
					classMethod289=classMethod();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classMethod289.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:294:32: classField
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classField_in_classItem6474);
					classField290=classField();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classField290.getTree());

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:295:32: classProperty
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classProperty_in_classItem6507);
					classProperty291=classProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classProperty291.getTree());

					}
					break;
				case 5 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:296:32: constSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_constSection_in_classItem6540);
					constSection292=constSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constSection292.getTree());

					}
					break;
				case 6 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:297:32: typeSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_typeSection_in_classItem6573);
					typeSection293=typeSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeSection293.getTree());

					}
					break;
				case 7 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:298:32: ( 'class' )? varSection
					{
					root_0 = (Object)adaptor.nil();


					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:298:32: ( 'class' )?
					int alt89=2;
					int LA89_0 = input.LA(1);
					if ( (LA89_0==CLASS) ) {
						alt89=1;
					}
					switch (alt89) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:298:33: 'class'
							{
							string_literal294=(Token)match(input,CLASS,FOLLOW_CLASS_in_classItem6607); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal294_tree = (Object)adaptor.create(string_literal294);
							adaptor.addChild(root_0, string_literal294_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_varSection_in_classItem6611);
					varSection295=varSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, varSection295.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 71, classItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classItem"


	public static class classHelperDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classHelperDecl"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:300:1: classHelperDecl : 'class' 'helper' ( classParent )? 'for' typeId ( classHelperItem )* 'end' -> ^( 'class' typeId ) ( classHelperItem )* ;
	public final DelphiParser.classHelperDecl_return classHelperDecl() throws RecognitionException {
		DelphiParser.classHelperDecl_return retval = new DelphiParser.classHelperDecl_return();
		retval.start = input.LT(1);
		int classHelperDecl_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal296=null;
		Token string_literal297=null;
		Token string_literal299=null;
		Token string_literal302=null;
		ParserRuleReturnScope classParent298 =null;
		ParserRuleReturnScope typeId300 =null;
		ParserRuleReturnScope classHelperItem301 =null;

		Object string_literal296_tree=null;
		Object string_literal297_tree=null;
		Object string_literal299_tree=null;
		Object string_literal302_tree=null;
		RewriteRuleTokenStream stream_HELPER=new RewriteRuleTokenStream(adaptor,"token HELPER");
		RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
		RewriteRuleSubtreeStream stream_classHelperItem=new RewriteRuleSubtreeStream(adaptor,"rule classHelperItem");
		RewriteRuleSubtreeStream stream_typeId=new RewriteRuleSubtreeStream(adaptor,"rule typeId");
		RewriteRuleSubtreeStream stream_classParent=new RewriteRuleSubtreeStream(adaptor,"rule classParent");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:300:30: ( 'class' 'helper' ( classParent )? 'for' typeId ( classHelperItem )* 'end' -> ^( 'class' typeId ) ( classHelperItem )* )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:300:32: 'class' 'helper' ( classParent )? 'for' typeId ( classHelperItem )* 'end'
			{
			string_literal296=(Token)match(input,CLASS,FOLLOW_CLASS_in_classHelperDecl6661); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_CLASS.add(string_literal296);

			string_literal297=(Token)match(input,HELPER,FOLLOW_HELPER_in_classHelperDecl6663); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_HELPER.add(string_literal297);

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:300:49: ( classParent )?
			int alt91=2;
			int LA91_0 = input.LA(1);
			if ( (LA91_0==LPAREN) ) {
				alt91=1;
			}
			switch (alt91) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:300:50: classParent
					{
					pushFollow(FOLLOW_classParent_in_classHelperDecl6666);
					classParent298=classParent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classParent.add(classParent298.getTree());
					}
					break;

			}

			string_literal299=(Token)match(input,FOR,FOLLOW_FOR_in_classHelperDecl6670); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_FOR.add(string_literal299);

			pushFollow(FOLLOW_typeId_in_classHelperDecl6672);
			typeId300=typeId();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeId.add(typeId300.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:300:77: ( classHelperItem )*
			loop92:
			while (true) {
				int alt92=2;
				int LA92_0 = input.LA(1);
				if ( (LA92_0==AUTOMATED||LA92_0==CLASS||(LA92_0 >= CONST && LA92_0 <= CONSTRUCTOR)||LA92_0==DESTRUCTOR||LA92_0==FUNCTION||LA92_0==LBRACK||LA92_0==OPERATOR||(LA92_0 >= PRIVATE && LA92_0 <= PROCEDURE)||(LA92_0 >= PROPERTY && LA92_0 <= PUBLISHED)||LA92_0==RESOURCESTRING||LA92_0==STRICT||LA92_0==THREADVAR||LA92_0==TYPE||LA92_0==VAR) ) {
					alt92=1;
				}

				switch (alt92) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:300:78: classHelperItem
					{
					pushFollow(FOLLOW_classHelperItem_in_classHelperDecl6675);
					classHelperItem301=classHelperItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classHelperItem.add(classHelperItem301.getTree());
					}
					break;

				default :
					break loop92;
				}
			}

			string_literal302=(Token)match(input,END,FOLLOW_END_in_classHelperDecl6679); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_END.add(string_literal302);

			// AST REWRITE
			// elements: classHelperItem, CLASS, typeId
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 300:102: -> ^( 'class' typeId ) ( classHelperItem )*
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:300:105: ^( 'class' typeId )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_CLASS.nextNode(), root_1);
				adaptor.addChild(root_1, stream_typeId.nextTree());
				adaptor.addChild(root_0, root_1);
				}

				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:300:124: ( classHelperItem )*
				while ( stream_classHelperItem.hasNext() ) {
					adaptor.addChild(root_0, stream_classHelperItem.nextTree());
				}
				stream_classHelperItem.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 72, classHelperDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classHelperDecl"


	public static class classHelperItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classHelperItem"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:302:1: classHelperItem : ( visibility | classMethod | classProperty | constSection | typeSection | ( 'class' )? varSection );
	public final DelphiParser.classHelperItem_return classHelperItem() throws RecognitionException {
		DelphiParser.classHelperItem_return retval = new DelphiParser.classHelperItem_return();
		retval.start = input.LT(1);
		int classHelperItem_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal308=null;
		ParserRuleReturnScope visibility303 =null;
		ParserRuleReturnScope classMethod304 =null;
		ParserRuleReturnScope classProperty305 =null;
		ParserRuleReturnScope constSection306 =null;
		ParserRuleReturnScope typeSection307 =null;
		ParserRuleReturnScope varSection309 =null;

		Object string_literal308_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:302:30: ( visibility | classMethod | classProperty | constSection | typeSection | ( 'class' )? varSection )
			int alt94=6;
			switch ( input.LA(1) ) {
			case AUTOMATED:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case PUBLISHED:
			case STRICT:
				{
				alt94=1;
				}
				break;
			case LBRACK:
				{
				int LA94_7 = input.LA(2);
				if ( (synpred132_Delphi()) ) {
					alt94=2;
				}
				else if ( (synpred133_Delphi()) ) {
					alt94=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 94, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CLASS:
				{
				int LA94_8 = input.LA(2);
				if ( (synpred132_Delphi()) ) {
					alt94=2;
				}
				else if ( (synpred133_Delphi()) ) {
					alt94=3;
				}
				else if ( (true) ) {
					alt94=6;
				}

				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case FUNCTION:
			case OPERATOR:
			case PROCEDURE:
				{
				alt94=2;
				}
				break;
			case PROPERTY:
				{
				alt94=3;
				}
				break;
			case CONST:
			case RESOURCESTRING:
				{
				alt94=4;
				}
				break;
			case TYPE:
				{
				alt94=5;
				}
				break;
			case THREADVAR:
			case VAR:
				{
				alt94=6;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 94, 0, input);
				throw nvae;
			}
			switch (alt94) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:302:32: visibility
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_visibility_in_classHelperItem6744);
					visibility303=visibility();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, visibility303.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:303:32: classMethod
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classMethod_in_classHelperItem6777);
					classMethod304=classMethod();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classMethod304.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:304:32: classProperty
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classProperty_in_classHelperItem6810);
					classProperty305=classProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classProperty305.getTree());

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:305:32: constSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_constSection_in_classHelperItem6843);
					constSection306=constSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constSection306.getTree());

					}
					break;
				case 5 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:306:32: typeSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_typeSection_in_classHelperItem6876);
					typeSection307=typeSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeSection307.getTree());

					}
					break;
				case 6 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:307:32: ( 'class' )? varSection
					{
					root_0 = (Object)adaptor.nil();


					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:307:32: ( 'class' )?
					int alt93=2;
					int LA93_0 = input.LA(1);
					if ( (LA93_0==CLASS) ) {
						alt93=1;
					}
					switch (alt93) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:307:33: 'class'
							{
							string_literal308=(Token)match(input,CLASS,FOLLOW_CLASS_in_classHelperItem6910); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal308_tree = (Object)adaptor.create(string_literal308);
							adaptor.addChild(root_0, string_literal308_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_varSection_in_classHelperItem6914);
					varSection309=varSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, varSection309.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 73, classHelperItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classHelperItem"


	public static class interfaceTypeDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "interfaceTypeDecl"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:309:1: interfaceTypeDecl : ( interfaceKey ( classParent )? ( interfaceGuid )? ( interfaceItem )* 'end' -> interfaceKey ^( TkClassParents ( classParent )? ) ^( TkGuid ( interfaceGuid )? ) ( interfaceItem )* | interfaceKey ( classParent )? -> interfaceKey ^( TkClassParents ( classParent )? ) );
	public final DelphiParser.interfaceTypeDecl_return interfaceTypeDecl() throws RecognitionException {
		DelphiParser.interfaceTypeDecl_return retval = new DelphiParser.interfaceTypeDecl_return();
		retval.start = input.LT(1);
		int interfaceTypeDecl_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal314=null;
		ParserRuleReturnScope interfaceKey310 =null;
		ParserRuleReturnScope classParent311 =null;
		ParserRuleReturnScope interfaceGuid312 =null;
		ParserRuleReturnScope interfaceItem313 =null;
		ParserRuleReturnScope interfaceKey315 =null;
		ParserRuleReturnScope classParent316 =null;

		Object string_literal314_tree=null;
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleSubtreeStream stream_interfaceItem=new RewriteRuleSubtreeStream(adaptor,"rule interfaceItem");
		RewriteRuleSubtreeStream stream_interfaceKey=new RewriteRuleSubtreeStream(adaptor,"rule interfaceKey");
		RewriteRuleSubtreeStream stream_classParent=new RewriteRuleSubtreeStream(adaptor,"rule classParent");
		RewriteRuleSubtreeStream stream_interfaceGuid=new RewriteRuleSubtreeStream(adaptor,"rule interfaceGuid");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:309:30: ( interfaceKey ( classParent )? ( interfaceGuid )? ( interfaceItem )* 'end' -> interfaceKey ^( TkClassParents ( classParent )? ) ^( TkGuid ( interfaceGuid )? ) ( interfaceItem )* | interfaceKey ( classParent )? -> interfaceKey ^( TkClassParents ( classParent )? ) )
			int alt99=2;
			int LA99_0 = input.LA(1);
			if ( (LA99_0==DISPINTERFACE||LA99_0==INTERFACE) ) {
				int LA99_1 = input.LA(2);
				if ( (synpred140_Delphi()) ) {
					alt99=1;
				}
				else if ( (true) ) {
					alt99=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 99, 0, input);
				throw nvae;
			}

			switch (alt99) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:309:32: interfaceKey ( classParent )? ( interfaceGuid )? ( interfaceItem )* 'end'
					{
					pushFollow(FOLLOW_interfaceKey_in_interfaceTypeDecl6962);
					interfaceKey310=interfaceKey();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_interfaceKey.add(interfaceKey310.getTree());
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:309:45: ( classParent )?
					int alt95=2;
					int LA95_0 = input.LA(1);
					if ( (LA95_0==LPAREN) ) {
						alt95=1;
					}
					switch (alt95) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:309:46: classParent
							{
							pushFollow(FOLLOW_classParent_in_interfaceTypeDecl6965);
							classParent311=classParent();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_classParent.add(classParent311.getTree());
							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:309:60: ( interfaceGuid )?
					int alt96=2;
					int LA96_0 = input.LA(1);
					if ( (LA96_0==LBRACK) ) {
						int LA96_1 = input.LA(2);
						if ( (LA96_1==QuotedString) ) {
							alt96=1;
						}
					}
					switch (alt96) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:309:61: interfaceGuid
							{
							pushFollow(FOLLOW_interfaceGuid_in_interfaceTypeDecl6970);
							interfaceGuid312=interfaceGuid();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_interfaceGuid.add(interfaceGuid312.getTree());
							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:309:77: ( interfaceItem )*
					loop97:
					while (true) {
						int alt97=2;
						int LA97_0 = input.LA(1);
						if ( (LA97_0==CLASS||LA97_0==CONSTRUCTOR||LA97_0==DESTRUCTOR||LA97_0==FUNCTION||LA97_0==LBRACK||LA97_0==OPERATOR||LA97_0==PROCEDURE||LA97_0==PROPERTY) ) {
							alt97=1;
						}

						switch (alt97) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:309:78: interfaceItem
							{
							pushFollow(FOLLOW_interfaceItem_in_interfaceTypeDecl6975);
							interfaceItem313=interfaceItem();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_interfaceItem.add(interfaceItem313.getTree());
							}
							break;

						default :
							break loop97;
						}
					}

					string_literal314=(Token)match(input,END,FOLLOW_END_in_interfaceTypeDecl6979); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_END.add(string_literal314);

					// AST REWRITE
					// elements: interfaceItem, interfaceGuid, interfaceKey, classParent
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 310:31: -> interfaceKey ^( TkClassParents ( classParent )? ) ^( TkGuid ( interfaceGuid )? ) ( interfaceItem )*
					{
						adaptor.addChild(root_0, stream_interfaceKey.nextTree());
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:310:47: ^( TkClassParents ( classParent )? )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClassParents, "TkClassParents"), root_1);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:310:64: ( classParent )?
						if ( stream_classParent.hasNext() ) {
							adaptor.addChild(root_1, stream_classParent.nextTree());
						}
						stream_classParent.reset();

						adaptor.addChild(root_0, root_1);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:310:81: ^( TkGuid ( interfaceGuid )? )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkGuid, "TkGuid"), root_1);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:310:90: ( interfaceGuid )?
						if ( stream_interfaceGuid.hasNext() ) {
							adaptor.addChild(root_1, stream_interfaceGuid.nextTree());
						}
						stream_interfaceGuid.reset();

						adaptor.addChild(root_0, root_1);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:310:108: ( interfaceItem )*
						while ( stream_interfaceItem.hasNext() ) {
							adaptor.addChild(root_0, stream_interfaceItem.nextTree());
						}
						stream_interfaceItem.reset();

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:311:32: interfaceKey ( classParent )?
					{
					pushFollow(FOLLOW_interfaceKey_in_interfaceTypeDecl7070);
					interfaceKey315=interfaceKey();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_interfaceKey.add(interfaceKey315.getTree());
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:311:45: ( classParent )?
					int alt98=2;
					alt98 = dfa98.predict(input);
					switch (alt98) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:311:46: classParent
							{
							pushFollow(FOLLOW_classParent_in_interfaceTypeDecl7073);
							classParent316=classParent();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_classParent.add(classParent316.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: interfaceKey, classParent
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 312:31: -> interfaceKey ^( TkClassParents ( classParent )? )
					{
						adaptor.addChild(root_0, stream_interfaceKey.nextTree());
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:312:47: ^( TkClassParents ( classParent )? )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClassParents, "TkClassParents"), root_1);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:312:64: ( classParent )?
						if ( stream_classParent.hasNext() ) {
							adaptor.addChild(root_1, stream_classParent.nextTree());
						}
						stream_classParent.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 74, interfaceTypeDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interfaceTypeDecl"


	public static class interfaceKey_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "interfaceKey"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:314:1: interfaceKey : ( 'interface' | 'dispinterface' );
	public final DelphiParser.interfaceKey_return interfaceKey() throws RecognitionException {
		DelphiParser.interfaceKey_return retval = new DelphiParser.interfaceKey_return();
		retval.start = input.LT(1);
		int interfaceKey_StartIndex = input.index();

		Object root_0 = null;

		Token set317=null;

		Object set317_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:314:30: ( 'interface' | 'dispinterface' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set317=input.LT(1);
			if ( input.LA(1)==DISPINTERFACE||input.LA(1)==INTERFACE ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set317));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 75, interfaceKey_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interfaceKey"


	public static class interfaceGuid_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "interfaceGuid"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:317:1: interfaceGuid : '[' QuotedString ']' -> QuotedString ;
	public final DelphiParser.interfaceGuid_return interfaceGuid() throws RecognitionException {
		DelphiParser.interfaceGuid_return retval = new DelphiParser.interfaceGuid_return();
		retval.start = input.LT(1);
		int interfaceGuid_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal318=null;
		Token QuotedString319=null;
		Token char_literal320=null;

		Object char_literal318_tree=null;
		Object QuotedString319_tree=null;
		Object char_literal320_tree=null;
		RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
		RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
		RewriteRuleTokenStream stream_QuotedString=new RewriteRuleTokenStream(adaptor,"token QuotedString");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:317:30: ( '[' QuotedString ']' -> QuotedString )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:317:32: '[' QuotedString ']'
			{
			char_literal318=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_interfaceGuid7256); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LBRACK.add(char_literal318);

			QuotedString319=(Token)match(input,QuotedString,FOLLOW_QuotedString_in_interfaceGuid7258); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_QuotedString.add(QuotedString319);

			char_literal320=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_interfaceGuid7260); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RBRACK.add(char_literal320);

			// AST REWRITE
			// elements: QuotedString
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 317:53: -> QuotedString
			{
				adaptor.addChild(root_0, stream_QuotedString.nextNode());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 76, interfaceGuid_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interfaceGuid"


	public static class interfaceItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "interfaceItem"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:319:1: interfaceItem : ( classMethod | ( 'class' )? classProperty );
	public final DelphiParser.interfaceItem_return interfaceItem() throws RecognitionException {
		DelphiParser.interfaceItem_return retval = new DelphiParser.interfaceItem_return();
		retval.start = input.LT(1);
		int interfaceItem_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal322=null;
		ParserRuleReturnScope classMethod321 =null;
		ParserRuleReturnScope classProperty323 =null;

		Object string_literal322_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:319:30: ( classMethod | ( 'class' )? classProperty )
			int alt101=2;
			switch ( input.LA(1) ) {
			case LBRACK:
				{
				int LA101_1 = input.LA(2);
				if ( (synpred143_Delphi()) ) {
					alt101=1;
				}
				else if ( (true) ) {
					alt101=2;
				}

				}
				break;
			case CLASS:
				{
				int LA101_2 = input.LA(2);
				if ( (synpred143_Delphi()) ) {
					alt101=1;
				}
				else if ( (true) ) {
					alt101=2;
				}

				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case FUNCTION:
			case OPERATOR:
			case PROCEDURE:
				{
				alt101=1;
				}
				break;
			case PROPERTY:
				{
				alt101=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 101, 0, input);
				throw nvae;
			}
			switch (alt101) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:319:32: classMethod
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classMethod_in_interfaceItem7316);
					classMethod321=classMethod();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classMethod321.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:320:32: ( 'class' )? classProperty
					{
					root_0 = (Object)adaptor.nil();


					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:320:32: ( 'class' )?
					int alt100=2;
					int LA100_0 = input.LA(1);
					if ( (LA100_0==CLASS) ) {
						int LA100_1 = input.LA(2);
						if ( (synpred144_Delphi()) ) {
							alt100=1;
						}
					}
					switch (alt100) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:320:33: 'class'
							{
							string_literal322=(Token)match(input,CLASS,FOLLOW_CLASS_in_interfaceItem7350); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal322_tree = (Object)adaptor.create(string_literal322);
							adaptor.addChild(root_0, string_literal322_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_classProperty_in_interfaceItem7354);
					classProperty323=classProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classProperty323.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 77, interfaceItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interfaceItem"


	public static class objectDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "objectDecl"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:322:1: objectDecl : 'object' ( classParent )? ( objectItem )* 'end' -> 'object' ( classParent )? ( objectItem )* ;
	public final DelphiParser.objectDecl_return objectDecl() throws RecognitionException {
		DelphiParser.objectDecl_return retval = new DelphiParser.objectDecl_return();
		retval.start = input.LT(1);
		int objectDecl_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal324=null;
		Token string_literal327=null;
		ParserRuleReturnScope classParent325 =null;
		ParserRuleReturnScope objectItem326 =null;

		Object string_literal324_tree=null;
		Object string_literal327_tree=null;
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleTokenStream stream_OBJECT=new RewriteRuleTokenStream(adaptor,"token OBJECT");
		RewriteRuleSubtreeStream stream_objectItem=new RewriteRuleSubtreeStream(adaptor,"rule objectItem");
		RewriteRuleSubtreeStream stream_classParent=new RewriteRuleSubtreeStream(adaptor,"rule classParent");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:322:30: ( 'object' ( classParent )? ( objectItem )* 'end' -> 'object' ( classParent )? ( objectItem )* )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:322:32: 'object' ( classParent )? ( objectItem )* 'end'
			{
			string_literal324=(Token)match(input,OBJECT,FOLLOW_OBJECT_in_objectDecl7409); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_OBJECT.add(string_literal324);

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:322:41: ( classParent )?
			int alt102=2;
			int LA102_0 = input.LA(1);
			if ( (LA102_0==LPAREN) ) {
				alt102=1;
			}
			switch (alt102) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:322:42: classParent
					{
					pushFollow(FOLLOW_classParent_in_objectDecl7412);
					classParent325=classParent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classParent.add(classParent325.getTree());
					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:322:56: ( objectItem )*
			loop103:
			while (true) {
				int alt103=2;
				int LA103_0 = input.LA(1);
				if ( (LA103_0==ADD||LA103_0==ANSISTRING||LA103_0==AT||LA103_0==AUTOMATED||LA103_0==BREAK||LA103_0==CLASS||(LA103_0 >= CONSTRUCTOR && LA103_0 <= CONTINUE)||LA103_0==DEFAULT||LA103_0==DESTRUCTOR||(LA103_0 >= DQ && LA103_0 <= DW)||LA103_0==EXIT||LA103_0==EXPORT||LA103_0==FALSE||LA103_0==FINAL||LA103_0==FUNCTION||LA103_0==IMPLEMENTS||LA103_0==INDEX||LA103_0==LBRACK||LA103_0==LOCAL||LA103_0==MESSAGE||LA103_0==NAME||LA103_0==OBJECT||LA103_0==OPERATOR||LA103_0==OUT||LA103_0==POINTER||(LA103_0 >= PRIVATE && LA103_0 <= PROCEDURE)||(LA103_0 >= PROTECTED && LA103_0 <= PUBLISHED)||(LA103_0 >= READ && LA103_0 <= READONLY)||(LA103_0 >= REFERENCE && LA103_0 <= REGISTER)||LA103_0==REMOVE||LA103_0==STATIC||(LA103_0 >= STORED && LA103_0 <= STRING)||LA103_0==TRUE||LA103_0==TkIdentifier||LA103_0==UNSAFE||(LA103_0 >= VARARGS && LA103_0 <= VIRTUAL)||(LA103_0 >= WRITE && LA103_0 <= WRITEONLY)||LA103_0==198) ) {
					alt103=1;
				}

				switch (alt103) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:322:57: objectItem
					{
					pushFollow(FOLLOW_objectItem_in_objectDecl7417);
					objectItem326=objectItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_objectItem.add(objectItem326.getTree());
					}
					break;

				default :
					break loop103;
				}
			}

			string_literal327=(Token)match(input,END,FOLLOW_END_in_objectDecl7421); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_END.add(string_literal327);

			// AST REWRITE
			// elements: classParent, objectItem, OBJECT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 322:76: -> 'object' ( classParent )? ( objectItem )*
			{
				adaptor.addChild(root_0, stream_OBJECT.nextNode());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:322:88: ( classParent )?
				if ( stream_classParent.hasNext() ) {
					adaptor.addChild(root_0, stream_classParent.nextTree());
				}
				stream_classParent.reset();

				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:322:103: ( objectItem )*
				while ( stream_objectItem.hasNext() ) {
					adaptor.addChild(root_0, stream_objectItem.nextTree());
				}
				stream_objectItem.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 78, objectDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "objectDecl"


	public static class objectItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "objectItem"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:324:1: objectItem : ( visibility | classMethod | classField );
	public final DelphiParser.objectItem_return objectItem() throws RecognitionException {
		DelphiParser.objectItem_return retval = new DelphiParser.objectItem_return();
		retval.start = input.LT(1);
		int objectItem_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope visibility328 =null;
		ParserRuleReturnScope classMethod329 =null;
		ParserRuleReturnScope classField330 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:324:30: ( visibility | classMethod | classField )
			int alt104=3;
			switch ( input.LA(1) ) {
			case STRICT:
				{
				int LA104_1 = input.LA(2);
				if ( (synpred147_Delphi()) ) {
					alt104=1;
				}
				else if ( (true) ) {
					alt104=3;
				}

				}
				break;
			case AUTOMATED:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case PUBLISHED:
				{
				alt104=1;
				}
				break;
			case LBRACK:
				{
				int LA104_7 = input.LA(2);
				if ( (synpred148_Delphi()) ) {
					alt104=2;
				}
				else if ( (true) ) {
					alt104=3;
				}

				}
				break;
			case CLASS:
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case FUNCTION:
			case PROCEDURE:
				{
				alt104=2;
				}
				break;
			case OPERATOR:
				{
				int LA104_11 = input.LA(2);
				if ( (synpred148_Delphi()) ) {
					alt104=2;
				}
				else if ( (true) ) {
					alt104=3;
				}

				}
				break;
			case ADD:
			case ANSISTRING:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case DQ:
			case DW:
			case EXIT:
			case EXPORT:
			case FALSE:
			case FINAL:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OUT:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STATIC:
			case STORED:
			case STRING:
			case TRUE:
			case TkIdentifier:
			case UNSAFE:
			case VARARGS:
			case VARIANT:
			case VIRTUAL:
			case WRITE:
			case WRITEONLY:
			case 198:
				{
				alt104=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 104, 0, input);
				throw nvae;
			}
			switch (alt104) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:324:32: visibility
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_visibility_in_objectItem7490);
					visibility328=visibility();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, visibility328.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:325:32: classMethod
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classMethod_in_objectItem7523);
					classMethod329=classMethod();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classMethod329.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:326:32: classField
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classField_in_objectItem7556);
					classField330=classField();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classField330.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 79, objectItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "objectItem"


	public static class recordDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordDecl"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:328:1: recordDecl : ( simpleRecord | variantRecord );
	public final DelphiParser.recordDecl_return recordDecl() throws RecognitionException {
		DelphiParser.recordDecl_return retval = new DelphiParser.recordDecl_return();
		retval.start = input.LT(1);
		int recordDecl_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope simpleRecord331 =null;
		ParserRuleReturnScope variantRecord332 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:328:30: ( simpleRecord | variantRecord )
			int alt105=2;
			int LA105_0 = input.LA(1);
			if ( (LA105_0==RECORD) ) {
				int LA105_1 = input.LA(2);
				if ( (synpred149_Delphi()) ) {
					alt105=1;
				}
				else if ( (true) ) {
					alt105=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 105, 0, input);
				throw nvae;
			}

			switch (alt105) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:328:32: simpleRecord
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_simpleRecord_in_recordDecl7611);
					simpleRecord331=simpleRecord();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleRecord331.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:329:32: variantRecord
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_variantRecord_in_recordDecl7644);
					variantRecord332=variantRecord();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, variantRecord332.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 80, recordDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordDecl"


	public static class simpleRecord_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "simpleRecord"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:331:1: simpleRecord : 'record' ( recordField )* ( recordItem )* 'end' -> 'record' ( recordField )* ( recordItem )* ;
	public final DelphiParser.simpleRecord_return simpleRecord() throws RecognitionException {
		DelphiParser.simpleRecord_return retval = new DelphiParser.simpleRecord_return();
		retval.start = input.LT(1);
		int simpleRecord_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal333=null;
		Token string_literal336=null;
		ParserRuleReturnScope recordField334 =null;
		ParserRuleReturnScope recordItem335 =null;

		Object string_literal333_tree=null;
		Object string_literal336_tree=null;
		RewriteRuleTokenStream stream_RECORD=new RewriteRuleTokenStream(adaptor,"token RECORD");
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleSubtreeStream stream_recordField=new RewriteRuleSubtreeStream(adaptor,"rule recordField");
		RewriteRuleSubtreeStream stream_recordItem=new RewriteRuleSubtreeStream(adaptor,"rule recordItem");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:331:30: ( 'record' ( recordField )* ( recordItem )* 'end' -> 'record' ( recordField )* ( recordItem )* )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:331:32: 'record' ( recordField )* ( recordItem )* 'end'
			{
			string_literal333=(Token)match(input,RECORD,FOLLOW_RECORD_in_simpleRecord7697); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RECORD.add(string_literal333);

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:331:41: ( recordField )*
			loop106:
			while (true) {
				int alt106=2;
				alt106 = dfa106.predict(input);
				switch (alt106) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:331:42: recordField
					{
					pushFollow(FOLLOW_recordField_in_simpleRecord7700);
					recordField334=recordField();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_recordField.add(recordField334.getTree());
					}
					break;

				default :
					break loop106;
				}
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:331:56: ( recordItem )*
			loop107:
			while (true) {
				int alt107=2;
				int LA107_0 = input.LA(1);
				if ( (LA107_0==ADD||LA107_0==ANSISTRING||LA107_0==AT||LA107_0==AUTOMATED||LA107_0==BREAK||LA107_0==CLASS||(LA107_0 >= CONST && LA107_0 <= CONTINUE)||LA107_0==DEFAULT||LA107_0==DESTRUCTOR||(LA107_0 >= DQ && LA107_0 <= DW)||LA107_0==EXIT||LA107_0==EXPORT||LA107_0==FALSE||LA107_0==FINAL||LA107_0==FUNCTION||LA107_0==IMPLEMENTS||LA107_0==INDEX||LA107_0==LBRACK||LA107_0==LOCAL||LA107_0==MESSAGE||LA107_0==NAME||LA107_0==OBJECT||LA107_0==OPERATOR||LA107_0==OUT||LA107_0==POINTER||(LA107_0 >= PRIVATE && LA107_0 <= PROCEDURE)||(LA107_0 >= PROPERTY && LA107_0 <= PUBLISHED)||(LA107_0 >= READ && LA107_0 <= READONLY)||(LA107_0 >= REFERENCE && LA107_0 <= REGISTER)||LA107_0==REMOVE||LA107_0==RESOURCESTRING||LA107_0==STATIC||(LA107_0 >= STORED && LA107_0 <= STRING)||LA107_0==THREADVAR||LA107_0==TRUE||LA107_0==TYPE||LA107_0==TkIdentifier||LA107_0==UNSAFE||(LA107_0 >= VAR && LA107_0 <= VIRTUAL)||(LA107_0 >= WRITE && LA107_0 <= WRITEONLY)||LA107_0==198) ) {
					alt107=1;
				}

				switch (alt107) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:331:57: recordItem
					{
					pushFollow(FOLLOW_recordItem_in_simpleRecord7705);
					recordItem335=recordItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_recordItem.add(recordItem335.getTree());
					}
					break;

				default :
					break loop107;
				}
			}

			string_literal336=(Token)match(input,END,FOLLOW_END_in_simpleRecord7709); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_END.add(string_literal336);

			// AST REWRITE
			// elements: RECORD, recordField, recordItem
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 331:76: -> 'record' ( recordField )* ( recordItem )*
			{
				adaptor.addChild(root_0, stream_RECORD.nextNode());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:331:88: ( recordField )*
				while ( stream_recordField.hasNext() ) {
					adaptor.addChild(root_0, stream_recordField.nextTree());
				}
				stream_recordField.reset();

				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:331:103: ( recordItem )*
				while ( stream_recordItem.hasNext() ) {
					adaptor.addChild(root_0, stream_recordItem.nextTree());
				}
				stream_recordItem.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 81, simpleRecord_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "simpleRecord"


	public static class variantRecord_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "variantRecord"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:333:1: variantRecord : 'record' ( recordField )* recordVariantSection 'end' -> 'record' ( recordField )* recordVariantSection ;
	public final DelphiParser.variantRecord_return variantRecord() throws RecognitionException {
		DelphiParser.variantRecord_return retval = new DelphiParser.variantRecord_return();
		retval.start = input.LT(1);
		int variantRecord_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal337=null;
		Token string_literal340=null;
		ParserRuleReturnScope recordField338 =null;
		ParserRuleReturnScope recordVariantSection339 =null;

		Object string_literal337_tree=null;
		Object string_literal340_tree=null;
		RewriteRuleTokenStream stream_RECORD=new RewriteRuleTokenStream(adaptor,"token RECORD");
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleSubtreeStream stream_recordVariantSection=new RewriteRuleSubtreeStream(adaptor,"rule recordVariantSection");
		RewriteRuleSubtreeStream stream_recordField=new RewriteRuleSubtreeStream(adaptor,"rule recordField");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:333:30: ( 'record' ( recordField )* recordVariantSection 'end' -> 'record' ( recordField )* recordVariantSection )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:333:32: 'record' ( recordField )* recordVariantSection 'end'
			{
			string_literal337=(Token)match(input,RECORD,FOLLOW_RECORD_in_variantRecord7775); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RECORD.add(string_literal337);

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:333:41: ( recordField )*
			loop108:
			while (true) {
				int alt108=2;
				int LA108_0 = input.LA(1);
				if ( (LA108_0==ADD||LA108_0==ANSISTRING||LA108_0==AT||LA108_0==BREAK||(LA108_0 >= CONTAINS && LA108_0 <= CONTINUE)||LA108_0==DEFAULT||(LA108_0 >= DQ && LA108_0 <= DW)||LA108_0==EXIT||LA108_0==EXPORT||LA108_0==FALSE||LA108_0==FINAL||LA108_0==IMPLEMENTS||LA108_0==INDEX||LA108_0==LOCAL||LA108_0==MESSAGE||LA108_0==NAME||LA108_0==OBJECT||LA108_0==OPERATOR||LA108_0==OUT||LA108_0==POINTER||(LA108_0 >= READ && LA108_0 <= READONLY)||(LA108_0 >= REFERENCE && LA108_0 <= REGISTER)||LA108_0==REMOVE||LA108_0==STATIC||(LA108_0 >= STORED && LA108_0 <= STRING)||LA108_0==TRUE||LA108_0==TkIdentifier||LA108_0==UNSAFE||(LA108_0 >= VARARGS && LA108_0 <= VIRTUAL)||(LA108_0 >= WRITE && LA108_0 <= WRITEONLY)||LA108_0==198) ) {
					alt108=1;
				}

				switch (alt108) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:333:42: recordField
					{
					pushFollow(FOLLOW_recordField_in_variantRecord7778);
					recordField338=recordField();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_recordField.add(recordField338.getTree());
					}
					break;

				default :
					break loop108;
				}
			}

			pushFollow(FOLLOW_recordVariantSection_in_variantRecord7782);
			recordVariantSection339=recordVariantSection();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_recordVariantSection.add(recordVariantSection339.getTree());
			string_literal340=(Token)match(input,END,FOLLOW_END_in_variantRecord7784); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_END.add(string_literal340);

			// AST REWRITE
			// elements: recordField, RECORD, recordVariantSection
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 333:83: -> 'record' ( recordField )* recordVariantSection
			{
				adaptor.addChild(root_0, stream_RECORD.nextNode());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:333:95: ( recordField )*
				while ( stream_recordField.hasNext() ) {
					adaptor.addChild(root_0, stream_recordField.nextTree());
				}
				stream_recordField.reset();

				adaptor.addChild(root_0, stream_recordVariantSection.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 82, variantRecord_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "variantRecord"


	public static class recordItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordItem"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:335:1: recordItem : ( visibility | classMethod | classProperty | constSection | typeSection | recordField | ( 'class' )? varSection );
	public final DelphiParser.recordItem_return recordItem() throws RecognitionException {
		DelphiParser.recordItem_return retval = new DelphiParser.recordItem_return();
		retval.start = input.LT(1);
		int recordItem_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal347=null;
		ParserRuleReturnScope visibility341 =null;
		ParserRuleReturnScope classMethod342 =null;
		ParserRuleReturnScope classProperty343 =null;
		ParserRuleReturnScope constSection344 =null;
		ParserRuleReturnScope typeSection345 =null;
		ParserRuleReturnScope recordField346 =null;
		ParserRuleReturnScope varSection348 =null;

		Object string_literal347_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:335:30: ( visibility | classMethod | classProperty | constSection | typeSection | recordField | ( 'class' )? varSection )
			int alt110=7;
			switch ( input.LA(1) ) {
			case STRICT:
				{
				int LA110_1 = input.LA(2);
				if ( (synpred153_Delphi()) ) {
					alt110=1;
				}
				else if ( (synpred158_Delphi()) ) {
					alt110=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 110, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AUTOMATED:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case PUBLISHED:
				{
				alt110=1;
				}
				break;
			case LBRACK:
				{
				int LA110_7 = input.LA(2);
				if ( (synpred154_Delphi()) ) {
					alt110=2;
				}
				else if ( (synpred155_Delphi()) ) {
					alt110=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 110, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CLASS:
				{
				int LA110_8 = input.LA(2);
				if ( (synpred154_Delphi()) ) {
					alt110=2;
				}
				else if ( (synpred155_Delphi()) ) {
					alt110=3;
				}
				else if ( (true) ) {
					alt110=7;
				}

				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case FUNCTION:
			case PROCEDURE:
				{
				alt110=2;
				}
				break;
			case OPERATOR:
				{
				int LA110_11 = input.LA(2);
				if ( (synpred154_Delphi()) ) {
					alt110=2;
				}
				else if ( (synpred158_Delphi()) ) {
					alt110=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 110, 11, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PROPERTY:
				{
				alt110=3;
				}
				break;
			case CONST:
			case RESOURCESTRING:
				{
				alt110=4;
				}
				break;
			case TYPE:
				{
				alt110=5;
				}
				break;
			case ADD:
			case ANSISTRING:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case DQ:
			case DW:
			case EXIT:
			case EXPORT:
			case FALSE:
			case FINAL:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OUT:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STATIC:
			case STORED:
			case STRING:
			case TRUE:
			case TkIdentifier:
			case UNSAFE:
			case VARARGS:
			case VARIANT:
			case VIRTUAL:
			case WRITE:
			case WRITEONLY:
			case 198:
				{
				alt110=6;
				}
				break;
			case THREADVAR:
			case VAR:
				{
				alt110=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 110, 0, input);
				throw nvae;
			}
			switch (alt110) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:335:32: visibility
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_visibility_in_recordItem7850);
					visibility341=visibility();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, visibility341.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:336:32: classMethod
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classMethod_in_recordItem7888);
					classMethod342=classMethod();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classMethod342.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:337:32: classProperty
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classProperty_in_recordItem7921);
					classProperty343=classProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classProperty343.getTree());

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:338:32: constSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_constSection_in_recordItem7954);
					constSection344=constSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constSection344.getTree());

					}
					break;
				case 5 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:339:32: typeSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_typeSection_in_recordItem7987);
					typeSection345=typeSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeSection345.getTree());

					}
					break;
				case 6 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:340:32: recordField
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_recordField_in_recordItem8020);
					recordField346=recordField();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, recordField346.getTree());

					}
					break;
				case 7 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:341:32: ( 'class' )? varSection
					{
					root_0 = (Object)adaptor.nil();


					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:341:32: ( 'class' )?
					int alt109=2;
					int LA109_0 = input.LA(1);
					if ( (LA109_0==CLASS) ) {
						alt109=1;
					}
					switch (alt109) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:341:33: 'class'
							{
							string_literal347=(Token)match(input,CLASS,FOLLOW_CLASS_in_recordItem8054); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal347_tree = (Object)adaptor.create(string_literal347);
							adaptor.addChild(root_0, string_literal347_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_varSection_in_recordItem8058);
					varSection348=varSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, varSection348.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 83, recordItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordItem"


	public static class recordField_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordField"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:343:1: recordField : identList ':' typeDecl ( hintingDirective )* ( ';' )? -> identList ^( TkVariableType typeDecl ) ;
	public final DelphiParser.recordField_return recordField() throws RecognitionException {
		DelphiParser.recordField_return retval = new DelphiParser.recordField_return();
		retval.start = input.LT(1);
		int recordField_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal350=null;
		Token char_literal353=null;
		ParserRuleReturnScope identList349 =null;
		ParserRuleReturnScope typeDecl351 =null;
		ParserRuleReturnScope hintingDirective352 =null;

		Object char_literal350_tree=null;
		Object char_literal353_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_identList=new RewriteRuleSubtreeStream(adaptor,"rule identList");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:343:30: ( identList ':' typeDecl ( hintingDirective )* ( ';' )? -> identList ^( TkVariableType typeDecl ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:343:32: identList ':' typeDecl ( hintingDirective )* ( ';' )?
			{
			pushFollow(FOLLOW_identList_in_recordField8112);
			identList349=identList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identList.add(identList349.getTree());
			char_literal350=(Token)match(input,COLON,FOLLOW_COLON_in_recordField8114); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_COLON.add(char_literal350);

			pushFollow(FOLLOW_typeDecl_in_recordField8116);
			typeDecl351=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl351.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:343:55: ( hintingDirective )*
			loop111:
			while (true) {
				int alt111=2;
				int LA111_0 = input.LA(1);
				if ( (LA111_0==DEPRECATED||LA111_0==EXPERIMENTAL||LA111_0==LIBRARY||LA111_0==PLATFORM) ) {
					alt111=1;
				}

				switch (alt111) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:343:56: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_recordField8119);
					hintingDirective352=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective352.getTree());
					}
					break;

				default :
					break loop111;
				}
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:343:75: ( ';' )?
			int alt112=2;
			int LA112_0 = input.LA(1);
			if ( (LA112_0==SEMI) ) {
				alt112=1;
			}
			switch (alt112) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:343:76: ';'
					{
					char_literal353=(Token)match(input,SEMI,FOLLOW_SEMI_in_recordField8124); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMI.add(char_literal353);

					}
					break;

			}

			// AST REWRITE
			// elements: typeDecl, identList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 344:30: -> identList ^( TkVariableType typeDecl )
			{
				adaptor.addChild(root_0, stream_identList.nextTree());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:344:43: ^( TkVariableType typeDecl )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableType, "TkVariableType"), root_1);
				adaptor.addChild(root_1, stream_typeDecl.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 84, recordField_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordField"


	public static class recordVariantField_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordVariantField"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:346:1: recordVariantField : identList ':' typeDecl ( hintingDirective )* ( ';' )? -> identList ^( TkVariableType typeDecl ) ;
	public final DelphiParser.recordVariantField_return recordVariantField() throws RecognitionException {
		DelphiParser.recordVariantField_return retval = new DelphiParser.recordVariantField_return();
		retval.start = input.LT(1);
		int recordVariantField_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal355=null;
		Token char_literal358=null;
		ParserRuleReturnScope identList354 =null;
		ParserRuleReturnScope typeDecl356 =null;
		ParserRuleReturnScope hintingDirective357 =null;

		Object char_literal355_tree=null;
		Object char_literal358_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_identList=new RewriteRuleSubtreeStream(adaptor,"rule identList");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:346:30: ( identList ':' typeDecl ( hintingDirective )* ( ';' )? -> identList ^( TkVariableType typeDecl ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:346:32: identList ':' typeDecl ( hintingDirective )* ( ';' )?
			{
			pushFollow(FOLLOW_identList_in_recordVariantField8214);
			identList354=identList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identList.add(identList354.getTree());
			char_literal355=(Token)match(input,COLON,FOLLOW_COLON_in_recordVariantField8216); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_COLON.add(char_literal355);

			pushFollow(FOLLOW_typeDecl_in_recordVariantField8218);
			typeDecl356=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl356.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:346:55: ( hintingDirective )*
			loop113:
			while (true) {
				int alt113=2;
				int LA113_0 = input.LA(1);
				if ( (LA113_0==DEPRECATED||LA113_0==EXPERIMENTAL||LA113_0==LIBRARY||LA113_0==PLATFORM) ) {
					alt113=1;
				}

				switch (alt113) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:346:56: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_recordVariantField8221);
					hintingDirective357=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective357.getTree());
					}
					break;

				default :
					break loop113;
				}
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:346:75: ( ';' )?
			int alt114=2;
			int LA114_0 = input.LA(1);
			if ( (LA114_0==SEMI) ) {
				alt114=1;
			}
			switch (alt114) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:346:76: ';'
					{
					char_literal358=(Token)match(input,SEMI,FOLLOW_SEMI_in_recordVariantField8226); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMI.add(char_literal358);

					}
					break;

			}

			// AST REWRITE
			// elements: identList, typeDecl
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 347:30: -> identList ^( TkVariableType typeDecl )
			{
				adaptor.addChild(root_0, stream_identList.nextTree());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:347:43: ^( TkVariableType typeDecl )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableType, "TkVariableType"), root_1);
				adaptor.addChild(root_1, stream_typeDecl.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 85, recordVariantField_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordVariantField"


	public static class recordVariantSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordVariantSection"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:349:1: recordVariantSection : 'case' ( ident ':' )? typeDecl 'of' ( recordVariant | ';' ) ( recordVariant | ';' )* ;
	public final DelphiParser.recordVariantSection_return recordVariantSection() throws RecognitionException {
		DelphiParser.recordVariantSection_return retval = new DelphiParser.recordVariantSection_return();
		retval.start = input.LT(1);
		int recordVariantSection_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal359=null;
		Token char_literal361=null;
		Token string_literal363=null;
		Token char_literal365=null;
		Token char_literal367=null;
		ParserRuleReturnScope ident360 =null;
		ParserRuleReturnScope typeDecl362 =null;
		ParserRuleReturnScope recordVariant364 =null;
		ParserRuleReturnScope recordVariant366 =null;

		Object string_literal359_tree=null;
		Object char_literal361_tree=null;
		Object string_literal363_tree=null;
		Object char_literal365_tree=null;
		Object char_literal367_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:349:30: ( 'case' ( ident ':' )? typeDecl 'of' ( recordVariant | ';' ) ( recordVariant | ';' )* )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:349:32: 'case' ( ident ':' )? typeDecl 'of' ( recordVariant | ';' ) ( recordVariant | ';' )*
			{
			root_0 = (Object)adaptor.nil();


			string_literal359=(Token)match(input,CASE,FOLLOW_CASE_in_recordVariantSection8313); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal359_tree = (Object)adaptor.create(string_literal359);
			adaptor.addChild(root_0, string_literal359_tree);
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:349:39: ( ident ':' )?
			int alt115=2;
			switch ( input.LA(1) ) {
				case TkIdentifier:
					{
					int LA115_1 = input.LA(2);
					if ( (LA115_1==COLON) ) {
						alt115=1;
					}
					}
					break;
				case 198:
					{
					int LA115_2 = input.LA(2);
					if ( (LA115_2==TkIdentifier) ) {
						int LA115_14 = input.LA(3);
						if ( (LA115_14==COLON) ) {
							alt115=1;
						}
					}
					else if ( ((LA115_2 >= ABSOLUTE && LA115_2 <= ASSEMBLY)||LA115_2==AT||LA115_2==AUTOMATED||(LA115_2 >= BEGIN && LA115_2 <= CLASS)||(LA115_2 >= CONST && LA115_2 <= CONTINUE)||(LA115_2 >= DEFAULT && LA115_2 <= DO)||(LA115_2 >= DOWNTO && LA115_2 <= DYNAMIC)||(LA115_2 >= ELSE && LA115_2 <= END)||(LA115_2 >= EXCEPT && LA115_2 <= FUNCTION)||LA115_2==GOTO||LA115_2==HELPER||(LA115_2 >= IF && LA115_2 <= LABEL)||(LA115_2 >= LIBRARY && LA115_2 <= LOCAL)||LA115_2==MESSAGE||(LA115_2 >= MOD && LA115_2 <= NOT)||(LA115_2 >= OBJECT && LA115_2 <= PLATFORM)||LA115_2==POINTER||(LA115_2 >= PRIVATE && LA115_2 <= PUBLISHED)||LA115_2==RAISE||(LA115_2 >= READ && LA115_2 <= RESOURCESTRING)||(LA115_2 >= SAFECALL && LA115_2 <= SEALED)||(LA115_2 >= SET && LA115_2 <= SHR)||(LA115_2 >= STATIC && LA115_2 <= TYPE)||(LA115_2 >= UNIT && LA115_2 <= USES)||(LA115_2 >= VAR && LA115_2 <= WRITEONLY)||LA115_2==XOR) ) {
						int LA115_15 = input.LA(3);
						if ( (LA115_15==COLON) ) {
							alt115=1;
						}
					}
					}
					break;
				case OBJECT:
					{
					int LA115_3 = input.LA(2);
					if ( (LA115_3==COLON) ) {
						alt115=1;
					}
					}
					break;
				case POINTER:
					{
					int LA115_5 = input.LA(2);
					if ( (LA115_5==COLON) ) {
						alt115=1;
					}
					}
					break;
				case STRING:
					{
					int LA115_6 = input.LA(2);
					if ( (LA115_6==COLON) ) {
						alt115=1;
					}
					}
					break;
				case ANSISTRING:
					{
					int LA115_7 = input.LA(2);
					if ( (LA115_7==COLON) ) {
						alt115=1;
					}
					}
					break;
				case REFERENCE:
					{
					int LA115_8 = input.LA(2);
					if ( (LA115_8==COLON) ) {
						alt115=1;
					}
					}
					break;
				case VARIANT:
					{
					int LA115_9 = input.LA(2);
					if ( (LA115_9==COLON) ) {
						alt115=1;
					}
					}
					break;
				case TRUE:
					{
					int LA115_10 = input.LA(2);
					if ( (LA115_10==COLON) ) {
						alt115=1;
					}
					}
					break;
				case FALSE:
					{
					int LA115_11 = input.LA(2);
					if ( (LA115_11==COLON) ) {
						alt115=1;
					}
					}
					break;
				case ADD:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DQ:
				case DW:
				case EXIT:
				case EXPORT:
				case FINAL:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OPERATOR:
				case OUT:
				case READ:
				case READONLY:
				case REGISTER:
				case REMOVE:
				case STATIC:
				case STORED:
				case STRICT:
				case UNSAFE:
				case VARARGS:
				case VIRTUAL:
				case WRITE:
				case WRITEONLY:
					{
					int LA115_12 = input.LA(2);
					if ( (LA115_12==COLON) ) {
						alt115=1;
					}
					}
					break;
			}
			switch (alt115) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:349:40: ident ':'
					{
					pushFollow(FOLLOW_ident_in_recordVariantSection8316);
					ident360=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident360.getTree());

					char_literal361=(Token)match(input,COLON,FOLLOW_COLON_in_recordVariantSection8318); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal361_tree = (Object)adaptor.create(char_literal361);
					adaptor.addChild(root_0, char_literal361_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_typeDecl_in_recordVariantSection8322);
			typeDecl362=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl362.getTree());

			string_literal363=(Token)match(input,OF,FOLLOW_OF_in_recordVariantSection8324); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal363_tree = (Object)adaptor.create(string_literal363);
			adaptor.addChild(root_0, string_literal363_tree);
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:349:66: ( recordVariant | ';' )
			int alt116=2;
			int LA116_0 = input.LA(1);
			if ( ((LA116_0 >= ADD && LA116_0 <= ANSISTRING)||LA116_0==AS||(LA116_0 >= AT && LA116_0 <= AT2)||LA116_0==BREAK||(LA116_0 >= COLON && LA116_0 <= COMMA)||(LA116_0 >= CONTAINS && LA116_0 <= DEFAULT)||LA116_0==DIV||LA116_0==DOT||(LA116_0 >= DQ && LA116_0 <= DW)||LA116_0==EQUAL||LA116_0==EXIT||LA116_0==EXPORT||LA116_0==FALSE||LA116_0==FINAL||(LA116_0 >= FUNCTION && LA116_0 <= GE)||LA116_0==GT||(LA116_0 >= IMPLEMENTS && LA116_0 <= INHERITED)||LA116_0==IS||LA116_0==LBRACK||LA116_0==LE||(LA116_0 >= LOCAL && LA116_0 <= NAME)||LA116_0==NIL||(LA116_0 >= NOT && LA116_0 <= OBJECT)||(LA116_0 >= OPERATOR && LA116_0 <= OUT)||(LA116_0 >= PLUS && LA116_0 <= POINTER2)||LA116_0==PROCEDURE||LA116_0==QuotedString||(LA116_0 >= READ && LA116_0 <= READONLY)||(LA116_0 >= REFERENCE && LA116_0 <= REGISTER)||LA116_0==REMOVE||(LA116_0 >= SHL && LA116_0 <= STATIC)||(LA116_0 >= STORED && LA116_0 <= STRING)||LA116_0==TRUE||(LA116_0 >= TkHexNum && LA116_0 <= TkIntNum)||LA116_0==TkRealNum||LA116_0==UNSAFE||(LA116_0 >= VARARGS && LA116_0 <= VIRTUAL)||(LA116_0 >= WRITE && LA116_0 <= WRITEONLY)||(LA116_0 >= XOR && LA116_0 <= 200)) ) {
				alt116=1;
			}
			else if ( (LA116_0==SEMI) ) {
				alt116=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 116, 0, input);
				throw nvae;
			}

			switch (alt116) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:349:67: recordVariant
					{
					pushFollow(FOLLOW_recordVariant_in_recordVariantSection8327);
					recordVariant364=recordVariant();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, recordVariant364.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:349:83: ';'
					{
					char_literal365=(Token)match(input,SEMI,FOLLOW_SEMI_in_recordVariantSection8331); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal365_tree = (Object)adaptor.create(char_literal365);
					adaptor.addChild(root_0, char_literal365_tree);
					}

					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:349:88: ( recordVariant | ';' )*
			loop117:
			while (true) {
				int alt117=3;
				int LA117_0 = input.LA(1);
				if ( ((LA117_0 >= ADD && LA117_0 <= ANSISTRING)||LA117_0==AS||(LA117_0 >= AT && LA117_0 <= AT2)||LA117_0==BREAK||(LA117_0 >= COLON && LA117_0 <= COMMA)||(LA117_0 >= CONTAINS && LA117_0 <= DEFAULT)||LA117_0==DIV||LA117_0==DOT||(LA117_0 >= DQ && LA117_0 <= DW)||LA117_0==EQUAL||LA117_0==EXIT||LA117_0==EXPORT||LA117_0==FALSE||LA117_0==FINAL||(LA117_0 >= FUNCTION && LA117_0 <= GE)||LA117_0==GT||(LA117_0 >= IMPLEMENTS && LA117_0 <= INHERITED)||LA117_0==IS||LA117_0==LBRACK||LA117_0==LE||(LA117_0 >= LOCAL && LA117_0 <= NAME)||LA117_0==NIL||(LA117_0 >= NOT && LA117_0 <= OBJECT)||(LA117_0 >= OPERATOR && LA117_0 <= OUT)||(LA117_0 >= PLUS && LA117_0 <= POINTER2)||LA117_0==PROCEDURE||LA117_0==QuotedString||(LA117_0 >= READ && LA117_0 <= READONLY)||(LA117_0 >= REFERENCE && LA117_0 <= REGISTER)||LA117_0==REMOVE||(LA117_0 >= SHL && LA117_0 <= STATIC)||(LA117_0 >= STORED && LA117_0 <= STRING)||LA117_0==TRUE||(LA117_0 >= TkHexNum && LA117_0 <= TkIntNum)||LA117_0==TkRealNum||LA117_0==UNSAFE||(LA117_0 >= VARARGS && LA117_0 <= VIRTUAL)||(LA117_0 >= WRITE && LA117_0 <= WRITEONLY)||(LA117_0 >= XOR && LA117_0 <= 200)) ) {
					alt117=1;
				}
				else if ( (LA117_0==SEMI) ) {
					alt117=2;
				}

				switch (alt117) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:349:89: recordVariant
					{
					pushFollow(FOLLOW_recordVariant_in_recordVariantSection8335);
					recordVariant366=recordVariant();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, recordVariant366.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:349:105: ';'
					{
					char_literal367=(Token)match(input,SEMI,FOLLOW_SEMI_in_recordVariantSection8339); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal367_tree = (Object)adaptor.create(char_literal367);
					adaptor.addChild(root_0, char_literal367_tree);
					}

					}
					break;

				default :
					break loop117;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 86, recordVariantSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordVariantSection"


	public static class recordVariant_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordVariant"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:1: recordVariant : constExpression ( ',' constExpression )* ':' '(' ( recordVariantField )* ')' ;
	public final DelphiParser.recordVariant_return recordVariant() throws RecognitionException {
		DelphiParser.recordVariant_return retval = new DelphiParser.recordVariant_return();
		retval.start = input.LT(1);
		int recordVariant_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal369=null;
		Token char_literal371=null;
		Token char_literal372=null;
		Token char_literal374=null;
		ParserRuleReturnScope constExpression368 =null;
		ParserRuleReturnScope constExpression370 =null;
		ParserRuleReturnScope recordVariantField373 =null;

		Object char_literal369_tree=null;
		Object char_literal371_tree=null;
		Object char_literal372_tree=null;
		Object char_literal374_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:30: ( constExpression ( ',' constExpression )* ':' '(' ( recordVariantField )* ')' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:32: constExpression ( ',' constExpression )* ':' '(' ( recordVariantField )* ')'
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_constExpression_in_recordVariant8393);
			constExpression368=constExpression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression368.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:48: ( ',' constExpression )*
			loop118:
			while (true) {
				int alt118=2;
				int LA118_0 = input.LA(1);
				if ( (LA118_0==COMMA) ) {
					alt118=1;
				}

				switch (alt118) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:49: ',' constExpression
					{
					char_literal369=(Token)match(input,COMMA,FOLLOW_COMMA_in_recordVariant8396); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal369_tree = (Object)adaptor.create(char_literal369);
					adaptor.addChild(root_0, char_literal369_tree);
					}

					pushFollow(FOLLOW_constExpression_in_recordVariant8398);
					constExpression370=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression370.getTree());

					}
					break;

				default :
					break loop118;
				}
			}

			char_literal371=(Token)match(input,COLON,FOLLOW_COLON_in_recordVariant8402); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal371_tree = (Object)adaptor.create(char_literal371);
			adaptor.addChild(root_0, char_literal371_tree);
			}

			char_literal372=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_recordVariant8404); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal372_tree = (Object)adaptor.create(char_literal372);
			adaptor.addChild(root_0, char_literal372_tree);
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:79: ( recordVariantField )*
			loop119:
			while (true) {
				int alt119=2;
				int LA119_0 = input.LA(1);
				if ( (LA119_0==ADD||LA119_0==ANSISTRING||LA119_0==AT||LA119_0==BREAK||(LA119_0 >= CONTAINS && LA119_0 <= CONTINUE)||LA119_0==DEFAULT||(LA119_0 >= DQ && LA119_0 <= DW)||LA119_0==EXIT||LA119_0==EXPORT||LA119_0==FALSE||LA119_0==FINAL||LA119_0==IMPLEMENTS||LA119_0==INDEX||LA119_0==LOCAL||LA119_0==MESSAGE||LA119_0==NAME||LA119_0==OBJECT||LA119_0==OPERATOR||LA119_0==OUT||LA119_0==POINTER||(LA119_0 >= READ && LA119_0 <= READONLY)||(LA119_0 >= REFERENCE && LA119_0 <= REGISTER)||LA119_0==REMOVE||LA119_0==STATIC||(LA119_0 >= STORED && LA119_0 <= STRING)||LA119_0==TRUE||LA119_0==TkIdentifier||LA119_0==UNSAFE||(LA119_0 >= VARARGS && LA119_0 <= VIRTUAL)||(LA119_0 >= WRITE && LA119_0 <= WRITEONLY)||LA119_0==198) ) {
					alt119=1;
				}

				switch (alt119) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:80: recordVariantField
					{
					pushFollow(FOLLOW_recordVariantField_in_recordVariant8407);
					recordVariantField373=recordVariantField();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, recordVariantField373.getTree());

					}
					break;

				default :
					break loop119;
				}
			}

			char_literal374=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_recordVariant8411); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal374_tree = (Object)adaptor.create(char_literal374);
			adaptor.addChild(root_0, char_literal374_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 87, recordVariant_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordVariant"


	public static class recordHelperDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordHelperDecl"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:1: recordHelperDecl : 'record' 'helper' 'for' typeId ( recordHelperItem )* 'end' ;
	public final DelphiParser.recordHelperDecl_return recordHelperDecl() throws RecognitionException {
		DelphiParser.recordHelperDecl_return retval = new DelphiParser.recordHelperDecl_return();
		retval.start = input.LT(1);
		int recordHelperDecl_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal375=null;
		Token string_literal376=null;
		Token string_literal377=null;
		Token string_literal380=null;
		ParserRuleReturnScope typeId378 =null;
		ParserRuleReturnScope recordHelperItem379 =null;

		Object string_literal375_tree=null;
		Object string_literal376_tree=null;
		Object string_literal377_tree=null;
		Object string_literal380_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:30: ( 'record' 'helper' 'for' typeId ( recordHelperItem )* 'end' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:32: 'record' 'helper' 'for' typeId ( recordHelperItem )* 'end'
			{
			root_0 = (Object)adaptor.nil();


			string_literal375=(Token)match(input,RECORD,FOLLOW_RECORD_in_recordHelperDecl8463); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal375_tree = (Object)adaptor.create(string_literal375);
			adaptor.addChild(root_0, string_literal375_tree);
			}

			string_literal376=(Token)match(input,HELPER,FOLLOW_HELPER_in_recordHelperDecl8465); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal376_tree = (Object)adaptor.create(string_literal376);
			adaptor.addChild(root_0, string_literal376_tree);
			}

			string_literal377=(Token)match(input,FOR,FOLLOW_FOR_in_recordHelperDecl8467); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal377_tree = (Object)adaptor.create(string_literal377);
			adaptor.addChild(root_0, string_literal377_tree);
			}

			pushFollow(FOLLOW_typeId_in_recordHelperDecl8469);
			typeId378=typeId();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, typeId378.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:63: ( recordHelperItem )*
			loop120:
			while (true) {
				int alt120=2;
				int LA120_0 = input.LA(1);
				if ( (LA120_0==AUTOMATED||LA120_0==CLASS||LA120_0==CONSTRUCTOR||LA120_0==DESTRUCTOR||LA120_0==FUNCTION||LA120_0==LBRACK||LA120_0==OPERATOR||(LA120_0 >= PRIVATE && LA120_0 <= PROCEDURE)||(LA120_0 >= PROPERTY && LA120_0 <= PUBLISHED)||LA120_0==STRICT) ) {
					alt120=1;
				}

				switch (alt120) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:353:64: recordHelperItem
					{
					pushFollow(FOLLOW_recordHelperItem_in_recordHelperDecl8472);
					recordHelperItem379=recordHelperItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, recordHelperItem379.getTree());

					}
					break;

				default :
					break loop120;
				}
			}

			string_literal380=(Token)match(input,END,FOLLOW_END_in_recordHelperDecl8476); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal380_tree = (Object)adaptor.create(string_literal380);
			adaptor.addChild(root_0, string_literal380_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 88, recordHelperDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordHelperDecl"


	public static class recordHelperItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordHelperItem"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:1: recordHelperItem : ( visibility | classMethod | classProperty );
	public final DelphiParser.recordHelperItem_return recordHelperItem() throws RecognitionException {
		DelphiParser.recordHelperItem_return retval = new DelphiParser.recordHelperItem_return();
		retval.start = input.LT(1);
		int recordHelperItem_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope visibility381 =null;
		ParserRuleReturnScope classMethod382 =null;
		ParserRuleReturnScope classProperty383 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:30: ( visibility | classMethod | classProperty )
			int alt121=3;
			switch ( input.LA(1) ) {
			case AUTOMATED:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case PUBLISHED:
			case STRICT:
				{
				alt121=1;
				}
				break;
			case LBRACK:
				{
				int LA121_7 = input.LA(2);
				if ( (synpred172_Delphi()) ) {
					alt121=2;
				}
				else if ( (true) ) {
					alt121=3;
				}

				}
				break;
			case CLASS:
				{
				int LA121_8 = input.LA(2);
				if ( (synpred172_Delphi()) ) {
					alt121=2;
				}
				else if ( (true) ) {
					alt121=3;
				}

				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case FUNCTION:
			case OPERATOR:
			case PROCEDURE:
				{
				alt121=2;
				}
				break;
			case PROPERTY:
				{
				alt121=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 121, 0, input);
				throw nvae;
			}
			switch (alt121) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:32: visibility
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_visibility_in_recordHelperItem8525);
					visibility381=visibility();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, visibility381.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:32: classMethod
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classMethod_in_recordHelperItem8558);
					classMethod382=classMethod();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classMethod382.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:32: classProperty
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classProperty_in_recordHelperItem8591);
					classProperty383=classProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classProperty383.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 89, recordHelperItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordHelperItem"


	public static class classMethod_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classMethod"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:1: classMethod : ( ( customAttribute )? ( 'class' )? methodKey ident ( genericDefinition )? ( formalParameterSection )? ';' ( methodDirective )* -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( methodDirective )* ) | ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( methodDirective )* -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? ^( TkFunctionReturn typeDecl ) ( methodDirective )* ) | ( customAttribute )? ( 'class' )? 'operator' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' -> ( customAttribute )? ( 'class' )? ^( 'operator' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? typeDecl ) | ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? '.' ident '=' ident ';' | ( customAttribute )? ( 'class' )? 'procedure' ident ( genericDefinition )? '.' ident '=' ident ';' );
	public final DelphiParser.classMethod_return classMethod() throws RecognitionException {
		DelphiParser.classMethod_return retval = new DelphiParser.classMethod_return();
		retval.start = input.LT(1);
		int classMethod_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal385=null;
		Token char_literal390=null;
		Token string_literal393=null;
		Token string_literal394=null;
		Token char_literal398=null;
		Token char_literal401=null;
		Token string_literal404=null;
		Token string_literal405=null;
		Token char_literal409=null;
		Token char_literal412=null;
		Token string_literal414=null;
		Token string_literal415=null;
		Token char_literal418=null;
		Token char_literal420=null;
		Token char_literal422=null;
		Token string_literal424=null;
		Token string_literal425=null;
		Token char_literal428=null;
		Token char_literal430=null;
		Token char_literal432=null;
		ParserRuleReturnScope customAttribute384 =null;
		ParserRuleReturnScope methodKey386 =null;
		ParserRuleReturnScope ident387 =null;
		ParserRuleReturnScope genericDefinition388 =null;
		ParserRuleReturnScope formalParameterSection389 =null;
		ParserRuleReturnScope methodDirective391 =null;
		ParserRuleReturnScope customAttribute392 =null;
		ParserRuleReturnScope ident395 =null;
		ParserRuleReturnScope genericDefinition396 =null;
		ParserRuleReturnScope formalParameterSection397 =null;
		ParserRuleReturnScope customAttribute399 =null;
		ParserRuleReturnScope typeDecl400 =null;
		ParserRuleReturnScope methodDirective402 =null;
		ParserRuleReturnScope customAttribute403 =null;
		ParserRuleReturnScope ident406 =null;
		ParserRuleReturnScope genericDefinition407 =null;
		ParserRuleReturnScope formalParameterSection408 =null;
		ParserRuleReturnScope customAttribute410 =null;
		ParserRuleReturnScope typeDecl411 =null;
		ParserRuleReturnScope customAttribute413 =null;
		ParserRuleReturnScope ident416 =null;
		ParserRuleReturnScope genericDefinition417 =null;
		ParserRuleReturnScope ident419 =null;
		ParserRuleReturnScope ident421 =null;
		ParserRuleReturnScope customAttribute423 =null;
		ParserRuleReturnScope ident426 =null;
		ParserRuleReturnScope genericDefinition427 =null;
		ParserRuleReturnScope ident429 =null;
		ParserRuleReturnScope ident431 =null;

		Object string_literal385_tree=null;
		Object char_literal390_tree=null;
		Object string_literal393_tree=null;
		Object string_literal394_tree=null;
		Object char_literal398_tree=null;
		Object char_literal401_tree=null;
		Object string_literal404_tree=null;
		Object string_literal405_tree=null;
		Object char_literal409_tree=null;
		Object char_literal412_tree=null;
		Object string_literal414_tree=null;
		Object string_literal415_tree=null;
		Object char_literal418_tree=null;
		Object char_literal420_tree=null;
		Object char_literal422_tree=null;
		Object string_literal424_tree=null;
		Object string_literal425_tree=null;
		Object char_literal428_tree=null;
		Object char_literal430_tree=null;
		Object char_literal432_tree=null;
		RewriteRuleTokenStream stream_OPERATOR=new RewriteRuleTokenStream(adaptor,"token OPERATOR");
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
		RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_methodKey=new RewriteRuleSubtreeStream(adaptor,"rule methodKey");
		RewriteRuleSubtreeStream stream_genericDefinition=new RewriteRuleSubtreeStream(adaptor,"rule genericDefinition");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_formalParameterSection=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterSection");
		RewriteRuleSubtreeStream stream_methodDirective=new RewriteRuleSubtreeStream(adaptor,"rule methodDirective");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:30: ( ( customAttribute )? ( 'class' )? methodKey ident ( genericDefinition )? ( formalParameterSection )? ';' ( methodDirective )* -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( methodDirective )* ) | ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( methodDirective )* -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? ^( TkFunctionReturn typeDecl ) ( methodDirective )* ) | ( customAttribute )? ( 'class' )? 'operator' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' -> ( customAttribute )? ( 'class' )? ^( 'operator' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? typeDecl ) | ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? '.' ident '=' ident ';' | ( customAttribute )? ( 'class' )? 'procedure' ident ( genericDefinition )? '.' ident '=' ident ';' )
			int alt144=5;
			switch ( input.LA(1) ) {
			case LBRACK:
				{
				int LA144_1 = input.LA(2);
				if ( (synpred178_Delphi()) ) {
					alt144=1;
				}
				else if ( (synpred185_Delphi()) ) {
					alt144=2;
				}
				else if ( (synpred191_Delphi()) ) {
					alt144=3;
				}
				else if ( (synpred195_Delphi()) ) {
					alt144=4;
				}
				else if ( (true) ) {
					alt144=5;
				}

				}
				break;
			case CLASS:
				{
				int LA144_2 = input.LA(2);
				if ( (synpred178_Delphi()) ) {
					alt144=1;
				}
				else if ( (synpred185_Delphi()) ) {
					alt144=2;
				}
				else if ( (synpred191_Delphi()) ) {
					alt144=3;
				}
				else if ( (synpred195_Delphi()) ) {
					alt144=4;
				}
				else if ( (true) ) {
					alt144=5;
				}

				}
				break;
			case PROCEDURE:
				{
				int LA144_3 = input.LA(2);
				if ( (synpred178_Delphi()) ) {
					alt144=1;
				}
				else if ( (true) ) {
					alt144=5;
				}

				}
				break;
			case FUNCTION:
				{
				int LA144_4 = input.LA(2);
				if ( (synpred185_Delphi()) ) {
					alt144=2;
				}
				else if ( (synpred195_Delphi()) ) {
					alt144=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 144, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case OPERATOR:
				{
				alt144=3;
				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
				{
				alt144=1;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 144, 0, input);
				throw nvae;
			}
			switch (alt144) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:32: ( customAttribute )? ( 'class' )? methodKey ident ( genericDefinition )? ( formalParameterSection )? ';' ( methodDirective )*
					{
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:32: ( customAttribute )?
					int alt122=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							alt122=1;
							}
							break;
						case CLASS:
							{
							int LA122_2 = input.LA(2);
							if ( (synpred173_Delphi()) ) {
								alt122=1;
							}
							}
							break;
						case CONSTRUCTOR:
						case DESTRUCTOR:
						case PROCEDURE:
							{
							int LA122_3 = input.LA(2);
							if ( (synpred173_Delphi()) ) {
								alt122=1;
							}
							}
							break;
					}
					switch (alt122) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_classMethod8646);
							customAttribute384=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute384.getTree());
							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:51: ( 'class' )?
					int alt123=2;
					int LA123_0 = input.LA(1);
					if ( (LA123_0==CLASS) ) {
						alt123=1;
					}
					switch (alt123) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:52: 'class'
							{
							string_literal385=(Token)match(input,CLASS,FOLLOW_CLASS_in_classMethod8651); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_CLASS.add(string_literal385);

							}
							break;

					}

					pushFollow(FOLLOW_methodKey_in_classMethod8655);
					methodKey386=methodKey();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodKey.add(methodKey386.getTree());
					pushFollow(FOLLOW_ident_in_classMethod8657);
					ident387=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident387.getTree());
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:78: ( genericDefinition )?
					int alt124=2;
					int LA124_0 = input.LA(1);
					if ( (LA124_0==LT) ) {
						alt124=1;
					}
					switch (alt124) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:79: genericDefinition
							{
							pushFollow(FOLLOW_genericDefinition_in_classMethod8660);
							genericDefinition388=genericDefinition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_genericDefinition.add(genericDefinition388.getTree());
							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:99: ( formalParameterSection )?
					int alt125=2;
					int LA125_0 = input.LA(1);
					if ( (LA125_0==LPAREN) ) {
						alt125=1;
					}
					switch (alt125) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:100: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_classMethod8665);
							formalParameterSection389=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection389.getTree());
							}
							break;

					}

					char_literal390=(Token)match(input,SEMI,FOLLOW_SEMI_in_classMethod8669); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMI.add(char_literal390);

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:129: ( methodDirective )*
					loop126:
					while (true) {
						int alt126=2;
						switch ( input.LA(1) ) {
						case MESSAGE:
							{
							int LA126_2 = input.LA(2);
							if ( ((LA126_2 >= ADD && LA126_2 <= ANSISTRING)||LA126_2==AS||(LA126_2 >= AT && LA126_2 <= AT2)||LA126_2==BREAK||(LA126_2 >= CONTAINS && LA126_2 <= DEFAULT)||LA126_2==DIV||LA126_2==DOT||(LA126_2 >= DQ && LA126_2 <= DW)||LA126_2==EQUAL||LA126_2==EXIT||LA126_2==EXPORT||LA126_2==FALSE||LA126_2==FINAL||(LA126_2 >= FUNCTION && LA126_2 <= GE)||LA126_2==GT||(LA126_2 >= IMPLEMENTS && LA126_2 <= INHERITED)||LA126_2==IS||LA126_2==LBRACK||LA126_2==LE||(LA126_2 >= LOCAL && LA126_2 <= NAME)||LA126_2==NIL||(LA126_2 >= NOT && LA126_2 <= OBJECT)||(LA126_2 >= OPERATOR && LA126_2 <= OUT)||(LA126_2 >= PLUS && LA126_2 <= POINTER2)||LA126_2==PROCEDURE||LA126_2==QuotedString||(LA126_2 >= READ && LA126_2 <= READONLY)||(LA126_2 >= REFERENCE && LA126_2 <= REGISTER)||LA126_2==REMOVE||LA126_2==SEMI||(LA126_2 >= SHL && LA126_2 <= STATIC)||(LA126_2 >= STORED && LA126_2 <= STRING)||LA126_2==TRUE||(LA126_2 >= TkHexNum && LA126_2 <= TkIntNum)||LA126_2==TkRealNum||LA126_2==UNSAFE||(LA126_2 >= VARARGS && LA126_2 <= VIRTUAL)||(LA126_2 >= WRITE && LA126_2 <= WRITEONLY)||(LA126_2 >= XOR && LA126_2 <= 200)) ) {
								alt126=1;
							}

							}
							break;
						case ABSTRACT:
						case ASSEMBLER:
						case CDECL:
						case DEPRECATED:
						case DISPID:
						case DYNAMIC:
						case EXPERIMENTAL:
						case EXTERNAL:
						case FAR:
						case INLINE:
						case LIBRARY:
						case NEAR:
						case OVERLOAD:
						case OVERRIDE:
						case PASCAL:
						case PLATFORM:
						case REINTRODUCE:
						case SAFECALL:
						case STDCALL:
							{
							alt126=1;
							}
							break;
						case STATIC:
							{
							int LA126_4 = input.LA(2);
							if ( (LA126_4==SEMI) ) {
								alt126=1;
							}

							}
							break;
						case VIRTUAL:
							{
							int LA126_5 = input.LA(2);
							if ( (LA126_5==SEMI) ) {
								alt126=1;
							}

							}
							break;
						case FINAL:
							{
							int LA126_6 = input.LA(2);
							if ( (LA126_6==SEMI) ) {
								alt126=1;
							}

							}
							break;
						case REGISTER:
							{
							int LA126_7 = input.LA(2);
							if ( (LA126_7==SEMI) ) {
								alt126=1;
							}

							}
							break;
						case EXPORT:
							{
							int LA126_8 = input.LA(2);
							if ( (LA126_8==SEMI) ) {
								alt126=1;
							}

							}
							break;
						case LOCAL:
							{
							int LA126_9 = input.LA(2);
							if ( (LA126_9==SEMI) ) {
								alt126=1;
							}

							}
							break;
						case VARARGS:
							{
							int LA126_10 = input.LA(2);
							if ( (LA126_10==SEMI) ) {
								alt126=1;
							}

							}
							break;
						}
						switch (alt126) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:130: methodDirective
							{
							pushFollow(FOLLOW_methodDirective_in_classMethod8672);
							methodDirective391=methodDirective();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_methodDirective.add(methodDirective391.getTree());
							}
							break;

						default :
							break loop126;
						}
					}

					// AST REWRITE
					// elements: formalParameterSection, customAttribute, methodDirective, methodKey, ident, genericDefinition, CLASS
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 360:30: -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( methodDirective )* )
					{
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:360:34: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_0, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:360:53: ( 'class' )?
						if ( stream_CLASS.hasNext() ) {
							adaptor.addChild(root_0, stream_CLASS.nextNode());
						}
						stream_CLASS.reset();

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:360:64: ^( methodKey ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( methodDirective )* )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_methodKey.nextNode(), root_1);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:360:76: ^( TkFunctionName ident )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_ident.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:360:100: ( genericDefinition )?
						if ( stream_genericDefinition.hasNext() ) {
							adaptor.addChild(root_1, stream_genericDefinition.nextTree());
						}
						stream_genericDefinition.reset();

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:360:121: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:360:138: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:360:165: ( methodDirective )*
						while ( stream_methodDirective.hasNext() ) {
							adaptor.addChild(root_1, stream_methodDirective.nextTree());
						}
						stream_methodDirective.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:32: ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( methodDirective )*
					{
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:32: ( customAttribute )?
					int alt127=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							alt127=1;
							}
							break;
						case CLASS:
							{
							int LA127_2 = input.LA(2);
							if ( (synpred179_Delphi()) ) {
								alt127=1;
							}
							}
							break;
						case FUNCTION:
							{
							int LA127_3 = input.LA(2);
							if ( (synpred179_Delphi()) ) {
								alt127=1;
							}
							}
							break;
					}
					switch (alt127) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_classMethod8780);
							customAttribute392=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute392.getTree());
							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:51: ( 'class' )?
					int alt128=2;
					int LA128_0 = input.LA(1);
					if ( (LA128_0==CLASS) ) {
						alt128=1;
					}
					switch (alt128) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:52: 'class'
							{
							string_literal393=(Token)match(input,CLASS,FOLLOW_CLASS_in_classMethod8785); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_CLASS.add(string_literal393);

							}
							break;

					}

					string_literal394=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_classMethod8789); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_FUNCTION.add(string_literal394);

					pushFollow(FOLLOW_ident_in_classMethod8791);
					ident395=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident395.getTree());
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:79: ( genericDefinition )?
					int alt129=2;
					int LA129_0 = input.LA(1);
					if ( (LA129_0==LT) ) {
						alt129=1;
					}
					switch (alt129) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:80: genericDefinition
							{
							pushFollow(FOLLOW_genericDefinition_in_classMethod8794);
							genericDefinition396=genericDefinition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_genericDefinition.add(genericDefinition396.getTree());
							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:100: ( formalParameterSection )?
					int alt130=2;
					int LA130_0 = input.LA(1);
					if ( (LA130_0==LPAREN) ) {
						alt130=1;
					}
					switch (alt130) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:101: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_classMethod8799);
							formalParameterSection397=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection397.getTree());
							}
							break;

					}

					char_literal398=(Token)match(input,COLON,FOLLOW_COLON_in_classMethod8803); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(char_literal398);

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:130: ( customAttribute )?
					int alt131=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							int LA131_1 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case PACKED:
							{
							int LA131_2 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case ARRAY:
							{
							int LA131_3 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case SET:
							{
							int LA131_4 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case FILE:
							{
							int LA131_5 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case CLASS:
							{
							int LA131_6 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case DISPINTERFACE:
						case INTERFACE:
							{
							int LA131_7 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case OBJECT:
							{
							int LA131_8 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case RECORD:
							{
							int LA131_9 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case POINTER2:
							{
							int LA131_10 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case POINTER:
							{
							int LA131_11 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case STRING:
							{
							int LA131_12 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case TYPE:
							{
							int LA131_13 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case ANSISTRING:
							{
							int LA131_14 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case FUNCTION:
							{
							int LA131_15 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case PROCEDURE:
							{
							int LA131_16 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case REFERENCE:
							{
							int LA131_17 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case VARIANT:
							{
							int LA131_18 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case TkIdentifier:
							{
							int LA131_19 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case 198:
							{
							int LA131_20 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case TRUE:
							{
							int LA131_21 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case LPAREN:
							{
							int LA131_22 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case AT2:
							{
							int LA131_23 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case 199:
							{
							int LA131_24 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case NOT:
							{
							int LA131_25 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case PLUS:
							{
							int LA131_26 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case MINUS:
							{
							int LA131_27 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case TkRealNum:
							{
							int LA131_28 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case TkHexNum:
						case TkIntNum:
							{
							int LA131_29 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case FALSE:
							{
							int LA131_30 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case ADD:
						case AT:
						case BREAK:
						case CONTAINS:
						case CONTINUE:
						case DEFAULT:
						case DQ:
						case DW:
						case EXIT:
						case EXPORT:
						case FINAL:
						case IMPLEMENTS:
						case INDEX:
						case LOCAL:
						case MESSAGE:
						case NAME:
						case OPERATOR:
						case OUT:
						case READ:
						case READONLY:
						case REGISTER:
						case REMOVE:
						case STATIC:
						case STORED:
						case STRICT:
						case UNSAFE:
						case VARARGS:
						case VIRTUAL:
						case WRITE:
						case WRITEONLY:
							{
							int LA131_31 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case NIL:
							{
							int LA131_32 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case ControlChar:
						case ControlString:
							{
							int LA131_33 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case QuotedString:
							{
							int LA131_34 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case INHERITED:
							{
							int LA131_35 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case 200:
							{
							int LA131_36 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case DOT:
							{
							int LA131_37 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case LT:
							{
							int LA131_38 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case AND:
						case AS:
						case DIV:
						case MOD:
						case OR:
						case SHL:
						case SHR:
						case SLASH:
						case STAR:
						case XOR:
							{
							int LA131_39 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case EQUAL:
							{
							int LA131_40 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case GE:
						case GT:
						case IN:
						case IS:
						case LE:
						case NOT_EQUAL:
							{
							int LA131_41 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case DOTDOT:
							{
							int LA131_42 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case SEMI:
							{
							int LA131_43 = input.LA(2);
							if ( (synpred183_Delphi()) ) {
								alt131=1;
							}
							}
							break;
					}
					switch (alt131) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:131: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_classMethod8806);
							customAttribute399=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute399.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_typeDecl_in_classMethod8810);
					typeDecl400=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl400.getTree());
					char_literal401=(Token)match(input,SEMI,FOLLOW_SEMI_in_classMethod8812); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMI.add(char_literal401);

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:162: ( methodDirective )*
					loop132:
					while (true) {
						int alt132=2;
						switch ( input.LA(1) ) {
						case MESSAGE:
							{
							int LA132_2 = input.LA(2);
							if ( ((LA132_2 >= ADD && LA132_2 <= ANSISTRING)||LA132_2==AS||(LA132_2 >= AT && LA132_2 <= AT2)||LA132_2==BREAK||(LA132_2 >= CONTAINS && LA132_2 <= DEFAULT)||LA132_2==DIV||LA132_2==DOT||(LA132_2 >= DQ && LA132_2 <= DW)||LA132_2==EQUAL||LA132_2==EXIT||LA132_2==EXPORT||LA132_2==FALSE||LA132_2==FINAL||(LA132_2 >= FUNCTION && LA132_2 <= GE)||LA132_2==GT||(LA132_2 >= IMPLEMENTS && LA132_2 <= INHERITED)||LA132_2==IS||LA132_2==LBRACK||LA132_2==LE||(LA132_2 >= LOCAL && LA132_2 <= NAME)||LA132_2==NIL||(LA132_2 >= NOT && LA132_2 <= OBJECT)||(LA132_2 >= OPERATOR && LA132_2 <= OUT)||(LA132_2 >= PLUS && LA132_2 <= POINTER2)||LA132_2==PROCEDURE||LA132_2==QuotedString||(LA132_2 >= READ && LA132_2 <= READONLY)||(LA132_2 >= REFERENCE && LA132_2 <= REGISTER)||LA132_2==REMOVE||LA132_2==SEMI||(LA132_2 >= SHL && LA132_2 <= STATIC)||(LA132_2 >= STORED && LA132_2 <= STRING)||LA132_2==TRUE||(LA132_2 >= TkHexNum && LA132_2 <= TkIntNum)||LA132_2==TkRealNum||LA132_2==UNSAFE||(LA132_2 >= VARARGS && LA132_2 <= VIRTUAL)||(LA132_2 >= WRITE && LA132_2 <= WRITEONLY)||(LA132_2 >= XOR && LA132_2 <= 200)) ) {
								alt132=1;
							}

							}
							break;
						case ABSTRACT:
						case ASSEMBLER:
						case CDECL:
						case DEPRECATED:
						case DISPID:
						case DYNAMIC:
						case EXPERIMENTAL:
						case EXTERNAL:
						case FAR:
						case INLINE:
						case LIBRARY:
						case NEAR:
						case OVERLOAD:
						case OVERRIDE:
						case PASCAL:
						case PLATFORM:
						case REINTRODUCE:
						case SAFECALL:
						case STDCALL:
							{
							alt132=1;
							}
							break;
						case STATIC:
							{
							int LA132_4 = input.LA(2);
							if ( (LA132_4==SEMI) ) {
								alt132=1;
							}

							}
							break;
						case VIRTUAL:
							{
							int LA132_5 = input.LA(2);
							if ( (LA132_5==SEMI) ) {
								alt132=1;
							}

							}
							break;
						case FINAL:
							{
							int LA132_6 = input.LA(2);
							if ( (LA132_6==SEMI) ) {
								alt132=1;
							}

							}
							break;
						case REGISTER:
							{
							int LA132_7 = input.LA(2);
							if ( (LA132_7==SEMI) ) {
								alt132=1;
							}

							}
							break;
						case EXPORT:
							{
							int LA132_8 = input.LA(2);
							if ( (LA132_8==SEMI) ) {
								alt132=1;
							}

							}
							break;
						case LOCAL:
							{
							int LA132_9 = input.LA(2);
							if ( (LA132_9==SEMI) ) {
								alt132=1;
							}

							}
							break;
						case VARARGS:
							{
							int LA132_10 = input.LA(2);
							if ( (LA132_10==SEMI) ) {
								alt132=1;
							}

							}
							break;
						}
						switch (alt132) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:163: methodDirective
							{
							pushFollow(FOLLOW_methodDirective_in_classMethod8815);
							methodDirective402=methodDirective();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_methodDirective.add(methodDirective402.getTree());
							}
							break;

						default :
							break loop132;
						}
					}

					// AST REWRITE
					// elements: FUNCTION, typeDecl, customAttribute, customAttribute, ident, CLASS, genericDefinition, formalParameterSection, methodDirective
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 362:30: -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? ^( TkFunctionReturn typeDecl ) ( methodDirective )* )
					{
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:33: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_0, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:52: ( 'class' )?
						if ( stream_CLASS.hasNext() ) {
							adaptor.addChild(root_0, stream_CLASS.nextNode());
						}
						stream_CLASS.reset();

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:63: ^( 'function' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? ^( TkFunctionReturn typeDecl ) ( methodDirective )* )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_FUNCTION.nextNode(), root_1);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:76: ^( TkFunctionName ident )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_ident.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:100: ( genericDefinition )?
						if ( stream_genericDefinition.hasNext() ) {
							adaptor.addChild(root_1, stream_genericDefinition.nextTree());
						}
						stream_genericDefinition.reset();

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:121: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:138: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:165: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_1, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:184: ^( TkFunctionReturn typeDecl )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionReturn, "TkFunctionReturn"), root_2);
						adaptor.addChild(root_2, stream_typeDecl.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:213: ( methodDirective )*
						while ( stream_methodDirective.hasNext() ) {
							adaptor.addChild(root_1, stream_methodDirective.nextTree());
						}
						stream_methodDirective.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:32: ( customAttribute )? ( 'class' )? 'operator' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';'
					{
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:32: ( customAttribute )?
					int alt133=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							alt133=1;
							}
							break;
						case CLASS:
							{
							int LA133_2 = input.LA(2);
							if ( (synpred186_Delphi()) ) {
								alt133=1;
							}
							}
							break;
						case OPERATOR:
							{
							int LA133_3 = input.LA(2);
							if ( (synpred186_Delphi()) ) {
								alt133=1;
							}
							}
							break;
					}
					switch (alt133) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_classMethod8932);
							customAttribute403=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute403.getTree());
							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:51: ( 'class' )?
					int alt134=2;
					int LA134_0 = input.LA(1);
					if ( (LA134_0==CLASS) ) {
						alt134=1;
					}
					switch (alt134) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:52: 'class'
							{
							string_literal404=(Token)match(input,CLASS,FOLLOW_CLASS_in_classMethod8937); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_CLASS.add(string_literal404);

							}
							break;

					}

					string_literal405=(Token)match(input,OPERATOR,FOLLOW_OPERATOR_in_classMethod8941); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_OPERATOR.add(string_literal405);

					pushFollow(FOLLOW_ident_in_classMethod8943);
					ident406=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident406.getTree());
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:79: ( genericDefinition )?
					int alt135=2;
					int LA135_0 = input.LA(1);
					if ( (LA135_0==LT) ) {
						alt135=1;
					}
					switch (alt135) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:80: genericDefinition
							{
							pushFollow(FOLLOW_genericDefinition_in_classMethod8946);
							genericDefinition407=genericDefinition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_genericDefinition.add(genericDefinition407.getTree());
							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:100: ( formalParameterSection )?
					int alt136=2;
					int LA136_0 = input.LA(1);
					if ( (LA136_0==LPAREN) ) {
						alt136=1;
					}
					switch (alt136) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:101: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_classMethod8951);
							formalParameterSection408=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection408.getTree());
							}
							break;

					}

					char_literal409=(Token)match(input,COLON,FOLLOW_COLON_in_classMethod8955); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(char_literal409);

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:130: ( customAttribute )?
					int alt137=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							int LA137_1 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case PACKED:
							{
							int LA137_2 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case ARRAY:
							{
							int LA137_3 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case SET:
							{
							int LA137_4 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case FILE:
							{
							int LA137_5 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case CLASS:
							{
							int LA137_6 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case DISPINTERFACE:
						case INTERFACE:
							{
							int LA137_7 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case OBJECT:
							{
							int LA137_8 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case RECORD:
							{
							int LA137_9 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case POINTER2:
							{
							int LA137_10 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case POINTER:
							{
							int LA137_11 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case STRING:
							{
							int LA137_12 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case TYPE:
							{
							int LA137_13 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case ANSISTRING:
							{
							int LA137_14 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case FUNCTION:
							{
							int LA137_15 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case PROCEDURE:
							{
							int LA137_16 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case REFERENCE:
							{
							int LA137_17 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case VARIANT:
							{
							int LA137_18 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case TkIdentifier:
							{
							int LA137_19 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case 198:
							{
							int LA137_20 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case TRUE:
							{
							int LA137_21 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case LPAREN:
							{
							int LA137_22 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case AT2:
							{
							int LA137_23 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case 199:
							{
							int LA137_24 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case NOT:
							{
							int LA137_25 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case PLUS:
							{
							int LA137_26 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case MINUS:
							{
							int LA137_27 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case TkRealNum:
							{
							int LA137_28 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case TkHexNum:
						case TkIntNum:
							{
							int LA137_29 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case FALSE:
							{
							int LA137_30 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case ADD:
						case AT:
						case BREAK:
						case CONTAINS:
						case CONTINUE:
						case DEFAULT:
						case DQ:
						case DW:
						case EXIT:
						case EXPORT:
						case FINAL:
						case IMPLEMENTS:
						case INDEX:
						case LOCAL:
						case MESSAGE:
						case NAME:
						case OPERATOR:
						case OUT:
						case READ:
						case READONLY:
						case REGISTER:
						case REMOVE:
						case STATIC:
						case STORED:
						case STRICT:
						case UNSAFE:
						case VARARGS:
						case VIRTUAL:
						case WRITE:
						case WRITEONLY:
							{
							int LA137_31 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case NIL:
							{
							int LA137_32 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case ControlChar:
						case ControlString:
							{
							int LA137_33 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case QuotedString:
							{
							int LA137_34 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case INHERITED:
							{
							int LA137_35 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case 200:
							{
							int LA137_36 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case DOT:
							{
							int LA137_37 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case LT:
							{
							int LA137_38 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case AND:
						case AS:
						case DIV:
						case MOD:
						case OR:
						case SHL:
						case SHR:
						case SLASH:
						case STAR:
						case XOR:
							{
							int LA137_39 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case EQUAL:
							{
							int LA137_40 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case GE:
						case GT:
						case IN:
						case IS:
						case LE:
						case NOT_EQUAL:
							{
							int LA137_41 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case DOTDOT:
							{
							int LA137_42 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
						case SEMI:
							{
							int LA137_43 = input.LA(2);
							if ( (synpred190_Delphi()) ) {
								alt137=1;
							}
							}
							break;
					}
					switch (alt137) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:131: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_classMethod8958);
							customAttribute410=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute410.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_typeDecl_in_classMethod8962);
					typeDecl411=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl411.getTree());
					char_literal412=(Token)match(input,SEMI,FOLLOW_SEMI_in_classMethod8964); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMI.add(char_literal412);

					// AST REWRITE
					// elements: formalParameterSection, customAttribute, customAttribute, genericDefinition, typeDecl, OPERATOR, CLASS, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 364:30: -> ( customAttribute )? ( 'class' )? ^( 'operator' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? typeDecl )
					{
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:33: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_0, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:52: ( 'class' )?
						if ( stream_CLASS.hasNext() ) {
							adaptor.addChild(root_0, stream_CLASS.nextNode());
						}
						stream_CLASS.reset();

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:63: ^( 'operator' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? typeDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_OPERATOR.nextNode(), root_1);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:76: ^( TkFunctionName ident )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_ident.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:100: ( genericDefinition )?
						if ( stream_genericDefinition.hasNext() ) {
							adaptor.addChild(root_1, stream_genericDefinition.nextTree());
						}
						stream_genericDefinition.reset();

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:121: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:138: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:165: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_1, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						adaptor.addChild(root_1, stream_typeDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:32: ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? '.' ident '=' ident ';'
					{
					root_0 = (Object)adaptor.nil();


					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:32: ( customAttribute )?
					int alt138=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							alt138=1;
							}
							break;
						case CLASS:
							{
							int LA138_2 = input.LA(2);
							if ( (synpred192_Delphi()) ) {
								alt138=1;
							}
							}
							break;
						case FUNCTION:
							{
							int LA138_3 = input.LA(2);
							if ( (synpred192_Delphi()) ) {
								alt138=1;
							}
							}
							break;
					}
					switch (alt138) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_classMethod9071);
							customAttribute413=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, customAttribute413.getTree());

							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:51: ( 'class' )?
					int alt139=2;
					int LA139_0 = input.LA(1);
					if ( (LA139_0==CLASS) ) {
						alt139=1;
					}
					switch (alt139) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:52: 'class'
							{
							string_literal414=(Token)match(input,CLASS,FOLLOW_CLASS_in_classMethod9076); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal414_tree = (Object)adaptor.create(string_literal414);
							adaptor.addChild(root_0, string_literal414_tree);
							}

							}
							break;

					}

					string_literal415=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_classMethod9080); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal415_tree = (Object)adaptor.create(string_literal415);
					adaptor.addChild(root_0, string_literal415_tree);
					}

					pushFollow(FOLLOW_ident_in_classMethod9082);
					ident416=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident416.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:79: ( genericDefinition )?
					int alt140=2;
					int LA140_0 = input.LA(1);
					if ( (LA140_0==LT) ) {
						alt140=1;
					}
					switch (alt140) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:80: genericDefinition
							{
							pushFollow(FOLLOW_genericDefinition_in_classMethod9085);
							genericDefinition417=genericDefinition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, genericDefinition417.getTree());

							}
							break;

					}

					char_literal418=(Token)match(input,DOT,FOLLOW_DOT_in_classMethod9089); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal418_tree = (Object)adaptor.create(char_literal418);
					adaptor.addChild(root_0, char_literal418_tree);
					}

					pushFollow(FOLLOW_ident_in_classMethod9091);
					ident419=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident419.getTree());

					char_literal420=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_classMethod9093); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal420_tree = (Object)adaptor.create(char_literal420);
					adaptor.addChild(root_0, char_literal420_tree);
					}

					pushFollow(FOLLOW_ident_in_classMethod9095);
					ident421=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident421.getTree());

					char_literal422=(Token)match(input,SEMI,FOLLOW_SEMI_in_classMethod9097); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal422_tree = (Object)adaptor.create(char_literal422);
					adaptor.addChild(root_0, char_literal422_tree);
					}

					}
					break;
				case 5 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:366:32: ( customAttribute )? ( 'class' )? 'procedure' ident ( genericDefinition )? '.' ident '=' ident ';'
					{
					root_0 = (Object)adaptor.nil();


					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:366:32: ( customAttribute )?
					int alt141=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							alt141=1;
							}
							break;
						case CLASS:
							{
							int LA141_2 = input.LA(2);
							if ( (synpred196_Delphi()) ) {
								alt141=1;
							}
							}
							break;
						case PROCEDURE:
							{
							int LA141_3 = input.LA(2);
							if ( (synpred196_Delphi()) ) {
								alt141=1;
							}
							}
							break;
					}
					switch (alt141) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:366:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_classMethod9131);
							customAttribute423=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, customAttribute423.getTree());

							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:366:51: ( 'class' )?
					int alt142=2;
					int LA142_0 = input.LA(1);
					if ( (LA142_0==CLASS) ) {
						alt142=1;
					}
					switch (alt142) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:366:52: 'class'
							{
							string_literal424=(Token)match(input,CLASS,FOLLOW_CLASS_in_classMethod9136); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal424_tree = (Object)adaptor.create(string_literal424);
							adaptor.addChild(root_0, string_literal424_tree);
							}

							}
							break;

					}

					string_literal425=(Token)match(input,PROCEDURE,FOLLOW_PROCEDURE_in_classMethod9140); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal425_tree = (Object)adaptor.create(string_literal425);
					adaptor.addChild(root_0, string_literal425_tree);
					}

					pushFollow(FOLLOW_ident_in_classMethod9142);
					ident426=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident426.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:366:80: ( genericDefinition )?
					int alt143=2;
					int LA143_0 = input.LA(1);
					if ( (LA143_0==LT) ) {
						alt143=1;
					}
					switch (alt143) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:366:81: genericDefinition
							{
							pushFollow(FOLLOW_genericDefinition_in_classMethod9145);
							genericDefinition427=genericDefinition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, genericDefinition427.getTree());

							}
							break;

					}

					char_literal428=(Token)match(input,DOT,FOLLOW_DOT_in_classMethod9149); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal428_tree = (Object)adaptor.create(char_literal428);
					adaptor.addChild(root_0, char_literal428_tree);
					}

					pushFollow(FOLLOW_ident_in_classMethod9151);
					ident429=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident429.getTree());

					char_literal430=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_classMethod9153); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal430_tree = (Object)adaptor.create(char_literal430);
					adaptor.addChild(root_0, char_literal430_tree);
					}

					pushFollow(FOLLOW_ident_in_classMethod9155);
					ident431=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident431.getTree());

					char_literal432=(Token)match(input,SEMI,FOLLOW_SEMI_in_classMethod9157); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal432_tree = (Object)adaptor.create(char_literal432);
					adaptor.addChild(root_0, char_literal432_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 90, classMethod_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classMethod"


	public static class classField_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classField"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:368:1: classField : ( customAttribute )? identList ':' typeDecl ';' ( hintingDirective )* -> ( customAttribute )? ^( TkClassField ^( TkVariableIdents identList ) ^( TkVariableType typeDecl ) ) ;
	public final DelphiParser.classField_return classField() throws RecognitionException {
		DelphiParser.classField_return retval = new DelphiParser.classField_return();
		retval.start = input.LT(1);
		int classField_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal435=null;
		Token char_literal437=null;
		ParserRuleReturnScope customAttribute433 =null;
		ParserRuleReturnScope identList434 =null;
		ParserRuleReturnScope typeDecl436 =null;
		ParserRuleReturnScope hintingDirective438 =null;

		Object char_literal435_tree=null;
		Object char_literal437_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_identList=new RewriteRuleSubtreeStream(adaptor,"rule identList");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:368:30: ( ( customAttribute )? identList ':' typeDecl ';' ( hintingDirective )* -> ( customAttribute )? ^( TkClassField ^( TkVariableIdents identList ) ^( TkVariableType typeDecl ) ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:368:32: ( customAttribute )? identList ':' typeDecl ';' ( hintingDirective )*
			{
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:368:32: ( customAttribute )?
			int alt145=2;
			switch ( input.LA(1) ) {
				case LBRACK:
					{
					alt145=1;
					}
					break;
				case TkIdentifier:
					{
					int LA145_2 = input.LA(2);
					if ( (synpred199_Delphi()) ) {
						alt145=1;
					}
					}
					break;
				case 198:
					{
					int LA145_3 = input.LA(2);
					if ( (synpred199_Delphi()) ) {
						alt145=1;
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DQ:
				case DW:
				case EXIT:
				case EXPORT:
				case FALSE:
				case FINAL:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STATIC:
				case STORED:
				case STRICT:
				case STRING:
				case TRUE:
				case UNSAFE:
				case VARARGS:
				case VARIANT:
				case VIRTUAL:
				case WRITE:
				case WRITEONLY:
					{
					int LA145_4 = input.LA(2);
					if ( (synpred199_Delphi()) ) {
						alt145=1;
					}
					}
					break;
			}
			switch (alt145) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:368:33: customAttribute
					{
					pushFollow(FOLLOW_customAttribute_in_classField9213);
					customAttribute433=customAttribute();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute433.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_identList_in_classField9217);
			identList434=identList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identList.add(identList434.getTree());
			char_literal435=(Token)match(input,COLON,FOLLOW_COLON_in_classField9219); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_COLON.add(char_literal435);

			pushFollow(FOLLOW_typeDecl_in_classField9221);
			typeDecl436=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl436.getTree());
			char_literal437=(Token)match(input,SEMI,FOLLOW_SEMI_in_classField9223); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal437);

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:368:78: ( hintingDirective )*
			loop146:
			while (true) {
				int alt146=2;
				int LA146_0 = input.LA(1);
				if ( (LA146_0==DEPRECATED||LA146_0==EXPERIMENTAL||LA146_0==LIBRARY||LA146_0==PLATFORM) ) {
					alt146=1;
				}

				switch (alt146) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:368:79: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_classField9226);
					hintingDirective438=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective438.getTree());
					}
					break;

				default :
					break loop146;
				}
			}

			// AST REWRITE
			// elements: customAttribute, identList, typeDecl
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 369:30: -> ( customAttribute )? ^( TkClassField ^( TkVariableIdents identList ) ^( TkVariableType typeDecl ) )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:369:33: ( customAttribute )?
				if ( stream_customAttribute.hasNext() ) {
					adaptor.addChild(root_0, stream_customAttribute.nextTree());
				}
				stream_customAttribute.reset();

				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:369:52: ^( TkClassField ^( TkVariableIdents identList ) ^( TkVariableType typeDecl ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClassField, "TkClassField"), root_1);
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:369:67: ^( TkVariableIdents identList )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableIdents, "TkVariableIdents"), root_2);
				adaptor.addChild(root_2, stream_identList.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:369:97: ^( TkVariableType typeDecl )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableType, "TkVariableType"), root_2);
				adaptor.addChild(root_2, stream_typeDecl.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 91, classField_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classField"


	public static class classProperty_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classProperty"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:371:1: classProperty : ( customAttribute )? ( 'class' )? 'property' ident ( classPropertyArray )? ( ':' genericTypeIdent )? ( classPropertyIndex )? ( classPropertySpecifier )* ';' ( classPropertyEndSpecifier )* -> ^( 'property' ^( TkVariableIdents ident ) ^( TkVariableType ( genericTypeIdent )? ) ( classPropertySpecifier )* ) ;
	public final DelphiParser.classProperty_return classProperty() throws RecognitionException {
		DelphiParser.classProperty_return retval = new DelphiParser.classProperty_return();
		retval.start = input.LT(1);
		int classProperty_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal440=null;
		Token string_literal441=null;
		Token char_literal444=null;
		Token char_literal448=null;
		ParserRuleReturnScope customAttribute439 =null;
		ParserRuleReturnScope ident442 =null;
		ParserRuleReturnScope classPropertyArray443 =null;
		ParserRuleReturnScope genericTypeIdent445 =null;
		ParserRuleReturnScope classPropertyIndex446 =null;
		ParserRuleReturnScope classPropertySpecifier447 =null;
		ParserRuleReturnScope classPropertyEndSpecifier449 =null;

		Object string_literal440_tree=null;
		Object string_literal441_tree=null;
		Object char_literal444_tree=null;
		Object char_literal448_tree=null;
		RewriteRuleTokenStream stream_PROPERTY=new RewriteRuleTokenStream(adaptor,"token PROPERTY");
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_classPropertyEndSpecifier=new RewriteRuleSubtreeStream(adaptor,"rule classPropertyEndSpecifier");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_genericTypeIdent=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeIdent");
		RewriteRuleSubtreeStream stream_classPropertyIndex=new RewriteRuleSubtreeStream(adaptor,"rule classPropertyIndex");
		RewriteRuleSubtreeStream stream_classPropertyArray=new RewriteRuleSubtreeStream(adaptor,"rule classPropertyArray");
		RewriteRuleSubtreeStream stream_classPropertySpecifier=new RewriteRuleSubtreeStream(adaptor,"rule classPropertySpecifier");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:371:30: ( ( customAttribute )? ( 'class' )? 'property' ident ( classPropertyArray )? ( ':' genericTypeIdent )? ( classPropertyIndex )? ( classPropertySpecifier )* ';' ( classPropertyEndSpecifier )* -> ^( 'property' ^( TkVariableIdents ident ) ^( TkVariableType ( genericTypeIdent )? ) ( classPropertySpecifier )* ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:371:32: ( customAttribute )? ( 'class' )? 'property' ident ( classPropertyArray )? ( ':' genericTypeIdent )? ( classPropertyIndex )? ( classPropertySpecifier )* ';' ( classPropertyEndSpecifier )*
			{
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:371:32: ( customAttribute )?
			int alt147=2;
			switch ( input.LA(1) ) {
				case LBRACK:
					{
					alt147=1;
					}
					break;
				case CLASS:
					{
					int LA147_2 = input.LA(2);
					if ( (synpred201_Delphi()) ) {
						alt147=1;
					}
					}
					break;
				case PROPERTY:
					{
					int LA147_3 = input.LA(2);
					if ( (synpred201_Delphi()) ) {
						alt147=1;
					}
					}
					break;
			}
			switch (alt147) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:371:33: customAttribute
					{
					pushFollow(FOLLOW_customAttribute_in_classProperty9333);
					customAttribute439=customAttribute();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute439.getTree());
					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:371:51: ( 'class' )?
			int alt148=2;
			int LA148_0 = input.LA(1);
			if ( (LA148_0==CLASS) ) {
				alt148=1;
			}
			switch (alt148) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:371:52: 'class'
					{
					string_literal440=(Token)match(input,CLASS,FOLLOW_CLASS_in_classProperty9338); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_CLASS.add(string_literal440);

					}
					break;

			}

			string_literal441=(Token)match(input,PROPERTY,FOLLOW_PROPERTY_in_classProperty9342); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_PROPERTY.add(string_literal441);

			pushFollow(FOLLOW_ident_in_classProperty9344);
			ident442=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_ident.add(ident442.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:371:79: ( classPropertyArray )?
			int alt149=2;
			int LA149_0 = input.LA(1);
			if ( (LA149_0==LBRACK) ) {
				alt149=1;
			}
			switch (alt149) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:371:80: classPropertyArray
					{
					pushFollow(FOLLOW_classPropertyArray_in_classProperty9347);
					classPropertyArray443=classPropertyArray();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classPropertyArray.add(classPropertyArray443.getTree());
					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:371:101: ( ':' genericTypeIdent )?
			int alt150=2;
			int LA150_0 = input.LA(1);
			if ( (LA150_0==COLON) ) {
				alt150=1;
			}
			switch (alt150) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:371:102: ':' genericTypeIdent
					{
					char_literal444=(Token)match(input,COLON,FOLLOW_COLON_in_classProperty9352); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(char_literal444);

					pushFollow(FOLLOW_genericTypeIdent_in_classProperty9354);
					genericTypeIdent445=genericTypeIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_genericTypeIdent.add(genericTypeIdent445.getTree());
					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:371:125: ( classPropertyIndex )?
			int alt151=2;
			int LA151_0 = input.LA(1);
			if ( (LA151_0==INDEX) ) {
				alt151=1;
			}
			switch (alt151) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:371:126: classPropertyIndex
					{
					pushFollow(FOLLOW_classPropertyIndex_in_classProperty9359);
					classPropertyIndex446=classPropertyIndex();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classPropertyIndex.add(classPropertyIndex446.getTree());
					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:371:147: ( classPropertySpecifier )*
			loop152:
			while (true) {
				int alt152=2;
				int LA152_0 = input.LA(1);
				if ( (LA152_0==DEFAULT||LA152_0==DISPID||LA152_0==IMPLEMENTS||LA152_0==NODEFAULT||(LA152_0 >= READ && LA152_0 <= READONLY)||LA152_0==STORED||(LA152_0 >= WRITE && LA152_0 <= WRITEONLY)) ) {
					alt152=1;
				}

				switch (alt152) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:371:148: classPropertySpecifier
					{
					pushFollow(FOLLOW_classPropertySpecifier_in_classProperty9364);
					classPropertySpecifier447=classPropertySpecifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classPropertySpecifier.add(classPropertySpecifier447.getTree());
					}
					break;

				default :
					break loop152;
				}
			}

			char_literal448=(Token)match(input,SEMI,FOLLOW_SEMI_in_classProperty9368); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal448);

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:371:177: ( classPropertyEndSpecifier )*
			loop153:
			while (true) {
				int alt153=2;
				switch ( input.LA(1) ) {
				case STORED:
					{
					int LA153_2 = input.LA(2);
					if ( ((LA153_2 >= ADD && LA153_2 <= ANSISTRING)||LA153_2==AS||(LA153_2 >= AT && LA153_2 <= AT2)||LA153_2==BREAK||(LA153_2 >= CONTAINS && LA153_2 <= DEFAULT)||LA153_2==DIV||LA153_2==DOT||(LA153_2 >= DQ && LA153_2 <= DW)||LA153_2==EQUAL||LA153_2==EXIT||LA153_2==EXPORT||LA153_2==FALSE||LA153_2==FINAL||(LA153_2 >= FUNCTION && LA153_2 <= GE)||LA153_2==GT||(LA153_2 >= IMPLEMENTS && LA153_2 <= INHERITED)||LA153_2==IS||LA153_2==LBRACK||LA153_2==LE||(LA153_2 >= LOCAL && LA153_2 <= NAME)||LA153_2==NIL||(LA153_2 >= NOT && LA153_2 <= OBJECT)||(LA153_2 >= OPERATOR && LA153_2 <= OUT)||(LA153_2 >= PLUS && LA153_2 <= POINTER2)||LA153_2==PROCEDURE||LA153_2==QuotedString||(LA153_2 >= READ && LA153_2 <= READONLY)||(LA153_2 >= REFERENCE && LA153_2 <= REGISTER)||LA153_2==REMOVE||LA153_2==SEMI||(LA153_2 >= SHL && LA153_2 <= STATIC)||(LA153_2 >= STORED && LA153_2 <= STRING)||LA153_2==TRUE||(LA153_2 >= TkHexNum && LA153_2 <= TkIntNum)||LA153_2==TkRealNum||LA153_2==UNSAFE||(LA153_2 >= VARARGS && LA153_2 <= VIRTUAL)||(LA153_2 >= WRITE && LA153_2 <= WRITEONLY)||(LA153_2 >= XOR && LA153_2 <= 200)) ) {
						alt153=1;
					}

					}
					break;
				case DEFAULT:
					{
					int LA153_3 = input.LA(2);
					if ( ((LA153_3 >= ADD && LA153_3 <= ANSISTRING)||LA153_3==AS||(LA153_3 >= AT && LA153_3 <= AT2)||LA153_3==BREAK||(LA153_3 >= CONTAINS && LA153_3 <= DEFAULT)||LA153_3==DIV||LA153_3==DOT||(LA153_3 >= DQ && LA153_3 <= DW)||LA153_3==EQUAL||LA153_3==EXIT||LA153_3==EXPORT||LA153_3==FALSE||LA153_3==FINAL||(LA153_3 >= FUNCTION && LA153_3 <= GE)||LA153_3==GT||(LA153_3 >= IMPLEMENTS && LA153_3 <= INHERITED)||LA153_3==IS||LA153_3==LBRACK||LA153_3==LE||(LA153_3 >= LOCAL && LA153_3 <= NAME)||LA153_3==NIL||(LA153_3 >= NOT && LA153_3 <= OBJECT)||(LA153_3 >= OPERATOR && LA153_3 <= OUT)||(LA153_3 >= PLUS && LA153_3 <= POINTER2)||LA153_3==PROCEDURE||LA153_3==QuotedString||(LA153_3 >= READ && LA153_3 <= READONLY)||(LA153_3 >= REFERENCE && LA153_3 <= REGISTER)||LA153_3==REMOVE||LA153_3==SEMI||(LA153_3 >= SHL && LA153_3 <= STATIC)||(LA153_3 >= STORED && LA153_3 <= STRING)||LA153_3==TRUE||(LA153_3 >= TkHexNum && LA153_3 <= TkIntNum)||LA153_3==TkRealNum||LA153_3==UNSAFE||(LA153_3 >= VARARGS && LA153_3 <= VIRTUAL)||(LA153_3 >= WRITE && LA153_3 <= WRITEONLY)||(LA153_3 >= XOR && LA153_3 <= 200)) ) {
						alt153=1;
					}

					}
					break;
				case NODEFAULT:
					{
					alt153=1;
					}
					break;
				}
				switch (alt153) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:371:178: classPropertyEndSpecifier
					{
					pushFollow(FOLLOW_classPropertyEndSpecifier_in_classProperty9371);
					classPropertyEndSpecifier449=classPropertyEndSpecifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classPropertyEndSpecifier.add(classPropertyEndSpecifier449.getTree());
					}
					break;

				default :
					break loop153;
				}
			}

			// AST REWRITE
			// elements: ident, genericTypeIdent, classPropertySpecifier, PROPERTY
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 372:31: -> ^( 'property' ^( TkVariableIdents ident ) ^( TkVariableType ( genericTypeIdent )? ) ( classPropertySpecifier )* )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:372:34: ^( 'property' ^( TkVariableIdents ident ) ^( TkVariableType ( genericTypeIdent )? ) ( classPropertySpecifier )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_PROPERTY.nextNode(), root_1);
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:372:47: ^( TkVariableIdents ident )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableIdents, "TkVariableIdents"), root_2);
				adaptor.addChild(root_2, stream_ident.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:372:73: ^( TkVariableType ( genericTypeIdent )? )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableType, "TkVariableType"), root_2);
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:372:90: ( genericTypeIdent )?
				if ( stream_genericTypeIdent.hasNext() ) {
					adaptor.addChild(root_2, stream_genericTypeIdent.nextTree());
				}
				stream_genericTypeIdent.reset();

				adaptor.addChild(root_1, root_2);
				}

				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:372:109: ( classPropertySpecifier )*
				while ( stream_classPropertySpecifier.hasNext() ) {
					adaptor.addChild(root_1, stream_classPropertySpecifier.nextTree());
				}
				stream_classPropertySpecifier.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 92, classProperty_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classProperty"


	public static class classPropertyArray_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classPropertyArray"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:376:1: classPropertyArray : '[' formalParameterList ']' ;
	public final DelphiParser.classPropertyArray_return classPropertyArray() throws RecognitionException {
		DelphiParser.classPropertyArray_return retval = new DelphiParser.classPropertyArray_return();
		retval.start = input.LT(1);
		int classPropertyArray_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal450=null;
		Token char_literal452=null;
		ParserRuleReturnScope formalParameterList451 =null;

		Object char_literal450_tree=null;
		Object char_literal452_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:376:30: ( '[' formalParameterList ']' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:376:32: '[' formalParameterList ']'
			{
			root_0 = (Object)adaptor.nil();


			char_literal450=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_classPropertyArray9537); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal450_tree = (Object)adaptor.create(char_literal450);
			adaptor.addChild(root_0, char_literal450_tree);
			}

			pushFollow(FOLLOW_formalParameterList_in_classPropertyArray9539);
			formalParameterList451=formalParameterList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterList451.getTree());

			char_literal452=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_classPropertyArray9541); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal452_tree = (Object)adaptor.create(char_literal452);
			adaptor.addChild(root_0, char_literal452_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 93, classPropertyArray_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classPropertyArray"


	public static class classPropertyIndex_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classPropertyIndex"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:378:1: classPropertyIndex : 'index' expression ( ';' )? ;
	public final DelphiParser.classPropertyIndex_return classPropertyIndex() throws RecognitionException {
		DelphiParser.classPropertyIndex_return retval = new DelphiParser.classPropertyIndex_return();
		retval.start = input.LT(1);
		int classPropertyIndex_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal453=null;
		Token char_literal455=null;
		ParserRuleReturnScope expression454 =null;

		Object string_literal453_tree=null;
		Object char_literal455_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:378:30: ( 'index' expression ( ';' )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:378:32: 'index' expression ( ';' )?
			{
			root_0 = (Object)adaptor.nil();


			string_literal453=(Token)match(input,INDEX,FOLLOW_INDEX_in_classPropertyIndex9588); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal453_tree = (Object)adaptor.create(string_literal453);
			adaptor.addChild(root_0, string_literal453_tree);
			}

			pushFollow(FOLLOW_expression_in_classPropertyIndex9590);
			expression454=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression454.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:378:51: ( ';' )?
			int alt154=2;
			int LA154_0 = input.LA(1);
			if ( (LA154_0==SEMI) ) {
				int LA154_1 = input.LA(2);
				if ( (synpred208_Delphi()) ) {
					alt154=1;
				}
			}
			switch (alt154) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:378:52: ';'
					{
					char_literal455=(Token)match(input,SEMI,FOLLOW_SEMI_in_classPropertyIndex9593); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal455_tree = (Object)adaptor.create(char_literal455);
					adaptor.addChild(root_0, char_literal455_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 94, classPropertyIndex_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classPropertyIndex"


	public static class classPropertySpecifier_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classPropertySpecifier"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:380:1: classPropertySpecifier : ( classPropertyReadWrite | classPropertyDispInterface | STORED expression | 'default' expression | 'default' | 'nodefault' | IMPLEMENTS typeId );
	public final DelphiParser.classPropertySpecifier_return classPropertySpecifier() throws RecognitionException {
		DelphiParser.classPropertySpecifier_return retval = new DelphiParser.classPropertySpecifier_return();
		retval.start = input.LT(1);
		int classPropertySpecifier_StartIndex = input.index();

		Object root_0 = null;

		Token STORED458=null;
		Token string_literal460=null;
		Token string_literal462=null;
		Token string_literal463=null;
		Token IMPLEMENTS464=null;
		ParserRuleReturnScope classPropertyReadWrite456 =null;
		ParserRuleReturnScope classPropertyDispInterface457 =null;
		ParserRuleReturnScope expression459 =null;
		ParserRuleReturnScope expression461 =null;
		ParserRuleReturnScope typeId465 =null;

		Object STORED458_tree=null;
		Object string_literal460_tree=null;
		Object string_literal462_tree=null;
		Object string_literal463_tree=null;
		Object IMPLEMENTS464_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:380:30: ( classPropertyReadWrite | classPropertyDispInterface | STORED expression | 'default' expression | 'default' | 'nodefault' | IMPLEMENTS typeId )
			int alt155=7;
			switch ( input.LA(1) ) {
			case READ:
			case WRITE:
				{
				alt155=1;
				}
				break;
			case DISPID:
			case READONLY:
			case WRITEONLY:
				{
				alt155=2;
				}
				break;
			case STORED:
				{
				alt155=3;
				}
				break;
			case DEFAULT:
				{
				int LA155_4 = input.LA(2);
				if ( (synpred212_Delphi()) ) {
					alt155=4;
				}
				else if ( (synpred213_Delphi()) ) {
					alt155=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 155, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case NODEFAULT:
				{
				alt155=6;
				}
				break;
			case IMPLEMENTS:
				{
				alt155=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 155, 0, input);
				throw nvae;
			}
			switch (alt155) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:380:32: classPropertyReadWrite
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classPropertyReadWrite_in_classPropertySpecifier9640);
					classPropertyReadWrite456=classPropertyReadWrite();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classPropertyReadWrite456.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:381:32: classPropertyDispInterface
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classPropertyDispInterface_in_classPropertySpecifier9676);
					classPropertyDispInterface457=classPropertyDispInterface();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classPropertyDispInterface457.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:382:32: STORED expression
					{
					root_0 = (Object)adaptor.nil();


					STORED458=(Token)match(input,STORED,FOLLOW_STORED_in_classPropertySpecifier9709); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					STORED458_tree = (Object)adaptor.create(STORED458);
					adaptor.addChild(root_0, STORED458_tree);
					}

					pushFollow(FOLLOW_expression_in_classPropertySpecifier9711);
					expression459=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression459.getTree());

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:383:32: 'default' expression
					{
					root_0 = (Object)adaptor.nil();


					string_literal460=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_classPropertySpecifier9744); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal460_tree = (Object)adaptor.create(string_literal460);
					adaptor.addChild(root_0, string_literal460_tree);
					}

					pushFollow(FOLLOW_expression_in_classPropertySpecifier9746);
					expression461=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression461.getTree());

					}
					break;
				case 5 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:384:32: 'default'
					{
					root_0 = (Object)adaptor.nil();


					string_literal462=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_classPropertySpecifier9779); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal462_tree = (Object)adaptor.create(string_literal462);
					adaptor.addChild(root_0, string_literal462_tree);
					}

					}
					break;
				case 6 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:385:32: 'nodefault'
					{
					root_0 = (Object)adaptor.nil();


					string_literal463=(Token)match(input,NODEFAULT,FOLLOW_NODEFAULT_in_classPropertySpecifier9828); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal463_tree = (Object)adaptor.create(string_literal463);
					adaptor.addChild(root_0, string_literal463_tree);
					}

					}
					break;
				case 7 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:386:32: IMPLEMENTS typeId
					{
					root_0 = (Object)adaptor.nil();


					IMPLEMENTS464=(Token)match(input,IMPLEMENTS,FOLLOW_IMPLEMENTS_in_classPropertySpecifier9861); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IMPLEMENTS464_tree = (Object)adaptor.create(IMPLEMENTS464);
					adaptor.addChild(root_0, IMPLEMENTS464_tree);
					}

					pushFollow(FOLLOW_typeId_in_classPropertySpecifier9863);
					typeId465=typeId();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeId465.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 95, classPropertySpecifier_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classPropertySpecifier"


	public static class classPropertyEndSpecifier_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classPropertyEndSpecifier"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:388:1: classPropertyEndSpecifier : ( STORED expression ';' | 'default' expression ';' | 'default' ';' | 'nodefault' ';' );
	public final DelphiParser.classPropertyEndSpecifier_return classPropertyEndSpecifier() throws RecognitionException {
		DelphiParser.classPropertyEndSpecifier_return retval = new DelphiParser.classPropertyEndSpecifier_return();
		retval.start = input.LT(1);
		int classPropertyEndSpecifier_StartIndex = input.index();

		Object root_0 = null;

		Token STORED466=null;
		Token char_literal468=null;
		Token string_literal469=null;
		Token char_literal471=null;
		Token string_literal472=null;
		Token char_literal473=null;
		Token string_literal474=null;
		Token char_literal475=null;
		ParserRuleReturnScope expression467 =null;
		ParserRuleReturnScope expression470 =null;

		Object STORED466_tree=null;
		Object char_literal468_tree=null;
		Object string_literal469_tree=null;
		Object char_literal471_tree=null;
		Object string_literal472_tree=null;
		Object char_literal473_tree=null;
		Object string_literal474_tree=null;
		Object char_literal475_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:388:30: ( STORED expression ';' | 'default' expression ';' | 'default' ';' | 'nodefault' ';' )
			int alt156=4;
			switch ( input.LA(1) ) {
			case STORED:
				{
				alt156=1;
				}
				break;
			case DEFAULT:
				{
				int LA156_2 = input.LA(2);
				if ( (LA156_2==SEMI) ) {
					int LA156_4 = input.LA(3);
					if ( (synpred216_Delphi()) ) {
						alt156=2;
					}
					else if ( (synpred217_Delphi()) ) {
						alt156=3;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 156, 4, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}
				else if ( ((LA156_2 >= ADD && LA156_2 <= ANSISTRING)||LA156_2==AS||(LA156_2 >= AT && LA156_2 <= AT2)||LA156_2==BREAK||(LA156_2 >= CONTAINS && LA156_2 <= DEFAULT)||LA156_2==DIV||LA156_2==DOT||(LA156_2 >= DQ && LA156_2 <= DW)||LA156_2==EQUAL||LA156_2==EXIT||LA156_2==EXPORT||LA156_2==FALSE||LA156_2==FINAL||(LA156_2 >= FUNCTION && LA156_2 <= GE)||LA156_2==GT||(LA156_2 >= IMPLEMENTS && LA156_2 <= INHERITED)||LA156_2==IS||LA156_2==LBRACK||LA156_2==LE||(LA156_2 >= LOCAL && LA156_2 <= NAME)||LA156_2==NIL||(LA156_2 >= NOT && LA156_2 <= OBJECT)||(LA156_2 >= OPERATOR && LA156_2 <= OUT)||(LA156_2 >= PLUS && LA156_2 <= POINTER2)||LA156_2==PROCEDURE||LA156_2==QuotedString||(LA156_2 >= READ && LA156_2 <= READONLY)||(LA156_2 >= REFERENCE && LA156_2 <= REGISTER)||LA156_2==REMOVE||(LA156_2 >= SHL && LA156_2 <= STATIC)||(LA156_2 >= STORED && LA156_2 <= STRING)||LA156_2==TRUE||(LA156_2 >= TkHexNum && LA156_2 <= TkIntNum)||LA156_2==TkRealNum||LA156_2==UNSAFE||(LA156_2 >= VARARGS && LA156_2 <= VIRTUAL)||(LA156_2 >= WRITE && LA156_2 <= WRITEONLY)||(LA156_2 >= XOR && LA156_2 <= 200)) ) {
					alt156=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 156, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case NODEFAULT:
				{
				alt156=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 156, 0, input);
				throw nvae;
			}
			switch (alt156) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:388:32: STORED expression ';'
					{
					root_0 = (Object)adaptor.nil();


					STORED466=(Token)match(input,STORED,FOLLOW_STORED_in_classPropertyEndSpecifier9903); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					STORED466_tree = (Object)adaptor.create(STORED466);
					adaptor.addChild(root_0, STORED466_tree);
					}

					pushFollow(FOLLOW_expression_in_classPropertyEndSpecifier9905);
					expression467=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression467.getTree());

					char_literal468=(Token)match(input,SEMI,FOLLOW_SEMI_in_classPropertyEndSpecifier9907); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal468_tree = (Object)adaptor.create(char_literal468);
					adaptor.addChild(root_0, char_literal468_tree);
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:389:32: 'default' expression ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal469=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_classPropertyEndSpecifier9944); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal469_tree = (Object)adaptor.create(string_literal469);
					adaptor.addChild(root_0, string_literal469_tree);
					}

					pushFollow(FOLLOW_expression_in_classPropertyEndSpecifier9946);
					expression470=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression470.getTree());

					char_literal471=(Token)match(input,SEMI,FOLLOW_SEMI_in_classPropertyEndSpecifier9948); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal471_tree = (Object)adaptor.create(char_literal471);
					adaptor.addChild(root_0, char_literal471_tree);
					}

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:390:32: 'default' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal472=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_classPropertyEndSpecifier9981); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal472_tree = (Object)adaptor.create(string_literal472);
					adaptor.addChild(root_0, string_literal472_tree);
					}

					char_literal473=(Token)match(input,SEMI,FOLLOW_SEMI_in_classPropertyEndSpecifier9983); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal473_tree = (Object)adaptor.create(char_literal473);
					adaptor.addChild(root_0, char_literal473_tree);
					}

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:391:32: 'nodefault' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal474=(Token)match(input,NODEFAULT,FOLLOW_NODEFAULT_in_classPropertyEndSpecifier10016); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal474_tree = (Object)adaptor.create(string_literal474);
					adaptor.addChild(root_0, string_literal474_tree);
					}

					char_literal475=(Token)match(input,SEMI,FOLLOW_SEMI_in_classPropertyEndSpecifier10018); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal475_tree = (Object)adaptor.create(char_literal475);
					adaptor.addChild(root_0, char_literal475_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 96, classPropertyEndSpecifier_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classPropertyEndSpecifier"


	public static class classPropertyReadWrite_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classPropertyReadWrite"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:394:1: classPropertyReadWrite : ( 'read' qualifiedIdent ( '[' expression ']' )? -> ^( 'read' qualifiedIdent ) | 'write' qualifiedIdent ( '[' expression ']' )? -> ^( 'write' qualifiedIdent ) );
	public final DelphiParser.classPropertyReadWrite_return classPropertyReadWrite() throws RecognitionException {
		DelphiParser.classPropertyReadWrite_return retval = new DelphiParser.classPropertyReadWrite_return();
		retval.start = input.LT(1);
		int classPropertyReadWrite_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal476=null;
		Token char_literal478=null;
		Token char_literal480=null;
		Token string_literal481=null;
		Token char_literal483=null;
		Token char_literal485=null;
		ParserRuleReturnScope qualifiedIdent477 =null;
		ParserRuleReturnScope expression479 =null;
		ParserRuleReturnScope qualifiedIdent482 =null;
		ParserRuleReturnScope expression484 =null;

		Object string_literal476_tree=null;
		Object char_literal478_tree=null;
		Object char_literal480_tree=null;
		Object string_literal481_tree=null;
		Object char_literal483_tree=null;
		Object char_literal485_tree=null;
		RewriteRuleTokenStream stream_READ=new RewriteRuleTokenStream(adaptor,"token READ");
		RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
		RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
		RewriteRuleTokenStream stream_WRITE=new RewriteRuleTokenStream(adaptor,"token WRITE");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_qualifiedIdent=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdent");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:394:30: ( 'read' qualifiedIdent ( '[' expression ']' )? -> ^( 'read' qualifiedIdent ) | 'write' qualifiedIdent ( '[' expression ']' )? -> ^( 'write' qualifiedIdent ) )
			int alt159=2;
			int LA159_0 = input.LA(1);
			if ( (LA159_0==READ) ) {
				alt159=1;
			}
			else if ( (LA159_0==WRITE) ) {
				alt159=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 159, 0, input);
				throw nvae;
			}

			switch (alt159) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:394:32: 'read' qualifiedIdent ( '[' expression ']' )?
					{
					string_literal476=(Token)match(input,READ,FOLLOW_READ_in_classPropertyReadWrite10062); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_READ.add(string_literal476);

					pushFollow(FOLLOW_qualifiedIdent_in_classPropertyReadWrite10064);
					qualifiedIdent477=qualifiedIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_qualifiedIdent.add(qualifiedIdent477.getTree());
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:394:54: ( '[' expression ']' )?
					int alt157=2;
					int LA157_0 = input.LA(1);
					if ( (LA157_0==LBRACK) ) {
						alt157=1;
					}
					switch (alt157) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:394:55: '[' expression ']'
							{
							char_literal478=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_classPropertyReadWrite10067); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LBRACK.add(char_literal478);

							pushFollow(FOLLOW_expression_in_classPropertyReadWrite10069);
							expression479=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_expression.add(expression479.getTree());
							char_literal480=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_classPropertyReadWrite10071); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_RBRACK.add(char_literal480);

							}
							break;

					}

					// AST REWRITE
					// elements: READ, qualifiedIdent
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 395:30: -> ^( 'read' qualifiedIdent )
					{
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:395:33: ^( 'read' qualifiedIdent )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_READ.nextNode(), root_1);
						adaptor.addChild(root_1, stream_qualifiedIdent.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:396:32: 'write' qualifiedIdent ( '[' expression ']' )?
					{
					string_literal481=(Token)match(input,WRITE,FOLLOW_WRITE_in_classPropertyReadWrite10145); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_WRITE.add(string_literal481);

					pushFollow(FOLLOW_qualifiedIdent_in_classPropertyReadWrite10147);
					qualifiedIdent482=qualifiedIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_qualifiedIdent.add(qualifiedIdent482.getTree());
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:396:55: ( '[' expression ']' )?
					int alt158=2;
					int LA158_0 = input.LA(1);
					if ( (LA158_0==LBRACK) ) {
						alt158=1;
					}
					switch (alt158) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:396:56: '[' expression ']'
							{
							char_literal483=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_classPropertyReadWrite10150); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LBRACK.add(char_literal483);

							pushFollow(FOLLOW_expression_in_classPropertyReadWrite10152);
							expression484=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_expression.add(expression484.getTree());
							char_literal485=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_classPropertyReadWrite10154); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_RBRACK.add(char_literal485);

							}
							break;

					}

					// AST REWRITE
					// elements: WRITE, qualifiedIdent
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 397:30: -> ^( 'write' qualifiedIdent )
					{
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:397:33: ^( 'write' qualifiedIdent )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_WRITE.nextNode(), root_1);
						adaptor.addChild(root_1, stream_qualifiedIdent.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 97, classPropertyReadWrite_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classPropertyReadWrite"


	public static class classPropertyDispInterface_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classPropertyDispInterface"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:399:1: classPropertyDispInterface : ( 'readonly' ';' | 'writeonly' ';' | dispIDDirective );
	public final DelphiParser.classPropertyDispInterface_return classPropertyDispInterface() throws RecognitionException {
		DelphiParser.classPropertyDispInterface_return retval = new DelphiParser.classPropertyDispInterface_return();
		retval.start = input.LT(1);
		int classPropertyDispInterface_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal486=null;
		Token char_literal487=null;
		Token string_literal488=null;
		Token char_literal489=null;
		ParserRuleReturnScope dispIDDirective490 =null;

		Object string_literal486_tree=null;
		Object char_literal487_tree=null;
		Object string_literal488_tree=null;
		Object char_literal489_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:399:30: ( 'readonly' ';' | 'writeonly' ';' | dispIDDirective )
			int alt160=3;
			switch ( input.LA(1) ) {
			case READONLY:
				{
				alt160=1;
				}
				break;
			case WRITEONLY:
				{
				alt160=2;
				}
				break;
			case DISPID:
				{
				alt160=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 160, 0, input);
				throw nvae;
			}
			switch (alt160) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:399:32: 'readonly' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal486=(Token)match(input,READONLY,FOLLOW_READONLY_in_classPropertyDispInterface10233); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal486_tree = (Object)adaptor.create(string_literal486);
					adaptor.addChild(root_0, string_literal486_tree);
					}

					char_literal487=(Token)match(input,SEMI,FOLLOW_SEMI_in_classPropertyDispInterface10235); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal487_tree = (Object)adaptor.create(char_literal487);
					adaptor.addChild(root_0, char_literal487_tree);
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:400:32: 'writeonly' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal488=(Token)match(input,WRITEONLY,FOLLOW_WRITEONLY_in_classPropertyDispInterface10268); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal488_tree = (Object)adaptor.create(string_literal488);
					adaptor.addChild(root_0, string_literal488_tree);
					}

					char_literal489=(Token)match(input,SEMI,FOLLOW_SEMI_in_classPropertyDispInterface10270); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal489_tree = (Object)adaptor.create(char_literal489);
					adaptor.addChild(root_0, char_literal489_tree);
					}

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:401:32: dispIDDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_dispIDDirective_in_classPropertyDispInterface10303);
					dispIDDirective490=dispIDDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dispIDDirective490.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 98, classPropertyDispInterface_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classPropertyDispInterface"


	public static class visibility_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "visibility"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:403:1: visibility : ( ( STRICT )? 'protected' | ( STRICT )? 'private' | 'public' | 'published' | 'automated' );
	public final DelphiParser.visibility_return visibility() throws RecognitionException {
		DelphiParser.visibility_return retval = new DelphiParser.visibility_return();
		retval.start = input.LT(1);
		int visibility_StartIndex = input.index();

		Object root_0 = null;

		Token STRICT491=null;
		Token string_literal492=null;
		Token STRICT493=null;
		Token string_literal494=null;
		Token string_literal495=null;
		Token string_literal496=null;
		Token string_literal497=null;

		Object STRICT491_tree=null;
		Object string_literal492_tree=null;
		Object STRICT493_tree=null;
		Object string_literal494_tree=null;
		Object string_literal495_tree=null;
		Object string_literal496_tree=null;
		Object string_literal497_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:403:30: ( ( STRICT )? 'protected' | ( STRICT )? 'private' | 'public' | 'published' | 'automated' )
			int alt163=5;
			switch ( input.LA(1) ) {
			case STRICT:
				{
				int LA163_1 = input.LA(2);
				if ( (LA163_1==PROTECTED) ) {
					alt163=1;
				}
				else if ( (LA163_1==PRIVATE) ) {
					alt163=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 163, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PROTECTED:
				{
				alt163=1;
				}
				break;
			case PRIVATE:
				{
				alt163=2;
				}
				break;
			case PUBLIC:
				{
				alt163=3;
				}
				break;
			case PUBLISHED:
				{
				alt163=4;
				}
				break;
			case AUTOMATED:
				{
				alt163=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 163, 0, input);
				throw nvae;
			}
			switch (alt163) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:403:32: ( STRICT )? 'protected'
					{
					root_0 = (Object)adaptor.nil();


					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:403:32: ( STRICT )?
					int alt161=2;
					int LA161_0 = input.LA(1);
					if ( (LA161_0==STRICT) ) {
						alt161=1;
					}
					switch (alt161) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:403:33: STRICT
							{
							STRICT491=(Token)match(input,STRICT,FOLLOW_STRICT_in_visibility10359); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							STRICT491_tree = (Object)adaptor.create(STRICT491);
							adaptor.addChild(root_0, STRICT491_tree);
							}

							}
							break;

					}

					string_literal492=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_visibility10363); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal492_tree = (Object)adaptor.create(string_literal492);
					adaptor.addChild(root_0, string_literal492_tree);
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:404:32: ( STRICT )? 'private'
					{
					root_0 = (Object)adaptor.nil();


					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:404:32: ( STRICT )?
					int alt162=2;
					int LA162_0 = input.LA(1);
					if ( (LA162_0==STRICT) ) {
						alt162=1;
					}
					switch (alt162) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:404:33: STRICT
							{
							STRICT493=(Token)match(input,STRICT,FOLLOW_STRICT_in_visibility10397); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							STRICT493_tree = (Object)adaptor.create(STRICT493);
							adaptor.addChild(root_0, STRICT493_tree);
							}

							}
							break;

					}

					string_literal494=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_visibility10401); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal494_tree = (Object)adaptor.create(string_literal494);
					adaptor.addChild(root_0, string_literal494_tree);
					}

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:405:32: 'public'
					{
					root_0 = (Object)adaptor.nil();


					string_literal495=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_visibility10434); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal495_tree = (Object)adaptor.create(string_literal495);
					adaptor.addChild(root_0, string_literal495_tree);
					}

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:406:32: 'published'
					{
					root_0 = (Object)adaptor.nil();


					string_literal496=(Token)match(input,PUBLISHED,FOLLOW_PUBLISHED_in_visibility10467); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal496_tree = (Object)adaptor.create(string_literal496);
					adaptor.addChild(root_0, string_literal496_tree);
					}

					}
					break;
				case 5 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:407:32: 'automated'
					{
					root_0 = (Object)adaptor.nil();


					string_literal497=(Token)match(input,AUTOMATED,FOLLOW_AUTOMATED_in_visibility10500); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal497_tree = (Object)adaptor.create(string_literal497);
					adaptor.addChild(root_0, string_literal497_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 99, visibility_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "visibility"


	public static class exportedProcHeading_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "exportedProcHeading"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:1: exportedProcHeading : ( 'procedure' ident ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( functionDirective )* | 'function' ident ( formalParameterSection )? ';' ( functionDirective )* );
	public final DelphiParser.exportedProcHeading_return exportedProcHeading() throws RecognitionException {
		DelphiParser.exportedProcHeading_return retval = new DelphiParser.exportedProcHeading_return();
		retval.start = input.LT(1);
		int exportedProcHeading_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal498=null;
		Token char_literal501=null;
		Token char_literal504=null;
		Token string_literal506=null;
		Token char_literal509=null;
		ParserRuleReturnScope ident499 =null;
		ParserRuleReturnScope formalParameterSection500 =null;
		ParserRuleReturnScope customAttribute502 =null;
		ParserRuleReturnScope typeDecl503 =null;
		ParserRuleReturnScope functionDirective505 =null;
		ParserRuleReturnScope ident507 =null;
		ParserRuleReturnScope formalParameterSection508 =null;
		ParserRuleReturnScope functionDirective510 =null;

		Object string_literal498_tree=null;
		Object char_literal501_tree=null;
		Object char_literal504_tree=null;
		Object string_literal506_tree=null;
		Object char_literal509_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:30: ( 'procedure' ident ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( functionDirective )* | 'function' ident ( formalParameterSection )? ';' ( functionDirective )* )
			int alt169=2;
			int LA169_0 = input.LA(1);
			if ( (LA169_0==PROCEDURE) ) {
				alt169=1;
			}
			else if ( (LA169_0==FUNCTION) ) {
				alt169=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 169, 0, input);
				throw nvae;
			}

			switch (alt169) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:32: 'procedure' ident ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( functionDirective )*
					{
					root_0 = (Object)adaptor.nil();


					string_literal498=(Token)match(input,PROCEDURE,FOLLOW_PROCEDURE_in_exportedProcHeading10554); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal498_tree = (Object)adaptor.create(string_literal498);
					adaptor.addChild(root_0, string_literal498_tree);
					}

					pushFollow(FOLLOW_ident_in_exportedProcHeading10556);
					ident499=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident499.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:50: ( formalParameterSection )?
					int alt164=2;
					int LA164_0 = input.LA(1);
					if ( (LA164_0==LPAREN) ) {
						alt164=1;
					}
					switch (alt164) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:51: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_exportedProcHeading10559);
							formalParameterSection500=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterSection500.getTree());

							}
							break;

					}

					char_literal501=(Token)match(input,COLON,FOLLOW_COLON_in_exportedProcHeading10563); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal501_tree = (Object)adaptor.create(char_literal501);
					adaptor.addChild(root_0, char_literal501_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:80: ( customAttribute )?
					int alt165=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							int LA165_1 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case PACKED:
							{
							int LA165_2 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case ARRAY:
							{
							int LA165_3 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case SET:
							{
							int LA165_4 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case FILE:
							{
							int LA165_5 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case CLASS:
							{
							int LA165_6 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case DISPINTERFACE:
						case INTERFACE:
							{
							int LA165_7 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case OBJECT:
							{
							int LA165_8 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case RECORD:
							{
							int LA165_9 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case POINTER2:
							{
							int LA165_10 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case POINTER:
							{
							int LA165_11 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case STRING:
							{
							int LA165_12 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case TYPE:
							{
							int LA165_13 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case ANSISTRING:
							{
							int LA165_14 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case FUNCTION:
							{
							int LA165_15 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case PROCEDURE:
							{
							int LA165_16 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case REFERENCE:
							{
							int LA165_17 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case VARIANT:
							{
							int LA165_18 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case TkIdentifier:
							{
							int LA165_19 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case 198:
							{
							int LA165_20 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case TRUE:
							{
							int LA165_21 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case LPAREN:
							{
							int LA165_22 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case AT2:
							{
							int LA165_23 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case 199:
							{
							int LA165_24 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case NOT:
							{
							int LA165_25 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case PLUS:
							{
							int LA165_26 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case MINUS:
							{
							int LA165_27 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case TkRealNum:
							{
							int LA165_28 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case TkHexNum:
						case TkIntNum:
							{
							int LA165_29 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case FALSE:
							{
							int LA165_30 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case ADD:
						case AT:
						case BREAK:
						case CONTAINS:
						case CONTINUE:
						case DEFAULT:
						case DQ:
						case DW:
						case EXIT:
						case EXPORT:
						case FINAL:
						case IMPLEMENTS:
						case INDEX:
						case LOCAL:
						case MESSAGE:
						case NAME:
						case OPERATOR:
						case OUT:
						case READ:
						case READONLY:
						case REGISTER:
						case REMOVE:
						case STATIC:
						case STORED:
						case STRICT:
						case UNSAFE:
						case VARARGS:
						case VIRTUAL:
						case WRITE:
						case WRITEONLY:
							{
							int LA165_31 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case NIL:
							{
							int LA165_32 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case ControlChar:
						case ControlString:
							{
							int LA165_33 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case QuotedString:
							{
							int LA165_34 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case INHERITED:
							{
							int LA165_35 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case 200:
							{
							int LA165_36 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case DOT:
							{
							int LA165_37 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case LT:
							{
							int LA165_38 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case AND:
						case AS:
						case DIV:
						case MOD:
						case OR:
						case SHL:
						case SHR:
						case SLASH:
						case STAR:
						case XOR:
							{
							int LA165_39 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case EQUAL:
							{
							int LA165_40 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case GE:
						case GT:
						case IN:
						case IS:
						case LE:
						case NOT_EQUAL:
							{
							int LA165_41 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case DOTDOT:
							{
							int LA165_42 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case SEMI:
							{
							int LA165_43 = input.LA(2);
							if ( (synpred230_Delphi()) ) {
								alt165=1;
							}
							}
							break;
					}
					switch (alt165) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:81: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_exportedProcHeading10566);
							customAttribute502=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, customAttribute502.getTree());

							}
							break;

					}

					pushFollow(FOLLOW_typeDecl_in_exportedProcHeading10570);
					typeDecl503=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl503.getTree());

					char_literal504=(Token)match(input,SEMI,FOLLOW_SEMI_in_exportedProcHeading10572); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal504_tree = (Object)adaptor.create(char_literal504);
					adaptor.addChild(root_0, char_literal504_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:112: ( functionDirective )*
					loop166:
					while (true) {
						int alt166=2;
						int LA166_0 = input.LA(1);
						if ( (LA166_0==ASSEMBLER||LA166_0==CDECL||LA166_0==DEPRECATED||(LA166_0 >= EXPERIMENTAL && LA166_0 <= EXPORT)||LA166_0==EXTERNAL||LA166_0==FAR||LA166_0==INLINE||(LA166_0 >= LIBRARY && LA166_0 <= LOCAL)||LA166_0==NEAR||LA166_0==OVERLOAD||(LA166_0 >= PASCAL && LA166_0 <= PLATFORM)||LA166_0==REGISTER||LA166_0==SAFECALL||LA166_0==STDCALL||LA166_0==UNSAFE||LA166_0==VARARGS) ) {
							alt166=1;
						}

						switch (alt166) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:113: functionDirective
							{
							pushFollow(FOLLOW_functionDirective_in_exportedProcHeading10575);
							functionDirective505=functionDirective();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, functionDirective505.getTree());

							}
							break;

						default :
							break loop166;
						}
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:32: 'function' ident ( formalParameterSection )? ';' ( functionDirective )*
					{
					root_0 = (Object)adaptor.nil();


					string_literal506=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_exportedProcHeading10610); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal506_tree = (Object)adaptor.create(string_literal506);
					adaptor.addChild(root_0, string_literal506_tree);
					}

					pushFollow(FOLLOW_ident_in_exportedProcHeading10612);
					ident507=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident507.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:49: ( formalParameterSection )?
					int alt167=2;
					int LA167_0 = input.LA(1);
					if ( (LA167_0==LPAREN) ) {
						alt167=1;
					}
					switch (alt167) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:50: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_exportedProcHeading10615);
							formalParameterSection508=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterSection508.getTree());

							}
							break;

					}

					char_literal509=(Token)match(input,SEMI,FOLLOW_SEMI_in_exportedProcHeading10619); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal509_tree = (Object)adaptor.create(char_literal509);
					adaptor.addChild(root_0, char_literal509_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:79: ( functionDirective )*
					loop168:
					while (true) {
						int alt168=2;
						int LA168_0 = input.LA(1);
						if ( (LA168_0==ASSEMBLER||LA168_0==CDECL||LA168_0==DEPRECATED||(LA168_0 >= EXPERIMENTAL && LA168_0 <= EXPORT)||LA168_0==EXTERNAL||LA168_0==FAR||LA168_0==INLINE||(LA168_0 >= LIBRARY && LA168_0 <= LOCAL)||LA168_0==NEAR||LA168_0==OVERLOAD||(LA168_0 >= PASCAL && LA168_0 <= PLATFORM)||LA168_0==REGISTER||LA168_0==SAFECALL||LA168_0==STDCALL||LA168_0==UNSAFE||LA168_0==VARARGS) ) {
							alt168=1;
						}

						switch (alt168) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:80: functionDirective
							{
							pushFollow(FOLLOW_functionDirective_in_exportedProcHeading10622);
							functionDirective510=functionDirective();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, functionDirective510.getTree());

							}
							break;

						default :
							break loop168;
						}
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 100, exportedProcHeading_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "exportedProcHeading"


	public static class methodDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodDecl"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:415:1: methodDecl : methodDeclHeading ';' ( methodDirective )* ( methodBody )? -> methodDeclHeading ( methodBody )? ;
	public final DelphiParser.methodDecl_return methodDecl() throws RecognitionException {
		DelphiParser.methodDecl_return retval = new DelphiParser.methodDecl_return();
		retval.start = input.LT(1);
		int methodDecl_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal512=null;
		ParserRuleReturnScope methodDeclHeading511 =null;
		ParserRuleReturnScope methodDirective513 =null;
		ParserRuleReturnScope methodBody514 =null;

		Object char_literal512_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_methodBody=new RewriteRuleSubtreeStream(adaptor,"rule methodBody");
		RewriteRuleSubtreeStream stream_methodDirective=new RewriteRuleSubtreeStream(adaptor,"rule methodDirective");
		RewriteRuleSubtreeStream stream_methodDeclHeading=new RewriteRuleSubtreeStream(adaptor,"rule methodDeclHeading");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:415:30: ( methodDeclHeading ';' ( methodDirective )* ( methodBody )? -> methodDeclHeading ( methodBody )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:415:32: methodDeclHeading ';' ( methodDirective )* ( methodBody )?
			{
			pushFollow(FOLLOW_methodDeclHeading_in_methodDecl10679);
			methodDeclHeading511=methodDeclHeading();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_methodDeclHeading.add(methodDeclHeading511.getTree());
			char_literal512=(Token)match(input,SEMI,FOLLOW_SEMI_in_methodDecl10681); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal512);

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:415:54: ( methodDirective )*
			loop170:
			while (true) {
				int alt170=2;
				alt170 = dfa170.predict(input);
				switch (alt170) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:415:55: methodDirective
					{
					pushFollow(FOLLOW_methodDirective_in_methodDecl10684);
					methodDirective513=methodDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodDirective.add(methodDirective513.getTree());
					}
					break;

				default :
					break loop170;
				}
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:415:73: ( methodBody )?
			int alt171=2;
			switch ( input.LA(1) ) {
				case LABEL:
					{
					int LA171_1 = input.LA(2);
					if ( (synpred236_Delphi()) ) {
						alt171=1;
					}
					}
					break;
				case CONST:
				case RESOURCESTRING:
					{
					int LA171_2 = input.LA(2);
					if ( (synpred236_Delphi()) ) {
						alt171=1;
					}
					}
					break;
				case TYPE:
					{
					int LA171_3 = input.LA(2);
					if ( (synpred236_Delphi()) ) {
						alt171=1;
					}
					}
					break;
				case THREADVAR:
				case VAR:
					{
					int LA171_4 = input.LA(2);
					if ( (synpred236_Delphi()) ) {
						alt171=1;
					}
					}
					break;
				case LBRACK:
					{
					int LA171_5 = input.LA(2);
					if ( (synpred236_Delphi()) ) {
						alt171=1;
					}
					}
					break;
				case CLASS:
					{
					int LA171_6 = input.LA(2);
					if ( (synpred236_Delphi()) ) {
						alt171=1;
					}
					}
					break;
				case PROCEDURE:
					{
					int LA171_7 = input.LA(2);
					if ( (synpred236_Delphi()) ) {
						alt171=1;
					}
					}
					break;
				case FUNCTION:
					{
					int LA171_8 = input.LA(2);
					if ( (synpred236_Delphi()) ) {
						alt171=1;
					}
					}
					break;
				case CONSTRUCTOR:
				case DESTRUCTOR:
					{
					int LA171_9 = input.LA(2);
					if ( (synpred236_Delphi()) ) {
						alt171=1;
					}
					}
					break;
				case EXPORTS:
					{
					int LA171_10 = input.LA(2);
					if ( (synpred236_Delphi()) ) {
						alt171=1;
					}
					}
					break;
				case BEGIN:
					{
					int LA171_11 = input.LA(2);
					if ( (synpred236_Delphi()) ) {
						alt171=1;
					}
					}
					break;
				case ASM:
					{
					int LA171_12 = input.LA(2);
					if ( (synpred236_Delphi()) ) {
						alt171=1;
					}
					}
					break;
				case SEMI:
					{
					int LA171_13 = input.LA(2);
					if ( (synpred236_Delphi()) ) {
						alt171=1;
					}
					}
					break;
			}
			switch (alt171) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:415:74: methodBody
					{
					pushFollow(FOLLOW_methodBody_in_methodDecl10689);
					methodBody514=methodBody();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodBody.add(methodBody514.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: methodDeclHeading, methodBody
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 415:87: -> methodDeclHeading ( methodBody )?
			{
				adaptor.addChild(root_0, stream_methodDeclHeading.nextTree());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:415:108: ( methodBody )?
				if ( stream_methodBody.hasNext() ) {
					adaptor.addChild(root_0, stream_methodBody.nextTree());
				}
				stream_methodBody.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 101, methodDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodDecl"


	public static class methodDeclHeading_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodDeclHeading"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:417:1: methodDeclHeading : ( ( customAttribute )? ( 'class' )? methodKey methodName ( formalParameterSection )? -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ) | ( customAttribute )? ( 'class' )? 'function' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )? -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) ) | ( customAttribute )? 'class' 'operator' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )? -> ( customAttribute )? 'class' ^( 'operator' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) ) );
	public final DelphiParser.methodDeclHeading_return methodDeclHeading() throws RecognitionException {
		DelphiParser.methodDeclHeading_return retval = new DelphiParser.methodDeclHeading_return();
		retval.start = input.LT(1);
		int methodDeclHeading_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal516=null;
		Token string_literal521=null;
		Token string_literal522=null;
		Token char_literal525=null;
		Token string_literal529=null;
		Token string_literal530=null;
		Token char_literal533=null;
		ParserRuleReturnScope customAttribute515 =null;
		ParserRuleReturnScope methodKey517 =null;
		ParserRuleReturnScope methodName518 =null;
		ParserRuleReturnScope formalParameterSection519 =null;
		ParserRuleReturnScope customAttribute520 =null;
		ParserRuleReturnScope methodName523 =null;
		ParserRuleReturnScope formalParameterSection524 =null;
		ParserRuleReturnScope customAttribute526 =null;
		ParserRuleReturnScope typeDecl527 =null;
		ParserRuleReturnScope customAttribute528 =null;
		ParserRuleReturnScope methodName531 =null;
		ParserRuleReturnScope formalParameterSection532 =null;
		ParserRuleReturnScope customAttribute534 =null;
		ParserRuleReturnScope typeDecl535 =null;

		Object string_literal516_tree=null;
		Object string_literal521_tree=null;
		Object string_literal522_tree=null;
		Object char_literal525_tree=null;
		Object string_literal529_tree=null;
		Object string_literal530_tree=null;
		Object char_literal533_tree=null;
		RewriteRuleTokenStream stream_OPERATOR=new RewriteRuleTokenStream(adaptor,"token OPERATOR");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
		RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_methodKey=new RewriteRuleSubtreeStream(adaptor,"rule methodKey");
		RewriteRuleSubtreeStream stream_formalParameterSection=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterSection");
		RewriteRuleSubtreeStream stream_methodName=new RewriteRuleSubtreeStream(adaptor,"rule methodName");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:417:30: ( ( customAttribute )? ( 'class' )? methodKey methodName ( formalParameterSection )? -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ) | ( customAttribute )? ( 'class' )? 'function' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )? -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) ) | ( customAttribute )? 'class' 'operator' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )? -> ( customAttribute )? 'class' ^( 'operator' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) ) )
			int alt184=3;
			switch ( input.LA(1) ) {
			case LBRACK:
				{
				int LA184_1 = input.LA(2);
				if ( (synpred240_Delphi()) ) {
					alt184=1;
				}
				else if ( (synpred246_Delphi()) ) {
					alt184=2;
				}
				else if ( (true) ) {
					alt184=3;
				}

				}
				break;
			case CLASS:
				{
				int LA184_2 = input.LA(2);
				if ( (synpred240_Delphi()) ) {
					alt184=1;
				}
				else if ( (synpred246_Delphi()) ) {
					alt184=2;
				}
				else if ( (true) ) {
					alt184=3;
				}

				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case PROCEDURE:
				{
				alt184=1;
				}
				break;
			case FUNCTION:
				{
				alt184=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 184, 0, input);
				throw nvae;
			}
			switch (alt184) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:417:32: ( customAttribute )? ( 'class' )? methodKey methodName ( formalParameterSection )?
					{
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:417:32: ( customAttribute )?
					int alt172=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							alt172=1;
							}
							break;
						case CLASS:
							{
							int LA172_2 = input.LA(2);
							if ( (synpred237_Delphi()) ) {
								alt172=1;
							}
							}
							break;
						case CONSTRUCTOR:
						case DESTRUCTOR:
						case PROCEDURE:
							{
							int LA172_3 = input.LA(2);
							if ( (synpred237_Delphi()) ) {
								alt172=1;
							}
							}
							break;
					}
					switch (alt172) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:417:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_methodDeclHeading10749);
							customAttribute515=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute515.getTree());
							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:417:51: ( 'class' )?
					int alt173=2;
					int LA173_0 = input.LA(1);
					if ( (LA173_0==CLASS) ) {
						alt173=1;
					}
					switch (alt173) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:417:52: 'class'
							{
							string_literal516=(Token)match(input,CLASS,FOLLOW_CLASS_in_methodDeclHeading10754); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_CLASS.add(string_literal516);

							}
							break;

					}

					pushFollow(FOLLOW_methodKey_in_methodDeclHeading10759);
					methodKey517=methodKey();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodKey.add(methodKey517.getTree());
					pushFollow(FOLLOW_methodName_in_methodDeclHeading10761);
					methodName518=methodName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodName.add(methodName518.getTree());
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:417:84: ( formalParameterSection )?
					int alt174=2;
					int LA174_0 = input.LA(1);
					if ( (LA174_0==LPAREN) ) {
						alt174=1;
					}
					switch (alt174) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:417:85: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_methodDeclHeading10764);
							formalParameterSection519=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection519.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: CLASS, methodName, formalParameterSection, methodKey, customAttribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 418:30: -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) )
					{
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:418:33: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_0, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:418:52: ( 'class' )?
						if ( stream_CLASS.hasNext() ) {
							adaptor.addChild(root_0, stream_CLASS.nextNode());
						}
						stream_CLASS.reset();

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:418:64: ^( methodKey ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_methodKey.nextNode(), root_1);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:418:76: ^( TkFunctionName methodName )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_methodName.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:418:105: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:418:122: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:32: ( customAttribute )? ( 'class' )? 'function' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )?
					{
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:32: ( customAttribute )?
					int alt175=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							alt175=1;
							}
							break;
						case CLASS:
							{
							int LA175_2 = input.LA(2);
							if ( (synpred241_Delphi()) ) {
								alt175=1;
							}
							}
							break;
						case FUNCTION:
							{
							int LA175_3 = input.LA(2);
							if ( (synpred241_Delphi()) ) {
								alt175=1;
							}
							}
							break;
					}
					switch (alt175) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_methodDeclHeading10862);
							customAttribute520=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute520.getTree());
							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:51: ( 'class' )?
					int alt176=2;
					int LA176_0 = input.LA(1);
					if ( (LA176_0==CLASS) ) {
						alt176=1;
					}
					switch (alt176) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:52: 'class'
							{
							string_literal521=(Token)match(input,CLASS,FOLLOW_CLASS_in_methodDeclHeading10867); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_CLASS.add(string_literal521);

							}
							break;

					}

					string_literal522=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_methodDeclHeading10871); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_FUNCTION.add(string_literal522);

					pushFollow(FOLLOW_methodName_in_methodDeclHeading10873);
					methodName523=methodName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodName.add(methodName523.getTree());
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:84: ( formalParameterSection )?
					int alt177=2;
					int LA177_0 = input.LA(1);
					if ( (LA177_0==LPAREN) ) {
						alt177=1;
					}
					switch (alt177) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:85: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_methodDeclHeading10876);
							formalParameterSection524=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection524.getTree());
							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:110: ( ':' ( customAttribute )? typeDecl )?
					int alt179=2;
					int LA179_0 = input.LA(1);
					if ( (LA179_0==COLON) ) {
						alt179=1;
					}
					switch (alt179) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:111: ':' ( customAttribute )? typeDecl
							{
							char_literal525=(Token)match(input,COLON,FOLLOW_COLON_in_methodDeclHeading10881); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COLON.add(char_literal525);

							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:115: ( customAttribute )?
							int alt178=2;
							switch ( input.LA(1) ) {
								case LBRACK:
									{
									int LA178_1 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case PACKED:
									{
									int LA178_2 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case ARRAY:
									{
									int LA178_3 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case SET:
									{
									int LA178_4 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case FILE:
									{
									int LA178_5 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case CLASS:
									{
									int LA178_6 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case DISPINTERFACE:
								case INTERFACE:
									{
									int LA178_7 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case OBJECT:
									{
									int LA178_8 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case RECORD:
									{
									int LA178_9 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case POINTER2:
									{
									int LA178_10 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case POINTER:
									{
									int LA178_11 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case STRING:
									{
									int LA178_12 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case TYPE:
									{
									int LA178_13 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case ANSISTRING:
									{
									int LA178_14 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case FUNCTION:
									{
									int LA178_15 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case PROCEDURE:
									{
									int LA178_16 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case REFERENCE:
									{
									int LA178_17 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case VARIANT:
									{
									int LA178_18 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case TkIdentifier:
									{
									int LA178_19 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case 198:
									{
									int LA178_20 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case TRUE:
									{
									int LA178_21 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case LPAREN:
									{
									int LA178_22 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case AT2:
									{
									int LA178_23 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case 199:
									{
									int LA178_24 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case NOT:
									{
									int LA178_25 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case PLUS:
									{
									int LA178_26 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case MINUS:
									{
									int LA178_27 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case TkRealNum:
									{
									int LA178_28 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case TkHexNum:
								case TkIntNum:
									{
									int LA178_29 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case FALSE:
									{
									int LA178_30 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case ADD:
								case AT:
								case BREAK:
								case CONTAINS:
								case CONTINUE:
								case DEFAULT:
								case DQ:
								case DW:
								case EXIT:
								case EXPORT:
								case FINAL:
								case IMPLEMENTS:
								case INDEX:
								case LOCAL:
								case MESSAGE:
								case NAME:
								case OPERATOR:
								case OUT:
								case READ:
								case READONLY:
								case REGISTER:
								case REMOVE:
								case STATIC:
								case STORED:
								case STRICT:
								case UNSAFE:
								case VARARGS:
								case VIRTUAL:
								case WRITE:
								case WRITEONLY:
									{
									int LA178_31 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case NIL:
									{
									int LA178_32 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case ControlChar:
								case ControlString:
									{
									int LA178_33 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case QuotedString:
									{
									int LA178_34 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case INHERITED:
									{
									int LA178_35 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case 200:
									{
									int LA178_36 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case DOT:
									{
									int LA178_37 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case LT:
									{
									int LA178_38 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case AND:
								case AS:
								case DIV:
								case MOD:
								case OR:
								case SHL:
								case SHR:
								case SLASH:
								case STAR:
								case XOR:
									{
									int LA178_39 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case EQUAL:
									{
									int LA178_40 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case GE:
								case GT:
								case IN:
								case IS:
								case LE:
								case NOT_EQUAL:
									{
									int LA178_41 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case DOTDOT:
									{
									int LA178_42 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
								case SEMI:
									{
									int LA178_43 = input.LA(2);
									if ( (synpred244_Delphi()) ) {
										alt178=1;
									}
									}
									break;
							}
							switch (alt178) {
								case 1 :
									// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:116: customAttribute
									{
									pushFollow(FOLLOW_customAttribute_in_methodDeclHeading10884);
									customAttribute526=customAttribute();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute526.getTree());
									}
									break;

							}

							pushFollow(FOLLOW_typeDecl_in_methodDeclHeading10888);
							typeDecl527=typeDecl();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl527.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: methodName, customAttribute, formalParameterSection, FUNCTION, typeDecl, CLASS, customAttribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 420:30: -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) )
					{
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:420:33: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_0, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:420:52: ( 'class' )?
						if ( stream_CLASS.hasNext() ) {
							adaptor.addChild(root_0, stream_CLASS.nextNode());
						}
						stream_CLASS.reset();

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:420:63: ^( 'function' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_FUNCTION.nextNode(), root_1);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:420:76: ^( TkFunctionName methodName )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_methodName.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:420:105: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:420:122: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:420:149: ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionReturn, "TkFunctionReturn"), root_2);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:420:168: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_2, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:420:187: ( typeDecl )?
						if ( stream_typeDecl.hasNext() ) {
							adaptor.addChild(root_2, stream_typeDecl.nextTree());
						}
						stream_typeDecl.reset();

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:32: ( customAttribute )? 'class' 'operator' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )?
					{
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:32: ( customAttribute )?
					int alt180=2;
					int LA180_0 = input.LA(1);
					if ( (LA180_0==LBRACK) ) {
						alt180=1;
					}
					else if ( (LA180_0==CLASS) ) {
						int LA180_2 = input.LA(2);
						if ( (synpred247_Delphi()) ) {
							alt180=1;
						}
					}
					switch (alt180) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_methodDeclHeading10997);
							customAttribute528=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute528.getTree());
							}
							break;

					}

					string_literal529=(Token)match(input,CLASS,FOLLOW_CLASS_in_methodDeclHeading11001); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_CLASS.add(string_literal529);

					string_literal530=(Token)match(input,OPERATOR,FOLLOW_OPERATOR_in_methodDeclHeading11003); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_OPERATOR.add(string_literal530);

					pushFollow(FOLLOW_methodName_in_methodDeclHeading11005);
					methodName531=methodName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodName.add(methodName531.getTree());
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:81: ( formalParameterSection )?
					int alt181=2;
					int LA181_0 = input.LA(1);
					if ( (LA181_0==LPAREN) ) {
						alt181=1;
					}
					switch (alt181) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:82: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_methodDeclHeading11008);
							formalParameterSection532=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection532.getTree());
							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:107: ( ':' ( customAttribute )? typeDecl )?
					int alt183=2;
					int LA183_0 = input.LA(1);
					if ( (LA183_0==COLON) ) {
						alt183=1;
					}
					switch (alt183) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:108: ':' ( customAttribute )? typeDecl
							{
							char_literal533=(Token)match(input,COLON,FOLLOW_COLON_in_methodDeclHeading11013); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COLON.add(char_literal533);

							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:112: ( customAttribute )?
							int alt182=2;
							switch ( input.LA(1) ) {
								case LBRACK:
									{
									int LA182_1 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case PACKED:
									{
									int LA182_2 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case ARRAY:
									{
									int LA182_3 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case SET:
									{
									int LA182_4 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case FILE:
									{
									int LA182_5 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case CLASS:
									{
									int LA182_6 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case DISPINTERFACE:
								case INTERFACE:
									{
									int LA182_7 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case OBJECT:
									{
									int LA182_8 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case RECORD:
									{
									int LA182_9 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case POINTER2:
									{
									int LA182_10 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case POINTER:
									{
									int LA182_11 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case STRING:
									{
									int LA182_12 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case TYPE:
									{
									int LA182_13 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case ANSISTRING:
									{
									int LA182_14 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case FUNCTION:
									{
									int LA182_15 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case PROCEDURE:
									{
									int LA182_16 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case REFERENCE:
									{
									int LA182_17 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case VARIANT:
									{
									int LA182_18 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case TkIdentifier:
									{
									int LA182_19 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case 198:
									{
									int LA182_20 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case TRUE:
									{
									int LA182_21 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case LPAREN:
									{
									int LA182_22 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case AT2:
									{
									int LA182_23 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case 199:
									{
									int LA182_24 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case NOT:
									{
									int LA182_25 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case PLUS:
									{
									int LA182_26 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case MINUS:
									{
									int LA182_27 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case TkRealNum:
									{
									int LA182_28 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case TkHexNum:
								case TkIntNum:
									{
									int LA182_29 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case FALSE:
									{
									int LA182_30 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case ADD:
								case AT:
								case BREAK:
								case CONTAINS:
								case CONTINUE:
								case DEFAULT:
								case DQ:
								case DW:
								case EXIT:
								case EXPORT:
								case FINAL:
								case IMPLEMENTS:
								case INDEX:
								case LOCAL:
								case MESSAGE:
								case NAME:
								case OPERATOR:
								case OUT:
								case READ:
								case READONLY:
								case REGISTER:
								case REMOVE:
								case STATIC:
								case STORED:
								case STRICT:
								case UNSAFE:
								case VARARGS:
								case VIRTUAL:
								case WRITE:
								case WRITEONLY:
									{
									int LA182_31 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case NIL:
									{
									int LA182_32 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case ControlChar:
								case ControlString:
									{
									int LA182_33 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case QuotedString:
									{
									int LA182_34 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case INHERITED:
									{
									int LA182_35 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case 200:
									{
									int LA182_36 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case DOT:
									{
									int LA182_37 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case LT:
									{
									int LA182_38 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case AND:
								case AS:
								case DIV:
								case MOD:
								case OR:
								case SHL:
								case SHR:
								case SLASH:
								case STAR:
								case XOR:
									{
									int LA182_39 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case EQUAL:
									{
									int LA182_40 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case GE:
								case GT:
								case IN:
								case IS:
								case LE:
								case NOT_EQUAL:
									{
									int LA182_41 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case DOTDOT:
									{
									int LA182_42 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
								case SEMI:
									{
									int LA182_43 = input.LA(2);
									if ( (synpred249_Delphi()) ) {
										alt182=1;
									}
									}
									break;
							}
							switch (alt182) {
								case 1 :
									// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:113: customAttribute
									{
									pushFollow(FOLLOW_customAttribute_in_methodDeclHeading11016);
									customAttribute534=customAttribute();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute534.getTree());
									}
									break;

							}

							pushFollow(FOLLOW_typeDecl_in_methodDeclHeading11020);
							typeDecl535=typeDecl();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl535.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: customAttribute, OPERATOR, formalParameterSection, customAttribute, methodName, CLASS, typeDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 422:30: -> ( customAttribute )? 'class' ^( 'operator' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) )
					{
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:33: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_0, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						adaptor.addChild(root_0, stream_CLASS.nextNode());
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:60: ^( 'operator' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_OPERATOR.nextNode(), root_1);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:73: ^( TkFunctionName methodName )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_methodName.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:102: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:119: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:146: ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionReturn, "TkFunctionReturn"), root_2);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:165: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_2, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:422:184: ( typeDecl )?
						if ( stream_typeDecl.hasNext() ) {
							adaptor.addChild(root_2, stream_typeDecl.nextTree());
						}
						stream_typeDecl.reset();

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 102, methodDeclHeading_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodDeclHeading"


	public static class methodKey_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodKey"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:1: methodKey : ( 'procedure' | 'constructor' | 'destructor' );
	public final DelphiParser.methodKey_return methodKey() throws RecognitionException {
		DelphiParser.methodKey_return retval = new DelphiParser.methodKey_return();
		retval.start = input.LT(1);
		int methodKey_StartIndex = input.index();

		Object root_0 = null;

		Token set536=null;

		Object set536_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:424:30: ( 'procedure' | 'constructor' | 'destructor' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set536=input.LT(1);
			if ( input.LA(1)==CONSTRUCTOR||input.LA(1)==DESTRUCTOR||input.LA(1)==PROCEDURE ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set536));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 103, methodKey_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodKey"


	public static class methodName_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodName"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:428:1: methodName : ident ( genericDefinition )? ( '.' ident ( genericDefinition )? )* ;
	public final DelphiParser.methodName_return methodName() throws RecognitionException {
		DelphiParser.methodName_return retval = new DelphiParser.methodName_return();
		retval.start = input.LT(1);
		int methodName_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal539=null;
		ParserRuleReturnScope ident537 =null;
		ParserRuleReturnScope genericDefinition538 =null;
		ParserRuleReturnScope ident540 =null;
		ParserRuleReturnScope genericDefinition541 =null;

		Object char_literal539_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:428:30: ( ident ( genericDefinition )? ( '.' ident ( genericDefinition )? )* )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:428:32: ident ( genericDefinition )? ( '.' ident ( genericDefinition )? )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_ident_in_methodName11269);
			ident537=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident537.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:428:38: ( genericDefinition )?
			int alt185=2;
			int LA185_0 = input.LA(1);
			if ( (LA185_0==LT) ) {
				alt185=1;
			}
			switch (alt185) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:428:39: genericDefinition
					{
					pushFollow(FOLLOW_genericDefinition_in_methodName11272);
					genericDefinition538=genericDefinition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, genericDefinition538.getTree());

					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:428:59: ( '.' ident ( genericDefinition )? )*
			loop187:
			while (true) {
				int alt187=2;
				int LA187_0 = input.LA(1);
				if ( (LA187_0==DOT) ) {
					alt187=1;
				}

				switch (alt187) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:428:60: '.' ident ( genericDefinition )?
					{
					char_literal539=(Token)match(input,DOT,FOLLOW_DOT_in_methodName11277); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal539_tree = (Object)adaptor.create(char_literal539);
					adaptor.addChild(root_0, char_literal539_tree);
					}

					pushFollow(FOLLOW_ident_in_methodName11279);
					ident540=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident540.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:428:70: ( genericDefinition )?
					int alt186=2;
					int LA186_0 = input.LA(1);
					if ( (LA186_0==LT) ) {
						alt186=1;
					}
					switch (alt186) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:428:71: genericDefinition
							{
							pushFollow(FOLLOW_genericDefinition_in_methodName11282);
							genericDefinition541=genericDefinition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, genericDefinition541.getTree());

							}
							break;

					}

					}
					break;

				default :
					break loop187;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 104, methodName_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodName"


	public static class procDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "procDecl"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:430:1: procDecl : procDeclHeading ';' ( functionDirective )* ( procBody )? -> procDeclHeading ( procBody )? ;
	public final DelphiParser.procDecl_return procDecl() throws RecognitionException {
		DelphiParser.procDecl_return retval = new DelphiParser.procDecl_return();
		retval.start = input.LT(1);
		int procDecl_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal543=null;
		ParserRuleReturnScope procDeclHeading542 =null;
		ParserRuleReturnScope functionDirective544 =null;
		ParserRuleReturnScope procBody545 =null;

		Object char_literal543_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_procDeclHeading=new RewriteRuleSubtreeStream(adaptor,"rule procDeclHeading");
		RewriteRuleSubtreeStream stream_functionDirective=new RewriteRuleSubtreeStream(adaptor,"rule functionDirective");
		RewriteRuleSubtreeStream stream_procBody=new RewriteRuleSubtreeStream(adaptor,"rule procBody");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:430:30: ( procDeclHeading ';' ( functionDirective )* ( procBody )? -> procDeclHeading ( procBody )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:430:32: procDeclHeading ';' ( functionDirective )* ( procBody )?
			{
			pushFollow(FOLLOW_procDeclHeading_in_procDecl11343);
			procDeclHeading542=procDeclHeading();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_procDeclHeading.add(procDeclHeading542.getTree());
			char_literal543=(Token)match(input,SEMI,FOLLOW_SEMI_in_procDecl11345); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal543);

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:430:52: ( functionDirective )*
			loop188:
			while (true) {
				int alt188=2;
				alt188 = dfa188.predict(input);
				switch (alt188) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:430:53: functionDirective
					{
					pushFollow(FOLLOW_functionDirective_in_procDecl11348);
					functionDirective544=functionDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_functionDirective.add(functionDirective544.getTree());
					}
					break;

				default :
					break loop188;
				}
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:430:73: ( procBody )?
			int alt189=2;
			switch ( input.LA(1) ) {
				case FORWARD:
					{
					alt189=1;
					}
					break;
				case EXTERNAL:
					{
					int LA189_2 = input.LA(2);
					if ( (synpred257_Delphi()) ) {
						alt189=1;
					}
					}
					break;
				case LABEL:
					{
					int LA189_3 = input.LA(2);
					if ( (synpred257_Delphi()) ) {
						alt189=1;
					}
					}
					break;
				case CONST:
				case RESOURCESTRING:
					{
					int LA189_4 = input.LA(2);
					if ( (synpred257_Delphi()) ) {
						alt189=1;
					}
					}
					break;
				case TYPE:
					{
					int LA189_5 = input.LA(2);
					if ( (synpred257_Delphi()) ) {
						alt189=1;
					}
					}
					break;
				case THREADVAR:
				case VAR:
					{
					int LA189_6 = input.LA(2);
					if ( (synpred257_Delphi()) ) {
						alt189=1;
					}
					}
					break;
				case LBRACK:
					{
					int LA189_7 = input.LA(2);
					if ( (synpred257_Delphi()) ) {
						alt189=1;
					}
					}
					break;
				case CLASS:
					{
					int LA189_8 = input.LA(2);
					if ( (synpred257_Delphi()) ) {
						alt189=1;
					}
					}
					break;
				case PROCEDURE:
					{
					int LA189_9 = input.LA(2);
					if ( (synpred257_Delphi()) ) {
						alt189=1;
					}
					}
					break;
				case FUNCTION:
					{
					int LA189_10 = input.LA(2);
					if ( (synpred257_Delphi()) ) {
						alt189=1;
					}
					}
					break;
				case CONSTRUCTOR:
				case DESTRUCTOR:
					{
					int LA189_11 = input.LA(2);
					if ( (synpred257_Delphi()) ) {
						alt189=1;
					}
					}
					break;
				case EXPORTS:
					{
					int LA189_12 = input.LA(2);
					if ( (synpred257_Delphi()) ) {
						alt189=1;
					}
					}
					break;
				case BEGIN:
					{
					int LA189_13 = input.LA(2);
					if ( (synpred257_Delphi()) ) {
						alt189=1;
					}
					}
					break;
				case ASM:
					{
					int LA189_14 = input.LA(2);
					if ( (synpred257_Delphi()) ) {
						alt189=1;
					}
					}
					break;
				case SEMI:
					{
					int LA189_15 = input.LA(2);
					if ( (synpred257_Delphi()) ) {
						alt189=1;
					}
					}
					break;
			}
			switch (alt189) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:430:74: procBody
					{
					pushFollow(FOLLOW_procBody_in_procDecl11353);
					procBody545=procBody();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_procBody.add(procBody545.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: procBody, procDeclHeading
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 430:85: -> procDeclHeading ( procBody )?
			{
				adaptor.addChild(root_0, stream_procDeclHeading.nextTree());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:430:104: ( procBody )?
				if ( stream_procBody.hasNext() ) {
					adaptor.addChild(root_0, stream_procBody.nextTree());
				}
				stream_procBody.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 105, procDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "procDecl"


	public static class procDeclHeading_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "procDeclHeading"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:1: procDeclHeading : ( ( customAttribute )? 'procedure' ident ( formalParameterSection )? -> ^( 'procedure' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ) | ( customAttribute )? 'function' ident ( formalParameterSection )? ':' typeDecl -> ^( 'function' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn typeDecl ) ) );
	public final DelphiParser.procDeclHeading_return procDeclHeading() throws RecognitionException {
		DelphiParser.procDeclHeading_return retval = new DelphiParser.procDeclHeading_return();
		retval.start = input.LT(1);
		int procDeclHeading_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal547=null;
		Token string_literal551=null;
		Token char_literal554=null;
		ParserRuleReturnScope customAttribute546 =null;
		ParserRuleReturnScope ident548 =null;
		ParserRuleReturnScope formalParameterSection549 =null;
		ParserRuleReturnScope customAttribute550 =null;
		ParserRuleReturnScope ident552 =null;
		ParserRuleReturnScope formalParameterSection553 =null;
		ParserRuleReturnScope typeDecl555 =null;

		Object string_literal547_tree=null;
		Object string_literal551_tree=null;
		Object char_literal554_tree=null;
		RewriteRuleTokenStream stream_PROCEDURE=new RewriteRuleTokenStream(adaptor,"token PROCEDURE");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_formalParameterSection=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterSection");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:30: ( ( customAttribute )? 'procedure' ident ( formalParameterSection )? -> ^( 'procedure' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ) | ( customAttribute )? 'function' ident ( formalParameterSection )? ':' typeDecl -> ^( 'function' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn typeDecl ) ) )
			int alt194=2;
			switch ( input.LA(1) ) {
			case LBRACK:
				{
				int LA194_1 = input.LA(2);
				if ( (synpred260_Delphi()) ) {
					alt194=1;
				}
				else if ( (true) ) {
					alt194=2;
				}

				}
				break;
			case PROCEDURE:
				{
				alt194=1;
				}
				break;
			case FUNCTION:
				{
				alt194=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 194, 0, input);
				throw nvae;
			}
			switch (alt194) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:32: ( customAttribute )? 'procedure' ident ( formalParameterSection )?
					{
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:32: ( customAttribute )?
					int alt190=2;
					int LA190_0 = input.LA(1);
					if ( (LA190_0==LBRACK) ) {
						alt190=1;
					}
					else if ( (LA190_0==PROCEDURE) ) {
						int LA190_2 = input.LA(2);
						if ( (synpred258_Delphi()) ) {
							alt190=1;
						}
					}
					switch (alt190) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_procDeclHeading11419);
							customAttribute546=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute546.getTree());
							}
							break;

					}

					string_literal547=(Token)match(input,PROCEDURE,FOLLOW_PROCEDURE_in_procDeclHeading11423); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_PROCEDURE.add(string_literal547);

					pushFollow(FOLLOW_ident_in_procDeclHeading11425);
					ident548=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident548.getTree());
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:69: ( formalParameterSection )?
					int alt191=2;
					int LA191_0 = input.LA(1);
					if ( (LA191_0==LPAREN) ) {
						alt191=1;
					}
					switch (alt191) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:70: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_procDeclHeading11428);
							formalParameterSection549=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection549.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: ident, formalParameterSection, PROCEDURE
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 433:30: -> ^( 'procedure' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) )
					{
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:433:33: ^( 'procedure' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_PROCEDURE.nextNode(), root_1);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:433:47: ^( TkFunctionName ident )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_ident.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:433:71: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:433:88: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:32: ( customAttribute )? 'function' ident ( formalParameterSection )? ':' typeDecl
					{
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:32: ( customAttribute )?
					int alt192=2;
					int LA192_0 = input.LA(1);
					if ( (LA192_0==LBRACK) ) {
						alt192=1;
					}
					else if ( (LA192_0==FUNCTION) ) {
						int LA192_2 = input.LA(2);
						if ( (synpred261_Delphi()) ) {
							alt192=1;
						}
					}
					switch (alt192) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_procDeclHeading11528);
							customAttribute550=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute550.getTree());
							}
							break;

					}

					string_literal551=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_procDeclHeading11532); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_FUNCTION.add(string_literal551);

					pushFollow(FOLLOW_ident_in_procDeclHeading11534);
					ident552=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident552.getTree());
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:68: ( formalParameterSection )?
					int alt193=2;
					int LA193_0 = input.LA(1);
					if ( (LA193_0==LPAREN) ) {
						alt193=1;
					}
					switch (alt193) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:69: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_procDeclHeading11537);
							formalParameterSection553=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection553.getTree());
							}
							break;

					}

					char_literal554=(Token)match(input,COLON,FOLLOW_COLON_in_procDeclHeading11541); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(char_literal554);

					pushFollow(FOLLOW_typeDecl_in_procDeclHeading11543);
					typeDecl555=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl555.getTree());
					// AST REWRITE
					// elements: typeDecl, FUNCTION, ident, formalParameterSection
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 435:30: -> ^( 'function' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn typeDecl ) )
					{
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:435:33: ^( 'function' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn typeDecl ) )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_FUNCTION.nextNode(), root_1);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:435:46: ^( TkFunctionName ident )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_ident.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:435:70: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:435:87: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:435:114: ^( TkFunctionReturn typeDecl )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionReturn, "TkFunctionReturn"), root_2);
						adaptor.addChild(root_2, stream_typeDecl.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 106, procDeclHeading_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "procDeclHeading"


	public static class formalParameterSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "formalParameterSection"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:437:1: formalParameterSection : '(' ( formalParameterList )? ')' -> ( formalParameterList )? ;
	public final DelphiParser.formalParameterSection_return formalParameterSection() throws RecognitionException {
		DelphiParser.formalParameterSection_return retval = new DelphiParser.formalParameterSection_return();
		retval.start = input.LT(1);
		int formalParameterSection_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal556=null;
		Token char_literal558=null;
		ParserRuleReturnScope formalParameterList557 =null;

		Object char_literal556_tree=null;
		Object char_literal558_tree=null;
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:437:30: ( '(' ( formalParameterList )? ')' -> ( formalParameterList )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:437:32: '(' ( formalParameterList )? ')'
			{
			char_literal556=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_formalParameterSection11643); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(char_literal556);

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:437:36: ( formalParameterList )?
			int alt195=2;
			int LA195_0 = input.LA(1);
			if ( (LA195_0==ADD||LA195_0==ANSISTRING||LA195_0==AT||LA195_0==BREAK||LA195_0==CONST||(LA195_0 >= CONTAINS && LA195_0 <= CONTINUE)||LA195_0==DEFAULT||(LA195_0 >= DQ && LA195_0 <= DW)||LA195_0==EXIT||LA195_0==EXPORT||LA195_0==FALSE||LA195_0==FINAL||LA195_0==IMPLEMENTS||LA195_0==INDEX||LA195_0==LBRACK||LA195_0==LOCAL||LA195_0==MESSAGE||LA195_0==NAME||LA195_0==OBJECT||LA195_0==OPERATOR||LA195_0==OUT||LA195_0==POINTER||(LA195_0 >= READ && LA195_0 <= READONLY)||(LA195_0 >= REFERENCE && LA195_0 <= REGISTER)||LA195_0==REMOVE||LA195_0==STATIC||(LA195_0 >= STORED && LA195_0 <= STRING)||LA195_0==TRUE||LA195_0==TkIdentifier||LA195_0==UNSAFE||(LA195_0 >= VAR && LA195_0 <= VIRTUAL)||(LA195_0 >= WRITE && LA195_0 <= WRITEONLY)||LA195_0==198) ) {
				alt195=1;
			}
			switch (alt195) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:437:37: formalParameterList
					{
					pushFollow(FOLLOW_formalParameterList_in_formalParameterSection11646);
					formalParameterList557=formalParameterList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList557.getTree());
					}
					break;

			}

			char_literal558=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_formalParameterSection11650); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(char_literal558);

			// AST REWRITE
			// elements: formalParameterList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 437:63: -> ( formalParameterList )?
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:437:66: ( formalParameterList )?
				if ( stream_formalParameterList.hasNext() ) {
					adaptor.addChild(root_0, stream_formalParameterList.nextTree());
				}
				stream_formalParameterList.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 107, formalParameterSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "formalParameterSection"


	public static class formalParameterList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "formalParameterList"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:439:1: formalParameterList : formalParameter ( ';' formalParameter )* -> formalParameter ( formalParameter )* ;
	public final DelphiParser.formalParameterList_return formalParameterList() throws RecognitionException {
		DelphiParser.formalParameterList_return retval = new DelphiParser.formalParameterList_return();
		retval.start = input.LT(1);
		int formalParameterList_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal560=null;
		ParserRuleReturnScope formalParameter559 =null;
		ParserRuleReturnScope formalParameter561 =null;

		Object char_literal560_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_formalParameter=new RewriteRuleSubtreeStream(adaptor,"rule formalParameter");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:439:30: ( formalParameter ( ';' formalParameter )* -> formalParameter ( formalParameter )* )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:439:32: formalParameter ( ';' formalParameter )*
			{
			pushFollow(FOLLOW_formalParameter_in_formalParameterList11703);
			formalParameter559=formalParameter();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_formalParameter.add(formalParameter559.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:439:48: ( ';' formalParameter )*
			loop196:
			while (true) {
				int alt196=2;
				int LA196_0 = input.LA(1);
				if ( (LA196_0==SEMI) ) {
					alt196=1;
				}

				switch (alt196) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:439:49: ';' formalParameter
					{
					char_literal560=(Token)match(input,SEMI,FOLLOW_SEMI_in_formalParameterList11706); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMI.add(char_literal560);

					pushFollow(FOLLOW_formalParameter_in_formalParameterList11708);
					formalParameter561=formalParameter();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_formalParameter.add(formalParameter561.getTree());
					}
					break;

				default :
					break loop196;
				}
			}

			// AST REWRITE
			// elements: formalParameter, formalParameter
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 439:71: -> formalParameter ( formalParameter )*
			{
				adaptor.addChild(root_0, stream_formalParameter.nextTree());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:439:90: ( formalParameter )*
				while ( stream_formalParameter.hasNext() ) {
					adaptor.addChild(root_0, stream_formalParameter.nextTree());
				}
				stream_formalParameter.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 108, formalParameterList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "formalParameterList"


	public static class formalParameter_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "formalParameter"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:441:1: formalParameter : ( customAttribute )? ( parmType )? identListFlat ( ':' typeDecl )? ( '=' expression )? -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType ( typeDecl )? ) ( ^( TkVariableParam parmType ) )? ;
	public final DelphiParser.formalParameter_return formalParameter() throws RecognitionException {
		DelphiParser.formalParameter_return retval = new DelphiParser.formalParameter_return();
		retval.start = input.LT(1);
		int formalParameter_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal565=null;
		Token char_literal567=null;
		ParserRuleReturnScope customAttribute562 =null;
		ParserRuleReturnScope parmType563 =null;
		ParserRuleReturnScope identListFlat564 =null;
		ParserRuleReturnScope typeDecl566 =null;
		ParserRuleReturnScope expression568 =null;

		Object char_literal565_tree=null;
		Object char_literal567_tree=null;
		RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_identListFlat=new RewriteRuleSubtreeStream(adaptor,"rule identListFlat");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_parmType=new RewriteRuleSubtreeStream(adaptor,"rule parmType");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:441:30: ( ( customAttribute )? ( parmType )? identListFlat ( ':' typeDecl )? ( '=' expression )? -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType ( typeDecl )? ) ( ^( TkVariableParam parmType ) )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:441:32: ( customAttribute )? ( parmType )? identListFlat ( ':' typeDecl )? ( '=' expression )?
			{
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:441:32: ( customAttribute )?
			int alt197=2;
			switch ( input.LA(1) ) {
				case LBRACK:
					{
					alt197=1;
					}
					break;
				case OUT:
					{
					int LA197_2 = input.LA(2);
					if ( (synpred265_Delphi()) ) {
						alt197=1;
					}
					}
					break;
				case TkIdentifier:
					{
					int LA197_3 = input.LA(2);
					if ( (synpred265_Delphi()) ) {
						alt197=1;
					}
					}
					break;
				case 198:
					{
					int LA197_4 = input.LA(2);
					if ( (synpred265_Delphi()) ) {
						alt197=1;
					}
					}
					break;
				case CONST:
				case VAR:
					{
					int LA197_5 = input.LA(2);
					if ( (synpred265_Delphi()) ) {
						alt197=1;
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DQ:
				case DW:
				case EXIT:
				case EXPORT:
				case FALSE:
				case FINAL:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STATIC:
				case STORED:
				case STRICT:
				case STRING:
				case TRUE:
				case UNSAFE:
				case VARARGS:
				case VARIANT:
				case VIRTUAL:
				case WRITE:
				case WRITEONLY:
					{
					int LA197_6 = input.LA(2);
					if ( (synpred265_Delphi()) ) {
						alt197=1;
					}
					}
					break;
			}
			switch (alt197) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:441:33: customAttribute
					{
					pushFollow(FOLLOW_customAttribute_in_formalParameter11770);
					customAttribute562=customAttribute();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute562.getTree());
					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:441:51: ( parmType )?
			int alt198=2;
			int LA198_0 = input.LA(1);
			if ( (LA198_0==OUT) ) {
				int LA198_1 = input.LA(2);
				if ( (LA198_1==ADD||LA198_1==ANSISTRING||LA198_1==AT||LA198_1==BREAK||(LA198_1 >= CONTAINS && LA198_1 <= CONTINUE)||LA198_1==DEFAULT||(LA198_1 >= DQ && LA198_1 <= DW)||LA198_1==EXIT||LA198_1==EXPORT||LA198_1==FALSE||LA198_1==FINAL||LA198_1==IMPLEMENTS||LA198_1==INDEX||LA198_1==LOCAL||LA198_1==MESSAGE||LA198_1==NAME||LA198_1==OBJECT||LA198_1==OPERATOR||LA198_1==OUT||LA198_1==POINTER||(LA198_1 >= READ && LA198_1 <= READONLY)||(LA198_1 >= REFERENCE && LA198_1 <= REGISTER)||LA198_1==REMOVE||LA198_1==STATIC||(LA198_1 >= STORED && LA198_1 <= STRING)||LA198_1==TRUE||LA198_1==TkIdentifier||LA198_1==UNSAFE||(LA198_1 >= VARARGS && LA198_1 <= VIRTUAL)||(LA198_1 >= WRITE && LA198_1 <= WRITEONLY)||LA198_1==198) ) {
					alt198=1;
				}
			}
			else if ( (LA198_0==CONST||LA198_0==VAR) ) {
				alt198=1;
			}
			switch (alt198) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:441:52: parmType
					{
					pushFollow(FOLLOW_parmType_in_formalParameter11775);
					parmType563=parmType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_parmType.add(parmType563.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_identListFlat_in_formalParameter11779);
			identListFlat564=identListFlat();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identListFlat.add(identListFlat564.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:441:77: ( ':' typeDecl )?
			int alt199=2;
			int LA199_0 = input.LA(1);
			if ( (LA199_0==COLON) ) {
				alt199=1;
			}
			switch (alt199) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:441:78: ':' typeDecl
					{
					char_literal565=(Token)match(input,COLON,FOLLOW_COLON_in_formalParameter11782); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(char_literal565);

					pushFollow(FOLLOW_typeDecl_in_formalParameter11784);
					typeDecl566=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl566.getTree());
					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:441:93: ( '=' expression )?
			int alt200=2;
			int LA200_0 = input.LA(1);
			if ( (LA200_0==EQUAL) ) {
				alt200=1;
			}
			switch (alt200) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:441:94: '=' expression
					{
					char_literal567=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_formalParameter11789); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_EQUAL.add(char_literal567);

					pushFollow(FOLLOW_expression_in_formalParameter11791);
					expression568=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expression.add(expression568.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: customAttribute, identListFlat, typeDecl, parmType
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 441:111: -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType ( typeDecl )? ) ( ^( TkVariableParam parmType ) )?
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:441:114: ( customAttribute )?
				if ( stream_customAttribute.hasNext() ) {
					adaptor.addChild(root_0, stream_customAttribute.nextTree());
				}
				stream_customAttribute.reset();

				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:441:133: ^( TkVariableIdents identListFlat )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableIdents, "TkVariableIdents"), root_1);
				adaptor.addChild(root_1, stream_identListFlat.nextTree());
				adaptor.addChild(root_0, root_1);
				}

				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:441:167: ^( TkVariableType ( typeDecl )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableType, "TkVariableType"), root_1);
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:441:184: ( typeDecl )?
				if ( stream_typeDecl.hasNext() ) {
					adaptor.addChild(root_1, stream_typeDecl.nextTree());
				}
				stream_typeDecl.reset();

				adaptor.addChild(root_0, root_1);
				}

				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:441:195: ( ^( TkVariableParam parmType ) )?
				if ( stream_parmType.hasNext() ) {
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:441:195: ^( TkVariableParam parmType )
					{
					Object root_1 = (Object)adaptor.nil();
					root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableParam, "TkVariableParam"), root_1);
					adaptor.addChild(root_1, stream_parmType.nextTree());
					adaptor.addChild(root_0, root_1);
					}

				}
				stream_parmType.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 109, formalParameter_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "formalParameter"


	public static class parmType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "parmType"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:444:1: parmType : ( 'const' | 'var' | 'out' );
	public final DelphiParser.parmType_return parmType() throws RecognitionException {
		DelphiParser.parmType_return retval = new DelphiParser.parmType_return();
		retval.start = input.LT(1);
		int parmType_StartIndex = input.index();

		Object root_0 = null;

		Token set569=null;

		Object set569_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:444:30: ( 'const' | 'var' | 'out' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set569=input.LT(1);
			if ( input.LA(1)==CONST||input.LA(1)==OUT||input.LA(1)==VAR ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set569));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 110, parmType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "parmType"


	public static class methodBody_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodBody"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:448:1: methodBody : block ';' -> block ;
	public final DelphiParser.methodBody_return methodBody() throws RecognitionException {
		DelphiParser.methodBody_return retval = new DelphiParser.methodBody_return();
		retval.start = input.LT(1);
		int methodBody_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal571=null;
		ParserRuleReturnScope block570 =null;

		Object char_literal571_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:448:30: ( block ';' -> block )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:448:32: block ';'
			{
			pushFollow(FOLLOW_block_in_methodBody12014);
			block570=block();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_block.add(block570.getTree());
			char_literal571=(Token)match(input,SEMI,FOLLOW_SEMI_in_methodBody12016); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal571);

			// AST REWRITE
			// elements: block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 448:42: -> block
			{
				adaptor.addChild(root_0, stream_block.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 111, methodBody_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodBody"


	public static class procBody_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "procBody"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:450:1: procBody : ( 'forward' ';' ( functionDirective )* | 'external' ( 'name' expression | 'index' expression )* ( functionDirective )* | block ';' );
	public final DelphiParser.procBody_return procBody() throws RecognitionException {
		DelphiParser.procBody_return retval = new DelphiParser.procBody_return();
		retval.start = input.LT(1);
		int procBody_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal572=null;
		Token char_literal573=null;
		Token string_literal575=null;
		Token string_literal576=null;
		Token string_literal578=null;
		Token char_literal582=null;
		ParserRuleReturnScope functionDirective574 =null;
		ParserRuleReturnScope expression577 =null;
		ParserRuleReturnScope expression579 =null;
		ParserRuleReturnScope functionDirective580 =null;
		ParserRuleReturnScope block581 =null;

		Object string_literal572_tree=null;
		Object char_literal573_tree=null;
		Object string_literal575_tree=null;
		Object string_literal576_tree=null;
		Object string_literal578_tree=null;
		Object char_literal582_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:450:30: ( 'forward' ';' ( functionDirective )* | 'external' ( 'name' expression | 'index' expression )* ( functionDirective )* | block ';' )
			int alt204=3;
			switch ( input.LA(1) ) {
			case FORWARD:
				{
				alt204=1;
				}
				break;
			case EXTERNAL:
				{
				alt204=2;
				}
				break;
			case ASM:
			case BEGIN:
			case CLASS:
			case CONST:
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case EXPORTS:
			case FUNCTION:
			case LABEL:
			case LBRACK:
			case PROCEDURE:
			case RESOURCESTRING:
			case SEMI:
			case THREADVAR:
			case TYPE:
			case VAR:
				{
				alt204=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 204, 0, input);
				throw nvae;
			}
			switch (alt204) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:450:32: 'forward' ';' ( functionDirective )*
					{
					root_0 = (Object)adaptor.nil();


					string_literal572=(Token)match(input,FORWARD,FOLLOW_FORWARD_in_procBody12077); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal572_tree = (Object)adaptor.create(string_literal572);
					adaptor.addChild(root_0, string_literal572_tree);
					}

					char_literal573=(Token)match(input,SEMI,FOLLOW_SEMI_in_procBody12079); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal573_tree = (Object)adaptor.create(char_literal573);
					adaptor.addChild(root_0, char_literal573_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:450:46: ( functionDirective )*
					loop201:
					while (true) {
						int alt201=2;
						alt201 = dfa201.predict(input);
						switch (alt201) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:450:47: functionDirective
							{
							pushFollow(FOLLOW_functionDirective_in_procBody12082);
							functionDirective574=functionDirective();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, functionDirective574.getTree());

							}
							break;

						default :
							break loop201;
						}
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:451:32: 'external' ( 'name' expression | 'index' expression )* ( functionDirective )*
					{
					root_0 = (Object)adaptor.nil();


					string_literal575=(Token)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_procBody12120); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal575_tree = (Object)adaptor.create(string_literal575);
					adaptor.addChild(root_0, string_literal575_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:451:43: ( 'name' expression | 'index' expression )*
					loop202:
					while (true) {
						int alt202=3;
						int LA202_0 = input.LA(1);
						if ( (LA202_0==NAME) ) {
							int LA202_2 = input.LA(2);
							if ( (synpred273_Delphi()) ) {
								alt202=1;
							}

						}
						else if ( (LA202_0==INDEX) ) {
							int LA202_3 = input.LA(2);
							if ( (synpred274_Delphi()) ) {
								alt202=2;
							}

						}

						switch (alt202) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:451:44: 'name' expression
							{
							string_literal576=(Token)match(input,NAME,FOLLOW_NAME_in_procBody12123); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal576_tree = (Object)adaptor.create(string_literal576);
							adaptor.addChild(root_0, string_literal576_tree);
							}

							pushFollow(FOLLOW_expression_in_procBody12125);
							expression577=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression577.getTree());

							}
							break;
						case 2 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:451:64: 'index' expression
							{
							string_literal578=(Token)match(input,INDEX,FOLLOW_INDEX_in_procBody12129); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal578_tree = (Object)adaptor.create(string_literal578);
							adaptor.addChild(root_0, string_literal578_tree);
							}

							pushFollow(FOLLOW_expression_in_procBody12131);
							expression579=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression579.getTree());

							}
							break;

						default :
							break loop202;
						}
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:451:85: ( functionDirective )*
					loop203:
					while (true) {
						int alt203=2;
						switch ( input.LA(1) ) {
						case OVERLOAD:
							{
							int LA203_2 = input.LA(2);
							if ( (synpred275_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case INLINE:
							{
							int LA203_3 = input.LA(2);
							if ( (synpred275_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case ASSEMBLER:
							{
							int LA203_4 = input.LA(2);
							if ( (synpred275_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case CDECL:
							{
							int LA203_5 = input.LA(2);
							if ( (synpred275_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case PASCAL:
							{
							int LA203_6 = input.LA(2);
							if ( (synpred275_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case REGISTER:
							{
							int LA203_7 = input.LA(2);
							if ( (synpred275_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case SAFECALL:
							{
							int LA203_8 = input.LA(2);
							if ( (synpred275_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case STDCALL:
							{
							int LA203_9 = input.LA(2);
							if ( (synpred275_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case EXPORT:
							{
							int LA203_10 = input.LA(2);
							if ( (synpred275_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case FAR:
							{
							int LA203_11 = input.LA(2);
							if ( (synpred275_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case LOCAL:
							{
							int LA203_12 = input.LA(2);
							if ( (synpred275_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case NEAR:
							{
							int LA203_13 = input.LA(2);
							if ( (synpred275_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case DEPRECATED:
							{
							int LA203_14 = input.LA(2);
							if ( (synpred275_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case EXPERIMENTAL:
							{
							int LA203_15 = input.LA(2);
							if ( (synpred275_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case PLATFORM:
							{
							int LA203_16 = input.LA(2);
							if ( (synpred275_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case LIBRARY:
							{
							int LA203_17 = input.LA(2);
							if ( (synpred275_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case VARARGS:
							{
							int LA203_18 = input.LA(2);
							if ( (synpred275_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case EXTERNAL:
							{
							int LA203_19 = input.LA(2);
							if ( (synpred275_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						case UNSAFE:
							{
							int LA203_20 = input.LA(2);
							if ( (synpred275_Delphi()) ) {
								alt203=1;
							}

							}
							break;
						}
						switch (alt203) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:451:86: functionDirective
							{
							pushFollow(FOLLOW_functionDirective_in_procBody12136);
							functionDirective580=functionDirective();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, functionDirective580.getTree());

							}
							break;

						default :
							break loop203;
						}
					}

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:452:32: block ';'
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_block_in_procBody12172);
					block581=block();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, block581.getTree());

					char_literal582=(Token)match(input,SEMI,FOLLOW_SEMI_in_procBody12174); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal582_tree = (Object)adaptor.create(char_literal582);
					adaptor.addChild(root_0, char_literal582_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 112, procBody_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "procBody"


	public static class customAttribute_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "customAttribute"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:457:1: customAttribute : customAttributeList ;
	public final DelphiParser.customAttribute_return customAttribute() throws RecognitionException {
		DelphiParser.customAttribute_return retval = new DelphiParser.customAttribute_return();
		retval.start = input.LT(1);
		int customAttribute_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope customAttributeList583 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:457:30: ( customAttributeList )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:457:32: customAttributeList
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_customAttributeList_in_customAttribute12227);
			customAttributeList583=customAttributeList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, customAttributeList583.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 113, customAttribute_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "customAttribute"


	public static class customAttributeList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "customAttributeList"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:459:1: customAttributeList : ( customAttributeDecl )* ;
	public final DelphiParser.customAttributeList_return customAttributeList() throws RecognitionException {
		DelphiParser.customAttributeList_return retval = new DelphiParser.customAttributeList_return();
		retval.start = input.LT(1);
		int customAttributeList_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope customAttributeDecl584 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:459:30: ( ( customAttributeDecl )* )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:459:32: ( customAttributeDecl )*
			{
			root_0 = (Object)adaptor.nil();


			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:459:32: ( customAttributeDecl )*
			loop205:
			while (true) {
				int alt205=2;
				int LA205_0 = input.LA(1);
				if ( (LA205_0==LBRACK) ) {
					int LA205_2 = input.LA(2);
					if ( (synpred277_Delphi()) ) {
						alt205=1;
					}

				}

				switch (alt205) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:459:33: customAttributeDecl
					{
					pushFollow(FOLLOW_customAttributeDecl_in_customAttributeList12274);
					customAttributeDecl584=customAttributeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, customAttributeDecl584.getTree());

					}
					break;

				default :
					break loop205;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 114, customAttributeList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "customAttributeList"


	public static class customAttributeDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "customAttributeDecl"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:1: customAttributeDecl : '[' customAttributeIdent ( '(' ( expressionList )? ')' )? ']' -> ^( TkCustomAttribute '[' customAttributeIdent ( '(' ( expressionList )? ')' )? ']' ) ;
	public final DelphiParser.customAttributeDecl_return customAttributeDecl() throws RecognitionException {
		DelphiParser.customAttributeDecl_return retval = new DelphiParser.customAttributeDecl_return();
		retval.start = input.LT(1);
		int customAttributeDecl_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal585=null;
		Token char_literal587=null;
		Token char_literal589=null;
		Token char_literal590=null;
		ParserRuleReturnScope customAttributeIdent586 =null;
		ParserRuleReturnScope expressionList588 =null;

		Object char_literal585_tree=null;
		Object char_literal587_tree=null;
		Object char_literal589_tree=null;
		Object char_literal590_tree=null;
		RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
		RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
		RewriteRuleSubtreeStream stream_customAttributeIdent=new RewriteRuleSubtreeStream(adaptor,"rule customAttributeIdent");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:30: ( '[' customAttributeIdent ( '(' ( expressionList )? ')' )? ']' -> ^( TkCustomAttribute '[' customAttributeIdent ( '(' ( expressionList )? ')' )? ']' ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:32: '[' customAttributeIdent ( '(' ( expressionList )? ')' )? ']'
			{
			char_literal585=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_customAttributeDecl12322); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LBRACK.add(char_literal585);

			pushFollow(FOLLOW_customAttributeIdent_in_customAttributeDecl12324);
			customAttributeIdent586=customAttributeIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_customAttributeIdent.add(customAttributeIdent586.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:57: ( '(' ( expressionList )? ')' )?
			int alt207=2;
			int LA207_0 = input.LA(1);
			if ( (LA207_0==LPAREN) ) {
				alt207=1;
			}
			switch (alt207) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:58: '(' ( expressionList )? ')'
					{
					char_literal587=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_customAttributeDecl12327); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(char_literal587);

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:62: ( expressionList )?
					int alt206=2;
					int LA206_0 = input.LA(1);
					if ( ((LA206_0 >= ADD && LA206_0 <= ANSISTRING)||LA206_0==AS||(LA206_0 >= AT && LA206_0 <= AT2)||LA206_0==BREAK||LA206_0==COMMA||(LA206_0 >= CONTAINS && LA206_0 <= DEFAULT)||LA206_0==DIV||LA206_0==DOT||(LA206_0 >= DQ && LA206_0 <= DW)||LA206_0==EQUAL||LA206_0==EXIT||LA206_0==EXPORT||LA206_0==FALSE||LA206_0==FINAL||(LA206_0 >= FUNCTION && LA206_0 <= GE)||LA206_0==GT||(LA206_0 >= IMPLEMENTS && LA206_0 <= INHERITED)||LA206_0==IS||LA206_0==LBRACK||LA206_0==LE||(LA206_0 >= LOCAL && LA206_0 <= NAME)||LA206_0==NIL||(LA206_0 >= NOT && LA206_0 <= OBJECT)||(LA206_0 >= OPERATOR && LA206_0 <= OUT)||(LA206_0 >= PLUS && LA206_0 <= POINTER2)||LA206_0==PROCEDURE||LA206_0==QuotedString||(LA206_0 >= READ && LA206_0 <= READONLY)||(LA206_0 >= REFERENCE && LA206_0 <= REGISTER)||LA206_0==REMOVE||(LA206_0 >= SHL && LA206_0 <= STATIC)||(LA206_0 >= STORED && LA206_0 <= STRING)||LA206_0==TRUE||(LA206_0 >= TkHexNum && LA206_0 <= TkIntNum)||LA206_0==TkRealNum||LA206_0==UNSAFE||(LA206_0 >= VARARGS && LA206_0 <= VIRTUAL)||(LA206_0 >= WRITE && LA206_0 <= WRITEONLY)||(LA206_0 >= XOR && LA206_0 <= 200)) ) {
						alt206=1;
					}
					else if ( (LA206_0==RPAREN) ) {
						int LA206_2 = input.LA(2);
						if ( (synpred278_Delphi()) ) {
							alt206=1;
						}
					}
					switch (alt206) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:63: expressionList
							{
							pushFollow(FOLLOW_expressionList_in_customAttributeDecl12330);
							expressionList588=expressionList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_expressionList.add(expressionList588.getTree());
							}
							break;

					}

					char_literal589=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_customAttributeDecl12334); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(char_literal589);

					}
					break;

			}

			char_literal590=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_customAttributeDecl12338); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RBRACK.add(char_literal590);

			// AST REWRITE
			// elements: LPAREN, RPAREN, expressionList, customAttributeIdent, RBRACK, LBRACK
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 461:91: -> ^( TkCustomAttribute '[' customAttributeIdent ( '(' ( expressionList )? ')' )? ']' )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:94: ^( TkCustomAttribute '[' customAttributeIdent ( '(' ( expressionList )? ')' )? ']' )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkCustomAttribute, "TkCustomAttribute"), root_1);
				adaptor.addChild(root_1, stream_LBRACK.nextNode());
				adaptor.addChild(root_1, stream_customAttributeIdent.nextTree());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:139: ( '(' ( expressionList )? ')' )?
				if ( stream_LPAREN.hasNext()||stream_RPAREN.hasNext()||stream_expressionList.hasNext() ) {
					adaptor.addChild(root_1, stream_LPAREN.nextNode());
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:144: ( expressionList )?
					if ( stream_expressionList.hasNext() ) {
						adaptor.addChild(root_1, stream_expressionList.nextTree());
					}
					stream_expressionList.reset();

					adaptor.addChild(root_1, stream_RPAREN.nextNode());
				}
				stream_LPAREN.reset();
				stream_RPAREN.reset();
				stream_expressionList.reset();

				adaptor.addChild(root_1, stream_RBRACK.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 115, customAttributeDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "customAttributeDecl"


	public static class customAttributeIdent_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "customAttributeIdent"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:463:1: customAttributeIdent : qualifiedIdent ( ':' qualifiedIdent )? ;
	public final DelphiParser.customAttributeIdent_return customAttributeIdent() throws RecognitionException {
		DelphiParser.customAttributeIdent_return retval = new DelphiParser.customAttributeIdent_return();
		retval.start = input.LT(1);
		int customAttributeIdent_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal592=null;
		ParserRuleReturnScope qualifiedIdent591 =null;
		ParserRuleReturnScope qualifiedIdent593 =null;

		Object char_literal592_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:463:30: ( qualifiedIdent ( ':' qualifiedIdent )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:463:32: qualifiedIdent ( ':' qualifiedIdent )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_qualifiedIdent_in_customAttributeIdent12408);
			qualifiedIdent591=qualifiedIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdent591.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:463:47: ( ':' qualifiedIdent )?
			int alt208=2;
			int LA208_0 = input.LA(1);
			if ( (LA208_0==COLON) ) {
				alt208=1;
			}
			switch (alt208) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:463:48: ':' qualifiedIdent
					{
					char_literal592=(Token)match(input,COLON,FOLLOW_COLON_in_customAttributeIdent12411); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal592_tree = (Object)adaptor.create(char_literal592);
					adaptor.addChild(root_0, char_literal592_tree);
					}

					pushFollow(FOLLOW_qualifiedIdent_in_customAttributeIdent12413);
					qualifiedIdent593=qualifiedIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdent593.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 116, customAttributeIdent_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "customAttributeIdent"


	public static class expression_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "expression"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:468:1: expression : ( anonymousExpression -> ^( TkAnonymousExpression anonymousExpression ) | simpleExpression ( relOp simpleExpression )? ( '=' expression )? );
	public final DelphiParser.expression_return expression() throws RecognitionException {
		DelphiParser.expression_return retval = new DelphiParser.expression_return();
		retval.start = input.LT(1);
		int expression_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal598=null;
		ParserRuleReturnScope anonymousExpression594 =null;
		ParserRuleReturnScope simpleExpression595 =null;
		ParserRuleReturnScope relOp596 =null;
		ParserRuleReturnScope simpleExpression597 =null;
		ParserRuleReturnScope expression599 =null;

		Object char_literal598_tree=null;
		RewriteRuleSubtreeStream stream_anonymousExpression=new RewriteRuleSubtreeStream(adaptor,"rule anonymousExpression");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:468:30: ( anonymousExpression -> ^( TkAnonymousExpression anonymousExpression ) | simpleExpression ( relOp simpleExpression )? ( '=' expression )? )
			int alt211=2;
			switch ( input.LA(1) ) {
			case PROCEDURE:
				{
				int LA211_1 = input.LA(2);
				if ( (synpred281_Delphi()) ) {
					alt211=1;
				}
				else if ( (true) ) {
					alt211=2;
				}

				}
				break;
			case FUNCTION:
				{
				int LA211_2 = input.LA(2);
				if ( (synpred281_Delphi()) ) {
					alt211=1;
				}
				else if ( (true) ) {
					alt211=2;
				}

				}
				break;
			case EOF:
			case ABSOLUTE:
			case ADD:
			case AND:
			case ANSISTRING:
			case AS:
			case ASM:
			case ASSEMBLER:
			case AT:
			case AT2:
			case AUTOMATED:
			case BEGIN:
			case BREAK:
			case CASE:
			case CDECL:
			case CLASS:
			case COLON:
			case COMMA:
			case CONST:
			case CONSTRUCTOR:
			case CONTAINS:
			case CONTINUE:
			case ControlChar:
			case ControlString:
			case DEFAULT:
			case DEPRECATED:
			case DESTRUCTOR:
			case DISPID:
			case DIV:
			case DO:
			case DOT:
			case DOTDOT:
			case DOWNTO:
			case DQ:
			case DW:
			case ELSE:
			case END:
			case EQUAL:
			case EXCEPT:
			case EXIT:
			case EXPERIMENTAL:
			case EXPORT:
			case EXPORTS:
			case EXTERNAL:
			case FALSE:
			case FAR:
			case FINAL:
			case FINALIZATION:
			case FINALLY:
			case GE:
			case GT:
			case IMPLEMENTATION:
			case IMPLEMENTS:
			case IN:
			case INDEX:
			case INHERITED:
			case INITIALIZATION:
			case INLINE:
			case IS:
			case LABEL:
			case LBRACK:
			case LE:
			case LIBRARY:
			case LOCAL:
			case LPAREN:
			case LT:
			case MESSAGE:
			case MINUS:
			case MOD:
			case NAME:
			case NEAR:
			case NIL:
			case NODEFAULT:
			case NOT:
			case NOT_EQUAL:
			case OBJECT:
			case OF:
			case ON:
			case OPERATOR:
			case OR:
			case OUT:
			case OVERLOAD:
			case PASCAL:
			case PLATFORM:
			case PLUS:
			case POINTER:
			case POINTER2:
			case PRIVATE:
			case PROPERTY:
			case PROTECTED:
			case PUBLIC:
			case PUBLISHED:
			case QuotedString:
			case RBRACK:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case RESIDENT:
			case RESOURCESTRING:
			case RPAREN:
			case SAFECALL:
			case SEMI:
			case SHL:
			case SHR:
			case SLASH:
			case STAR:
			case STATIC:
			case STDCALL:
			case STORED:
			case STRICT:
			case STRING:
			case THEN:
			case THREADVAR:
			case TO:
			case TRUE:
			case TYPE:
			case TkHexNum:
			case TkIdentifier:
			case TkIntNum:
			case TkRealNum:
			case UNSAFE:
			case UNTIL:
			case VAR:
			case VARARGS:
			case VARIANT:
			case VIRTUAL:
			case WRITE:
			case WRITEONLY:
			case XOR:
			case 198:
			case 199:
			case 200:
				{
				alt211=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 211, 0, input);
				throw nvae;
			}
			switch (alt211) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:468:32: anonymousExpression
					{
					pushFollow(FOLLOW_anonymousExpression_in_expression12473);
					anonymousExpression594=anonymousExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_anonymousExpression.add(anonymousExpression594.getTree());
					// AST REWRITE
					// elements: anonymousExpression
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 468:52: -> ^( TkAnonymousExpression anonymousExpression )
					{
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:468:55: ^( TkAnonymousExpression anonymousExpression )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkAnonymousExpression, "TkAnonymousExpression"), root_1);
						adaptor.addChild(root_1, stream_anonymousExpression.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:469:32: simpleExpression ( relOp simpleExpression )? ( '=' expression )?
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_simpleExpression_in_expression12514);
					simpleExpression595=simpleExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleExpression595.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:469:49: ( relOp simpleExpression )?
					int alt209=2;
					switch ( input.LA(1) ) {
						case EQUAL:
							{
							int LA209_1 = input.LA(2);
							if ( (synpred282_Delphi()) ) {
								alt209=1;
							}
							}
							break;
						case LT:
							{
							int LA209_2 = input.LA(2);
							if ( (synpred282_Delphi()) ) {
								alt209=1;
							}
							}
							break;
						case GT:
							{
							int LA209_4 = input.LA(2);
							if ( (synpred282_Delphi()) ) {
								alt209=1;
							}
							}
							break;
						case GE:
						case IN:
						case IS:
						case LE:
						case NOT_EQUAL:
							{
							int LA209_5 = input.LA(2);
							if ( (synpred282_Delphi()) ) {
								alt209=1;
							}
							}
							break;
					}
					switch (alt209) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:469:50: relOp simpleExpression
							{
							pushFollow(FOLLOW_relOp_in_expression12517);
							relOp596=relOp();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, relOp596.getTree());

							pushFollow(FOLLOW_simpleExpression_in_expression12519);
							simpleExpression597=simpleExpression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleExpression597.getTree());

							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:469:75: ( '=' expression )?
					int alt210=2;
					int LA210_0 = input.LA(1);
					if ( (LA210_0==EQUAL) ) {
						int LA210_1 = input.LA(2);
						if ( (synpred283_Delphi()) ) {
							alt210=1;
						}
					}
					switch (alt210) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:469:76: '=' expression
							{
							char_literal598=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_expression12524); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal598_tree = (Object)adaptor.create(char_literal598);
							adaptor.addChild(root_0, char_literal598_tree);
							}

							pushFollow(FOLLOW_expression_in_expression12526);
							expression599=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression599.getTree());

							}
							break;

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 117, expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "expression"


	public static class anonymousExpression_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "anonymousExpression"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:471:1: anonymousExpression : ( 'procedure' ( formalParameterSection )? block | 'function' ( formalParameterSection )? ':' typeDecl block );
	public final DelphiParser.anonymousExpression_return anonymousExpression() throws RecognitionException {
		DelphiParser.anonymousExpression_return retval = new DelphiParser.anonymousExpression_return();
		retval.start = input.LT(1);
		int anonymousExpression_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal600=null;
		Token string_literal603=null;
		Token char_literal605=null;
		ParserRuleReturnScope formalParameterSection601 =null;
		ParserRuleReturnScope block602 =null;
		ParserRuleReturnScope formalParameterSection604 =null;
		ParserRuleReturnScope typeDecl606 =null;
		ParserRuleReturnScope block607 =null;

		Object string_literal600_tree=null;
		Object string_literal603_tree=null;
		Object char_literal605_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:471:30: ( 'procedure' ( formalParameterSection )? block | 'function' ( formalParameterSection )? ':' typeDecl block )
			int alt214=2;
			int LA214_0 = input.LA(1);
			if ( (LA214_0==PROCEDURE) ) {
				alt214=1;
			}
			else if ( (LA214_0==FUNCTION) ) {
				alt214=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 214, 0, input);
				throw nvae;
			}

			switch (alt214) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:471:32: 'procedure' ( formalParameterSection )? block
					{
					root_0 = (Object)adaptor.nil();


					string_literal600=(Token)match(input,PROCEDURE,FOLLOW_PROCEDURE_in_anonymousExpression12577); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal600_tree = (Object)adaptor.create(string_literal600);
					adaptor.addChild(root_0, string_literal600_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:471:44: ( formalParameterSection )?
					int alt212=2;
					alt212 = dfa212.predict(input);
					switch (alt212) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:471:45: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_anonymousExpression12580);
							formalParameterSection601=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterSection601.getTree());

							}
							break;

					}

					pushFollow(FOLLOW_block_in_anonymousExpression12584);
					block602=block();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, block602.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:472:32: 'function' ( formalParameterSection )? ':' typeDecl block
					{
					root_0 = (Object)adaptor.nil();


					string_literal603=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_anonymousExpression12617); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal603_tree = (Object)adaptor.create(string_literal603);
					adaptor.addChild(root_0, string_literal603_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:472:43: ( formalParameterSection )?
					int alt213=2;
					int LA213_0 = input.LA(1);
					if ( (LA213_0==LPAREN) ) {
						alt213=1;
					}
					switch (alt213) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:472:44: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_anonymousExpression12620);
							formalParameterSection604=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterSection604.getTree());

							}
							break;

					}

					char_literal605=(Token)match(input,COLON,FOLLOW_COLON_in_anonymousExpression12624); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal605_tree = (Object)adaptor.create(char_literal605);
					adaptor.addChild(root_0, char_literal605_tree);
					}

					pushFollow(FOLLOW_typeDecl_in_anonymousExpression12626);
					typeDecl606=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl606.getTree());

					pushFollow(FOLLOW_block_in_anonymousExpression12628);
					block607=block();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, block607.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 118, anonymousExpression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "anonymousExpression"


	public static class simpleExpression_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "simpleExpression"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:474:1: simpleExpression : factor ( operator factor )* ;
	public final DelphiParser.simpleExpression_return simpleExpression() throws RecognitionException {
		DelphiParser.simpleExpression_return retval = new DelphiParser.simpleExpression_return();
		retval.start = input.LT(1);
		int simpleExpression_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope factor608 =null;
		ParserRuleReturnScope operator609 =null;
		ParserRuleReturnScope factor610 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:474:30: ( factor ( operator factor )* )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:474:32: factor ( operator factor )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_factor_in_simpleExpression12677);
			factor608=factor();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, factor608.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:474:39: ( operator factor )*
			loop215:
			while (true) {
				int alt215=2;
				switch ( input.LA(1) ) {
				case PLUS:
					{
					int LA215_2 = input.LA(2);
					if ( (synpred287_Delphi()) ) {
						alt215=1;
					}

					}
					break;
				case MINUS:
					{
					int LA215_3 = input.LA(2);
					if ( (synpred287_Delphi()) ) {
						alt215=1;
					}

					}
					break;
				case AND:
				case AS:
				case DIV:
				case MOD:
				case OR:
				case SHL:
				case SHR:
				case SLASH:
				case STAR:
				case XOR:
					{
					int LA215_4 = input.LA(2);
					if ( (synpred287_Delphi()) ) {
						alt215=1;
					}

					}
					break;
				}
				switch (alt215) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:474:40: operator factor
					{
					pushFollow(FOLLOW_operator_in_simpleExpression12680);
					operator609=operator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, operator609.getTree());

					pushFollow(FOLLOW_factor_in_simpleExpression12682);
					factor610=factor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor610.getTree());

					}
					break;

				default :
					break loop215;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 119, simpleExpression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "simpleExpression"


	public static class factor_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "factor"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:476:1: factor : ( '@' factor | '@@' factor | 'not' factor | '+' factor | '-' factor | '^' ident | intRealNum | 'true' | 'false' | 'nil' | '(' expression ')' ( '^' )? ( '.' expression )? | stringFactor ( '.' simpleExpression )? | setSection | designator | typeId '(' expression ')' );
	public final DelphiParser.factor_return factor() throws RecognitionException {
		DelphiParser.factor_return retval = new DelphiParser.factor_return();
		retval.start = input.LT(1);
		int factor_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal611=null;
		Token string_literal613=null;
		Token string_literal615=null;
		Token char_literal617=null;
		Token char_literal619=null;
		Token char_literal621=null;
		Token string_literal624=null;
		Token string_literal625=null;
		Token string_literal626=null;
		Token char_literal627=null;
		Token char_literal629=null;
		Token char_literal630=null;
		Token char_literal631=null;
		Token char_literal634=null;
		Token char_literal639=null;
		Token char_literal641=null;
		ParserRuleReturnScope factor612 =null;
		ParserRuleReturnScope factor614 =null;
		ParserRuleReturnScope factor616 =null;
		ParserRuleReturnScope factor618 =null;
		ParserRuleReturnScope factor620 =null;
		ParserRuleReturnScope ident622 =null;
		ParserRuleReturnScope intRealNum623 =null;
		ParserRuleReturnScope expression628 =null;
		ParserRuleReturnScope expression632 =null;
		ParserRuleReturnScope stringFactor633 =null;
		ParserRuleReturnScope simpleExpression635 =null;
		ParserRuleReturnScope setSection636 =null;
		ParserRuleReturnScope designator637 =null;
		ParserRuleReturnScope typeId638 =null;
		ParserRuleReturnScope expression640 =null;

		Object char_literal611_tree=null;
		Object string_literal613_tree=null;
		Object string_literal615_tree=null;
		Object char_literal617_tree=null;
		Object char_literal619_tree=null;
		Object char_literal621_tree=null;
		Object string_literal624_tree=null;
		Object string_literal625_tree=null;
		Object string_literal626_tree=null;
		Object char_literal627_tree=null;
		Object char_literal629_tree=null;
		Object char_literal630_tree=null;
		Object char_literal631_tree=null;
		Object char_literal634_tree=null;
		Object char_literal639_tree=null;
		Object char_literal641_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:476:30: ( '@' factor | '@@' factor | 'not' factor | '+' factor | '-' factor | '^' ident | intRealNum | 'true' | 'false' | 'nil' | '(' expression ')' ( '^' )? ( '.' expression )? | stringFactor ( '.' simpleExpression )? | setSection | designator | typeId '(' expression ')' )
			int alt219=15;
			alt219 = dfa219.predict(input);
			switch (alt219) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:476:32: '@' factor
					{
					root_0 = (Object)adaptor.nil();


					char_literal611=(Token)match(input,AT2,FOLLOW_AT2_in_factor12743); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal611_tree = (Object)adaptor.create(char_literal611);
					adaptor.addChild(root_0, char_literal611_tree);
					}

					pushFollow(FOLLOW_factor_in_factor12745);
					factor612=factor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor612.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:477:32: '@@' factor
					{
					root_0 = (Object)adaptor.nil();


					string_literal613=(Token)match(input,199,FOLLOW_199_in_factor12778); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal613_tree = (Object)adaptor.create(string_literal613);
					adaptor.addChild(root_0, string_literal613_tree);
					}

					pushFollow(FOLLOW_factor_in_factor12780);
					factor614=factor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor614.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:32: 'not' factor
					{
					root_0 = (Object)adaptor.nil();


					string_literal615=(Token)match(input,NOT,FOLLOW_NOT_in_factor12820); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal615_tree = (Object)adaptor.create(string_literal615);
					adaptor.addChild(root_0, string_literal615_tree);
					}

					pushFollow(FOLLOW_factor_in_factor12822);
					factor616=factor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor616.getTree());

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:479:32: '+' factor
					{
					root_0 = (Object)adaptor.nil();


					char_literal617=(Token)match(input,PLUS,FOLLOW_PLUS_in_factor12855); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal617_tree = (Object)adaptor.create(char_literal617);
					adaptor.addChild(root_0, char_literal617_tree);
					}

					pushFollow(FOLLOW_factor_in_factor12857);
					factor618=factor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor618.getTree());

					}
					break;
				case 5 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:480:32: '-' factor
					{
					root_0 = (Object)adaptor.nil();


					char_literal619=(Token)match(input,MINUS,FOLLOW_MINUS_in_factor12890); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal619_tree = (Object)adaptor.create(char_literal619);
					adaptor.addChild(root_0, char_literal619_tree);
					}

					pushFollow(FOLLOW_factor_in_factor12892);
					factor620=factor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor620.getTree());

					}
					break;
				case 6 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:481:32: '^' ident
					{
					root_0 = (Object)adaptor.nil();


					char_literal621=(Token)match(input,POINTER2,FOLLOW_POINTER2_in_factor12925); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal621_tree = (Object)adaptor.create(char_literal621);
					adaptor.addChild(root_0, char_literal621_tree);
					}

					pushFollow(FOLLOW_ident_in_factor12927);
					ident622=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident622.getTree());

					}
					break;
				case 7 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:482:32: intRealNum
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_intRealNum_in_factor12971);
					intRealNum623=intRealNum();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, intRealNum623.getTree());

					}
					break;
				case 8 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:483:32: 'true'
					{
					root_0 = (Object)adaptor.nil();


					string_literal624=(Token)match(input,TRUE,FOLLOW_TRUE_in_factor13004); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal624_tree = (Object)adaptor.create(string_literal624);
					adaptor.addChild(root_0, string_literal624_tree);
					}

					}
					break;
				case 9 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:484:32: 'false'
					{
					root_0 = (Object)adaptor.nil();


					string_literal625=(Token)match(input,FALSE,FOLLOW_FALSE_in_factor13037); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal625_tree = (Object)adaptor.create(string_literal625);
					adaptor.addChild(root_0, string_literal625_tree);
					}

					}
					break;
				case 10 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:485:32: 'nil'
					{
					root_0 = (Object)adaptor.nil();


					string_literal626=(Token)match(input,NIL,FOLLOW_NIL_in_factor13070); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal626_tree = (Object)adaptor.create(string_literal626);
					adaptor.addChild(root_0, string_literal626_tree);
					}

					}
					break;
				case 11 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:486:32: '(' expression ')' ( '^' )? ( '.' expression )?
					{
					root_0 = (Object)adaptor.nil();


					char_literal627=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_factor13103); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal627_tree = (Object)adaptor.create(char_literal627);
					adaptor.addChild(root_0, char_literal627_tree);
					}

					pushFollow(FOLLOW_expression_in_factor13105);
					expression628=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression628.getTree());

					char_literal629=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_factor13107); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal629_tree = (Object)adaptor.create(char_literal629);
					adaptor.addChild(root_0, char_literal629_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:486:51: ( '^' )?
					int alt216=2;
					int LA216_0 = input.LA(1);
					if ( (LA216_0==POINTER2) ) {
						int LA216_1 = input.LA(2);
						if ( (synpred298_Delphi()) ) {
							alt216=1;
						}
					}
					switch (alt216) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:486:52: '^'
							{
							char_literal630=(Token)match(input,POINTER2,FOLLOW_POINTER2_in_factor13110); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal630_tree = (Object)adaptor.create(char_literal630);
							adaptor.addChild(root_0, char_literal630_tree);
							}

							}
							break;

					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:486:58: ( '.' expression )?
					int alt217=2;
					int LA217_0 = input.LA(1);
					if ( (LA217_0==DOT) ) {
						int LA217_1 = input.LA(2);
						if ( (synpred299_Delphi()) ) {
							alt217=1;
						}
					}
					switch (alt217) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:486:59: '.' expression
							{
							char_literal631=(Token)match(input,DOT,FOLLOW_DOT_in_factor13115); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal631_tree = (Object)adaptor.create(char_literal631);
							adaptor.addChild(root_0, char_literal631_tree);
							}

							pushFollow(FOLLOW_expression_in_factor13117);
							expression632=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression632.getTree());

							}
							break;

					}

					}
					break;
				case 12 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:32: stringFactor ( '.' simpleExpression )?
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_stringFactor_in_factor13160);
					stringFactor633=stringFactor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, stringFactor633.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:45: ( '.' simpleExpression )?
					int alt218=2;
					int LA218_0 = input.LA(1);
					if ( (LA218_0==DOT) ) {
						int LA218_1 = input.LA(2);
						if ( (synpred301_Delphi()) ) {
							alt218=1;
						}
					}
					switch (alt218) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:46: '.' simpleExpression
							{
							char_literal634=(Token)match(input,DOT,FOLLOW_DOT_in_factor13163); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal634_tree = (Object)adaptor.create(char_literal634);
							adaptor.addChild(root_0, char_literal634_tree);
							}

							pushFollow(FOLLOW_simpleExpression_in_factor13165);
							simpleExpression635=simpleExpression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleExpression635.getTree());

							}
							break;

					}

					}
					break;
				case 13 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:488:32: setSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_setSection_in_factor13200);
					setSection636=setSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, setSection636.getTree());

					}
					break;
				case 14 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:489:32: designator
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_designator_in_factor13233);
					designator637=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator637.getTree());

					}
					break;
				case 15 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:32: typeId '(' expression ')'
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_typeId_in_factor13266);
					typeId638=typeId();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeId638.getTree());

					char_literal639=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_factor13268); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal639_tree = (Object)adaptor.create(char_literal639);
					adaptor.addChild(root_0, char_literal639_tree);
					}

					pushFollow(FOLLOW_expression_in_factor13270);
					expression640=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression640.getTree());

					char_literal641=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_factor13272); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal641_tree = (Object)adaptor.create(char_literal641);
					adaptor.addChild(root_0, char_literal641_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 120, factor_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "factor"


	public static class stringFactor_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "stringFactor"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:492:1: stringFactor : ( ( ControlString | ControlChar ) ( QuotedString ( ControlString | ControlChar ) )* ( QuotedString )? | QuotedString ( ( ControlString | ControlChar ) QuotedString )* ( ControlString | ControlChar )? );
	public final DelphiParser.stringFactor_return stringFactor() throws RecognitionException {
		DelphiParser.stringFactor_return retval = new DelphiParser.stringFactor_return();
		retval.start = input.LT(1);
		int stringFactor_StartIndex = input.index();

		Object root_0 = null;

		Token set642=null;
		Token QuotedString643=null;
		Token set644=null;
		Token QuotedString645=null;
		Token QuotedString646=null;
		Token set647=null;
		Token QuotedString648=null;
		Token set649=null;

		Object set642_tree=null;
		Object QuotedString643_tree=null;
		Object set644_tree=null;
		Object QuotedString645_tree=null;
		Object QuotedString646_tree=null;
		Object set647_tree=null;
		Object QuotedString648_tree=null;
		Object set649_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:492:30: ( ( ControlString | ControlChar ) ( QuotedString ( ControlString | ControlChar ) )* ( QuotedString )? | QuotedString ( ( ControlString | ControlChar ) QuotedString )* ( ControlString | ControlChar )? )
			int alt224=2;
			int LA224_0 = input.LA(1);
			if ( ((LA224_0 >= ControlChar && LA224_0 <= ControlString)) ) {
				alt224=1;
			}
			else if ( (LA224_0==QuotedString) ) {
				alt224=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 224, 0, input);
				throw nvae;
			}

			switch (alt224) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:492:32: ( ControlString | ControlChar ) ( QuotedString ( ControlString | ControlChar ) )* ( QuotedString )?
					{
					root_0 = (Object)adaptor.nil();


					set642=input.LT(1);
					if ( (input.LA(1) >= ControlChar && input.LA(1) <= ControlString) ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set642));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:492:62: ( QuotedString ( ControlString | ControlChar ) )*
					loop220:
					while (true) {
						int alt220=2;
						int LA220_0 = input.LA(1);
						if ( (LA220_0==QuotedString) ) {
							int LA220_1 = input.LA(2);
							if ( ((LA220_1 >= ControlChar && LA220_1 <= ControlString)) ) {
								int LA220_3 = input.LA(3);
								if ( (synpred307_Delphi()) ) {
									alt220=1;
								}

							}

						}

						switch (alt220) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:492:63: QuotedString ( ControlString | ControlChar )
							{
							QuotedString643=(Token)match(input,QuotedString,FOLLOW_QuotedString_in_stringFactor13334); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							QuotedString643_tree = (Object)adaptor.create(QuotedString643);
							adaptor.addChild(root_0, QuotedString643_tree);
							}

							set644=input.LT(1);
							if ( (input.LA(1) >= ControlChar && input.LA(1) <= ControlString) ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set644));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

						default :
							break loop220;
						}
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:492:108: ( QuotedString )?
					int alt221=2;
					int LA221_0 = input.LA(1);
					if ( (LA221_0==QuotedString) ) {
						int LA221_1 = input.LA(2);
						if ( (synpred308_Delphi()) ) {
							alt221=1;
						}
					}
					switch (alt221) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:492:109: QuotedString
							{
							QuotedString645=(Token)match(input,QuotedString,FOLLOW_QuotedString_in_stringFactor13347); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							QuotedString645_tree = (Object)adaptor.create(QuotedString645);
							adaptor.addChild(root_0, QuotedString645_tree);
							}

							}
							break;

					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:32: QuotedString ( ( ControlString | ControlChar ) QuotedString )* ( ControlString | ControlChar )?
					{
					root_0 = (Object)adaptor.nil();


					QuotedString646=(Token)match(input,QuotedString,FOLLOW_QuotedString_in_stringFactor13382); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					QuotedString646_tree = (Object)adaptor.create(QuotedString646);
					adaptor.addChild(root_0, QuotedString646_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:45: ( ( ControlString | ControlChar ) QuotedString )*
					loop222:
					while (true) {
						int alt222=2;
						int LA222_0 = input.LA(1);
						if ( ((LA222_0 >= ControlChar && LA222_0 <= ControlString)) ) {
							int LA222_1 = input.LA(2);
							if ( (LA222_1==QuotedString) ) {
								int LA222_3 = input.LA(3);
								if ( (synpred311_Delphi()) ) {
									alt222=1;
								}

							}

						}

						switch (alt222) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:46: ( ControlString | ControlChar ) QuotedString
							{
							set647=input.LT(1);
							if ( (input.LA(1) >= ControlChar && input.LA(1) <= ControlString) ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set647));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							QuotedString648=(Token)match(input,QuotedString,FOLLOW_QuotedString_in_stringFactor13393); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							QuotedString648_tree = (Object)adaptor.create(QuotedString648);
							adaptor.addChild(root_0, QuotedString648_tree);
							}

							}
							break;

						default :
							break loop222;
						}
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:91: ( ControlString | ControlChar )?
					int alt223=2;
					int LA223_0 = input.LA(1);
					if ( ((LA223_0 >= ControlChar && LA223_0 <= ControlString)) ) {
						alt223=1;
					}
					switch (alt223) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
							{
							set649=input.LT(1);
							if ( (input.LA(1) >= ControlChar && input.LA(1) <= ControlString) ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set649));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 121, stringFactor_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "stringFactor"


	public static class setSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "setSection"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:495:1: setSection : '[' ( expression ( ( ',' | '..' ) expression )* )? ']' ;
	public final DelphiParser.setSection_return setSection() throws RecognitionException {
		DelphiParser.setSection_return retval = new DelphiParser.setSection_return();
		retval.start = input.LT(1);
		int setSection_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal650=null;
		Token set652=null;
		Token char_literal654=null;
		ParserRuleReturnScope expression651 =null;
		ParserRuleReturnScope expression653 =null;

		Object char_literal650_tree=null;
		Object set652_tree=null;
		Object char_literal654_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:495:30: ( '[' ( expression ( ( ',' | '..' ) expression )* )? ']' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:495:32: '[' ( expression ( ( ',' | '..' ) expression )* )? ']'
			{
			root_0 = (Object)adaptor.nil();


			char_literal650=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_setSection13459); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal650_tree = (Object)adaptor.create(char_literal650);
			adaptor.addChild(root_0, char_literal650_tree);
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:495:36: ( expression ( ( ',' | '..' ) expression )* )?
			int alt226=2;
			int LA226_0 = input.LA(1);
			if ( ((LA226_0 >= ADD && LA226_0 <= ANSISTRING)||LA226_0==AS||(LA226_0 >= AT && LA226_0 <= AT2)||LA226_0==BREAK||LA226_0==COMMA||(LA226_0 >= CONTAINS && LA226_0 <= DEFAULT)||LA226_0==DIV||(LA226_0 >= DOT && LA226_0 <= DOTDOT)||(LA226_0 >= DQ && LA226_0 <= DW)||LA226_0==EQUAL||LA226_0==EXIT||LA226_0==EXPORT||LA226_0==FALSE||LA226_0==FINAL||(LA226_0 >= FUNCTION && LA226_0 <= GE)||LA226_0==GT||(LA226_0 >= IMPLEMENTS && LA226_0 <= INHERITED)||LA226_0==IS||LA226_0==LBRACK||LA226_0==LE||(LA226_0 >= LOCAL && LA226_0 <= NAME)||LA226_0==NIL||(LA226_0 >= NOT && LA226_0 <= OBJECT)||(LA226_0 >= OPERATOR && LA226_0 <= OUT)||(LA226_0 >= PLUS && LA226_0 <= POINTER2)||LA226_0==PROCEDURE||LA226_0==QuotedString||(LA226_0 >= READ && LA226_0 <= READONLY)||(LA226_0 >= REFERENCE && LA226_0 <= REGISTER)||LA226_0==REMOVE||(LA226_0 >= SHL && LA226_0 <= STATIC)||(LA226_0 >= STORED && LA226_0 <= STRING)||LA226_0==TRUE||(LA226_0 >= TkHexNum && LA226_0 <= TkIntNum)||LA226_0==TkRealNum||LA226_0==UNSAFE||(LA226_0 >= VARARGS && LA226_0 <= VIRTUAL)||(LA226_0 >= WRITE && LA226_0 <= WRITEONLY)||(LA226_0 >= XOR && LA226_0 <= 200)) ) {
				alt226=1;
			}
			else if ( (LA226_0==RBRACK) ) {
				int LA226_2 = input.LA(2);
				if ( (synpred316_Delphi()) ) {
					alt226=1;
				}
			}
			switch (alt226) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:495:37: expression ( ( ',' | '..' ) expression )*
					{
					pushFollow(FOLLOW_expression_in_setSection13462);
					expression651=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression651.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:495:48: ( ( ',' | '..' ) expression )*
					loop225:
					while (true) {
						int alt225=2;
						int LA225_0 = input.LA(1);
						if ( (LA225_0==COMMA||LA225_0==DOTDOT) ) {
							alt225=1;
						}

						switch (alt225) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:495:49: ( ',' | '..' ) expression
							{
							set652=input.LT(1);
							if ( input.LA(1)==COMMA||input.LA(1)==DOTDOT ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set652));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							pushFollow(FOLLOW_expression_in_setSection13473);
							expression653=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression653.getTree());

							}
							break;

						default :
							break loop225;
						}
					}

					}
					break;

			}

			char_literal654=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_setSection13479); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal654_tree = (Object)adaptor.create(char_literal654);
			adaptor.addChild(root_0, char_literal654_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 122, setSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "setSection"


	public static class designator_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "designator"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:1: designator : ( 'inherited' )? ( ( qualifiedIdent | typeId ) )? ( designatorItem )* ;
	public final DelphiParser.designator_return designator() throws RecognitionException {
		DelphiParser.designator_return retval = new DelphiParser.designator_return();
		retval.start = input.LT(1);
		int designator_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal655=null;
		ParserRuleReturnScope qualifiedIdent656 =null;
		ParserRuleReturnScope typeId657 =null;
		ParserRuleReturnScope designatorItem658 =null;

		Object string_literal655_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:30: ( ( 'inherited' )? ( ( qualifiedIdent | typeId ) )? ( designatorItem )* )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:32: ( 'inherited' )? ( ( qualifiedIdent | typeId ) )? ( designatorItem )*
			{
			root_0 = (Object)adaptor.nil();


			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:32: ( 'inherited' )?
			int alt227=2;
			int LA227_0 = input.LA(1);
			if ( (LA227_0==INHERITED) ) {
				int LA227_1 = input.LA(2);
				if ( (synpred317_Delphi()) ) {
					alt227=1;
				}
			}
			switch (alt227) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:33: 'inherited'
					{
					string_literal655=(Token)match(input,INHERITED,FOLLOW_INHERITED_in_designator13536); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal655_tree = (Object)adaptor.create(string_literal655);
					adaptor.addChild(root_0, string_literal655_tree);
					}

					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:47: ( ( qualifiedIdent | typeId ) )?
			int alt229=2;
			switch ( input.LA(1) ) {
				case TkIdentifier:
					{
					int LA229_1 = input.LA(2);
					if ( (synpred319_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case 198:
					{
					int LA229_2 = input.LA(2);
					if ( (synpred319_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case NAME:
					{
					int LA229_3 = input.LA(2);
					if ( (synpred319_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case READ:
					{
					int LA229_5 = input.LA(2);
					if ( (synpred319_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case WRITE:
					{
					int LA229_6 = input.LA(2);
					if ( (synpred319_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case READONLY:
					{
					int LA229_7 = input.LA(2);
					if ( (synpred319_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case WRITEONLY:
					{
					int LA229_8 = input.LA(2);
					if ( (synpred319_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case STORED:
					{
					int LA229_9 = input.LA(2);
					if ( (synpred319_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case DEFAULT:
					{
					int LA229_10 = input.LA(2);
					if ( (synpred319_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case IMPLEMENTS:
					{
					int LA229_11 = input.LA(2);
					if ( (synpred319_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case REGISTER:
					{
					int LA229_12 = input.LA(2);
					if ( (synpred319_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case EXPORT:
					{
					int LA229_13 = input.LA(2);
					if ( (synpred319_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case LOCAL:
					{
					int LA229_14 = input.LA(2);
					if ( (synpred319_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case VARARGS:
					{
					int LA229_15 = input.LA(2);
					if ( (synpred319_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case UNSAFE:
					{
					int LA229_16 = input.LA(2);
					if ( (synpred319_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case INDEX:
					{
					int LA229_17 = input.LA(2);
					if ( (synpred319_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case TRUE:
					{
					int LA229_18 = input.LA(2);
					if ( (synpred319_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case FALSE:
					{
					int LA229_19 = input.LA(2);
					if ( (synpred319_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case STRICT:
					{
					int LA229_20 = input.LA(2);
					if ( (synpred319_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case OPERATOR:
					{
					int LA229_21 = input.LA(2);
					if ( (synpred319_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case AT:
					{
					int LA229_22 = input.LA(2);
					if ( (synpred319_Delphi()) ) {
						alt229=1;
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DQ:
				case DW:
				case EXIT:
				case FINAL:
				case MESSAGE:
				case OBJECT:
				case OUT:
				case POINTER:
				case REFERENCE:
				case REMOVE:
				case STATIC:
				case STRING:
				case VARIANT:
				case VIRTUAL:
					{
					int LA229_23 = input.LA(2);
					if ( (synpred319_Delphi()) ) {
						alt229=1;
					}
					}
					break;
			}
			switch (alt229) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:49: ( qualifiedIdent | typeId )
					{
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:49: ( qualifiedIdent | typeId )
					int alt228=2;
					switch ( input.LA(1) ) {
					case TkIdentifier:
						{
						int LA228_1 = input.LA(2);
						if ( (synpred318_Delphi()) ) {
							alt228=1;
						}
						else if ( (true) ) {
							alt228=2;
						}

						}
						break;
					case 198:
						{
						int LA228_2 = input.LA(2);
						if ( (LA228_2==TkIdentifier) ) {
							int LA228_6 = input.LA(3);
							if ( (synpred318_Delphi()) ) {
								alt228=1;
							}
							else if ( (true) ) {
								alt228=2;
							}

						}
						else if ( ((LA228_2 >= ABSOLUTE && LA228_2 <= ASSEMBLY)||LA228_2==AT||LA228_2==AUTOMATED||(LA228_2 >= BEGIN && LA228_2 <= CLASS)||(LA228_2 >= CONST && LA228_2 <= CONTINUE)||(LA228_2 >= DEFAULT && LA228_2 <= DO)||(LA228_2 >= DOWNTO && LA228_2 <= DYNAMIC)||(LA228_2 >= ELSE && LA228_2 <= END)||(LA228_2 >= EXCEPT && LA228_2 <= FUNCTION)||LA228_2==GOTO||LA228_2==HELPER||(LA228_2 >= IF && LA228_2 <= LABEL)||(LA228_2 >= LIBRARY && LA228_2 <= LOCAL)||LA228_2==MESSAGE||(LA228_2 >= MOD && LA228_2 <= NOT)||(LA228_2 >= OBJECT && LA228_2 <= PLATFORM)||LA228_2==POINTER||(LA228_2 >= PRIVATE && LA228_2 <= PUBLISHED)||LA228_2==RAISE||(LA228_2 >= READ && LA228_2 <= RESOURCESTRING)||(LA228_2 >= SAFECALL && LA228_2 <= SEALED)||(LA228_2 >= SET && LA228_2 <= SHR)||(LA228_2 >= STATIC && LA228_2 <= TYPE)||(LA228_2 >= UNIT && LA228_2 <= USES)||(LA228_2 >= VAR && LA228_2 <= WRITEONLY)||LA228_2==XOR) ) {
							int LA228_7 = input.LA(3);
							if ( (synpred318_Delphi()) ) {
								alt228=1;
							}
							else if ( (true) ) {
								alt228=2;
							}

						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 228, 2, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case ADD:
					case ANSISTRING:
					case AT:
					case BREAK:
					case CONTAINS:
					case CONTINUE:
					case DEFAULT:
					case DQ:
					case DW:
					case EXIT:
					case EXPORT:
					case FALSE:
					case FINAL:
					case IMPLEMENTS:
					case INDEX:
					case LOCAL:
					case MESSAGE:
					case NAME:
					case OBJECT:
					case OPERATOR:
					case OUT:
					case POINTER:
					case READ:
					case READONLY:
					case REFERENCE:
					case REGISTER:
					case REMOVE:
					case STATIC:
					case STORED:
					case STRICT:
					case STRING:
					case TRUE:
					case UNSAFE:
					case VARARGS:
					case VARIANT:
					case VIRTUAL:
					case WRITE:
					case WRITEONLY:
						{
						int LA228_3 = input.LA(2);
						if ( (synpred318_Delphi()) ) {
							alt228=1;
						}
						else if ( (true) ) {
							alt228=2;
						}

						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 228, 0, input);
						throw nvae;
					}
					switch (alt228) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:50: qualifiedIdent
							{
							pushFollow(FOLLOW_qualifiedIdent_in_designator13543);
							qualifiedIdent656=qualifiedIdent();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdent656.getTree());

							}
							break;
						case 2 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:67: typeId
							{
							pushFollow(FOLLOW_typeId_in_designator13547);
							typeId657=typeId();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, typeId657.getTree());

							}
							break;

					}

					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:78: ( designatorItem )*
			loop230:
			while (true) {
				int alt230=2;
				alt230 = dfa230.predict(input);
				switch (alt230) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:79: designatorItem
					{
					pushFollow(FOLLOW_designatorItem_in_designator13554);
					designatorItem658=designatorItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designatorItem658.getTree());

					}
					break;

				default :
					break loop230;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 123, designator_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "designator"


	public static class designatorItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "designatorItem"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:500:1: designatorItem : ( '^' | '^^' | ( '.' | '@' ) ident | ( '<' genericTypeIdent ( ',' genericTypeIdent )* '>' ) | '[' expressionList ']' | '(' ( expression ( colonConstruct )? ( ',' expression ( colonConstruct )? )* )? ')' -> '(' ( expression ( colonConstruct )? ( expression ( colonConstruct )? )* )? ')' );
	public final DelphiParser.designatorItem_return designatorItem() throws RecognitionException {
		DelphiParser.designatorItem_return retval = new DelphiParser.designatorItem_return();
		retval.start = input.LT(1);
		int designatorItem_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal659=null;
		Token string_literal660=null;
		Token set661=null;
		Token char_literal663=null;
		Token char_literal665=null;
		Token char_literal667=null;
		Token char_literal668=null;
		Token char_literal670=null;
		Token char_literal671=null;
		Token char_literal674=null;
		Token char_literal677=null;
		ParserRuleReturnScope ident662 =null;
		ParserRuleReturnScope genericTypeIdent664 =null;
		ParserRuleReturnScope genericTypeIdent666 =null;
		ParserRuleReturnScope expressionList669 =null;
		ParserRuleReturnScope expression672 =null;
		ParserRuleReturnScope colonConstruct673 =null;
		ParserRuleReturnScope expression675 =null;
		ParserRuleReturnScope colonConstruct676 =null;

		Object char_literal659_tree=null;
		Object string_literal660_tree=null;
		Object set661_tree=null;
		Object char_literal663_tree=null;
		Object char_literal665_tree=null;
		Object char_literal667_tree=null;
		Object char_literal668_tree=null;
		Object char_literal670_tree=null;
		Object char_literal671_tree=null;
		Object char_literal674_tree=null;
		Object char_literal677_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_colonConstruct=new RewriteRuleSubtreeStream(adaptor,"rule colonConstruct");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:500:30: ( '^' | '^^' | ( '.' | '@' ) ident | ( '<' genericTypeIdent ( ',' genericTypeIdent )* '>' ) | '[' expressionList ']' | '(' ( expression ( colonConstruct )? ( ',' expression ( colonConstruct )? )* )? ')' -> '(' ( expression ( colonConstruct )? ( expression ( colonConstruct )? )* )? ')' )
			int alt236=6;
			switch ( input.LA(1) ) {
			case POINTER2:
				{
				alt236=1;
				}
				break;
			case 200:
				{
				alt236=2;
				}
				break;
			case AT2:
			case DOT:
				{
				alt236=3;
				}
				break;
			case LT:
				{
				alt236=4;
				}
				break;
			case LBRACK:
				{
				alt236=5;
				}
				break;
			case LPAREN:
				{
				alt236=6;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 236, 0, input);
				throw nvae;
			}
			switch (alt236) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:500:32: '^'
					{
					root_0 = (Object)adaptor.nil();


					char_literal659=(Token)match(input,POINTER2,FOLLOW_POINTER2_in_designatorItem13607); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal659_tree = (Object)adaptor.create(char_literal659);
					adaptor.addChild(root_0, char_literal659_tree);
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:501:32: '^^'
					{
					root_0 = (Object)adaptor.nil();


					string_literal660=(Token)match(input,200,FOLLOW_200_in_designatorItem13640); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal660_tree = (Object)adaptor.create(string_literal660);
					adaptor.addChild(root_0, string_literal660_tree);
					}

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:502:32: ( '.' | '@' ) ident
					{
					root_0 = (Object)adaptor.nil();


					set661=input.LT(1);
					if ( input.LA(1)==AT2||input.LA(1)==DOT ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set661));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					pushFollow(FOLLOW_ident_in_designatorItem13681);
					ident662=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident662.getTree());

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:503:32: ( '<' genericTypeIdent ( ',' genericTypeIdent )* '>' )
					{
					root_0 = (Object)adaptor.nil();


					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:503:32: ( '<' genericTypeIdent ( ',' genericTypeIdent )* '>' )
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:503:33: '<' genericTypeIdent ( ',' genericTypeIdent )* '>'
					{
					char_literal663=(Token)match(input,LT,FOLLOW_LT_in_designatorItem13729); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal663_tree = (Object)adaptor.create(char_literal663);
					adaptor.addChild(root_0, char_literal663_tree);
					}

					pushFollow(FOLLOW_genericTypeIdent_in_designatorItem13731);
					genericTypeIdent664=genericTypeIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeIdent664.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:503:54: ( ',' genericTypeIdent )*
					loop231:
					while (true) {
						int alt231=2;
						int LA231_0 = input.LA(1);
						if ( (LA231_0==COMMA) ) {
							alt231=1;
						}

						switch (alt231) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:503:55: ',' genericTypeIdent
							{
							char_literal665=(Token)match(input,COMMA,FOLLOW_COMMA_in_designatorItem13734); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal665_tree = (Object)adaptor.create(char_literal665);
							adaptor.addChild(root_0, char_literal665_tree);
							}

							pushFollow(FOLLOW_genericTypeIdent_in_designatorItem13736);
							genericTypeIdent666=genericTypeIdent();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeIdent666.getTree());

							}
							break;

						default :
							break loop231;
						}
					}

					char_literal667=(Token)match(input,GT,FOLLOW_GT_in_designatorItem13740); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal667_tree = (Object)adaptor.create(char_literal667);
					adaptor.addChild(root_0, char_literal667_tree);
					}

					}

					}
					break;
				case 5 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:504:32: '[' expressionList ']'
					{
					root_0 = (Object)adaptor.nil();


					char_literal668=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_designatorItem13781); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal668_tree = (Object)adaptor.create(char_literal668);
					adaptor.addChild(root_0, char_literal668_tree);
					}

					pushFollow(FOLLOW_expressionList_in_designatorItem13783);
					expressionList669=expressionList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList669.getTree());

					char_literal670=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_designatorItem13785); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal670_tree = (Object)adaptor.create(char_literal670);
					adaptor.addChild(root_0, char_literal670_tree);
					}

					}
					break;
				case 6 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:505:32: '(' ( expression ( colonConstruct )? ( ',' expression ( colonConstruct )? )* )? ')'
					{
					char_literal671=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_designatorItem13818); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(char_literal671);

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:505:36: ( expression ( colonConstruct )? ( ',' expression ( colonConstruct )? )* )?
					int alt235=2;
					int LA235_0 = input.LA(1);
					if ( ((LA235_0 >= ADD && LA235_0 <= ANSISTRING)||LA235_0==AS||(LA235_0 >= AT && LA235_0 <= AT2)||LA235_0==BREAK||(LA235_0 >= COLON && LA235_0 <= COMMA)||(LA235_0 >= CONTAINS && LA235_0 <= DEFAULT)||LA235_0==DIV||LA235_0==DOT||(LA235_0 >= DQ && LA235_0 <= DW)||LA235_0==EQUAL||LA235_0==EXIT||LA235_0==EXPORT||LA235_0==FALSE||LA235_0==FINAL||(LA235_0 >= FUNCTION && LA235_0 <= GE)||LA235_0==GT||(LA235_0 >= IMPLEMENTS && LA235_0 <= INHERITED)||LA235_0==IS||LA235_0==LBRACK||LA235_0==LE||(LA235_0 >= LOCAL && LA235_0 <= NAME)||LA235_0==NIL||(LA235_0 >= NOT && LA235_0 <= OBJECT)||(LA235_0 >= OPERATOR && LA235_0 <= OUT)||(LA235_0 >= PLUS && LA235_0 <= POINTER2)||LA235_0==PROCEDURE||LA235_0==QuotedString||(LA235_0 >= READ && LA235_0 <= READONLY)||(LA235_0 >= REFERENCE && LA235_0 <= REGISTER)||LA235_0==REMOVE||(LA235_0 >= SHL && LA235_0 <= STATIC)||(LA235_0 >= STORED && LA235_0 <= STRING)||LA235_0==TRUE||(LA235_0 >= TkHexNum && LA235_0 <= TkIntNum)||LA235_0==TkRealNum||LA235_0==UNSAFE||(LA235_0 >= VARARGS && LA235_0 <= VIRTUAL)||(LA235_0 >= WRITE && LA235_0 <= WRITEONLY)||(LA235_0 >= XOR && LA235_0 <= 200)) ) {
						alt235=1;
					}
					else if ( (LA235_0==RPAREN) ) {
						int LA235_2 = input.LA(2);
						if ( (synpred331_Delphi()) ) {
							alt235=1;
						}
					}
					switch (alt235) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:505:37: expression ( colonConstruct )? ( ',' expression ( colonConstruct )? )*
							{
							pushFollow(FOLLOW_expression_in_designatorItem13821);
							expression672=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_expression.add(expression672.getTree());
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:505:48: ( colonConstruct )?
							int alt232=2;
							int LA232_0 = input.LA(1);
							if ( (LA232_0==COLON) ) {
								alt232=1;
							}
							switch (alt232) {
								case 1 :
									// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:505:49: colonConstruct
									{
									pushFollow(FOLLOW_colonConstruct_in_designatorItem13824);
									colonConstruct673=colonConstruct();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_colonConstruct.add(colonConstruct673.getTree());
									}
									break;

							}

							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:505:66: ( ',' expression ( colonConstruct )? )*
							loop234:
							while (true) {
								int alt234=2;
								int LA234_0 = input.LA(1);
								if ( (LA234_0==COMMA) ) {
									alt234=1;
								}

								switch (alt234) {
								case 1 :
									// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:505:67: ',' expression ( colonConstruct )?
									{
									char_literal674=(Token)match(input,COMMA,FOLLOW_COMMA_in_designatorItem13829); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_COMMA.add(char_literal674);

									pushFollow(FOLLOW_expression_in_designatorItem13831);
									expression675=expression();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_expression.add(expression675.getTree());
									// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:505:82: ( colonConstruct )?
									int alt233=2;
									int LA233_0 = input.LA(1);
									if ( (LA233_0==COLON) ) {
										alt233=1;
									}
									switch (alt233) {
										case 1 :
											// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:505:83: colonConstruct
											{
											pushFollow(FOLLOW_colonConstruct_in_designatorItem13834);
											colonConstruct676=colonConstruct();
											state._fsp--;
											if (state.failed) return retval;
											if ( state.backtracking==0 ) stream_colonConstruct.add(colonConstruct676.getTree());
											}
											break;

									}

									}
									break;

								default :
									break loop234;
								}
							}

							}
							break;

					}

					char_literal677=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_designatorItem13842); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(char_literal677);

					// AST REWRITE
					// elements: colonConstruct, RPAREN, expression, colonConstruct, expression, LPAREN
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 505:108: -> '(' ( expression ( colonConstruct )? ( expression ( colonConstruct )? )* )? ')'
					{
						adaptor.addChild(root_0, stream_LPAREN.nextNode());
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:505:115: ( expression ( colonConstruct )? ( expression ( colonConstruct )? )* )?
						if ( stream_colonConstruct.hasNext()||stream_expression.hasNext()||stream_expression.hasNext() ) {
							adaptor.addChild(root_0, stream_expression.nextTree());
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:505:127: ( colonConstruct )?
							if ( stream_colonConstruct.hasNext() ) {
								adaptor.addChild(root_0, stream_colonConstruct.nextTree());
							}
							stream_colonConstruct.reset();

							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:505:145: ( expression ( colonConstruct )? )*
							while ( stream_expression.hasNext() ) {
								adaptor.addChild(root_0, stream_expression.nextTree());
								// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:505:157: ( colonConstruct )?
								if ( stream_colonConstruct.hasNext() ) {
									adaptor.addChild(root_0, stream_colonConstruct.nextTree());
								}
								stream_colonConstruct.reset();

							}
							stream_expression.reset();

						}
						stream_colonConstruct.reset();
						stream_expression.reset();
						stream_expression.reset();

						adaptor.addChild(root_0, stream_RPAREN.nextNode());
					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 124, designatorItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "designatorItem"


	public static class expressionList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "expressionList"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:507:1: expressionList : expression ( ',' expression )* ;
	public final DelphiParser.expressionList_return expressionList() throws RecognitionException {
		DelphiParser.expressionList_return retval = new DelphiParser.expressionList_return();
		retval.start = input.LT(1);
		int expressionList_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal679=null;
		ParserRuleReturnScope expression678 =null;
		ParserRuleReturnScope expression680 =null;

		Object char_literal679_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:507:30: ( expression ( ',' expression )* )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:507:32: expression ( ',' expression )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_expression_in_expressionList13919);
			expression678=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression678.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:507:43: ( ',' expression )*
			loop237:
			while (true) {
				int alt237=2;
				int LA237_0 = input.LA(1);
				if ( (LA237_0==COMMA) ) {
					alt237=1;
				}

				switch (alt237) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:507:44: ',' expression
					{
					char_literal679=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList13922); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal679_tree = (Object)adaptor.create(char_literal679);
					adaptor.addChild(root_0, char_literal679_tree);
					}

					pushFollow(FOLLOW_expression_in_expressionList13924);
					expression680=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression680.getTree());

					}
					break;

				default :
					break loop237;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 125, expressionList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "expressionList"


	public static class colonConstruct_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "colonConstruct"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:509:1: colonConstruct : ':' expression ( ':' expression )? ;
	public final DelphiParser.colonConstruct_return colonConstruct() throws RecognitionException {
		DelphiParser.colonConstruct_return retval = new DelphiParser.colonConstruct_return();
		retval.start = input.LT(1);
		int colonConstruct_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal681=null;
		Token char_literal683=null;
		ParserRuleReturnScope expression682 =null;
		ParserRuleReturnScope expression684 =null;

		Object char_literal681_tree=null;
		Object char_literal683_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:509:30: ( ':' expression ( ':' expression )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:509:32: ':' expression ( ':' expression )?
			{
			root_0 = (Object)adaptor.nil();


			char_literal681=(Token)match(input,COLON,FOLLOW_COLON_in_colonConstruct13977); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal681_tree = (Object)adaptor.create(char_literal681);
			adaptor.addChild(root_0, char_literal681_tree);
			}

			pushFollow(FOLLOW_expression_in_colonConstruct13979);
			expression682=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression682.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:509:47: ( ':' expression )?
			int alt238=2;
			int LA238_0 = input.LA(1);
			if ( (LA238_0==COLON) ) {
				alt238=1;
			}
			switch (alt238) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:509:48: ':' expression
					{
					char_literal683=(Token)match(input,COLON,FOLLOW_COLON_in_colonConstruct13982); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal683_tree = (Object)adaptor.create(char_literal683);
					adaptor.addChild(root_0, char_literal683_tree);
					}

					pushFollow(FOLLOW_expression_in_colonConstruct13984);
					expression684=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression684.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 126, colonConstruct_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "colonConstruct"


	public static class operator_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "operator"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:512:1: operator : ( '+' | '-' | 'or' | 'xor' | '*' | '/' | 'div' | 'mod' | 'and' | 'shl' | 'shr' | 'as' );
	public final DelphiParser.operator_return operator() throws RecognitionException {
		DelphiParser.operator_return retval = new DelphiParser.operator_return();
		retval.start = input.LT(1);
		int operator_StartIndex = input.index();

		Object root_0 = null;

		Token set685=null;

		Object set685_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:512:30: ( '+' | '-' | 'or' | 'xor' | '*' | '/' | 'div' | 'mod' | 'and' | 'shl' | 'shr' | 'as' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set685=input.LT(1);
			if ( input.LA(1)==AND||input.LA(1)==AS||input.LA(1)==DIV||(input.LA(1) >= MINUS && input.LA(1) <= MOD)||input.LA(1)==OR||input.LA(1)==PLUS||(input.LA(1) >= SHL && input.LA(1) <= STAR)||input.LA(1)==XOR ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set685));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 127, operator_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "operator"


	public static class relOp_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "relOp"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:525:1: relOp : ( '<' | '>' | '<=' | '>=' | '<>' | '=' | 'in' | 'is' );
	public final DelphiParser.relOp_return relOp() throws RecognitionException {
		DelphiParser.relOp_return retval = new DelphiParser.relOp_return();
		retval.start = input.LT(1);
		int relOp_StartIndex = input.index();

		Object root_0 = null;

		Token set686=null;

		Object set686_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:525:30: ( '<' | '>' | '<=' | '>=' | '<>' | '=' | 'in' | 'is' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set686=input.LT(1);
			if ( input.LA(1)==EQUAL||input.LA(1)==GE||input.LA(1)==GT||input.LA(1)==IN||input.LA(1)==IS||input.LA(1)==LE||input.LA(1)==LT||input.LA(1)==NOT_EQUAL ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set686));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 128, relOp_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "relOp"


	public static class statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "statement"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:538:1: statement : ( ifStatement | caseStatement | repeatStatement | whileStatement | forStatement | withStatement | tryStatement | raiseStatement | assemblerStatement | compoundStatement | label ':' statement | simpleStatement );
	public final DelphiParser.statement_return statement() throws RecognitionException {
		DelphiParser.statement_return retval = new DelphiParser.statement_return();
		retval.start = input.LT(1);
		int statement_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal698=null;
		ParserRuleReturnScope ifStatement687 =null;
		ParserRuleReturnScope caseStatement688 =null;
		ParserRuleReturnScope repeatStatement689 =null;
		ParserRuleReturnScope whileStatement690 =null;
		ParserRuleReturnScope forStatement691 =null;
		ParserRuleReturnScope withStatement692 =null;
		ParserRuleReturnScope tryStatement693 =null;
		ParserRuleReturnScope raiseStatement694 =null;
		ParserRuleReturnScope assemblerStatement695 =null;
		ParserRuleReturnScope compoundStatement696 =null;
		ParserRuleReturnScope label697 =null;
		ParserRuleReturnScope statement699 =null;
		ParserRuleReturnScope simpleStatement700 =null;

		Object char_literal698_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:538:30: ( ifStatement | caseStatement | repeatStatement | whileStatement | forStatement | withStatement | tryStatement | raiseStatement | assemblerStatement | compoundStatement | label ':' statement | simpleStatement )
			int alt239=12;
			switch ( input.LA(1) ) {
			case IF:
				{
				alt239=1;
				}
				break;
			case CASE:
				{
				alt239=2;
				}
				break;
			case REPEAT:
				{
				alt239=3;
				}
				break;
			case WHILE:
				{
				alt239=4;
				}
				break;
			case FOR:
				{
				alt239=5;
				}
				break;
			case WITH:
				{
				alt239=6;
				}
				break;
			case TRY:
				{
				alt239=7;
				}
				break;
			case RAISE:
				{
				alt239=8;
				}
				break;
			case ASM:
				{
				alt239=9;
				}
				break;
			case BEGIN:
				{
				alt239=10;
				}
				break;
			case TkIdentifier:
				{
				int LA239_11 = input.LA(2);
				if ( (LA239_11==COLON) ) {
					int LA239_21 = input.LA(3);
					if ( (synpred362_Delphi()) ) {
						alt239=11;
					}
					else if ( (true) ) {
						alt239=12;
					}

				}
				else if ( (LA239_11==EOF||(LA239_11 >= ADD && LA239_11 <= ANSISTRING)||LA239_11==AS||(LA239_11 >= ASSIGN && LA239_11 <= AT2)||LA239_11==BREAK||LA239_11==COMMA||(LA239_11 >= CONTAINS && LA239_11 <= DEFAULT)||LA239_11==DIV||(LA239_11 >= DOT && LA239_11 <= DOTDOT)||(LA239_11 >= DQ && LA239_11 <= DW)||(LA239_11 >= ELSE && LA239_11 <= EXIT)||LA239_11==EXPORT||LA239_11==FALSE||(LA239_11 >= FINAL && LA239_11 <= FINALLY)||(LA239_11 >= FUNCTION && LA239_11 <= GE)||LA239_11==GT||(LA239_11 >= IMPLEMENTS && LA239_11 <= INHERITED)||LA239_11==IS||LA239_11==LBRACK||LA239_11==LE||(LA239_11 >= LOCAL && LA239_11 <= NAME)||LA239_11==NIL||(LA239_11 >= NOT && LA239_11 <= OBJECT)||(LA239_11 >= ON && LA239_11 <= OUT)||(LA239_11 >= PLUS && LA239_11 <= POINTER2)||LA239_11==PROCEDURE||LA239_11==QuotedString||(LA239_11 >= READ && LA239_11 <= READONLY)||(LA239_11 >= REFERENCE && LA239_11 <= REGISTER)||LA239_11==REMOVE||LA239_11==SEMI||(LA239_11 >= SHL && LA239_11 <= STATIC)||(LA239_11 >= STORED && LA239_11 <= STRING)||LA239_11==TRUE||(LA239_11 >= TkHexNum && LA239_11 <= TkIntNum)||LA239_11==TkRealNum||(LA239_11 >= UNSAFE && LA239_11 <= UNTIL)||(LA239_11 >= VARARGS && LA239_11 <= VIRTUAL)||(LA239_11 >= WRITE && LA239_11 <= WRITEONLY)||(LA239_11 >= XOR && LA239_11 <= 200)) ) {
					alt239=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 239, 11, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TkIntNum:
				{
				int LA239_12 = input.LA(2);
				if ( (LA239_12==COLON) ) {
					int LA239_22 = input.LA(3);
					if ( (synpred362_Delphi()) ) {
						alt239=11;
					}
					else if ( (true) ) {
						alt239=12;
					}

				}
				else if ( (LA239_12==AND||LA239_12==AS||LA239_12==COMMA||LA239_12==DIV||LA239_12==DOTDOT||LA239_12==EQUAL||LA239_12==GE||LA239_12==GT||LA239_12==IN||LA239_12==IS||LA239_12==LE||LA239_12==LT||(LA239_12 >= MINUS && LA239_12 <= MOD)||LA239_12==NOT_EQUAL||LA239_12==OR||LA239_12==PLUS||(LA239_12 >= SHL && LA239_12 <= STAR)||LA239_12==XOR) ) {
					alt239=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 239, 12, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TkHexNum:
				{
				int LA239_13 = input.LA(2);
				if ( (LA239_13==COLON) ) {
					int LA239_23 = input.LA(3);
					if ( (synpred362_Delphi()) ) {
						alt239=11;
					}
					else if ( (true) ) {
						alt239=12;
					}

				}
				else if ( (LA239_13==AND||LA239_13==AS||LA239_13==COMMA||LA239_13==DIV||LA239_13==DOTDOT||LA239_13==EQUAL||LA239_13==GE||LA239_13==GT||LA239_13==IN||LA239_13==IS||LA239_13==LE||LA239_13==LT||(LA239_13 >= MINUS && LA239_13 <= MOD)||LA239_13==NOT_EQUAL||LA239_13==OR||LA239_13==PLUS||(LA239_13 >= SHL && LA239_13 <= STAR)||LA239_13==XOR) ) {
					alt239=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 239, 13, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TRUE:
				{
				int LA239_14 = input.LA(2);
				if ( (LA239_14==COLON) ) {
					int LA239_24 = input.LA(3);
					if ( (synpred362_Delphi()) ) {
						alt239=11;
					}
					else if ( (true) ) {
						alt239=12;
					}

				}
				else if ( (LA239_14==EOF||(LA239_14 >= ADD && LA239_14 <= ANSISTRING)||LA239_14==AS||(LA239_14 >= ASSIGN && LA239_14 <= AT2)||LA239_14==BREAK||LA239_14==COMMA||(LA239_14 >= CONTAINS && LA239_14 <= DEFAULT)||LA239_14==DIV||(LA239_14 >= DOT && LA239_14 <= DOTDOT)||(LA239_14 >= DQ && LA239_14 <= DW)||(LA239_14 >= ELSE && LA239_14 <= EXIT)||LA239_14==EXPORT||LA239_14==FALSE||(LA239_14 >= FINAL && LA239_14 <= FINALLY)||(LA239_14 >= FUNCTION && LA239_14 <= GE)||LA239_14==GT||(LA239_14 >= IMPLEMENTS && LA239_14 <= INHERITED)||LA239_14==IS||LA239_14==LBRACK||LA239_14==LE||(LA239_14 >= LOCAL && LA239_14 <= NAME)||LA239_14==NIL||(LA239_14 >= NOT && LA239_14 <= OBJECT)||(LA239_14 >= ON && LA239_14 <= OUT)||(LA239_14 >= PLUS && LA239_14 <= POINTER2)||LA239_14==PROCEDURE||LA239_14==QuotedString||(LA239_14 >= READ && LA239_14 <= READONLY)||(LA239_14 >= REFERENCE && LA239_14 <= REGISTER)||LA239_14==REMOVE||LA239_14==SEMI||(LA239_14 >= SHL && LA239_14 <= STATIC)||(LA239_14 >= STORED && LA239_14 <= STRING)||LA239_14==TRUE||(LA239_14 >= TkHexNum && LA239_14 <= TkIntNum)||LA239_14==TkRealNum||(LA239_14 >= UNSAFE && LA239_14 <= UNTIL)||(LA239_14 >= VARARGS && LA239_14 <= VIRTUAL)||(LA239_14 >= WRITE && LA239_14 <= WRITEONLY)||(LA239_14 >= XOR && LA239_14 <= 200)) ) {
					alt239=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 239, 14, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EOF:
			case AND:
			case AS:
			case ASSIGN:
			case AT2:
			case COLON:
			case COMMA:
			case ControlChar:
			case ControlString:
			case DIV:
			case DOT:
			case DOTDOT:
			case ELSE:
			case END:
			case EQUAL:
			case EXCEPT:
			case FINALIZATION:
			case FINALLY:
			case FUNCTION:
			case GE:
			case GOTO:
			case GT:
			case IN:
			case INHERITED:
			case IS:
			case LBRACK:
			case LE:
			case LPAREN:
			case LT:
			case MINUS:
			case MOD:
			case NIL:
			case NOT:
			case NOT_EQUAL:
			case ON:
			case OR:
			case PLUS:
			case POINTER2:
			case PROCEDURE:
			case QuotedString:
			case SEMI:
			case SHL:
			case SHR:
			case SLASH:
			case STAR:
			case TkRealNum:
			case UNTIL:
			case XOR:
			case 198:
			case 199:
			case 200:
				{
				alt239=12;
				}
				break;
			case FALSE:
				{
				int LA239_16 = input.LA(2);
				if ( (LA239_16==COLON) ) {
					int LA239_25 = input.LA(3);
					if ( (synpred362_Delphi()) ) {
						alt239=11;
					}
					else if ( (true) ) {
						alt239=12;
					}

				}
				else if ( (LA239_16==EOF||(LA239_16 >= ADD && LA239_16 <= ANSISTRING)||LA239_16==AS||(LA239_16 >= ASSIGN && LA239_16 <= AT2)||LA239_16==BREAK||LA239_16==COMMA||(LA239_16 >= CONTAINS && LA239_16 <= DEFAULT)||LA239_16==DIV||(LA239_16 >= DOT && LA239_16 <= DOTDOT)||(LA239_16 >= DQ && LA239_16 <= DW)||(LA239_16 >= ELSE && LA239_16 <= EXIT)||LA239_16==EXPORT||LA239_16==FALSE||(LA239_16 >= FINAL && LA239_16 <= FINALLY)||(LA239_16 >= FUNCTION && LA239_16 <= GE)||LA239_16==GT||(LA239_16 >= IMPLEMENTS && LA239_16 <= INHERITED)||LA239_16==IS||LA239_16==LBRACK||LA239_16==LE||(LA239_16 >= LOCAL && LA239_16 <= NAME)||LA239_16==NIL||(LA239_16 >= NOT && LA239_16 <= OBJECT)||(LA239_16 >= ON && LA239_16 <= OUT)||(LA239_16 >= PLUS && LA239_16 <= POINTER2)||LA239_16==PROCEDURE||LA239_16==QuotedString||(LA239_16 >= READ && LA239_16 <= READONLY)||(LA239_16 >= REFERENCE && LA239_16 <= REGISTER)||LA239_16==REMOVE||LA239_16==SEMI||(LA239_16 >= SHL && LA239_16 <= STATIC)||(LA239_16 >= STORED && LA239_16 <= STRING)||LA239_16==TRUE||(LA239_16 >= TkHexNum && LA239_16 <= TkIntNum)||LA239_16==TkRealNum||(LA239_16 >= UNSAFE && LA239_16 <= UNTIL)||(LA239_16 >= VARARGS && LA239_16 <= VIRTUAL)||(LA239_16 >= WRITE && LA239_16 <= WRITEONLY)||(LA239_16 >= XOR && LA239_16 <= 200)) ) {
					alt239=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 239, 16, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EXIT:
				{
				int LA239_17 = input.LA(2);
				if ( (LA239_17==COLON) ) {
					int LA239_26 = input.LA(3);
					if ( (synpred362_Delphi()) ) {
						alt239=11;
					}
					else if ( (true) ) {
						alt239=12;
					}

				}
				else if ( (LA239_17==EOF||(LA239_17 >= ADD && LA239_17 <= ANSISTRING)||LA239_17==AS||(LA239_17 >= ASSIGN && LA239_17 <= AT2)||LA239_17==BREAK||LA239_17==COMMA||(LA239_17 >= CONTAINS && LA239_17 <= DEFAULT)||LA239_17==DIV||(LA239_17 >= DOT && LA239_17 <= DOTDOT)||(LA239_17 >= DQ && LA239_17 <= DW)||(LA239_17 >= ELSE && LA239_17 <= EXIT)||LA239_17==EXPORT||LA239_17==FALSE||(LA239_17 >= FINAL && LA239_17 <= FINALLY)||(LA239_17 >= FUNCTION && LA239_17 <= GE)||LA239_17==GT||(LA239_17 >= IMPLEMENTS && LA239_17 <= INHERITED)||LA239_17==IS||LA239_17==LBRACK||LA239_17==LE||(LA239_17 >= LOCAL && LA239_17 <= NAME)||LA239_17==NIL||(LA239_17 >= NOT && LA239_17 <= OBJECT)||(LA239_17 >= ON && LA239_17 <= OUT)||(LA239_17 >= PLUS && LA239_17 <= POINTER2)||LA239_17==PROCEDURE||LA239_17==QuotedString||(LA239_17 >= READ && LA239_17 <= READONLY)||(LA239_17 >= REFERENCE && LA239_17 <= REGISTER)||LA239_17==REMOVE||LA239_17==SEMI||(LA239_17 >= SHL && LA239_17 <= STATIC)||(LA239_17 >= STORED && LA239_17 <= STRING)||LA239_17==TRUE||(LA239_17 >= TkHexNum && LA239_17 <= TkIntNum)||LA239_17==TkRealNum||(LA239_17 >= UNSAFE && LA239_17 <= UNTIL)||(LA239_17 >= VARARGS && LA239_17 <= VIRTUAL)||(LA239_17 >= WRITE && LA239_17 <= WRITEONLY)||(LA239_17 >= XOR && LA239_17 <= 200)) ) {
					alt239=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 239, 17, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case BREAK:
				{
				int LA239_18 = input.LA(2);
				if ( (LA239_18==COLON) ) {
					int LA239_27 = input.LA(3);
					if ( (synpred362_Delphi()) ) {
						alt239=11;
					}
					else if ( (true) ) {
						alt239=12;
					}

				}
				else if ( (LA239_18==EOF||(LA239_18 >= ADD && LA239_18 <= ANSISTRING)||LA239_18==AS||(LA239_18 >= ASSIGN && LA239_18 <= AT2)||LA239_18==BREAK||LA239_18==COMMA||(LA239_18 >= CONTAINS && LA239_18 <= DEFAULT)||LA239_18==DIV||(LA239_18 >= DOT && LA239_18 <= DOTDOT)||(LA239_18 >= DQ && LA239_18 <= DW)||(LA239_18 >= ELSE && LA239_18 <= EXIT)||LA239_18==EXPORT||LA239_18==FALSE||(LA239_18 >= FINAL && LA239_18 <= FINALLY)||(LA239_18 >= FUNCTION && LA239_18 <= GE)||LA239_18==GT||(LA239_18 >= IMPLEMENTS && LA239_18 <= INHERITED)||LA239_18==IS||LA239_18==LBRACK||LA239_18==LE||(LA239_18 >= LOCAL && LA239_18 <= NAME)||LA239_18==NIL||(LA239_18 >= NOT && LA239_18 <= OBJECT)||(LA239_18 >= ON && LA239_18 <= OUT)||(LA239_18 >= PLUS && LA239_18 <= POINTER2)||LA239_18==PROCEDURE||LA239_18==QuotedString||(LA239_18 >= READ && LA239_18 <= READONLY)||(LA239_18 >= REFERENCE && LA239_18 <= REGISTER)||LA239_18==REMOVE||LA239_18==SEMI||(LA239_18 >= SHL && LA239_18 <= STATIC)||(LA239_18 >= STORED && LA239_18 <= STRING)||LA239_18==TRUE||(LA239_18 >= TkHexNum && LA239_18 <= TkIntNum)||LA239_18==TkRealNum||(LA239_18 >= UNSAFE && LA239_18 <= UNTIL)||(LA239_18 >= VARARGS && LA239_18 <= VIRTUAL)||(LA239_18 >= WRITE && LA239_18 <= WRITEONLY)||(LA239_18 >= XOR && LA239_18 <= 200)) ) {
					alt239=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 239, 18, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CONTINUE:
				{
				int LA239_19 = input.LA(2);
				if ( (LA239_19==COLON) ) {
					int LA239_28 = input.LA(3);
					if ( (synpred362_Delphi()) ) {
						alt239=11;
					}
					else if ( (true) ) {
						alt239=12;
					}

				}
				else if ( (LA239_19==EOF||(LA239_19 >= ADD && LA239_19 <= ANSISTRING)||LA239_19==AS||(LA239_19 >= ASSIGN && LA239_19 <= AT2)||LA239_19==BREAK||LA239_19==COMMA||(LA239_19 >= CONTAINS && LA239_19 <= DEFAULT)||LA239_19==DIV||(LA239_19 >= DOT && LA239_19 <= DOTDOT)||(LA239_19 >= DQ && LA239_19 <= DW)||(LA239_19 >= ELSE && LA239_19 <= EXIT)||LA239_19==EXPORT||LA239_19==FALSE||(LA239_19 >= FINAL && LA239_19 <= FINALLY)||(LA239_19 >= FUNCTION && LA239_19 <= GE)||LA239_19==GT||(LA239_19 >= IMPLEMENTS && LA239_19 <= INHERITED)||LA239_19==IS||LA239_19==LBRACK||LA239_19==LE||(LA239_19 >= LOCAL && LA239_19 <= NAME)||LA239_19==NIL||(LA239_19 >= NOT && LA239_19 <= OBJECT)||(LA239_19 >= ON && LA239_19 <= OUT)||(LA239_19 >= PLUS && LA239_19 <= POINTER2)||LA239_19==PROCEDURE||LA239_19==QuotedString||(LA239_19 >= READ && LA239_19 <= READONLY)||(LA239_19 >= REFERENCE && LA239_19 <= REGISTER)||LA239_19==REMOVE||LA239_19==SEMI||(LA239_19 >= SHL && LA239_19 <= STATIC)||(LA239_19 >= STORED && LA239_19 <= STRING)||LA239_19==TRUE||(LA239_19 >= TkHexNum && LA239_19 <= TkIntNum)||LA239_19==TkRealNum||(LA239_19 >= UNSAFE && LA239_19 <= UNTIL)||(LA239_19 >= VARARGS && LA239_19 <= VIRTUAL)||(LA239_19 >= WRITE && LA239_19 <= WRITEONLY)||(LA239_19 >= XOR && LA239_19 <= 200)) ) {
					alt239=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 239, 19, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ADD:
			case ANSISTRING:
			case AT:
			case CONTAINS:
			case DEFAULT:
			case DQ:
			case DW:
			case EXPORT:
			case FINAL:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STATIC:
			case STORED:
			case STRICT:
			case STRING:
			case UNSAFE:
			case VARARGS:
			case VARIANT:
			case VIRTUAL:
			case WRITE:
			case WRITEONLY:
				{
				int LA239_20 = input.LA(2);
				if ( (LA239_20==COLON) ) {
					int LA239_29 = input.LA(3);
					if ( (synpred362_Delphi()) ) {
						alt239=11;
					}
					else if ( (true) ) {
						alt239=12;
					}

				}
				else if ( (LA239_20==EOF||(LA239_20 >= ADD && LA239_20 <= ANSISTRING)||LA239_20==AS||(LA239_20 >= ASSIGN && LA239_20 <= AT2)||LA239_20==BREAK||LA239_20==COMMA||(LA239_20 >= CONTAINS && LA239_20 <= DEFAULT)||LA239_20==DIV||(LA239_20 >= DOT && LA239_20 <= DOTDOT)||(LA239_20 >= DQ && LA239_20 <= DW)||(LA239_20 >= ELSE && LA239_20 <= EXIT)||LA239_20==EXPORT||LA239_20==FALSE||(LA239_20 >= FINAL && LA239_20 <= FINALLY)||(LA239_20 >= FUNCTION && LA239_20 <= GE)||LA239_20==GT||(LA239_20 >= IMPLEMENTS && LA239_20 <= INHERITED)||LA239_20==IS||LA239_20==LBRACK||LA239_20==LE||(LA239_20 >= LOCAL && LA239_20 <= NAME)||LA239_20==NIL||(LA239_20 >= NOT && LA239_20 <= OBJECT)||(LA239_20 >= ON && LA239_20 <= OUT)||(LA239_20 >= PLUS && LA239_20 <= POINTER2)||LA239_20==PROCEDURE||LA239_20==QuotedString||(LA239_20 >= READ && LA239_20 <= READONLY)||(LA239_20 >= REFERENCE && LA239_20 <= REGISTER)||LA239_20==REMOVE||LA239_20==SEMI||(LA239_20 >= SHL && LA239_20 <= STATIC)||(LA239_20 >= STORED && LA239_20 <= STRING)||LA239_20==TRUE||(LA239_20 >= TkHexNum && LA239_20 <= TkIntNum)||LA239_20==TkRealNum||(LA239_20 >= UNSAFE && LA239_20 <= UNTIL)||(LA239_20 >= VARARGS && LA239_20 <= VIRTUAL)||(LA239_20 >= WRITE && LA239_20 <= WRITEONLY)||(LA239_20 >= XOR && LA239_20 <= 200)) ) {
					alt239=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 239, 20, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 239, 0, input);
				throw nvae;
			}
			switch (alt239) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:538:32: ifStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_ifStatement_in_statement14758);
					ifStatement687=ifStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ifStatement687.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:539:32: caseStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_caseStatement_in_statement14791);
					caseStatement688=caseStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, caseStatement688.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:540:32: repeatStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_repeatStatement_in_statement14824);
					repeatStatement689=repeatStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, repeatStatement689.getTree());

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:541:32: whileStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_whileStatement_in_statement14857);
					whileStatement690=whileStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, whileStatement690.getTree());

					}
					break;
				case 5 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:542:32: forStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_forStatement_in_statement14890);
					forStatement691=forStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, forStatement691.getTree());

					}
					break;
				case 6 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:543:32: withStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_withStatement_in_statement14923);
					withStatement692=withStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, withStatement692.getTree());

					}
					break;
				case 7 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:544:32: tryStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_tryStatement_in_statement14956);
					tryStatement693=tryStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, tryStatement693.getTree());

					}
					break;
				case 8 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:545:32: raiseStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_raiseStatement_in_statement14989);
					raiseStatement694=raiseStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, raiseStatement694.getTree());

					}
					break;
				case 9 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:546:32: assemblerStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_assemblerStatement_in_statement15022);
					assemblerStatement695=assemblerStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, assemblerStatement695.getTree());

					}
					break;
				case 10 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:547:32: compoundStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_compoundStatement_in_statement15055);
					compoundStatement696=compoundStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, compoundStatement696.getTree());

					}
					break;
				case 11 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:548:32: label ':' statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_label_in_statement15088);
					label697=label();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, label697.getTree());

					char_literal698=(Token)match(input,COLON,FOLLOW_COLON_in_statement15090); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal698_tree = (Object)adaptor.create(char_literal698);
					adaptor.addChild(root_0, char_literal698_tree);
					}

					pushFollow(FOLLOW_statement_in_statement15092);
					statement699=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statement699.getTree());

					}
					break;
				case 12 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:549:32: simpleStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_simpleStatement_in_statement15125);
					simpleStatement700=simpleStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleStatement700.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 129, statement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "statement"


	public static class ifStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "ifStatement"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:551:1: ifStatement : 'if' expression 'then' statement ( 'else' statement )? ;
	public final DelphiParser.ifStatement_return ifStatement() throws RecognitionException {
		DelphiParser.ifStatement_return retval = new DelphiParser.ifStatement_return();
		retval.start = input.LT(1);
		int ifStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal701=null;
		Token string_literal703=null;
		Token string_literal705=null;
		ParserRuleReturnScope expression702 =null;
		ParserRuleReturnScope statement704 =null;
		ParserRuleReturnScope statement706 =null;

		Object string_literal701_tree=null;
		Object string_literal703_tree=null;
		Object string_literal705_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:551:30: ( 'if' expression 'then' statement ( 'else' statement )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:551:32: 'if' expression 'then' statement ( 'else' statement )?
			{
			root_0 = (Object)adaptor.nil();


			string_literal701=(Token)match(input,IF,FOLLOW_IF_in_ifStatement15179); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal701_tree = (Object)adaptor.create(string_literal701);
			adaptor.addChild(root_0, string_literal701_tree);
			}

			pushFollow(FOLLOW_expression_in_ifStatement15181);
			expression702=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression702.getTree());

			string_literal703=(Token)match(input,THEN,FOLLOW_THEN_in_ifStatement15183); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal703_tree = (Object)adaptor.create(string_literal703);
			adaptor.addChild(root_0, string_literal703_tree);
			}

			pushFollow(FOLLOW_statement_in_ifStatement15185);
			statement704=statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, statement704.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:551:65: ( 'else' statement )?
			int alt240=2;
			int LA240_0 = input.LA(1);
			if ( (LA240_0==ELSE) ) {
				int LA240_1 = input.LA(2);
				if ( (synpred363_Delphi()) ) {
					alt240=1;
				}
			}
			switch (alt240) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:551:66: 'else' statement
					{
					string_literal705=(Token)match(input,ELSE,FOLLOW_ELSE_in_ifStatement15188); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal705_tree = (Object)adaptor.create(string_literal705);
					adaptor.addChild(root_0, string_literal705_tree);
					}

					pushFollow(FOLLOW_statement_in_ifStatement15190);
					statement706=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statement706.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 130, ifStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "ifStatement"


	public static class caseStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "caseStatement"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:553:1: caseStatement : 'case' expression 'of' ( caseItem )* ( 'else' statementList ( ';' )? )? 'end' ;
	public final DelphiParser.caseStatement_return caseStatement() throws RecognitionException {
		DelphiParser.caseStatement_return retval = new DelphiParser.caseStatement_return();
		retval.start = input.LT(1);
		int caseStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal707=null;
		Token string_literal709=null;
		Token string_literal711=null;
		Token char_literal713=null;
		Token string_literal714=null;
		ParserRuleReturnScope expression708 =null;
		ParserRuleReturnScope caseItem710 =null;
		ParserRuleReturnScope statementList712 =null;

		Object string_literal707_tree=null;
		Object string_literal709_tree=null;
		Object string_literal711_tree=null;
		Object char_literal713_tree=null;
		Object string_literal714_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:553:30: ( 'case' expression 'of' ( caseItem )* ( 'else' statementList ( ';' )? )? 'end' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:553:32: 'case' expression 'of' ( caseItem )* ( 'else' statementList ( ';' )? )? 'end'
			{
			root_0 = (Object)adaptor.nil();


			string_literal707=(Token)match(input,CASE,FOLLOW_CASE_in_caseStatement15244); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal707_tree = (Object)adaptor.create(string_literal707);
			adaptor.addChild(root_0, string_literal707_tree);
			}

			pushFollow(FOLLOW_expression_in_caseStatement15246);
			expression708=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression708.getTree());

			string_literal709=(Token)match(input,OF,FOLLOW_OF_in_caseStatement15248); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal709_tree = (Object)adaptor.create(string_literal709);
			adaptor.addChild(root_0, string_literal709_tree);
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:553:55: ( caseItem )*
			loop241:
			while (true) {
				int alt241=2;
				int LA241_0 = input.LA(1);
				if ( ((LA241_0 >= ADD && LA241_0 <= ANSISTRING)||LA241_0==AS||(LA241_0 >= AT && LA241_0 <= AT2)||LA241_0==BREAK||(LA241_0 >= COLON && LA241_0 <= COMMA)||(LA241_0 >= CONTAINS && LA241_0 <= DEFAULT)||LA241_0==DIV||(LA241_0 >= DOT && LA241_0 <= DOTDOT)||(LA241_0 >= DQ && LA241_0 <= DW)||LA241_0==EQUAL||LA241_0==EXIT||LA241_0==EXPORT||LA241_0==FALSE||LA241_0==FINAL||(LA241_0 >= FUNCTION && LA241_0 <= GE)||LA241_0==GT||(LA241_0 >= IMPLEMENTS && LA241_0 <= INHERITED)||LA241_0==IS||LA241_0==LBRACK||LA241_0==LE||(LA241_0 >= LOCAL && LA241_0 <= NAME)||LA241_0==NIL||(LA241_0 >= NOT && LA241_0 <= OBJECT)||(LA241_0 >= OPERATOR && LA241_0 <= OUT)||(LA241_0 >= PLUS && LA241_0 <= POINTER2)||LA241_0==PROCEDURE||LA241_0==QuotedString||(LA241_0 >= READ && LA241_0 <= READONLY)||(LA241_0 >= REFERENCE && LA241_0 <= REGISTER)||LA241_0==REMOVE||(LA241_0 >= SHL && LA241_0 <= STATIC)||(LA241_0 >= STORED && LA241_0 <= STRING)||LA241_0==TRUE||(LA241_0 >= TkHexNum && LA241_0 <= TkIntNum)||LA241_0==TkRealNum||LA241_0==UNSAFE||(LA241_0 >= VARARGS && LA241_0 <= VIRTUAL)||(LA241_0 >= WRITE && LA241_0 <= WRITEONLY)||(LA241_0 >= XOR && LA241_0 <= 200)) ) {
					alt241=1;
				}

				switch (alt241) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:553:56: caseItem
					{
					pushFollow(FOLLOW_caseItem_in_caseStatement15251);
					caseItem710=caseItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, caseItem710.getTree());

					}
					break;

				default :
					break loop241;
				}
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:553:67: ( 'else' statementList ( ';' )? )?
			int alt243=2;
			int LA243_0 = input.LA(1);
			if ( (LA243_0==ELSE) ) {
				alt243=1;
			}
			switch (alt243) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:553:68: 'else' statementList ( ';' )?
					{
					string_literal711=(Token)match(input,ELSE,FOLLOW_ELSE_in_caseStatement15256); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal711_tree = (Object)adaptor.create(string_literal711);
					adaptor.addChild(root_0, string_literal711_tree);
					}

					pushFollow(FOLLOW_statementList_in_caseStatement15258);
					statementList712=statementList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList712.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:553:89: ( ';' )?
					int alt242=2;
					int LA242_0 = input.LA(1);
					if ( (LA242_0==SEMI) ) {
						alt242=1;
					}
					switch (alt242) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:553:90: ';'
							{
							char_literal713=(Token)match(input,SEMI,FOLLOW_SEMI_in_caseStatement15261); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal713_tree = (Object)adaptor.create(char_literal713);
							adaptor.addChild(root_0, char_literal713_tree);
							}

							}
							break;

					}

					}
					break;

			}

			string_literal714=(Token)match(input,END,FOLLOW_END_in_caseStatement15267); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal714_tree = (Object)adaptor.create(string_literal714);
			adaptor.addChild(root_0, string_literal714_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 131, caseStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "caseStatement"


	public static class caseItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "caseItem"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:555:1: caseItem : caseLabel ( ',' caseLabel )* ':' statement ( ';' )? ;
	public final DelphiParser.caseItem_return caseItem() throws RecognitionException {
		DelphiParser.caseItem_return retval = new DelphiParser.caseItem_return();
		retval.start = input.LT(1);
		int caseItem_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal716=null;
		Token char_literal718=null;
		Token char_literal720=null;
		ParserRuleReturnScope caseLabel715 =null;
		ParserRuleReturnScope caseLabel717 =null;
		ParserRuleReturnScope statement719 =null;

		Object char_literal716_tree=null;
		Object char_literal718_tree=null;
		Object char_literal720_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:555:30: ( caseLabel ( ',' caseLabel )* ':' statement ( ';' )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:555:32: caseLabel ( ',' caseLabel )* ':' statement ( ';' )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_caseLabel_in_caseItem15324);
			caseLabel715=caseLabel();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, caseLabel715.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:555:42: ( ',' caseLabel )*
			loop244:
			while (true) {
				int alt244=2;
				int LA244_0 = input.LA(1);
				if ( (LA244_0==COMMA) ) {
					alt244=1;
				}

				switch (alt244) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:555:43: ',' caseLabel
					{
					char_literal716=(Token)match(input,COMMA,FOLLOW_COMMA_in_caseItem15327); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal716_tree = (Object)adaptor.create(char_literal716);
					adaptor.addChild(root_0, char_literal716_tree);
					}

					pushFollow(FOLLOW_caseLabel_in_caseItem15329);
					caseLabel717=caseLabel();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, caseLabel717.getTree());

					}
					break;

				default :
					break loop244;
				}
			}

			char_literal718=(Token)match(input,COLON,FOLLOW_COLON_in_caseItem15333); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal718_tree = (Object)adaptor.create(char_literal718);
			adaptor.addChild(root_0, char_literal718_tree);
			}

			pushFollow(FOLLOW_statement_in_caseItem15335);
			statement719=statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, statement719.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:555:73: ( ';' )?
			int alt245=2;
			int LA245_0 = input.LA(1);
			if ( (LA245_0==SEMI) ) {
				alt245=1;
			}
			switch (alt245) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:555:74: ';'
					{
					char_literal720=(Token)match(input,SEMI,FOLLOW_SEMI_in_caseItem15338); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal720_tree = (Object)adaptor.create(char_literal720);
					adaptor.addChild(root_0, char_literal720_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 132, caseItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "caseItem"


	public static class caseLabel_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "caseLabel"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:557:1: caseLabel : expression ( '..' expression )? ;
	public final DelphiParser.caseLabel_return caseLabel() throws RecognitionException {
		DelphiParser.caseLabel_return retval = new DelphiParser.caseLabel_return();
		retval.start = input.LT(1);
		int caseLabel_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal722=null;
		ParserRuleReturnScope expression721 =null;
		ParserRuleReturnScope expression723 =null;

		Object string_literal722_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:557:30: ( expression ( '..' expression )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:557:32: expression ( '..' expression )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_expression_in_caseLabel15397);
			expression721=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression721.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:557:43: ( '..' expression )?
			int alt246=2;
			int LA246_0 = input.LA(1);
			if ( (LA246_0==DOTDOT) ) {
				alt246=1;
			}
			switch (alt246) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:557:44: '..' expression
					{
					string_literal722=(Token)match(input,DOTDOT,FOLLOW_DOTDOT_in_caseLabel15400); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal722_tree = (Object)adaptor.create(string_literal722);
					adaptor.addChild(root_0, string_literal722_tree);
					}

					pushFollow(FOLLOW_expression_in_caseLabel15402);
					expression723=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression723.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 133, caseLabel_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "caseLabel"


	public static class repeatStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "repeatStatement"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:559:1: repeatStatement : 'repeat' ( statementList )? 'until' expression ;
	public final DelphiParser.repeatStatement_return repeatStatement() throws RecognitionException {
		DelphiParser.repeatStatement_return retval = new DelphiParser.repeatStatement_return();
		retval.start = input.LT(1);
		int repeatStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal724=null;
		Token string_literal726=null;
		ParserRuleReturnScope statementList725 =null;
		ParserRuleReturnScope expression727 =null;

		Object string_literal724_tree=null;
		Object string_literal726_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:559:30: ( 'repeat' ( statementList )? 'until' expression )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:559:32: 'repeat' ( statementList )? 'until' expression
			{
			root_0 = (Object)adaptor.nil();


			string_literal724=(Token)match(input,REPEAT,FOLLOW_REPEAT_in_repeatStatement15454); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal724_tree = (Object)adaptor.create(string_literal724);
			adaptor.addChild(root_0, string_literal724_tree);
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:559:41: ( statementList )?
			int alt247=2;
			int LA247_0 = input.LA(1);
			if ( (LA247_0==ADD||LA247_0==ANSISTRING||LA247_0==ASM||(LA247_0 >= ASSIGN && LA247_0 <= AT2)||(LA247_0 >= BEGIN && LA247_0 <= CASE)||(LA247_0 >= CONTAINS && LA247_0 <= CONTINUE)||LA247_0==DEFAULT||LA247_0==DOT||(LA247_0 >= DQ && LA247_0 <= DW)||LA247_0==EXIT||LA247_0==EXPORT||LA247_0==FALSE||LA247_0==FINAL||LA247_0==FOR||LA247_0==GOTO||LA247_0==IF||LA247_0==IMPLEMENTS||(LA247_0 >= INDEX && LA247_0 <= INHERITED)||LA247_0==LBRACK||(LA247_0 >= LOCAL && LA247_0 <= MESSAGE)||LA247_0==NAME||LA247_0==OBJECT||LA247_0==OPERATOR||LA247_0==OUT||(LA247_0 >= POINTER && LA247_0 <= POINTER2)||LA247_0==RAISE||(LA247_0 >= READ && LA247_0 <= READONLY)||(LA247_0 >= REFERENCE && LA247_0 <= REGISTER)||(LA247_0 >= REMOVE && LA247_0 <= REPEAT)||LA247_0==SEMI||LA247_0==STATIC||(LA247_0 >= STORED && LA247_0 <= STRING)||(LA247_0 >= TRUE && LA247_0 <= TRY)||(LA247_0 >= TkHexNum && LA247_0 <= TkIntNum)||LA247_0==UNSAFE||(LA247_0 >= VARARGS && LA247_0 <= WRITEONLY)||LA247_0==198||LA247_0==200) ) {
				alt247=1;
			}
			else if ( (LA247_0==UNTIL) ) {
				int LA247_2 = input.LA(2);
				if ( (synpred370_Delphi()) ) {
					alt247=1;
				}
			}
			switch (alt247) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:559:42: statementList
					{
					pushFollow(FOLLOW_statementList_in_repeatStatement15457);
					statementList725=statementList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList725.getTree());

					}
					break;

			}

			string_literal726=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_repeatStatement15461); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal726_tree = (Object)adaptor.create(string_literal726);
			adaptor.addChild(root_0, string_literal726_tree);
			}

			pushFollow(FOLLOW_expression_in_repeatStatement15463);
			expression727=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression727.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 134, repeatStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "repeatStatement"


	public static class whileStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "whileStatement"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:561:1: whileStatement : 'while' expression 'do' statement ;
	public final DelphiParser.whileStatement_return whileStatement() throws RecognitionException {
		DelphiParser.whileStatement_return retval = new DelphiParser.whileStatement_return();
		retval.start = input.LT(1);
		int whileStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal728=null;
		Token string_literal730=null;
		ParserRuleReturnScope expression729 =null;
		ParserRuleReturnScope statement731 =null;

		Object string_literal728_tree=null;
		Object string_literal730_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:561:30: ( 'while' expression 'do' statement )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:561:32: 'while' expression 'do' statement
			{
			root_0 = (Object)adaptor.nil();


			string_literal728=(Token)match(input,WHILE,FOLLOW_WHILE_in_whileStatement15514); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal728_tree = (Object)adaptor.create(string_literal728);
			adaptor.addChild(root_0, string_literal728_tree);
			}

			pushFollow(FOLLOW_expression_in_whileStatement15516);
			expression729=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression729.getTree());

			string_literal730=(Token)match(input,DO,FOLLOW_DO_in_whileStatement15518); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal730_tree = (Object)adaptor.create(string_literal730);
			adaptor.addChild(root_0, string_literal730_tree);
			}

			pushFollow(FOLLOW_statement_in_whileStatement15520);
			statement731=statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, statement731.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 135, whileStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "whileStatement"


	public static class forStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "forStatement"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:563:1: forStatement : ( 'for' designator ':=' expression 'to' expression 'do' statement | 'for' designator ':=' expression 'downto' expression 'do' statement | 'for' designator 'in' expression 'do' statement );
	public final DelphiParser.forStatement_return forStatement() throws RecognitionException {
		DelphiParser.forStatement_return retval = new DelphiParser.forStatement_return();
		retval.start = input.LT(1);
		int forStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal732=null;
		Token string_literal734=null;
		Token string_literal736=null;
		Token string_literal738=null;
		Token string_literal740=null;
		Token string_literal742=null;
		Token string_literal744=null;
		Token string_literal746=null;
		Token string_literal748=null;
		Token string_literal750=null;
		Token string_literal752=null;
		ParserRuleReturnScope designator733 =null;
		ParserRuleReturnScope expression735 =null;
		ParserRuleReturnScope expression737 =null;
		ParserRuleReturnScope statement739 =null;
		ParserRuleReturnScope designator741 =null;
		ParserRuleReturnScope expression743 =null;
		ParserRuleReturnScope expression745 =null;
		ParserRuleReturnScope statement747 =null;
		ParserRuleReturnScope designator749 =null;
		ParserRuleReturnScope expression751 =null;
		ParserRuleReturnScope statement753 =null;

		Object string_literal732_tree=null;
		Object string_literal734_tree=null;
		Object string_literal736_tree=null;
		Object string_literal738_tree=null;
		Object string_literal740_tree=null;
		Object string_literal742_tree=null;
		Object string_literal744_tree=null;
		Object string_literal746_tree=null;
		Object string_literal748_tree=null;
		Object string_literal750_tree=null;
		Object string_literal752_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:563:30: ( 'for' designator ':=' expression 'to' expression 'do' statement | 'for' designator ':=' expression 'downto' expression 'do' statement | 'for' designator 'in' expression 'do' statement )
			int alt248=3;
			int LA248_0 = input.LA(1);
			if ( (LA248_0==FOR) ) {
				int LA248_1 = input.LA(2);
				if ( (synpred371_Delphi()) ) {
					alt248=1;
				}
				else if ( (synpred372_Delphi()) ) {
					alt248=2;
				}
				else if ( (true) ) {
					alt248=3;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 248, 0, input);
				throw nvae;
			}

			switch (alt248) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:563:32: 'for' designator ':=' expression 'to' expression 'do' statement
					{
					root_0 = (Object)adaptor.nil();


					string_literal732=(Token)match(input,FOR,FOLLOW_FOR_in_forStatement15573); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal732_tree = (Object)adaptor.create(string_literal732);
					adaptor.addChild(root_0, string_literal732_tree);
					}

					pushFollow(FOLLOW_designator_in_forStatement15575);
					designator733=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator733.getTree());

					string_literal734=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_forStatement15577); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal734_tree = (Object)adaptor.create(string_literal734);
					adaptor.addChild(root_0, string_literal734_tree);
					}

					pushFollow(FOLLOW_expression_in_forStatement15579);
					expression735=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression735.getTree());

					string_literal736=(Token)match(input,TO,FOLLOW_TO_in_forStatement15581); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal736_tree = (Object)adaptor.create(string_literal736);
					adaptor.addChild(root_0, string_literal736_tree);
					}

					pushFollow(FOLLOW_expression_in_forStatement15583);
					expression737=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression737.getTree());

					string_literal738=(Token)match(input,DO,FOLLOW_DO_in_forStatement15585); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal738_tree = (Object)adaptor.create(string_literal738);
					adaptor.addChild(root_0, string_literal738_tree);
					}

					pushFollow(FOLLOW_statement_in_forStatement15587);
					statement739=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statement739.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:564:32: 'for' designator ':=' expression 'downto' expression 'do' statement
					{
					root_0 = (Object)adaptor.nil();


					string_literal740=(Token)match(input,FOR,FOLLOW_FOR_in_forStatement15620); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal740_tree = (Object)adaptor.create(string_literal740);
					adaptor.addChild(root_0, string_literal740_tree);
					}

					pushFollow(FOLLOW_designator_in_forStatement15622);
					designator741=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator741.getTree());

					string_literal742=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_forStatement15624); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal742_tree = (Object)adaptor.create(string_literal742);
					adaptor.addChild(root_0, string_literal742_tree);
					}

					pushFollow(FOLLOW_expression_in_forStatement15626);
					expression743=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression743.getTree());

					string_literal744=(Token)match(input,DOWNTO,FOLLOW_DOWNTO_in_forStatement15628); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal744_tree = (Object)adaptor.create(string_literal744);
					adaptor.addChild(root_0, string_literal744_tree);
					}

					pushFollow(FOLLOW_expression_in_forStatement15630);
					expression745=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression745.getTree());

					string_literal746=(Token)match(input,DO,FOLLOW_DO_in_forStatement15632); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal746_tree = (Object)adaptor.create(string_literal746);
					adaptor.addChild(root_0, string_literal746_tree);
					}

					pushFollow(FOLLOW_statement_in_forStatement15634);
					statement747=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statement747.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:565:32: 'for' designator 'in' expression 'do' statement
					{
					root_0 = (Object)adaptor.nil();


					string_literal748=(Token)match(input,FOR,FOLLOW_FOR_in_forStatement15667); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal748_tree = (Object)adaptor.create(string_literal748);
					adaptor.addChild(root_0, string_literal748_tree);
					}

					pushFollow(FOLLOW_designator_in_forStatement15669);
					designator749=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator749.getTree());

					string_literal750=(Token)match(input,IN,FOLLOW_IN_in_forStatement15671); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal750_tree = (Object)adaptor.create(string_literal750);
					adaptor.addChild(root_0, string_literal750_tree);
					}

					pushFollow(FOLLOW_expression_in_forStatement15673);
					expression751=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression751.getTree());

					string_literal752=(Token)match(input,DO,FOLLOW_DO_in_forStatement15675); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal752_tree = (Object)adaptor.create(string_literal752);
					adaptor.addChild(root_0, string_literal752_tree);
					}

					pushFollow(FOLLOW_statement_in_forStatement15677);
					statement753=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statement753.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 136, forStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "forStatement"


	public static class withStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "withStatement"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:567:1: withStatement : 'with' withItemList 'do' statement ;
	public final DelphiParser.withStatement_return withStatement() throws RecognitionException {
		DelphiParser.withStatement_return retval = new DelphiParser.withStatement_return();
		retval.start = input.LT(1);
		int withStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal754=null;
		Token string_literal756=null;
		ParserRuleReturnScope withItemList755 =null;
		ParserRuleReturnScope statement757 =null;

		Object string_literal754_tree=null;
		Object string_literal756_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:567:30: ( 'with' withItemList 'do' statement )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:567:32: 'with' withItemList 'do' statement
			{
			root_0 = (Object)adaptor.nil();


			string_literal754=(Token)match(input,WITH,FOLLOW_WITH_in_withStatement15729); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal754_tree = (Object)adaptor.create(string_literal754);
			adaptor.addChild(root_0, string_literal754_tree);
			}

			pushFollow(FOLLOW_withItemList_in_withStatement15731);
			withItemList755=withItemList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, withItemList755.getTree());

			string_literal756=(Token)match(input,DO,FOLLOW_DO_in_withStatement15733); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal756_tree = (Object)adaptor.create(string_literal756);
			adaptor.addChild(root_0, string_literal756_tree);
			}

			pushFollow(FOLLOW_statement_in_withStatement15735);
			statement757=statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, statement757.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 137, withStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "withStatement"


	public static class withItemList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "withItemList"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:569:1: withItemList : withItem ( ',' withItem )* ;
	public final DelphiParser.withItemList_return withItemList() throws RecognitionException {
		DelphiParser.withItemList_return retval = new DelphiParser.withItemList_return();
		retval.start = input.LT(1);
		int withItemList_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal759=null;
		ParserRuleReturnScope withItem758 =null;
		ParserRuleReturnScope withItem760 =null;

		Object char_literal759_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:569:30: ( withItem ( ',' withItem )* )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:569:32: withItem ( ',' withItem )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_withItem_in_withItemList15788);
			withItem758=withItem();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, withItem758.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:569:41: ( ',' withItem )*
			loop249:
			while (true) {
				int alt249=2;
				int LA249_0 = input.LA(1);
				if ( (LA249_0==COMMA) ) {
					alt249=1;
				}

				switch (alt249) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:569:42: ',' withItem
					{
					char_literal759=(Token)match(input,COMMA,FOLLOW_COMMA_in_withItemList15791); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal759_tree = (Object)adaptor.create(char_literal759);
					adaptor.addChild(root_0, char_literal759_tree);
					}

					pushFollow(FOLLOW_withItem_in_withItemList15793);
					withItem760=withItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, withItem760.getTree());

					}
					break;

				default :
					break loop249;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 138, withItemList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "withItemList"


	public static class withItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "withItem"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:571:1: withItem : designator ( 'as' designator )? ;
	public final DelphiParser.withItem_return withItem() throws RecognitionException {
		DelphiParser.withItem_return retval = new DelphiParser.withItem_return();
		retval.start = input.LT(1);
		int withItem_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal762=null;
		ParserRuleReturnScope designator761 =null;
		ParserRuleReturnScope designator763 =null;

		Object string_literal762_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:571:30: ( designator ( 'as' designator )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:571:32: designator ( 'as' designator )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_designator_in_withItem15852);
			designator761=designator();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, designator761.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:571:43: ( 'as' designator )?
			int alt250=2;
			int LA250_0 = input.LA(1);
			if ( (LA250_0==AS) ) {
				alt250=1;
			}
			switch (alt250) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:571:44: 'as' designator
					{
					string_literal762=(Token)match(input,AS,FOLLOW_AS_in_withItem15855); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal762_tree = (Object)adaptor.create(string_literal762);
					adaptor.addChild(root_0, string_literal762_tree);
					}

					pushFollow(FOLLOW_designator_in_withItem15857);
					designator763=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator763.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 139, withItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "withItem"


	public static class compoundStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "compoundStatement"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:573:1: compoundStatement : 'begin' ( statementList )? 'end' -> ^( 'begin' ( statementList )? 'end' ) ;
	public final DelphiParser.compoundStatement_return compoundStatement() throws RecognitionException {
		DelphiParser.compoundStatement_return retval = new DelphiParser.compoundStatement_return();
		retval.start = input.LT(1);
		int compoundStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal764=null;
		Token string_literal766=null;
		ParserRuleReturnScope statementList765 =null;

		Object string_literal764_tree=null;
		Object string_literal766_tree=null;
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleTokenStream stream_BEGIN=new RewriteRuleTokenStream(adaptor,"token BEGIN");
		RewriteRuleSubtreeStream stream_statementList=new RewriteRuleSubtreeStream(adaptor,"rule statementList");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:573:30: ( 'begin' ( statementList )? 'end' -> ^( 'begin' ( statementList )? 'end' ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:573:32: 'begin' ( statementList )? 'end'
			{
			string_literal764=(Token)match(input,BEGIN,FOLLOW_BEGIN_in_compoundStatement15907); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_BEGIN.add(string_literal764);

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:573:40: ( statementList )?
			int alt251=2;
			int LA251_0 = input.LA(1);
			if ( (LA251_0==ADD||LA251_0==ANSISTRING||LA251_0==ASM||(LA251_0 >= ASSIGN && LA251_0 <= AT2)||(LA251_0 >= BEGIN && LA251_0 <= CASE)||(LA251_0 >= CONTAINS && LA251_0 <= CONTINUE)||LA251_0==DEFAULT||LA251_0==DOT||(LA251_0 >= DQ && LA251_0 <= DW)||LA251_0==EXIT||LA251_0==EXPORT||LA251_0==FALSE||LA251_0==FINAL||LA251_0==FOR||LA251_0==GOTO||LA251_0==IF||LA251_0==IMPLEMENTS||(LA251_0 >= INDEX && LA251_0 <= INHERITED)||LA251_0==LBRACK||(LA251_0 >= LOCAL && LA251_0 <= MESSAGE)||LA251_0==NAME||LA251_0==OBJECT||LA251_0==OPERATOR||LA251_0==OUT||(LA251_0 >= POINTER && LA251_0 <= POINTER2)||LA251_0==RAISE||(LA251_0 >= READ && LA251_0 <= READONLY)||(LA251_0 >= REFERENCE && LA251_0 <= REGISTER)||(LA251_0 >= REMOVE && LA251_0 <= REPEAT)||LA251_0==SEMI||LA251_0==STATIC||(LA251_0 >= STORED && LA251_0 <= STRING)||(LA251_0 >= TRUE && LA251_0 <= TRY)||(LA251_0 >= TkHexNum && LA251_0 <= TkIntNum)||LA251_0==UNSAFE||(LA251_0 >= VARARGS && LA251_0 <= WRITEONLY)||LA251_0==198||LA251_0==200) ) {
				alt251=1;
			}
			else if ( (LA251_0==END) ) {
				int LA251_2 = input.LA(2);
				if ( (synpred375_Delphi()) ) {
					alt251=1;
				}
			}
			switch (alt251) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:573:41: statementList
					{
					pushFollow(FOLLOW_statementList_in_compoundStatement15910);
					statementList765=statementList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_statementList.add(statementList765.getTree());
					}
					break;

			}

			string_literal766=(Token)match(input,END,FOLLOW_END_in_compoundStatement15914); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_END.add(string_literal766);

			// AST REWRITE
			// elements: statementList, END, BEGIN
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 573:63: -> ^( 'begin' ( statementList )? 'end' )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:573:66: ^( 'begin' ( statementList )? 'end' )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_BEGIN.nextNode(), root_1);
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:573:76: ( statementList )?
				if ( stream_statementList.hasNext() ) {
					adaptor.addChild(root_1, stream_statementList.nextTree());
				}
				stream_statementList.reset();

				adaptor.addChild(root_1, stream_END.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 140, compoundStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "compoundStatement"


	public static class statementList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "statementList"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:575:1: statementList : ( statement )? ( ';' ( statement )? )* ;
	public final DelphiParser.statementList_return statementList() throws RecognitionException {
		DelphiParser.statementList_return retval = new DelphiParser.statementList_return();
		retval.start = input.LT(1);
		int statementList_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal768=null;
		ParserRuleReturnScope statement767 =null;
		ParserRuleReturnScope statement769 =null;

		Object char_literal768_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:575:30: ( ( statement )? ( ';' ( statement )? )* )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:575:32: ( statement )? ( ';' ( statement )? )*
			{
			root_0 = (Object)adaptor.nil();


			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:575:32: ( statement )?
			int alt252=2;
			switch ( input.LA(1) ) {
				case ADD:
				case ANSISTRING:
				case ASM:
				case ASSIGN:
				case AT:
				case AT2:
				case BEGIN:
				case BREAK:
				case CASE:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DOT:
				case DQ:
				case DW:
				case EXIT:
				case EXPORT:
				case FALSE:
				case FINAL:
				case FOR:
				case GOTO:
				case IF:
				case IMPLEMENTS:
				case INDEX:
				case INHERITED:
				case LBRACK:
				case LOCAL:
				case LPAREN:
				case LT:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case POINTER2:
				case RAISE:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case REPEAT:
				case STATIC:
				case STORED:
				case STRICT:
				case STRING:
				case TRUE:
				case TRY:
				case TkHexNum:
				case TkIdentifier:
				case TkIntNum:
				case UNSAFE:
				case VARARGS:
				case VARIANT:
				case VIRTUAL:
				case WHILE:
				case WITH:
				case WRITE:
				case WRITEONLY:
				case 198:
				case 200:
					{
					alt252=1;
					}
					break;
				case SEMI:
					{
					int LA252_2 = input.LA(2);
					if ( (synpred376_Delphi()) ) {
						alt252=1;
					}
					}
					break;
				case FINALIZATION:
					{
					int LA252_3 = input.LA(2);
					if ( (synpred376_Delphi()) ) {
						alt252=1;
					}
					}
					break;
				case END:
					{
					int LA252_4 = input.LA(2);
					if ( (synpred376_Delphi()) ) {
						alt252=1;
					}
					}
					break;
				case EOF:
					{
					int LA252_5 = input.LA(2);
					if ( (synpred376_Delphi()) ) {
						alt252=1;
					}
					}
					break;
				case UNTIL:
					{
					int LA252_6 = input.LA(2);
					if ( (synpred376_Delphi()) ) {
						alt252=1;
					}
					}
					break;
				case EXCEPT:
					{
					int LA252_7 = input.LA(2);
					if ( (synpred376_Delphi()) ) {
						alt252=1;
					}
					}
					break;
				case FINALLY:
					{
					int LA252_8 = input.LA(2);
					if ( (synpred376_Delphi()) ) {
						alt252=1;
					}
					}
					break;
			}
			switch (alt252) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:575:33: statement
					{
					pushFollow(FOLLOW_statement_in_statementList15980);
					statement767=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statement767.getTree());

					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:575:45: ( ';' ( statement )? )*
			loop254:
			while (true) {
				int alt254=2;
				int LA254_0 = input.LA(1);
				if ( (LA254_0==SEMI) ) {
					int LA254_2 = input.LA(2);
					if ( (synpred378_Delphi()) ) {
						alt254=1;
					}

				}

				switch (alt254) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:575:46: ';' ( statement )?
					{
					char_literal768=(Token)match(input,SEMI,FOLLOW_SEMI_in_statementList15985); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal768_tree = (Object)adaptor.create(char_literal768);
					adaptor.addChild(root_0, char_literal768_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:575:50: ( statement )?
					int alt253=2;
					switch ( input.LA(1) ) {
						case ADD:
						case ANSISTRING:
						case ASM:
						case ASSIGN:
						case AT:
						case AT2:
						case BEGIN:
						case BREAK:
						case CASE:
						case CONTAINS:
						case CONTINUE:
						case DEFAULT:
						case DOT:
						case DQ:
						case DW:
						case EXIT:
						case EXPORT:
						case FALSE:
						case FINAL:
						case FOR:
						case GOTO:
						case IF:
						case IMPLEMENTS:
						case INDEX:
						case INHERITED:
						case LBRACK:
						case LOCAL:
						case LPAREN:
						case LT:
						case MESSAGE:
						case NAME:
						case OBJECT:
						case OPERATOR:
						case OUT:
						case POINTER:
						case POINTER2:
						case RAISE:
						case READ:
						case READONLY:
						case REFERENCE:
						case REGISTER:
						case REMOVE:
						case REPEAT:
						case STATIC:
						case STORED:
						case STRICT:
						case STRING:
						case TRUE:
						case TRY:
						case TkHexNum:
						case TkIdentifier:
						case TkIntNum:
						case UNSAFE:
						case VARARGS:
						case VARIANT:
						case VIRTUAL:
						case WHILE:
						case WITH:
						case WRITE:
						case WRITEONLY:
						case 198:
						case 200:
							{
							alt253=1;
							}
							break;
						case FINALIZATION:
							{
							int LA253_2 = input.LA(2);
							if ( (synpred377_Delphi()) ) {
								alt253=1;
							}
							}
							break;
						case END:
							{
							int LA253_3 = input.LA(2);
							if ( (synpred377_Delphi()) ) {
								alt253=1;
							}
							}
							break;
						case EOF:
							{
							int LA253_4 = input.LA(2);
							if ( (synpred377_Delphi()) ) {
								alt253=1;
							}
							}
							break;
						case SEMI:
							{
							int LA253_5 = input.LA(2);
							if ( (synpred377_Delphi()) ) {
								alt253=1;
							}
							}
							break;
						case UNTIL:
							{
							int LA253_6 = input.LA(2);
							if ( (synpred377_Delphi()) ) {
								alt253=1;
							}
							}
							break;
						case EXCEPT:
							{
							int LA253_7 = input.LA(2);
							if ( (synpred377_Delphi()) ) {
								alt253=1;
							}
							}
							break;
						case FINALLY:
							{
							int LA253_8 = input.LA(2);
							if ( (synpred377_Delphi()) ) {
								alt253=1;
							}
							}
							break;
					}
					switch (alt253) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:575:51: statement
							{
							pushFollow(FOLLOW_statement_in_statementList15988);
							statement769=statement();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, statement769.getTree());

							}
							break;

					}

					}
					break;

				default :
					break loop254;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 141, statementList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "statementList"


	public static class simpleStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "simpleStatement"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:577:1: simpleStatement : ( designator ':=' expression | designator | gotoStatement );
	public final DelphiParser.simpleStatement_return simpleStatement() throws RecognitionException {
		DelphiParser.simpleStatement_return retval = new DelphiParser.simpleStatement_return();
		retval.start = input.LT(1);
		int simpleStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal771=null;
		ParserRuleReturnScope designator770 =null;
		ParserRuleReturnScope expression772 =null;
		ParserRuleReturnScope designator773 =null;
		ParserRuleReturnScope gotoStatement774 =null;

		Object string_literal771_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:577:30: ( designator ':=' expression | designator | gotoStatement )
			int alt255=3;
			switch ( input.LA(1) ) {
			case INHERITED:
				{
				int LA255_1 = input.LA(2);
				if ( (synpred379_Delphi()) ) {
					alt255=1;
				}
				else if ( (synpred380_Delphi()) ) {
					alt255=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 255, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TkIdentifier:
				{
				int LA255_2 = input.LA(2);
				if ( (synpred379_Delphi()) ) {
					alt255=1;
				}
				else if ( (synpred380_Delphi()) ) {
					alt255=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 255, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case 198:
				{
				int LA255_3 = input.LA(2);
				if ( (synpred379_Delphi()) ) {
					alt255=1;
				}
				else if ( (synpred380_Delphi()) ) {
					alt255=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 255, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TRUE:
				{
				int LA255_4 = input.LA(2);
				if ( (synpred379_Delphi()) ) {
					alt255=1;
				}
				else if ( (synpred380_Delphi()) ) {
					alt255=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 255, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case POINTER2:
				{
				int LA255_5 = input.LA(2);
				if ( (synpred379_Delphi()) ) {
					alt255=1;
				}
				else if ( (synpred380_Delphi()) ) {
					alt255=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 255, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case 200:
				{
				int LA255_6 = input.LA(2);
				if ( (synpred379_Delphi()) ) {
					alt255=1;
				}
				else if ( (synpred380_Delphi()) ) {
					alt255=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 255, 6, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT2:
				{
				int LA255_7 = input.LA(2);
				if ( (synpred379_Delphi()) ) {
					alt255=1;
				}
				else if ( (synpred380_Delphi()) ) {
					alt255=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 255, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LT:
				{
				int LA255_8 = input.LA(2);
				if ( (synpred379_Delphi()) ) {
					alt255=1;
				}
				else if ( (synpred380_Delphi()) ) {
					alt255=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 255, 8, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LBRACK:
				{
				int LA255_9 = input.LA(2);
				if ( (synpred379_Delphi()) ) {
					alt255=1;
				}
				else if ( (synpred380_Delphi()) ) {
					alt255=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 255, 9, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LPAREN:
				{
				int LA255_10 = input.LA(2);
				if ( (synpred379_Delphi()) ) {
					alt255=1;
				}
				else if ( (synpred380_Delphi()) ) {
					alt255=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 255, 10, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ASSIGN:
				{
				alt255=1;
				}
				break;
			case EOF:
			case AND:
			case AS:
			case COLON:
			case COMMA:
			case ControlChar:
			case ControlString:
			case DIV:
			case DOTDOT:
			case ELSE:
			case END:
			case EQUAL:
			case EXCEPT:
			case FINALIZATION:
			case FINALLY:
			case FUNCTION:
			case GE:
			case GT:
			case IN:
			case IS:
			case LE:
			case MINUS:
			case MOD:
			case NIL:
			case NOT:
			case NOT_EQUAL:
			case ON:
			case OR:
			case PLUS:
			case PROCEDURE:
			case QuotedString:
			case SEMI:
			case SHL:
			case SHR:
			case SLASH:
			case STAR:
			case TkHexNum:
			case TkIntNum:
			case TkRealNum:
			case UNTIL:
			case XOR:
			case 199:
				{
				alt255=2;
				}
				break;
			case DOT:
				{
				int LA255_18 = input.LA(2);
				if ( (synpred379_Delphi()) ) {
					alt255=1;
				}
				else if ( (synpred380_Delphi()) ) {
					alt255=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 255, 18, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case FALSE:
				{
				int LA255_25 = input.LA(2);
				if ( (synpred379_Delphi()) ) {
					alt255=1;
				}
				else if ( (synpred380_Delphi()) ) {
					alt255=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 255, 25, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EXIT:
				{
				int LA255_26 = input.LA(2);
				if ( (synpred379_Delphi()) ) {
					alt255=1;
				}
				else if ( (synpred380_Delphi()) ) {
					alt255=2;
				}
				else if ( (true) ) {
					alt255=3;
				}

				}
				break;
			case GOTO:
				{
				alt255=3;
				}
				break;
			case BREAK:
				{
				int LA255_42 = input.LA(2);
				if ( (synpred379_Delphi()) ) {
					alt255=1;
				}
				else if ( (synpred380_Delphi()) ) {
					alt255=2;
				}
				else if ( (true) ) {
					alt255=3;
				}

				}
				break;
			case CONTINUE:
				{
				int LA255_43 = input.LA(2);
				if ( (synpred379_Delphi()) ) {
					alt255=1;
				}
				else if ( (synpred380_Delphi()) ) {
					alt255=2;
				}
				else if ( (true) ) {
					alt255=3;
				}

				}
				break;
			case ADD:
			case ANSISTRING:
			case AT:
			case CONTAINS:
			case DEFAULT:
			case DQ:
			case DW:
			case EXPORT:
			case FINAL:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STATIC:
			case STORED:
			case STRICT:
			case STRING:
			case UNSAFE:
			case VARARGS:
			case VARIANT:
			case VIRTUAL:
			case WRITE:
			case WRITEONLY:
				{
				int LA255_44 = input.LA(2);
				if ( (synpred379_Delphi()) ) {
					alt255=1;
				}
				else if ( (synpred380_Delphi()) ) {
					alt255=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 255, 44, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 255, 0, input);
				throw nvae;
			}
			switch (alt255) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:577:32: designator ':=' expression
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_designator_in_simpleStatement16042);
					designator770=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator770.getTree());

					string_literal771=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_simpleStatement16044); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal771_tree = (Object)adaptor.create(string_literal771);
					adaptor.addChild(root_0, string_literal771_tree);
					}

					pushFollow(FOLLOW_expression_in_simpleStatement16046);
					expression772=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression772.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:578:32: designator
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_designator_in_simpleStatement16079);
					designator773=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator773.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:579:32: gotoStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_gotoStatement_in_simpleStatement16113);
					gotoStatement774=gotoStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, gotoStatement774.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 142, simpleStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "simpleStatement"


	public static class gotoStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "gotoStatement"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:581:1: gotoStatement : ( 'goto' label | 'exit' ( '(' expression ')' )? | 'break' | 'continue' );
	public final DelphiParser.gotoStatement_return gotoStatement() throws RecognitionException {
		DelphiParser.gotoStatement_return retval = new DelphiParser.gotoStatement_return();
		retval.start = input.LT(1);
		int gotoStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal775=null;
		Token string_literal777=null;
		Token char_literal778=null;
		Token char_literal780=null;
		Token string_literal781=null;
		Token string_literal782=null;
		ParserRuleReturnScope label776 =null;
		ParserRuleReturnScope expression779 =null;

		Object string_literal775_tree=null;
		Object string_literal777_tree=null;
		Object char_literal778_tree=null;
		Object char_literal780_tree=null;
		Object string_literal781_tree=null;
		Object string_literal782_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:581:30: ( 'goto' label | 'exit' ( '(' expression ')' )? | 'break' | 'continue' )
			int alt257=4;
			switch ( input.LA(1) ) {
			case GOTO:
				{
				alt257=1;
				}
				break;
			case EXIT:
				{
				alt257=2;
				}
				break;
			case BREAK:
				{
				alt257=3;
				}
				break;
			case CONTINUE:
				{
				alt257=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 257, 0, input);
				throw nvae;
			}
			switch (alt257) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:581:32: 'goto' label
					{
					root_0 = (Object)adaptor.nil();


					string_literal775=(Token)match(input,GOTO,FOLLOW_GOTO_in_gotoStatement16165); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal775_tree = (Object)adaptor.create(string_literal775);
					adaptor.addChild(root_0, string_literal775_tree);
					}

					pushFollow(FOLLOW_label_in_gotoStatement16167);
					label776=label();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, label776.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:582:32: 'exit' ( '(' expression ')' )?
					{
					root_0 = (Object)adaptor.nil();


					string_literal777=(Token)match(input,EXIT,FOLLOW_EXIT_in_gotoStatement16200); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal777_tree = (Object)adaptor.create(string_literal777);
					adaptor.addChild(root_0, string_literal777_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:582:39: ( '(' expression ')' )?
					int alt256=2;
					int LA256_0 = input.LA(1);
					if ( (LA256_0==LPAREN) ) {
						int LA256_1 = input.LA(2);
						if ( (synpred382_Delphi()) ) {
							alt256=1;
						}
					}
					switch (alt256) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:582:40: '(' expression ')'
							{
							char_literal778=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_gotoStatement16203); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal778_tree = (Object)adaptor.create(char_literal778);
							adaptor.addChild(root_0, char_literal778_tree);
							}

							pushFollow(FOLLOW_expression_in_gotoStatement16205);
							expression779=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression779.getTree());

							char_literal780=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_gotoStatement16207); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal780_tree = (Object)adaptor.create(char_literal780);
							adaptor.addChild(root_0, char_literal780_tree);
							}

							}
							break;

					}

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:583:32: 'break'
					{
					root_0 = (Object)adaptor.nil();


					string_literal781=(Token)match(input,BREAK,FOLLOW_BREAK_in_gotoStatement16242); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal781_tree = (Object)adaptor.create(string_literal781);
					adaptor.addChild(root_0, string_literal781_tree);
					}

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:584:32: 'continue'
					{
					root_0 = (Object)adaptor.nil();


					string_literal782=(Token)match(input,CONTINUE,FOLLOW_CONTINUE_in_gotoStatement16275); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal782_tree = (Object)adaptor.create(string_literal782);
					adaptor.addChild(root_0, string_literal782_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 143, gotoStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "gotoStatement"


	public static class constExpression_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "constExpression"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:1: constExpression : ( '(' recordConstExpression ( ';' recordConstExpression )* ')' | '(' constExpression ( ',' constExpression )* ')' ( constExpression )? | expression );
	public final DelphiParser.constExpression_return constExpression() throws RecognitionException {
		DelphiParser.constExpression_return retval = new DelphiParser.constExpression_return();
		retval.start = input.LT(1);
		int constExpression_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal783=null;
		Token char_literal785=null;
		Token char_literal787=null;
		Token char_literal788=null;
		Token char_literal790=null;
		Token char_literal792=null;
		ParserRuleReturnScope recordConstExpression784 =null;
		ParserRuleReturnScope recordConstExpression786 =null;
		ParserRuleReturnScope constExpression789 =null;
		ParserRuleReturnScope constExpression791 =null;
		ParserRuleReturnScope constExpression793 =null;
		ParserRuleReturnScope expression794 =null;

		Object char_literal783_tree=null;
		Object char_literal785_tree=null;
		Object char_literal787_tree=null;
		Object char_literal788_tree=null;
		Object char_literal790_tree=null;
		Object char_literal792_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:30: ( '(' recordConstExpression ( ';' recordConstExpression )* ')' | '(' constExpression ( ',' constExpression )* ')' ( constExpression )? | expression )
			int alt261=3;
			alt261 = dfa261.predict(input);
			switch (alt261) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:32: '(' recordConstExpression ( ';' recordConstExpression )* ')'
					{
					root_0 = (Object)adaptor.nil();


					char_literal783=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_constExpression16328); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal783_tree = (Object)adaptor.create(char_literal783);
					adaptor.addChild(root_0, char_literal783_tree);
					}

					pushFollow(FOLLOW_recordConstExpression_in_constExpression16330);
					recordConstExpression784=recordConstExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, recordConstExpression784.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:58: ( ';' recordConstExpression )*
					loop258:
					while (true) {
						int alt258=2;
						int LA258_0 = input.LA(1);
						if ( (LA258_0==SEMI) ) {
							alt258=1;
						}

						switch (alt258) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:59: ';' recordConstExpression
							{
							char_literal785=(Token)match(input,SEMI,FOLLOW_SEMI_in_constExpression16333); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal785_tree = (Object)adaptor.create(char_literal785);
							adaptor.addChild(root_0, char_literal785_tree);
							}

							pushFollow(FOLLOW_recordConstExpression_in_constExpression16335);
							recordConstExpression786=recordConstExpression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, recordConstExpression786.getTree());

							}
							break;

						default :
							break loop258;
						}
					}

					char_literal787=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_constExpression16339); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal787_tree = (Object)adaptor.create(char_literal787);
					adaptor.addChild(root_0, char_literal787_tree);
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:590:32: '(' constExpression ( ',' constExpression )* ')' ( constExpression )?
					{
					root_0 = (Object)adaptor.nil();


					char_literal788=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_constExpression16373); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal788_tree = (Object)adaptor.create(char_literal788);
					adaptor.addChild(root_0, char_literal788_tree);
					}

					pushFollow(FOLLOW_constExpression_in_constExpression16375);
					constExpression789=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression789.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:590:52: ( ',' constExpression )*
					loop259:
					while (true) {
						int alt259=2;
						int LA259_0 = input.LA(1);
						if ( (LA259_0==COMMA) ) {
							alt259=1;
						}

						switch (alt259) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:590:53: ',' constExpression
							{
							char_literal790=(Token)match(input,COMMA,FOLLOW_COMMA_in_constExpression16378); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal790_tree = (Object)adaptor.create(char_literal790);
							adaptor.addChild(root_0, char_literal790_tree);
							}

							pushFollow(FOLLOW_constExpression_in_constExpression16380);
							constExpression791=constExpression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression791.getTree());

							}
							break;

						default :
							break loop259;
						}
					}

					char_literal792=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_constExpression16384); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal792_tree = (Object)adaptor.create(char_literal792);
					adaptor.addChild(root_0, char_literal792_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:590:79: ( constExpression )?
					int alt260=2;
					alt260 = dfa260.predict(input);
					switch (alt260) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:590:80: constExpression
							{
							pushFollow(FOLLOW_constExpression_in_constExpression16387);
							constExpression793=constExpression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression793.getTree());

							}
							break;

					}

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:591:32: expression
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_expression_in_constExpression16422);
					expression794=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression794.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 144, constExpression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "constExpression"


	public static class recordConstExpression_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordConstExpression"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:593:1: recordConstExpression : ident ':' constExpression ;
	public final DelphiParser.recordConstExpression_return recordConstExpression() throws RecognitionException {
		DelphiParser.recordConstExpression_return retval = new DelphiParser.recordConstExpression_return();
		retval.start = input.LT(1);
		int recordConstExpression_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal796=null;
		ParserRuleReturnScope ident795 =null;
		ParserRuleReturnScope constExpression797 =null;

		Object char_literal796_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:593:30: ( ident ':' constExpression )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:593:32: ident ':' constExpression
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_ident_in_recordConstExpression16466);
			ident795=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident795.getTree());

			char_literal796=(Token)match(input,COLON,FOLLOW_COLON_in_recordConstExpression16468); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal796_tree = (Object)adaptor.create(char_literal796);
			adaptor.addChild(root_0, char_literal796_tree);
			}

			pushFollow(FOLLOW_constExpression_in_recordConstExpression16470);
			constExpression797=constExpression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression797.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 145, recordConstExpression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordConstExpression"


	public static class tryStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "tryStatement"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:598:1: tryStatement : ( 'try' ( statementList )? 'except' handlerList 'end' | 'try' ( statementList )? 'finally' ( statementList )? 'end' );
	public final DelphiParser.tryStatement_return tryStatement() throws RecognitionException {
		DelphiParser.tryStatement_return retval = new DelphiParser.tryStatement_return();
		retval.start = input.LT(1);
		int tryStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal798=null;
		Token string_literal800=null;
		Token string_literal802=null;
		Token string_literal803=null;
		Token string_literal805=null;
		Token string_literal807=null;
		ParserRuleReturnScope statementList799 =null;
		ParserRuleReturnScope handlerList801 =null;
		ParserRuleReturnScope statementList804 =null;
		ParserRuleReturnScope statementList806 =null;

		Object string_literal798_tree=null;
		Object string_literal800_tree=null;
		Object string_literal802_tree=null;
		Object string_literal803_tree=null;
		Object string_literal805_tree=null;
		Object string_literal807_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 146) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:598:30: ( 'try' ( statementList )? 'except' handlerList 'end' | 'try' ( statementList )? 'finally' ( statementList )? 'end' )
			int alt265=2;
			int LA265_0 = input.LA(1);
			if ( (LA265_0==TRY) ) {
				int LA265_1 = input.LA(2);
				if ( (synpred391_Delphi()) ) {
					alt265=1;
				}
				else if ( (true) ) {
					alt265=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 265, 0, input);
				throw nvae;
			}

			switch (alt265) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:598:32: 'try' ( statementList )? 'except' handlerList 'end'
					{
					root_0 = (Object)adaptor.nil();


					string_literal798=(Token)match(input,TRY,FOLLOW_TRY_in_tryStatement16526); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal798_tree = (Object)adaptor.create(string_literal798);
					adaptor.addChild(root_0, string_literal798_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:598:38: ( statementList )?
					int alt262=2;
					int LA262_0 = input.LA(1);
					if ( (LA262_0==ADD||LA262_0==ANSISTRING||LA262_0==ASM||(LA262_0 >= ASSIGN && LA262_0 <= AT2)||(LA262_0 >= BEGIN && LA262_0 <= CASE)||(LA262_0 >= CONTAINS && LA262_0 <= CONTINUE)||LA262_0==DEFAULT||LA262_0==DOT||(LA262_0 >= DQ && LA262_0 <= DW)||LA262_0==EXIT||LA262_0==EXPORT||LA262_0==FALSE||LA262_0==FINAL||LA262_0==FOR||LA262_0==GOTO||LA262_0==IF||LA262_0==IMPLEMENTS||(LA262_0 >= INDEX && LA262_0 <= INHERITED)||LA262_0==LBRACK||(LA262_0 >= LOCAL && LA262_0 <= MESSAGE)||LA262_0==NAME||LA262_0==OBJECT||LA262_0==OPERATOR||LA262_0==OUT||(LA262_0 >= POINTER && LA262_0 <= POINTER2)||LA262_0==RAISE||(LA262_0 >= READ && LA262_0 <= READONLY)||(LA262_0 >= REFERENCE && LA262_0 <= REGISTER)||(LA262_0 >= REMOVE && LA262_0 <= REPEAT)||LA262_0==SEMI||LA262_0==STATIC||(LA262_0 >= STORED && LA262_0 <= STRING)||(LA262_0 >= TRUE && LA262_0 <= TRY)||(LA262_0 >= TkHexNum && LA262_0 <= TkIntNum)||LA262_0==UNSAFE||(LA262_0 >= VARARGS && LA262_0 <= WRITEONLY)||LA262_0==198||LA262_0==200) ) {
						alt262=1;
					}
					else if ( (LA262_0==EXCEPT) ) {
						int LA262_2 = input.LA(2);
						if ( (synpred390_Delphi()) ) {
							alt262=1;
						}
					}
					switch (alt262) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:598:39: statementList
							{
							pushFollow(FOLLOW_statementList_in_tryStatement16529);
							statementList799=statementList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList799.getTree());

							}
							break;

					}

					string_literal800=(Token)match(input,EXCEPT,FOLLOW_EXCEPT_in_tryStatement16533); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal800_tree = (Object)adaptor.create(string_literal800);
					adaptor.addChild(root_0, string_literal800_tree);
					}

					pushFollow(FOLLOW_handlerList_in_tryStatement16535);
					handlerList801=handlerList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, handlerList801.getTree());

					string_literal802=(Token)match(input,END,FOLLOW_END_in_tryStatement16537); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal802_tree = (Object)adaptor.create(string_literal802);
					adaptor.addChild(root_0, string_literal802_tree);
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:599:32: 'try' ( statementList )? 'finally' ( statementList )? 'end'
					{
					root_0 = (Object)adaptor.nil();


					string_literal803=(Token)match(input,TRY,FOLLOW_TRY_in_tryStatement16570); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal803_tree = (Object)adaptor.create(string_literal803);
					adaptor.addChild(root_0, string_literal803_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:599:38: ( statementList )?
					int alt263=2;
					int LA263_0 = input.LA(1);
					if ( (LA263_0==ADD||LA263_0==ANSISTRING||LA263_0==ASM||(LA263_0 >= ASSIGN && LA263_0 <= AT2)||(LA263_0 >= BEGIN && LA263_0 <= CASE)||(LA263_0 >= CONTAINS && LA263_0 <= CONTINUE)||LA263_0==DEFAULT||LA263_0==DOT||(LA263_0 >= DQ && LA263_0 <= DW)||LA263_0==EXIT||LA263_0==EXPORT||LA263_0==FALSE||LA263_0==FINAL||LA263_0==FOR||LA263_0==GOTO||LA263_0==IF||LA263_0==IMPLEMENTS||(LA263_0 >= INDEX && LA263_0 <= INHERITED)||LA263_0==LBRACK||(LA263_0 >= LOCAL && LA263_0 <= MESSAGE)||LA263_0==NAME||LA263_0==OBJECT||LA263_0==OPERATOR||LA263_0==OUT||(LA263_0 >= POINTER && LA263_0 <= POINTER2)||LA263_0==RAISE||(LA263_0 >= READ && LA263_0 <= READONLY)||(LA263_0 >= REFERENCE && LA263_0 <= REGISTER)||(LA263_0 >= REMOVE && LA263_0 <= REPEAT)||LA263_0==SEMI||LA263_0==STATIC||(LA263_0 >= STORED && LA263_0 <= STRING)||(LA263_0 >= TRUE && LA263_0 <= TRY)||(LA263_0 >= TkHexNum && LA263_0 <= TkIntNum)||LA263_0==UNSAFE||(LA263_0 >= VARARGS && LA263_0 <= WRITEONLY)||LA263_0==198||LA263_0==200) ) {
						alt263=1;
					}
					else if ( (LA263_0==FINALLY) ) {
						int LA263_2 = input.LA(2);
						if ( (synpred392_Delphi()) ) {
							alt263=1;
						}
					}
					switch (alt263) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:599:39: statementList
							{
							pushFollow(FOLLOW_statementList_in_tryStatement16573);
							statementList804=statementList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList804.getTree());

							}
							break;

					}

					string_literal805=(Token)match(input,FINALLY,FOLLOW_FINALLY_in_tryStatement16577); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal805_tree = (Object)adaptor.create(string_literal805);
					adaptor.addChild(root_0, string_literal805_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:599:65: ( statementList )?
					int alt264=2;
					int LA264_0 = input.LA(1);
					if ( (LA264_0==ADD||LA264_0==ANSISTRING||LA264_0==ASM||(LA264_0 >= ASSIGN && LA264_0 <= AT2)||(LA264_0 >= BEGIN && LA264_0 <= CASE)||(LA264_0 >= CONTAINS && LA264_0 <= CONTINUE)||LA264_0==DEFAULT||LA264_0==DOT||(LA264_0 >= DQ && LA264_0 <= DW)||LA264_0==EXIT||LA264_0==EXPORT||LA264_0==FALSE||LA264_0==FINAL||LA264_0==FOR||LA264_0==GOTO||LA264_0==IF||LA264_0==IMPLEMENTS||(LA264_0 >= INDEX && LA264_0 <= INHERITED)||LA264_0==LBRACK||(LA264_0 >= LOCAL && LA264_0 <= MESSAGE)||LA264_0==NAME||LA264_0==OBJECT||LA264_0==OPERATOR||LA264_0==OUT||(LA264_0 >= POINTER && LA264_0 <= POINTER2)||LA264_0==RAISE||(LA264_0 >= READ && LA264_0 <= READONLY)||(LA264_0 >= REFERENCE && LA264_0 <= REGISTER)||(LA264_0 >= REMOVE && LA264_0 <= REPEAT)||LA264_0==SEMI||LA264_0==STATIC||(LA264_0 >= STORED && LA264_0 <= STRING)||(LA264_0 >= TRUE && LA264_0 <= TRY)||(LA264_0 >= TkHexNum && LA264_0 <= TkIntNum)||LA264_0==UNSAFE||(LA264_0 >= VARARGS && LA264_0 <= WRITEONLY)||LA264_0==198||LA264_0==200) ) {
						alt264=1;
					}
					else if ( (LA264_0==END) ) {
						int LA264_2 = input.LA(2);
						if ( (synpred393_Delphi()) ) {
							alt264=1;
						}
					}
					switch (alt264) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:599:66: statementList
							{
							pushFollow(FOLLOW_statementList_in_tryStatement16580);
							statementList806=statementList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList806.getTree());

							}
							break;

					}

					string_literal807=(Token)match(input,END,FOLLOW_END_in_tryStatement16584); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal807_tree = (Object)adaptor.create(string_literal807);
					adaptor.addChild(root_0, string_literal807_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 146, tryStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "tryStatement"


	public static class handlerList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "handlerList"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:601:1: handlerList : ( ( handler )* ( 'else' statementList )? | statementList );
	public final DelphiParser.handlerList_return handlerList() throws RecognitionException {
		DelphiParser.handlerList_return retval = new DelphiParser.handlerList_return();
		retval.start = input.LT(1);
		int handlerList_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal809=null;
		ParserRuleReturnScope handler808 =null;
		ParserRuleReturnScope statementList810 =null;
		ParserRuleReturnScope statementList811 =null;

		Object string_literal809_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 147) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:601:30: ( ( handler )* ( 'else' statementList )? | statementList )
			int alt268=2;
			switch ( input.LA(1) ) {
			case ELSE:
			case ON:
				{
				alt268=1;
				}
				break;
			case END:
				{
				int LA268_2 = input.LA(2);
				if ( (synpred396_Delphi()) ) {
					alt268=1;
				}
				else if ( (true) ) {
					alt268=2;
				}

				}
				break;
			case ADD:
			case ANSISTRING:
			case ASM:
			case ASSIGN:
			case AT:
			case AT2:
			case BEGIN:
			case BREAK:
			case CASE:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case DOT:
			case DQ:
			case DW:
			case EXIT:
			case EXPORT:
			case FALSE:
			case FINAL:
			case FOR:
			case GOTO:
			case IF:
			case IMPLEMENTS:
			case INDEX:
			case INHERITED:
			case LBRACK:
			case LOCAL:
			case LPAREN:
			case LT:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case POINTER:
			case POINTER2:
			case RAISE:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case REPEAT:
			case SEMI:
			case STATIC:
			case STORED:
			case STRICT:
			case STRING:
			case TRUE:
			case TRY:
			case TkHexNum:
			case TkIdentifier:
			case TkIntNum:
			case UNSAFE:
			case VARARGS:
			case VARIANT:
			case VIRTUAL:
			case WHILE:
			case WITH:
			case WRITE:
			case WRITEONLY:
			case 198:
			case 200:
				{
				alt268=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 268, 0, input);
				throw nvae;
			}
			switch (alt268) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:601:32: ( handler )* ( 'else' statementList )?
					{
					root_0 = (Object)adaptor.nil();


					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:601:32: ( handler )*
					loop266:
					while (true) {
						int alt266=2;
						int LA266_0 = input.LA(1);
						if ( (LA266_0==ON) ) {
							alt266=1;
						}

						switch (alt266) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:601:33: handler
							{
							pushFollow(FOLLOW_handler_in_handlerList16639);
							handler808=handler();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, handler808.getTree());

							}
							break;

						default :
							break loop266;
						}
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:601:43: ( 'else' statementList )?
					int alt267=2;
					int LA267_0 = input.LA(1);
					if ( (LA267_0==ELSE) ) {
						alt267=1;
					}
					switch (alt267) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:601:44: 'else' statementList
							{
							string_literal809=(Token)match(input,ELSE,FOLLOW_ELSE_in_handlerList16644); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal809_tree = (Object)adaptor.create(string_literal809);
							adaptor.addChild(root_0, string_literal809_tree);
							}

							pushFollow(FOLLOW_statementList_in_handlerList16646);
							statementList810=statementList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList810.getTree());

							}
							break;

					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:602:32: statementList
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_statementList_in_handlerList16681);
					statementList811=statementList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList811.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 147, handlerList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "handlerList"


	public static class handler_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "handler"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:604:1: handler : 'on' ( handlerIdent )? typeId 'do' handlerStatement ;
	public final DelphiParser.handler_return handler() throws RecognitionException {
		DelphiParser.handler_return retval = new DelphiParser.handler_return();
		retval.start = input.LT(1);
		int handler_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal812=null;
		Token string_literal815=null;
		ParserRuleReturnScope handlerIdent813 =null;
		ParserRuleReturnScope typeId814 =null;
		ParserRuleReturnScope handlerStatement816 =null;

		Object string_literal812_tree=null;
		Object string_literal815_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 148) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:604:30: ( 'on' ( handlerIdent )? typeId 'do' handlerStatement )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:604:32: 'on' ( handlerIdent )? typeId 'do' handlerStatement
			{
			root_0 = (Object)adaptor.nil();


			string_literal812=(Token)match(input,ON,FOLLOW_ON_in_handler16739); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal812_tree = (Object)adaptor.create(string_literal812);
			adaptor.addChild(root_0, string_literal812_tree);
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:604:37: ( handlerIdent )?
			int alt269=2;
			switch ( input.LA(1) ) {
				case TkIdentifier:
					{
					int LA269_1 = input.LA(2);
					if ( (LA269_1==COLON) ) {
						alt269=1;
					}
					}
					break;
				case 198:
					{
					int LA269_2 = input.LA(2);
					if ( (LA269_2==TkIdentifier) ) {
						int LA269_6 = input.LA(3);
						if ( (LA269_6==COLON) ) {
							alt269=1;
						}
					}
					else if ( ((LA269_2 >= ABSOLUTE && LA269_2 <= ASSEMBLY)||LA269_2==AT||LA269_2==AUTOMATED||(LA269_2 >= BEGIN && LA269_2 <= CLASS)||(LA269_2 >= CONST && LA269_2 <= CONTINUE)||(LA269_2 >= DEFAULT && LA269_2 <= DO)||(LA269_2 >= DOWNTO && LA269_2 <= DYNAMIC)||(LA269_2 >= ELSE && LA269_2 <= END)||(LA269_2 >= EXCEPT && LA269_2 <= FUNCTION)||LA269_2==GOTO||LA269_2==HELPER||(LA269_2 >= IF && LA269_2 <= LABEL)||(LA269_2 >= LIBRARY && LA269_2 <= LOCAL)||LA269_2==MESSAGE||(LA269_2 >= MOD && LA269_2 <= NOT)||(LA269_2 >= OBJECT && LA269_2 <= PLATFORM)||LA269_2==POINTER||(LA269_2 >= PRIVATE && LA269_2 <= PUBLISHED)||LA269_2==RAISE||(LA269_2 >= READ && LA269_2 <= RESOURCESTRING)||(LA269_2 >= SAFECALL && LA269_2 <= SEALED)||(LA269_2 >= SET && LA269_2 <= SHR)||(LA269_2 >= STATIC && LA269_2 <= TYPE)||(LA269_2 >= UNIT && LA269_2 <= USES)||(LA269_2 >= VAR && LA269_2 <= WRITEONLY)||LA269_2==XOR) ) {
						int LA269_7 = input.LA(3);
						if ( (LA269_7==COLON) ) {
							alt269=1;
						}
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DQ:
				case DW:
				case EXIT:
				case EXPORT:
				case FALSE:
				case FINAL:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STATIC:
				case STORED:
				case STRICT:
				case STRING:
				case TRUE:
				case UNSAFE:
				case VARARGS:
				case VARIANT:
				case VIRTUAL:
				case WRITE:
				case WRITEONLY:
					{
					int LA269_3 = input.LA(2);
					if ( (LA269_3==COLON) ) {
						alt269=1;
					}
					}
					break;
			}
			switch (alt269) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:604:38: handlerIdent
					{
					pushFollow(FOLLOW_handlerIdent_in_handler16742);
					handlerIdent813=handlerIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, handlerIdent813.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_typeId_in_handler16746);
			typeId814=typeId();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, typeId814.getTree());

			string_literal815=(Token)match(input,DO,FOLLOW_DO_in_handler16748); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal815_tree = (Object)adaptor.create(string_literal815);
			adaptor.addChild(root_0, string_literal815_tree);
			}

			pushFollow(FOLLOW_handlerStatement_in_handler16750);
			handlerStatement816=handlerStatement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, handlerStatement816.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 148, handler_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "handler"


	public static class handlerIdent_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "handlerIdent"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:606:1: handlerIdent : ident ':' ;
	public final DelphiParser.handlerIdent_return handlerIdent() throws RecognitionException {
		DelphiParser.handlerIdent_return retval = new DelphiParser.handlerIdent_return();
		retval.start = input.LT(1);
		int handlerIdent_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal818=null;
		ParserRuleReturnScope ident817 =null;

		Object char_literal818_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 149) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:606:30: ( ident ':' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:606:32: ident ':'
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_ident_in_handlerIdent16805);
			ident817=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident817.getTree());

			char_literal818=(Token)match(input,COLON,FOLLOW_COLON_in_handlerIdent16807); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal818_tree = (Object)adaptor.create(char_literal818);
			adaptor.addChild(root_0, char_literal818_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 149, handlerIdent_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "handlerIdent"


	public static class handlerStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "handlerStatement"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:608:1: handlerStatement : ( statement ( ';' )? | ';' );
	public final DelphiParser.handlerStatement_return handlerStatement() throws RecognitionException {
		DelphiParser.handlerStatement_return retval = new DelphiParser.handlerStatement_return();
		retval.start = input.LT(1);
		int handlerStatement_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal820=null;
		Token char_literal821=null;
		ParserRuleReturnScope statement819 =null;

		Object char_literal820_tree=null;
		Object char_literal821_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 150) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:608:30: ( statement ( ';' )? | ';' )
			int alt271=2;
			int LA271_0 = input.LA(1);
			if ( (LA271_0==EOF||LA271_0==ADD||LA271_0==ANSISTRING||LA271_0==ASM||(LA271_0 >= ASSIGN && LA271_0 <= AT2)||(LA271_0 >= BEGIN && LA271_0 <= CASE)||(LA271_0 >= CONTAINS && LA271_0 <= CONTINUE)||LA271_0==DEFAULT||LA271_0==DOT||(LA271_0 >= DQ && LA271_0 <= DW)||(LA271_0 >= ELSE && LA271_0 <= END)||LA271_0==EXIT||LA271_0==EXPORT||LA271_0==FALSE||LA271_0==FINAL||LA271_0==FOR||LA271_0==GOTO||LA271_0==IF||LA271_0==IMPLEMENTS||(LA271_0 >= INDEX && LA271_0 <= INHERITED)||LA271_0==LBRACK||(LA271_0 >= LOCAL && LA271_0 <= MESSAGE)||LA271_0==NAME||LA271_0==OBJECT||(LA271_0 >= ON && LA271_0 <= OPERATOR)||LA271_0==OUT||(LA271_0 >= POINTER && LA271_0 <= POINTER2)||LA271_0==RAISE||(LA271_0 >= READ && LA271_0 <= READONLY)||(LA271_0 >= REFERENCE && LA271_0 <= REGISTER)||(LA271_0 >= REMOVE && LA271_0 <= REPEAT)||LA271_0==STATIC||(LA271_0 >= STORED && LA271_0 <= STRING)||(LA271_0 >= TRUE && LA271_0 <= TRY)||(LA271_0 >= TkHexNum && LA271_0 <= TkIntNum)||LA271_0==UNSAFE||(LA271_0 >= VARARGS && LA271_0 <= WRITEONLY)||LA271_0==198||LA271_0==200) ) {
				alt271=1;
			}
			else if ( (LA271_0==SEMI) ) {
				int LA271_2 = input.LA(2);
				if ( (synpred399_Delphi()) ) {
					alt271=1;
				}
				else if ( (true) ) {
					alt271=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 271, 0, input);
				throw nvae;
			}

			switch (alt271) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:608:32: statement ( ';' )?
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_statement_in_handlerStatement16856);
					statement819=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statement819.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:608:42: ( ';' )?
					int alt270=2;
					int LA270_0 = input.LA(1);
					if ( (LA270_0==SEMI) ) {
						alt270=1;
					}
					switch (alt270) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:608:43: ';'
							{
							char_literal820=(Token)match(input,SEMI,FOLLOW_SEMI_in_handlerStatement16859); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal820_tree = (Object)adaptor.create(char_literal820);
							adaptor.addChild(root_0, char_literal820_tree);
							}

							}
							break;

					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:609:32: ';'
					{
					root_0 = (Object)adaptor.nil();


					char_literal821=(Token)match(input,SEMI,FOLLOW_SEMI_in_handlerStatement16894); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal821_tree = (Object)adaptor.create(char_literal821);
					adaptor.addChild(root_0, char_literal821_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 150, handlerStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "handlerStatement"


	public static class raiseStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "raiseStatement"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:611:1: raiseStatement : 'raise' ( designator )? ( AT designator )? ;
	public final DelphiParser.raiseStatement_return raiseStatement() throws RecognitionException {
		DelphiParser.raiseStatement_return retval = new DelphiParser.raiseStatement_return();
		retval.start = input.LT(1);
		int raiseStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal822=null;
		Token AT824=null;
		ParserRuleReturnScope designator823 =null;
		ParserRuleReturnScope designator825 =null;

		Object string_literal822_tree=null;
		Object AT824_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 151) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:611:30: ( 'raise' ( designator )? ( AT designator )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:611:32: 'raise' ( designator )? ( AT designator )?
			{
			root_0 = (Object)adaptor.nil();


			string_literal822=(Token)match(input,RAISE,FOLLOW_RAISE_in_raiseStatement16945); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal822_tree = (Object)adaptor.create(string_literal822);
			adaptor.addChild(root_0, string_literal822_tree);
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:611:40: ( designator )?
			int alt272=2;
			switch ( input.LA(1) ) {
				case INHERITED:
					{
					int LA272_1 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case TkIdentifier:
					{
					int LA272_2 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case 198:
					{
					int LA272_3 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case AT:
					{
					int LA272_4 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case POINTER2:
					{
					int LA272_5 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case 200:
					{
					int LA272_6 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case AT2:
					{
					int LA272_7 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case LT:
					{
					int LA272_8 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case LBRACK:
					{
					int LA272_9 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case LPAREN:
					{
					int LA272_10 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case TRUE:
					{
					int LA272_11 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case ELSE:
					{
					int LA272_12 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case EOF:
					{
					int LA272_13 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case SEMI:
					{
					int LA272_14 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case END:
					{
					int LA272_15 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case PROCEDURE:
					{
					int LA272_16 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case FUNCTION:
					{
					int LA272_17 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case DOT:
					{
					int LA272_18 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case 199:
					{
					int LA272_19 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case NOT:
					{
					int LA272_20 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case PLUS:
					{
					int LA272_21 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case MINUS:
					{
					int LA272_22 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case TkRealNum:
					{
					int LA272_23 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case TkHexNum:
				case TkIntNum:
					{
					int LA272_24 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case FALSE:
					{
					int LA272_25 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DQ:
				case DW:
				case EXIT:
				case EXPORT:
				case FINAL:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STATIC:
				case STORED:
				case STRICT:
				case STRING:
				case UNSAFE:
				case VARARGS:
				case VARIANT:
				case VIRTUAL:
				case WRITE:
				case WRITEONLY:
					{
					int LA272_26 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case NIL:
					{
					int LA272_27 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case ControlChar:
				case ControlString:
					{
					int LA272_28 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case QuotedString:
					{
					int LA272_29 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case AND:
				case AS:
				case DIV:
				case MOD:
				case OR:
				case SHL:
				case SHR:
				case SLASH:
				case STAR:
				case XOR:
					{
					int LA272_30 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case EQUAL:
					{
					int LA272_31 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case GE:
				case GT:
				case IN:
				case IS:
				case LE:
				case NOT_EQUAL:
					{
					int LA272_32 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case DOTDOT:
					{
					int LA272_33 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case COMMA:
					{
					int LA272_34 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case COLON:
					{
					int LA272_35 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case FINALIZATION:
					{
					int LA272_36 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case UNTIL:
					{
					int LA272_37 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case EXCEPT:
					{
					int LA272_38 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case FINALLY:
					{
					int LA272_39 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
				case ON:
					{
					int LA272_40 = input.LA(2);
					if ( (synpred400_Delphi()) ) {
						alt272=1;
					}
					}
					break;
			}
			switch (alt272) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:611:41: designator
					{
					pushFollow(FOLLOW_designator_in_raiseStatement16948);
					designator823=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator823.getTree());

					}
					break;

			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:611:54: ( AT designator )?
			int alt273=2;
			int LA273_0 = input.LA(1);
			if ( (LA273_0==AT) ) {
				int LA273_1 = input.LA(2);
				if ( (synpred401_Delphi()) ) {
					alt273=1;
				}
			}
			switch (alt273) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:611:55: AT designator
					{
					AT824=(Token)match(input,AT,FOLLOW_AT_in_raiseStatement16953); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					AT824_tree = (Object)adaptor.create(AT824);
					adaptor.addChild(root_0, AT824_tree);
					}

					pushFollow(FOLLOW_designator_in_raiseStatement16955);
					designator825=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator825.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 151, raiseStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "raiseStatement"


	public static class assemblerStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "assemblerStatement"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:616:1: assemblerStatement : 'asm' (~ ( 'end' ) )* 'end' ;
	public final DelphiParser.assemblerStatement_return assemblerStatement() throws RecognitionException {
		DelphiParser.assemblerStatement_return retval = new DelphiParser.assemblerStatement_return();
		retval.start = input.LT(1);
		int assemblerStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal826=null;
		Token set827=null;
		Token string_literal828=null;

		Object string_literal826_tree=null;
		Object set827_tree=null;
		Object string_literal828_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:616:30: ( 'asm' (~ ( 'end' ) )* 'end' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:616:32: 'asm' (~ ( 'end' ) )* 'end'
			{
			root_0 = (Object)adaptor.nil();


			string_literal826=(Token)match(input,ASM,FOLLOW_ASM_in_assemblerStatement17008); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal826_tree = (Object)adaptor.create(string_literal826);
			adaptor.addChild(root_0, string_literal826_tree);
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:616:38: (~ ( 'end' ) )*
			loop274:
			while (true) {
				int alt274=2;
				int LA274_0 = input.LA(1);
				if ( ((LA274_0 >= ABSOLUTE && LA274_0 <= ELSE)||(LA274_0 >= EQUAL && LA274_0 <= 200)) ) {
					alt274=1;
				}

				switch (alt274) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
					{
					set827=input.LT(1);
					if ( (input.LA(1) >= ABSOLUTE && input.LA(1) <= ELSE)||(input.LA(1) >= EQUAL && input.LA(1) <= 200) ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set827));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

				default :
					break loop274;
				}
			}

			string_literal828=(Token)match(input,END,FOLLOW_END_in_assemblerStatement17016); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal828_tree = (Object)adaptor.create(string_literal828);
			adaptor.addChild(root_0, string_literal828_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 152, assemblerStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "assemblerStatement"


	public static class methodDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodDirective"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:621:1: methodDirective : ( reintroduceDirective | overloadDirective | bindingDirective | abstractDirective | inlineDirective | callConvention | hintingDirective ';' | oldCallConventionDirective | dispIDDirective | externalDirective );
	public final DelphiParser.methodDirective_return methodDirective() throws RecognitionException {
		DelphiParser.methodDirective_return retval = new DelphiParser.methodDirective_return();
		retval.start = input.LT(1);
		int methodDirective_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal836=null;
		ParserRuleReturnScope reintroduceDirective829 =null;
		ParserRuleReturnScope overloadDirective830 =null;
		ParserRuleReturnScope bindingDirective831 =null;
		ParserRuleReturnScope abstractDirective832 =null;
		ParserRuleReturnScope inlineDirective833 =null;
		ParserRuleReturnScope callConvention834 =null;
		ParserRuleReturnScope hintingDirective835 =null;
		ParserRuleReturnScope oldCallConventionDirective837 =null;
		ParserRuleReturnScope dispIDDirective838 =null;
		ParserRuleReturnScope externalDirective839 =null;

		Object char_literal836_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 153) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:621:30: ( reintroduceDirective | overloadDirective | bindingDirective | abstractDirective | inlineDirective | callConvention | hintingDirective ';' | oldCallConventionDirective | dispIDDirective | externalDirective )
			int alt275=10;
			switch ( input.LA(1) ) {
			case REINTRODUCE:
				{
				alt275=1;
				}
				break;
			case OVERLOAD:
				{
				alt275=2;
				}
				break;
			case DYNAMIC:
			case MESSAGE:
			case OVERRIDE:
			case STATIC:
			case VIRTUAL:
				{
				alt275=3;
				}
				break;
			case ABSTRACT:
			case FINAL:
				{
				alt275=4;
				}
				break;
			case ASSEMBLER:
			case INLINE:
				{
				alt275=5;
				}
				break;
			case CDECL:
			case EXPORT:
			case PASCAL:
			case REGISTER:
			case SAFECALL:
			case STDCALL:
				{
				alt275=6;
				}
				break;
			case DEPRECATED:
			case EXPERIMENTAL:
			case LIBRARY:
			case PLATFORM:
				{
				alt275=7;
				}
				break;
			case FAR:
			case LOCAL:
			case NEAR:
				{
				alt275=8;
				}
				break;
			case DISPID:
				{
				alt275=9;
				}
				break;
			case EXTERNAL:
			case VARARGS:
				{
				alt275=10;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 275, 0, input);
				throw nvae;
			}
			switch (alt275) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:621:32: reintroduceDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_reintroduceDirective_in_methodDirective17089);
					reintroduceDirective829=reintroduceDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, reintroduceDirective829.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:622:32: overloadDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_overloadDirective_in_methodDirective17131);
					overloadDirective830=overloadDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, overloadDirective830.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:623:32: bindingDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_bindingDirective_in_methodDirective17176);
					bindingDirective831=bindingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bindingDirective831.getTree());

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:624:32: abstractDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_abstractDirective_in_methodDirective17222);
					abstractDirective832=abstractDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, abstractDirective832.getTree());

					}
					break;
				case 5 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:625:32: inlineDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_inlineDirective_in_methodDirective17267);
					inlineDirective833=inlineDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineDirective833.getTree());

					}
					break;
				case 6 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:626:32: callConvention
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_callConvention_in_methodDirective17314);
					callConvention834=callConvention();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, callConvention834.getTree());

					}
					break;
				case 7 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:627:32: hintingDirective ';'
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_hintingDirective_in_methodDirective17362);
					hintingDirective835=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, hintingDirective835.getTree());

					char_literal836=(Token)match(input,SEMI,FOLLOW_SEMI_in_methodDirective17364); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal836_tree = (Object)adaptor.create(char_literal836);
					adaptor.addChild(root_0, char_literal836_tree);
					}

					}
					break;
				case 8 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:628:32: oldCallConventionDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_oldCallConventionDirective_in_methodDirective17406);
					oldCallConventionDirective837=oldCallConventionDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, oldCallConventionDirective837.getTree());

					}
					break;
				case 9 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:629:32: dispIDDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_dispIDDirective_in_methodDirective17442);
					dispIDDirective838=dispIDDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dispIDDirective838.getTree());

					}
					break;
				case 10 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:630:32: externalDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_externalDirective_in_methodDirective17475);
					externalDirective839=externalDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, externalDirective839.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 153, methodDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodDirective"


	public static class functionDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "functionDirective"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:632:1: functionDirective : ( overloadDirective | inlineDirective | callConvention | oldCallConventionDirective | hintingDirective ';' | ( callConventionNoSemi )? externalDirective | externalDirective | 'unsafe' ';' );
	public final DelphiParser.functionDirective_return functionDirective() throws RecognitionException {
		DelphiParser.functionDirective_return retval = new DelphiParser.functionDirective_return();
		retval.start = input.LT(1);
		int functionDirective_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal845=null;
		Token string_literal849=null;
		Token char_literal850=null;
		ParserRuleReturnScope overloadDirective840 =null;
		ParserRuleReturnScope inlineDirective841 =null;
		ParserRuleReturnScope callConvention842 =null;
		ParserRuleReturnScope oldCallConventionDirective843 =null;
		ParserRuleReturnScope hintingDirective844 =null;
		ParserRuleReturnScope callConventionNoSemi846 =null;
		ParserRuleReturnScope externalDirective847 =null;
		ParserRuleReturnScope externalDirective848 =null;

		Object char_literal845_tree=null;
		Object string_literal849_tree=null;
		Object char_literal850_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:632:30: ( overloadDirective | inlineDirective | callConvention | oldCallConventionDirective | hintingDirective ';' | ( callConventionNoSemi )? externalDirective | externalDirective | 'unsafe' ';' )
			int alt277=8;
			switch ( input.LA(1) ) {
			case OVERLOAD:
				{
				alt277=1;
				}
				break;
			case ASSEMBLER:
			case INLINE:
				{
				alt277=2;
				}
				break;
			case CDECL:
				{
				int LA277_4 = input.LA(2);
				if ( (synpred415_Delphi()) ) {
					alt277=3;
				}
				else if ( (synpred419_Delphi()) ) {
					alt277=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 277, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PASCAL:
				{
				int LA277_5 = input.LA(2);
				if ( (synpred415_Delphi()) ) {
					alt277=3;
				}
				else if ( (synpred419_Delphi()) ) {
					alt277=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 277, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case REGISTER:
				{
				int LA277_6 = input.LA(2);
				if ( (synpred415_Delphi()) ) {
					alt277=3;
				}
				else if ( (synpred419_Delphi()) ) {
					alt277=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 277, 6, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SAFECALL:
				{
				int LA277_7 = input.LA(2);
				if ( (synpred415_Delphi()) ) {
					alt277=3;
				}
				else if ( (synpred419_Delphi()) ) {
					alt277=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 277, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case STDCALL:
				{
				int LA277_8 = input.LA(2);
				if ( (synpred415_Delphi()) ) {
					alt277=3;
				}
				else if ( (synpred419_Delphi()) ) {
					alt277=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 277, 8, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EXPORT:
				{
				int LA277_9 = input.LA(2);
				if ( (synpred415_Delphi()) ) {
					alt277=3;
				}
				else if ( (synpred419_Delphi()) ) {
					alt277=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 277, 9, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case FAR:
			case LOCAL:
			case NEAR:
				{
				alt277=4;
				}
				break;
			case DEPRECATED:
			case EXPERIMENTAL:
			case LIBRARY:
			case PLATFORM:
				{
				alt277=5;
				}
				break;
			case VARARGS:
				{
				int LA277_17 = input.LA(2);
				if ( (synpred419_Delphi()) ) {
					alt277=6;
				}
				else if ( (synpred420_Delphi()) ) {
					alt277=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 277, 17, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EXTERNAL:
				{
				int LA277_18 = input.LA(2);
				if ( (synpred419_Delphi()) ) {
					alt277=6;
				}
				else if ( (synpred420_Delphi()) ) {
					alt277=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 277, 18, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case UNSAFE:
				{
				alt277=8;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 277, 0, input);
				throw nvae;
			}
			switch (alt277) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:632:32: overloadDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_overloadDirective_in_functionDirective17523);
					overloadDirective840=overloadDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, overloadDirective840.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:633:32: inlineDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_inlineDirective_in_functionDirective17566);
					inlineDirective841=inlineDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineDirective841.getTree());

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:634:32: callConvention
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_callConvention_in_functionDirective17611);
					callConvention842=callConvention();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, callConvention842.getTree());

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:635:32: oldCallConventionDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_oldCallConventionDirective_in_functionDirective17657);
					oldCallConventionDirective843=oldCallConventionDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, oldCallConventionDirective843.getTree());

					}
					break;
				case 5 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:636:32: hintingDirective ';'
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_hintingDirective_in_functionDirective17691);
					hintingDirective844=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, hintingDirective844.getTree());

					char_literal845=(Token)match(input,SEMI,FOLLOW_SEMI_in_functionDirective17693); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal845_tree = (Object)adaptor.create(char_literal845);
					adaptor.addChild(root_0, char_literal845_tree);
					}

					}
					break;
				case 6 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:637:32: ( callConventionNoSemi )? externalDirective
					{
					root_0 = (Object)adaptor.nil();


					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:637:32: ( callConventionNoSemi )?
					int alt276=2;
					int LA276_0 = input.LA(1);
					if ( (LA276_0==CDECL||LA276_0==EXPORT||LA276_0==PASCAL||LA276_0==REGISTER||LA276_0==SAFECALL||LA276_0==STDCALL) ) {
						alt276=1;
					}
					switch (alt276) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:637:33: callConventionNoSemi
							{
							pushFollow(FOLLOW_callConventionNoSemi_in_functionDirective17734);
							callConventionNoSemi846=callConventionNoSemi();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, callConventionNoSemi846.getTree());

							}
							break;

					}

					pushFollow(FOLLOW_externalDirective_in_functionDirective17738);
					externalDirective847=externalDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, externalDirective847.getTree());

					}
					break;
				case 7 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:638:32: externalDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_externalDirective_in_functionDirective17781);
					externalDirective848=externalDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, externalDirective848.getTree());

					}
					break;
				case 8 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:639:32: 'unsafe' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal849=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_functionDirective17814); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal849_tree = (Object)adaptor.create(string_literal849);
					adaptor.addChild(root_0, string_literal849_tree);
					}

					char_literal850=(Token)match(input,SEMI,FOLLOW_SEMI_in_functionDirective17816); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal850_tree = (Object)adaptor.create(char_literal850);
					adaptor.addChild(root_0, char_literal850_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 154, functionDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "functionDirective"


	public static class reintroduceDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "reintroduceDirective"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:641:1: reintroduceDirective : 'reintroduce' ';' ;
	public final DelphiParser.reintroduceDirective_return reintroduceDirective() throws RecognitionException {
		DelphiParser.reintroduceDirective_return retval = new DelphiParser.reintroduceDirective_return();
		retval.start = input.LT(1);
		int reintroduceDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal851=null;
		Token char_literal852=null;

		Object string_literal851_tree=null;
		Object char_literal852_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 155) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:641:30: ( 'reintroduce' ';' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:641:32: 'reintroduce' ';'
			{
			root_0 = (Object)adaptor.nil();


			string_literal851=(Token)match(input,REINTRODUCE,FOLLOW_REINTRODUCE_in_reintroduceDirective17876); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal851_tree = (Object)adaptor.create(string_literal851);
			adaptor.addChild(root_0, string_literal851_tree);
			}

			char_literal852=(Token)match(input,SEMI,FOLLOW_SEMI_in_reintroduceDirective17878); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal852_tree = (Object)adaptor.create(char_literal852);
			adaptor.addChild(root_0, char_literal852_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 155, reintroduceDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "reintroduceDirective"


	public static class overloadDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "overloadDirective"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:643:1: overloadDirective : 'overload' ( ';' )? ;
	public final DelphiParser.overloadDirective_return overloadDirective() throws RecognitionException {
		DelphiParser.overloadDirective_return retval = new DelphiParser.overloadDirective_return();
		retval.start = input.LT(1);
		int overloadDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal853=null;
		Token char_literal854=null;

		Object string_literal853_tree=null;
		Object char_literal854_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 156) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:643:30: ( 'overload' ( ';' )? )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:643:32: 'overload' ( ';' )?
			{
			root_0 = (Object)adaptor.nil();


			string_literal853=(Token)match(input,OVERLOAD,FOLLOW_OVERLOAD_in_overloadDirective17926); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal853_tree = (Object)adaptor.create(string_literal853);
			adaptor.addChild(root_0, string_literal853_tree);
			}

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:643:43: ( ';' )?
			int alt278=2;
			int LA278_0 = input.LA(1);
			if ( (LA278_0==SEMI) ) {
				int LA278_1 = input.LA(2);
				if ( (synpred421_Delphi()) ) {
					alt278=1;
				}
			}
			switch (alt278) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:643:44: ';'
					{
					char_literal854=(Token)match(input,SEMI,FOLLOW_SEMI_in_overloadDirective17929); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal854_tree = (Object)adaptor.create(char_literal854);
					adaptor.addChild(root_0, char_literal854_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 156, overloadDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "overloadDirective"


	public static class bindingDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "bindingDirective"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:645:1: bindingDirective : ( 'message' expression ';' | 'static' ';' | 'dynamic' ';' | 'override' ';' | 'virtual' ';' );
	public final DelphiParser.bindingDirective_return bindingDirective() throws RecognitionException {
		DelphiParser.bindingDirective_return retval = new DelphiParser.bindingDirective_return();
		retval.start = input.LT(1);
		int bindingDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal855=null;
		Token char_literal857=null;
		Token string_literal858=null;
		Token char_literal859=null;
		Token string_literal860=null;
		Token char_literal861=null;
		Token string_literal862=null;
		Token char_literal863=null;
		Token string_literal864=null;
		Token char_literal865=null;
		ParserRuleReturnScope expression856 =null;

		Object string_literal855_tree=null;
		Object char_literal857_tree=null;
		Object string_literal858_tree=null;
		Object char_literal859_tree=null;
		Object string_literal860_tree=null;
		Object char_literal861_tree=null;
		Object string_literal862_tree=null;
		Object char_literal863_tree=null;
		Object string_literal864_tree=null;
		Object char_literal865_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 157) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:645:30: ( 'message' expression ';' | 'static' ';' | 'dynamic' ';' | 'override' ';' | 'virtual' ';' )
			int alt279=5;
			switch ( input.LA(1) ) {
			case MESSAGE:
				{
				alt279=1;
				}
				break;
			case STATIC:
				{
				alt279=2;
				}
				break;
			case DYNAMIC:
				{
				alt279=3;
				}
				break;
			case OVERRIDE:
				{
				alt279=4;
				}
				break;
			case VIRTUAL:
				{
				alt279=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 279, 0, input);
				throw nvae;
			}
			switch (alt279) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:645:32: 'message' expression ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal855=(Token)match(input,MESSAGE,FOLLOW_MESSAGE_in_bindingDirective17984); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal855_tree = (Object)adaptor.create(string_literal855);
					adaptor.addChild(root_0, string_literal855_tree);
					}

					pushFollow(FOLLOW_expression_in_bindingDirective17986);
					expression856=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression856.getTree());

					char_literal857=(Token)match(input,SEMI,FOLLOW_SEMI_in_bindingDirective17988); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal857_tree = (Object)adaptor.create(char_literal857);
					adaptor.addChild(root_0, char_literal857_tree);
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:646:32: 'static' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal858=(Token)match(input,STATIC,FOLLOW_STATIC_in_bindingDirective18021); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal858_tree = (Object)adaptor.create(string_literal858);
					adaptor.addChild(root_0, string_literal858_tree);
					}

					char_literal859=(Token)match(input,SEMI,FOLLOW_SEMI_in_bindingDirective18023); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal859_tree = (Object)adaptor.create(char_literal859);
					adaptor.addChild(root_0, char_literal859_tree);
					}

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:647:32: 'dynamic' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal860=(Token)match(input,DYNAMIC,FOLLOW_DYNAMIC_in_bindingDirective18056); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal860_tree = (Object)adaptor.create(string_literal860);
					adaptor.addChild(root_0, string_literal860_tree);
					}

					char_literal861=(Token)match(input,SEMI,FOLLOW_SEMI_in_bindingDirective18058); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal861_tree = (Object)adaptor.create(char_literal861);
					adaptor.addChild(root_0, char_literal861_tree);
					}

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:648:32: 'override' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal862=(Token)match(input,OVERRIDE,FOLLOW_OVERRIDE_in_bindingDirective18091); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal862_tree = (Object)adaptor.create(string_literal862);
					adaptor.addChild(root_0, string_literal862_tree);
					}

					char_literal863=(Token)match(input,SEMI,FOLLOW_SEMI_in_bindingDirective18093); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal863_tree = (Object)adaptor.create(char_literal863);
					adaptor.addChild(root_0, char_literal863_tree);
					}

					}
					break;
				case 5 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:649:32: 'virtual' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal864=(Token)match(input,VIRTUAL,FOLLOW_VIRTUAL_in_bindingDirective18126); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal864_tree = (Object)adaptor.create(string_literal864);
					adaptor.addChild(root_0, string_literal864_tree);
					}

					char_literal865=(Token)match(input,SEMI,FOLLOW_SEMI_in_bindingDirective18128); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal865_tree = (Object)adaptor.create(char_literal865);
					adaptor.addChild(root_0, char_literal865_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 157, bindingDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "bindingDirective"


	public static class abstractDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "abstractDirective"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:651:1: abstractDirective : ( 'abstract' ';' | 'final' ';' );
	public final DelphiParser.abstractDirective_return abstractDirective() throws RecognitionException {
		DelphiParser.abstractDirective_return retval = new DelphiParser.abstractDirective_return();
		retval.start = input.LT(1);
		int abstractDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal866=null;
		Token char_literal867=null;
		Token string_literal868=null;
		Token char_literal869=null;

		Object string_literal866_tree=null;
		Object char_literal867_tree=null;
		Object string_literal868_tree=null;
		Object char_literal869_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 158) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:651:30: ( 'abstract' ';' | 'final' ';' )
			int alt280=2;
			int LA280_0 = input.LA(1);
			if ( (LA280_0==ABSTRACT) ) {
				alt280=1;
			}
			else if ( (LA280_0==FINAL) ) {
				alt280=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 280, 0, input);
				throw nvae;
			}

			switch (alt280) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:651:32: 'abstract' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal866=(Token)match(input,ABSTRACT,FOLLOW_ABSTRACT_in_abstractDirective18176); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal866_tree = (Object)adaptor.create(string_literal866);
					adaptor.addChild(root_0, string_literal866_tree);
					}

					char_literal867=(Token)match(input,SEMI,FOLLOW_SEMI_in_abstractDirective18178); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal867_tree = (Object)adaptor.create(char_literal867);
					adaptor.addChild(root_0, char_literal867_tree);
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:652:32: 'final' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal868=(Token)match(input,FINAL,FOLLOW_FINAL_in_abstractDirective18211); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal868_tree = (Object)adaptor.create(string_literal868);
					adaptor.addChild(root_0, string_literal868_tree);
					}

					char_literal869=(Token)match(input,SEMI,FOLLOW_SEMI_in_abstractDirective18213); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal869_tree = (Object)adaptor.create(char_literal869);
					adaptor.addChild(root_0, char_literal869_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 158, abstractDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "abstractDirective"


	public static class inlineDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "inlineDirective"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:654:1: inlineDirective : ( 'inline' ';' | 'assembler' ';' );
	public final DelphiParser.inlineDirective_return inlineDirective() throws RecognitionException {
		DelphiParser.inlineDirective_return retval = new DelphiParser.inlineDirective_return();
		retval.start = input.LT(1);
		int inlineDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal870=null;
		Token char_literal871=null;
		Token string_literal872=null;
		Token char_literal873=null;

		Object string_literal870_tree=null;
		Object char_literal871_tree=null;
		Object string_literal872_tree=null;
		Object char_literal873_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 159) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:654:30: ( 'inline' ';' | 'assembler' ';' )
			int alt281=2;
			int LA281_0 = input.LA(1);
			if ( (LA281_0==INLINE) ) {
				alt281=1;
			}
			else if ( (LA281_0==ASSEMBLER) ) {
				alt281=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 281, 0, input);
				throw nvae;
			}

			switch (alt281) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:654:32: 'inline' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal870=(Token)match(input,INLINE,FOLLOW_INLINE_in_inlineDirective18263); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal870_tree = (Object)adaptor.create(string_literal870);
					adaptor.addChild(root_0, string_literal870_tree);
					}

					char_literal871=(Token)match(input,SEMI,FOLLOW_SEMI_in_inlineDirective18265); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal871_tree = (Object)adaptor.create(char_literal871);
					adaptor.addChild(root_0, char_literal871_tree);
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:655:32: 'assembler' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal872=(Token)match(input,ASSEMBLER,FOLLOW_ASSEMBLER_in_inlineDirective18298); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal872_tree = (Object)adaptor.create(string_literal872);
					adaptor.addChild(root_0, string_literal872_tree);
					}

					char_literal873=(Token)match(input,SEMI,FOLLOW_SEMI_in_inlineDirective18300); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal873_tree = (Object)adaptor.create(char_literal873);
					adaptor.addChild(root_0, char_literal873_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 159, inlineDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "inlineDirective"


	public static class callConvention_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "callConvention"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:657:1: callConvention : ( 'cdecl' ';' | 'pascal' ';' | 'register' ';' | 'safecall' ';' | 'stdcall' ';' | 'export' ';' );
	public final DelphiParser.callConvention_return callConvention() throws RecognitionException {
		DelphiParser.callConvention_return retval = new DelphiParser.callConvention_return();
		retval.start = input.LT(1);
		int callConvention_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal874=null;
		Token char_literal875=null;
		Token string_literal876=null;
		Token char_literal877=null;
		Token string_literal878=null;
		Token char_literal879=null;
		Token string_literal880=null;
		Token char_literal881=null;
		Token string_literal882=null;
		Token char_literal883=null;
		Token string_literal884=null;
		Token char_literal885=null;

		Object string_literal874_tree=null;
		Object char_literal875_tree=null;
		Object string_literal876_tree=null;
		Object char_literal877_tree=null;
		Object string_literal878_tree=null;
		Object char_literal879_tree=null;
		Object string_literal880_tree=null;
		Object char_literal881_tree=null;
		Object string_literal882_tree=null;
		Object char_literal883_tree=null;
		Object string_literal884_tree=null;
		Object char_literal885_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 160) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:657:30: ( 'cdecl' ';' | 'pascal' ';' | 'register' ';' | 'safecall' ';' | 'stdcall' ';' | 'export' ';' )
			int alt282=6;
			switch ( input.LA(1) ) {
			case CDECL:
				{
				alt282=1;
				}
				break;
			case PASCAL:
				{
				alt282=2;
				}
				break;
			case REGISTER:
				{
				alt282=3;
				}
				break;
			case SAFECALL:
				{
				alt282=4;
				}
				break;
			case STDCALL:
				{
				alt282=5;
				}
				break;
			case EXPORT:
				{
				alt282=6;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 282, 0, input);
				throw nvae;
			}
			switch (alt282) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:657:32: 'cdecl' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal874=(Token)match(input,CDECL,FOLLOW_CDECL_in_callConvention18352); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal874_tree = (Object)adaptor.create(string_literal874);
					adaptor.addChild(root_0, string_literal874_tree);
					}

					char_literal875=(Token)match(input,SEMI,FOLLOW_SEMI_in_callConvention18354); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal875_tree = (Object)adaptor.create(char_literal875);
					adaptor.addChild(root_0, char_literal875_tree);
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:658:32: 'pascal' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal876=(Token)match(input,PASCAL,FOLLOW_PASCAL_in_callConvention18391); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal876_tree = (Object)adaptor.create(string_literal876);
					adaptor.addChild(root_0, string_literal876_tree);
					}

					char_literal877=(Token)match(input,SEMI,FOLLOW_SEMI_in_callConvention18393); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal877_tree = (Object)adaptor.create(char_literal877);
					adaptor.addChild(root_0, char_literal877_tree);
					}

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:659:32: 'register' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal878=(Token)match(input,REGISTER,FOLLOW_REGISTER_in_callConvention18429); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal878_tree = (Object)adaptor.create(string_literal878);
					adaptor.addChild(root_0, string_literal878_tree);
					}

					char_literal879=(Token)match(input,SEMI,FOLLOW_SEMI_in_callConvention18431); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal879_tree = (Object)adaptor.create(char_literal879);
					adaptor.addChild(root_0, char_literal879_tree);
					}

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:660:32: 'safecall' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal880=(Token)match(input,SAFECALL,FOLLOW_SAFECALL_in_callConvention18465); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal880_tree = (Object)adaptor.create(string_literal880);
					adaptor.addChild(root_0, string_literal880_tree);
					}

					char_literal881=(Token)match(input,SEMI,FOLLOW_SEMI_in_callConvention18467); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal881_tree = (Object)adaptor.create(char_literal881);
					adaptor.addChild(root_0, char_literal881_tree);
					}

					}
					break;
				case 5 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:661:32: 'stdcall' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal882=(Token)match(input,STDCALL,FOLLOW_STDCALL_in_callConvention18501); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal882_tree = (Object)adaptor.create(string_literal882);
					adaptor.addChild(root_0, string_literal882_tree);
					}

					char_literal883=(Token)match(input,SEMI,FOLLOW_SEMI_in_callConvention18503); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal883_tree = (Object)adaptor.create(char_literal883);
					adaptor.addChild(root_0, char_literal883_tree);
					}

					}
					break;
				case 6 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:662:32: 'export' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal884=(Token)match(input,EXPORT,FOLLOW_EXPORT_in_callConvention18538); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal884_tree = (Object)adaptor.create(string_literal884);
					adaptor.addChild(root_0, string_literal884_tree);
					}

					char_literal885=(Token)match(input,SEMI,FOLLOW_SEMI_in_callConvention18540); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal885_tree = (Object)adaptor.create(char_literal885);
					adaptor.addChild(root_0, char_literal885_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 160, callConvention_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "callConvention"


	public static class callConventionNoSemi_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "callConventionNoSemi"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:664:1: callConventionNoSemi : ( 'cdecl' | 'pascal' | 'register' | 'safecall' | 'stdcall' | 'export' );
	public final DelphiParser.callConventionNoSemi_return callConventionNoSemi() throws RecognitionException {
		DelphiParser.callConventionNoSemi_return retval = new DelphiParser.callConventionNoSemi_return();
		retval.start = input.LT(1);
		int callConventionNoSemi_StartIndex = input.index();

		Object root_0 = null;

		Token set886=null;

		Object set886_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 161) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:664:30: ( 'cdecl' | 'pascal' | 'register' | 'safecall' | 'stdcall' | 'export' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set886=input.LT(1);
			if ( input.LA(1)==CDECL||input.LA(1)==EXPORT||input.LA(1)==PASCAL||input.LA(1)==REGISTER||input.LA(1)==SAFECALL||input.LA(1)==STDCALL ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set886));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 161, callConventionNoSemi_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "callConventionNoSemi"


	public static class oldCallConventionDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "oldCallConventionDirective"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:671:1: oldCallConventionDirective : ( 'far' ';' | 'local' ';' | 'near' ';' );
	public final DelphiParser.oldCallConventionDirective_return oldCallConventionDirective() throws RecognitionException {
		DelphiParser.oldCallConventionDirective_return retval = new DelphiParser.oldCallConventionDirective_return();
		retval.start = input.LT(1);
		int oldCallConventionDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal887=null;
		Token char_literal888=null;
		Token string_literal889=null;
		Token char_literal890=null;
		Token string_literal891=null;
		Token char_literal892=null;

		Object string_literal887_tree=null;
		Object char_literal888_tree=null;
		Object string_literal889_tree=null;
		Object char_literal890_tree=null;
		Object string_literal891_tree=null;
		Object char_literal892_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 162) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:671:30: ( 'far' ';' | 'local' ';' | 'near' ';' )
			int alt283=3;
			switch ( input.LA(1) ) {
			case FAR:
				{
				alt283=1;
				}
				break;
			case LOCAL:
				{
				alt283=2;
				}
				break;
			case NEAR:
				{
				alt283=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 283, 0, input);
				throw nvae;
			}
			switch (alt283) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:671:32: 'far' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal887=(Token)match(input,FAR,FOLLOW_FAR_in_oldCallConventionDirective18806); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal887_tree = (Object)adaptor.create(string_literal887);
					adaptor.addChild(root_0, string_literal887_tree);
					}

					char_literal888=(Token)match(input,SEMI,FOLLOW_SEMI_in_oldCallConventionDirective18808); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal888_tree = (Object)adaptor.create(char_literal888);
					adaptor.addChild(root_0, char_literal888_tree);
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:672:32: 'local' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal889=(Token)match(input,LOCAL,FOLLOW_LOCAL_in_oldCallConventionDirective18847); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal889_tree = (Object)adaptor.create(string_literal889);
					adaptor.addChild(root_0, string_literal889_tree);
					}

					char_literal890=(Token)match(input,SEMI,FOLLOW_SEMI_in_oldCallConventionDirective18849); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal890_tree = (Object)adaptor.create(char_literal890);
					adaptor.addChild(root_0, char_literal890_tree);
					}

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:673:32: 'near' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal891=(Token)match(input,NEAR,FOLLOW_NEAR_in_oldCallConventionDirective18886); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal891_tree = (Object)adaptor.create(string_literal891);
					adaptor.addChild(root_0, string_literal891_tree);
					}

					char_literal892=(Token)match(input,SEMI,FOLLOW_SEMI_in_oldCallConventionDirective18888); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal892_tree = (Object)adaptor.create(char_literal892);
					adaptor.addChild(root_0, char_literal892_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 162, oldCallConventionDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "oldCallConventionDirective"


	public static class hintingDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "hintingDirective"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:675:1: hintingDirective : ( 'deprecated' ( stringFactor )? | 'experimental' | 'platform' | 'library' );
	public final DelphiParser.hintingDirective_return hintingDirective() throws RecognitionException {
		DelphiParser.hintingDirective_return retval = new DelphiParser.hintingDirective_return();
		retval.start = input.LT(1);
		int hintingDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal893=null;
		Token string_literal895=null;
		Token string_literal896=null;
		Token string_literal897=null;
		ParserRuleReturnScope stringFactor894 =null;

		Object string_literal893_tree=null;
		Object string_literal895_tree=null;
		Object string_literal896_tree=null;
		Object string_literal897_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 163) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:675:30: ( 'deprecated' ( stringFactor )? | 'experimental' | 'platform' | 'library' )
			int alt285=4;
			switch ( input.LA(1) ) {
			case DEPRECATED:
				{
				alt285=1;
				}
				break;
			case EXPERIMENTAL:
				{
				alt285=2;
				}
				break;
			case PLATFORM:
				{
				alt285=3;
				}
				break;
			case LIBRARY:
				{
				alt285=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 285, 0, input);
				throw nvae;
			}
			switch (alt285) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:675:32: 'deprecated' ( stringFactor )?
					{
					root_0 = (Object)adaptor.nil();


					string_literal893=(Token)match(input,DEPRECATED,FOLLOW_DEPRECATED_in_hintingDirective18942); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal893_tree = (Object)adaptor.create(string_literal893);
					adaptor.addChild(root_0, string_literal893_tree);
					}

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:675:45: ( stringFactor )?
					int alt284=2;
					int LA284_0 = input.LA(1);
					if ( ((LA284_0 >= ControlChar && LA284_0 <= ControlString)||LA284_0==QuotedString) ) {
						alt284=1;
					}
					switch (alt284) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:675:46: stringFactor
							{
							pushFollow(FOLLOW_stringFactor_in_hintingDirective18945);
							stringFactor894=stringFactor();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, stringFactor894.getTree());

							}
							break;

					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:676:32: 'experimental'
					{
					root_0 = (Object)adaptor.nil();


					string_literal895=(Token)match(input,EXPERIMENTAL,FOLLOW_EXPERIMENTAL_in_hintingDirective18980); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal895_tree = (Object)adaptor.create(string_literal895);
					adaptor.addChild(root_0, string_literal895_tree);
					}

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:677:32: 'platform'
					{
					root_0 = (Object)adaptor.nil();


					string_literal896=(Token)match(input,PLATFORM,FOLLOW_PLATFORM_in_hintingDirective19015); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal896_tree = (Object)adaptor.create(string_literal896);
					adaptor.addChild(root_0, string_literal896_tree);
					}

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:678:32: 'library'
					{
					root_0 = (Object)adaptor.nil();


					string_literal897=(Token)match(input,LIBRARY,FOLLOW_LIBRARY_in_hintingDirective19048); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal897_tree = (Object)adaptor.create(string_literal897);
					adaptor.addChild(root_0, string_literal897_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 163, hintingDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "hintingDirective"


	public static class externalDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "externalDirective"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:680:1: externalDirective : ( 'varargs' ';' | 'external' ';' | 'external' constExpression ( externalSpecifier )* ';' );
	public final DelphiParser.externalDirective_return externalDirective() throws RecognitionException {
		DelphiParser.externalDirective_return retval = new DelphiParser.externalDirective_return();
		retval.start = input.LT(1);
		int externalDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal898=null;
		Token char_literal899=null;
		Token string_literal900=null;
		Token char_literal901=null;
		Token string_literal902=null;
		Token char_literal905=null;
		ParserRuleReturnScope constExpression903 =null;
		ParserRuleReturnScope externalSpecifier904 =null;

		Object string_literal898_tree=null;
		Object char_literal899_tree=null;
		Object string_literal900_tree=null;
		Object char_literal901_tree=null;
		Object string_literal902_tree=null;
		Object char_literal905_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 164) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:680:30: ( 'varargs' ';' | 'external' ';' | 'external' constExpression ( externalSpecifier )* ';' )
			int alt287=3;
			int LA287_0 = input.LA(1);
			if ( (LA287_0==VARARGS) ) {
				alt287=1;
			}
			else if ( (LA287_0==EXTERNAL) ) {
				int LA287_2 = input.LA(2);
				if ( (LA287_2==SEMI) ) {
					int LA287_3 = input.LA(3);
					if ( (synpred445_Delphi()) ) {
						alt287=2;
					}
					else if ( (true) ) {
						alt287=3;
					}

				}
				else if ( ((LA287_2 >= ADD && LA287_2 <= ANSISTRING)||LA287_2==AS||(LA287_2 >= AT && LA287_2 <= AT2)||LA287_2==BREAK||(LA287_2 >= CONTAINS && LA287_2 <= DEFAULT)||LA287_2==DIV||LA287_2==DOT||(LA287_2 >= DQ && LA287_2 <= DW)||LA287_2==EQUAL||LA287_2==EXIT||LA287_2==EXPORT||LA287_2==FALSE||LA287_2==FINAL||(LA287_2 >= FUNCTION && LA287_2 <= GE)||LA287_2==GT||(LA287_2 >= IMPLEMENTS && LA287_2 <= INHERITED)||LA287_2==IS||LA287_2==LBRACK||LA287_2==LE||(LA287_2 >= LOCAL && LA287_2 <= NAME)||LA287_2==NIL||(LA287_2 >= NOT && LA287_2 <= OBJECT)||(LA287_2 >= OPERATOR && LA287_2 <= OUT)||(LA287_2 >= PLUS && LA287_2 <= POINTER2)||LA287_2==PROCEDURE||LA287_2==QuotedString||(LA287_2 >= READ && LA287_2 <= READONLY)||(LA287_2 >= REFERENCE && LA287_2 <= REGISTER)||LA287_2==REMOVE||(LA287_2 >= SHL && LA287_2 <= STATIC)||(LA287_2 >= STORED && LA287_2 <= STRING)||LA287_2==TRUE||(LA287_2 >= TkHexNum && LA287_2 <= TkIntNum)||LA287_2==TkRealNum||LA287_2==UNSAFE||(LA287_2 >= VARARGS && LA287_2 <= VIRTUAL)||(LA287_2 >= WRITE && LA287_2 <= WRITEONLY)||(LA287_2 >= XOR && LA287_2 <= 200)) ) {
					alt287=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 287, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 287, 0, input);
				throw nvae;
			}

			switch (alt287) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:680:32: 'varargs' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal898=(Token)match(input,VARARGS,FOLLOW_VARARGS_in_externalDirective19096); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal898_tree = (Object)adaptor.create(string_literal898);
					adaptor.addChild(root_0, string_literal898_tree);
					}

					char_literal899=(Token)match(input,SEMI,FOLLOW_SEMI_in_externalDirective19098); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal899_tree = (Object)adaptor.create(char_literal899);
					adaptor.addChild(root_0, char_literal899_tree);
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:681:32: 'external' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal900=(Token)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_externalDirective19134); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal900_tree = (Object)adaptor.create(string_literal900);
					adaptor.addChild(root_0, string_literal900_tree);
					}

					char_literal901=(Token)match(input,SEMI,FOLLOW_SEMI_in_externalDirective19136); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal901_tree = (Object)adaptor.create(char_literal901);
					adaptor.addChild(root_0, char_literal901_tree);
					}

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:682:32: 'external' constExpression ( externalSpecifier )* ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal902=(Token)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_externalDirective19169); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal902_tree = (Object)adaptor.create(string_literal902);
					adaptor.addChild(root_0, string_literal902_tree);
					}

					pushFollow(FOLLOW_constExpression_in_externalDirective19171);
					constExpression903=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression903.getTree());

					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:682:59: ( externalSpecifier )*
					loop286:
					while (true) {
						int alt286=2;
						int LA286_0 = input.LA(1);
						if ( (LA286_0==INDEX||LA286_0==NAME) ) {
							alt286=1;
						}

						switch (alt286) {
						case 1 :
							// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:682:60: externalSpecifier
							{
							pushFollow(FOLLOW_externalSpecifier_in_externalDirective19174);
							externalSpecifier904=externalSpecifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, externalSpecifier904.getTree());

							}
							break;

						default :
							break loop286;
						}
					}

					char_literal905=(Token)match(input,SEMI,FOLLOW_SEMI_in_externalDirective19178); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal905_tree = (Object)adaptor.create(char_literal905);
					adaptor.addChild(root_0, char_literal905_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 164, externalDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "externalDirective"


	public static class externalSpecifier_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "externalSpecifier"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:684:1: externalSpecifier : ( 'name' constExpression | 'index' constExpression );
	public final DelphiParser.externalSpecifier_return externalSpecifier() throws RecognitionException {
		DelphiParser.externalSpecifier_return retval = new DelphiParser.externalSpecifier_return();
		retval.start = input.LT(1);
		int externalSpecifier_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal906=null;
		Token string_literal908=null;
		ParserRuleReturnScope constExpression907 =null;
		ParserRuleReturnScope constExpression909 =null;

		Object string_literal906_tree=null;
		Object string_literal908_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 165) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:684:30: ( 'name' constExpression | 'index' constExpression )
			int alt288=2;
			int LA288_0 = input.LA(1);
			if ( (LA288_0==NAME) ) {
				alt288=1;
			}
			else if ( (LA288_0==INDEX) ) {
				alt288=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 288, 0, input);
				throw nvae;
			}

			switch (alt288) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:684:32: 'name' constExpression
					{
					root_0 = (Object)adaptor.nil();


					string_literal906=(Token)match(input,NAME,FOLLOW_NAME_in_externalSpecifier19227); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal906_tree = (Object)adaptor.create(string_literal906);
					adaptor.addChild(root_0, string_literal906_tree);
					}

					pushFollow(FOLLOW_constExpression_in_externalSpecifier19229);
					constExpression907=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression907.getTree());

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:685:32: 'index' constExpression
					{
					root_0 = (Object)adaptor.nil();


					string_literal908=(Token)match(input,INDEX,FOLLOW_INDEX_in_externalSpecifier19262); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal908_tree = (Object)adaptor.create(string_literal908);
					adaptor.addChild(root_0, string_literal908_tree);
					}

					pushFollow(FOLLOW_constExpression_in_externalSpecifier19264);
					constExpression909=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression909.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 165, externalSpecifier_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "externalSpecifier"


	public static class dispIDDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "dispIDDirective"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:687:1: dispIDDirective : 'dispid' expression ';' ;
	public final DelphiParser.dispIDDirective_return dispIDDirective() throws RecognitionException {
		DelphiParser.dispIDDirective_return retval = new DelphiParser.dispIDDirective_return();
		retval.start = input.LT(1);
		int dispIDDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal910=null;
		Token char_literal912=null;
		ParserRuleReturnScope expression911 =null;

		Object string_literal910_tree=null;
		Object char_literal912_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 166) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:687:30: ( 'dispid' expression ';' )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:687:32: 'dispid' expression ';'
			{
			root_0 = (Object)adaptor.nil();


			string_literal910=(Token)match(input,DISPID,FOLLOW_DISPID_in_dispIDDirective19317); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal910_tree = (Object)adaptor.create(string_literal910);
			adaptor.addChild(root_0, string_literal910_tree);
			}

			pushFollow(FOLLOW_expression_in_dispIDDirective19319);
			expression911=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression911.getTree());

			char_literal912=(Token)match(input,SEMI,FOLLOW_SEMI_in_dispIDDirective19321); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal912_tree = (Object)adaptor.create(char_literal912);
			adaptor.addChild(root_0, char_literal912_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 166, dispIDDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "dispIDDirective"


	public static class ident_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "ident"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:692:1: ident : ( TkIdentifier | '&' TkIdentifier -> TkIdentifier | '&' keywordsAsIdentifier -> keywordsAsIdentifier | usedKeywordsAsNames );
	public final DelphiParser.ident_return ident() throws RecognitionException {
		DelphiParser.ident_return retval = new DelphiParser.ident_return();
		retval.start = input.LT(1);
		int ident_StartIndex = input.index();

		Object root_0 = null;

		Token TkIdentifier913=null;
		Token char_literal914=null;
		Token TkIdentifier915=null;
		Token char_literal916=null;
		ParserRuleReturnScope keywordsAsIdentifier917 =null;
		ParserRuleReturnScope usedKeywordsAsNames918 =null;

		Object TkIdentifier913_tree=null;
		Object char_literal914_tree=null;
		Object TkIdentifier915_tree=null;
		Object char_literal916_tree=null;
		RewriteRuleTokenStream stream_198=new RewriteRuleTokenStream(adaptor,"token 198");
		RewriteRuleTokenStream stream_TkIdentifier=new RewriteRuleTokenStream(adaptor,"token TkIdentifier");
		RewriteRuleSubtreeStream stream_keywordsAsIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule keywordsAsIdentifier");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 167) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:692:30: ( TkIdentifier | '&' TkIdentifier -> TkIdentifier | '&' keywordsAsIdentifier -> keywordsAsIdentifier | usedKeywordsAsNames )
			int alt289=4;
			switch ( input.LA(1) ) {
			case TkIdentifier:
				{
				alt289=1;
				}
				break;
			case 198:
				{
				int LA289_2 = input.LA(2);
				if ( (LA289_2==TkIdentifier) ) {
					alt289=2;
				}
				else if ( ((LA289_2 >= ABSOLUTE && LA289_2 <= ASSEMBLY)||LA289_2==AT||LA289_2==AUTOMATED||(LA289_2 >= BEGIN && LA289_2 <= CLASS)||(LA289_2 >= CONST && LA289_2 <= CONTINUE)||(LA289_2 >= DEFAULT && LA289_2 <= DO)||(LA289_2 >= DOWNTO && LA289_2 <= DYNAMIC)||(LA289_2 >= ELSE && LA289_2 <= END)||(LA289_2 >= EXCEPT && LA289_2 <= FUNCTION)||LA289_2==GOTO||LA289_2==HELPER||(LA289_2 >= IF && LA289_2 <= LABEL)||(LA289_2 >= LIBRARY && LA289_2 <= LOCAL)||LA289_2==MESSAGE||(LA289_2 >= MOD && LA289_2 <= NOT)||(LA289_2 >= OBJECT && LA289_2 <= PLATFORM)||LA289_2==POINTER||(LA289_2 >= PRIVATE && LA289_2 <= PUBLISHED)||LA289_2==RAISE||(LA289_2 >= READ && LA289_2 <= RESOURCESTRING)||(LA289_2 >= SAFECALL && LA289_2 <= SEALED)||(LA289_2 >= SET && LA289_2 <= SHR)||(LA289_2 >= STATIC && LA289_2 <= TYPE)||(LA289_2 >= UNIT && LA289_2 <= USES)||(LA289_2 >= VAR && LA289_2 <= WRITEONLY)||LA289_2==XOR) ) {
					alt289=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 289, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ADD:
			case ANSISTRING:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case DQ:
			case DW:
			case EXIT:
			case EXPORT:
			case FALSE:
			case FINAL:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STATIC:
			case STORED:
			case STRICT:
			case STRING:
			case TRUE:
			case UNSAFE:
			case VARARGS:
			case VARIANT:
			case VIRTUAL:
			case WRITE:
			case WRITEONLY:
				{
				alt289=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 289, 0, input);
				throw nvae;
			}
			switch (alt289) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:692:32: TkIdentifier
					{
					root_0 = (Object)adaptor.nil();


					TkIdentifier913=(Token)match(input,TkIdentifier,FOLLOW_TkIdentifier_in_ident19384); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TkIdentifier913_tree = (Object)adaptor.create(TkIdentifier913);
					adaptor.addChild(root_0, TkIdentifier913_tree);
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:693:32: '&' TkIdentifier
					{
					char_literal914=(Token)match(input,198,FOLLOW_198_in_ident19417); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_198.add(char_literal914);

					TkIdentifier915=(Token)match(input,TkIdentifier,FOLLOW_TkIdentifier_in_ident19419); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_TkIdentifier.add(TkIdentifier915);

					// AST REWRITE
					// elements: TkIdentifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 693:49: -> TkIdentifier
					{
						adaptor.addChild(root_0, stream_TkIdentifier.nextNode());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:694:32: '&' keywordsAsIdentifier
					{
					char_literal916=(Token)match(input,198,FOLLOW_198_in_ident19456); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_198.add(char_literal916);

					pushFollow(FOLLOW_keywordsAsIdentifier_in_ident19458);
					keywordsAsIdentifier917=keywordsAsIdentifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_keywordsAsIdentifier.add(keywordsAsIdentifier917.getTree());
					// AST REWRITE
					// elements: keywordsAsIdentifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 694:57: -> keywordsAsIdentifier
					{
						adaptor.addChild(root_0, stream_keywordsAsIdentifier.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:695:32: usedKeywordsAsNames
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_usedKeywordsAsNames_in_ident19495);
					usedKeywordsAsNames918=usedKeywordsAsNames();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, usedKeywordsAsNames918.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 167, ident_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "ident"


	public static class usedKeywordsAsNames_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "usedKeywordsAsNames"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:697:1: usedKeywordsAsNames : ( ( NAME | READONLY | ADD | AT | MESSAGE | POINTER | INDEX | DEFAULT | STRING | CONTINUE ) | ( READ | WRITE | REGISTER | VARIANT | OPERATOR | REMOVE | LOCAL | REFERENCE | CONTAINS | FINAL ) | ( BREAK | EXIT | STRICT | OUT | OBJECT | EXPORT | ANSISTRING | IMPLEMENTS | STORED ) | ( UNSAFE | STATIC | DQ | DW | VARARGS | VARIANT | VIRTUAL | WRITE | WRITEONLY | FALSE | TRUE ) );
	public final DelphiParser.usedKeywordsAsNames_return usedKeywordsAsNames() throws RecognitionException {
		DelphiParser.usedKeywordsAsNames_return retval = new DelphiParser.usedKeywordsAsNames_return();
		retval.start = input.LT(1);
		int usedKeywordsAsNames_StartIndex = input.index();

		Object root_0 = null;

		Token set919=null;

		Object set919_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 168) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:697:30: ( ( NAME | READONLY | ADD | AT | MESSAGE | POINTER | INDEX | DEFAULT | STRING | CONTINUE ) | ( READ | WRITE | REGISTER | VARIANT | OPERATOR | REMOVE | LOCAL | REFERENCE | CONTAINS | FINAL ) | ( BREAK | EXIT | STRICT | OUT | OBJECT | EXPORT | ANSISTRING | IMPLEMENTS | STORED ) | ( UNSAFE | STATIC | DQ | DW | VARARGS | VARIANT | VIRTUAL | WRITE | WRITEONLY | FALSE | TRUE ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set919=input.LT(1);
			if ( input.LA(1)==ADD||input.LA(1)==ANSISTRING||input.LA(1)==AT||input.LA(1)==BREAK||(input.LA(1) >= CONTAINS && input.LA(1) <= CONTINUE)||input.LA(1)==DEFAULT||(input.LA(1) >= DQ && input.LA(1) <= DW)||input.LA(1)==EXIT||input.LA(1)==EXPORT||input.LA(1)==FALSE||input.LA(1)==FINAL||input.LA(1)==IMPLEMENTS||input.LA(1)==INDEX||input.LA(1)==LOCAL||input.LA(1)==MESSAGE||input.LA(1)==NAME||input.LA(1)==OBJECT||input.LA(1)==OPERATOR||input.LA(1)==OUT||input.LA(1)==POINTER||(input.LA(1) >= READ && input.LA(1) <= READONLY)||(input.LA(1) >= REFERENCE && input.LA(1) <= REGISTER)||input.LA(1)==REMOVE||input.LA(1)==STATIC||(input.LA(1) >= STORED && input.LA(1) <= STRING)||input.LA(1)==TRUE||input.LA(1)==UNSAFE||(input.LA(1) >= VARARGS && input.LA(1) <= VIRTUAL)||(input.LA(1) >= WRITE && input.LA(1) <= WRITEONLY) ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set919));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 168, usedKeywordsAsNames_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "usedKeywordsAsNames"


	public static class keywordsAsIdentifier_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "keywordsAsIdentifier"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:702:1: keywordsAsIdentifier : ( ( ABSOLUTE | ABSTRACT | ADD | AND | ANSISTRING | ARRAY | AS | ASM | ASSEMBLER | ASSEMBLY ) | ( AT | AUTOMATED | BEGIN | BREAK | CASE | CDECL | CLASS | CONST | CONSTRUCTOR | CONTAINS ) | ( CONTINUE | DEFAULT | DEPRECATED | DESTRUCTOR | DISPID | DISPINTERFACE | DIV | DO | DOWNTO ) | ( DQ | DW | DYNAMIC | ELSE | END | EXCEPT | EXIT | EXPERIMENTAL | EXPORT | EXPORTS | EXTERNAL ) | ( FAR | FILE | FINAL | FINALIZATION | FINALLY | FOR | FORWARD | FUNCTION | GOTO | HELPER | IF ) | ( IMPLEMENTATION | IMPLEMENTS | IN | INDEX | INHERITED | INITIALIZATION | INLINE | INTERFACE ) | ( IS | LABEL | LIBRARY | LOCAL | MESSAGE | MOD | NAME | NEAR | NIL | NODEFAULT | NOT | OBJECT ) | ( OF | ON | OPERATOR | OR | OUT | OVERLOAD | OVERRIDE | PACKAGE | PACKED | PASCAL | PLATFORM ) | ( POINTER | PRIVATE | PROCEDURE | PROGRAM | PROPERTY | PROTECTED | PUBLIC | PUBLISHED | RAISE ) | ( READ | READONLY | RECORD | REFERENCE | REGISTER | REINTRODUCE | REMOVE | REPEAT | REQUIRES ) | ( RESIDENT | RESOURCESTRING | SAFECALL | SEALED | SET | SHL | SHR | STATIC | STDCALL | STORED ) | ( STRICT | STRING | THEN | THREADVAR | TO | TRY | TYPE | UNIT | UNSAFE | UNTIL | USES | VAR ) | ( VARARGS | VARIANT | VIRTUAL | WHILE | WITH | WRITE | WRITEONLY | XOR | FALSE | TRUE ) );
	public final DelphiParser.keywordsAsIdentifier_return keywordsAsIdentifier() throws RecognitionException {
		DelphiParser.keywordsAsIdentifier_return retval = new DelphiParser.keywordsAsIdentifier_return();
		retval.start = input.LT(1);
		int keywordsAsIdentifier_StartIndex = input.index();

		Object root_0 = null;

		Token set920=null;

		Object set920_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 169) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:702:30: ( ( ABSOLUTE | ABSTRACT | ADD | AND | ANSISTRING | ARRAY | AS | ASM | ASSEMBLER | ASSEMBLY ) | ( AT | AUTOMATED | BEGIN | BREAK | CASE | CDECL | CLASS | CONST | CONSTRUCTOR | CONTAINS ) | ( CONTINUE | DEFAULT | DEPRECATED | DESTRUCTOR | DISPID | DISPINTERFACE | DIV | DO | DOWNTO ) | ( DQ | DW | DYNAMIC | ELSE | END | EXCEPT | EXIT | EXPERIMENTAL | EXPORT | EXPORTS | EXTERNAL ) | ( FAR | FILE | FINAL | FINALIZATION | FINALLY | FOR | FORWARD | FUNCTION | GOTO | HELPER | IF ) | ( IMPLEMENTATION | IMPLEMENTS | IN | INDEX | INHERITED | INITIALIZATION | INLINE | INTERFACE ) | ( IS | LABEL | LIBRARY | LOCAL | MESSAGE | MOD | NAME | NEAR | NIL | NODEFAULT | NOT | OBJECT ) | ( OF | ON | OPERATOR | OR | OUT | OVERLOAD | OVERRIDE | PACKAGE | PACKED | PASCAL | PLATFORM ) | ( POINTER | PRIVATE | PROCEDURE | PROGRAM | PROPERTY | PROTECTED | PUBLIC | PUBLISHED | RAISE ) | ( READ | READONLY | RECORD | REFERENCE | REGISTER | REINTRODUCE | REMOVE | REPEAT | REQUIRES ) | ( RESIDENT | RESOURCESTRING | SAFECALL | SEALED | SET | SHL | SHR | STATIC | STDCALL | STORED ) | ( STRICT | STRING | THEN | THREADVAR | TO | TRY | TYPE | UNIT | UNSAFE | UNTIL | USES | VAR ) | ( VARARGS | VARIANT | VIRTUAL | WHILE | WITH | WRITE | WRITEONLY | XOR | FALSE | TRUE ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set920=input.LT(1);
			if ( (input.LA(1) >= ABSOLUTE && input.LA(1) <= ASSEMBLY)||input.LA(1)==AT||input.LA(1)==AUTOMATED||(input.LA(1) >= BEGIN && input.LA(1) <= CLASS)||(input.LA(1) >= CONST && input.LA(1) <= CONTINUE)||(input.LA(1) >= DEFAULT && input.LA(1) <= DO)||(input.LA(1) >= DOWNTO && input.LA(1) <= DYNAMIC)||(input.LA(1) >= ELSE && input.LA(1) <= END)||(input.LA(1) >= EXCEPT && input.LA(1) <= FUNCTION)||input.LA(1)==GOTO||input.LA(1)==HELPER||(input.LA(1) >= IF && input.LA(1) <= LABEL)||(input.LA(1) >= LIBRARY && input.LA(1) <= LOCAL)||input.LA(1)==MESSAGE||(input.LA(1) >= MOD && input.LA(1) <= NOT)||(input.LA(1) >= OBJECT && input.LA(1) <= PLATFORM)||input.LA(1)==POINTER||(input.LA(1) >= PRIVATE && input.LA(1) <= PUBLISHED)||input.LA(1)==RAISE||(input.LA(1) >= READ && input.LA(1) <= RESOURCESTRING)||(input.LA(1) >= SAFECALL && input.LA(1) <= SEALED)||(input.LA(1) >= SET && input.LA(1) <= SHR)||(input.LA(1) >= STATIC && input.LA(1) <= TYPE)||(input.LA(1) >= UNIT && input.LA(1) <= USES)||(input.LA(1) >= VAR && input.LA(1) <= WRITEONLY)||input.LA(1)==XOR ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set920));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 169, keywordsAsIdentifier_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "keywordsAsIdentifier"


	public static class identList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "identList"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:716:1: identList : ident ( ',' ident )* -> ^( ident ( ident )* ) ;
	public final DelphiParser.identList_return identList() throws RecognitionException {
		DelphiParser.identList_return retval = new DelphiParser.identList_return();
		retval.start = input.LT(1);
		int identList_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal922=null;
		ParserRuleReturnScope ident921 =null;
		ParserRuleReturnScope ident923 =null;

		Object char_literal922_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 170) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:716:30: ( ident ( ',' ident )* -> ^( ident ( ident )* ) )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:716:32: ident ( ',' ident )*
			{
			pushFollow(FOLLOW_ident_in_identList20792);
			ident921=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_ident.add(ident921.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:716:38: ( ',' ident )*
			loop290:
			while (true) {
				int alt290=2;
				int LA290_0 = input.LA(1);
				if ( (LA290_0==COMMA) ) {
					alt290=1;
				}

				switch (alt290) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:716:39: ',' ident
					{
					char_literal922=(Token)match(input,COMMA,FOLLOW_COMMA_in_identList20795); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(char_literal922);

					pushFollow(FOLLOW_ident_in_identList20797);
					ident923=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident923.getTree());
					}
					break;

				default :
					break loop290;
				}
			}

			// AST REWRITE
			// elements: ident, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 716:51: -> ^( ident ( ident )* )
			{
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:716:54: ^( ident ( ident )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_ident.nextNode(), root_1);
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:716:62: ( ident )*
				while ( stream_ident.hasNext() ) {
					adaptor.addChild(root_1, stream_ident.nextTree());
				}
				stream_ident.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 170, identList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "identList"


	public static class identListFlat_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "identListFlat"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:718:1: identListFlat : ident ( ',' ident )* -> ident ( ident )* ;
	public final DelphiParser.identListFlat_return identListFlat() throws RecognitionException {
		DelphiParser.identListFlat_return retval = new DelphiParser.identListFlat_return();
		retval.start = input.LT(1);
		int identListFlat_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal925=null;
		ParserRuleReturnScope ident924 =null;
		ParserRuleReturnScope ident926 =null;

		Object char_literal925_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 171) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:718:30: ( ident ( ',' ident )* -> ident ( ident )* )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:718:32: ident ( ',' ident )*
			{
			pushFollow(FOLLOW_ident_in_identListFlat20862);
			ident924=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_ident.add(ident924.getTree());
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:718:38: ( ',' ident )*
			loop291:
			while (true) {
				int alt291=2;
				int LA291_0 = input.LA(1);
				if ( (LA291_0==COMMA) ) {
					alt291=1;
				}

				switch (alt291) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:718:39: ',' ident
					{
					char_literal925=(Token)match(input,COMMA,FOLLOW_COMMA_in_identListFlat20865); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(char_literal925);

					pushFollow(FOLLOW_ident_in_identListFlat20867);
					ident926=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident926.getTree());
					}
					break;

				default :
					break loop291;
				}
			}

			// AST REWRITE
			// elements: ident, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 718:51: -> ident ( ident )*
			{
				adaptor.addChild(root_0, stream_ident.nextTree());
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:718:60: ( ident )*
				while ( stream_ident.hasNext() ) {
					adaptor.addChild(root_0, stream_ident.nextTree());
				}
				stream_ident.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 171, identListFlat_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "identListFlat"


	public static class label_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "label"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:720:1: label : ( TkIdentifier | TkIntNum | TkHexNum | usedKeywordsAsNames );
	public final DelphiParser.label_return label() throws RecognitionException {
		DelphiParser.label_return retval = new DelphiParser.label_return();
		retval.start = input.LT(1);
		int label_StartIndex = input.index();

		Object root_0 = null;

		Token TkIdentifier927=null;
		Token TkIntNum928=null;
		Token TkHexNum929=null;
		ParserRuleReturnScope usedKeywordsAsNames930 =null;

		Object TkIdentifier927_tree=null;
		Object TkIntNum928_tree=null;
		Object TkHexNum929_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 172) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:720:30: ( TkIdentifier | TkIntNum | TkHexNum | usedKeywordsAsNames )
			int alt292=4;
			switch ( input.LA(1) ) {
			case TkIdentifier:
				{
				alt292=1;
				}
				break;
			case TkIntNum:
				{
				alt292=2;
				}
				break;
			case TkHexNum:
				{
				alt292=3;
				}
				break;
			case ADD:
			case ANSISTRING:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case DQ:
			case DW:
			case EXIT:
			case EXPORT:
			case FALSE:
			case FINAL:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STATIC:
			case STORED:
			case STRICT:
			case STRING:
			case TRUE:
			case UNSAFE:
			case VARARGS:
			case VARIANT:
			case VIRTUAL:
			case WRITE:
			case WRITEONLY:
				{
				alt292=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 292, 0, input);
				throw nvae;
			}
			switch (alt292) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:720:32: TkIdentifier
					{
					root_0 = (Object)adaptor.nil();


					TkIdentifier927=(Token)match(input,TkIdentifier,FOLLOW_TkIdentifier_in_label20941); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TkIdentifier927_tree = (Object)adaptor.create(TkIdentifier927);
					adaptor.addChild(root_0, TkIdentifier927_tree);
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:721:32: TkIntNum
					{
					root_0 = (Object)adaptor.nil();


					TkIntNum928=(Token)match(input,TkIntNum,FOLLOW_TkIntNum_in_label20974); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TkIntNum928_tree = (Object)adaptor.create(TkIntNum928);
					adaptor.addChild(root_0, TkIntNum928_tree);
					}

					}
					break;
				case 3 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:722:32: TkHexNum
					{
					root_0 = (Object)adaptor.nil();


					TkHexNum929=(Token)match(input,TkHexNum,FOLLOW_TkHexNum_in_label21007); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TkHexNum929_tree = (Object)adaptor.create(TkHexNum929);
					adaptor.addChild(root_0, TkHexNum929_tree);
					}

					}
					break;
				case 4 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:723:32: usedKeywordsAsNames
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_usedKeywordsAsNames_in_label21040);
					usedKeywordsAsNames930=usedKeywordsAsNames();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, usedKeywordsAsNames930.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 172, label_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "label"


	public static class intRealNum_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "intRealNum"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:725:1: intRealNum : ( TkRealNum | intNum );
	public final DelphiParser.intRealNum_return intRealNum() throws RecognitionException {
		DelphiParser.intRealNum_return retval = new DelphiParser.intRealNum_return();
		retval.start = input.LT(1);
		int intRealNum_StartIndex = input.index();

		Object root_0 = null;

		Token TkRealNum931=null;
		ParserRuleReturnScope intNum932 =null;

		Object TkRealNum931_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 173) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:725:30: ( TkRealNum | intNum )
			int alt293=2;
			int LA293_0 = input.LA(1);
			if ( (LA293_0==TkRealNum) ) {
				alt293=1;
			}
			else if ( (LA293_0==TkHexNum||LA293_0==TkIntNum) ) {
				alt293=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 293, 0, input);
				throw nvae;
			}

			switch (alt293) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:725:32: TkRealNum
					{
					root_0 = (Object)adaptor.nil();


					TkRealNum931=(Token)match(input,TkRealNum,FOLLOW_TkRealNum_in_intRealNum21095); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TkRealNum931_tree = (Object)adaptor.create(TkRealNum931);
					adaptor.addChild(root_0, TkRealNum931_tree);
					}

					}
					break;
				case 2 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:726:32: intNum
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_intNum_in_intRealNum21128);
					intNum932=intNum();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, intNum932.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 173, intRealNum_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "intRealNum"


	public static class intNum_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "intNum"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:728:1: intNum : ( TkIntNum | TkHexNum );
	public final DelphiParser.intNum_return intNum() throws RecognitionException {
		DelphiParser.intNum_return retval = new DelphiParser.intNum_return();
		retval.start = input.LT(1);
		int intNum_StartIndex = input.index();

		Object root_0 = null;

		Token set933=null;

		Object set933_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 174) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:728:30: ( TkIntNum | TkHexNum )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set933=input.LT(1);
			if ( input.LA(1)==TkHexNum||input.LA(1)==TkIntNum ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set933));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 174, intNum_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "intNum"


	public static class namespaceName_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "namespaceName"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:731:1: namespaceName : ident ( '.' ident )* ;
	public final DelphiParser.namespaceName_return namespaceName() throws RecognitionException {
		DelphiParser.namespaceName_return retval = new DelphiParser.namespaceName_return();
		retval.start = input.LT(1);
		int namespaceName_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal935=null;
		ParserRuleReturnScope ident934 =null;
		ParserRuleReturnScope ident936 =null;

		Object char_literal935_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 175) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:731:30: ( ident ( '.' ident )* )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:731:32: ident ( '.' ident )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_ident_in_namespaceName21272);
			ident934=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident934.getTree());

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:731:38: ( '.' ident )*
			loop294:
			while (true) {
				int alt294=2;
				int LA294_0 = input.LA(1);
				if ( (LA294_0==DOT) ) {
					alt294=1;
				}

				switch (alt294) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:731:39: '.' ident
					{
					char_literal935=(Token)match(input,DOT,FOLLOW_DOT_in_namespaceName21275); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal935_tree = (Object)adaptor.create(char_literal935);
					adaptor.addChild(root_0, char_literal935_tree);
					}

					pushFollow(FOLLOW_ident_in_namespaceName21277);
					ident936=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident936.getTree());

					}
					break;

				default :
					break loop294;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 175, namespaceName_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "namespaceName"


	public static class qualifiedIdent_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "qualifiedIdent"
	// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:733:1: qualifiedIdent : ( ident '.' )* ident ;
	public final DelphiParser.qualifiedIdent_return qualifiedIdent() throws RecognitionException {
		DelphiParser.qualifiedIdent_return retval = new DelphiParser.qualifiedIdent_return();
		retval.start = input.LT(1);
		int qualifiedIdent_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal938=null;
		ParserRuleReturnScope ident937 =null;
		ParserRuleReturnScope ident939 =null;

		Object char_literal938_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 176) ) { return retval; }

			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:733:30: ( ( ident '.' )* ident )
			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:733:33: ( ident '.' )* ident
			{
			root_0 = (Object)adaptor.nil();


			// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:733:33: ( ident '.' )*
			loop295:
			while (true) {
				int alt295=2;
				switch ( input.LA(1) ) {
				case TkIdentifier:
					{
					int LA295_1 = input.LA(2);
					if ( (LA295_1==DOT) ) {
						int LA295_5 = input.LA(3);
						if ( (synpred629_Delphi()) ) {
							alt295=1;
						}

					}

					}
					break;
				case 198:
					{
					int LA295_2 = input.LA(2);
					if ( (LA295_2==TkIdentifier) ) {
						int LA295_6 = input.LA(3);
						if ( (LA295_6==DOT) ) {
							int LA295_10 = input.LA(4);
							if ( (synpred629_Delphi()) ) {
								alt295=1;
							}

						}

					}
					else if ( ((LA295_2 >= ABSOLUTE && LA295_2 <= ASSEMBLY)||LA295_2==AT||LA295_2==AUTOMATED||(LA295_2 >= BEGIN && LA295_2 <= CLASS)||(LA295_2 >= CONST && LA295_2 <= CONTINUE)||(LA295_2 >= DEFAULT && LA295_2 <= DO)||(LA295_2 >= DOWNTO && LA295_2 <= DYNAMIC)||(LA295_2 >= ELSE && LA295_2 <= END)||(LA295_2 >= EXCEPT && LA295_2 <= FUNCTION)||LA295_2==GOTO||LA295_2==HELPER||(LA295_2 >= IF && LA295_2 <= LABEL)||(LA295_2 >= LIBRARY && LA295_2 <= LOCAL)||LA295_2==MESSAGE||(LA295_2 >= MOD && LA295_2 <= NOT)||(LA295_2 >= OBJECT && LA295_2 <= PLATFORM)||LA295_2==POINTER||(LA295_2 >= PRIVATE && LA295_2 <= PUBLISHED)||LA295_2==RAISE||(LA295_2 >= READ && LA295_2 <= RESOURCESTRING)||(LA295_2 >= SAFECALL && LA295_2 <= SEALED)||(LA295_2 >= SET && LA295_2 <= SHR)||(LA295_2 >= STATIC && LA295_2 <= TYPE)||(LA295_2 >= UNIT && LA295_2 <= USES)||(LA295_2 >= VAR && LA295_2 <= WRITEONLY)||LA295_2==XOR) ) {
						int LA295_7 = input.LA(3);
						if ( (LA295_7==DOT) ) {
							int LA295_11 = input.LA(4);
							if ( (synpred629_Delphi()) ) {
								alt295=1;
							}

						}

					}

					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DQ:
				case DW:
				case EXIT:
				case EXPORT:
				case FALSE:
				case FINAL:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STATIC:
				case STORED:
				case STRICT:
				case STRING:
				case TRUE:
				case UNSAFE:
				case VARARGS:
				case VARIANT:
				case VIRTUAL:
				case WRITE:
				case WRITEONLY:
					{
					int LA295_3 = input.LA(2);
					if ( (LA295_3==DOT) ) {
						int LA295_8 = input.LA(3);
						if ( (synpred629_Delphi()) ) {
							alt295=1;
						}

					}

					}
					break;
				}
				switch (alt295) {
				case 1 :
					// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:733:34: ident '.'
					{
					pushFollow(FOLLOW_ident_in_qualifiedIdent21332);
					ident937=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident937.getTree());

					char_literal938=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedIdent21334); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal938_tree = (Object)adaptor.create(char_literal938);
					adaptor.addChild(root_0, char_literal938_tree);
					}

					}
					break;

				default :
					break loop295;
				}
			}

			pushFollow(FOLLOW_ident_in_qualifiedIdent21339);
			ident939=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident939.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 176, qualifiedIdent_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "qualifiedIdent"

	// $ANTLR start synpred23_Delphi
	public final void synpred23_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:135:33: ( declSection )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:135:33: declSection
		{
		pushFollow(FOLLOW_declSection_in_synpred23_Delphi1593);
		declSection();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred23_Delphi

	// $ANTLR start synpred24_Delphi
	public final void synpred24_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:135:48: ( blockBody )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:135:48: blockBody
		{
		pushFollow(FOLLOW_blockBody_in_synpred24_Delphi1598);
		blockBody();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred24_Delphi

	// $ANTLR start synpred30_Delphi
	public final void synpred30_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:144:32: ( methodDecl )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:144:32: methodDecl
		{
		pushFollow(FOLLOW_methodDecl_in_synpred30_Delphi1875);
		methodDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred30_Delphi

	// $ANTLR start synpred31_Delphi
	public final void synpred31_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:145:32: ( procDecl )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:145:32: procDecl
		{
		pushFollow(FOLLOW_procDecl_in_synpred31_Delphi1908);
		procDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred31_Delphi

	// $ANTLR start synpred35_Delphi
	public final void synpred35_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:151:32: ( exportedProcHeading )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:151:32: exportedProcHeading
		{
		pushFollow(FOLLOW_exportedProcHeading_in_synpred35_Delphi2092);
		exportedProcHeading();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred35_Delphi

	// $ANTLR start synpred37_Delphi
	public final void synpred37_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:153:32: ( procDecl )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:153:32: procDecl
		{
		pushFollow(FOLLOW_procDecl_in_synpred37_Delphi2158);
		procDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred37_Delphi

	// $ANTLR start synpred39_Delphi
	public final void synpred39_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:158:42: ( constDeclaration )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:158:42: constDeclaration
		{
		pushFollow(FOLLOW_constDeclaration_in_synpred39_Delphi2307);
		constDeclaration();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred39_Delphi

	// $ANTLR start synpred41_Delphi
	public final void synpred41_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:33: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred41_Delphi2462);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred41_Delphi

	// $ANTLR start synpred44_Delphi
	public final void synpred44_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:165:56: ( typeDeclaration )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:165:56: typeDeclaration
		{
		pushFollow(FOLLOW_typeDeclaration_in_synpred44_Delphi2556);
		typeDeclaration();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred44_Delphi

	// $ANTLR start synpred45_Delphi
	public final void synpred45_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:33: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:167:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred45_Delphi2622);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred45_Delphi

	// $ANTLR start synpred47_Delphi
	public final void synpred47_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:55: ( varDeclaration )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:55: varDeclaration
		{
		pushFollow(FOLLOW_varDeclaration_in_synpred47_Delphi2719);
		varDeclaration();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred47_Delphi

	// $ANTLR start synpred49_Delphi
	public final void synpred49_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:33: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred49_Delphi2879);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred49_Delphi

	// $ANTLR start synpred52_Delphi
	public final void synpred52_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:177:32: ( 'absolute' ident )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:177:32: 'absolute' ident
		{
		match(input,ABSOLUTE,FOLLOW_ABSOLUTE_in_synpred52_Delphi2971); if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred52_Delphi2973);
		ident();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred52_Delphi

	// $ANTLR start synpred53_Delphi
	public final void synpred53_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:178:32: ( 'absolute' constExpression )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:178:32: 'absolute' constExpression
		{
		match(input,ABSOLUTE,FOLLOW_ABSOLUTE_in_synpred53_Delphi3006); if (state.failed) return;

		pushFollow(FOLLOW_constExpression_in_synpred53_Delphi3008);
		constExpression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred53_Delphi

	// $ANTLR start synpred60_Delphi
	public final void synpred60_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:188:32: ( strucType )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:188:32: strucType
		{
		pushFollow(FOLLOW_strucType_in_synpred60_Delphi3253);
		strucType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred60_Delphi

	// $ANTLR start synpred61_Delphi
	public final void synpred61_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:189:32: ( pointerType )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:189:32: pointerType
		{
		pushFollow(FOLLOW_pointerType_in_synpred61_Delphi3286);
		pointerType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred61_Delphi

	// $ANTLR start synpred62_Delphi
	public final void synpred62_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:190:32: ( stringType )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:190:32: stringType
		{
		pushFollow(FOLLOW_stringType_in_synpred62_Delphi3319);
		stringType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred62_Delphi

	// $ANTLR start synpred63_Delphi
	public final void synpred63_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:191:32: ( procedureType )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:191:32: procedureType
		{
		pushFollow(FOLLOW_procedureType_in_synpred63_Delphi3352);
		procedureType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred63_Delphi

	// $ANTLR start synpred64_Delphi
	public final void synpred64_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:192:32: ( variantType )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:192:32: variantType
		{
		pushFollow(FOLLOW_variantType_in_synpred64_Delphi3385);
		variantType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred64_Delphi

	// $ANTLR start synpred66_Delphi
	public final void synpred66_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:193:50: ( genericPostfix )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:193:50: genericPostfix
		{
		pushFollow(FOLLOW_genericPostfix_in_synpred66_Delphi3426);
		genericPostfix();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred66_Delphi

	// $ANTLR start synpred67_Delphi
	public final void synpred67_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:193:68: ( '.' typeDecl )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:193:68: '.' typeDecl
		{
		match(input,DOT,FOLLOW_DOT_in_synpred67_Delphi3431); if (state.failed) return;

		pushFollow(FOLLOW_typeDecl_in_synpred67_Delphi3433);
		typeDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred67_Delphi

	// $ANTLR start synpred68_Delphi
	public final void synpred68_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:193:84: ( paranthesePostfix )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:193:84: paranthesePostfix
		{
		pushFollow(FOLLOW_paranthesePostfix_in_synpred68_Delphi3438);
		paranthesePostfix();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred68_Delphi

	// $ANTLR start synpred69_Delphi
	public final void synpred69_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:193:32: ( ( 'type' )? typeId ( genericPostfix )? ( '.' typeDecl )* ( paranthesePostfix )? )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:193:32: ( 'type' )? typeId ( genericPostfix )? ( '.' typeDecl )* ( paranthesePostfix )?
		{
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:193:32: ( 'type' )?
		int alt298=2;
		int LA298_0 = input.LA(1);
		if ( (LA298_0==TYPE) ) {
			alt298=1;
		}
		switch (alt298) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:193:33: 'type'
				{
				match(input,TYPE,FOLLOW_TYPE_in_synpred69_Delphi3419); if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_typeId_in_synpred69_Delphi3423);
		typeId();
		state._fsp--;
		if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:193:49: ( genericPostfix )?
		int alt299=2;
		int LA299_0 = input.LA(1);
		if ( (LA299_0==LT) ) {
			alt299=1;
		}
		switch (alt299) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:193:50: genericPostfix
				{
				pushFollow(FOLLOW_genericPostfix_in_synpred69_Delphi3426);
				genericPostfix();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:193:67: ( '.' typeDecl )*
		loop300:
		while (true) {
			int alt300=2;
			int LA300_0 = input.LA(1);
			if ( (LA300_0==DOT) ) {
				alt300=1;
			}

			switch (alt300) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:193:68: '.' typeDecl
				{
				match(input,DOT,FOLLOW_DOT_in_synpred69_Delphi3431); if (state.failed) return;

				pushFollow(FOLLOW_typeDecl_in_synpred69_Delphi3433);
				typeDecl();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop300;
			}
		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:193:83: ( paranthesePostfix )?
		int alt301=2;
		int LA301_0 = input.LA(1);
		if ( (LA301_0==LPAREN) ) {
			alt301=1;
		}
		switch (alt301) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:193:84: paranthesePostfix
				{
				pushFollow(FOLLOW_paranthesePostfix_in_synpred69_Delphi3438);
				paranthesePostfix();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred69_Delphi

	// $ANTLR start synpred79_Delphi
	public final void synpred79_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:212:32: ( 'const' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:212:32: 'const'
		{
		match(input,CONST,FOLLOW_CONST_in_synpred79_Delphi4019); if (state.failed) return;

		}

	}
	// $ANTLR end synpred79_Delphi

	// $ANTLR start synpred80_Delphi
	public final void synpred80_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:218:40: ( 'of' typeDecl )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:218:40: 'of' typeDecl
		{
		match(input,OF,FOLLOW_OF_in_synpred80_Delphi4191); if (state.failed) return;

		pushFollow(FOLLOW_typeDecl_in_synpred80_Delphi4193);
		typeDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred80_Delphi

	// $ANTLR start synpred82_Delphi
	public final void synpred82_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:223:42: ( '[' expression ']' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:223:42: '[' expression ']'
		{
		match(input,LBRACK,FOLLOW_LBRACK_in_synpred82_Delphi4342); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred82_Delphi4344);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,RBRACK,FOLLOW_RBRACK_in_synpred82_Delphi4346); if (state.failed) return;

		}

	}
	// $ANTLR end synpred82_Delphi

	// $ANTLR start synpred85_Delphi
	public final void synpred85_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:224:54: ( codePageNumber )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:224:54: codePageNumber
		{
		pushFollow(FOLLOW_codePageNumber_in_synpred85_Delphi4393);
		codePageNumber();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred85_Delphi

	// $ANTLR start synpred86_Delphi
	public final void synpred86_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:228:32: ( methodType )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:228:32: methodType
		{
		pushFollow(FOLLOW_methodType_in_synpred86_Delphi4502);
		methodType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred86_Delphi

	// $ANTLR start synpred87_Delphi
	public final void synpred87_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:229:32: ( simpleProcedureType )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:229:32: simpleProcedureType
		{
		pushFollow(FOLLOW_simpleProcedureType_in_synpred87_Delphi4535);
		simpleProcedureType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred87_Delphi

	// $ANTLR start synpred89_Delphi
	public final void synpred89_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:234:55: ( ( ';' )? callConventionNoSemi )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:234:55: ( ';' )? callConventionNoSemi
		{
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:234:55: ( ';' )?
		int alt307=2;
		int LA307_0 = input.LA(1);
		if ( (LA307_0==SEMI) ) {
			alt307=1;
		}
		switch (alt307) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:234:56: ';'
				{
				match(input,SEMI,FOLLOW_SEMI_in_synpred89_Delphi4678); if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_callConventionNoSemi_in_synpred89_Delphi4682);
		callConventionNoSemi();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred89_Delphi

	// $ANTLR start synpred91_Delphi
	public final void synpred91_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:238:74: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:238:74: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred91_Delphi4790);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred91_Delphi

	// $ANTLR start synpred93_Delphi
	public final void synpred93_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:239:45: ( formalParameterSection )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:239:45: formalParameterSection
		{
		pushFollow(FOLLOW_formalParameterSection_in_synpred93_Delphi4845);
		formalParameterSection();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred93_Delphi

	// $ANTLR start synpred94_Delphi
	public final void synpred94_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:243:32: ( ident )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:243:32: ident
		{
		pushFollow(FOLLOW_ident_in_synpred94_Delphi4957);
		ident();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred94_Delphi

	// $ANTLR start synpred95_Delphi
	public final void synpred95_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:244:32: ( subRangeType )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:244:32: subRangeType
		{
		pushFollow(FOLLOW_subRangeType_in_synpred95_Delphi4990);
		subRangeType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred95_Delphi

	// $ANTLR start synpred96_Delphi
	public final void synpred96_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:247:49: ( '..' constExpression )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:247:49: '..' constExpression
		{
		match(input,DOTDOT,FOLLOW_DOTDOT_in_synpred96_Delphi5079); if (state.failed) return;

		pushFollow(FOLLOW_constExpression_in_synpred96_Delphi5081);
		constExpression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred96_Delphi

	// $ANTLR start synpred109_Delphi
	public final void synpred109_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:274:32: ( classTypeTypeDecl )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:274:32: classTypeTypeDecl
		{
		pushFollow(FOLLOW_classTypeTypeDecl_in_synpred109_Delphi5743);
		classTypeTypeDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred109_Delphi

	// $ANTLR start synpred110_Delphi
	public final void synpred110_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:275:32: ( classTypeDecl )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:275:32: classTypeDecl
		{
		pushFollow(FOLLOW_classTypeDecl_in_synpred110_Delphi5776);
		classTypeDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred110_Delphi

	// $ANTLR start synpred118_Delphi
	public final void synpred118_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:32: ( 'class' ( classState )? ( classParent )? ( classItem )* 'end' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:32: 'class' ( classState )? ( classParent )? ( classItem )* 'end'
		{
		match(input,CLASS,FOLLOW_CLASS_in_synpred118_Delphi6101); if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:40: ( classState )?
		int alt312=2;
		int LA312_0 = input.LA(1);
		if ( (LA312_0==ABSTRACT||LA312_0==SEALED) ) {
			alt312=1;
		}
		switch (alt312) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:41: classState
				{
				pushFollow(FOLLOW_classState_in_synpred118_Delphi6104);
				classState();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:54: ( classParent )?
		int alt313=2;
		int LA313_0 = input.LA(1);
		if ( (LA313_0==LPAREN) ) {
			alt313=1;
		}
		switch (alt313) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:55: classParent
				{
				pushFollow(FOLLOW_classParent_in_synpred118_Delphi6109);
				classParent();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:69: ( classItem )*
		loop314:
		while (true) {
			int alt314=2;
			int LA314_0 = input.LA(1);
			if ( (LA314_0==ADD||LA314_0==ANSISTRING||LA314_0==AT||LA314_0==AUTOMATED||LA314_0==BREAK||LA314_0==CLASS||(LA314_0 >= CONST && LA314_0 <= CONTINUE)||LA314_0==DEFAULT||LA314_0==DESTRUCTOR||(LA314_0 >= DQ && LA314_0 <= DW)||LA314_0==EXIT||LA314_0==EXPORT||LA314_0==FALSE||LA314_0==FINAL||LA314_0==FUNCTION||LA314_0==IMPLEMENTS||LA314_0==INDEX||LA314_0==LBRACK||LA314_0==LOCAL||LA314_0==MESSAGE||LA314_0==NAME||LA314_0==OBJECT||LA314_0==OPERATOR||LA314_0==OUT||LA314_0==POINTER||(LA314_0 >= PRIVATE && LA314_0 <= PROCEDURE)||(LA314_0 >= PROPERTY && LA314_0 <= PUBLISHED)||(LA314_0 >= READ && LA314_0 <= READONLY)||(LA314_0 >= REFERENCE && LA314_0 <= REGISTER)||LA314_0==REMOVE||LA314_0==RESOURCESTRING||LA314_0==STATIC||(LA314_0 >= STORED && LA314_0 <= STRING)||LA314_0==THREADVAR||LA314_0==TRUE||LA314_0==TYPE||LA314_0==TkIdentifier||LA314_0==UNSAFE||(LA314_0 >= VAR && LA314_0 <= VIRTUAL)||(LA314_0 >= WRITE && LA314_0 <= WRITEONLY)||LA314_0==198) ) {
				alt314=1;
			}

			switch (alt314) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:70: classItem
				{
				pushFollow(FOLLOW_classItem_in_synpred118_Delphi6114);
				classItem();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop314;
			}
		}

		match(input,END,FOLLOW_END_in_synpred118_Delphi6118); if (state.failed) return;

		}

	}
	// $ANTLR end synpred118_Delphi

	// $ANTLR start synpred119_Delphi
	public final void synpred119_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:285:41: ( classParent )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:285:41: classParent
		{
		pushFollow(FOLLOW_classParent_in_synpred119_Delphi6172);
		classParent();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred119_Delphi

	// $ANTLR start synpred122_Delphi
	public final void synpred122_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:292:32: ( visibility )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:292:32: visibility
		{
		pushFollow(FOLLOW_visibility_in_synpred122_Delphi6408);
		visibility();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred122_Delphi

	// $ANTLR start synpred123_Delphi
	public final void synpred123_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:293:32: ( classMethod )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:293:32: classMethod
		{
		pushFollow(FOLLOW_classMethod_in_synpred123_Delphi6441);
		classMethod();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred123_Delphi

	// $ANTLR start synpred124_Delphi
	public final void synpred124_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:294:32: ( classField )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:294:32: classField
		{
		pushFollow(FOLLOW_classField_in_synpred124_Delphi6474);
		classField();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred124_Delphi

	// $ANTLR start synpred125_Delphi
	public final void synpred125_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:295:32: ( classProperty )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:295:32: classProperty
		{
		pushFollow(FOLLOW_classProperty_in_synpred125_Delphi6507);
		classProperty();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred125_Delphi

	// $ANTLR start synpred132_Delphi
	public final void synpred132_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:303:32: ( classMethod )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:303:32: classMethod
		{
		pushFollow(FOLLOW_classMethod_in_synpred132_Delphi6777);
		classMethod();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred132_Delphi

	// $ANTLR start synpred133_Delphi
	public final void synpred133_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:304:32: ( classProperty )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:304:32: classProperty
		{
		pushFollow(FOLLOW_classProperty_in_synpred133_Delphi6810);
		classProperty();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred133_Delphi

	// $ANTLR start synpred140_Delphi
	public final void synpred140_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:309:32: ( interfaceKey ( classParent )? ( interfaceGuid )? ( interfaceItem )* 'end' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:309:32: interfaceKey ( classParent )? ( interfaceGuid )? ( interfaceItem )* 'end'
		{
		pushFollow(FOLLOW_interfaceKey_in_synpred140_Delphi6962);
		interfaceKey();
		state._fsp--;
		if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:309:45: ( classParent )?
		int alt315=2;
		int LA315_0 = input.LA(1);
		if ( (LA315_0==LPAREN) ) {
			alt315=1;
		}
		switch (alt315) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:309:46: classParent
				{
				pushFollow(FOLLOW_classParent_in_synpred140_Delphi6965);
				classParent();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:309:60: ( interfaceGuid )?
		int alt316=2;
		int LA316_0 = input.LA(1);
		if ( (LA316_0==LBRACK) ) {
			int LA316_1 = input.LA(2);
			if ( (LA316_1==QuotedString) ) {
				alt316=1;
			}
		}
		switch (alt316) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:309:61: interfaceGuid
				{
				pushFollow(FOLLOW_interfaceGuid_in_synpred140_Delphi6970);
				interfaceGuid();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:309:77: ( interfaceItem )*
		loop317:
		while (true) {
			int alt317=2;
			int LA317_0 = input.LA(1);
			if ( (LA317_0==CLASS||LA317_0==CONSTRUCTOR||LA317_0==DESTRUCTOR||LA317_0==FUNCTION||LA317_0==LBRACK||LA317_0==OPERATOR||LA317_0==PROCEDURE||LA317_0==PROPERTY) ) {
				alt317=1;
			}

			switch (alt317) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:309:78: interfaceItem
				{
				pushFollow(FOLLOW_interfaceItem_in_synpred140_Delphi6975);
				interfaceItem();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop317;
			}
		}

		match(input,END,FOLLOW_END_in_synpred140_Delphi6979); if (state.failed) return;

		}

	}
	// $ANTLR end synpred140_Delphi

	// $ANTLR start synpred141_Delphi
	public final void synpred141_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:311:46: ( classParent )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:311:46: classParent
		{
		pushFollow(FOLLOW_classParent_in_synpred141_Delphi7073);
		classParent();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred141_Delphi

	// $ANTLR start synpred143_Delphi
	public final void synpred143_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:319:32: ( classMethod )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:319:32: classMethod
		{
		pushFollow(FOLLOW_classMethod_in_synpred143_Delphi7316);
		classMethod();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred143_Delphi

	// $ANTLR start synpred144_Delphi
	public final void synpred144_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:320:33: ( 'class' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:320:33: 'class'
		{
		match(input,CLASS,FOLLOW_CLASS_in_synpred144_Delphi7350); if (state.failed) return;

		}

	}
	// $ANTLR end synpred144_Delphi

	// $ANTLR start synpred147_Delphi
	public final void synpred147_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:324:32: ( visibility )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:324:32: visibility
		{
		pushFollow(FOLLOW_visibility_in_synpred147_Delphi7490);
		visibility();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred147_Delphi

	// $ANTLR start synpred148_Delphi
	public final void synpred148_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:325:32: ( classMethod )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:325:32: classMethod
		{
		pushFollow(FOLLOW_classMethod_in_synpred148_Delphi7523);
		classMethod();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred148_Delphi

	// $ANTLR start synpred149_Delphi
	public final void synpred149_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:328:32: ( simpleRecord )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:328:32: simpleRecord
		{
		pushFollow(FOLLOW_simpleRecord_in_synpred149_Delphi7611);
		simpleRecord();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred149_Delphi

	// $ANTLR start synpred150_Delphi
	public final void synpred150_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:331:42: ( recordField )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:331:42: recordField
		{
		pushFollow(FOLLOW_recordField_in_synpred150_Delphi7700);
		recordField();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred150_Delphi

	// $ANTLR start synpred153_Delphi
	public final void synpred153_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:335:32: ( visibility )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:335:32: visibility
		{
		pushFollow(FOLLOW_visibility_in_synpred153_Delphi7850);
		visibility();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred153_Delphi

	// $ANTLR start synpred154_Delphi
	public final void synpred154_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:336:32: ( classMethod )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:336:32: classMethod
		{
		pushFollow(FOLLOW_classMethod_in_synpred154_Delphi7888);
		classMethod();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred154_Delphi

	// $ANTLR start synpred155_Delphi
	public final void synpred155_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:337:32: ( classProperty )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:337:32: classProperty
		{
		pushFollow(FOLLOW_classProperty_in_synpred155_Delphi7921);
		classProperty();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred155_Delphi

	// $ANTLR start synpred158_Delphi
	public final void synpred158_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:340:32: ( recordField )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:340:32: recordField
		{
		pushFollow(FOLLOW_recordField_in_synpred158_Delphi8020);
		recordField();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred158_Delphi

	// $ANTLR start synpred172_Delphi
	public final void synpred172_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:32: ( classMethod )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:32: classMethod
		{
		pushFollow(FOLLOW_classMethod_in_synpred172_Delphi8558);
		classMethod();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred172_Delphi

	// $ANTLR start synpred173_Delphi
	public final void synpred173_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:33: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred173_Delphi8646);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred173_Delphi

	// $ANTLR start synpred178_Delphi
	public final void synpred178_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:32: ( ( customAttribute )? ( 'class' )? methodKey ident ( genericDefinition )? ( formalParameterSection )? ';' ( methodDirective )* )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:32: ( customAttribute )? ( 'class' )? methodKey ident ( genericDefinition )? ( formalParameterSection )? ';' ( methodDirective )*
		{
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:32: ( customAttribute )?
		int alt318=2;
		switch ( input.LA(1) ) {
			case LBRACK:
				{
				alt318=1;
				}
				break;
			case CLASS:
				{
				int LA318_2 = input.LA(2);
				if ( (synpred173_Delphi()) ) {
					alt318=1;
				}
				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case PROCEDURE:
				{
				int LA318_3 = input.LA(2);
				if ( (synpred173_Delphi()) ) {
					alt318=1;
				}
				}
				break;
		}
		switch (alt318) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:33: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred178_Delphi8646);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:51: ( 'class' )?
		int alt319=2;
		int LA319_0 = input.LA(1);
		if ( (LA319_0==CLASS) ) {
			alt319=1;
		}
		switch (alt319) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:52: 'class'
				{
				match(input,CLASS,FOLLOW_CLASS_in_synpred178_Delphi8651); if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_methodKey_in_synpred178_Delphi8655);
		methodKey();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred178_Delphi8657);
		ident();
		state._fsp--;
		if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:78: ( genericDefinition )?
		int alt320=2;
		int LA320_0 = input.LA(1);
		if ( (LA320_0==LT) ) {
			alt320=1;
		}
		switch (alt320) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:79: genericDefinition
				{
				pushFollow(FOLLOW_genericDefinition_in_synpred178_Delphi8660);
				genericDefinition();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:99: ( formalParameterSection )?
		int alt321=2;
		int LA321_0 = input.LA(1);
		if ( (LA321_0==LPAREN) ) {
			alt321=1;
		}
		switch (alt321) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:100: formalParameterSection
				{
				pushFollow(FOLLOW_formalParameterSection_in_synpred178_Delphi8665);
				formalParameterSection();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		match(input,SEMI,FOLLOW_SEMI_in_synpred178_Delphi8669); if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:129: ( methodDirective )*
		loop322:
		while (true) {
			int alt322=2;
			int LA322_0 = input.LA(1);
			if ( (LA322_0==ABSTRACT||LA322_0==ASSEMBLER||LA322_0==CDECL||LA322_0==DEPRECATED||LA322_0==DISPID||LA322_0==DYNAMIC||(LA322_0 >= EXPERIMENTAL && LA322_0 <= EXPORT)||LA322_0==EXTERNAL||LA322_0==FAR||LA322_0==FINAL||LA322_0==INLINE||(LA322_0 >= LIBRARY && LA322_0 <= LOCAL)||LA322_0==MESSAGE||LA322_0==NEAR||(LA322_0 >= OVERLOAD && LA322_0 <= OVERRIDE)||(LA322_0 >= PASCAL && LA322_0 <= PLATFORM)||(LA322_0 >= REGISTER && LA322_0 <= REINTRODUCE)||LA322_0==SAFECALL||(LA322_0 >= STATIC && LA322_0 <= STDCALL)||LA322_0==VARARGS||LA322_0==VIRTUAL) ) {
				alt322=1;
			}

			switch (alt322) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:130: methodDirective
				{
				pushFollow(FOLLOW_methodDirective_in_synpred178_Delphi8672);
				methodDirective();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop322;
			}
		}

		}

	}
	// $ANTLR end synpred178_Delphi

	// $ANTLR start synpred179_Delphi
	public final void synpred179_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:33: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred179_Delphi8780);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred179_Delphi

	// $ANTLR start synpred183_Delphi
	public final void synpred183_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:131: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:131: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred183_Delphi8806);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred183_Delphi

	// $ANTLR start synpred185_Delphi
	public final void synpred185_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:32: ( ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( methodDirective )* )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:32: ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' ( methodDirective )*
		{
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:32: ( customAttribute )?
		int alt323=2;
		switch ( input.LA(1) ) {
			case LBRACK:
				{
				alt323=1;
				}
				break;
			case CLASS:
				{
				int LA323_2 = input.LA(2);
				if ( (synpred179_Delphi()) ) {
					alt323=1;
				}
				}
				break;
			case FUNCTION:
				{
				int LA323_3 = input.LA(2);
				if ( (synpred179_Delphi()) ) {
					alt323=1;
				}
				}
				break;
		}
		switch (alt323) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:33: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred185_Delphi8780);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:51: ( 'class' )?
		int alt324=2;
		int LA324_0 = input.LA(1);
		if ( (LA324_0==CLASS) ) {
			alt324=1;
		}
		switch (alt324) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:52: 'class'
				{
				match(input,CLASS,FOLLOW_CLASS_in_synpred185_Delphi8785); if (state.failed) return;

				}
				break;

		}

		match(input,FUNCTION,FOLLOW_FUNCTION_in_synpred185_Delphi8789); if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred185_Delphi8791);
		ident();
		state._fsp--;
		if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:79: ( genericDefinition )?
		int alt325=2;
		int LA325_0 = input.LA(1);
		if ( (LA325_0==LT) ) {
			alt325=1;
		}
		switch (alt325) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:80: genericDefinition
				{
				pushFollow(FOLLOW_genericDefinition_in_synpred185_Delphi8794);
				genericDefinition();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:100: ( formalParameterSection )?
		int alt326=2;
		int LA326_0 = input.LA(1);
		if ( (LA326_0==LPAREN) ) {
			alt326=1;
		}
		switch (alt326) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:101: formalParameterSection
				{
				pushFollow(FOLLOW_formalParameterSection_in_synpred185_Delphi8799);
				formalParameterSection();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		match(input,COLON,FOLLOW_COLON_in_synpred185_Delphi8803); if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:130: ( customAttribute )?
		int alt327=2;
		switch ( input.LA(1) ) {
			case LBRACK:
				{
				int LA327_1 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case PACKED:
				{
				int LA327_2 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case ARRAY:
				{
				int LA327_3 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case SET:
				{
				int LA327_4 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case FILE:
				{
				int LA327_5 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case CLASS:
				{
				int LA327_6 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case DISPINTERFACE:
			case INTERFACE:
				{
				int LA327_7 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case OBJECT:
				{
				int LA327_8 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case RECORD:
				{
				int LA327_9 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case POINTER2:
				{
				int LA327_10 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case POINTER:
				{
				int LA327_11 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case STRING:
				{
				int LA327_12 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case TYPE:
				{
				int LA327_13 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case ANSISTRING:
				{
				int LA327_14 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case FUNCTION:
				{
				int LA327_15 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case PROCEDURE:
				{
				int LA327_16 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case REFERENCE:
				{
				int LA327_17 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case VARIANT:
				{
				int LA327_18 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case TkIdentifier:
				{
				int LA327_19 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case 198:
				{
				int LA327_20 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case TRUE:
				{
				int LA327_21 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case LPAREN:
				{
				int LA327_22 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case AT2:
				{
				int LA327_23 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case 199:
				{
				int LA327_24 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case NOT:
				{
				int LA327_25 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case PLUS:
				{
				int LA327_26 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case MINUS:
				{
				int LA327_27 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case TkRealNum:
				{
				int LA327_28 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case TkHexNum:
			case TkIntNum:
				{
				int LA327_29 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case FALSE:
				{
				int LA327_30 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case ADD:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case DQ:
			case DW:
			case EXIT:
			case EXPORT:
			case FINAL:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OPERATOR:
			case OUT:
			case READ:
			case READONLY:
			case REGISTER:
			case REMOVE:
			case STATIC:
			case STORED:
			case STRICT:
			case UNSAFE:
			case VARARGS:
			case VIRTUAL:
			case WRITE:
			case WRITEONLY:
				{
				int LA327_31 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case NIL:
				{
				int LA327_32 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case ControlChar:
			case ControlString:
				{
				int LA327_33 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case QuotedString:
				{
				int LA327_34 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case INHERITED:
				{
				int LA327_35 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case 200:
				{
				int LA327_36 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case DOT:
				{
				int LA327_37 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case LT:
				{
				int LA327_38 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case AND:
			case AS:
			case DIV:
			case MOD:
			case OR:
			case SHL:
			case SHR:
			case SLASH:
			case STAR:
			case XOR:
				{
				int LA327_39 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case EQUAL:
				{
				int LA327_40 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case GE:
			case GT:
			case IN:
			case IS:
			case LE:
			case NOT_EQUAL:
				{
				int LA327_41 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case DOTDOT:
				{
				int LA327_42 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
			case SEMI:
				{
				int LA327_43 = input.LA(2);
				if ( (synpred183_Delphi()) ) {
					alt327=1;
				}
				}
				break;
		}
		switch (alt327) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:131: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred185_Delphi8806);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_typeDecl_in_synpred185_Delphi8810);
		typeDecl();
		state._fsp--;
		if (state.failed) return;

		match(input,SEMI,FOLLOW_SEMI_in_synpred185_Delphi8812); if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:162: ( methodDirective )*
		loop328:
		while (true) {
			int alt328=2;
			int LA328_0 = input.LA(1);
			if ( (LA328_0==ABSTRACT||LA328_0==ASSEMBLER||LA328_0==CDECL||LA328_0==DEPRECATED||LA328_0==DISPID||LA328_0==DYNAMIC||(LA328_0 >= EXPERIMENTAL && LA328_0 <= EXPORT)||LA328_0==EXTERNAL||LA328_0==FAR||LA328_0==FINAL||LA328_0==INLINE||(LA328_0 >= LIBRARY && LA328_0 <= LOCAL)||LA328_0==MESSAGE||LA328_0==NEAR||(LA328_0 >= OVERLOAD && LA328_0 <= OVERRIDE)||(LA328_0 >= PASCAL && LA328_0 <= PLATFORM)||(LA328_0 >= REGISTER && LA328_0 <= REINTRODUCE)||LA328_0==SAFECALL||(LA328_0 >= STATIC && LA328_0 <= STDCALL)||LA328_0==VARARGS||LA328_0==VIRTUAL) ) {
				alt328=1;
			}

			switch (alt328) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:163: methodDirective
				{
				pushFollow(FOLLOW_methodDirective_in_synpred185_Delphi8815);
				methodDirective();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop328;
			}
		}

		}

	}
	// $ANTLR end synpred185_Delphi

	// $ANTLR start synpred186_Delphi
	public final void synpred186_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:33: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred186_Delphi8932);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred186_Delphi

	// $ANTLR start synpred190_Delphi
	public final void synpred190_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:131: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:131: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred190_Delphi8958);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred190_Delphi

	// $ANTLR start synpred191_Delphi
	public final void synpred191_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:32: ( ( customAttribute )? ( 'class' )? 'operator' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:32: ( customAttribute )? ( 'class' )? 'operator' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';'
		{
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:32: ( customAttribute )?
		int alt329=2;
		switch ( input.LA(1) ) {
			case LBRACK:
				{
				alt329=1;
				}
				break;
			case CLASS:
				{
				int LA329_2 = input.LA(2);
				if ( (synpred186_Delphi()) ) {
					alt329=1;
				}
				}
				break;
			case OPERATOR:
				{
				int LA329_3 = input.LA(2);
				if ( (synpred186_Delphi()) ) {
					alt329=1;
				}
				}
				break;
		}
		switch (alt329) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:33: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred191_Delphi8932);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:51: ( 'class' )?
		int alt330=2;
		int LA330_0 = input.LA(1);
		if ( (LA330_0==CLASS) ) {
			alt330=1;
		}
		switch (alt330) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:52: 'class'
				{
				match(input,CLASS,FOLLOW_CLASS_in_synpred191_Delphi8937); if (state.failed) return;

				}
				break;

		}

		match(input,OPERATOR,FOLLOW_OPERATOR_in_synpred191_Delphi8941); if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred191_Delphi8943);
		ident();
		state._fsp--;
		if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:79: ( genericDefinition )?
		int alt331=2;
		int LA331_0 = input.LA(1);
		if ( (LA331_0==LT) ) {
			alt331=1;
		}
		switch (alt331) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:80: genericDefinition
				{
				pushFollow(FOLLOW_genericDefinition_in_synpred191_Delphi8946);
				genericDefinition();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:100: ( formalParameterSection )?
		int alt332=2;
		int LA332_0 = input.LA(1);
		if ( (LA332_0==LPAREN) ) {
			alt332=1;
		}
		switch (alt332) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:101: formalParameterSection
				{
				pushFollow(FOLLOW_formalParameterSection_in_synpred191_Delphi8951);
				formalParameterSection();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		match(input,COLON,FOLLOW_COLON_in_synpred191_Delphi8955); if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:130: ( customAttribute )?
		int alt333=2;
		switch ( input.LA(1) ) {
			case LBRACK:
				{
				int LA333_1 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case PACKED:
				{
				int LA333_2 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case ARRAY:
				{
				int LA333_3 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case SET:
				{
				int LA333_4 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case FILE:
				{
				int LA333_5 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case CLASS:
				{
				int LA333_6 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case DISPINTERFACE:
			case INTERFACE:
				{
				int LA333_7 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case OBJECT:
				{
				int LA333_8 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case RECORD:
				{
				int LA333_9 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case POINTER2:
				{
				int LA333_10 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case POINTER:
				{
				int LA333_11 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case STRING:
				{
				int LA333_12 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case TYPE:
				{
				int LA333_13 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case ANSISTRING:
				{
				int LA333_14 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case FUNCTION:
				{
				int LA333_15 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case PROCEDURE:
				{
				int LA333_16 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case REFERENCE:
				{
				int LA333_17 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case VARIANT:
				{
				int LA333_18 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case TkIdentifier:
				{
				int LA333_19 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case 198:
				{
				int LA333_20 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case TRUE:
				{
				int LA333_21 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case LPAREN:
				{
				int LA333_22 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case AT2:
				{
				int LA333_23 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case 199:
				{
				int LA333_24 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case NOT:
				{
				int LA333_25 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case PLUS:
				{
				int LA333_26 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case MINUS:
				{
				int LA333_27 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case TkRealNum:
				{
				int LA333_28 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case TkHexNum:
			case TkIntNum:
				{
				int LA333_29 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case FALSE:
				{
				int LA333_30 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case ADD:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case DQ:
			case DW:
			case EXIT:
			case EXPORT:
			case FINAL:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OPERATOR:
			case OUT:
			case READ:
			case READONLY:
			case REGISTER:
			case REMOVE:
			case STATIC:
			case STORED:
			case STRICT:
			case UNSAFE:
			case VARARGS:
			case VIRTUAL:
			case WRITE:
			case WRITEONLY:
				{
				int LA333_31 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case NIL:
				{
				int LA333_32 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case ControlChar:
			case ControlString:
				{
				int LA333_33 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case QuotedString:
				{
				int LA333_34 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case INHERITED:
				{
				int LA333_35 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case 200:
				{
				int LA333_36 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case DOT:
				{
				int LA333_37 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case LT:
				{
				int LA333_38 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case AND:
			case AS:
			case DIV:
			case MOD:
			case OR:
			case SHL:
			case SHR:
			case SLASH:
			case STAR:
			case XOR:
				{
				int LA333_39 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case EQUAL:
				{
				int LA333_40 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case GE:
			case GT:
			case IN:
			case IS:
			case LE:
			case NOT_EQUAL:
				{
				int LA333_41 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case DOTDOT:
				{
				int LA333_42 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
			case SEMI:
				{
				int LA333_43 = input.LA(2);
				if ( (synpred190_Delphi()) ) {
					alt333=1;
				}
				}
				break;
		}
		switch (alt333) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:363:131: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred191_Delphi8958);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_typeDecl_in_synpred191_Delphi8962);
		typeDecl();
		state._fsp--;
		if (state.failed) return;

		match(input,SEMI,FOLLOW_SEMI_in_synpred191_Delphi8964); if (state.failed) return;

		}

	}
	// $ANTLR end synpred191_Delphi

	// $ANTLR start synpred192_Delphi
	public final void synpred192_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:33: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred192_Delphi9071);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred192_Delphi

	// $ANTLR start synpred195_Delphi
	public final void synpred195_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:32: ( ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? '.' ident '=' ident ';' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:32: ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? '.' ident '=' ident ';'
		{
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:32: ( customAttribute )?
		int alt334=2;
		switch ( input.LA(1) ) {
			case LBRACK:
				{
				alt334=1;
				}
				break;
			case CLASS:
				{
				int LA334_2 = input.LA(2);
				if ( (synpred192_Delphi()) ) {
					alt334=1;
				}
				}
				break;
			case FUNCTION:
				{
				int LA334_3 = input.LA(2);
				if ( (synpred192_Delphi()) ) {
					alt334=1;
				}
				}
				break;
		}
		switch (alt334) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:33: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred195_Delphi9071);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:51: ( 'class' )?
		int alt335=2;
		int LA335_0 = input.LA(1);
		if ( (LA335_0==CLASS) ) {
			alt335=1;
		}
		switch (alt335) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:52: 'class'
				{
				match(input,CLASS,FOLLOW_CLASS_in_synpred195_Delphi9076); if (state.failed) return;

				}
				break;

		}

		match(input,FUNCTION,FOLLOW_FUNCTION_in_synpred195_Delphi9080); if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred195_Delphi9082);
		ident();
		state._fsp--;
		if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:79: ( genericDefinition )?
		int alt336=2;
		int LA336_0 = input.LA(1);
		if ( (LA336_0==LT) ) {
			alt336=1;
		}
		switch (alt336) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:80: genericDefinition
				{
				pushFollow(FOLLOW_genericDefinition_in_synpred195_Delphi9085);
				genericDefinition();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		match(input,DOT,FOLLOW_DOT_in_synpred195_Delphi9089); if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred195_Delphi9091);
		ident();
		state._fsp--;
		if (state.failed) return;

		match(input,EQUAL,FOLLOW_EQUAL_in_synpred195_Delphi9093); if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred195_Delphi9095);
		ident();
		state._fsp--;
		if (state.failed) return;

		match(input,SEMI,FOLLOW_SEMI_in_synpred195_Delphi9097); if (state.failed) return;

		}

	}
	// $ANTLR end synpred195_Delphi

	// $ANTLR start synpred196_Delphi
	public final void synpred196_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:366:33: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:366:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred196_Delphi9131);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred196_Delphi

	// $ANTLR start synpred199_Delphi
	public final void synpred199_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:368:33: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:368:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred199_Delphi9213);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred199_Delphi

	// $ANTLR start synpred201_Delphi
	public final void synpred201_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:371:33: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:371:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred201_Delphi9333);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred201_Delphi

	// $ANTLR start synpred208_Delphi
	public final void synpred208_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:378:52: ( ';' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:378:52: ';'
		{
		match(input,SEMI,FOLLOW_SEMI_in_synpred208_Delphi9593); if (state.failed) return;

		}

	}
	// $ANTLR end synpred208_Delphi

	// $ANTLR start synpred212_Delphi
	public final void synpred212_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:383:32: ( 'default' expression )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:383:32: 'default' expression
		{
		match(input,DEFAULT,FOLLOW_DEFAULT_in_synpred212_Delphi9744); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred212_Delphi9746);
		expression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred212_Delphi

	// $ANTLR start synpred213_Delphi
	public final void synpred213_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:384:32: ( 'default' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:384:32: 'default'
		{
		match(input,DEFAULT,FOLLOW_DEFAULT_in_synpred213_Delphi9779); if (state.failed) return;

		}

	}
	// $ANTLR end synpred213_Delphi

	// $ANTLR start synpred216_Delphi
	public final void synpred216_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:389:32: ( 'default' expression ';' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:389:32: 'default' expression ';'
		{
		match(input,DEFAULT,FOLLOW_DEFAULT_in_synpred216_Delphi9944); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred216_Delphi9946);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,SEMI,FOLLOW_SEMI_in_synpred216_Delphi9948); if (state.failed) return;

		}

	}
	// $ANTLR end synpred216_Delphi

	// $ANTLR start synpred217_Delphi
	public final void synpred217_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:390:32: ( 'default' ';' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:390:32: 'default' ';'
		{
		match(input,DEFAULT,FOLLOW_DEFAULT_in_synpred217_Delphi9981); if (state.failed) return;

		match(input,SEMI,FOLLOW_SEMI_in_synpred217_Delphi9983); if (state.failed) return;

		}

	}
	// $ANTLR end synpred217_Delphi

	// $ANTLR start synpred230_Delphi
	public final void synpred230_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:81: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:81: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred230_Delphi10566);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred230_Delphi

	// $ANTLR start synpred235_Delphi
	public final void synpred235_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:415:55: ( methodDirective )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:415:55: methodDirective
		{
		pushFollow(FOLLOW_methodDirective_in_synpred235_Delphi10684);
		methodDirective();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred235_Delphi

	// $ANTLR start synpred236_Delphi
	public final void synpred236_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:415:74: ( methodBody )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:415:74: methodBody
		{
		pushFollow(FOLLOW_methodBody_in_synpred236_Delphi10689);
		methodBody();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred236_Delphi

	// $ANTLR start synpred237_Delphi
	public final void synpred237_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:417:33: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:417:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred237_Delphi10749);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred237_Delphi

	// $ANTLR start synpred240_Delphi
	public final void synpred240_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:417:32: ( ( customAttribute )? ( 'class' )? methodKey methodName ( formalParameterSection )? )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:417:32: ( customAttribute )? ( 'class' )? methodKey methodName ( formalParameterSection )?
		{
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:417:32: ( customAttribute )?
		int alt343=2;
		switch ( input.LA(1) ) {
			case LBRACK:
				{
				alt343=1;
				}
				break;
			case CLASS:
				{
				int LA343_2 = input.LA(2);
				if ( (synpred237_Delphi()) ) {
					alt343=1;
				}
				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case PROCEDURE:
				{
				int LA343_3 = input.LA(2);
				if ( (synpred237_Delphi()) ) {
					alt343=1;
				}
				}
				break;
		}
		switch (alt343) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:417:33: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred240_Delphi10749);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:417:51: ( 'class' )?
		int alt344=2;
		int LA344_0 = input.LA(1);
		if ( (LA344_0==CLASS) ) {
			alt344=1;
		}
		switch (alt344) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:417:52: 'class'
				{
				match(input,CLASS,FOLLOW_CLASS_in_synpred240_Delphi10754); if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_methodKey_in_synpred240_Delphi10759);
		methodKey();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_methodName_in_synpred240_Delphi10761);
		methodName();
		state._fsp--;
		if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:417:84: ( formalParameterSection )?
		int alt345=2;
		int LA345_0 = input.LA(1);
		if ( (LA345_0==LPAREN) ) {
			alt345=1;
		}
		switch (alt345) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:417:85: formalParameterSection
				{
				pushFollow(FOLLOW_formalParameterSection_in_synpred240_Delphi10764);
				formalParameterSection();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred240_Delphi

	// $ANTLR start synpred241_Delphi
	public final void synpred241_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:33: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred241_Delphi10862);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred241_Delphi

	// $ANTLR start synpred244_Delphi
	public final void synpred244_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:116: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:116: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred244_Delphi10884);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred244_Delphi

	// $ANTLR start synpred246_Delphi
	public final void synpred246_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:32: ( ( customAttribute )? ( 'class' )? 'function' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )? )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:32: ( customAttribute )? ( 'class' )? 'function' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )?
		{
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:32: ( customAttribute )?
		int alt347=2;
		switch ( input.LA(1) ) {
			case LBRACK:
				{
				alt347=1;
				}
				break;
			case CLASS:
				{
				int LA347_2 = input.LA(2);
				if ( (synpred241_Delphi()) ) {
					alt347=1;
				}
				}
				break;
			case FUNCTION:
				{
				int LA347_3 = input.LA(2);
				if ( (synpred241_Delphi()) ) {
					alt347=1;
				}
				}
				break;
		}
		switch (alt347) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:33: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred246_Delphi10862);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:51: ( 'class' )?
		int alt348=2;
		int LA348_0 = input.LA(1);
		if ( (LA348_0==CLASS) ) {
			alt348=1;
		}
		switch (alt348) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:52: 'class'
				{
				match(input,CLASS,FOLLOW_CLASS_in_synpred246_Delphi10867); if (state.failed) return;

				}
				break;

		}

		match(input,FUNCTION,FOLLOW_FUNCTION_in_synpred246_Delphi10871); if (state.failed) return;

		pushFollow(FOLLOW_methodName_in_synpred246_Delphi10873);
		methodName();
		state._fsp--;
		if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:84: ( formalParameterSection )?
		int alt349=2;
		int LA349_0 = input.LA(1);
		if ( (LA349_0==LPAREN) ) {
			alt349=1;
		}
		switch (alt349) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:85: formalParameterSection
				{
				pushFollow(FOLLOW_formalParameterSection_in_synpred246_Delphi10876);
				formalParameterSection();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:110: ( ':' ( customAttribute )? typeDecl )?
		int alt351=2;
		int LA351_0 = input.LA(1);
		if ( (LA351_0==COLON) ) {
			alt351=1;
		}
		switch (alt351) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:111: ':' ( customAttribute )? typeDecl
				{
				match(input,COLON,FOLLOW_COLON_in_synpred246_Delphi10881); if (state.failed) return;

				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:115: ( customAttribute )?
				int alt350=2;
				switch ( input.LA(1) ) {
					case LBRACK:
						{
						int LA350_1 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case PACKED:
						{
						int LA350_2 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case ARRAY:
						{
						int LA350_3 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case SET:
						{
						int LA350_4 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case FILE:
						{
						int LA350_5 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case CLASS:
						{
						int LA350_6 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case DISPINTERFACE:
					case INTERFACE:
						{
						int LA350_7 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case OBJECT:
						{
						int LA350_8 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case RECORD:
						{
						int LA350_9 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case POINTER2:
						{
						int LA350_10 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case POINTER:
						{
						int LA350_11 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case STRING:
						{
						int LA350_12 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case TYPE:
						{
						int LA350_13 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case ANSISTRING:
						{
						int LA350_14 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case FUNCTION:
						{
						int LA350_15 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case PROCEDURE:
						{
						int LA350_16 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case REFERENCE:
						{
						int LA350_17 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case VARIANT:
						{
						int LA350_18 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case TkIdentifier:
						{
						int LA350_19 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case 198:
						{
						int LA350_20 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case TRUE:
						{
						int LA350_21 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case LPAREN:
						{
						int LA350_22 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case AT2:
						{
						int LA350_23 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case 199:
						{
						int LA350_24 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case NOT:
						{
						int LA350_25 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case PLUS:
						{
						int LA350_26 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case MINUS:
						{
						int LA350_27 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case TkRealNum:
						{
						int LA350_28 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case TkHexNum:
					case TkIntNum:
						{
						int LA350_29 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case FALSE:
						{
						int LA350_30 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case ADD:
					case AT:
					case BREAK:
					case CONTAINS:
					case CONTINUE:
					case DEFAULT:
					case DQ:
					case DW:
					case EXIT:
					case EXPORT:
					case FINAL:
					case IMPLEMENTS:
					case INDEX:
					case LOCAL:
					case MESSAGE:
					case NAME:
					case OPERATOR:
					case OUT:
					case READ:
					case READONLY:
					case REGISTER:
					case REMOVE:
					case STATIC:
					case STORED:
					case STRICT:
					case UNSAFE:
					case VARARGS:
					case VIRTUAL:
					case WRITE:
					case WRITEONLY:
						{
						int LA350_31 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case NIL:
						{
						int LA350_32 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case ControlChar:
					case ControlString:
						{
						int LA350_33 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case QuotedString:
						{
						int LA350_34 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case INHERITED:
						{
						int LA350_35 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case 200:
						{
						int LA350_36 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case DOT:
						{
						int LA350_37 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case LT:
						{
						int LA350_38 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case AND:
					case AS:
					case DIV:
					case MOD:
					case OR:
					case SHL:
					case SHR:
					case SLASH:
					case STAR:
					case XOR:
						{
						int LA350_39 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case EQUAL:
						{
						int LA350_40 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case GE:
					case GT:
					case IN:
					case IS:
					case LE:
					case NOT_EQUAL:
						{
						int LA350_41 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case DOTDOT:
						{
						int LA350_42 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
					case EOF:
						{
						int LA350_43 = input.LA(2);
						if ( (synpred244_Delphi()) ) {
							alt350=1;
						}
						}
						break;
				}
				switch (alt350) {
					case 1 :
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:419:116: customAttribute
						{
						pushFollow(FOLLOW_customAttribute_in_synpred246_Delphi10884);
						customAttribute();
						state._fsp--;
						if (state.failed) return;

						}
						break;

				}

				pushFollow(FOLLOW_typeDecl_in_synpred246_Delphi10888);
				typeDecl();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred246_Delphi

	// $ANTLR start synpred247_Delphi
	public final void synpred247_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:33: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred247_Delphi10997);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred247_Delphi

	// $ANTLR start synpred249_Delphi
	public final void synpred249_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:113: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:113: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred249_Delphi11016);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred249_Delphi

	// $ANTLR start synpred256_Delphi
	public final void synpred256_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:430:53: ( functionDirective )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:430:53: functionDirective
		{
		pushFollow(FOLLOW_functionDirective_in_synpred256_Delphi11348);
		functionDirective();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred256_Delphi

	// $ANTLR start synpred257_Delphi
	public final void synpred257_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:430:74: ( procBody )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:430:74: procBody
		{
		pushFollow(FOLLOW_procBody_in_synpred257_Delphi11353);
		procBody();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred257_Delphi

	// $ANTLR start synpred258_Delphi
	public final void synpred258_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:33: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred258_Delphi11419);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred258_Delphi

	// $ANTLR start synpred260_Delphi
	public final void synpred260_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:32: ( ( customAttribute )? 'procedure' ident ( formalParameterSection )? )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:32: ( customAttribute )? 'procedure' ident ( formalParameterSection )?
		{
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:32: ( customAttribute )?
		int alt354=2;
		int LA354_0 = input.LA(1);
		if ( (LA354_0==LBRACK) ) {
			alt354=1;
		}
		else if ( (LA354_0==PROCEDURE) ) {
			int LA354_2 = input.LA(2);
			if ( (synpred258_Delphi()) ) {
				alt354=1;
			}
		}
		switch (alt354) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:33: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred260_Delphi11419);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		match(input,PROCEDURE,FOLLOW_PROCEDURE_in_synpred260_Delphi11423); if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred260_Delphi11425);
		ident();
		state._fsp--;
		if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:69: ( formalParameterSection )?
		int alt355=2;
		int LA355_0 = input.LA(1);
		if ( (LA355_0==LPAREN) ) {
			alt355=1;
		}
		switch (alt355) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:70: formalParameterSection
				{
				pushFollow(FOLLOW_formalParameterSection_in_synpred260_Delphi11428);
				formalParameterSection();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred260_Delphi

	// $ANTLR start synpred261_Delphi
	public final void synpred261_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:33: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred261_Delphi11528);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred261_Delphi

	// $ANTLR start synpred265_Delphi
	public final void synpred265_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:441:33: ( customAttribute )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:441:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred265_Delphi11770);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred265_Delphi

	// $ANTLR start synpred271_Delphi
	public final void synpred271_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:450:47: ( functionDirective )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:450:47: functionDirective
		{
		pushFollow(FOLLOW_functionDirective_in_synpred271_Delphi12082);
		functionDirective();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred271_Delphi

	// $ANTLR start synpred273_Delphi
	public final void synpred273_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:451:44: ( 'name' expression )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:451:44: 'name' expression
		{
		match(input,NAME,FOLLOW_NAME_in_synpred273_Delphi12123); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred273_Delphi12125);
		expression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred273_Delphi

	// $ANTLR start synpred274_Delphi
	public final void synpred274_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:451:64: ( 'index' expression )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:451:64: 'index' expression
		{
		match(input,INDEX,FOLLOW_INDEX_in_synpred274_Delphi12129); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred274_Delphi12131);
		expression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred274_Delphi

	// $ANTLR start synpred275_Delphi
	public final void synpred275_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:451:86: ( functionDirective )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:451:86: functionDirective
		{
		pushFollow(FOLLOW_functionDirective_in_synpred275_Delphi12136);
		functionDirective();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred275_Delphi

	// $ANTLR start synpred277_Delphi
	public final void synpred277_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:459:33: ( customAttributeDecl )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:459:33: customAttributeDecl
		{
		pushFollow(FOLLOW_customAttributeDecl_in_synpred277_Delphi12274);
		customAttributeDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred277_Delphi

	// $ANTLR start synpred278_Delphi
	public final void synpred278_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:63: ( expressionList )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:63: expressionList
		{
		pushFollow(FOLLOW_expressionList_in_synpred278_Delphi12330);
		expressionList();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred278_Delphi

	// $ANTLR start synpred281_Delphi
	public final void synpred281_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:468:32: ( anonymousExpression )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:468:32: anonymousExpression
		{
		pushFollow(FOLLOW_anonymousExpression_in_synpred281_Delphi12473);
		anonymousExpression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred281_Delphi

	// $ANTLR start synpred282_Delphi
	public final void synpred282_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:469:50: ( relOp simpleExpression )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:469:50: relOp simpleExpression
		{
		pushFollow(FOLLOW_relOp_in_synpred282_Delphi12517);
		relOp();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_simpleExpression_in_synpred282_Delphi12519);
		simpleExpression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred282_Delphi

	// $ANTLR start synpred283_Delphi
	public final void synpred283_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:469:76: ( '=' expression )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:469:76: '=' expression
		{
		match(input,EQUAL,FOLLOW_EQUAL_in_synpred283_Delphi12524); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred283_Delphi12526);
		expression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred283_Delphi

	// $ANTLR start synpred284_Delphi
	public final void synpred284_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:471:45: ( formalParameterSection )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:471:45: formalParameterSection
		{
		pushFollow(FOLLOW_formalParameterSection_in_synpred284_Delphi12580);
		formalParameterSection();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred284_Delphi

	// $ANTLR start synpred287_Delphi
	public final void synpred287_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:474:40: ( operator factor )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:474:40: operator factor
		{
		pushFollow(FOLLOW_operator_in_synpred287_Delphi12680);
		operator();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_factor_in_synpred287_Delphi12682);
		factor();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred287_Delphi

	// $ANTLR start synpred288_Delphi
	public final void synpred288_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:476:32: ( '@' factor )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:476:32: '@' factor
		{
		match(input,AT2,FOLLOW_AT2_in_synpred288_Delphi12743); if (state.failed) return;

		pushFollow(FOLLOW_factor_in_synpred288_Delphi12745);
		factor();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred288_Delphi

	// $ANTLR start synpred289_Delphi
	public final void synpred289_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:477:32: ( '@@' factor )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:477:32: '@@' factor
		{
		match(input,199,FOLLOW_199_in_synpred289_Delphi12778); if (state.failed) return;

		pushFollow(FOLLOW_factor_in_synpred289_Delphi12780);
		factor();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred289_Delphi

	// $ANTLR start synpred290_Delphi
	public final void synpred290_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:32: ( 'not' factor )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:32: 'not' factor
		{
		match(input,NOT,FOLLOW_NOT_in_synpred290_Delphi12820); if (state.failed) return;

		pushFollow(FOLLOW_factor_in_synpred290_Delphi12822);
		factor();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred290_Delphi

	// $ANTLR start synpred291_Delphi
	public final void synpred291_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:479:32: ( '+' factor )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:479:32: '+' factor
		{
		match(input,PLUS,FOLLOW_PLUS_in_synpred291_Delphi12855); if (state.failed) return;

		pushFollow(FOLLOW_factor_in_synpred291_Delphi12857);
		factor();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred291_Delphi

	// $ANTLR start synpred292_Delphi
	public final void synpred292_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:480:32: ( '-' factor )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:480:32: '-' factor
		{
		match(input,MINUS,FOLLOW_MINUS_in_synpred292_Delphi12890); if (state.failed) return;

		pushFollow(FOLLOW_factor_in_synpred292_Delphi12892);
		factor();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred292_Delphi

	// $ANTLR start synpred293_Delphi
	public final void synpred293_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:481:32: ( '^' ident )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:481:32: '^' ident
		{
		match(input,POINTER2,FOLLOW_POINTER2_in_synpred293_Delphi12925); if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred293_Delphi12927);
		ident();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred293_Delphi

	// $ANTLR start synpred294_Delphi
	public final void synpred294_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:482:32: ( intRealNum )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:482:32: intRealNum
		{
		pushFollow(FOLLOW_intRealNum_in_synpred294_Delphi12971);
		intRealNum();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred294_Delphi

	// $ANTLR start synpred295_Delphi
	public final void synpred295_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:483:32: ( 'true' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:483:32: 'true'
		{
		match(input,TRUE,FOLLOW_TRUE_in_synpred295_Delphi13004); if (state.failed) return;

		}

	}
	// $ANTLR end synpred295_Delphi

	// $ANTLR start synpred296_Delphi
	public final void synpred296_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:484:32: ( 'false' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:484:32: 'false'
		{
		match(input,FALSE,FOLLOW_FALSE_in_synpred296_Delphi13037); if (state.failed) return;

		}

	}
	// $ANTLR end synpred296_Delphi

	// $ANTLR start synpred297_Delphi
	public final void synpred297_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:485:32: ( 'nil' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:485:32: 'nil'
		{
		match(input,NIL,FOLLOW_NIL_in_synpred297_Delphi13070); if (state.failed) return;

		}

	}
	// $ANTLR end synpred297_Delphi

	// $ANTLR start synpred298_Delphi
	public final void synpred298_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:486:52: ( '^' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:486:52: '^'
		{
		match(input,POINTER2,FOLLOW_POINTER2_in_synpred298_Delphi13110); if (state.failed) return;

		}

	}
	// $ANTLR end synpred298_Delphi

	// $ANTLR start synpred299_Delphi
	public final void synpred299_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:486:59: ( '.' expression )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:486:59: '.' expression
		{
		match(input,DOT,FOLLOW_DOT_in_synpred299_Delphi13115); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred299_Delphi13117);
		expression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred299_Delphi

	// $ANTLR start synpred300_Delphi
	public final void synpred300_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:486:32: ( '(' expression ')' ( '^' )? ( '.' expression )? )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:486:32: '(' expression ')' ( '^' )? ( '.' expression )?
		{
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred300_Delphi13103); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred300_Delphi13105);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,RPAREN,FOLLOW_RPAREN_in_synpred300_Delphi13107); if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:486:51: ( '^' )?
		int alt361=2;
		int LA361_0 = input.LA(1);
		if ( (LA361_0==POINTER2) ) {
			alt361=1;
		}
		switch (alt361) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:486:52: '^'
				{
				match(input,POINTER2,FOLLOW_POINTER2_in_synpred300_Delphi13110); if (state.failed) return;

				}
				break;

		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:486:58: ( '.' expression )?
		int alt362=2;
		int LA362_0 = input.LA(1);
		if ( (LA362_0==DOT) ) {
			alt362=1;
		}
		switch (alt362) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:486:59: '.' expression
				{
				match(input,DOT,FOLLOW_DOT_in_synpred300_Delphi13115); if (state.failed) return;

				pushFollow(FOLLOW_expression_in_synpred300_Delphi13117);
				expression();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred300_Delphi

	// $ANTLR start synpred301_Delphi
	public final void synpred301_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:46: ( '.' simpleExpression )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:46: '.' simpleExpression
		{
		match(input,DOT,FOLLOW_DOT_in_synpred301_Delphi13163); if (state.failed) return;

		pushFollow(FOLLOW_simpleExpression_in_synpred301_Delphi13165);
		simpleExpression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred301_Delphi

	// $ANTLR start synpred302_Delphi
	public final void synpred302_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:32: ( stringFactor ( '.' simpleExpression )? )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:32: stringFactor ( '.' simpleExpression )?
		{
		pushFollow(FOLLOW_stringFactor_in_synpred302_Delphi13160);
		stringFactor();
		state._fsp--;
		if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:45: ( '.' simpleExpression )?
		int alt363=2;
		int LA363_0 = input.LA(1);
		if ( (LA363_0==DOT) ) {
			alt363=1;
		}
		switch (alt363) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:46: '.' simpleExpression
				{
				match(input,DOT,FOLLOW_DOT_in_synpred302_Delphi13163); if (state.failed) return;

				pushFollow(FOLLOW_simpleExpression_in_synpred302_Delphi13165);
				simpleExpression();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred302_Delphi

	// $ANTLR start synpred303_Delphi
	public final void synpred303_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:488:32: ( setSection )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:488:32: setSection
		{
		pushFollow(FOLLOW_setSection_in_synpred303_Delphi13200);
		setSection();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred303_Delphi

	// $ANTLR start synpred304_Delphi
	public final void synpred304_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:489:32: ( designator )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:489:32: designator
		{
		pushFollow(FOLLOW_designator_in_synpred304_Delphi13233);
		designator();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred304_Delphi

	// $ANTLR start synpred307_Delphi
	public final void synpred307_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:492:63: ( QuotedString ( ControlString | ControlChar ) )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:492:63: QuotedString ( ControlString | ControlChar )
		{
		match(input,QuotedString,FOLLOW_QuotedString_in_synpred307_Delphi13334); if (state.failed) return;

		if ( (input.LA(1) >= ControlChar && input.LA(1) <= ControlString) ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		}

	}
	// $ANTLR end synpred307_Delphi

	// $ANTLR start synpred308_Delphi
	public final void synpred308_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:492:109: ( QuotedString )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:492:109: QuotedString
		{
		match(input,QuotedString,FOLLOW_QuotedString_in_synpred308_Delphi13347); if (state.failed) return;

		}

	}
	// $ANTLR end synpred308_Delphi

	// $ANTLR start synpred311_Delphi
	public final void synpred311_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:46: ( ( ControlString | ControlChar ) QuotedString )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:46: ( ControlString | ControlChar ) QuotedString
		{
		if ( (input.LA(1) >= ControlChar && input.LA(1) <= ControlString) ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		match(input,QuotedString,FOLLOW_QuotedString_in_synpred311_Delphi13393); if (state.failed) return;

		}

	}
	// $ANTLR end synpred311_Delphi

	// $ANTLR start synpred316_Delphi
	public final void synpred316_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:495:37: ( expression ( ( ',' | '..' ) expression )* )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:495:37: expression ( ( ',' | '..' ) expression )*
		{
		pushFollow(FOLLOW_expression_in_synpred316_Delphi13462);
		expression();
		state._fsp--;
		if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:495:48: ( ( ',' | '..' ) expression )*
		loop366:
		while (true) {
			int alt366=2;
			int LA366_0 = input.LA(1);
			if ( (LA366_0==COMMA||LA366_0==DOTDOT) ) {
				alt366=1;
			}

			switch (alt366) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:495:49: ( ',' | '..' ) expression
				{
				if ( input.LA(1)==COMMA||input.LA(1)==DOTDOT ) {
					input.consume();
					state.errorRecovery=false;
					state.failed=false;
				}
				else {
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					throw mse;
				}
				pushFollow(FOLLOW_expression_in_synpred316_Delphi13473);
				expression();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop366;
			}
		}

		}

	}
	// $ANTLR end synpred316_Delphi

	// $ANTLR start synpred317_Delphi
	public final void synpred317_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:33: ( 'inherited' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:33: 'inherited'
		{
		match(input,INHERITED,FOLLOW_INHERITED_in_synpred317_Delphi13536); if (state.failed) return;

		}

	}
	// $ANTLR end synpred317_Delphi

	// $ANTLR start synpred318_Delphi
	public final void synpred318_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:50: ( qualifiedIdent )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:50: qualifiedIdent
		{
		pushFollow(FOLLOW_qualifiedIdent_in_synpred318_Delphi13543);
		qualifiedIdent();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred318_Delphi

	// $ANTLR start synpred319_Delphi
	public final void synpred319_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:49: ( ( qualifiedIdent | typeId ) )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:49: ( qualifiedIdent | typeId )
		{
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:49: ( qualifiedIdent | typeId )
		int alt367=2;
		switch ( input.LA(1) ) {
		case TkIdentifier:
			{
			int LA367_1 = input.LA(2);
			if ( (synpred318_Delphi()) ) {
				alt367=1;
			}
			else if ( (true) ) {
				alt367=2;
			}

			}
			break;
		case 198:
			{
			int LA367_2 = input.LA(2);
			if ( (LA367_2==TkIdentifier) ) {
				int LA367_6 = input.LA(3);
				if ( (synpred318_Delphi()) ) {
					alt367=1;
				}
				else if ( (true) ) {
					alt367=2;
				}

			}
			else if ( ((LA367_2 >= ABSOLUTE && LA367_2 <= ASSEMBLY)||LA367_2==AT||LA367_2==AUTOMATED||(LA367_2 >= BEGIN && LA367_2 <= CLASS)||(LA367_2 >= CONST && LA367_2 <= CONTINUE)||(LA367_2 >= DEFAULT && LA367_2 <= DO)||(LA367_2 >= DOWNTO && LA367_2 <= DYNAMIC)||(LA367_2 >= ELSE && LA367_2 <= END)||(LA367_2 >= EXCEPT && LA367_2 <= FUNCTION)||LA367_2==GOTO||LA367_2==HELPER||(LA367_2 >= IF && LA367_2 <= LABEL)||(LA367_2 >= LIBRARY && LA367_2 <= LOCAL)||LA367_2==MESSAGE||(LA367_2 >= MOD && LA367_2 <= NOT)||(LA367_2 >= OBJECT && LA367_2 <= PLATFORM)||LA367_2==POINTER||(LA367_2 >= PRIVATE && LA367_2 <= PUBLISHED)||LA367_2==RAISE||(LA367_2 >= READ && LA367_2 <= RESOURCESTRING)||(LA367_2 >= SAFECALL && LA367_2 <= SEALED)||(LA367_2 >= SET && LA367_2 <= SHR)||(LA367_2 >= STATIC && LA367_2 <= TYPE)||(LA367_2 >= UNIT && LA367_2 <= USES)||(LA367_2 >= VAR && LA367_2 <= WRITEONLY)||LA367_2==XOR) ) {
				int LA367_7 = input.LA(3);
				if ( (synpred318_Delphi()) ) {
					alt367=1;
				}
				else if ( (true) ) {
					alt367=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				int nvaeMark = input.mark();
				try {
					input.consume();
					NoViableAltException nvae =
						new NoViableAltException("", 367, 2, input);
					throw nvae;
				} finally {
					input.rewind(nvaeMark);
				}
			}

			}
			break;
		case ADD:
		case ANSISTRING:
		case AT:
		case BREAK:
		case CONTAINS:
		case CONTINUE:
		case DEFAULT:
		case DQ:
		case DW:
		case EXIT:
		case EXPORT:
		case FALSE:
		case FINAL:
		case IMPLEMENTS:
		case INDEX:
		case LOCAL:
		case MESSAGE:
		case NAME:
		case OBJECT:
		case OPERATOR:
		case OUT:
		case POINTER:
		case READ:
		case READONLY:
		case REFERENCE:
		case REGISTER:
		case REMOVE:
		case STATIC:
		case STORED:
		case STRICT:
		case STRING:
		case TRUE:
		case UNSAFE:
		case VARARGS:
		case VARIANT:
		case VIRTUAL:
		case WRITE:
		case WRITEONLY:
			{
			int LA367_3 = input.LA(2);
			if ( (synpred318_Delphi()) ) {
				alt367=1;
			}
			else if ( (true) ) {
				alt367=2;
			}

			}
			break;
		default:
			if (state.backtracking>0) {state.failed=true; return;}
			NoViableAltException nvae =
				new NoViableAltException("", 367, 0, input);
			throw nvae;
		}
		switch (alt367) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:50: qualifiedIdent
				{
				pushFollow(FOLLOW_qualifiedIdent_in_synpred319_Delphi13543);
				qualifiedIdent();
				state._fsp--;
				if (state.failed) return;

				}
				break;
			case 2 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:67: typeId
				{
				pushFollow(FOLLOW_typeId_in_synpred319_Delphi13547);
				typeId();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred319_Delphi

	// $ANTLR start synpred320_Delphi
	public final void synpred320_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:79: ( designatorItem )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:498:79: designatorItem
		{
		pushFollow(FOLLOW_designatorItem_in_synpred320_Delphi13554);
		designatorItem();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred320_Delphi

	// $ANTLR start synpred331_Delphi
	public final void synpred331_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:505:37: ( expression ( colonConstruct )? ( ',' expression ( colonConstruct )? )* )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:505:37: expression ( colonConstruct )? ( ',' expression ( colonConstruct )? )*
		{
		pushFollow(FOLLOW_expression_in_synpred331_Delphi13821);
		expression();
		state._fsp--;
		if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:505:48: ( colonConstruct )?
		int alt370=2;
		int LA370_0 = input.LA(1);
		if ( (LA370_0==COLON) ) {
			alt370=1;
		}
		switch (alt370) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:505:49: colonConstruct
				{
				pushFollow(FOLLOW_colonConstruct_in_synpred331_Delphi13824);
				colonConstruct();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:505:66: ( ',' expression ( colonConstruct )? )*
		loop372:
		while (true) {
			int alt372=2;
			int LA372_0 = input.LA(1);
			if ( (LA372_0==COMMA) ) {
				alt372=1;
			}

			switch (alt372) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:505:67: ',' expression ( colonConstruct )?
				{
				match(input,COMMA,FOLLOW_COMMA_in_synpred331_Delphi13829); if (state.failed) return;

				pushFollow(FOLLOW_expression_in_synpred331_Delphi13831);
				expression();
				state._fsp--;
				if (state.failed) return;

				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:505:82: ( colonConstruct )?
				int alt371=2;
				int LA371_0 = input.LA(1);
				if ( (LA371_0==COLON) ) {
					alt371=1;
				}
				switch (alt371) {
					case 1 :
						// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:505:83: colonConstruct
						{
						pushFollow(FOLLOW_colonConstruct_in_synpred331_Delphi13834);
						colonConstruct();
						state._fsp--;
						if (state.failed) return;

						}
						break;

				}

				}
				break;

			default :
				break loop372;
			}
		}

		}

	}
	// $ANTLR end synpred331_Delphi

	// $ANTLR start synpred362_Delphi
	public final void synpred362_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:548:32: ( label ':' statement )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:548:32: label ':' statement
		{
		pushFollow(FOLLOW_label_in_synpred362_Delphi15088);
		label();
		state._fsp--;
		if (state.failed) return;

		match(input,COLON,FOLLOW_COLON_in_synpred362_Delphi15090); if (state.failed) return;

		pushFollow(FOLLOW_statement_in_synpred362_Delphi15092);
		statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred362_Delphi

	// $ANTLR start synpred363_Delphi
	public final void synpred363_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:551:66: ( 'else' statement )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:551:66: 'else' statement
		{
		match(input,ELSE,FOLLOW_ELSE_in_synpred363_Delphi15188); if (state.failed) return;

		pushFollow(FOLLOW_statement_in_synpred363_Delphi15190);
		statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred363_Delphi

	// $ANTLR start synpred370_Delphi
	public final void synpred370_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:559:42: ( statementList )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:559:42: statementList
		{
		pushFollow(FOLLOW_statementList_in_synpred370_Delphi15457);
		statementList();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred370_Delphi

	// $ANTLR start synpred371_Delphi
	public final void synpred371_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:563:32: ( 'for' designator ':=' expression 'to' expression 'do' statement )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:563:32: 'for' designator ':=' expression 'to' expression 'do' statement
		{
		match(input,FOR,FOLLOW_FOR_in_synpred371_Delphi15573); if (state.failed) return;

		pushFollow(FOLLOW_designator_in_synpred371_Delphi15575);
		designator();
		state._fsp--;
		if (state.failed) return;

		match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred371_Delphi15577); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred371_Delphi15579);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,TO,FOLLOW_TO_in_synpred371_Delphi15581); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred371_Delphi15583);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,DO,FOLLOW_DO_in_synpred371_Delphi15585); if (state.failed) return;

		pushFollow(FOLLOW_statement_in_synpred371_Delphi15587);
		statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred371_Delphi

	// $ANTLR start synpred372_Delphi
	public final void synpred372_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:564:32: ( 'for' designator ':=' expression 'downto' expression 'do' statement )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:564:32: 'for' designator ':=' expression 'downto' expression 'do' statement
		{
		match(input,FOR,FOLLOW_FOR_in_synpred372_Delphi15620); if (state.failed) return;

		pushFollow(FOLLOW_designator_in_synpred372_Delphi15622);
		designator();
		state._fsp--;
		if (state.failed) return;

		match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred372_Delphi15624); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred372_Delphi15626);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,DOWNTO,FOLLOW_DOWNTO_in_synpred372_Delphi15628); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred372_Delphi15630);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,DO,FOLLOW_DO_in_synpred372_Delphi15632); if (state.failed) return;

		pushFollow(FOLLOW_statement_in_synpred372_Delphi15634);
		statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred372_Delphi

	// $ANTLR start synpred375_Delphi
	public final void synpred375_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:573:41: ( statementList )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:573:41: statementList
		{
		pushFollow(FOLLOW_statementList_in_synpred375_Delphi15910);
		statementList();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred375_Delphi

	// $ANTLR start synpred376_Delphi
	public final void synpred376_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:575:33: ( statement )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:575:33: statement
		{
		pushFollow(FOLLOW_statement_in_synpred376_Delphi15980);
		statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred376_Delphi

	// $ANTLR start synpred377_Delphi
	public final void synpred377_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:575:51: ( statement )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:575:51: statement
		{
		pushFollow(FOLLOW_statement_in_synpred377_Delphi15988);
		statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred377_Delphi

	// $ANTLR start synpred378_Delphi
	public final void synpred378_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:575:46: ( ';' ( statement )? )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:575:46: ';' ( statement )?
		{
		match(input,SEMI,FOLLOW_SEMI_in_synpred378_Delphi15985); if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:575:50: ( statement )?
		int alt374=2;
		int LA374_0 = input.LA(1);
		if ( (LA374_0==ADD||LA374_0==ANSISTRING||LA374_0==ASM||(LA374_0 >= ASSIGN && LA374_0 <= AT2)||(LA374_0 >= BEGIN && LA374_0 <= CASE)||(LA374_0 >= CONTAINS && LA374_0 <= CONTINUE)||LA374_0==DEFAULT||LA374_0==DOT||(LA374_0 >= DQ && LA374_0 <= DW)||LA374_0==EXIT||LA374_0==EXPORT||LA374_0==FALSE||LA374_0==FINAL||LA374_0==FOR||LA374_0==GOTO||LA374_0==IF||LA374_0==IMPLEMENTS||(LA374_0 >= INDEX && LA374_0 <= INHERITED)||LA374_0==LBRACK||(LA374_0 >= LOCAL && LA374_0 <= MESSAGE)||LA374_0==NAME||LA374_0==OBJECT||LA374_0==OPERATOR||LA374_0==OUT||(LA374_0 >= POINTER && LA374_0 <= POINTER2)||LA374_0==RAISE||(LA374_0 >= READ && LA374_0 <= READONLY)||(LA374_0 >= REFERENCE && LA374_0 <= REGISTER)||(LA374_0 >= REMOVE && LA374_0 <= REPEAT)||LA374_0==STATIC||(LA374_0 >= STORED && LA374_0 <= STRING)||(LA374_0 >= TRUE && LA374_0 <= TRY)||(LA374_0 >= TkHexNum && LA374_0 <= TkIntNum)||LA374_0==UNSAFE||(LA374_0 >= VARARGS && LA374_0 <= WRITEONLY)||LA374_0==198||LA374_0==200) ) {
			alt374=1;
		}
		else if ( (LA374_0==EOF) ) {
			int LA374_2 = input.LA(2);
			if ( (synpred377_Delphi()) ) {
				alt374=1;
			}
		}
		switch (alt374) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:575:51: statement
				{
				pushFollow(FOLLOW_statement_in_synpred378_Delphi15988);
				statement();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred378_Delphi

	// $ANTLR start synpred379_Delphi
	public final void synpred379_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:577:32: ( designator ':=' expression )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:577:32: designator ':=' expression
		{
		pushFollow(FOLLOW_designator_in_synpred379_Delphi16042);
		designator();
		state._fsp--;
		if (state.failed) return;

		match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred379_Delphi16044); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred379_Delphi16046);
		expression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred379_Delphi

	// $ANTLR start synpred380_Delphi
	public final void synpred380_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:578:32: ( designator )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:578:32: designator
		{
		pushFollow(FOLLOW_designator_in_synpred380_Delphi16079);
		designator();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred380_Delphi

	// $ANTLR start synpred382_Delphi
	public final void synpred382_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:582:40: ( '(' expression ')' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:582:40: '(' expression ')'
		{
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred382_Delphi16203); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred382_Delphi16205);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,RPAREN,FOLLOW_RPAREN_in_synpred382_Delphi16207); if (state.failed) return;

		}

	}
	// $ANTLR end synpred382_Delphi

	// $ANTLR start synpred386_Delphi
	public final void synpred386_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:32: ( '(' recordConstExpression ( ';' recordConstExpression )* ')' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:32: '(' recordConstExpression ( ';' recordConstExpression )* ')'
		{
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred386_Delphi16328); if (state.failed) return;

		pushFollow(FOLLOW_recordConstExpression_in_synpred386_Delphi16330);
		recordConstExpression();
		state._fsp--;
		if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:58: ( ';' recordConstExpression )*
		loop376:
		while (true) {
			int alt376=2;
			int LA376_0 = input.LA(1);
			if ( (LA376_0==SEMI) ) {
				alt376=1;
			}

			switch (alt376) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:59: ';' recordConstExpression
				{
				match(input,SEMI,FOLLOW_SEMI_in_synpred386_Delphi16333); if (state.failed) return;

				pushFollow(FOLLOW_recordConstExpression_in_synpred386_Delphi16335);
				recordConstExpression();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop376;
			}
		}

		match(input,RPAREN,FOLLOW_RPAREN_in_synpred386_Delphi16339); if (state.failed) return;

		}

	}
	// $ANTLR end synpred386_Delphi

	// $ANTLR start synpred388_Delphi
	public final void synpred388_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:590:80: ( constExpression )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:590:80: constExpression
		{
		pushFollow(FOLLOW_constExpression_in_synpred388_Delphi16387);
		constExpression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred388_Delphi

	// $ANTLR start synpred389_Delphi
	public final void synpred389_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:590:32: ( '(' constExpression ( ',' constExpression )* ')' ( constExpression )? )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:590:32: '(' constExpression ( ',' constExpression )* ')' ( constExpression )?
		{
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred389_Delphi16373); if (state.failed) return;

		pushFollow(FOLLOW_constExpression_in_synpred389_Delphi16375);
		constExpression();
		state._fsp--;
		if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:590:52: ( ',' constExpression )*
		loop377:
		while (true) {
			int alt377=2;
			int LA377_0 = input.LA(1);
			if ( (LA377_0==COMMA) ) {
				alt377=1;
			}

			switch (alt377) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:590:53: ',' constExpression
				{
				match(input,COMMA,FOLLOW_COMMA_in_synpred389_Delphi16378); if (state.failed) return;

				pushFollow(FOLLOW_constExpression_in_synpred389_Delphi16380);
				constExpression();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop377;
			}
		}

		match(input,RPAREN,FOLLOW_RPAREN_in_synpred389_Delphi16384); if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:590:79: ( constExpression )?
		int alt378=2;
		int LA378_0 = input.LA(1);
		if ( ((LA378_0 >= ADD && LA378_0 <= ANSISTRING)||LA378_0==AS||(LA378_0 >= AT && LA378_0 <= AT2)||LA378_0==BREAK||(LA378_0 >= CONTAINS && LA378_0 <= DEFAULT)||LA378_0==DIV||LA378_0==DOT||(LA378_0 >= DQ && LA378_0 <= DW)||LA378_0==EQUAL||LA378_0==EXIT||LA378_0==EXPORT||LA378_0==FALSE||LA378_0==FINAL||(LA378_0 >= FUNCTION && LA378_0 <= GE)||LA378_0==GT||(LA378_0 >= IMPLEMENTS && LA378_0 <= INHERITED)||LA378_0==IS||LA378_0==LBRACK||LA378_0==LE||(LA378_0 >= LOCAL && LA378_0 <= NAME)||LA378_0==NIL||(LA378_0 >= NOT && LA378_0 <= OBJECT)||(LA378_0 >= OPERATOR && LA378_0 <= OUT)||(LA378_0 >= PLUS && LA378_0 <= POINTER2)||LA378_0==PROCEDURE||LA378_0==QuotedString||(LA378_0 >= READ && LA378_0 <= READONLY)||(LA378_0 >= REFERENCE && LA378_0 <= REGISTER)||LA378_0==REMOVE||(LA378_0 >= SHL && LA378_0 <= STATIC)||(LA378_0 >= STORED && LA378_0 <= STRING)||LA378_0==TRUE||(LA378_0 >= TkHexNum && LA378_0 <= TkIntNum)||LA378_0==TkRealNum||LA378_0==UNSAFE||(LA378_0 >= VARARGS && LA378_0 <= VIRTUAL)||(LA378_0 >= WRITE && LA378_0 <= WRITEONLY)||(LA378_0 >= XOR && LA378_0 <= 200)) ) {
			alt378=1;
		}
		else if ( (LA378_0==EOF) ) {
			int LA378_2 = input.LA(2);
			if ( (synpred388_Delphi()) ) {
				alt378=1;
			}
		}
		switch (alt378) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:590:80: constExpression
				{
				pushFollow(FOLLOW_constExpression_in_synpred389_Delphi16387);
				constExpression();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred389_Delphi

	// $ANTLR start synpred390_Delphi
	public final void synpred390_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:598:39: ( statementList )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:598:39: statementList
		{
		pushFollow(FOLLOW_statementList_in_synpred390_Delphi16529);
		statementList();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred390_Delphi

	// $ANTLR start synpred391_Delphi
	public final void synpred391_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:598:32: ( 'try' ( statementList )? 'except' handlerList 'end' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:598:32: 'try' ( statementList )? 'except' handlerList 'end'
		{
		match(input,TRY,FOLLOW_TRY_in_synpred391_Delphi16526); if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:598:38: ( statementList )?
		int alt379=2;
		int LA379_0 = input.LA(1);
		if ( (LA379_0==ADD||LA379_0==ANSISTRING||LA379_0==ASM||(LA379_0 >= ASSIGN && LA379_0 <= AT2)||(LA379_0 >= BEGIN && LA379_0 <= CASE)||(LA379_0 >= CONTAINS && LA379_0 <= CONTINUE)||LA379_0==DEFAULT||LA379_0==DOT||(LA379_0 >= DQ && LA379_0 <= DW)||LA379_0==EXIT||LA379_0==EXPORT||LA379_0==FALSE||LA379_0==FINAL||LA379_0==FOR||LA379_0==GOTO||LA379_0==IF||LA379_0==IMPLEMENTS||(LA379_0 >= INDEX && LA379_0 <= INHERITED)||LA379_0==LBRACK||(LA379_0 >= LOCAL && LA379_0 <= MESSAGE)||LA379_0==NAME||LA379_0==OBJECT||LA379_0==OPERATOR||LA379_0==OUT||(LA379_0 >= POINTER && LA379_0 <= POINTER2)||LA379_0==RAISE||(LA379_0 >= READ && LA379_0 <= READONLY)||(LA379_0 >= REFERENCE && LA379_0 <= REGISTER)||(LA379_0 >= REMOVE && LA379_0 <= REPEAT)||LA379_0==SEMI||LA379_0==STATIC||(LA379_0 >= STORED && LA379_0 <= STRING)||(LA379_0 >= TRUE && LA379_0 <= TRY)||(LA379_0 >= TkHexNum && LA379_0 <= TkIntNum)||LA379_0==UNSAFE||(LA379_0 >= VARARGS && LA379_0 <= WRITEONLY)||LA379_0==198||LA379_0==200) ) {
			alt379=1;
		}
		else if ( (LA379_0==EXCEPT) ) {
			int LA379_2 = input.LA(2);
			if ( (synpred390_Delphi()) ) {
				alt379=1;
			}
		}
		switch (alt379) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:598:39: statementList
				{
				pushFollow(FOLLOW_statementList_in_synpred391_Delphi16529);
				statementList();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		match(input,EXCEPT,FOLLOW_EXCEPT_in_synpred391_Delphi16533); if (state.failed) return;

		pushFollow(FOLLOW_handlerList_in_synpred391_Delphi16535);
		handlerList();
		state._fsp--;
		if (state.failed) return;

		match(input,END,FOLLOW_END_in_synpred391_Delphi16537); if (state.failed) return;

		}

	}
	// $ANTLR end synpred391_Delphi

	// $ANTLR start synpred392_Delphi
	public final void synpred392_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:599:39: ( statementList )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:599:39: statementList
		{
		pushFollow(FOLLOW_statementList_in_synpred392_Delphi16573);
		statementList();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred392_Delphi

	// $ANTLR start synpred393_Delphi
	public final void synpred393_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:599:66: ( statementList )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:599:66: statementList
		{
		pushFollow(FOLLOW_statementList_in_synpred393_Delphi16580);
		statementList();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred393_Delphi

	// $ANTLR start synpred396_Delphi
	public final void synpred396_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:601:32: ( ( handler )* ( 'else' statementList )? )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:601:32: ( handler )* ( 'else' statementList )?
		{
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:601:32: ( handler )*
		loop380:
		while (true) {
			int alt380=2;
			int LA380_0 = input.LA(1);
			if ( (LA380_0==ON) ) {
				alt380=1;
			}

			switch (alt380) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:601:33: handler
				{
				pushFollow(FOLLOW_handler_in_synpred396_Delphi16639);
				handler();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop380;
			}
		}

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:601:43: ( 'else' statementList )?
		int alt381=2;
		int LA381_0 = input.LA(1);
		if ( (LA381_0==ELSE) ) {
			alt381=1;
		}
		switch (alt381) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:601:44: 'else' statementList
				{
				match(input,ELSE,FOLLOW_ELSE_in_synpred396_Delphi16644); if (state.failed) return;

				pushFollow(FOLLOW_statementList_in_synpred396_Delphi16646);
				statementList();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred396_Delphi

	// $ANTLR start synpred399_Delphi
	public final void synpred399_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:608:32: ( statement ( ';' )? )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:608:32: statement ( ';' )?
		{
		pushFollow(FOLLOW_statement_in_synpred399_Delphi16856);
		statement();
		state._fsp--;
		if (state.failed) return;

		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:608:42: ( ';' )?
		int alt382=2;
		int LA382_0 = input.LA(1);
		if ( (LA382_0==SEMI) ) {
			alt382=1;
		}
		switch (alt382) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:608:43: ';'
				{
				match(input,SEMI,FOLLOW_SEMI_in_synpred399_Delphi16859); if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred399_Delphi

	// $ANTLR start synpred400_Delphi
	public final void synpred400_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:611:41: ( designator )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:611:41: designator
		{
		pushFollow(FOLLOW_designator_in_synpred400_Delphi16948);
		designator();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred400_Delphi

	// $ANTLR start synpred401_Delphi
	public final void synpred401_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:611:55: ( AT designator )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:611:55: AT designator
		{
		match(input,AT,FOLLOW_AT_in_synpred401_Delphi16953); if (state.failed) return;

		pushFollow(FOLLOW_designator_in_synpred401_Delphi16955);
		designator();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred401_Delphi

	// $ANTLR start synpred415_Delphi
	public final void synpred415_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:634:32: ( callConvention )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:634:32: callConvention
		{
		pushFollow(FOLLOW_callConvention_in_synpred415_Delphi17611);
		callConvention();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred415_Delphi

	// $ANTLR start synpred419_Delphi
	public final void synpred419_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:637:32: ( ( callConventionNoSemi )? externalDirective )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:637:32: ( callConventionNoSemi )? externalDirective
		{
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:637:32: ( callConventionNoSemi )?
		int alt383=2;
		int LA383_0 = input.LA(1);
		if ( (LA383_0==CDECL||LA383_0==EXPORT||LA383_0==PASCAL||LA383_0==REGISTER||LA383_0==SAFECALL||LA383_0==STDCALL) ) {
			alt383=1;
		}
		switch (alt383) {
			case 1 :
				// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:637:33: callConventionNoSemi
				{
				pushFollow(FOLLOW_callConventionNoSemi_in_synpred419_Delphi17734);
				callConventionNoSemi();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_externalDirective_in_synpred419_Delphi17738);
		externalDirective();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred419_Delphi

	// $ANTLR start synpred420_Delphi
	public final void synpred420_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:638:32: ( externalDirective )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:638:32: externalDirective
		{
		pushFollow(FOLLOW_externalDirective_in_synpred420_Delphi17781);
		externalDirective();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred420_Delphi

	// $ANTLR start synpred421_Delphi
	public final void synpred421_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:643:44: ( ';' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:643:44: ';'
		{
		match(input,SEMI,FOLLOW_SEMI_in_synpred421_Delphi17929); if (state.failed) return;

		}

	}
	// $ANTLR end synpred421_Delphi

	// $ANTLR start synpred445_Delphi
	public final void synpred445_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:681:32: ( 'external' ';' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:681:32: 'external' ';'
		{
		match(input,EXTERNAL,FOLLOW_EXTERNAL_in_synpred445_Delphi19134); if (state.failed) return;

		match(input,SEMI,FOLLOW_SEMI_in_synpred445_Delphi19136); if (state.failed) return;

		}

	}
	// $ANTLR end synpred445_Delphi

	// $ANTLR start synpred629_Delphi
	public final void synpred629_Delphi_fragment() throws RecognitionException {
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:733:34: ( ident '.' )
		// C:\\Dev\\SonarDelphi-mendrix\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:733:34: ident '.'
		{
		pushFollow(FOLLOW_ident_in_synpred629_Delphi21332);
		ident();
		state._fsp--;
		if (state.failed) return;

		match(input,DOT,FOLLOW_DOT_in_synpred629_Delphi21334); if (state.failed) return;

		}

	}
	// $ANTLR end synpred629_Delphi

	// Delegated rules

	public final boolean synpred390_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred390_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred31_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred31_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred35_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred35_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred30_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred30_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred392_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred392_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred393_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred393_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred391_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred391_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred260_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred260_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred261_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred261_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred299_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred299_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred297_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred297_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred317_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred317_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred318_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred318_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred445_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred445_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred298_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred298_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred296_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred296_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred316_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred316_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred319_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred319_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred311_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred311_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred125_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred125_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred132_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred132_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred293_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred293_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred295_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred295_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred123_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred123_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred415_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred415_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred256_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred256_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred419_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred419_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred265_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred265_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred258_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred258_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred79_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred79_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred173_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred173_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred66_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred66_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred396_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred396_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred400_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred400_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred39_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred39_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred68_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred68_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred216_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred216_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred64_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred64_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred389_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred389_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred37_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred37_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred24_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred24_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred363_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred363_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred382_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred382_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred61_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred61_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred62_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred62_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred80_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred80_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred179_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred179_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred320_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred320_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred158_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred158_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred273_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred273_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred153_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred153_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred154_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred154_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred301_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred301_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred291_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred291_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred302_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred302_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred629_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred629_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred288_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred288_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred289_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred289_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred124_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred124_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred150_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred150_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred277_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred277_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred292_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred292_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred421_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred421_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred87_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred87_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred172_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred172_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred244_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred244_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred379_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred379_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred183_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred183_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred190_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred190_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred237_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred237_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred69_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred69_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred386_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred386_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred375_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred375_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred47_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred47_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred371_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred371_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred372_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred372_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred186_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred186_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred240_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred240_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred208_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred208_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred201_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred201_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred148_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred148_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred149_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred149_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred331_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred331_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred94_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred94_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred91_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred91_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred93_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred93_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred95_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred95_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred281_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred281_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred143_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred143_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred147_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred147_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred283_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred283_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred144_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred144_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred282_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred282_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred284_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred284_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred109_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred109_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred300_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred300_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred249_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred249_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred274_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred274_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred278_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred278_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred247_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred247_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred86_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred86_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred118_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred118_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred420_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred420_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred110_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred110_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred191_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred191_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred378_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred378_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred236_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred236_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred241_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred241_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred376_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred376_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred53_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred53_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred195_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred195_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred44_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred44_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred230_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred230_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred370_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred370_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred380_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred380_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred41_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred41_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred199_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred199_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred362_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred362_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred213_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred213_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred212_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred212_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred60_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred60_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred178_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred178_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred23_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred23_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred82_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred82_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred304_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred304_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred271_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred271_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred155_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred155_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred308_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred308_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred290_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred290_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred303_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred303_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred307_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred307_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred141_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred141_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred140_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred140_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred287_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred287_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred133_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred133_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred89_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred89_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred294_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred294_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred122_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred122_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred275_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred275_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred96_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred96_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred399_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred399_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred85_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred85_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred119_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred119_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred257_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred257_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred49_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred49_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred192_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred192_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred235_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred235_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred401_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred401_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred217_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred217_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred246_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred246_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred67_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred67_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred185_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred185_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred63_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred63_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred388_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred388_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred45_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred45_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred196_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred196_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred52_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred52_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred377_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred377_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}


	protected DFA26 dfa26 = new DFA26(this);
	protected DFA30 dfa30 = new DFA30(this);
	protected DFA33 dfa33 = new DFA33(this);
	protected DFA48 dfa48 = new DFA48(this);
	protected DFA55 dfa55 = new DFA55(this);
	protected DFA59 dfa59 = new DFA59(this);
	protected DFA67 dfa67 = new DFA67(this);
	protected DFA68 dfa68 = new DFA68(this);
	protected DFA70 dfa70 = new DFA70(this);
	protected DFA86 dfa86 = new DFA86(this);
	protected DFA98 dfa98 = new DFA98(this);
	protected DFA106 dfa106 = new DFA106(this);
	protected DFA170 dfa170 = new DFA170(this);
	protected DFA188 dfa188 = new DFA188(this);
	protected DFA201 dfa201 = new DFA201(this);
	protected DFA212 dfa212 = new DFA212(this);
	protected DFA219 dfa219 = new DFA219(this);
	protected DFA230 dfa230 = new DFA230(this);
	protected DFA261 dfa261 = new DFA261(this);
	protected DFA260 dfa260 = new DFA260(this);
	static final String DFA26_eotS =
		"\145\uffff";
	static final String DFA26_eofS =
		"\1\1\144\uffff";
	static final String DFA26_minS =
		"\1\4\7\uffff\1\0\10\uffff\1\0\6\uffff\4\0\1\uffff\2\0\1\uffff\1\0\5\uffff"+
		"\1\0\2\uffff\1\0\1\uffff\1\0\5\uffff\1\0\1\uffff\1\0\1\uffff\1\0\17\uffff"+
		"\2\0\5\uffff\3\0\14\uffff\1\0\5\uffff\1\0\3\uffff";
	static final String DFA26_maxS =
		"\1\u00c8\7\uffff\1\0\10\uffff\1\0\6\uffff\4\0\1\uffff\2\0\1\uffff\1\0"+
		"\5\uffff\1\0\2\uffff\1\0\1\uffff\1\0\5\uffff\1\0\1\uffff\1\0\1\uffff\1"+
		"\0\17\uffff\2\0\5\uffff\3\0\14\uffff\1\0\5\uffff\1\0\3\uffff";
	static final String DFA26_acceptS =
		"\1\uffff\1\2\142\uffff\1\1";
	static final String DFA26_specialS =
		"\10\uffff\1\0\10\uffff\1\1\6\uffff\1\2\1\3\1\4\1\5\1\uffff\1\6\1\7\1\uffff"+
		"\1\10\5\uffff\1\11\2\uffff\1\12\1\uffff\1\13\5\uffff\1\14\1\uffff\1\15"+
		"\1\uffff\1\16\17\uffff\1\17\1\20\5\uffff\1\21\1\22\1\23\14\uffff\1\24"+
		"\5\uffff\1\25\3\uffff}>";
	static final String[] DFA26_transitionS = {
			"\1\1\1\uffff\1\141\1\1\1\141\1\uffff\3\1\2\uffff\1\141\2\1\1\uffff\1"+
			"\1\1\141\5\1\1\uffff\2\1\2\141\2\1\1\36\3\1\1\uffff\5\1\2\141\3\uffff"+
			"\4\1\1\141\1\1\1\51\2\1\1\106\1\1\1\uffff\1\141\2\1\2\uffff\2\1\1\uffff"+
			"\1\1\4\uffff\1\1\1\40\1\1\1\65\3\1\1\uffff\2\1\1\10\2\uffff\2\1\1\53"+
			"\2\1\1\141\2\1\1\21\5\1\1\141\2\1\1\133\1\1\1\141\1\1\3\uffff\3\1\1\141"+
			"\3\1\1\uffff\5\1\1\uffff\1\1\2\uffff\1\30\1\32\1\uffff\1\141\1\46\1\uffff"+
			"\1\141\2\uffff\4\1\1\uffff\1\1\1\uffff\4\1\1\141\1\1\1\35\1\116\1\141"+
			"\3\1\1\105\1\uffff\1\1\15\uffff\1\1\1\114\1\1\3\uffff\1\1\6\uffff\1\63"+
			"\1\1\2\uffff\1\1\1\61\2\141\2\uffff\1\31\1\33\1\uffff\1\1\1\115\2\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			""
	};

	static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_eotS);
	static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_eofS);
	static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_minS);
	static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_maxS);
	static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_acceptS);
	static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_specialS);
	static final short[][] DFA26_transition;

	static {
		int numStates = DFA26_transitionS.length;
		DFA26_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA26_transition[i] = DFA.unpackEncodedString(DFA26_transitionS[i]);
		}
	}

	protected class DFA26 extends DFA {

		public DFA26(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 26;
			this.eot = DFA26_eot;
			this.eof = DFA26_eof;
			this.min = DFA26_min;
			this.max = DFA26_max;
			this.accept = DFA26_accept;
			this.special = DFA26_special;
			this.transition = DFA26_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 158:41: ( constDeclaration )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA26_8 = input.LA(1);
						 
						int index26_8 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_8);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA26_17 = input.LA(1);
						 
						int index26_17 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_17);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA26_24 = input.LA(1);
						 
						int index26_24 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_24);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA26_25 = input.LA(1);
						 
						int index26_25 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_25);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA26_26 = input.LA(1);
						 
						int index26_26 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_26);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA26_27 = input.LA(1);
						 
						int index26_27 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_27);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA26_29 = input.LA(1);
						 
						int index26_29 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_29);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA26_30 = input.LA(1);
						 
						int index26_30 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_30);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA26_32 = input.LA(1);
						 
						int index26_32 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_32);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA26_38 = input.LA(1);
						 
						int index26_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_38);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA26_41 = input.LA(1);
						 
						int index26_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_41);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA26_43 = input.LA(1);
						 
						int index26_43 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_43);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA26_49 = input.LA(1);
						 
						int index26_49 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_49);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA26_51 = input.LA(1);
						 
						int index26_51 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_51);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA26_53 = input.LA(1);
						 
						int index26_53 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_53);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA26_69 = input.LA(1);
						 
						int index26_69 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_69);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA26_70 = input.LA(1);
						 
						int index26_70 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_70);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA26_76 = input.LA(1);
						 
						int index26_76 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_76);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA26_77 = input.LA(1);
						 
						int index26_77 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_77);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA26_78 = input.LA(1);
						 
						int index26_78 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_78);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA26_91 = input.LA(1);
						 
						int index26_91 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_91);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA26_97 = input.LA(1);
						 
						int index26_97 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred39_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_97);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 26, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA30_eotS =
		"\145\uffff";
	static final String DFA30_eofS =
		"\1\1\144\uffff";
	static final String DFA30_minS =
		"\1\4\7\uffff\1\0\10\uffff\1\0\6\uffff\4\0\1\uffff\2\0\1\uffff\1\0\5\uffff"+
		"\1\0\2\uffff\1\0\1\uffff\1\0\5\uffff\1\0\1\uffff\1\0\1\uffff\1\0\17\uffff"+
		"\2\0\5\uffff\3\0\14\uffff\1\0\5\uffff\1\0\3\uffff";
	static final String DFA30_maxS =
		"\1\u00c8\7\uffff\1\0\10\uffff\1\0\6\uffff\4\0\1\uffff\2\0\1\uffff\1\0"+
		"\5\uffff\1\0\2\uffff\1\0\1\uffff\1\0\5\uffff\1\0\1\uffff\1\0\1\uffff\1"+
		"\0\17\uffff\2\0\5\uffff\3\0\14\uffff\1\0\5\uffff\1\0\3\uffff";
	static final String DFA30_acceptS =
		"\1\uffff\1\2\142\uffff\1\1";
	static final String DFA30_specialS =
		"\10\uffff\1\0\10\uffff\1\1\6\uffff\1\2\1\3\1\4\1\5\1\uffff\1\6\1\7\1\uffff"+
		"\1\10\5\uffff\1\11\2\uffff\1\12\1\uffff\1\13\5\uffff\1\14\1\uffff\1\15"+
		"\1\uffff\1\16\17\uffff\1\17\1\20\5\uffff\1\21\1\22\1\23\14\uffff\1\24"+
		"\5\uffff\1\25\3\uffff}>";
	static final String[] DFA30_transitionS = {
			"\1\1\1\uffff\1\141\1\1\1\141\1\uffff\3\1\2\uffff\1\141\2\1\1\uffff\1"+
			"\1\1\141\5\1\1\uffff\2\1\2\141\2\1\1\36\3\1\1\uffff\5\1\2\141\3\uffff"+
			"\4\1\1\141\1\1\1\51\2\1\1\106\1\1\1\uffff\1\141\2\1\2\uffff\2\1\1\uffff"+
			"\1\1\4\uffff\1\1\1\40\1\1\1\65\3\1\1\uffff\2\1\1\10\2\uffff\2\1\1\53"+
			"\2\1\1\141\2\1\1\21\5\1\1\141\2\1\1\133\1\1\1\141\1\1\3\uffff\3\1\1\141"+
			"\3\1\1\uffff\5\1\1\uffff\1\1\2\uffff\1\30\1\32\1\uffff\1\141\1\46\1\uffff"+
			"\1\141\2\uffff\4\1\1\uffff\1\1\1\uffff\4\1\1\141\1\1\1\35\1\116\1\141"+
			"\3\1\1\105\1\uffff\1\1\15\uffff\1\1\1\114\1\1\3\uffff\1\1\6\uffff\1\63"+
			"\1\1\2\uffff\1\1\1\61\2\141\2\uffff\1\31\1\33\1\uffff\1\1\1\115\2\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			""
	};

	static final short[] DFA30_eot = DFA.unpackEncodedString(DFA30_eotS);
	static final short[] DFA30_eof = DFA.unpackEncodedString(DFA30_eofS);
	static final char[] DFA30_min = DFA.unpackEncodedStringToUnsignedChars(DFA30_minS);
	static final char[] DFA30_max = DFA.unpackEncodedStringToUnsignedChars(DFA30_maxS);
	static final short[] DFA30_accept = DFA.unpackEncodedString(DFA30_acceptS);
	static final short[] DFA30_special = DFA.unpackEncodedString(DFA30_specialS);
	static final short[][] DFA30_transition;

	static {
		int numStates = DFA30_transitionS.length;
		DFA30_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA30_transition[i] = DFA.unpackEncodedString(DFA30_transitionS[i]);
		}
	}

	protected class DFA30 extends DFA {

		public DFA30(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 30;
			this.eot = DFA30_eot;
			this.eof = DFA30_eof;
			this.min = DFA30_min;
			this.max = DFA30_max;
			this.accept = DFA30_accept;
			this.special = DFA30_special;
			this.transition = DFA30_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 165:55: ( typeDeclaration )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA30_8 = input.LA(1);
						 
						int index30_8 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_8);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA30_17 = input.LA(1);
						 
						int index30_17 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_17);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA30_24 = input.LA(1);
						 
						int index30_24 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_24);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA30_25 = input.LA(1);
						 
						int index30_25 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_25);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA30_26 = input.LA(1);
						 
						int index30_26 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_26);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA30_27 = input.LA(1);
						 
						int index30_27 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_27);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA30_29 = input.LA(1);
						 
						int index30_29 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_29);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA30_30 = input.LA(1);
						 
						int index30_30 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_30);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA30_32 = input.LA(1);
						 
						int index30_32 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_32);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA30_38 = input.LA(1);
						 
						int index30_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_38);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA30_41 = input.LA(1);
						 
						int index30_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_41);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA30_43 = input.LA(1);
						 
						int index30_43 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_43);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA30_49 = input.LA(1);
						 
						int index30_49 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_49);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA30_51 = input.LA(1);
						 
						int index30_51 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_51);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA30_53 = input.LA(1);
						 
						int index30_53 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_53);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA30_69 = input.LA(1);
						 
						int index30_69 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_69);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA30_70 = input.LA(1);
						 
						int index30_70 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_70);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA30_76 = input.LA(1);
						 
						int index30_76 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_76);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA30_77 = input.LA(1);
						 
						int index30_77 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_77);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA30_78 = input.LA(1);
						 
						int index30_78 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_78);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA30_91 = input.LA(1);
						 
						int index30_91 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_91);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA30_97 = input.LA(1);
						 
						int index30_97 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_97);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 30, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA33_eotS =
		"\145\uffff";
	static final String DFA33_eofS =
		"\1\1\144\uffff";
	static final String DFA33_minS =
		"\1\4\7\uffff\1\0\10\uffff\1\0\6\uffff\4\0\1\uffff\2\0\1\uffff\1\0\5\uffff"+
		"\1\0\2\uffff\1\0\1\uffff\1\0\5\uffff\1\0\1\uffff\1\0\1\uffff\1\0\17\uffff"+
		"\2\0\5\uffff\3\0\14\uffff\1\0\5\uffff\1\0\3\uffff";
	static final String DFA33_maxS =
		"\1\u00c8\7\uffff\1\0\10\uffff\1\0\6\uffff\4\0\1\uffff\2\0\1\uffff\1\0"+
		"\5\uffff\1\0\2\uffff\1\0\1\uffff\1\0\5\uffff\1\0\1\uffff\1\0\1\uffff\1"+
		"\0\17\uffff\2\0\5\uffff\3\0\14\uffff\1\0\5\uffff\1\0\3\uffff";
	static final String DFA33_acceptS =
		"\1\uffff\1\2\142\uffff\1\1";
	static final String DFA33_specialS =
		"\10\uffff\1\0\10\uffff\1\1\6\uffff\1\2\1\3\1\4\1\5\1\uffff\1\6\1\7\1\uffff"+
		"\1\10\5\uffff\1\11\2\uffff\1\12\1\uffff\1\13\5\uffff\1\14\1\uffff\1\15"+
		"\1\uffff\1\16\17\uffff\1\17\1\20\5\uffff\1\21\1\22\1\23\14\uffff\1\24"+
		"\5\uffff\1\25\3\uffff}>";
	static final String[] DFA33_transitionS = {
			"\1\1\1\uffff\1\141\1\1\1\141\1\uffff\3\1\2\uffff\1\141\2\1\1\uffff\1"+
			"\1\1\141\5\1\1\uffff\2\1\2\141\2\1\1\36\3\1\1\uffff\5\1\2\141\3\uffff"+
			"\4\1\1\141\1\1\1\51\2\1\1\106\1\1\1\uffff\1\141\2\1\2\uffff\2\1\1\uffff"+
			"\1\1\4\uffff\1\1\1\40\1\1\1\65\3\1\1\uffff\2\1\1\10\2\uffff\2\1\1\53"+
			"\2\1\1\141\2\1\1\21\5\1\1\141\2\1\1\133\1\1\1\141\1\1\3\uffff\3\1\1\141"+
			"\3\1\1\uffff\5\1\1\uffff\1\1\2\uffff\1\30\1\32\1\uffff\1\141\1\46\1\uffff"+
			"\1\141\2\uffff\4\1\1\uffff\1\1\1\uffff\4\1\1\141\1\1\1\35\1\116\1\141"+
			"\3\1\1\105\1\uffff\1\1\15\uffff\1\1\1\114\1\1\3\uffff\1\1\6\uffff\1\63"+
			"\1\1\2\uffff\1\1\1\61\2\141\2\uffff\1\31\1\33\1\uffff\1\1\1\115\2\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			""
	};

	static final short[] DFA33_eot = DFA.unpackEncodedString(DFA33_eotS);
	static final short[] DFA33_eof = DFA.unpackEncodedString(DFA33_eofS);
	static final char[] DFA33_min = DFA.unpackEncodedStringToUnsignedChars(DFA33_minS);
	static final char[] DFA33_max = DFA.unpackEncodedStringToUnsignedChars(DFA33_maxS);
	static final short[] DFA33_accept = DFA.unpackEncodedString(DFA33_acceptS);
	static final short[] DFA33_special = DFA.unpackEncodedString(DFA33_specialS);
	static final short[][] DFA33_transition;

	static {
		int numStates = DFA33_transitionS.length;
		DFA33_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA33_transition[i] = DFA.unpackEncodedString(DFA33_transitionS[i]);
		}
	}

	protected class DFA33 extends DFA {

		public DFA33(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 33;
			this.eot = DFA33_eot;
			this.eof = DFA33_eof;
			this.min = DFA33_min;
			this.max = DFA33_max;
			this.accept = DFA33_accept;
			this.special = DFA33_special;
			this.transition = DFA33_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 169:54: ( varDeclaration )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA33_8 = input.LA(1);
						 
						int index33_8 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_8);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA33_17 = input.LA(1);
						 
						int index33_17 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_17);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA33_24 = input.LA(1);
						 
						int index33_24 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_24);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA33_25 = input.LA(1);
						 
						int index33_25 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_25);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA33_26 = input.LA(1);
						 
						int index33_26 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_26);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA33_27 = input.LA(1);
						 
						int index33_27 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_27);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA33_29 = input.LA(1);
						 
						int index33_29 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_29);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA33_30 = input.LA(1);
						 
						int index33_30 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_30);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA33_32 = input.LA(1);
						 
						int index33_32 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_32);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA33_38 = input.LA(1);
						 
						int index33_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_38);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA33_41 = input.LA(1);
						 
						int index33_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_41);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA33_43 = input.LA(1);
						 
						int index33_43 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_43);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA33_49 = input.LA(1);
						 
						int index33_49 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_49);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA33_51 = input.LA(1);
						 
						int index33_51 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_51);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA33_53 = input.LA(1);
						 
						int index33_53 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_53);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA33_69 = input.LA(1);
						 
						int index33_69 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_69);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA33_70 = input.LA(1);
						 
						int index33_70 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_70);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA33_76 = input.LA(1);
						 
						int index33_76 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_76);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA33_77 = input.LA(1);
						 
						int index33_77 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_77);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA33_78 = input.LA(1);
						 
						int index33_78 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_78);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA33_91 = input.LA(1);
						 
						int index33_91 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_91);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA33_97 = input.LA(1);
						 
						int index33_97 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index33_97);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 33, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA48_eotS =
		"\165\uffff";
	static final String DFA48_eofS =
		"\1\25\164\uffff";
	static final String DFA48_minS =
		"\1\4\4\uffff\1\0\1\uffff\1\0\1\uffff\14\0\10\uffff\2\0\24\uffff\1\0\3"+
		"\uffff\1\0\6\uffff\1\0\13\uffff\1\0\1\uffff\4\0\1\uffff\2\0\1\uffff\1"+
		"\0\5\uffff\1\0\2\uffff\1\0\1\uffff\1\0\1\uffff\1\0\2\uffff\1\0\20\uffff";
	static final String DFA48_maxS =
		"\1\u00c8\4\uffff\1\0\1\uffff\1\0\1\uffff\14\0\10\uffff\2\0\24\uffff\1"+
		"\0\3\uffff\1\0\6\uffff\1\0\13\uffff\1\0\1\uffff\4\0\1\uffff\2\0\1\uffff"+
		"\1\0\5\uffff\1\0\2\uffff\1\0\1\uffff\1\0\1\uffff\1\0\2\uffff\1\0\20\uffff";
	static final String DFA48_acceptS =
		"\1\uffff\1\1\23\uffff\1\7\132\uffff\1\6\1\2\1\3\1\4\1\5";
	static final String DFA48_specialS =
		"\5\uffff\1\0\1\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
		"\1\13\1\14\1\15\10\uffff\1\16\1\17\24\uffff\1\20\3\uffff\1\21\6\uffff"+
		"\1\22\13\uffff\1\23\1\uffff\1\24\1\25\1\26\1\27\1\uffff\1\30\1\31\1\uffff"+
		"\1\32\5\uffff\1\33\2\uffff\1\34\1\uffff\1\35\1\uffff\1\36\2\uffff\1\37"+
		"\20\uffff}>";
	static final String[] DFA48_transitionS = {
			"\1\25\1\uffff\1\144\1\25\1\15\1\1\3\25\2\uffff\1\144\2\25\1\uffff\1\25"+
			"\1\144\2\25\1\5\2\25\1\uffff\2\25\2\144\2\25\1\121\3\25\1\1\5\25\2\144"+
			"\3\uffff\4\25\1\144\1\25\1\132\2\25\1\35\1\25\1\1\1\144\2\25\2\uffff"+
			"\1\16\1\25\1\uffff\1\25\4\uffff\1\25\1\122\1\25\1\141\3\25\1\1\3\25\2"+
			"\uffff\2\25\1\124\2\25\1\144\2\25\1\76\5\25\1\7\2\25\1\67\1\25\1\144"+
			"\1\25\2\uffff\1\1\3\25\1\12\1\11\1\25\1\17\1\uffff\5\25\1\uffff\1\25"+
			"\2\uffff\1\112\1\115\1\1\1\20\1\36\1\uffff\1\144\2\uffff\4\25\1\uffff"+
			"\1\25\1\1\4\25\1\144\1\25\1\117\1\63\1\13\3\25\1\24\1\uffff\1\14\15\uffff"+
			"\1\25\1\22\1\25\3\uffff\1\25\6\uffff\1\137\1\25\2\uffff\1\25\1\135\1"+
			"\21\1\144\2\uffff\1\114\1\116\1\uffff\1\25\1\23\2\25",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_eotS);
	static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_eofS);
	static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_minS);
	static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_maxS);
	static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_acceptS);
	static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_specialS);
	static final short[][] DFA48_transition;

	static {
		int numStates = DFA48_transitionS.length;
		DFA48_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA48_transition[i] = DFA.unpackEncodedString(DFA48_transitionS[i]);
		}
	}

	protected class DFA48 extends DFA {

		public DFA48(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 48;
			this.eot = DFA48_eot;
			this.eof = DFA48_eof;
			this.min = DFA48_min;
			this.max = DFA48_max;
			this.accept = DFA48_accept;
			this.special = DFA48_special;
			this.transition = DFA48_transition;
		}
		@Override
		public String getDescription() {
			return "188:1: typeDecl : ( strucType | pointerType | stringType | procedureType | variantType | ( 'type' )? typeId ( genericPostfix )? ( '.' typeDecl )* ( paranthesePostfix )? | simpleType );";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA48_5 = input.LA(1);
						 
						int index48_5 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred60_Delphi()) ) {s = 1;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_5);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA48_7 = input.LA(1);
						 
						int index48_7 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred60_Delphi()) ) {s = 1;}
						else if ( (synpred69_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_7);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA48_9 = input.LA(1);
						 
						int index48_9 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred61_Delphi()) ) {s = 113;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_9);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA48_10 = input.LA(1);
						 
						int index48_10 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred61_Delphi()) ) {s = 113;}
						else if ( (synpred69_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_10);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA48_11 = input.LA(1);
						 
						int index48_11 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred62_Delphi()) ) {s = 114;}
						else if ( (synpred69_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_11);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA48_12 = input.LA(1);
						 
						int index48_12 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred62_Delphi()) ) {s = 114;}
						else if ( (synpred69_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_12);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA48_13 = input.LA(1);
						 
						int index48_13 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred62_Delphi()) ) {s = 114;}
						else if ( (synpred69_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_13);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA48_14 = input.LA(1);
						 
						int index48_14 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred63_Delphi()) ) {s = 115;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_14);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA48_15 = input.LA(1);
						 
						int index48_15 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred63_Delphi()) ) {s = 115;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_15);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA48_16 = input.LA(1);
						 
						int index48_16 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred63_Delphi()) ) {s = 115;}
						else if ( (synpred69_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_16);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA48_17 = input.LA(1);
						 
						int index48_17 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred64_Delphi()) ) {s = 116;}
						else if ( (synpred69_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_17);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA48_18 = input.LA(1);
						 
						int index48_18 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred69_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_18);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA48_19 = input.LA(1);
						 
						int index48_19 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred69_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_19);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA48_20 = input.LA(1);
						 
						int index48_20 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred69_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_20);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA48_29 = input.LA(1);
						 
						int index48_29 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred69_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_29);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA48_30 = input.LA(1);
						 
						int index48_30 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred69_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_30);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA48_51 = input.LA(1);
						 
						int index48_51 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred69_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_51);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA48_55 = input.LA(1);
						 
						int index48_55 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred69_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_55);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA48_62 = input.LA(1);
						 
						int index48_62 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred69_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_62);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA48_74 = input.LA(1);
						 
						int index48_74 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred69_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_74);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA48_76 = input.LA(1);
						 
						int index48_76 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred69_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_76);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA48_77 = input.LA(1);
						 
						int index48_77 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred69_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_77);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA48_78 = input.LA(1);
						 
						int index48_78 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred69_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_78);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA48_79 = input.LA(1);
						 
						int index48_79 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred69_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_79);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA48_81 = input.LA(1);
						 
						int index48_81 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred69_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_81);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA48_82 = input.LA(1);
						 
						int index48_82 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred69_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_82);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA48_84 = input.LA(1);
						 
						int index48_84 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred69_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_84);
						if ( s>=0 ) return s;
						break;

					case 27 : 
						int LA48_90 = input.LA(1);
						 
						int index48_90 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred69_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_90);
						if ( s>=0 ) return s;
						break;

					case 28 : 
						int LA48_93 = input.LA(1);
						 
						int index48_93 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred69_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_93);
						if ( s>=0 ) return s;
						break;

					case 29 : 
						int LA48_95 = input.LA(1);
						 
						int index48_95 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred69_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_95);
						if ( s>=0 ) return s;
						break;

					case 30 : 
						int LA48_97 = input.LA(1);
						 
						int index48_97 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred69_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_97);
						if ( s>=0 ) return s;
						break;

					case 31 : 
						int LA48_100 = input.LA(1);
						 
						int index48_100 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred69_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index48_100);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 48, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA55_eotS =
		"\20\uffff";
	static final String DFA55_eofS =
		"\1\uffff\1\10\1\uffff\1\10\1\uffff\2\10\2\uffff\3\10\1\uffff\3\10";
	static final String DFA55_minS =
		"\1\6\1\7\1\4\1\7\1\uffff\2\7\1\6\1\uffff\3\7\1\4\3\7";
	static final String DFA55_maxS =
		"\2\u00c8\1\u00c5\1\u00c8\1\uffff\2\u00c8\1\u00c6\1\uffff\3\u00c8\1\u00c5"+
		"\3\u00c8";
	static final String DFA55_acceptS =
		"\4\uffff\1\2\3\uffff\1\1\7\uffff";
	static final String DFA55_specialS =
		"\20\uffff}>";
	static final String[] DFA55_transitionS = {
			"\1\6\1\4\1\6\1\uffff\1\4\4\uffff\1\6\1\4\3\uffff\1\6\10\uffff\2\6\2\4"+
			"\1\6\4\uffff\1\4\1\uffff\2\4\1\uffff\2\6\5\uffff\1\4\1\uffff\1\6\1\uffff"+
			"\1\6\2\uffff\1\5\2\uffff\1\6\4\uffff\2\4\1\uffff\1\4\5\uffff\1\6\1\4"+
			"\1\6\1\4\3\uffff\1\4\1\uffff\1\4\2\uffff\1\4\1\uffff\1\6\2\4\1\6\2\4"+
			"\1\6\1\uffff\1\4\1\uffff\2\4\1\6\2\uffff\1\6\1\4\1\6\6\uffff\1\4\1\6"+
			"\1\4\1\uffff\1\4\5\uffff\1\4\4\uffff\2\6\1\uffff\2\6\1\uffff\1\6\11\uffff"+
			"\4\4\1\6\1\uffff\3\6\3\uffff\1\3\17\uffff\1\4\1\1\1\4\3\uffff\1\4\6\uffff"+
			"\1\6\4\uffff\3\6\2\uffff\2\6\1\uffff\1\4\1\2\2\4",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\10\14\uffff\1\4\1\uffff\1\7"+
			"\1\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1"+
			"\uffff\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1"+
			"\4\7\uffff\1\4\1\uffff\1\4\11\uffff\1\10\22\uffff\4\4\62\uffff\1\4\2"+
			"\uffff\1\4",
			"\12\12\1\uffff\1\12\1\uffff\1\12\1\uffff\5\12\3\uffff\4\12\2\uffff\7"+
			"\12\2\uffff\4\12\2\uffff\2\12\1\uffff\17\12\1\uffff\1\12\1\uffff\1\12"+
			"\2\uffff\13\12\4\uffff\2\12\2\uffff\1\12\1\uffff\6\12\1\uffff\14\12\1"+
			"\uffff\1\12\1\uffff\7\12\1\uffff\1\12\3\uffff\13\12\1\uffff\2\12\1\uffff"+
			"\3\12\2\uffff\13\12\16\uffff\1\11\12\uffff\4\12\1\uffff\10\12\1\uffff"+
			"\1\12",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\10\14\uffff\1\4\1\uffff\1\7"+
			"\1\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1"+
			"\uffff\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1"+
			"\4\7\uffff\1\4\1\uffff\1\4\11\uffff\1\10\22\uffff\4\4\62\uffff\1\4\2"+
			"\uffff\1\4",
			"",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\10\14\uffff\1\4\1\uffff\1\7"+
			"\1\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1"+
			"\uffff\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1"+
			"\4\7\uffff\1\4\1\uffff\1\4\11\uffff\1\10\22\uffff\4\4\62\uffff\1\4\2"+
			"\uffff\1\4",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\10\14\uffff\1\4\1\uffff\1\7"+
			"\1\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1"+
			"\uffff\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1"+
			"\4\7\uffff\1\4\1\uffff\1\4\11\uffff\1\10\22\uffff\4\4\62\uffff\1\4\2"+
			"\uffff\1\4",
			"\1\15\1\uffff\1\15\6\uffff\1\15\4\uffff\1\15\10\uffff\2\15\2\uffff\1"+
			"\15\11\uffff\2\15\7\uffff\1\15\1\uffff\1\15\2\uffff\1\15\2\uffff\1\15"+
			"\15\uffff\1\15\1\uffff\1\15\13\uffff\1\15\2\uffff\1\15\2\uffff\1\15\5"+
			"\uffff\1\15\2\uffff\1\15\1\uffff\1\15\7\uffff\1\15\15\uffff\2\15\1\uffff"+
			"\2\15\1\uffff\1\15\15\uffff\1\15\1\uffff\3\15\3\uffff\1\15\20\uffff\1"+
			"\13\13\uffff\1\15\4\uffff\3\15\2\uffff\2\15\2\uffff\1\14",
			"",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\10\14\uffff\1\4\1\uffff\1\7"+
			"\1\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1"+
			"\uffff\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1"+
			"\4\7\uffff\1\4\1\uffff\1\4\11\uffff\1\10\22\uffff\4\4\62\uffff\1\4\2"+
			"\uffff\1\4",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\10\14\uffff\1\4\1\uffff\1\7"+
			"\1\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1"+
			"\uffff\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1"+
			"\4\7\uffff\1\4\1\uffff\1\4\11\uffff\1\10\22\uffff\4\4\62\uffff\1\4\2"+
			"\uffff\1\4",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\10\14\uffff\1\4\1\uffff\1\7"+
			"\1\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1"+
			"\uffff\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1"+
			"\4\7\uffff\1\4\1\uffff\1\4\11\uffff\1\10\22\uffff\4\4\62\uffff\1\4\2"+
			"\uffff\1\4",
			"\12\17\1\uffff\1\17\1\uffff\1\17\1\uffff\5\17\3\uffff\4\17\2\uffff\7"+
			"\17\2\uffff\4\17\2\uffff\2\17\1\uffff\17\17\1\uffff\1\17\1\uffff\1\17"+
			"\2\uffff\13\17\4\uffff\2\17\2\uffff\1\17\1\uffff\6\17\1\uffff\14\17\1"+
			"\uffff\1\17\1\uffff\7\17\1\uffff\1\17\3\uffff\13\17\1\uffff\2\17\1\uffff"+
			"\3\17\2\uffff\13\17\16\uffff\1\16\12\uffff\4\17\1\uffff\10\17\1\uffff"+
			"\1\17",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\10\14\uffff\1\4\1\uffff\1\7"+
			"\1\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1"+
			"\uffff\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1"+
			"\4\7\uffff\1\4\1\uffff\1\4\11\uffff\1\10\22\uffff\4\4\62\uffff\1\4\2"+
			"\uffff\1\4",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\10\14\uffff\1\4\1\uffff\1\7"+
			"\1\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1"+
			"\uffff\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1"+
			"\4\7\uffff\1\4\1\uffff\1\4\11\uffff\1\10\22\uffff\4\4\62\uffff\1\4\2"+
			"\uffff\1\4",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\10\14\uffff\1\4\1\uffff\1\7"+
			"\1\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1"+
			"\uffff\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1"+
			"\4\7\uffff\1\4\1\uffff\1\4\11\uffff\1\10\22\uffff\4\4\62\uffff\1\4\2"+
			"\uffff\1\4"
	};

	static final short[] DFA55_eot = DFA.unpackEncodedString(DFA55_eotS);
	static final short[] DFA55_eof = DFA.unpackEncodedString(DFA55_eofS);
	static final char[] DFA55_min = DFA.unpackEncodedStringToUnsignedChars(DFA55_minS);
	static final char[] DFA55_max = DFA.unpackEncodedStringToUnsignedChars(DFA55_maxS);
	static final short[] DFA55_accept = DFA.unpackEncodedString(DFA55_acceptS);
	static final short[] DFA55_special = DFA.unpackEncodedString(DFA55_specialS);
	static final short[][] DFA55_transition;

	static {
		int numStates = DFA55_transitionS.length;
		DFA55_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA55_transition[i] = DFA.unpackEncodedString(DFA55_transitionS[i]);
		}
	}

	protected class DFA55 extends DFA {

		public DFA55(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 55;
			this.eot = DFA55_eot;
			this.eof = DFA55_eof;
			this.min = DFA55_min;
			this.max = DFA55_max;
			this.accept = DFA55_accept;
			this.special = DFA55_special;
			this.transition = DFA55_transition;
		}
		@Override
		public String getDescription() {
			return "208:1: arrayIndex : ( typeId | expression '..' expression );";
		}
	}

	static final String DFA59_eotS =
		"\145\uffff";
	static final String DFA59_eofS =
		"\1\2\144\uffff";
	static final String DFA59_minS =
		"\1\4\1\0\143\uffff";
	static final String DFA59_maxS =
		"\1\u00c8\1\0\143\uffff";
	static final String DFA59_acceptS =
		"\2\uffff\1\2\141\uffff\1\1";
	static final String DFA59_specialS =
		"\1\uffff\1\0\143\uffff}>";
	static final String[] DFA59_transitionS = {
			"\1\2\1\uffff\3\2\1\uffff\3\2\2\uffff\3\2\1\uffff\7\2\1\uffff\12\2\1\uffff"+
			"\7\2\3\uffff\13\2\1\uffff\3\2\2\uffff\2\2\1\uffff\1\2\4\uffff\7\2\1\uffff"+
			"\2\2\1\1\2\uffff\25\2\3\uffff\7\2\1\uffff\5\2\1\uffff\1\2\2\uffff\2\2"+
			"\1\uffff\2\2\1\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff\15\2\1\uffff"+
			"\1\2\15\uffff\3\2\3\uffff\1\2\6\uffff\2\2\2\uffff\4\2\2\uffff\2\2\1\uffff"+
			"\4\2",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA59_eot = DFA.unpackEncodedString(DFA59_eotS);
	static final short[] DFA59_eof = DFA.unpackEncodedString(DFA59_eofS);
	static final char[] DFA59_min = DFA.unpackEncodedStringToUnsignedChars(DFA59_minS);
	static final char[] DFA59_max = DFA.unpackEncodedStringToUnsignedChars(DFA59_maxS);
	static final short[] DFA59_accept = DFA.unpackEncodedString(DFA59_acceptS);
	static final short[] DFA59_special = DFA.unpackEncodedString(DFA59_specialS);
	static final short[][] DFA59_transition;

	static {
		int numStates = DFA59_transitionS.length;
		DFA59_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA59_transition[i] = DFA.unpackEncodedString(DFA59_transitionS[i]);
		}
	}

	protected class DFA59 extends DFA {

		public DFA59(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 59;
			this.eot = DFA59_eot;
			this.eof = DFA59_eof;
			this.min = DFA59_min;
			this.max = DFA59_max;
			this.accept = DFA59_accept;
			this.special = DFA59_special;
			this.transition = DFA59_transition;
		}
		@Override
		public String getDescription() {
			return "223:41: ( '[' expression ']' )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA59_1 = input.LA(1);
						 
						int index59_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred82_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index59_1);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 59, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA67_eotS =
		"\162\uffff";
	static final String DFA67_eofS =
		"\1\64\161\uffff";
	static final String DFA67_minS =
		"\1\4\157\0\2\uffff";
	static final String DFA67_maxS =
		"\1\u00c8\157\0\2\uffff";
	static final String DFA67_acceptS =
		"\160\uffff\1\1\1\2";
	static final String DFA67_specialS =
		"\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
		"\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
		"\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
		"\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
		"\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
		"\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117\1\120"+
		"\1\121\1\122\1\123\1\124\1\125\1\126\1\127\1\130\1\131\1\132\1\133\1\134"+
		"\1\135\1\136\1\137\1\140\1\141\1\142\1\143\1\144\1\145\1\146\1\147\1\150"+
		"\1\151\1\152\1\153\1\154\1\155\1\156\2\uffff}>";
	static final String[] DFA67_transitionS = {
			"\1\63\1\uffff\1\144\1\47\1\16\1\3\1\47\1\111\1\127\2\uffff\1\144\1\27"+
			"\1\74\1\uffff\1\110\1\144\1\103\1\56\1\6\1\145\1\65\1\uffff\1\100\1\75"+
			"\2\144\2\41\1\121\1\57\1\75\1\120\1\7\1\47\1\155\1\45\1\52\1\157\2\144"+
			"\3\uffff\1\147\1\102\1\50\1\152\1\144\1\60\1\132\1\107\1\140\1\36\1\134"+
			"\1\5\1\144\1\150\1\153\2\uffff\1\17\1\66\1\uffff\1\51\4\uffff\1\143\1"+
			"\122\1\66\1\141\1\43\1\142\1\126\1\7\1\66\1\106\1\1\2\uffff\1\66\1\62"+
			"\1\124\1\26\1\46\1\144\1\33\1\47\1\76\1\136\1\40\1\123\1\31\1\66\1\10"+
			"\1\53\1\154\1\67\1\47\1\144\1\125\2\uffff\1\2\1\130\1\61\1\32\1\13\1"+
			"\12\1\71\1\20\1\uffff\1\77\1\70\1\72\1\73\1\42\1\uffff\1\105\2\uffff"+
			"\1\112\1\115\1\11\1\21\1\37\1\uffff\1\144\2\uffff\1\113\1\100\1\104\1"+
			"\131\1\uffff\1\54\1\4\4\47\1\144\1\133\1\117\1\55\1\14\1\146\1\101\1"+
			"\156\1\25\1\uffff\1\15\15\uffff\1\35\1\23\1\35\3\uffff\1\34\6\uffff\1"+
			"\137\1\151\2\uffff\1\101\1\135\1\22\1\144\2\uffff\1\114\1\116\1\uffff"+
			"\1\47\1\24\1\30\1\44",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			""
	};

	static final short[] DFA67_eot = DFA.unpackEncodedString(DFA67_eotS);
	static final short[] DFA67_eof = DFA.unpackEncodedString(DFA67_eofS);
	static final char[] DFA67_min = DFA.unpackEncodedStringToUnsignedChars(DFA67_minS);
	static final char[] DFA67_max = DFA.unpackEncodedStringToUnsignedChars(DFA67_maxS);
	static final short[] DFA67_accept = DFA.unpackEncodedString(DFA67_acceptS);
	static final short[] DFA67_special = DFA.unpackEncodedString(DFA67_specialS);
	static final short[][] DFA67_transition;

	static {
		int numStates = DFA67_transitionS.length;
		DFA67_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA67_transition[i] = DFA.unpackEncodedString(DFA67_transitionS[i]);
		}
	}

	protected class DFA67 extends DFA {

		public DFA67(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 67;
			this.eot = DFA67_eot;
			this.eof = DFA67_eof;
			this.min = DFA67_min;
			this.max = DFA67_max;
			this.accept = DFA67_accept;
			this.special = DFA67_special;
			this.transition = DFA67_transition;
		}
		@Override
		public String getDescription() {
			return "238:73: ( customAttribute )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA67_1 = input.LA(1);
						 
						int index67_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_1);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA67_2 = input.LA(1);
						 
						int index67_2 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_2);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA67_3 = input.LA(1);
						 
						int index67_3 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_3);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA67_4 = input.LA(1);
						 
						int index67_4 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_4);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA67_5 = input.LA(1);
						 
						int index67_5 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_5);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA67_6 = input.LA(1);
						 
						int index67_6 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_6);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA67_7 = input.LA(1);
						 
						int index67_7 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_7);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA67_8 = input.LA(1);
						 
						int index67_8 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_8);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA67_9 = input.LA(1);
						 
						int index67_9 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_9);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA67_10 = input.LA(1);
						 
						int index67_10 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_10);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA67_11 = input.LA(1);
						 
						int index67_11 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_11);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA67_12 = input.LA(1);
						 
						int index67_12 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_12);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA67_13 = input.LA(1);
						 
						int index67_13 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_13);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA67_14 = input.LA(1);
						 
						int index67_14 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_14);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA67_15 = input.LA(1);
						 
						int index67_15 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_15);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA67_16 = input.LA(1);
						 
						int index67_16 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_16);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA67_17 = input.LA(1);
						 
						int index67_17 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_17);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA67_18 = input.LA(1);
						 
						int index67_18 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_18);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA67_19 = input.LA(1);
						 
						int index67_19 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_19);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA67_20 = input.LA(1);
						 
						int index67_20 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_20);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA67_21 = input.LA(1);
						 
						int index67_21 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_21);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA67_22 = input.LA(1);
						 
						int index67_22 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_22);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA67_23 = input.LA(1);
						 
						int index67_23 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_23);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA67_24 = input.LA(1);
						 
						int index67_24 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_24);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA67_25 = input.LA(1);
						 
						int index67_25 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_25);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA67_26 = input.LA(1);
						 
						int index67_26 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_26);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA67_27 = input.LA(1);
						 
						int index67_27 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_27);
						if ( s>=0 ) return s;
						break;

					case 27 : 
						int LA67_28 = input.LA(1);
						 
						int index67_28 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_28);
						if ( s>=0 ) return s;
						break;

					case 28 : 
						int LA67_29 = input.LA(1);
						 
						int index67_29 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_29);
						if ( s>=0 ) return s;
						break;

					case 29 : 
						int LA67_30 = input.LA(1);
						 
						int index67_30 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_30);
						if ( s>=0 ) return s;
						break;

					case 30 : 
						int LA67_31 = input.LA(1);
						 
						int index67_31 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_31);
						if ( s>=0 ) return s;
						break;

					case 31 : 
						int LA67_32 = input.LA(1);
						 
						int index67_32 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_32);
						if ( s>=0 ) return s;
						break;

					case 32 : 
						int LA67_33 = input.LA(1);
						 
						int index67_33 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_33);
						if ( s>=0 ) return s;
						break;

					case 33 : 
						int LA67_34 = input.LA(1);
						 
						int index67_34 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_34);
						if ( s>=0 ) return s;
						break;

					case 34 : 
						int LA67_35 = input.LA(1);
						 
						int index67_35 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_35);
						if ( s>=0 ) return s;
						break;

					case 35 : 
						int LA67_36 = input.LA(1);
						 
						int index67_36 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_36);
						if ( s>=0 ) return s;
						break;

					case 36 : 
						int LA67_37 = input.LA(1);
						 
						int index67_37 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_37);
						if ( s>=0 ) return s;
						break;

					case 37 : 
						int LA67_38 = input.LA(1);
						 
						int index67_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_38);
						if ( s>=0 ) return s;
						break;

					case 38 : 
						int LA67_39 = input.LA(1);
						 
						int index67_39 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_39);
						if ( s>=0 ) return s;
						break;

					case 39 : 
						int LA67_40 = input.LA(1);
						 
						int index67_40 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_40);
						if ( s>=0 ) return s;
						break;

					case 40 : 
						int LA67_41 = input.LA(1);
						 
						int index67_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_41);
						if ( s>=0 ) return s;
						break;

					case 41 : 
						int LA67_42 = input.LA(1);
						 
						int index67_42 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_42);
						if ( s>=0 ) return s;
						break;

					case 42 : 
						int LA67_43 = input.LA(1);
						 
						int index67_43 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_43);
						if ( s>=0 ) return s;
						break;

					case 43 : 
						int LA67_44 = input.LA(1);
						 
						int index67_44 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_44);
						if ( s>=0 ) return s;
						break;

					case 44 : 
						int LA67_45 = input.LA(1);
						 
						int index67_45 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_45);
						if ( s>=0 ) return s;
						break;

					case 45 : 
						int LA67_46 = input.LA(1);
						 
						int index67_46 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_46);
						if ( s>=0 ) return s;
						break;

					case 46 : 
						int LA67_47 = input.LA(1);
						 
						int index67_47 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_47);
						if ( s>=0 ) return s;
						break;

					case 47 : 
						int LA67_48 = input.LA(1);
						 
						int index67_48 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_48);
						if ( s>=0 ) return s;
						break;

					case 48 : 
						int LA67_49 = input.LA(1);
						 
						int index67_49 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_49);
						if ( s>=0 ) return s;
						break;

					case 49 : 
						int LA67_50 = input.LA(1);
						 
						int index67_50 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_50);
						if ( s>=0 ) return s;
						break;

					case 50 : 
						int LA67_51 = input.LA(1);
						 
						int index67_51 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_51);
						if ( s>=0 ) return s;
						break;

					case 51 : 
						int LA67_52 = input.LA(1);
						 
						int index67_52 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_52);
						if ( s>=0 ) return s;
						break;

					case 52 : 
						int LA67_53 = input.LA(1);
						 
						int index67_53 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_53);
						if ( s>=0 ) return s;
						break;

					case 53 : 
						int LA67_54 = input.LA(1);
						 
						int index67_54 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_54);
						if ( s>=0 ) return s;
						break;

					case 54 : 
						int LA67_55 = input.LA(1);
						 
						int index67_55 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_55);
						if ( s>=0 ) return s;
						break;

					case 55 : 
						int LA67_56 = input.LA(1);
						 
						int index67_56 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_56);
						if ( s>=0 ) return s;
						break;

					case 56 : 
						int LA67_57 = input.LA(1);
						 
						int index67_57 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_57);
						if ( s>=0 ) return s;
						break;

					case 57 : 
						int LA67_58 = input.LA(1);
						 
						int index67_58 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_58);
						if ( s>=0 ) return s;
						break;

					case 58 : 
						int LA67_59 = input.LA(1);
						 
						int index67_59 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_59);
						if ( s>=0 ) return s;
						break;

					case 59 : 
						int LA67_60 = input.LA(1);
						 
						int index67_60 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_60);
						if ( s>=0 ) return s;
						break;

					case 60 : 
						int LA67_61 = input.LA(1);
						 
						int index67_61 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_61);
						if ( s>=0 ) return s;
						break;

					case 61 : 
						int LA67_62 = input.LA(1);
						 
						int index67_62 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_62);
						if ( s>=0 ) return s;
						break;

					case 62 : 
						int LA67_63 = input.LA(1);
						 
						int index67_63 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_63);
						if ( s>=0 ) return s;
						break;

					case 63 : 
						int LA67_64 = input.LA(1);
						 
						int index67_64 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_64);
						if ( s>=0 ) return s;
						break;

					case 64 : 
						int LA67_65 = input.LA(1);
						 
						int index67_65 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_65);
						if ( s>=0 ) return s;
						break;

					case 65 : 
						int LA67_66 = input.LA(1);
						 
						int index67_66 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_66);
						if ( s>=0 ) return s;
						break;

					case 66 : 
						int LA67_67 = input.LA(1);
						 
						int index67_67 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_67);
						if ( s>=0 ) return s;
						break;

					case 67 : 
						int LA67_68 = input.LA(1);
						 
						int index67_68 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_68);
						if ( s>=0 ) return s;
						break;

					case 68 : 
						int LA67_69 = input.LA(1);
						 
						int index67_69 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_69);
						if ( s>=0 ) return s;
						break;

					case 69 : 
						int LA67_70 = input.LA(1);
						 
						int index67_70 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_70);
						if ( s>=0 ) return s;
						break;

					case 70 : 
						int LA67_71 = input.LA(1);
						 
						int index67_71 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_71);
						if ( s>=0 ) return s;
						break;

					case 71 : 
						int LA67_72 = input.LA(1);
						 
						int index67_72 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_72);
						if ( s>=0 ) return s;
						break;

					case 72 : 
						int LA67_73 = input.LA(1);
						 
						int index67_73 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_73);
						if ( s>=0 ) return s;
						break;

					case 73 : 
						int LA67_74 = input.LA(1);
						 
						int index67_74 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_74);
						if ( s>=0 ) return s;
						break;

					case 74 : 
						int LA67_75 = input.LA(1);
						 
						int index67_75 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_75);
						if ( s>=0 ) return s;
						break;

					case 75 : 
						int LA67_76 = input.LA(1);
						 
						int index67_76 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_76);
						if ( s>=0 ) return s;
						break;

					case 76 : 
						int LA67_77 = input.LA(1);
						 
						int index67_77 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_77);
						if ( s>=0 ) return s;
						break;

					case 77 : 
						int LA67_78 = input.LA(1);
						 
						int index67_78 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_78);
						if ( s>=0 ) return s;
						break;

					case 78 : 
						int LA67_79 = input.LA(1);
						 
						int index67_79 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_79);
						if ( s>=0 ) return s;
						break;

					case 79 : 
						int LA67_80 = input.LA(1);
						 
						int index67_80 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_80);
						if ( s>=0 ) return s;
						break;

					case 80 : 
						int LA67_81 = input.LA(1);
						 
						int index67_81 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_81);
						if ( s>=0 ) return s;
						break;

					case 81 : 
						int LA67_82 = input.LA(1);
						 
						int index67_82 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_82);
						if ( s>=0 ) return s;
						break;

					case 82 : 
						int LA67_83 = input.LA(1);
						 
						int index67_83 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_83);
						if ( s>=0 ) return s;
						break;

					case 83 : 
						int LA67_84 = input.LA(1);
						 
						int index67_84 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_84);
						if ( s>=0 ) return s;
						break;

					case 84 : 
						int LA67_85 = input.LA(1);
						 
						int index67_85 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_85);
						if ( s>=0 ) return s;
						break;

					case 85 : 
						int LA67_86 = input.LA(1);
						 
						int index67_86 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_86);
						if ( s>=0 ) return s;
						break;

					case 86 : 
						int LA67_87 = input.LA(1);
						 
						int index67_87 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_87);
						if ( s>=0 ) return s;
						break;

					case 87 : 
						int LA67_88 = input.LA(1);
						 
						int index67_88 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_88);
						if ( s>=0 ) return s;
						break;

					case 88 : 
						int LA67_89 = input.LA(1);
						 
						int index67_89 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_89);
						if ( s>=0 ) return s;
						break;

					case 89 : 
						int LA67_90 = input.LA(1);
						 
						int index67_90 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_90);
						if ( s>=0 ) return s;
						break;

					case 90 : 
						int LA67_91 = input.LA(1);
						 
						int index67_91 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_91);
						if ( s>=0 ) return s;
						break;

					case 91 : 
						int LA67_92 = input.LA(1);
						 
						int index67_92 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_92);
						if ( s>=0 ) return s;
						break;

					case 92 : 
						int LA67_93 = input.LA(1);
						 
						int index67_93 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_93);
						if ( s>=0 ) return s;
						break;

					case 93 : 
						int LA67_94 = input.LA(1);
						 
						int index67_94 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_94);
						if ( s>=0 ) return s;
						break;

					case 94 : 
						int LA67_95 = input.LA(1);
						 
						int index67_95 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_95);
						if ( s>=0 ) return s;
						break;

					case 95 : 
						int LA67_96 = input.LA(1);
						 
						int index67_96 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_96);
						if ( s>=0 ) return s;
						break;

					case 96 : 
						int LA67_97 = input.LA(1);
						 
						int index67_97 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_97);
						if ( s>=0 ) return s;
						break;

					case 97 : 
						int LA67_98 = input.LA(1);
						 
						int index67_98 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_98);
						if ( s>=0 ) return s;
						break;

					case 98 : 
						int LA67_99 = input.LA(1);
						 
						int index67_99 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_99);
						if ( s>=0 ) return s;
						break;

					case 99 : 
						int LA67_100 = input.LA(1);
						 
						int index67_100 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_100);
						if ( s>=0 ) return s;
						break;

					case 100 : 
						int LA67_101 = input.LA(1);
						 
						int index67_101 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_101);
						if ( s>=0 ) return s;
						break;

					case 101 : 
						int LA67_102 = input.LA(1);
						 
						int index67_102 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_102);
						if ( s>=0 ) return s;
						break;

					case 102 : 
						int LA67_103 = input.LA(1);
						 
						int index67_103 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_103);
						if ( s>=0 ) return s;
						break;

					case 103 : 
						int LA67_104 = input.LA(1);
						 
						int index67_104 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_104);
						if ( s>=0 ) return s;
						break;

					case 104 : 
						int LA67_105 = input.LA(1);
						 
						int index67_105 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_105);
						if ( s>=0 ) return s;
						break;

					case 105 : 
						int LA67_106 = input.LA(1);
						 
						int index67_106 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_106);
						if ( s>=0 ) return s;
						break;

					case 106 : 
						int LA67_107 = input.LA(1);
						 
						int index67_107 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_107);
						if ( s>=0 ) return s;
						break;

					case 107 : 
						int LA67_108 = input.LA(1);
						 
						int index67_108 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_108);
						if ( s>=0 ) return s;
						break;

					case 108 : 
						int LA67_109 = input.LA(1);
						 
						int index67_109 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_109);
						if ( s>=0 ) return s;
						break;

					case 109 : 
						int LA67_110 = input.LA(1);
						 
						int index67_110 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_110);
						if ( s>=0 ) return s;
						break;

					case 110 : 
						int LA67_111 = input.LA(1);
						 
						int index67_111 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred91_Delphi()) ) {s = 112;}
						else if ( (true) ) {s = 113;}
						 
						input.seek(index67_111);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 67, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA68_eotS =
		"\145\uffff";
	static final String DFA68_eofS =
		"\1\2\144\uffff";
	static final String DFA68_minS =
		"\1\4\1\0\143\uffff";
	static final String DFA68_maxS =
		"\1\u00c8\1\0\143\uffff";
	static final String DFA68_acceptS =
		"\2\uffff\1\2\141\uffff\1\1";
	static final String DFA68_specialS =
		"\1\uffff\1\0\143\uffff}>";
	static final String[] DFA68_transitionS = {
			"\1\2\1\uffff\3\2\1\uffff\3\2\2\uffff\3\2\1\uffff\7\2\1\uffff\12\2\1\uffff"+
			"\7\2\3\uffff\13\2\1\uffff\3\2\2\uffff\2\2\1\uffff\1\2\4\uffff\7\2\1\uffff"+
			"\3\2\2\uffff\3\2\1\1\21\2\3\uffff\7\2\1\uffff\5\2\1\uffff\1\2\2\uffff"+
			"\2\2\1\uffff\2\2\1\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff\15\2\1\uffff"+
			"\1\2\15\uffff\3\2\3\uffff\1\2\6\uffff\2\2\2\uffff\4\2\2\uffff\2\2\1\uffff"+
			"\4\2",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA68_eot = DFA.unpackEncodedString(DFA68_eotS);
	static final short[] DFA68_eof = DFA.unpackEncodedString(DFA68_eofS);
	static final char[] DFA68_min = DFA.unpackEncodedStringToUnsignedChars(DFA68_minS);
	static final char[] DFA68_max = DFA.unpackEncodedStringToUnsignedChars(DFA68_maxS);
	static final short[] DFA68_accept = DFA.unpackEncodedString(DFA68_acceptS);
	static final short[] DFA68_special = DFA.unpackEncodedString(DFA68_specialS);
	static final short[][] DFA68_transition;

	static {
		int numStates = DFA68_transitionS.length;
		DFA68_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA68_transition[i] = DFA.unpackEncodedString(DFA68_transitionS[i]);
		}
	}

	protected class DFA68 extends DFA {

		public DFA68(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 68;
			this.eot = DFA68_eot;
			this.eof = DFA68_eof;
			this.min = DFA68_min;
			this.max = DFA68_max;
			this.accept = DFA68_accept;
			this.special = DFA68_special;
			this.transition = DFA68_transition;
		}
		@Override
		public String getDescription() {
			return "239:44: ( formalParameterSection )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA68_1 = input.LA(1);
						 
						int index68_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred93_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index68_1);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 68, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA70_eotS =
		"\146\uffff";
	static final String DFA70_eofS =
		"\1\5\145\uffff";
	static final String DFA70_minS =
		"\1\4\4\0\12\uffff\2\0\24\uffff\1\0\3\uffff\1\0\7\uffff\1\0\14\uffff\1"+
		"\0\1\uffff\4\0\1\uffff\2\0\1\uffff\1\0\5\uffff\1\0\2\uffff\1\0\1\uffff"+
		"\1\0\1\uffff\1\0\2\uffff\1\0\15\uffff";
	static final String DFA70_maxS =
		"\1\u00c8\4\0\12\uffff\2\0\24\uffff\1\0\3\uffff\1\0\7\uffff\1\0\14\uffff"+
		"\1\0\1\uffff\4\0\1\uffff\2\0\1\uffff\1\0\5\uffff\1\0\2\uffff\1\0\1\uffff"+
		"\1\0\1\uffff\1\0\2\uffff\1\0\15\uffff";
	static final String DFA70_acceptS =
		"\5\uffff\1\2\136\uffff\1\1\1\3";
	static final String DFA70_specialS =
		"\1\uffff\1\0\1\1\1\2\1\3\12\uffff\1\4\1\5\24\uffff\1\6\3\uffff\1\7\7\uffff"+
		"\1\10\14\uffff\1\11\1\uffff\1\12\1\13\1\14\1\15\1\uffff\1\16\1\17\1\uffff"+
		"\1\20\5\uffff\1\21\2\uffff\1\22\1\uffff\1\23\1\uffff\1\24\2\uffff\1\25"+
		"\15\uffff}>";
	static final String[] DFA70_transitionS = {
			"\1\5\1\uffff\1\130\1\5\1\130\1\uffff\3\5\2\uffff\1\130\2\5\1\uffff\1"+
			"\5\1\130\5\5\1\uffff\2\5\2\130\2\5\1\105\3\5\1\uffff\5\5\2\130\3\uffff"+
			"\4\5\1\130\1\5\1\116\2\5\1\17\1\5\1\uffff\1\130\2\5\2\uffff\2\5\1\uffff"+
			"\1\5\4\uffff\1\5\1\106\1\5\1\125\3\5\1\uffff\3\5\2\uffff\2\5\1\110\1"+
			"\4\1\5\1\130\2\5\1\61\5\5\1\130\2\5\1\51\1\5\1\130\1\5\3\uffff\3\5\1"+
			"\130\3\5\1\uffff\5\5\1\uffff\1\5\2\uffff\1\76\1\101\1\uffff\1\130\1\20"+
			"\1\uffff\1\130\2\uffff\4\5\1\uffff\1\5\1\uffff\4\5\1\130\1\5\1\103\1"+
			"\45\1\130\3\5\1\3\1\uffff\1\5\15\uffff\1\5\1\1\1\5\3\uffff\1\5\6\uffff"+
			"\1\123\1\5\2\uffff\1\5\1\121\2\130\2\uffff\1\100\1\102\1\uffff\1\5\1"+
			"\2\2\5",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA70_eot = DFA.unpackEncodedString(DFA70_eotS);
	static final short[] DFA70_eof = DFA.unpackEncodedString(DFA70_eofS);
	static final char[] DFA70_min = DFA.unpackEncodedStringToUnsignedChars(DFA70_minS);
	static final char[] DFA70_max = DFA.unpackEncodedStringToUnsignedChars(DFA70_maxS);
	static final short[] DFA70_accept = DFA.unpackEncodedString(DFA70_acceptS);
	static final short[] DFA70_special = DFA.unpackEncodedString(DFA70_specialS);
	static final short[][] DFA70_transition;

	static {
		int numStates = DFA70_transitionS.length;
		DFA70_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA70_transition[i] = DFA.unpackEncodedString(DFA70_transitionS[i]);
		}
	}

	protected class DFA70 extends DFA {

		public DFA70(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 70;
			this.eot = DFA70_eot;
			this.eof = DFA70_eof;
			this.min = DFA70_min;
			this.max = DFA70_max;
			this.accept = DFA70_accept;
			this.special = DFA70_special;
			this.transition = DFA70_transition;
		}
		@Override
		public String getDescription() {
			return "243:1: simpleType : ( ident | subRangeType | enumType );";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA70_1 = input.LA(1);
						 
						int index70_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred94_Delphi()) ) {s = 100;}
						else if ( (synpred95_Delphi()) ) {s = 5;}
						 
						input.seek(index70_1);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA70_2 = input.LA(1);
						 
						int index70_2 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred94_Delphi()) ) {s = 100;}
						else if ( (synpred95_Delphi()) ) {s = 5;}
						 
						input.seek(index70_2);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA70_3 = input.LA(1);
						 
						int index70_3 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred94_Delphi()) ) {s = 100;}
						else if ( (synpred95_Delphi()) ) {s = 5;}
						 
						input.seek(index70_3);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA70_4 = input.LA(1);
						 
						int index70_4 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred95_Delphi()) ) {s = 5;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index70_4);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA70_15 = input.LA(1);
						 
						int index70_15 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred94_Delphi()) ) {s = 100;}
						else if ( (synpred95_Delphi()) ) {s = 5;}
						 
						input.seek(index70_15);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA70_16 = input.LA(1);
						 
						int index70_16 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred94_Delphi()) ) {s = 100;}
						else if ( (synpred95_Delphi()) ) {s = 5;}
						 
						input.seek(index70_16);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA70_37 = input.LA(1);
						 
						int index70_37 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred94_Delphi()) ) {s = 100;}
						else if ( (synpred95_Delphi()) ) {s = 5;}
						 
						input.seek(index70_37);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA70_41 = input.LA(1);
						 
						int index70_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred94_Delphi()) ) {s = 100;}
						else if ( (synpred95_Delphi()) ) {s = 5;}
						 
						input.seek(index70_41);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA70_49 = input.LA(1);
						 
						int index70_49 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred94_Delphi()) ) {s = 100;}
						else if ( (synpred95_Delphi()) ) {s = 5;}
						 
						input.seek(index70_49);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA70_62 = input.LA(1);
						 
						int index70_62 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred94_Delphi()) ) {s = 100;}
						else if ( (synpred95_Delphi()) ) {s = 5;}
						 
						input.seek(index70_62);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA70_64 = input.LA(1);
						 
						int index70_64 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred94_Delphi()) ) {s = 100;}
						else if ( (synpred95_Delphi()) ) {s = 5;}
						 
						input.seek(index70_64);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA70_65 = input.LA(1);
						 
						int index70_65 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred94_Delphi()) ) {s = 100;}
						else if ( (synpred95_Delphi()) ) {s = 5;}
						 
						input.seek(index70_65);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA70_66 = input.LA(1);
						 
						int index70_66 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred94_Delphi()) ) {s = 100;}
						else if ( (synpred95_Delphi()) ) {s = 5;}
						 
						input.seek(index70_66);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA70_67 = input.LA(1);
						 
						int index70_67 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred94_Delphi()) ) {s = 100;}
						else if ( (synpred95_Delphi()) ) {s = 5;}
						 
						input.seek(index70_67);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA70_69 = input.LA(1);
						 
						int index70_69 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred94_Delphi()) ) {s = 100;}
						else if ( (synpred95_Delphi()) ) {s = 5;}
						 
						input.seek(index70_69);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA70_70 = input.LA(1);
						 
						int index70_70 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred94_Delphi()) ) {s = 100;}
						else if ( (synpred95_Delphi()) ) {s = 5;}
						 
						input.seek(index70_70);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA70_72 = input.LA(1);
						 
						int index70_72 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred94_Delphi()) ) {s = 100;}
						else if ( (synpred95_Delphi()) ) {s = 5;}
						 
						input.seek(index70_72);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA70_78 = input.LA(1);
						 
						int index70_78 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred94_Delphi()) ) {s = 100;}
						else if ( (synpred95_Delphi()) ) {s = 5;}
						 
						input.seek(index70_78);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA70_81 = input.LA(1);
						 
						int index70_81 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred94_Delphi()) ) {s = 100;}
						else if ( (synpred95_Delphi()) ) {s = 5;}
						 
						input.seek(index70_81);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA70_83 = input.LA(1);
						 
						int index70_83 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred94_Delphi()) ) {s = 100;}
						else if ( (synpred95_Delphi()) ) {s = 5;}
						 
						input.seek(index70_83);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA70_85 = input.LA(1);
						 
						int index70_85 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred94_Delphi()) ) {s = 100;}
						else if ( (synpred95_Delphi()) ) {s = 5;}
						 
						input.seek(index70_85);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA70_88 = input.LA(1);
						 
						int index70_88 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred94_Delphi()) ) {s = 100;}
						else if ( (synpred95_Delphi()) ) {s = 5;}
						 
						input.seek(index70_88);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 70, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA86_eotS =
		"\145\uffff";
	static final String DFA86_eofS =
		"\1\2\144\uffff";
	static final String DFA86_minS =
		"\1\4\1\0\143\uffff";
	static final String DFA86_maxS =
		"\1\u00c8\1\0\143\uffff";
	static final String DFA86_acceptS =
		"\2\uffff\1\2\141\uffff\1\1";
	static final String DFA86_specialS =
		"\1\uffff\1\0\143\uffff}>";
	static final String[] DFA86_transitionS = {
			"\1\2\1\uffff\3\2\1\uffff\3\2\2\uffff\3\2\1\uffff\7\2\1\uffff\12\2\1\uffff"+
			"\7\2\3\uffff\13\2\1\uffff\3\2\2\uffff\2\2\1\uffff\1\2\4\uffff\7\2\1\uffff"+
			"\3\2\2\uffff\3\2\1\1\21\2\3\uffff\7\2\1\uffff\5\2\1\uffff\1\2\2\uffff"+
			"\2\2\1\uffff\2\2\1\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff\15\2\1\uffff"+
			"\1\2\15\uffff\3\2\3\uffff\1\2\6\uffff\2\2\2\uffff\4\2\2\uffff\2\2\1\uffff"+
			"\4\2",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA86_eot = DFA.unpackEncodedString(DFA86_eotS);
	static final short[] DFA86_eof = DFA.unpackEncodedString(DFA86_eofS);
	static final char[] DFA86_min = DFA.unpackEncodedStringToUnsignedChars(DFA86_minS);
	static final char[] DFA86_max = DFA.unpackEncodedStringToUnsignedChars(DFA86_maxS);
	static final short[] DFA86_accept = DFA.unpackEncodedString(DFA86_acceptS);
	static final short[] DFA86_special = DFA.unpackEncodedString(DFA86_specialS);
	static final short[][] DFA86_transition;

	static {
		int numStates = DFA86_transitionS.length;
		DFA86_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA86_transition[i] = DFA.unpackEncodedString(DFA86_transitionS[i]);
		}
	}

	protected class DFA86 extends DFA {

		public DFA86(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 86;
			this.eot = DFA86_eot;
			this.eof = DFA86_eof;
			this.min = DFA86_min;
			this.max = DFA86_max;
			this.accept = DFA86_accept;
			this.special = DFA86_special;
			this.transition = DFA86_transition;
		}
		@Override
		public String getDescription() {
			return "285:40: ( classParent )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA86_1 = input.LA(1);
						 
						int index86_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred119_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index86_1);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 86, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA98_eotS =
		"\145\uffff";
	static final String DFA98_eofS =
		"\1\2\144\uffff";
	static final String DFA98_minS =
		"\1\4\1\0\143\uffff";
	static final String DFA98_maxS =
		"\1\u00c8\1\0\143\uffff";
	static final String DFA98_acceptS =
		"\2\uffff\1\2\141\uffff\1\1";
	static final String DFA98_specialS =
		"\1\uffff\1\0\143\uffff}>";
	static final String[] DFA98_transitionS = {
			"\1\2\1\uffff\3\2\1\uffff\3\2\2\uffff\3\2\1\uffff\7\2\1\uffff\12\2\1\uffff"+
			"\7\2\3\uffff\13\2\1\uffff\3\2\2\uffff\2\2\1\uffff\1\2\4\uffff\7\2\1\uffff"+
			"\3\2\2\uffff\3\2\1\1\21\2\3\uffff\7\2\1\uffff\5\2\1\uffff\1\2\2\uffff"+
			"\2\2\1\uffff\2\2\1\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff\15\2\1\uffff"+
			"\1\2\15\uffff\3\2\3\uffff\1\2\6\uffff\2\2\2\uffff\4\2\2\uffff\2\2\1\uffff"+
			"\4\2",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA98_eot = DFA.unpackEncodedString(DFA98_eotS);
	static final short[] DFA98_eof = DFA.unpackEncodedString(DFA98_eofS);
	static final char[] DFA98_min = DFA.unpackEncodedStringToUnsignedChars(DFA98_minS);
	static final char[] DFA98_max = DFA.unpackEncodedStringToUnsignedChars(DFA98_maxS);
	static final short[] DFA98_accept = DFA.unpackEncodedString(DFA98_acceptS);
	static final short[] DFA98_special = DFA.unpackEncodedString(DFA98_specialS);
	static final short[][] DFA98_transition;

	static {
		int numStates = DFA98_transitionS.length;
		DFA98_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA98_transition[i] = DFA.unpackEncodedString(DFA98_transitionS[i]);
		}
	}

	protected class DFA98 extends DFA {

		public DFA98(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 98;
			this.eot = DFA98_eot;
			this.eof = DFA98_eof;
			this.min = DFA98_min;
			this.max = DFA98_max;
			this.accept = DFA98_accept;
			this.special = DFA98_special;
			this.transition = DFA98_transition;
		}
		@Override
		public String getDescription() {
			return "311:45: ( classParent )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA98_1 = input.LA(1);
						 
						int index98_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred141_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index98_1);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 98, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA106_eotS =
		"\32\uffff";
	static final String DFA106_eofS =
		"\32\uffff";
	static final String DFA106_minS =
		"\1\6\1\30\1\uffff\1\6\1\30\1\4\1\30\1\6\3\0\2\30\1\0\1\30\1\4\1\30\1\uffff"+
		"\3\0\2\30\3\0";
	static final String DFA106_maxS =
		"\1\u00c6\1\167\1\uffff\1\u00c6\1\31\1\u00c5\1\31\1\u00c6\3\0\2\31\1\0"+
		"\1\31\1\u00c5\1\31\1\uffff\3\0\2\31\3\0";
	static final String DFA106_acceptS =
		"\2\uffff\1\2\16\uffff\1\1\10\uffff";
	static final String DFA106_specialS =
		"\10\uffff\1\1\1\2\1\0\2\uffff\1\3\4\uffff\1\4\1\5\1\6\2\uffff\1\7\1\11"+
		"\1\10}>";
	static final String[] DFA106_transitionS = {
			"\1\6\1\uffff\1\6\6\uffff\1\6\1\uffff\1\2\2\uffff\1\6\2\uffff\1\2\3\uffff"+
			"\2\2\2\6\2\uffff\1\6\1\uffff\1\2\7\uffff\2\6\4\uffff\1\2\2\uffff\1\6"+
			"\1\uffff\1\6\2\uffff\1\6\2\uffff\1\6\4\uffff\1\2\10\uffff\1\6\1\uffff"+
			"\1\6\6\uffff\1\2\4\uffff\1\6\2\uffff\1\6\2\uffff\1\6\5\uffff\1\6\2\uffff"+
			"\1\3\1\uffff\1\6\7\uffff\1\6\1\uffff\2\2\1\uffff\4\2\5\uffff\2\6\1\uffff"+
			"\2\6\1\uffff\1\6\3\uffff\1\2\11\uffff\1\6\1\uffff\1\6\1\1\1\6\1\uffff"+
			"\1\2\1\uffff\1\6\1\uffff\1\2\16\uffff\1\4\13\uffff\1\6\3\uffff\1\2\3"+
			"\6\2\uffff\2\6\2\uffff\1\5",
			"\1\10\1\7\131\uffff\1\2\3\uffff\1\2",
			"",
			"\1\2\1\uffff\1\2\6\uffff\1\2\4\uffff\1\2\3\uffff\1\11\1\7\3\uffff\2"+
			"\2\2\uffff\1\2\11\uffff\2\2\7\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff"+
			"\1\2\15\uffff\1\2\1\uffff\1\2\13\uffff\1\2\2\uffff\1\2\2\uffff\1\2\5"+
			"\uffff\1\2\2\uffff\1\2\1\uffff\1\2\7\uffff\1\2\15\uffff\2\2\1\uffff\2"+
			"\2\1\uffff\1\2\15\uffff\1\2\1\uffff\3\2\3\uffff\1\2\20\uffff\1\2\13\uffff"+
			"\1\2\4\uffff\3\2\2\uffff\2\2\2\uffff\1\2",
			"\1\12\1\7",
			"\12\14\1\uffff\1\14\1\uffff\1\14\1\uffff\5\14\3\uffff\4\14\2\uffff\7"+
			"\14\2\uffff\4\14\2\uffff\2\14\1\uffff\17\14\1\uffff\1\14\1\uffff\1\14"+
			"\2\uffff\13\14\4\uffff\2\14\2\uffff\1\14\1\uffff\6\14\1\uffff\14\14\1"+
			"\uffff\1\14\1\uffff\7\14\1\uffff\1\14\3\uffff\13\14\1\uffff\2\14\1\uffff"+
			"\3\14\2\uffff\13\14\16\uffff\1\13\12\uffff\4\14\1\uffff\10\14\1\uffff"+
			"\1\14",
			"\1\15\1\7",
			"\1\20\1\uffff\1\20\6\uffff\1\20\4\uffff\1\20\10\uffff\2\20\2\uffff\1"+
			"\20\11\uffff\2\20\7\uffff\1\20\1\uffff\1\20\2\uffff\1\20\2\uffff\1\20"+
			"\15\uffff\1\20\1\uffff\1\20\13\uffff\1\20\2\uffff\1\20\2\uffff\1\20\5"+
			"\uffff\1\20\2\uffff\1\20\1\uffff\1\20\7\uffff\1\20\15\uffff\2\20\1\uffff"+
			"\2\20\1\uffff\1\20\15\uffff\1\20\1\uffff\3\20\3\uffff\1\20\20\uffff\1"+
			"\16\13\uffff\1\20\4\uffff\3\20\2\uffff\2\20\2\uffff\1\17",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\22\1\7",
			"\1\23\1\7",
			"\1\uffff",
			"\1\24\1\7",
			"\12\26\1\uffff\1\26\1\uffff\1\26\1\uffff\5\26\3\uffff\4\26\2\uffff\7"+
			"\26\2\uffff\4\26\2\uffff\2\26\1\uffff\17\26\1\uffff\1\26\1\uffff\1\26"+
			"\2\uffff\13\26\4\uffff\2\26\2\uffff\1\26\1\uffff\6\26\1\uffff\14\26\1"+
			"\uffff\1\26\1\uffff\7\26\1\uffff\1\26\3\uffff\13\26\1\uffff\2\26\1\uffff"+
			"\3\26\2\uffff\13\26\16\uffff\1\25\12\uffff\4\26\1\uffff\10\26\1\uffff"+
			"\1\26",
			"\1\27\1\7",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\30\1\7",
			"\1\31\1\7",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff"
	};

	static final short[] DFA106_eot = DFA.unpackEncodedString(DFA106_eotS);
	static final short[] DFA106_eof = DFA.unpackEncodedString(DFA106_eofS);
	static final char[] DFA106_min = DFA.unpackEncodedStringToUnsignedChars(DFA106_minS);
	static final char[] DFA106_max = DFA.unpackEncodedStringToUnsignedChars(DFA106_maxS);
	static final short[] DFA106_accept = DFA.unpackEncodedString(DFA106_acceptS);
	static final short[] DFA106_special = DFA.unpackEncodedString(DFA106_specialS);
	static final short[][] DFA106_transition;

	static {
		int numStates = DFA106_transitionS.length;
		DFA106_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA106_transition[i] = DFA.unpackEncodedString(DFA106_transitionS[i]);
		}
	}

	protected class DFA106 extends DFA {

		public DFA106(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 106;
			this.eot = DFA106_eot;
			this.eof = DFA106_eof;
			this.min = DFA106_min;
			this.max = DFA106_max;
			this.accept = DFA106_accept;
			this.special = DFA106_special;
			this.transition = DFA106_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 331:41: ( recordField )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA106_10 = input.LA(1);
						 
						int index106_10 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred150_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index106_10);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA106_8 = input.LA(1);
						 
						int index106_8 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred150_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index106_8);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA106_9 = input.LA(1);
						 
						int index106_9 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred150_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index106_9);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA106_13 = input.LA(1);
						 
						int index106_13 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred150_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index106_13);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA106_18 = input.LA(1);
						 
						int index106_18 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred150_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index106_18);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA106_19 = input.LA(1);
						 
						int index106_19 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred150_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index106_19);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA106_20 = input.LA(1);
						 
						int index106_20 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred150_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index106_20);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA106_23 = input.LA(1);
						 
						int index106_23 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred150_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index106_23);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA106_25 = input.LA(1);
						 
						int index106_25 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred150_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index106_25);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA106_24 = input.LA(1);
						 
						int index106_24 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred150_Delphi()) ) {s = 17;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index106_24);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 106, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA170_eotS =
		"\154\uffff";
	static final String DFA170_eofS =
		"\1\1\153\uffff";
	static final String DFA170_minS =
		"\1\4\33\uffff\1\0\4\uffff\22\0\56\uffff\1\0\3\uffff\2\0\2\uffff\1\0\2"+
		"\uffff";
	static final String DFA170_maxS =
		"\1\u00c8\33\uffff\1\0\4\uffff\22\0\56\uffff\1\0\3\uffff\2\0\2\uffff\1"+
		"\0\2\uffff";
	static final String DFA170_acceptS =
		"\1\uffff\1\2\142\uffff\1\1\7\uffff";
	static final String DFA170_specialS =
		"\34\uffff\1\0\4\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
		"\1\14\1\15\1\16\1\17\1\20\1\21\1\22\56\uffff\1\23\3\uffff\1\24\1\25\2"+
		"\uffff\1\26\2\uffff}>";
	static final String[] DFA170_transitionS = {
			"\1\1\1\144\3\1\1\uffff\2\1\1\43\2\uffff\3\1\1\uffff\3\1\1\44\3\1\1\uffff"+
			"\7\1\1\55\1\1\1\34\1\uffff\7\1\1\144\2\uffff\5\1\1\56\1\51\1\1\1\62\1"+
			"\1\1\52\1\uffff\1\151\2\1\2\uffff\2\1\1\uffff\1\1\4\uffff\6\1\1\42\1"+
			"\uffff\3\1\2\uffff\1\1\1\60\1\53\2\1\1\141\3\1\1\54\12\1\1\41\1\144\2"+
			"\uffff\1\45\1\57\5\1\1\uffff\5\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1"+
			"\1\46\1\144\1\1\2\uffff\3\1\1\47\1\uffff\1\1\1\uffff\4\1\1\145\1\50\7"+
			"\1\1\uffff\1\1\15\uffff\3\1\3\uffff\1\1\6\uffff\2\1\2\uffff\1\1\1\61"+
			"\1\1\1\146\2\uffff\2\1\1\uffff\4\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			""
	};

	static final short[] DFA170_eot = DFA.unpackEncodedString(DFA170_eotS);
	static final short[] DFA170_eof = DFA.unpackEncodedString(DFA170_eofS);
	static final char[] DFA170_min = DFA.unpackEncodedStringToUnsignedChars(DFA170_minS);
	static final char[] DFA170_max = DFA.unpackEncodedStringToUnsignedChars(DFA170_maxS);
	static final short[] DFA170_accept = DFA.unpackEncodedString(DFA170_acceptS);
	static final short[] DFA170_special = DFA.unpackEncodedString(DFA170_specialS);
	static final short[][] DFA170_transition;

	static {
		int numStates = DFA170_transitionS.length;
		DFA170_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA170_transition[i] = DFA.unpackEncodedString(DFA170_transitionS[i]);
		}
	}

	protected class DFA170 extends DFA {

		public DFA170(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 170;
			this.eot = DFA170_eot;
			this.eof = DFA170_eof;
			this.min = DFA170_min;
			this.max = DFA170_max;
			this.accept = DFA170_accept;
			this.special = DFA170_special;
			this.transition = DFA170_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 415:54: ( methodDirective )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA170_28 = input.LA(1);
						 
						int index170_28 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_28);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA170_33 = input.LA(1);
						 
						int index170_33 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_33);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA170_34 = input.LA(1);
						 
						int index170_34 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_34);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA170_35 = input.LA(1);
						 
						int index170_35 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_35);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA170_36 = input.LA(1);
						 
						int index170_36 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_36);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA170_37 = input.LA(1);
						 
						int index170_37 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_37);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA170_38 = input.LA(1);
						 
						int index170_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_38);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA170_39 = input.LA(1);
						 
						int index170_39 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_39);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA170_40 = input.LA(1);
						 
						int index170_40 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_40);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA170_41 = input.LA(1);
						 
						int index170_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_41);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA170_42 = input.LA(1);
						 
						int index170_42 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_42);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA170_43 = input.LA(1);
						 
						int index170_43 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_43);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA170_44 = input.LA(1);
						 
						int index170_44 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_44);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA170_45 = input.LA(1);
						 
						int index170_45 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_45);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA170_46 = input.LA(1);
						 
						int index170_46 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_46);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA170_47 = input.LA(1);
						 
						int index170_47 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_47);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA170_48 = input.LA(1);
						 
						int index170_48 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_48);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA170_49 = input.LA(1);
						 
						int index170_49 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_49);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA170_50 = input.LA(1);
						 
						int index170_50 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_50);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA170_97 = input.LA(1);
						 
						int index170_97 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_97);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA170_101 = input.LA(1);
						 
						int index170_101 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_101);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA170_102 = input.LA(1);
						 
						int index170_102 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_102);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA170_105 = input.LA(1);
						 
						int index170_105 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred235_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index170_105);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 170, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA188_eotS =
		"\146\uffff";
	static final String DFA188_eofS =
		"\1\1\145\uffff";
	static final String DFA188_minS =
		"\1\4\1\uffff\1\0\40\uffff\22\0\61\uffff";
	static final String DFA188_maxS =
		"\1\u00c8\1\uffff\1\0\40\uffff\22\0\61\uffff";
	static final String DFA188_acceptS =
		"\1\uffff\1\2\143\uffff\1\1";
	static final String DFA188_specialS =
		"\2\uffff\1\0\40\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
		"\1\14\1\15\1\16\1\17\1\20\1\21\1\22\61\uffff}>";
	static final String[] DFA188_transitionS = {
			"\1\1\1\uffff\3\1\1\uffff\2\1\1\45\2\uffff\3\1\1\uffff\3\1\1\46\3\1\1"+
			"\uffff\7\1\1\57\2\1\1\uffff\7\1\3\uffff\5\1\1\60\1\53\1\1\1\2\1\1\1\54"+
			"\1\uffff\3\1\1\uffff\3\1\1\uffff\1\1\4\uffff\6\1\1\44\1\uffff\3\1\2\uffff"+
			"\1\1\1\62\1\55\6\1\1\56\12\1\1\43\3\uffff\1\47\1\61\5\1\1\uffff\5\1\1"+
			"\uffff\1\1\2\uffff\2\1\1\uffff\1\1\1\50\1\uffff\1\1\2\uffff\3\1\1\51"+
			"\1\uffff\1\1\1\uffff\5\1\1\52\7\1\1\uffff\1\1\15\uffff\3\1\3\uffff\1"+
			"\1\6\uffff\1\64\1\1\2\uffff\1\1\1\63\2\1\2\uffff\2\1\1\uffff\4\1",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA188_eot = DFA.unpackEncodedString(DFA188_eotS);
	static final short[] DFA188_eof = DFA.unpackEncodedString(DFA188_eofS);
	static final char[] DFA188_min = DFA.unpackEncodedStringToUnsignedChars(DFA188_minS);
	static final char[] DFA188_max = DFA.unpackEncodedStringToUnsignedChars(DFA188_maxS);
	static final short[] DFA188_accept = DFA.unpackEncodedString(DFA188_acceptS);
	static final short[] DFA188_special = DFA.unpackEncodedString(DFA188_specialS);
	static final short[][] DFA188_transition;

	static {
		int numStates = DFA188_transitionS.length;
		DFA188_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA188_transition[i] = DFA.unpackEncodedString(DFA188_transitionS[i]);
		}
	}

	protected class DFA188 extends DFA {

		public DFA188(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 188;
			this.eot = DFA188_eot;
			this.eof = DFA188_eof;
			this.min = DFA188_min;
			this.max = DFA188_max;
			this.accept = DFA188_accept;
			this.special = DFA188_special;
			this.transition = DFA188_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 430:52: ( functionDirective )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA188_2 = input.LA(1);
						 
						int index188_2 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred256_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_2);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA188_35 = input.LA(1);
						 
						int index188_35 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred256_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_35);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA188_36 = input.LA(1);
						 
						int index188_36 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred256_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_36);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA188_37 = input.LA(1);
						 
						int index188_37 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred256_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_37);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA188_38 = input.LA(1);
						 
						int index188_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred256_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_38);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA188_39 = input.LA(1);
						 
						int index188_39 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred256_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_39);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA188_40 = input.LA(1);
						 
						int index188_40 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred256_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_40);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA188_41 = input.LA(1);
						 
						int index188_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred256_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_41);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA188_42 = input.LA(1);
						 
						int index188_42 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred256_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_42);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA188_43 = input.LA(1);
						 
						int index188_43 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred256_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_43);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA188_44 = input.LA(1);
						 
						int index188_44 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred256_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_44);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA188_45 = input.LA(1);
						 
						int index188_45 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred256_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_45);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA188_46 = input.LA(1);
						 
						int index188_46 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred256_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_46);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA188_47 = input.LA(1);
						 
						int index188_47 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred256_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_47);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA188_48 = input.LA(1);
						 
						int index188_48 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred256_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_48);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA188_49 = input.LA(1);
						 
						int index188_49 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred256_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_49);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA188_50 = input.LA(1);
						 
						int index188_50 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred256_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_50);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA188_51 = input.LA(1);
						 
						int index188_51 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred256_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_51);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA188_52 = input.LA(1);
						 
						int index188_52 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred256_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index188_52);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 188, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA201_eotS =
		"\145\uffff";
	static final String DFA201_eofS =
		"\1\1\144\uffff";
	static final String DFA201_minS =
		"\1\4\40\uffff\23\0\61\uffff";
	static final String DFA201_maxS =
		"\1\u00c8\40\uffff\23\0\61\uffff";
	static final String DFA201_acceptS =
		"\1\uffff\1\2\142\uffff\1\1";
	static final String DFA201_specialS =
		"\41\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
		"\1\16\1\17\1\20\1\21\1\22\61\uffff}>";
	static final String[] DFA201_transitionS = {
			"\1\1\1\uffff\3\1\1\uffff\2\1\1\43\2\uffff\3\1\1\uffff\3\1\1\44\3\1\1"+
			"\uffff\7\1\1\55\2\1\1\uffff\7\1\3\uffff\5\1\1\56\1\51\1\1\1\62\1\1\1"+
			"\52\1\uffff\3\1\2\uffff\2\1\1\uffff\1\1\4\uffff\6\1\1\42\1\uffff\3\1"+
			"\2\uffff\1\1\1\60\1\53\6\1\1\54\12\1\1\41\3\uffff\1\45\1\57\5\1\1\uffff"+
			"\5\1\1\uffff\1\1\2\uffff\2\1\1\uffff\1\1\1\46\1\uffff\1\1\2\uffff\3\1"+
			"\1\47\1\uffff\1\1\1\uffff\5\1\1\50\7\1\1\uffff\1\1\15\uffff\3\1\3\uffff"+
			"\1\1\6\uffff\1\63\1\1\2\uffff\1\1\1\61\2\1\2\uffff\2\1\1\uffff\4\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA201_eot = DFA.unpackEncodedString(DFA201_eotS);
	static final short[] DFA201_eof = DFA.unpackEncodedString(DFA201_eofS);
	static final char[] DFA201_min = DFA.unpackEncodedStringToUnsignedChars(DFA201_minS);
	static final char[] DFA201_max = DFA.unpackEncodedStringToUnsignedChars(DFA201_maxS);
	static final short[] DFA201_accept = DFA.unpackEncodedString(DFA201_acceptS);
	static final short[] DFA201_special = DFA.unpackEncodedString(DFA201_specialS);
	static final short[][] DFA201_transition;

	static {
		int numStates = DFA201_transitionS.length;
		DFA201_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA201_transition[i] = DFA.unpackEncodedString(DFA201_transitionS[i]);
		}
	}

	protected class DFA201 extends DFA {

		public DFA201(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 201;
			this.eot = DFA201_eot;
			this.eof = DFA201_eof;
			this.min = DFA201_min;
			this.max = DFA201_max;
			this.accept = DFA201_accept;
			this.special = DFA201_special;
			this.transition = DFA201_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 450:46: ( functionDirective )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA201_33 = input.LA(1);
						 
						int index201_33 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred271_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_33);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA201_34 = input.LA(1);
						 
						int index201_34 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred271_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_34);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA201_35 = input.LA(1);
						 
						int index201_35 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred271_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_35);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA201_36 = input.LA(1);
						 
						int index201_36 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred271_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_36);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA201_37 = input.LA(1);
						 
						int index201_37 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred271_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_37);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA201_38 = input.LA(1);
						 
						int index201_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred271_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_38);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA201_39 = input.LA(1);
						 
						int index201_39 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred271_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_39);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA201_40 = input.LA(1);
						 
						int index201_40 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred271_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_40);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA201_41 = input.LA(1);
						 
						int index201_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred271_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_41);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA201_42 = input.LA(1);
						 
						int index201_42 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred271_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_42);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA201_43 = input.LA(1);
						 
						int index201_43 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred271_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_43);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA201_44 = input.LA(1);
						 
						int index201_44 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred271_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_44);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA201_45 = input.LA(1);
						 
						int index201_45 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred271_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_45);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA201_46 = input.LA(1);
						 
						int index201_46 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred271_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_46);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA201_47 = input.LA(1);
						 
						int index201_47 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred271_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_47);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA201_48 = input.LA(1);
						 
						int index201_48 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred271_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_48);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA201_49 = input.LA(1);
						 
						int index201_49 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred271_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_49);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA201_50 = input.LA(1);
						 
						int index201_50 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred271_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_50);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA201_51 = input.LA(1);
						 
						int index201_51 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred271_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_51);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 201, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA212_eotS =
		"\145\uffff";
	static final String DFA212_eofS =
		"\1\2\144\uffff";
	static final String DFA212_minS =
		"\1\4\1\0\143\uffff";
	static final String DFA212_maxS =
		"\1\u00c8\1\0\143\uffff";
	static final String DFA212_acceptS =
		"\2\uffff\1\2\141\uffff\1\1";
	static final String DFA212_specialS =
		"\1\uffff\1\0\143\uffff}>";
	static final String[] DFA212_transitionS = {
			"\1\2\1\uffff\3\2\1\uffff\3\2\2\uffff\3\2\1\uffff\7\2\1\uffff\12\2\1\uffff"+
			"\7\2\3\uffff\13\2\1\uffff\3\2\2\uffff\2\2\1\uffff\1\2\4\uffff\7\2\1\uffff"+
			"\3\2\2\uffff\3\2\1\1\21\2\3\uffff\7\2\1\uffff\5\2\1\uffff\1\2\2\uffff"+
			"\2\2\1\uffff\2\2\1\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff\15\2\1\uffff"+
			"\1\2\15\uffff\3\2\3\uffff\1\2\6\uffff\2\2\2\uffff\4\2\2\uffff\2\2\1\uffff"+
			"\4\2",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA212_eot = DFA.unpackEncodedString(DFA212_eotS);
	static final short[] DFA212_eof = DFA.unpackEncodedString(DFA212_eofS);
	static final char[] DFA212_min = DFA.unpackEncodedStringToUnsignedChars(DFA212_minS);
	static final char[] DFA212_max = DFA.unpackEncodedStringToUnsignedChars(DFA212_maxS);
	static final short[] DFA212_accept = DFA.unpackEncodedString(DFA212_acceptS);
	static final short[] DFA212_special = DFA.unpackEncodedString(DFA212_specialS);
	static final short[][] DFA212_transition;

	static {
		int numStates = DFA212_transitionS.length;
		DFA212_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA212_transition[i] = DFA.unpackEncodedString(DFA212_transitionS[i]);
		}
	}

	protected class DFA212 extends DFA {

		public DFA212(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 212;
			this.eot = DFA212_eot;
			this.eof = DFA212_eof;
			this.min = DFA212_min;
			this.max = DFA212_max;
			this.accept = DFA212_accept;
			this.special = DFA212_special;
			this.transition = DFA212_transition;
		}
		@Override
		public String getDescription() {
			return "471:44: ( formalParameterSection )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA212_1 = input.LA(1);
						 
						int index212_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred284_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index212_1);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 212, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA219_eotS =
		"\162\uffff";
	static final String DFA219_eofS =
		"\1\20\161\uffff";
	static final String DFA219_minS =
		"\1\4\17\0\1\uffff\3\0\6\uffff\1\0\7\uffff\4\0\1\uffff\2\0\1\uffff\1\0"+
		"\5\uffff\1\0\2\uffff\1\0\1\uffff\1\0\5\uffff\1\0\1\uffff\1\0\16\uffff"+
		"\1\0\16\uffff\1\0\5\uffff\1\0\20\uffff";
	static final String DFA219_maxS =
		"\1\u00c8\17\0\1\uffff\3\0\6\uffff\1\0\7\uffff\4\0\1\uffff\2\0\1\uffff"+
		"\1\0\5\uffff\1\0\2\uffff\1\0\1\uffff\1\0\5\uffff\1\0\1\uffff\1\0\16\uffff"+
		"\1\0\16\uffff\1\0\5\uffff\1\0\20\uffff";
	static final String DFA219_acceptS =
		"\20\uffff\1\16\123\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\17\1\11\1"+
		"\12\1\13\1\14\1\15";
	static final String DFA219_specialS =
		"\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
		"\1\16\1\uffff\1\17\1\20\1\21\6\uffff\1\22\7\uffff\1\23\1\24\1\25\1\26"+
		"\1\uffff\1\27\1\30\1\uffff\1\31\5\uffff\1\32\2\uffff\1\33\1\uffff\1\34"+
		"\5\uffff\1\35\1\uffff\1\36\16\uffff\1\37\16\uffff\1\40\5\uffff\1\41\20"+
		"\uffff}>";
	static final String[] DFA219_transitionS = {
			"\1\20\1\uffff\1\141\1\20\1\141\1\uffff\3\20\2\uffff\1\141\1\1\1\20\1"+
			"\uffff\1\20\1\141\5\20\1\uffff\2\20\2\141\2\15\1\47\3\20\1\uffff\5\20"+
			"\2\141\3\uffff\4\20\1\141\1\20\1\60\2\20\1\12\1\20\1\uffff\1\141\2\20"+
			"\2\uffff\2\20\1\uffff\1\20\4\uffff\1\20\1\50\1\20\1\75\3\20\1\uffff\2"+
			"\20\1\17\2\uffff\2\20\1\63\1\14\1\20\1\141\1\5\1\20\1\23\1\20\1\13\1"+
			"\20\1\3\1\20\1\141\2\20\1\133\1\20\1\141\1\20\3\uffff\2\20\1\4\1\141"+
			"\1\6\2\20\1\uffff\4\20\1\16\1\uffff\1\20\2\uffff\1\32\1\43\1\uffff\1"+
			"\141\1\52\1\uffff\1\141\2\uffff\4\20\1\uffff\1\20\1\uffff\4\20\1\141"+
			"\1\20\1\45\1\114\1\141\3\20\1\11\1\uffff\1\20\15\uffff\1\10\1\21\1\10"+
			"\3\uffff\1\7\6\uffff\1\73\1\20\2\uffff\1\20\1\65\2\141\2\uffff\1\42\1"+
			"\44\1\uffff\1\20\1\22\1\2\1\20",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA219_eot = DFA.unpackEncodedString(DFA219_eotS);
	static final short[] DFA219_eof = DFA.unpackEncodedString(DFA219_eofS);
	static final char[] DFA219_min = DFA.unpackEncodedStringToUnsignedChars(DFA219_minS);
	static final char[] DFA219_max = DFA.unpackEncodedStringToUnsignedChars(DFA219_maxS);
	static final short[] DFA219_accept = DFA.unpackEncodedString(DFA219_acceptS);
	static final short[] DFA219_special = DFA.unpackEncodedString(DFA219_specialS);
	static final short[][] DFA219_transition;

	static {
		int numStates = DFA219_transitionS.length;
		DFA219_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA219_transition[i] = DFA.unpackEncodedString(DFA219_transitionS[i]);
		}
	}

	protected class DFA219 extends DFA {

		public DFA219(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 219;
			this.eot = DFA219_eot;
			this.eof = DFA219_eof;
			this.min = DFA219_min;
			this.max = DFA219_max;
			this.accept = DFA219_accept;
			this.special = DFA219_special;
			this.transition = DFA219_transition;
		}
		@Override
		public String getDescription() {
			return "476:1: factor : ( '@' factor | '@@' factor | 'not' factor | '+' factor | '-' factor | '^' ident | intRealNum | 'true' | 'false' | 'nil' | '(' expression ')' ( '^' )? ( '.' expression )? | stringFactor ( '.' simpleExpression )? | setSection | designator | typeId '(' expression ')' );";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA219_1 = input.LA(1);
						 
						int index219_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred288_Delphi()) ) {s = 100;}
						else if ( (synpred304_Delphi()) ) {s = 16;}
						 
						input.seek(index219_1);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA219_2 = input.LA(1);
						 
						int index219_2 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred289_Delphi()) ) {s = 101;}
						else if ( (synpred304_Delphi()) ) {s = 16;}
						 
						input.seek(index219_2);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA219_3 = input.LA(1);
						 
						int index219_3 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred290_Delphi()) ) {s = 102;}
						else if ( (synpred304_Delphi()) ) {s = 16;}
						 
						input.seek(index219_3);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA219_4 = input.LA(1);
						 
						int index219_4 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred291_Delphi()) ) {s = 103;}
						else if ( (synpred304_Delphi()) ) {s = 16;}
						 
						input.seek(index219_4);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA219_5 = input.LA(1);
						 
						int index219_5 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred292_Delphi()) ) {s = 104;}
						else if ( (synpred304_Delphi()) ) {s = 16;}
						 
						input.seek(index219_5);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA219_6 = input.LA(1);
						 
						int index219_6 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred293_Delphi()) ) {s = 105;}
						else if ( (synpred304_Delphi()) ) {s = 16;}
						 
						input.seek(index219_6);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA219_7 = input.LA(1);
						 
						int index219_7 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred294_Delphi()) ) {s = 106;}
						else if ( (synpred304_Delphi()) ) {s = 16;}
						 
						input.seek(index219_7);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA219_8 = input.LA(1);
						 
						int index219_8 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred294_Delphi()) ) {s = 106;}
						else if ( (synpred304_Delphi()) ) {s = 16;}
						 
						input.seek(index219_8);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA219_9 = input.LA(1);
						 
						int index219_9 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred295_Delphi()) ) {s = 107;}
						else if ( (synpred304_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 108;}
						 
						input.seek(index219_9);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA219_10 = input.LA(1);
						 
						int index219_10 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred296_Delphi()) ) {s = 109;}
						else if ( (synpred304_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 108;}
						 
						input.seek(index219_10);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA219_11 = input.LA(1);
						 
						int index219_11 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred297_Delphi()) ) {s = 110;}
						else if ( (synpred304_Delphi()) ) {s = 16;}
						 
						input.seek(index219_11);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA219_12 = input.LA(1);
						 
						int index219_12 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred300_Delphi()) ) {s = 111;}
						else if ( (synpred304_Delphi()) ) {s = 16;}
						 
						input.seek(index219_12);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA219_13 = input.LA(1);
						 
						int index219_13 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred302_Delphi()) ) {s = 112;}
						else if ( (synpred304_Delphi()) ) {s = 16;}
						 
						input.seek(index219_13);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA219_14 = input.LA(1);
						 
						int index219_14 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred302_Delphi()) ) {s = 112;}
						else if ( (synpred304_Delphi()) ) {s = 16;}
						 
						input.seek(index219_14);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA219_15 = input.LA(1);
						 
						int index219_15 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred303_Delphi()) ) {s = 113;}
						else if ( (synpred304_Delphi()) ) {s = 16;}
						 
						input.seek(index219_15);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA219_17 = input.LA(1);
						 
						int index219_17 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred304_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 108;}
						 
						input.seek(index219_17);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA219_18 = input.LA(1);
						 
						int index219_18 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred304_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 108;}
						 
						input.seek(index219_18);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA219_19 = input.LA(1);
						 
						int index219_19 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred304_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 108;}
						 
						input.seek(index219_19);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA219_26 = input.LA(1);
						 
						int index219_26 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred304_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 108;}
						 
						input.seek(index219_26);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA219_34 = input.LA(1);
						 
						int index219_34 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred304_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 108;}
						 
						input.seek(index219_34);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA219_35 = input.LA(1);
						 
						int index219_35 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred304_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 108;}
						 
						input.seek(index219_35);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA219_36 = input.LA(1);
						 
						int index219_36 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred304_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 108;}
						 
						input.seek(index219_36);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA219_37 = input.LA(1);
						 
						int index219_37 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred304_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 108;}
						 
						input.seek(index219_37);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA219_39 = input.LA(1);
						 
						int index219_39 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred304_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 108;}
						 
						input.seek(index219_39);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA219_40 = input.LA(1);
						 
						int index219_40 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred304_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 108;}
						 
						input.seek(index219_40);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA219_42 = input.LA(1);
						 
						int index219_42 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred304_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 108;}
						 
						input.seek(index219_42);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA219_48 = input.LA(1);
						 
						int index219_48 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred304_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 108;}
						 
						input.seek(index219_48);
						if ( s>=0 ) return s;
						break;

					case 27 : 
						int LA219_51 = input.LA(1);
						 
						int index219_51 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred304_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 108;}
						 
						input.seek(index219_51);
						if ( s>=0 ) return s;
						break;

					case 28 : 
						int LA219_53 = input.LA(1);
						 
						int index219_53 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred304_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 108;}
						 
						input.seek(index219_53);
						if ( s>=0 ) return s;
						break;

					case 29 : 
						int LA219_59 = input.LA(1);
						 
						int index219_59 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred304_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 108;}
						 
						input.seek(index219_59);
						if ( s>=0 ) return s;
						break;

					case 30 : 
						int LA219_61 = input.LA(1);
						 
						int index219_61 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred304_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 108;}
						 
						input.seek(index219_61);
						if ( s>=0 ) return s;
						break;

					case 31 : 
						int LA219_76 = input.LA(1);
						 
						int index219_76 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred304_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 108;}
						 
						input.seek(index219_76);
						if ( s>=0 ) return s;
						break;

					case 32 : 
						int LA219_91 = input.LA(1);
						 
						int index219_91 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred304_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 108;}
						 
						input.seek(index219_91);
						if ( s>=0 ) return s;
						break;

					case 33 : 
						int LA219_97 = input.LA(1);
						 
						int index219_97 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred304_Delphi()) ) {s = 16;}
						else if ( (true) ) {s = 108;}
						 
						input.seek(index219_97);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 219, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA230_eotS =
		"\151\uffff";
	static final String DFA230_eofS =
		"\1\1\150\uffff";
	static final String DFA230_minS =
		"\1\4\2\uffff\1\0\53\uffff\1\0\6\uffff\1\0\6\uffff\1\0\4\uffff\1\0\5\uffff"+
		"\1\0\6\uffff\1\0\31\uffff";
	static final String DFA230_maxS =
		"\1\u00c8\2\uffff\1\0\53\uffff\1\0\6\uffff\1\0\6\uffff\1\0\4\uffff\1\0"+
		"\5\uffff\1\0\6\uffff\1\0\31\uffff";
	static final String DFA230_acceptS =
		"\1\uffff\1\2\146\uffff\1\1";
	static final String DFA230_specialS =
		"\3\uffff\1\0\53\uffff\1\1\6\uffff\1\2\6\uffff\1\3\4\uffff\1\4\5\uffff"+
		"\1\5\6\uffff\1\6\31\uffff}>";
	static final String[] DFA230_transitionS = {
			"\1\1\1\uffff\3\1\1\uffff\3\1\1\uffff\2\1\1\75\1\1\1\uffff\7\1\1\uffff"+
			"\12\1\1\uffff\2\1\1\66\4\1\3\uffff\13\1\1\uffff\3\1\2\uffff\2\1\1\uffff"+
			"\1\1\4\uffff\7\1\1\uffff\2\1\1\57\2\uffff\3\1\1\110\1\3\20\1\3\uffff"+
			"\4\1\1\102\2\1\1\uffff\5\1\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff"+
			"\1\1\2\uffff\4\1\1\uffff\1\1\1\uffff\15\1\1\uffff\1\1\15\uffff\3\1\3"+
			"\uffff\1\1\6\uffff\2\1\2\uffff\4\1\2\uffff\2\1\1\uffff\3\1\1\117",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA230_eot = DFA.unpackEncodedString(DFA230_eotS);
	static final short[] DFA230_eof = DFA.unpackEncodedString(DFA230_eofS);
	static final char[] DFA230_min = DFA.unpackEncodedStringToUnsignedChars(DFA230_minS);
	static final char[] DFA230_max = DFA.unpackEncodedStringToUnsignedChars(DFA230_maxS);
	static final short[] DFA230_accept = DFA.unpackEncodedString(DFA230_acceptS);
	static final short[] DFA230_special = DFA.unpackEncodedString(DFA230_specialS);
	static final short[][] DFA230_transition;

	static {
		int numStates = DFA230_transitionS.length;
		DFA230_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA230_transition[i] = DFA.unpackEncodedString(DFA230_transitionS[i]);
		}
	}

	protected class DFA230 extends DFA {

		public DFA230(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 230;
			this.eot = DFA230_eot;
			this.eof = DFA230_eof;
			this.min = DFA230_min;
			this.max = DFA230_max;
			this.accept = DFA230_accept;
			this.special = DFA230_special;
			this.transition = DFA230_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 498:78: ( designatorItem )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA230_3 = input.LA(1);
						 
						int index230_3 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred320_Delphi()) ) {s = 104;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index230_3);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA230_47 = input.LA(1);
						 
						int index230_47 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred320_Delphi()) ) {s = 104;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index230_47);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA230_54 = input.LA(1);
						 
						int index230_54 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred320_Delphi()) ) {s = 104;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index230_54);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA230_61 = input.LA(1);
						 
						int index230_61 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred320_Delphi()) ) {s = 104;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index230_61);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA230_66 = input.LA(1);
						 
						int index230_66 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred320_Delphi()) ) {s = 104;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index230_66);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA230_72 = input.LA(1);
						 
						int index230_72 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred320_Delphi()) ) {s = 104;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index230_72);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA230_79 = input.LA(1);
						 
						int index230_79 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred320_Delphi()) ) {s = 104;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index230_79);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 230, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA261_eotS =
		"\146\uffff";
	static final String DFA261_eofS =
		"\1\2\145\uffff";
	static final String DFA261_minS =
		"\1\4\1\0\144\uffff";
	static final String DFA261_maxS =
		"\1\u00c8\1\0\144\uffff";
	static final String DFA261_acceptS =
		"\2\uffff\1\3\141\uffff\1\1\1\2";
	static final String DFA261_specialS =
		"\1\uffff\1\0\144\uffff}>";
	static final String[] DFA261_transitionS = {
			"\1\2\1\uffff\3\2\1\uffff\3\2\2\uffff\3\2\1\uffff\7\2\1\uffff\12\2\1\uffff"+
			"\7\2\3\uffff\13\2\1\uffff\3\2\2\uffff\2\2\1\uffff\1\2\4\uffff\7\2\1\uffff"+
			"\3\2\2\uffff\3\2\1\1\21\2\3\uffff\7\2\1\uffff\5\2\1\uffff\1\2\2\uffff"+
			"\2\2\1\uffff\2\2\1\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff\15\2\1\uffff"+
			"\1\2\15\uffff\3\2\3\uffff\1\2\6\uffff\2\2\2\uffff\4\2\2\uffff\2\2\1\uffff"+
			"\4\2",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA261_eot = DFA.unpackEncodedString(DFA261_eotS);
	static final short[] DFA261_eof = DFA.unpackEncodedString(DFA261_eofS);
	static final char[] DFA261_min = DFA.unpackEncodedStringToUnsignedChars(DFA261_minS);
	static final char[] DFA261_max = DFA.unpackEncodedStringToUnsignedChars(DFA261_maxS);
	static final short[] DFA261_accept = DFA.unpackEncodedString(DFA261_acceptS);
	static final short[] DFA261_special = DFA.unpackEncodedString(DFA261_specialS);
	static final short[][] DFA261_transition;

	static {
		int numStates = DFA261_transitionS.length;
		DFA261_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA261_transition[i] = DFA.unpackEncodedString(DFA261_transitionS[i]);
		}
	}

	protected class DFA261 extends DFA {

		public DFA261(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 261;
			this.eot = DFA261_eot;
			this.eof = DFA261_eof;
			this.min = DFA261_min;
			this.max = DFA261_max;
			this.accept = DFA261_accept;
			this.special = DFA261_special;
			this.transition = DFA261_transition;
		}
		@Override
		public String getDescription() {
			return "589:1: constExpression : ( '(' recordConstExpression ( ';' recordConstExpression )* ')' | '(' constExpression ( ',' constExpression )* ')' ( constExpression )? | expression );";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA261_1 = input.LA(1);
						 
						int index261_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred386_Delphi()) ) {s = 100;}
						else if ( (synpred389_Delphi()) ) {s = 101;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index261_1);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 261, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA260_eotS =
		"\146\uffff";
	static final String DFA260_eofS =
		"\1\41\145\uffff";
	static final String DFA260_minS =
		"\1\4\143\0\2\uffff";
	static final String DFA260_maxS =
		"\1\u00c8\143\0\2\uffff";
	static final String DFA260_acceptS =
		"\144\uffff\1\1\1\2";
	static final String DFA260_specialS =
		"\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
		"\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
		"\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
		"\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
		"\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
		"\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117\1\120"+
		"\1\121\1\122\1\123\1\124\1\125\1\126\1\127\1\130\1\131\1\132\1\133\1\134"+
		"\1\135\1\136\1\137\1\140\1\141\1\142\2\uffff}>";
	static final String[] DFA260_transitionS = {
			"\1\43\1\uffff\1\130\1\31\1\130\1\uffff\1\31\1\75\1\113\2\uffff\1\130"+
			"\1\4\1\56\1\uffff\1\74\1\130\1\67\1\46\1\57\1\131\1\47\1\uffff\1\63\1"+
			"\60\2\130\2\17\1\105\1\34\1\60\1\104\1\uffff\1\31\1\141\1\27\1\42\1\143"+
			"\2\130\3\uffff\1\133\1\66\1\32\1\136\1\130\1\35\1\116\1\73\1\124\1\15"+
			"\1\120\1\uffff\1\130\1\134\1\137\2\uffff\1\3\1\50\1\uffff\1\33\4\uffff"+
			"\1\127\1\106\1\50\1\125\1\22\1\126\1\112\1\uffff\1\50\1\72\1\21\2\uffff"+
			"\1\50\1\37\1\110\1\1\1\30\1\130\1\10\1\31\1\61\1\122\1\16\1\107\1\6\1"+
			"\50\1\130\1\44\1\140\1\51\1\31\1\130\1\111\3\uffff\1\114\1\36\1\7\1\130"+
			"\1\11\1\53\1\2\1\uffff\1\62\1\52\1\54\1\55\1\20\1\uffff\1\71\2\uffff"+
			"\1\76\1\101\1\uffff\1\130\1\25\1\uffff\1\130\2\uffff\1\77\1\63\1\70\1"+
			"\115\1\uffff\1\40\1\uffff\4\31\1\130\1\117\1\103\1\45\1\130\1\132\1\65"+
			"\1\142\1\14\1\uffff\1\64\15\uffff\1\13\1\23\1\13\3\uffff\1\12\6\uffff"+
			"\1\123\1\135\2\uffff\1\65\1\121\2\130\2\uffff\1\100\1\102\1\uffff\1\31"+
			"\1\24\1\5\1\26",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			""
	};

	static final short[] DFA260_eot = DFA.unpackEncodedString(DFA260_eotS);
	static final short[] DFA260_eof = DFA.unpackEncodedString(DFA260_eofS);
	static final char[] DFA260_min = DFA.unpackEncodedStringToUnsignedChars(DFA260_minS);
	static final char[] DFA260_max = DFA.unpackEncodedStringToUnsignedChars(DFA260_maxS);
	static final short[] DFA260_accept = DFA.unpackEncodedString(DFA260_acceptS);
	static final short[] DFA260_special = DFA.unpackEncodedString(DFA260_specialS);
	static final short[][] DFA260_transition;

	static {
		int numStates = DFA260_transitionS.length;
		DFA260_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA260_transition[i] = DFA.unpackEncodedString(DFA260_transitionS[i]);
		}
	}

	protected class DFA260 extends DFA {

		public DFA260(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 260;
			this.eot = DFA260_eot;
			this.eof = DFA260_eof;
			this.min = DFA260_min;
			this.max = DFA260_max;
			this.accept = DFA260_accept;
			this.special = DFA260_special;
			this.transition = DFA260_transition;
		}
		@Override
		public String getDescription() {
			return "590:79: ( constExpression )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA260_1 = input.LA(1);
						 
						int index260_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_1);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA260_2 = input.LA(1);
						 
						int index260_2 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_2);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA260_3 = input.LA(1);
						 
						int index260_3 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_3);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA260_4 = input.LA(1);
						 
						int index260_4 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_4);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA260_5 = input.LA(1);
						 
						int index260_5 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_5);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA260_6 = input.LA(1);
						 
						int index260_6 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_6);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA260_7 = input.LA(1);
						 
						int index260_7 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_7);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA260_8 = input.LA(1);
						 
						int index260_8 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_8);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA260_9 = input.LA(1);
						 
						int index260_9 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_9);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA260_10 = input.LA(1);
						 
						int index260_10 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_10);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA260_11 = input.LA(1);
						 
						int index260_11 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_11);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA260_12 = input.LA(1);
						 
						int index260_12 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_12);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA260_13 = input.LA(1);
						 
						int index260_13 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_13);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA260_14 = input.LA(1);
						 
						int index260_14 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_14);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA260_15 = input.LA(1);
						 
						int index260_15 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_15);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA260_16 = input.LA(1);
						 
						int index260_16 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_16);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA260_17 = input.LA(1);
						 
						int index260_17 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_17);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA260_18 = input.LA(1);
						 
						int index260_18 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_18);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA260_19 = input.LA(1);
						 
						int index260_19 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_19);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA260_20 = input.LA(1);
						 
						int index260_20 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_20);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA260_21 = input.LA(1);
						 
						int index260_21 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_21);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA260_22 = input.LA(1);
						 
						int index260_22 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_22);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA260_23 = input.LA(1);
						 
						int index260_23 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_23);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA260_24 = input.LA(1);
						 
						int index260_24 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_24);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA260_25 = input.LA(1);
						 
						int index260_25 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_25);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA260_26 = input.LA(1);
						 
						int index260_26 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_26);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA260_27 = input.LA(1);
						 
						int index260_27 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_27);
						if ( s>=0 ) return s;
						break;

					case 27 : 
						int LA260_28 = input.LA(1);
						 
						int index260_28 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_28);
						if ( s>=0 ) return s;
						break;

					case 28 : 
						int LA260_29 = input.LA(1);
						 
						int index260_29 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_29);
						if ( s>=0 ) return s;
						break;

					case 29 : 
						int LA260_30 = input.LA(1);
						 
						int index260_30 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_30);
						if ( s>=0 ) return s;
						break;

					case 30 : 
						int LA260_31 = input.LA(1);
						 
						int index260_31 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_31);
						if ( s>=0 ) return s;
						break;

					case 31 : 
						int LA260_32 = input.LA(1);
						 
						int index260_32 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_32);
						if ( s>=0 ) return s;
						break;

					case 32 : 
						int LA260_33 = input.LA(1);
						 
						int index260_33 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_33);
						if ( s>=0 ) return s;
						break;

					case 33 : 
						int LA260_34 = input.LA(1);
						 
						int index260_34 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_34);
						if ( s>=0 ) return s;
						break;

					case 34 : 
						int LA260_35 = input.LA(1);
						 
						int index260_35 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_35);
						if ( s>=0 ) return s;
						break;

					case 35 : 
						int LA260_36 = input.LA(1);
						 
						int index260_36 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_36);
						if ( s>=0 ) return s;
						break;

					case 36 : 
						int LA260_37 = input.LA(1);
						 
						int index260_37 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_37);
						if ( s>=0 ) return s;
						break;

					case 37 : 
						int LA260_38 = input.LA(1);
						 
						int index260_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_38);
						if ( s>=0 ) return s;
						break;

					case 38 : 
						int LA260_39 = input.LA(1);
						 
						int index260_39 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_39);
						if ( s>=0 ) return s;
						break;

					case 39 : 
						int LA260_40 = input.LA(1);
						 
						int index260_40 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_40);
						if ( s>=0 ) return s;
						break;

					case 40 : 
						int LA260_41 = input.LA(1);
						 
						int index260_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_41);
						if ( s>=0 ) return s;
						break;

					case 41 : 
						int LA260_42 = input.LA(1);
						 
						int index260_42 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_42);
						if ( s>=0 ) return s;
						break;

					case 42 : 
						int LA260_43 = input.LA(1);
						 
						int index260_43 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_43);
						if ( s>=0 ) return s;
						break;

					case 43 : 
						int LA260_44 = input.LA(1);
						 
						int index260_44 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_44);
						if ( s>=0 ) return s;
						break;

					case 44 : 
						int LA260_45 = input.LA(1);
						 
						int index260_45 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_45);
						if ( s>=0 ) return s;
						break;

					case 45 : 
						int LA260_46 = input.LA(1);
						 
						int index260_46 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_46);
						if ( s>=0 ) return s;
						break;

					case 46 : 
						int LA260_47 = input.LA(1);
						 
						int index260_47 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_47);
						if ( s>=0 ) return s;
						break;

					case 47 : 
						int LA260_48 = input.LA(1);
						 
						int index260_48 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_48);
						if ( s>=0 ) return s;
						break;

					case 48 : 
						int LA260_49 = input.LA(1);
						 
						int index260_49 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_49);
						if ( s>=0 ) return s;
						break;

					case 49 : 
						int LA260_50 = input.LA(1);
						 
						int index260_50 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_50);
						if ( s>=0 ) return s;
						break;

					case 50 : 
						int LA260_51 = input.LA(1);
						 
						int index260_51 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_51);
						if ( s>=0 ) return s;
						break;

					case 51 : 
						int LA260_52 = input.LA(1);
						 
						int index260_52 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_52);
						if ( s>=0 ) return s;
						break;

					case 52 : 
						int LA260_53 = input.LA(1);
						 
						int index260_53 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_53);
						if ( s>=0 ) return s;
						break;

					case 53 : 
						int LA260_54 = input.LA(1);
						 
						int index260_54 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_54);
						if ( s>=0 ) return s;
						break;

					case 54 : 
						int LA260_55 = input.LA(1);
						 
						int index260_55 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_55);
						if ( s>=0 ) return s;
						break;

					case 55 : 
						int LA260_56 = input.LA(1);
						 
						int index260_56 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_56);
						if ( s>=0 ) return s;
						break;

					case 56 : 
						int LA260_57 = input.LA(1);
						 
						int index260_57 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_57);
						if ( s>=0 ) return s;
						break;

					case 57 : 
						int LA260_58 = input.LA(1);
						 
						int index260_58 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_58);
						if ( s>=0 ) return s;
						break;

					case 58 : 
						int LA260_59 = input.LA(1);
						 
						int index260_59 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_59);
						if ( s>=0 ) return s;
						break;

					case 59 : 
						int LA260_60 = input.LA(1);
						 
						int index260_60 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_60);
						if ( s>=0 ) return s;
						break;

					case 60 : 
						int LA260_61 = input.LA(1);
						 
						int index260_61 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_61);
						if ( s>=0 ) return s;
						break;

					case 61 : 
						int LA260_62 = input.LA(1);
						 
						int index260_62 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_62);
						if ( s>=0 ) return s;
						break;

					case 62 : 
						int LA260_63 = input.LA(1);
						 
						int index260_63 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_63);
						if ( s>=0 ) return s;
						break;

					case 63 : 
						int LA260_64 = input.LA(1);
						 
						int index260_64 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_64);
						if ( s>=0 ) return s;
						break;

					case 64 : 
						int LA260_65 = input.LA(1);
						 
						int index260_65 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_65);
						if ( s>=0 ) return s;
						break;

					case 65 : 
						int LA260_66 = input.LA(1);
						 
						int index260_66 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_66);
						if ( s>=0 ) return s;
						break;

					case 66 : 
						int LA260_67 = input.LA(1);
						 
						int index260_67 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_67);
						if ( s>=0 ) return s;
						break;

					case 67 : 
						int LA260_68 = input.LA(1);
						 
						int index260_68 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_68);
						if ( s>=0 ) return s;
						break;

					case 68 : 
						int LA260_69 = input.LA(1);
						 
						int index260_69 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_69);
						if ( s>=0 ) return s;
						break;

					case 69 : 
						int LA260_70 = input.LA(1);
						 
						int index260_70 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_70);
						if ( s>=0 ) return s;
						break;

					case 70 : 
						int LA260_71 = input.LA(1);
						 
						int index260_71 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_71);
						if ( s>=0 ) return s;
						break;

					case 71 : 
						int LA260_72 = input.LA(1);
						 
						int index260_72 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_72);
						if ( s>=0 ) return s;
						break;

					case 72 : 
						int LA260_73 = input.LA(1);
						 
						int index260_73 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_73);
						if ( s>=0 ) return s;
						break;

					case 73 : 
						int LA260_74 = input.LA(1);
						 
						int index260_74 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_74);
						if ( s>=0 ) return s;
						break;

					case 74 : 
						int LA260_75 = input.LA(1);
						 
						int index260_75 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_75);
						if ( s>=0 ) return s;
						break;

					case 75 : 
						int LA260_76 = input.LA(1);
						 
						int index260_76 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_76);
						if ( s>=0 ) return s;
						break;

					case 76 : 
						int LA260_77 = input.LA(1);
						 
						int index260_77 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_77);
						if ( s>=0 ) return s;
						break;

					case 77 : 
						int LA260_78 = input.LA(1);
						 
						int index260_78 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_78);
						if ( s>=0 ) return s;
						break;

					case 78 : 
						int LA260_79 = input.LA(1);
						 
						int index260_79 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_79);
						if ( s>=0 ) return s;
						break;

					case 79 : 
						int LA260_80 = input.LA(1);
						 
						int index260_80 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_80);
						if ( s>=0 ) return s;
						break;

					case 80 : 
						int LA260_81 = input.LA(1);
						 
						int index260_81 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_81);
						if ( s>=0 ) return s;
						break;

					case 81 : 
						int LA260_82 = input.LA(1);
						 
						int index260_82 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_82);
						if ( s>=0 ) return s;
						break;

					case 82 : 
						int LA260_83 = input.LA(1);
						 
						int index260_83 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_83);
						if ( s>=0 ) return s;
						break;

					case 83 : 
						int LA260_84 = input.LA(1);
						 
						int index260_84 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_84);
						if ( s>=0 ) return s;
						break;

					case 84 : 
						int LA260_85 = input.LA(1);
						 
						int index260_85 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_85);
						if ( s>=0 ) return s;
						break;

					case 85 : 
						int LA260_86 = input.LA(1);
						 
						int index260_86 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_86);
						if ( s>=0 ) return s;
						break;

					case 86 : 
						int LA260_87 = input.LA(1);
						 
						int index260_87 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_87);
						if ( s>=0 ) return s;
						break;

					case 87 : 
						int LA260_88 = input.LA(1);
						 
						int index260_88 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_88);
						if ( s>=0 ) return s;
						break;

					case 88 : 
						int LA260_89 = input.LA(1);
						 
						int index260_89 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_89);
						if ( s>=0 ) return s;
						break;

					case 89 : 
						int LA260_90 = input.LA(1);
						 
						int index260_90 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_90);
						if ( s>=0 ) return s;
						break;

					case 90 : 
						int LA260_91 = input.LA(1);
						 
						int index260_91 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_91);
						if ( s>=0 ) return s;
						break;

					case 91 : 
						int LA260_92 = input.LA(1);
						 
						int index260_92 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_92);
						if ( s>=0 ) return s;
						break;

					case 92 : 
						int LA260_93 = input.LA(1);
						 
						int index260_93 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_93);
						if ( s>=0 ) return s;
						break;

					case 93 : 
						int LA260_94 = input.LA(1);
						 
						int index260_94 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_94);
						if ( s>=0 ) return s;
						break;

					case 94 : 
						int LA260_95 = input.LA(1);
						 
						int index260_95 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_95);
						if ( s>=0 ) return s;
						break;

					case 95 : 
						int LA260_96 = input.LA(1);
						 
						int index260_96 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_96);
						if ( s>=0 ) return s;
						break;

					case 96 : 
						int LA260_97 = input.LA(1);
						 
						int index260_97 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_97);
						if ( s>=0 ) return s;
						break;

					case 97 : 
						int LA260_98 = input.LA(1);
						 
						int index260_98 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_98);
						if ( s>=0 ) return s;
						break;

					case 98 : 
						int LA260_99 = input.LA(1);
						 
						int index260_99 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred388_Delphi()) ) {s = 100;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index260_99);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 260, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	public static final BitSet FOLLOW_program_in_file93 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_library_in_file97 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unit_in_file101 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_packageE_in_file105 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_programHead_in_program168 = new BitSet(new long[]{0x0080010818880800L,0x00100000000C0002L,0x1400000022000200L});
	public static final BitSet FOLLOW_usesFileClause_in_program173 = new BitSet(new long[]{0x0080010818880800L,0x00100000000C0002L,0x1000000022000200L});
	public static final BitSet FOLLOW_block_in_program177 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_program179 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PROGRAM_in_programHead233 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_namespaceName_in_programHead235 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_programParmSeq_in_programHead238 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_programHead242 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_programParmSeq293 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8042DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_programParmSeq296 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_COMMA_in_programParmSeq299 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_programParmSeq301 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_programParmSeq308 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_libraryHead_in_library366 = new BitSet(new long[]{0x0080010818880800L,0x00100000000C0002L,0x1400000022000200L});
	public static final BitSet FOLLOW_usesFileClause_in_library369 = new BitSet(new long[]{0x0080010818880800L,0x00100000000C0002L,0x1000000022000200L});
	public static final BitSet FOLLOW_block_in_library373 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_library375 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LIBRARY_in_libraryHead429 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_namespaceName_in_libraryHead431 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_hintingDirective_in_libraryHead434 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_libraryHead438 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_packageHead_in_packageE503 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_requiresClause_in_packageE505 = new BitSet(new long[]{0x0002000020000000L});
	public static final BitSet FOLLOW_containsClause_in_packageE508 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_packageE512 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_packageE514 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PACKAGE_in_packageHead568 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_namespaceName_in_packageHead570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_packageHead572 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unitHead_in_unit633 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_unitInterface_in_unit635 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_unitImplementation_in_unit637 = new BitSet(new long[]{0x0002000000080000L,0x0000000000004000L});
	public static final BitSet FOLLOW_unitBlock_in_unit639 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_unit641 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UNIT_in_unitHead698 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_namespaceName_in_unitHead700 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_hintingDirective_in_unitHead703 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_unitHead707 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTERFACE_in_unitInterface772 = new BitSet(new long[]{0x0080000818800002L,0x0010000000080002L,0x1400000022000200L});
	public static final BitSet FOLLOW_usesClause_in_unitInterface775 = new BitSet(new long[]{0x0080000818800002L,0x0010000000080002L,0x1000000022000200L});
	public static final BitSet FOLLOW_interfaceDecl_in_unitInterface780 = new BitSet(new long[]{0x0080000818800002L,0x0010000000080002L,0x1000000022000200L});
	public static final BitSet FOLLOW_IMPLEMENTATION_in_unitImplementation845 = new BitSet(new long[]{0x0080000818800002L,0x00100000000C0002L,0x1400000022000200L});
	public static final BitSet FOLLOW_usesClause_in_unitImplementation848 = new BitSet(new long[]{0x0080000818800002L,0x00100000000C0002L,0x1000000022000200L});
	public static final BitSet FOLLOW_declSection_in_unitImplementation853 = new BitSet(new long[]{0x0080000818800002L,0x00100000000C0002L,0x1000000022000200L});
	public static final BitSet FOLLOW_unitInitialization_in_unitBlock927 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_unitBlock929 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_compoundStatement_in_unitBlock962 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_END_in_unitBlock995 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INITIALIZATION_in_unitInitialization1042 = new BitSet(new long[]{0xB25019026039C940L,0x880602904F083508L,0xE100380018E8206DL,0x000000000000014FL});
	public static final BitSet FOLLOW_statementList_in_unitInitialization1044 = new BitSet(new long[]{0x2000000000000002L});
	public static final BitSet FOLLOW_unitFinalization_in_unitInitialization1047 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FINALIZATION_in_unitFinalization1098 = new BitSet(new long[]{0x925019026039C940L,0x880602904F083508L,0xE100380018E8206DL,0x000000000000014FL});
	public static final BitSet FOLLOW_statementList_in_unitFinalization1100 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONTAINS_in_containsClause1154 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_namespaceFileNameList_in_containsClause1156 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REQUIRES_in_requiresClause1207 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_namespaceNameList_in_requiresClause1209 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_USES_in_usesClause1264 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_namespaceNameList_in_usesClause1266 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_USES_in_usesFileClause1325 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_namespaceFileNameList_in_usesFileClause1327 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespaceFileName_in_namespaceFileNameList1379 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_COMMA_in_namespaceFileNameList1382 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_namespaceFileName_in_namespaceFileNameList1384 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_namespaceFileNameList1388 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespaceName_in_namespaceFileName1445 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000800L});
	public static final BitSet FOLLOW_IN_in_namespaceFileName1448 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_QuotedString_in_namespaceFileName1450 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespaceName_in_namespaceNameList1511 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_COMMA_in_namespaceNameList1514 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_namespaceName_in_namespaceNameList1516 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_namespaceNameList1520 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_declSection_in_block1593 = new BitSet(new long[]{0x0080000818880802L,0x00100000000C0002L,0x1000000022000200L});
	public static final BitSet FOLLOW_blockBody_in_block1598 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_compoundStatement_in_blockBody1656 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_assemblerStatement_in_blockBody1689 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_labelDeclSection_in_declSection1743 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constSection_in_declSection1776 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeSection_in_declSection1809 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_varSection_in_declSection1842 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_methodDecl_in_declSection1875 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procDecl_in_declSection1908 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exportsSection_in_declSection1941 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constSection_in_interfaceDecl1993 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeSection_in_interfaceDecl2026 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_varSection_in_interfaceDecl2059 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exportedProcHeading_in_interfaceDecl2092 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exportsSection_in_interfaceDecl2125 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procDecl_in_interfaceDecl2158 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_methodDecl_in_interfaceDecl2191 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LABEL_in_labelDeclSection2240 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100380008E8002DL,0x000000000000000CL});
	public static final BitSet FOLLOW_label_in_labelDeclSection2242 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_COMMA_in_labelDeclSection2245 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100380008E8002DL,0x000000000000000CL});
	public static final BitSet FOLLOW_label_in_labelDeclSection2247 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_labelDeclSection2251 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constKey_in_constSection2304 = new BitSet(new long[]{0x1250180260108142L,0x8002029049081400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_constDeclaration_in_constSection2307 = new BitSet(new long[]{0x1250180260108142L,0x8002029049081400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_customAttribute_in_constDeclaration2462 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_constDeclaration2466 = new BitSet(new long[]{0x0004000001000000L});
	public static final BitSet FOLLOW_COLON_in_constDeclaration2469 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_typeDecl_in_constDeclaration2471 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_EQUAL_in_constDeclaration2475 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_constExpression_in_constDeclaration2477 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_hintingDirective_in_constDeclaration2480 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_constDeclaration2484 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TYPE_in_typeSection2551 = new BitSet(new long[]{0x1250180260108140L,0x8002029049081400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_typeDeclaration_in_typeSection2553 = new BitSet(new long[]{0x1250180260108142L,0x8002029049081400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_typeDeclaration_in_typeSection2556 = new BitSet(new long[]{0x1250180260108142L,0x8002029049081400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_customAttribute_in_typeDeclaration2622 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_genericTypeIdent_in_typeDeclaration2626 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_EQUAL_in_typeDeclaration2628 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_typeDecl_in_typeDeclaration2630 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_hintingDirective_in_typeDeclaration2633 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_typeDeclaration2637 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_varKey_in_varSection2714 = new BitSet(new long[]{0x1250180260108140L,0x8002029049081400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_varDeclaration_in_varSection2716 = new BitSet(new long[]{0x1250180260108142L,0x8002029049081400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_varDeclaration_in_varSection2719 = new BitSet(new long[]{0x1250180260108142L,0x8002029049081400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_customAttribute_in_varDeclaration2879 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_identListFlat_in_varDeclaration2883 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_varDeclaration2885 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_typeDecl_in_varDeclaration2887 = new BitSet(new long[]{0x0024000400000010L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_varValueSpec_in_varDeclaration2890 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_hintingDirective_in_varDeclaration2895 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_varDeclaration2899 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ABSOLUTE_in_varValueSpec2971 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_varValueSpec2973 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ABSOLUTE_in_varValueSpec3006 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_constExpression_in_varValueSpec3008 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EQUAL_in_varValueSpec3041 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_constExpression_in_varValueSpec3043 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXPORTS_in_exportsSection3094 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_exportsSection3096 = new BitSet(new long[]{0x0000000002000000L,0x0000000042001000L,0x0000000000002100L});
	public static final BitSet FOLLOW_exportItem_in_exportsSection3098 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_COMMA_in_exportsSection3101 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_exportsSection3103 = new BitSet(new long[]{0x0000000002000000L,0x0000000042001000L,0x0000000000002100L});
	public static final BitSet FOLLOW_exportItem_in_exportsSection3105 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_exportsSection3109 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_exportItem3165 = new BitSet(new long[]{0x1250180268108140L,0x8002029049081400L,0xF100100008E8042DL,0x000000000000004CL});
	public static final BitSet FOLLOW_formalParameterList_in_exportItem3168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_exportItem3172 = new BitSet(new long[]{0x0000000000000002L,0x0000000040001000L,0x0000000000000100L});
	public static final BitSet FOLLOW_INDEX_in_exportItem3177 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_exportItem3179 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_NAME_in_exportItem3184 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_exportItem3186 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_RESIDENT_in_exportItem3191 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_strucType_in_typeDecl3253 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pointerType_in_typeDecl3286 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_stringType_in_typeDecl3319 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedureType_in_typeDecl3352 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_variantType_in_typeDecl3385 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TYPE_in_typeDecl3419 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_typeId_in_typeDecl3423 = new BitSet(new long[]{0x0000010000000002L,0x0000000006000000L});
	public static final BitSet FOLLOW_genericPostfix_in_typeDecl3426 = new BitSet(new long[]{0x0000010000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_DOT_in_typeDecl3431 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_typeDecl_in_typeDecl3433 = new BitSet(new long[]{0x0000010000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_paranthesePostfix_in_typeDecl3438 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleType_in_typeDecl3473 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PACKED_in_strucType3559 = new BitSet(new long[]{0x0800002000800200L,0x0000001000010000L,0x0000000000004002L});
	public static final BitSet FOLLOW_strucTypePart_in_strucType3563 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_arrayType_in_strucTypePart3619 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_setType_in_strucTypePart3652 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fileType_in_strucTypePart3685 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classDecl_in_strucTypePart3718 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ARRAY_in_arrayType3776 = new BitSet(new long[]{0x0000000000000000L,0x0000002000080000L});
	public static final BitSet FOLLOW_LBRACK_in_arrayType3779 = new BitSet(new long[]{0x12501903E2118140L,0x941702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_arrayIndex_in_arrayType3782 = new BitSet(new long[]{0x0000000002000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_COMMA_in_arrayType3787 = new BitSet(new long[]{0x12501903E2118140L,0x941702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_arrayIndex_in_arrayType3790 = new BitSet(new long[]{0x0000000002000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_arrayType3796 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_OF_in_arrayType3800 = new BitSet(new long[]{0x1A501923E8918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_arraySubType_in_arrayType3802 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeId_in_arrayIndex3928 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_arrayIndex3961 = new BitSet(new long[]{0x0000020000000000L});
	public static final BitSet FOLLOW_DOTDOT_in_arrayIndex3963 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_arrayIndex3965 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONST_in_arraySubType4019 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeDecl_in_arraySubType4052 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SET_in_setType4110 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_OF_in_setType4112 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_typeDecl_in_setType4114 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FILE_in_fileType4188 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
	public static final BitSet FOLLOW_OF_in_fileType4191 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_typeDecl_in_fileType4193 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_POINTER2_in_pointerType4249 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_typeDecl_in_pointerType4251 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_POINTER_in_pointerType4284 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRING_in_stringType4339 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
	public static final BitSet FOLLOW_LBRACK_in_stringType4342 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_stringType4344 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_stringType4346 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TYPE_in_stringType4386 = new BitSet(new long[]{0x0000000000000100L});
	public static final BitSet FOLLOW_ANSISTRING_in_stringType4390 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_codePageNumber_in_stringType4393 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_codePageNumber4446 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000280000000000L});
	public static final BitSet FOLLOW_intNum_in_codePageNumber4448 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_codePageNumber4450 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_methodType_in_procedureType4502 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleProcedureType_in_procedureType4535 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedureReference_in_procedureType4568 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedureTypeHeading_in_methodType4623 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_OF_in_methodType4625 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_OBJECT_in_methodType4627 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedureTypeHeading_in_simpleProcedureType4673 = new BitSet(new long[]{0x0040000000400002L,0x0000400000000000L,0x0000000000102808L});
	public static final BitSet FOLLOW_SEMI_in_simpleProcedureType4678 = new BitSet(new long[]{0x0040000000400000L,0x0000400000000000L,0x0000000000100808L});
	public static final BitSet FOLLOW_callConventionNoSemi_in_simpleProcedureType4682 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REFERENCE_in_procedureReference4731 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_TO_in_procedureReference4733 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000002L});
	public static final BitSet FOLLOW_procedureTypeHeading_in_procedureReference4735 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_procedureTypeHeading4780 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_procedureTypeHeading4783 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_procedureTypeHeading4787 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_customAttribute_in_procedureTypeHeading4790 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_typeDecl_in_procedureTypeHeading4794 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PROCEDURE_in_procedureTypeHeading4842 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_procedureTypeHeading4845 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARIANT_in_variantType4901 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_simpleType4957 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subRangeType_in_simpleType4990 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_enumType_in_simpleType5023 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constExpression_in_subRangeType5076 = new BitSet(new long[]{0x0000020000000002L});
	public static final BitSet FOLLOW_DOTDOT_in_subRangeType5079 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_constExpression_in_subRangeType5081 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_enumType5140 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_enumType5142 = new BitSet(new long[]{0x0004000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_EQUAL_in_enumType5145 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_enumType5147 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_COMMA_in_enumType5152 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_enumType5154 = new BitSet(new long[]{0x0004000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_EQUAL_in_enumType5157 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_enumType5159 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_enumType5166 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_qualifiedIdent_in_typeId5225 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_qualifiedIdent_in_genericTypeIdent5277 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
	public static final BitSet FOLLOW_genericDefinition_in_genericTypeIdent5280 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LT_in_genericDefinition5337 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_innerGeneric_in_genericDefinition5339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_genericDefinition5342 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_innerGeneric_in_genericDefinition5344 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000002000L});
	public static final BitSet FOLLOW_GT_in_genericDefinition5348 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_genericTypeIdent_in_innerGeneric5401 = new BitSet(new long[]{0x0000000003000002L});
	public static final BitSet FOLLOW_COMMA_in_innerGeneric5404 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_genericTypeIdent_in_innerGeneric5406 = new BitSet(new long[]{0x0000000003000002L});
	public static final BitSet FOLLOW_COLON_in_innerGeneric5411 = new BitSet(new long[]{0x1250180270908140L,0x8002029049001400L,0xE100100008E8002FL,0x000000000000004CL});
	public static final BitSet FOLLOW_genericConstraint_in_innerGeneric5413 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_COMMA_in_innerGeneric5416 = new BitSet(new long[]{0x1250180270908140L,0x8002029049001400L,0xE100100008E8002FL,0x000000000000004CL});
	public static final BitSet FOLLOW_genericConstraint_in_innerGeneric5418 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_genericTypeIdent_in_genericConstraint5470 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RECORD_in_genericConstraint5503 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_genericConstraint5536 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONSTRUCTOR_in_genericConstraint5569 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LT_in_genericPostfix5620 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_typeDecl_in_genericPostfix5622 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_COMMA_in_genericPostfix5625 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_typeDecl_in_genericPostfix5627 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_GT_in_genericPostfix5631 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_paranthesePostfix5679 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002280000000000L});
	public static final BitSet FOLLOW_intRealNum_in_paranthesePostfix5681 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_paranthesePostfix5683 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classTypeTypeDecl_in_classDecl5743 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classTypeDecl_in_classDecl5776 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classHelperDecl_in_classDecl5817 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_interfaceTypeDecl_in_classDecl5858 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_objectDecl_in_classDecl5899 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_recordDecl_in_classDecl5940 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_recordHelperDecl_in_classDecl5981 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classTypeTypeDecl6037 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_OF_in_classTypeTypeDecl6039 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_typeId_in_classTypeTypeDecl6041 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classTypeDecl6101 = new BitSet(new long[]{0x1252180A78928160L,0x83DA02904B081402L,0xF10010002AE8122DL,0x000000000000004CL});
	public static final BitSet FOLLOW_classState_in_classTypeDecl6104 = new BitSet(new long[]{0x1252180A78928140L,0x83DA02904B081402L,0xF10010002AE8022DL,0x000000000000004CL});
	public static final BitSet FOLLOW_classParent_in_classTypeDecl6109 = new BitSet(new long[]{0x1252180A78928140L,0x83DA029049081402L,0xF10010002AE8022DL,0x000000000000004CL});
	public static final BitSet FOLLOW_classItem_in_classTypeDecl6114 = new BitSet(new long[]{0x1252180A78928140L,0x83DA029049081402L,0xF10010002AE8022DL,0x000000000000004CL});
	public static final BitSet FOLLOW_END_in_classTypeDecl6118 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classTypeDecl6169 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_classParent_in_classTypeDecl6172 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_classParent6329 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_genericTypeIdent_in_classParent6331 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_COMMA_in_classParent6334 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_genericTypeIdent_in_classParent6336 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_classParent6340 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_classItem6408 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_classItem6441 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classField_in_classItem6474 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classProperty_in_classItem6507 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constSection_in_classItem6540 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeSection_in_classItem6573 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classItem6607 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000000002000000L});
	public static final BitSet FOLLOW_varSection_in_classItem6611 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classHelperDecl6661 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_HELPER_in_classHelperDecl6663 = new BitSet(new long[]{0x8000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_classParent_in_classHelperDecl6666 = new BitSet(new long[]{0x8000000000000000L});
	public static final BitSet FOLLOW_FOR_in_classHelperDecl6670 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_typeId_in_classHelperDecl6672 = new BitSet(new long[]{0x0002000818820000L,0x03D8008000080002L,0x1000000022400200L});
	public static final BitSet FOLLOW_classHelperItem_in_classHelperDecl6675 = new BitSet(new long[]{0x0002000818820000L,0x03D8008000080002L,0x1000000022400200L});
	public static final BitSet FOLLOW_END_in_classHelperDecl6679 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_classHelperItem6744 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_classHelperItem6777 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classProperty_in_classHelperItem6810 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constSection_in_classHelperItem6843 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeSection_in_classHelperItem6876 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classHelperItem6910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000000002000000L});
	public static final BitSet FOLLOW_varSection_in_classHelperItem6914 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_interfaceKey_in_interfaceTypeDecl6962 = new BitSet(new long[]{0x0002000810800000L,0x0050008002080002L});
	public static final BitSet FOLLOW_classParent_in_interfaceTypeDecl6965 = new BitSet(new long[]{0x0002000810800000L,0x0050008000080002L});
	public static final BitSet FOLLOW_interfaceGuid_in_interfaceTypeDecl6970 = new BitSet(new long[]{0x0002000810800000L,0x0050008000080002L});
	public static final BitSet FOLLOW_interfaceItem_in_interfaceTypeDecl6975 = new BitSet(new long[]{0x0002000810800000L,0x0050008000080002L});
	public static final BitSet FOLLOW_END_in_interfaceTypeDecl6979 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_interfaceKey_in_interfaceTypeDecl7070 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_classParent_in_interfaceTypeDecl7073 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACK_in_interfaceGuid7256 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_QuotedString_in_interfaceGuid7258 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_interfaceGuid7260 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_interfaceItem7316 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_interfaceItem7350 = new BitSet(new long[]{0x0000000000800000L,0x0040000000080000L});
	public static final BitSet FOLLOW_classProperty_in_interfaceItem7354 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OBJECT_in_objectDecl7409 = new BitSet(new long[]{0x1252180A70928140L,0x839A02904B081402L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_classParent_in_objectDecl7412 = new BitSet(new long[]{0x1252180A70928140L,0x839A029049081402L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_objectItem_in_objectDecl7417 = new BitSet(new long[]{0x1252180A70928140L,0x839A029049081402L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_END_in_objectDecl7421 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_objectItem7490 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_objectItem7523 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classField_in_objectItem7556 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleRecord_in_recordDecl7611 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_variantRecord_in_recordDecl7644 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RECORD_in_simpleRecord7697 = new BitSet(new long[]{0x1252180A78928140L,0x83DA029049081402L,0xF10010002AE8022DL,0x000000000000004CL});
	public static final BitSet FOLLOW_recordField_in_simpleRecord7700 = new BitSet(new long[]{0x1252180A78928140L,0x83DA029049081402L,0xF10010002AE8022DL,0x000000000000004CL});
	public static final BitSet FOLLOW_recordItem_in_simpleRecord7705 = new BitSet(new long[]{0x1252180A78928140L,0x83DA029049081402L,0xF10010002AE8022DL,0x000000000000004CL});
	public static final BitSet FOLLOW_END_in_simpleRecord7709 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RECORD_in_variantRecord7775 = new BitSet(new long[]{0x1250180260308140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_recordField_in_variantRecord7778 = new BitSet(new long[]{0x1250180260308140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_recordVariantSection_in_variantRecord7782 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_variantRecord7784 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_recordItem7850 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_recordItem7888 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classProperty_in_recordItem7921 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constSection_in_recordItem7954 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeSection_in_recordItem7987 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_recordField_in_recordItem8020 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_recordItem8054 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000000002000000L});
	public static final BitSet FOLLOW_varSection_in_recordItem8058 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identList_in_recordField8112 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_recordField8114 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_typeDecl_in_recordField8116 = new BitSet(new long[]{0x0020000400000002L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_hintingDirective_in_recordField8119 = new BitSet(new long[]{0x0020000400000002L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_recordField8124 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identList_in_recordVariantField8214 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_recordVariantField8216 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_typeDecl_in_recordVariantField8218 = new BitSet(new long[]{0x0020000400000002L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_hintingDirective_in_recordVariantField8221 = new BitSet(new long[]{0x0020000400000002L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_recordVariantField8226 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CASE_in_recordVariantSection8313 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_ident_in_recordVariantSection8316 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_recordVariantSection8318 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_typeDecl_in_recordVariantSection8322 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_OF_in_recordVariantSection8324 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8202DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_recordVariant_in_recordVariantSection8327 = new BitSet(new long[]{0x12501903E0118142L,0x841702955F083402L,0xE102380008E8202DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_SEMI_in_recordVariantSection8331 = new BitSet(new long[]{0x12501903E0118142L,0x841702955F083402L,0xE102380008E8202DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_recordVariant_in_recordVariantSection8335 = new BitSet(new long[]{0x12501903E0118142L,0x841702955F083402L,0xE102380008E8202DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_SEMI_in_recordVariantSection8339 = new BitSet(new long[]{0x12501903E0118142L,0x841702955F083402L,0xE102380008E8202DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_constExpression_in_recordVariant8393 = new BitSet(new long[]{0x0000000003000000L});
	public static final BitSet FOLLOW_COMMA_in_recordVariant8396 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_constExpression_in_recordVariant8398 = new BitSet(new long[]{0x0000000003000000L});
	public static final BitSet FOLLOW_COLON_in_recordVariant8402 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_LPAREN_in_recordVariant8404 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8042DL,0x000000000000004CL});
	public static final BitSet FOLLOW_recordVariantField_in_recordVariant8407 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8042DL,0x000000000000004CL});
	public static final BitSet FOLLOW_RPAREN_in_recordVariant8411 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RECORD_in_recordHelperDecl8463 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_HELPER_in_recordHelperDecl8465 = new BitSet(new long[]{0x8000000000000000L});
	public static final BitSet FOLLOW_FOR_in_recordHelperDecl8467 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_typeId_in_recordHelperDecl8469 = new BitSet(new long[]{0x0002000810820000L,0x03D8008000080002L,0x0000000000400000L});
	public static final BitSet FOLLOW_recordHelperItem_in_recordHelperDecl8472 = new BitSet(new long[]{0x0002000810820000L,0x03D8008000080002L,0x0000000000400000L});
	public static final BitSet FOLLOW_END_in_recordHelperDecl8476 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_recordHelperItem8525 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_recordHelperItem8558 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classProperty_in_recordHelperItem8591 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_classMethod8646 = new BitSet(new long[]{0x0000000810800000L,0x0010000000000000L});
	public static final BitSet FOLLOW_CLASS_in_classMethod8651 = new BitSet(new long[]{0x0000000810000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_methodKey_in_classMethod8655 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_classMethod8657 = new BitSet(new long[]{0x0000000000000000L,0x0000000006000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_genericDefinition_in_classMethod8660 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_formalParameterSection_in_classMethod8665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classMethod8669 = new BitSet(new long[]{0x1560201400401022L,0x0000CC0089808000L,0xA000000000180818L});
	public static final BitSet FOLLOW_methodDirective_in_classMethod8672 = new BitSet(new long[]{0x1560201400401022L,0x0000CC0089808000L,0xA000000000180818L});
	public static final BitSet FOLLOW_customAttribute_in_classMethod8780 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classMethod8785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_classMethod8789 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_classMethod8791 = new BitSet(new long[]{0x0000000001000000L,0x0000000006000000L});
	public static final BitSet FOLLOW_genericDefinition_in_classMethod8794 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_classMethod8799 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_classMethod8803 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_customAttribute_in_classMethod8806 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_typeDecl_in_classMethod8810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classMethod8812 = new BitSet(new long[]{0x1560201400401022L,0x0000CC0089808000L,0xA000000000180818L});
	public static final BitSet FOLLOW_methodDirective_in_classMethod8815 = new BitSet(new long[]{0x1560201400401022L,0x0000CC0089808000L,0xA000000000180818L});
	public static final BitSet FOLLOW_customAttribute_in_classMethod8932 = new BitSet(new long[]{0x0000000000800000L,0x0000008000000000L});
	public static final BitSet FOLLOW_CLASS_in_classMethod8937 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_OPERATOR_in_classMethod8941 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_classMethod8943 = new BitSet(new long[]{0x0000000001000000L,0x0000000006000000L});
	public static final BitSet FOLLOW_genericDefinition_in_classMethod8946 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_classMethod8951 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_classMethod8955 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_customAttribute_in_classMethod8958 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_typeDecl_in_classMethod8962 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classMethod8964 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_classMethod9071 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classMethod9076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_classMethod9080 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_classMethod9082 = new BitSet(new long[]{0x0000010000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_genericDefinition_in_classMethod9085 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_classMethod9089 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_classMethod9091 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_EQUAL_in_classMethod9093 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_classMethod9095 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classMethod9097 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_classMethod9131 = new BitSet(new long[]{0x0000000000800000L,0x0010000000000000L});
	public static final BitSet FOLLOW_CLASS_in_classMethod9136 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_PROCEDURE_in_classMethod9140 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_classMethod9142 = new BitSet(new long[]{0x0000010000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_genericDefinition_in_classMethod9145 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_classMethod9149 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_classMethod9151 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_EQUAL_in_classMethod9153 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_classMethod9155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classMethod9157 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_classField9213 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_identList_in_classField9217 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_classField9219 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_typeDecl_in_classField9221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classField9223 = new BitSet(new long[]{0x0020000400000002L,0x0000800000800000L});
	public static final BitSet FOLLOW_hintingDirective_in_classField9226 = new BitSet(new long[]{0x0020000400000002L,0x0000800000800000L});
	public static final BitSet FOLLOW_customAttribute_in_classProperty9333 = new BitSet(new long[]{0x0000000000800000L,0x0040000000000000L});
	public static final BitSet FOLLOW_CLASS_in_classProperty9338 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_PROPERTY_in_classProperty9342 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_classProperty9344 = new BitSet(new long[]{0x0000001201000000L,0x8000000200081400L,0x0000000000202001L,0x000000000000000CL});
	public static final BitSet FOLLOW_classPropertyArray_in_classProperty9347 = new BitSet(new long[]{0x0000001201000000L,0x8000000200001400L,0x0000000000202001L,0x000000000000000CL});
	public static final BitSet FOLLOW_COLON_in_classProperty9352 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_genericTypeIdent_in_classProperty9354 = new BitSet(new long[]{0x0000001200000000L,0x8000000200001400L,0x0000000000202001L,0x000000000000000CL});
	public static final BitSet FOLLOW_classPropertyIndex_in_classProperty9359 = new BitSet(new long[]{0x0000001200000000L,0x8000000200000400L,0x0000000000202001L,0x000000000000000CL});
	public static final BitSet FOLLOW_classPropertySpecifier_in_classProperty9364 = new BitSet(new long[]{0x0000001200000000L,0x8000000200000400L,0x0000000000202001L,0x000000000000000CL});
	public static final BitSet FOLLOW_SEMI_in_classProperty9368 = new BitSet(new long[]{0x0000000200000002L,0x0000000200000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_classPropertyEndSpecifier_in_classProperty9371 = new BitSet(new long[]{0x0000000200000002L,0x0000000200000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_LBRACK_in_classPropertyArray9537 = new BitSet(new long[]{0x1250180268108140L,0x8002029049081400L,0xF100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_formalParameterList_in_classPropertyArray9539 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_classPropertyArray9541 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INDEX_in_classPropertyIndex9588 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_classPropertyIndex9590 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classPropertyIndex9593 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classPropertyReadWrite_in_classPropertySpecifier9640 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classPropertyDispInterface_in_classPropertySpecifier9676 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STORED_in_classPropertySpecifier9709 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_classPropertySpecifier9711 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_classPropertySpecifier9744 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_classPropertySpecifier9746 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_classPropertySpecifier9779 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NODEFAULT_in_classPropertySpecifier9828 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IMPLEMENTS_in_classPropertySpecifier9861 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_typeId_in_classPropertySpecifier9863 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STORED_in_classPropertyEndSpecifier9903 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_classPropertyEndSpecifier9905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classPropertyEndSpecifier9907 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_classPropertyEndSpecifier9944 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_classPropertyEndSpecifier9946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classPropertyEndSpecifier9948 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_classPropertyEndSpecifier9981 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classPropertyEndSpecifier9983 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NODEFAULT_in_classPropertyEndSpecifier10016 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classPropertyEndSpecifier10018 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_READ_in_classPropertyReadWrite10062 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_qualifiedIdent_in_classPropertyReadWrite10064 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
	public static final BitSet FOLLOW_LBRACK_in_classPropertyReadWrite10067 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_classPropertyReadWrite10069 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_classPropertyReadWrite10071 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WRITE_in_classPropertyReadWrite10145 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_qualifiedIdent_in_classPropertyReadWrite10147 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
	public static final BitSet FOLLOW_LBRACK_in_classPropertyReadWrite10150 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_classPropertyReadWrite10152 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_classPropertyReadWrite10154 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_READONLY_in_classPropertyDispInterface10233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classPropertyDispInterface10235 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WRITEONLY_in_classPropertyDispInterface10268 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classPropertyDispInterface10270 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dispIDDirective_in_classPropertyDispInterface10303 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRICT_in_visibility10359 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_PROTECTED_in_visibility10363 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRICT_in_visibility10397 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_PRIVATE_in_visibility10401 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PUBLIC_in_visibility10434 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PUBLISHED_in_visibility10467 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AUTOMATED_in_visibility10500 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PROCEDURE_in_exportedProcHeading10554 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_exportedProcHeading10556 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_exportedProcHeading10559 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_exportedProcHeading10563 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_customAttribute_in_exportedProcHeading10566 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_typeDecl_in_exportedProcHeading10570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_exportedProcHeading10572 = new BitSet(new long[]{0x0560000400401002L,0x0000C40081808000L,0x2100000000100808L});
	public static final BitSet FOLLOW_functionDirective_in_exportedProcHeading10575 = new BitSet(new long[]{0x0560000400401002L,0x0000C40081808000L,0x2100000000100808L});
	public static final BitSet FOLLOW_FUNCTION_in_exportedProcHeading10610 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_exportedProcHeading10612 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_formalParameterSection_in_exportedProcHeading10615 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_exportedProcHeading10619 = new BitSet(new long[]{0x0560000400401002L,0x0000C40081808000L,0x2100000000100808L});
	public static final BitSet FOLLOW_functionDirective_in_exportedProcHeading10622 = new BitSet(new long[]{0x0560000400401002L,0x0000C40081808000L,0x2100000000100808L});
	public static final BitSet FOLLOW_methodDeclHeading_in_methodDecl10679 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_methodDecl10681 = new BitSet(new long[]{0x15E0201C18C81822L,0x0010CC00898C8002L,0xB000000022182A18L});
	public static final BitSet FOLLOW_methodDirective_in_methodDecl10684 = new BitSet(new long[]{0x15E0201C18C81822L,0x0010CC00898C8002L,0xB000000022182A18L});
	public static final BitSet FOLLOW_methodBody_in_methodDecl10689 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_methodDeclHeading10749 = new BitSet(new long[]{0x0000000810800000L,0x0010000000000000L});
	public static final BitSet FOLLOW_CLASS_in_methodDeclHeading10754 = new BitSet(new long[]{0x0000000810000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_methodKey_in_methodDeclHeading10759 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_methodName_in_methodDeclHeading10761 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_methodDeclHeading10764 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_methodDeclHeading10862 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_methodDeclHeading10867 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_methodDeclHeading10871 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_methodName_in_methodDeclHeading10873 = new BitSet(new long[]{0x0000000001000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_methodDeclHeading10876 = new BitSet(new long[]{0x0000000001000002L});
	public static final BitSet FOLLOW_COLON_in_methodDeclHeading10881 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_customAttribute_in_methodDeclHeading10884 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_typeDecl_in_methodDeclHeading10888 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_methodDeclHeading10997 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_CLASS_in_methodDeclHeading11001 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_OPERATOR_in_methodDeclHeading11003 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_methodName_in_methodDeclHeading11005 = new BitSet(new long[]{0x0000000001000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_methodDeclHeading11008 = new BitSet(new long[]{0x0000000001000002L});
	public static final BitSet FOLLOW_COLON_in_methodDeclHeading11013 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_customAttribute_in_methodDeclHeading11016 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_typeDecl_in_methodDeclHeading11020 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_methodName11269 = new BitSet(new long[]{0x0000010000000002L,0x0000000004000000L});
	public static final BitSet FOLLOW_genericDefinition_in_methodName11272 = new BitSet(new long[]{0x0000010000000002L});
	public static final BitSet FOLLOW_DOT_in_methodName11277 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_methodName11279 = new BitSet(new long[]{0x0000010000000002L,0x0000000004000000L});
	public static final BitSet FOLLOW_genericDefinition_in_methodName11282 = new BitSet(new long[]{0x0000010000000002L});
	public static final BitSet FOLLOW_procDeclHeading_in_procDecl11343 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_procDecl11345 = new BitSet(new long[]{0x05E0000C18C81802L,0x0010C400818C8003L,0x3100000022102A08L});
	public static final BitSet FOLLOW_functionDirective_in_procDecl11348 = new BitSet(new long[]{0x05E0000C18C81802L,0x0010C400818C8003L,0x3100000022102A08L});
	public static final BitSet FOLLOW_procBody_in_procDecl11353 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_procDeclHeading11419 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_PROCEDURE_in_procDeclHeading11423 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_procDeclHeading11425 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_procDeclHeading11428 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_procDeclHeading11528 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_procDeclHeading11532 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_procDeclHeading11534 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_procDeclHeading11537 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_procDeclHeading11541 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_typeDecl_in_procDeclHeading11543 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_formalParameterSection11643 = new BitSet(new long[]{0x1250180268108140L,0x8002029049081400L,0xF100100008E8042DL,0x000000000000004CL});
	public static final BitSet FOLLOW_formalParameterList_in_formalParameterSection11646 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_formalParameterSection11650 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_formalParameter_in_formalParameterList11703 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_formalParameterList11706 = new BitSet(new long[]{0x1250180268108140L,0x8002029049081400L,0xF100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_formalParameter_in_formalParameterList11708 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_customAttribute_in_formalParameter11770 = new BitSet(new long[]{0x1250180268108140L,0x8002029049001400L,0xF100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_parmType_in_formalParameter11775 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_identListFlat_in_formalParameter11779 = new BitSet(new long[]{0x0004000001000002L});
	public static final BitSet FOLLOW_COLON_in_formalParameter11782 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_typeDecl_in_formalParameter11784 = new BitSet(new long[]{0x0004000000000002L});
	public static final BitSet FOLLOW_EQUAL_in_formalParameter11789 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_formalParameter11791 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_block_in_methodBody12014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_methodBody12016 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FORWARD_in_procBody12077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_procBody12079 = new BitSet(new long[]{0x0560000400401002L,0x0000C40081808000L,0x2100000000100808L});
	public static final BitSet FOLLOW_functionDirective_in_procBody12082 = new BitSet(new long[]{0x0560000400401002L,0x0000C40081808000L,0x2100000000100808L});
	public static final BitSet FOLLOW_EXTERNAL_in_procBody12120 = new BitSet(new long[]{0x0560000400401002L,0x0000C400C1809000L,0x2100000000100808L});
	public static final BitSet FOLLOW_NAME_in_procBody12123 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_procBody12125 = new BitSet(new long[]{0x0560000400401002L,0x0000C400C1809000L,0x2100000000100808L});
	public static final BitSet FOLLOW_INDEX_in_procBody12129 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_procBody12131 = new BitSet(new long[]{0x0560000400401002L,0x0000C400C1809000L,0x2100000000100808L});
	public static final BitSet FOLLOW_functionDirective_in_procBody12136 = new BitSet(new long[]{0x0560000400401002L,0x0000C40081808000L,0x2100000000100808L});
	public static final BitSet FOLLOW_block_in_procBody12172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_procBody12174 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttributeList_in_customAttribute12227 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttributeDecl_in_customAttributeList12274 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
	public static final BitSet FOLLOW_LBRACK_in_customAttributeDecl12322 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_customAttributeIdent_in_customAttributeDecl12324 = new BitSet(new long[]{0x0000000000000000L,0x1000000002000000L});
	public static final BitSet FOLLOW_LPAREN_in_customAttributeDecl12327 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8042DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expressionList_in_customAttributeDecl12330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_customAttributeDecl12334 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_customAttributeDecl12338 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_qualifiedIdent_in_customAttributeIdent12408 = new BitSet(new long[]{0x0000000001000002L});
	public static final BitSet FOLLOW_COLON_in_customAttributeIdent12411 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_qualifiedIdent_in_customAttributeIdent12413 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_anonymousExpression_in_expression12473 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleExpression_in_expression12514 = new BitSet(new long[]{0x0004000000000002L,0x0000000804420814L});
	public static final BitSet FOLLOW_relOp_in_expression12517 = new BitSet(new long[]{0x12501903E0118140L,0x840702955F083400L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_simpleExpression_in_expression12519 = new BitSet(new long[]{0x0004000000000002L});
	public static final BitSet FOLLOW_EQUAL_in_expression12524 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_expression12526 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PROCEDURE_in_anonymousExpression12577 = new BitSet(new long[]{0x0080000818880800L,0x00100000020C0002L,0x1000000022000200L});
	public static final BitSet FOLLOW_formalParameterSection_in_anonymousExpression12580 = new BitSet(new long[]{0x0080000818880800L,0x00100000000C0002L,0x1000000022000200L});
	public static final BitSet FOLLOW_block_in_anonymousExpression12584 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_anonymousExpression12617 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_anonymousExpression12620 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_anonymousExpression12624 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_typeDecl_in_anonymousExpression12626 = new BitSet(new long[]{0x0080000818880800L,0x00100000000C0002L,0x1000000022000200L});
	public static final BitSet FOLLOW_block_in_anonymousExpression12628 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_factor_in_simpleExpression12677 = new BitSet(new long[]{0x0000004000000482L,0x0001010030000000L,0x0000000000078000L,0x0000000000000020L});
	public static final BitSet FOLLOW_operator_in_simpleExpression12680 = new BitSet(new long[]{0x12501903E0118140L,0x840702955F083400L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_factor_in_simpleExpression12682 = new BitSet(new long[]{0x0000004000000482L,0x0001010030000000L,0x0000000000078000L,0x0000000000000020L});
	public static final BitSet FOLLOW_AT2_in_factor12743 = new BitSet(new long[]{0x12501903E0118140L,0x840702955F083400L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_factor_in_factor12745 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_199_in_factor12778 = new BitSet(new long[]{0x12501903E0118140L,0x840702955F083400L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_factor_in_factor12780 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_in_factor12820 = new BitSet(new long[]{0x12501903E0118140L,0x840702955F083400L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_factor_in_factor12822 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLUS_in_factor12855 = new BitSet(new long[]{0x12501903E0118140L,0x840702955F083400L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_factor_in_factor12857 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MINUS_in_factor12890 = new BitSet(new long[]{0x12501903E0118140L,0x840702955F083400L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_factor_in_factor12892 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_POINTER2_in_factor12925 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_factor12927 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_intRealNum_in_factor12971 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRUE_in_factor13004 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FALSE_in_factor13037 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NIL_in_factor13070 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_factor13103 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_factor13105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_factor13107 = new BitSet(new long[]{0x0000010000000002L,0x0004000000000000L});
	public static final BitSet FOLLOW_POINTER2_in_factor13110 = new BitSet(new long[]{0x0000010000000002L});
	public static final BitSet FOLLOW_DOT_in_factor13115 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_factor13117 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_stringFactor_in_factor13160 = new BitSet(new long[]{0x0000010000000002L});
	public static final BitSet FOLLOW_DOT_in_factor13163 = new BitSet(new long[]{0x12501903E0118140L,0x840702955F083400L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_simpleExpression_in_factor13165 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_setSection_in_factor13200 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designator_in_factor13233 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeId_in_factor13266 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_LPAREN_in_factor13268 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_factor13270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_factor13272 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_stringFactor13325 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
	public static final BitSet FOLLOW_QuotedString_in_stringFactor13334 = new BitSet(new long[]{0x0000000180000000L});
	public static final BitSet FOLLOW_set_in_stringFactor13336 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
	public static final BitSet FOLLOW_QuotedString_in_stringFactor13347 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_QuotedString_in_stringFactor13382 = new BitSet(new long[]{0x0000000180000002L});
	public static final BitSet FOLLOW_set_in_stringFactor13385 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_QuotedString_in_stringFactor13393 = new BitSet(new long[]{0x0000000180000002L});
	public static final BitSet FOLLOW_LBRACK_in_setSection13459 = new BitSet(new long[]{0x12501903E0118140L,0x941702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_setSection13462 = new BitSet(new long[]{0x0000020002000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_set_in_setSection13465 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_setSection13473 = new BitSet(new long[]{0x0000020002000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_setSection13479 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INHERITED_in_designator13536 = new BitSet(new long[]{0x1250190260118142L,0x800602904F081400L,0xE100100008E8002DL,0x000000000000014CL});
	public static final BitSet FOLLOW_qualifiedIdent_in_designator13543 = new BitSet(new long[]{0x0000010000010002L,0x0004000006080000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_typeId_in_designator13547 = new BitSet(new long[]{0x0000010000010002L,0x0004000006080000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_designatorItem_in_designator13554 = new BitSet(new long[]{0x0000010000010002L,0x0004000006080000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_POINTER2_in_designatorItem13607 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_200_in_designatorItem13640 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_designatorItem13673 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_designatorItem13681 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LT_in_designatorItem13729 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_genericTypeIdent_in_designatorItem13731 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_COMMA_in_designatorItem13734 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_genericTypeIdent_in_designatorItem13736 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_GT_in_designatorItem13740 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACK_in_designatorItem13781 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expressionList_in_designatorItem13783 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_designatorItem13785 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_designatorItem13818 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8042DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_designatorItem13821 = new BitSet(new long[]{0x0000000003000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_colonConstruct_in_designatorItem13824 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_COMMA_in_designatorItem13829 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_designatorItem13831 = new BitSet(new long[]{0x0000000003000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_colonConstruct_in_designatorItem13834 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_designatorItem13842 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_expressionList13919 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_COMMA_in_expressionList13922 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_expressionList13924 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_COLON_in_colonConstruct13977 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_colonConstruct13979 = new BitSet(new long[]{0x0000000001000002L});
	public static final BitSet FOLLOW_COLON_in_colonConstruct13982 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_colonConstruct13984 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ifStatement_in_statement14758 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_caseStatement_in_statement14791 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_repeatStatement_in_statement14824 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_whileStatement_in_statement14857 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_forStatement_in_statement14890 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_withStatement_in_statement14923 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tryStatement_in_statement14956 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_raiseStatement_in_statement14989 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_assemblerStatement_in_statement15022 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_compoundStatement_in_statement15055 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_label_in_statement15088 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_statement15090 = new BitSet(new long[]{0x925019026039C940L,0x880602904F083508L,0xE100380018E8006DL,0x000000000000014FL});
	public static final BitSet FOLLOW_statement_in_statement15092 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleStatement_in_statement15125 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IF_in_ifStatement15179 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_ifStatement15181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_THEN_in_ifStatement15183 = new BitSet(new long[]{0x925019026039C940L,0x880602904F083508L,0xE100380018E8006DL,0x000000000000014FL});
	public static final BitSet FOLLOW_statement_in_ifStatement15185 = new BitSet(new long[]{0x0001000000000002L});
	public static final BitSet FOLLOW_ELSE_in_ifStatement15188 = new BitSet(new long[]{0x925019026039C940L,0x880602904F083508L,0xE100380018E8006DL,0x000000000000014FL});
	public static final BitSet FOLLOW_statement_in_ifStatement15190 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CASE_in_caseStatement15244 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_caseStatement15246 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_OF_in_caseStatement15248 = new BitSet(new long[]{0x12531903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_caseItem_in_caseStatement15251 = new BitSet(new long[]{0x12531903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_ELSE_in_caseStatement15256 = new BitSet(new long[]{0x925219026039C940L,0x880602904F083508L,0xE100380018E8206DL,0x000000000000014FL});
	public static final BitSet FOLLOW_statementList_in_caseStatement15258 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_caseStatement15261 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_caseStatement15267 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_caseLabel_in_caseItem15324 = new BitSet(new long[]{0x0000000003000000L});
	public static final BitSet FOLLOW_COMMA_in_caseItem15327 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_caseLabel_in_caseItem15329 = new BitSet(new long[]{0x0000000003000000L});
	public static final BitSet FOLLOW_COLON_in_caseItem15333 = new BitSet(new long[]{0x925019026039C940L,0x880602904F083508L,0xE100380018E8006DL,0x000000000000014FL});
	public static final BitSet FOLLOW_statement_in_caseItem15335 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_caseItem15338 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_caseLabel15397 = new BitSet(new long[]{0x0000020000000002L});
	public static final BitSet FOLLOW_DOTDOT_in_caseLabel15400 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_caseLabel15402 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REPEAT_in_repeatStatement15454 = new BitSet(new long[]{0x925019026039C940L,0x880602904F083508L,0xE300380018E8206DL,0x000000000000014FL});
	public static final BitSet FOLLOW_statementList_in_repeatStatement15457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_UNTIL_in_repeatStatement15461 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_repeatStatement15463 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WHILE_in_whileStatement15514 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_whileStatement15516 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_whileStatement15518 = new BitSet(new long[]{0x925019026039C940L,0x880602904F083508L,0xE100380018E8006DL,0x000000000000014FL});
	public static final BitSet FOLLOW_statement_in_whileStatement15520 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_in_forStatement15573 = new BitSet(new long[]{0x125019026011C140L,0x800602904F083400L,0xE100100008E8002DL,0x000000000000014CL});
	public static final BitSet FOLLOW_designator_in_forStatement15575 = new BitSet(new long[]{0x0000000000004000L});
	public static final BitSet FOLLOW_ASSIGN_in_forStatement15577 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_forStatement15579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_TO_in_forStatement15581 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_forStatement15583 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_forStatement15585 = new BitSet(new long[]{0x925019026039C940L,0x880602904F083508L,0xE100380018E8006DL,0x000000000000014FL});
	public static final BitSet FOLLOW_statement_in_forStatement15587 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_in_forStatement15620 = new BitSet(new long[]{0x125019026011C140L,0x800602904F083400L,0xE100100008E8002DL,0x000000000000014CL});
	public static final BitSet FOLLOW_designator_in_forStatement15622 = new BitSet(new long[]{0x0000000000004000L});
	public static final BitSet FOLLOW_ASSIGN_in_forStatement15624 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_forStatement15626 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_DOWNTO_in_forStatement15628 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_forStatement15630 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_forStatement15632 = new BitSet(new long[]{0x925019026039C940L,0x880602904F083508L,0xE100380018E8006DL,0x000000000000014FL});
	public static final BitSet FOLLOW_statement_in_forStatement15634 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_in_forStatement15667 = new BitSet(new long[]{0x1250190260118140L,0x800602904F083C00L,0xE100100008E8002DL,0x000000000000014CL});
	public static final BitSet FOLLOW_designator_in_forStatement15669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_IN_in_forStatement15671 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_forStatement15673 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_forStatement15675 = new BitSet(new long[]{0x925019026039C940L,0x880602904F083508L,0xE100380018E8006DL,0x000000000000014FL});
	public static final BitSet FOLLOW_statement_in_forStatement15677 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WITH_in_withStatement15729 = new BitSet(new long[]{0x1250190260118540L,0x800602904F083400L,0xE100100008E8002DL,0x000000000000014CL});
	public static final BitSet FOLLOW_withItemList_in_withStatement15731 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_withStatement15733 = new BitSet(new long[]{0x925019026039C940L,0x880602904F083508L,0xE100380018E8006DL,0x000000000000014FL});
	public static final BitSet FOLLOW_statement_in_withStatement15735 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_withItem_in_withItemList15788 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_COMMA_in_withItemList15791 = new BitSet(new long[]{0x1250190260118540L,0x800602904F083400L,0xE100100008E8002DL,0x000000000000014CL});
	public static final BitSet FOLLOW_withItem_in_withItemList15793 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_designator_in_withItem15852 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_AS_in_withItem15855 = new BitSet(new long[]{0x1250190260118140L,0x800602904F083400L,0xE100100008E8002DL,0x000000000000014CL});
	public static final BitSet FOLLOW_designator_in_withItem15857 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BEGIN_in_compoundStatement15907 = new BitSet(new long[]{0x925219026039C940L,0x880602904F083508L,0xE100380018E8206DL,0x000000000000014FL});
	public static final BitSet FOLLOW_statementList_in_compoundStatement15910 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_compoundStatement15914 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statement_in_statementList15980 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_statementList15985 = new BitSet(new long[]{0x925019026039C942L,0x880602904F083508L,0xE100380018E8206DL,0x000000000000014FL});
	public static final BitSet FOLLOW_statement_in_statementList15988 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_designator_in_simpleStatement16042 = new BitSet(new long[]{0x0000000000004000L});
	public static final BitSet FOLLOW_ASSIGN_in_simpleStatement16044 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_simpleStatement16046 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designator_in_simpleStatement16079 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_gotoStatement_in_simpleStatement16113 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GOTO_in_gotoStatement16165 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100380008E8002DL,0x000000000000000CL});
	public static final BitSet FOLLOW_label_in_gotoStatement16167 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXIT_in_gotoStatement16200 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_LPAREN_in_gotoStatement16203 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_gotoStatement16205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_gotoStatement16207 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BREAK_in_gotoStatement16242 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONTINUE_in_gotoStatement16275 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_constExpression16328 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_recordConstExpression_in_constExpression16330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002400L});
	public static final BitSet FOLLOW_SEMI_in_constExpression16333 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_recordConstExpression_in_constExpression16335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002400L});
	public static final BitSet FOLLOW_RPAREN_in_constExpression16339 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_constExpression16373 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_constExpression_in_constExpression16375 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_COMMA_in_constExpression16378 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_constExpression_in_constExpression16380 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_constExpression16384 = new BitSet(new long[]{0x12501903E0118142L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_constExpression_in_constExpression16387 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_constExpression16422 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_recordConstExpression16466 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_recordConstExpression16468 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_constExpression_in_recordConstExpression16470 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRY_in_tryStatement16526 = new BitSet(new long[]{0x925819026039C940L,0x880602904F083508L,0xE100380018E8206DL,0x000000000000014FL});
	public static final BitSet FOLLOW_statementList_in_tryStatement16529 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_EXCEPT_in_tryStatement16533 = new BitSet(new long[]{0x925319026039C940L,0x880602D04F083508L,0xE100380018E8206DL,0x000000000000014FL});
	public static final BitSet FOLLOW_handlerList_in_tryStatement16535 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_tryStatement16537 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRY_in_tryStatement16570 = new BitSet(new long[]{0xD25019026039C940L,0x880602904F083508L,0xE100380018E8206DL,0x000000000000014FL});
	public static final BitSet FOLLOW_statementList_in_tryStatement16573 = new BitSet(new long[]{0x4000000000000000L});
	public static final BitSet FOLLOW_FINALLY_in_tryStatement16577 = new BitSet(new long[]{0x925219026039C940L,0x880602904F083508L,0xE100380018E8206DL,0x000000000000014FL});
	public static final BitSet FOLLOW_statementList_in_tryStatement16580 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_tryStatement16584 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_handler_in_handlerList16639 = new BitSet(new long[]{0x0001000000000002L,0x0000004000000000L});
	public static final BitSet FOLLOW_ELSE_in_handlerList16644 = new BitSet(new long[]{0x925019026039C940L,0x880602904F083508L,0xE100380018E8206DL,0x000000000000014FL});
	public static final BitSet FOLLOW_statementList_in_handlerList16646 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statementList_in_handlerList16681 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ON_in_handler16739 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_handlerIdent_in_handler16742 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_typeId_in_handler16746 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_handler16748 = new BitSet(new long[]{0x925019026039C940L,0x880602904F083508L,0xE100380018E8206DL,0x000000000000014FL});
	public static final BitSet FOLLOW_handlerStatement_in_handler16750 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_handlerIdent16805 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_handlerIdent16807 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statement_in_handlerStatement16856 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_handlerStatement16859 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_handlerStatement16894 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RAISE_in_raiseStatement16945 = new BitSet(new long[]{0x1250190260118140L,0x800602904F083400L,0xE100100008E8002DL,0x000000000000014CL});
	public static final BitSet FOLLOW_designator_in_raiseStatement16948 = new BitSet(new long[]{0x0000000000008002L});
	public static final BitSet FOLLOW_AT_in_raiseStatement16953 = new BitSet(new long[]{0x1250190260118140L,0x800602904F083400L,0xE100100008E8002DL,0x000000000000014CL});
	public static final BitSet FOLLOW_designator_in_raiseStatement16955 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ASM_in_assemblerStatement17008 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000001FFL});
	public static final BitSet FOLLOW_END_in_assemblerStatement17016 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_reintroduceDirective_in_methodDirective17089 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_overloadDirective_in_methodDirective17131 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bindingDirective_in_methodDirective17176 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_abstractDirective_in_methodDirective17222 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_inlineDirective_in_methodDirective17267 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_callConvention_in_methodDirective17314 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_hintingDirective_in_methodDirective17362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_methodDirective17364 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_oldCallConventionDirective_in_methodDirective17406 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dispIDDirective_in_methodDirective17442 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_externalDirective_in_methodDirective17475 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_overloadDirective_in_functionDirective17523 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_inlineDirective_in_functionDirective17566 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_callConvention_in_functionDirective17611 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_oldCallConventionDirective_in_functionDirective17657 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_hintingDirective_in_functionDirective17691 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_functionDirective17693 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_callConventionNoSemi_in_functionDirective17734 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_externalDirective_in_functionDirective17738 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_externalDirective_in_functionDirective17781 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UNSAFE_in_functionDirective17814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_functionDirective17816 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REINTRODUCE_in_reintroduceDirective17876 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_reintroduceDirective17878 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OVERLOAD_in_overloadDirective17926 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_overloadDirective17929 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MESSAGE_in_bindingDirective17984 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_bindingDirective17986 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_bindingDirective17988 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STATIC_in_bindingDirective18021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_bindingDirective18023 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DYNAMIC_in_bindingDirective18056 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_bindingDirective18058 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OVERRIDE_in_bindingDirective18091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_bindingDirective18093 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VIRTUAL_in_bindingDirective18126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_bindingDirective18128 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ABSTRACT_in_abstractDirective18176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_abstractDirective18178 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FINAL_in_abstractDirective18211 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_abstractDirective18213 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INLINE_in_inlineDirective18263 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_inlineDirective18265 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ASSEMBLER_in_inlineDirective18298 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_inlineDirective18300 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CDECL_in_callConvention18352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_callConvention18354 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PASCAL_in_callConvention18391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_callConvention18393 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REGISTER_in_callConvention18429 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_callConvention18431 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SAFECALL_in_callConvention18465 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_callConvention18467 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STDCALL_in_callConvention18501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_callConvention18503 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXPORT_in_callConvention18538 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_callConvention18540 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FAR_in_oldCallConventionDirective18806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_oldCallConventionDirective18808 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOCAL_in_oldCallConventionDirective18847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_oldCallConventionDirective18849 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NEAR_in_oldCallConventionDirective18886 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_oldCallConventionDirective18888 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEPRECATED_in_hintingDirective18942 = new BitSet(new long[]{0x0000000180000002L,0x0400000000000000L});
	public static final BitSet FOLLOW_stringFactor_in_hintingDirective18945 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXPERIMENTAL_in_hintingDirective18980 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLATFORM_in_hintingDirective19015 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LIBRARY_in_hintingDirective19048 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARARGS_in_externalDirective19096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_externalDirective19098 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXTERNAL_in_externalDirective19134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_externalDirective19136 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXTERNAL_in_externalDirective19169 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_constExpression_in_externalDirective19171 = new BitSet(new long[]{0x0000000000000000L,0x0000000040001000L,0x0000000000002000L});
	public static final BitSet FOLLOW_externalSpecifier_in_externalDirective19174 = new BitSet(new long[]{0x0000000000000000L,0x0000000040001000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_externalDirective19178 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NAME_in_externalSpecifier19227 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_constExpression_in_externalSpecifier19229 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INDEX_in_externalSpecifier19262 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_constExpression_in_externalSpecifier19264 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DISPID_in_dispIDDirective19317 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_dispIDDirective19319 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_dispIDDirective19321 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TkIdentifier_in_ident19384 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_198_in_ident19417 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_TkIdentifier_in_ident19419 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_198_in_ident19456 = new BitSet(new long[]{0xFFFB3CFE78FABFF0L,0x8BFAFFF7E987FF2BL,0xF78000003FF9DBFFL,0x000000000000002FL});
	public static final BitSet FOLLOW_keywordsAsIdentifier_in_ident19458 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_usedKeywordsAsNames_in_ident19495 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_identList20792 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_COMMA_in_identList20795 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_identList20797 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_ident_in_identListFlat20862 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_COMMA_in_identListFlat20865 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_identListFlat20867 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_TkIdentifier_in_label20941 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TkIntNum_in_label20974 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TkHexNum_in_label21007 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_usedKeywordsAsNames_in_label21040 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TkRealNum_in_intRealNum21095 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_intNum_in_intRealNum21128 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_namespaceName21272 = new BitSet(new long[]{0x0000010000000002L});
	public static final BitSet FOLLOW_DOT_in_namespaceName21275 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_namespaceName21277 = new BitSet(new long[]{0x0000010000000002L});
	public static final BitSet FOLLOW_ident_in_qualifiedIdent21332 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_qualifiedIdent21334 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_qualifiedIdent21339 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_declSection_in_synpred23_Delphi1593 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_blockBody_in_synpred24_Delphi1598 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_methodDecl_in_synpred30_Delphi1875 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procDecl_in_synpred31_Delphi1908 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exportedProcHeading_in_synpred35_Delphi2092 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procDecl_in_synpred37_Delphi2158 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constDeclaration_in_synpred39_Delphi2307 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred41_Delphi2462 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeDeclaration_in_synpred44_Delphi2556 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred45_Delphi2622 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_varDeclaration_in_synpred47_Delphi2719 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred49_Delphi2879 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ABSOLUTE_in_synpred52_Delphi2971 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_synpred52_Delphi2973 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ABSOLUTE_in_synpred53_Delphi3006 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_constExpression_in_synpred53_Delphi3008 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_strucType_in_synpred60_Delphi3253 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pointerType_in_synpred61_Delphi3286 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_stringType_in_synpred62_Delphi3319 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedureType_in_synpred63_Delphi3352 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_variantType_in_synpred64_Delphi3385 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_genericPostfix_in_synpred66_Delphi3426 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_synpred67_Delphi3431 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_typeDecl_in_synpred67_Delphi3433 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_paranthesePostfix_in_synpred68_Delphi3438 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TYPE_in_synpred69_Delphi3419 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_typeId_in_synpred69_Delphi3423 = new BitSet(new long[]{0x0000010000000002L,0x0000000006000000L});
	public static final BitSet FOLLOW_genericPostfix_in_synpred69_Delphi3426 = new BitSet(new long[]{0x0000010000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_DOT_in_synpred69_Delphi3431 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_typeDecl_in_synpred69_Delphi3433 = new BitSet(new long[]{0x0000010000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_paranthesePostfix_in_synpred69_Delphi3438 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONST_in_synpred79_Delphi4019 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OF_in_synpred80_Delphi4191 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_typeDecl_in_synpred80_Delphi4193 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACK_in_synpred82_Delphi4342 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_synpred82_Delphi4344 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_synpred82_Delphi4346 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_codePageNumber_in_synpred85_Delphi4393 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_methodType_in_synpred86_Delphi4502 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleProcedureType_in_synpred87_Delphi4535 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_synpred89_Delphi4678 = new BitSet(new long[]{0x0040000000400000L,0x0000400000000000L,0x0000000000100808L});
	public static final BitSet FOLLOW_callConventionNoSemi_in_synpred89_Delphi4682 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred91_Delphi4790 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred93_Delphi4845 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_synpred94_Delphi4957 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subRangeType_in_synpred95_Delphi4990 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOTDOT_in_synpred96_Delphi5079 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_constExpression_in_synpred96_Delphi5081 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classTypeTypeDecl_in_synpred109_Delphi5743 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classTypeDecl_in_synpred110_Delphi5776 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_synpred118_Delphi6101 = new BitSet(new long[]{0x1252180A78928160L,0x83DA02904B081402L,0xF10010002AE8122DL,0x000000000000004CL});
	public static final BitSet FOLLOW_classState_in_synpred118_Delphi6104 = new BitSet(new long[]{0x1252180A78928140L,0x83DA02904B081402L,0xF10010002AE8022DL,0x000000000000004CL});
	public static final BitSet FOLLOW_classParent_in_synpred118_Delphi6109 = new BitSet(new long[]{0x1252180A78928140L,0x83DA029049081402L,0xF10010002AE8022DL,0x000000000000004CL});
	public static final BitSet FOLLOW_classItem_in_synpred118_Delphi6114 = new BitSet(new long[]{0x1252180A78928140L,0x83DA029049081402L,0xF10010002AE8022DL,0x000000000000004CL});
	public static final BitSet FOLLOW_END_in_synpred118_Delphi6118 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classParent_in_synpred119_Delphi6172 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_synpred122_Delphi6408 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_synpred123_Delphi6441 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classField_in_synpred124_Delphi6474 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classProperty_in_synpred125_Delphi6507 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_synpred132_Delphi6777 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classProperty_in_synpred133_Delphi6810 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_interfaceKey_in_synpred140_Delphi6962 = new BitSet(new long[]{0x0002000810800000L,0x0050008002080002L});
	public static final BitSet FOLLOW_classParent_in_synpred140_Delphi6965 = new BitSet(new long[]{0x0002000810800000L,0x0050008000080002L});
	public static final BitSet FOLLOW_interfaceGuid_in_synpred140_Delphi6970 = new BitSet(new long[]{0x0002000810800000L,0x0050008000080002L});
	public static final BitSet FOLLOW_interfaceItem_in_synpred140_Delphi6975 = new BitSet(new long[]{0x0002000810800000L,0x0050008000080002L});
	public static final BitSet FOLLOW_END_in_synpred140_Delphi6979 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classParent_in_synpred141_Delphi7073 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_synpred143_Delphi7316 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_synpred144_Delphi7350 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_synpred147_Delphi7490 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_synpred148_Delphi7523 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleRecord_in_synpred149_Delphi7611 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_recordField_in_synpred150_Delphi7700 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_synpred153_Delphi7850 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_synpred154_Delphi7888 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classProperty_in_synpred155_Delphi7921 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_recordField_in_synpred158_Delphi8020 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_synpred172_Delphi8558 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred173_Delphi8646 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred178_Delphi8646 = new BitSet(new long[]{0x0000000810800000L,0x0010000000000000L});
	public static final BitSet FOLLOW_CLASS_in_synpred178_Delphi8651 = new BitSet(new long[]{0x0000000810000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_methodKey_in_synpred178_Delphi8655 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_synpred178_Delphi8657 = new BitSet(new long[]{0x0000000000000000L,0x0000000006000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_genericDefinition_in_synpred178_Delphi8660 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred178_Delphi8665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_synpred178_Delphi8669 = new BitSet(new long[]{0x1560201400401022L,0x0000CC0089808000L,0xA000000000180818L});
	public static final BitSet FOLLOW_methodDirective_in_synpred178_Delphi8672 = new BitSet(new long[]{0x1560201400401022L,0x0000CC0089808000L,0xA000000000180818L});
	public static final BitSet FOLLOW_customAttribute_in_synpred179_Delphi8780 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred183_Delphi8806 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred185_Delphi8780 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_synpred185_Delphi8785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_synpred185_Delphi8789 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_synpred185_Delphi8791 = new BitSet(new long[]{0x0000000001000000L,0x0000000006000000L});
	public static final BitSet FOLLOW_genericDefinition_in_synpred185_Delphi8794 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred185_Delphi8799 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_synpred185_Delphi8803 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_customAttribute_in_synpred185_Delphi8806 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_typeDecl_in_synpred185_Delphi8810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_synpred185_Delphi8812 = new BitSet(new long[]{0x1560201400401022L,0x0000CC0089808000L,0xA000000000180818L});
	public static final BitSet FOLLOW_methodDirective_in_synpred185_Delphi8815 = new BitSet(new long[]{0x1560201400401022L,0x0000CC0089808000L,0xA000000000180818L});
	public static final BitSet FOLLOW_customAttribute_in_synpred186_Delphi8932 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred190_Delphi8958 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred191_Delphi8932 = new BitSet(new long[]{0x0000000000800000L,0x0000008000000000L});
	public static final BitSet FOLLOW_CLASS_in_synpred191_Delphi8937 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_OPERATOR_in_synpred191_Delphi8941 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_synpred191_Delphi8943 = new BitSet(new long[]{0x0000000001000000L,0x0000000006000000L});
	public static final BitSet FOLLOW_genericDefinition_in_synpred191_Delphi8946 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred191_Delphi8951 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_synpred191_Delphi8955 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_customAttribute_in_synpred191_Delphi8958 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_typeDecl_in_synpred191_Delphi8962 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_synpred191_Delphi8964 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred192_Delphi9071 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred195_Delphi9071 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_synpred195_Delphi9076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_synpred195_Delphi9080 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_synpred195_Delphi9082 = new BitSet(new long[]{0x0000010000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_genericDefinition_in_synpred195_Delphi9085 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_synpred195_Delphi9089 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_synpred195_Delphi9091 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_EQUAL_in_synpred195_Delphi9093 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_synpred195_Delphi9095 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_synpred195_Delphi9097 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred196_Delphi9131 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred199_Delphi9213 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred201_Delphi9333 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_synpred208_Delphi9593 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_synpred212_Delphi9744 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_synpred212_Delphi9746 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_synpred213_Delphi9779 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_synpred216_Delphi9944 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_synpred216_Delphi9946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_synpred216_Delphi9948 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_synpred217_Delphi9981 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_synpred217_Delphi9983 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred230_Delphi10566 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_methodDirective_in_synpred235_Delphi10684 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_methodBody_in_synpred236_Delphi10689 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred237_Delphi10749 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred240_Delphi10749 = new BitSet(new long[]{0x0000000810800000L,0x0010000000000000L});
	public static final BitSet FOLLOW_CLASS_in_synpred240_Delphi10754 = new BitSet(new long[]{0x0000000810000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_methodKey_in_synpred240_Delphi10759 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_methodName_in_synpred240_Delphi10761 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred240_Delphi10764 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred241_Delphi10862 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred244_Delphi10884 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred246_Delphi10862 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_synpred246_Delphi10867 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_synpred246_Delphi10871 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_methodName_in_synpred246_Delphi10873 = new BitSet(new long[]{0x0000000001000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred246_Delphi10876 = new BitSet(new long[]{0x0000000001000002L});
	public static final BitSet FOLLOW_COLON_in_synpred246_Delphi10881 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_customAttribute_in_synpred246_Delphi10884 = new BitSet(new long[]{0x1A501923E0918340L,0x841722955F093402L,0xE102380028E8402FL,0x00000000000001CCL});
	public static final BitSet FOLLOW_typeDecl_in_synpred246_Delphi10888 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred247_Delphi10997 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred249_Delphi11016 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionDirective_in_synpred256_Delphi11348 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procBody_in_synpred257_Delphi11353 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred258_Delphi11419 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred260_Delphi11419 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_PROCEDURE_in_synpred260_Delphi11423 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_synpred260_Delphi11425 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred260_Delphi11428 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred261_Delphi11528 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred265_Delphi11770 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionDirective_in_synpred271_Delphi12082 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NAME_in_synpred273_Delphi12123 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_synpred273_Delphi12125 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INDEX_in_synpred274_Delphi12129 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_synpred274_Delphi12131 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionDirective_in_synpred275_Delphi12136 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttributeDecl_in_synpred277_Delphi12274 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expressionList_in_synpred278_Delphi12330 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_anonymousExpression_in_synpred281_Delphi12473 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_relOp_in_synpred282_Delphi12517 = new BitSet(new long[]{0x12501903E0118140L,0x840702955F083400L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_simpleExpression_in_synpred282_Delphi12519 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EQUAL_in_synpred283_Delphi12524 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_synpred283_Delphi12526 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred284_Delphi12580 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_operator_in_synpred287_Delphi12680 = new BitSet(new long[]{0x12501903E0118140L,0x840702955F083400L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_factor_in_synpred287_Delphi12682 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT2_in_synpred288_Delphi12743 = new BitSet(new long[]{0x12501903E0118140L,0x840702955F083400L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_factor_in_synpred288_Delphi12745 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_199_in_synpred289_Delphi12778 = new BitSet(new long[]{0x12501903E0118140L,0x840702955F083400L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_factor_in_synpred289_Delphi12780 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_in_synpred290_Delphi12820 = new BitSet(new long[]{0x12501903E0118140L,0x840702955F083400L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_factor_in_synpred290_Delphi12822 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLUS_in_synpred291_Delphi12855 = new BitSet(new long[]{0x12501903E0118140L,0x840702955F083400L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_factor_in_synpred291_Delphi12857 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MINUS_in_synpred292_Delphi12890 = new BitSet(new long[]{0x12501903E0118140L,0x840702955F083400L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_factor_in_synpred292_Delphi12892 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_POINTER2_in_synpred293_Delphi12925 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_ident_in_synpred293_Delphi12927 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_intRealNum_in_synpred294_Delphi12971 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRUE_in_synpred295_Delphi13004 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FALSE_in_synpred296_Delphi13037 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NIL_in_synpred297_Delphi13070 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_POINTER2_in_synpred298_Delphi13110 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_synpred299_Delphi13115 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_synpred299_Delphi13117 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_synpred300_Delphi13103 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_synpred300_Delphi13105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_synpred300_Delphi13107 = new BitSet(new long[]{0x0000010000000002L,0x0004000000000000L});
	public static final BitSet FOLLOW_POINTER2_in_synpred300_Delphi13110 = new BitSet(new long[]{0x0000010000000002L});
	public static final BitSet FOLLOW_DOT_in_synpred300_Delphi13115 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_synpred300_Delphi13117 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_synpred301_Delphi13163 = new BitSet(new long[]{0x12501903E0118140L,0x840702955F083400L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_simpleExpression_in_synpred301_Delphi13165 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_stringFactor_in_synpred302_Delphi13160 = new BitSet(new long[]{0x0000010000000002L});
	public static final BitSet FOLLOW_DOT_in_synpred302_Delphi13163 = new BitSet(new long[]{0x12501903E0118140L,0x840702955F083400L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_simpleExpression_in_synpred302_Delphi13165 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_setSection_in_synpred303_Delphi13200 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designator_in_synpred304_Delphi13233 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_QuotedString_in_synpred307_Delphi13334 = new BitSet(new long[]{0x0000000180000000L});
	public static final BitSet FOLLOW_set_in_synpred307_Delphi13336 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_QuotedString_in_synpred308_Delphi13347 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_synpred311_Delphi13385 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_QuotedString_in_synpred311_Delphi13393 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_synpred316_Delphi13462 = new BitSet(new long[]{0x0000020002000002L});
	public static final BitSet FOLLOW_set_in_synpred316_Delphi13465 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_synpred316_Delphi13473 = new BitSet(new long[]{0x0000020002000002L});
	public static final BitSet FOLLOW_INHERITED_in_synpred317_Delphi13536 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_qualifiedIdent_in_synpred318_Delphi13543 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_qualifiedIdent_in_synpred319_Delphi13543 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeId_in_synpred319_Delphi13547 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designatorItem_in_synpred320_Delphi13554 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_synpred331_Delphi13821 = new BitSet(new long[]{0x0000000003000002L});
	public static final BitSet FOLLOW_colonConstruct_in_synpred331_Delphi13824 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_COMMA_in_synpred331_Delphi13829 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_synpred331_Delphi13831 = new BitSet(new long[]{0x0000000003000002L});
	public static final BitSet FOLLOW_colonConstruct_in_synpred331_Delphi13834 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_label_in_synpred362_Delphi15088 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_synpred362_Delphi15090 = new BitSet(new long[]{0x925019026039C940L,0x880602904F083508L,0xE100380018E8006DL,0x000000000000014FL});
	public static final BitSet FOLLOW_statement_in_synpred362_Delphi15092 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ELSE_in_synpred363_Delphi15188 = new BitSet(new long[]{0x925019026039C940L,0x880602904F083508L,0xE100380018E8006DL,0x000000000000014FL});
	public static final BitSet FOLLOW_statement_in_synpred363_Delphi15190 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statementList_in_synpred370_Delphi15457 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_in_synpred371_Delphi15573 = new BitSet(new long[]{0x125019026011C140L,0x800602904F083400L,0xE100100008E8002DL,0x000000000000014CL});
	public static final BitSet FOLLOW_designator_in_synpred371_Delphi15575 = new BitSet(new long[]{0x0000000000004000L});
	public static final BitSet FOLLOW_ASSIGN_in_synpred371_Delphi15577 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_synpred371_Delphi15579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_TO_in_synpred371_Delphi15581 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_synpred371_Delphi15583 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_synpred371_Delphi15585 = new BitSet(new long[]{0x925019026039C940L,0x880602904F083508L,0xE100380018E8006DL,0x000000000000014FL});
	public static final BitSet FOLLOW_statement_in_synpred371_Delphi15587 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_in_synpred372_Delphi15620 = new BitSet(new long[]{0x125019026011C140L,0x800602904F083400L,0xE100100008E8002DL,0x000000000000014CL});
	public static final BitSet FOLLOW_designator_in_synpred372_Delphi15622 = new BitSet(new long[]{0x0000000000004000L});
	public static final BitSet FOLLOW_ASSIGN_in_synpred372_Delphi15624 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_synpred372_Delphi15626 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_DOWNTO_in_synpred372_Delphi15628 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_synpred372_Delphi15630 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_synpred372_Delphi15632 = new BitSet(new long[]{0x925019026039C940L,0x880602904F083508L,0xE100380018E8006DL,0x000000000000014FL});
	public static final BitSet FOLLOW_statement_in_synpred372_Delphi15634 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statementList_in_synpred375_Delphi15910 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statement_in_synpred376_Delphi15980 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statement_in_synpred377_Delphi15988 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_synpred378_Delphi15985 = new BitSet(new long[]{0x925019026039C942L,0x880602904F083508L,0xE100380018E8006DL,0x000000000000014FL});
	public static final BitSet FOLLOW_statement_in_synpred378_Delphi15988 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designator_in_synpred379_Delphi16042 = new BitSet(new long[]{0x0000000000004000L});
	public static final BitSet FOLLOW_ASSIGN_in_synpred379_Delphi16044 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_synpred379_Delphi16046 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designator_in_synpred380_Delphi16079 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_synpred382_Delphi16203 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_expression_in_synpred382_Delphi16205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_synpred382_Delphi16207 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_synpred386_Delphi16328 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_recordConstExpression_in_synpred386_Delphi16330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002400L});
	public static final BitSet FOLLOW_SEMI_in_synpred386_Delphi16333 = new BitSet(new long[]{0x1250180260108140L,0x8002029049001400L,0xE100100008E8002DL,0x000000000000004CL});
	public static final BitSet FOLLOW_recordConstExpression_in_synpred386_Delphi16335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002400L});
	public static final BitSet FOLLOW_RPAREN_in_synpred386_Delphi16339 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constExpression_in_synpred388_Delphi16387 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_synpred389_Delphi16373 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_constExpression_in_synpred389_Delphi16375 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_COMMA_in_synpred389_Delphi16378 = new BitSet(new long[]{0x12501903E0118140L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_constExpression_in_synpred389_Delphi16380 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_synpred389_Delphi16384 = new BitSet(new long[]{0x12501903E0118142L,0x841702955F083402L,0xE102380008E8002DL,0x00000000000001CCL});
	public static final BitSet FOLLOW_constExpression_in_synpred389_Delphi16387 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statementList_in_synpred390_Delphi16529 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRY_in_synpred391_Delphi16526 = new BitSet(new long[]{0x925819026039C940L,0x880602904F083508L,0xE100380018E8206DL,0x000000000000014FL});
	public static final BitSet FOLLOW_statementList_in_synpred391_Delphi16529 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_EXCEPT_in_synpred391_Delphi16533 = new BitSet(new long[]{0x925319026039C940L,0x880602D04F083508L,0xE100380018E8206DL,0x000000000000014FL});
	public static final BitSet FOLLOW_handlerList_in_synpred391_Delphi16535 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_synpred391_Delphi16537 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statementList_in_synpred392_Delphi16573 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statementList_in_synpred393_Delphi16580 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_handler_in_synpred396_Delphi16639 = new BitSet(new long[]{0x0001000000000002L,0x0000004000000000L});
	public static final BitSet FOLLOW_ELSE_in_synpred396_Delphi16644 = new BitSet(new long[]{0x925019026039C940L,0x880602904F083508L,0xE100380018E8206DL,0x000000000000014FL});
	public static final BitSet FOLLOW_statementList_in_synpred396_Delphi16646 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statement_in_synpred399_Delphi16856 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_synpred399_Delphi16859 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designator_in_synpred400_Delphi16948 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_in_synpred401_Delphi16953 = new BitSet(new long[]{0x1250190260118140L,0x800602904F083400L,0xE100100008E8002DL,0x000000000000014CL});
	public static final BitSet FOLLOW_designator_in_synpred401_Delphi16955 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_callConvention_in_synpred415_Delphi17611 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_callConventionNoSemi_in_synpred419_Delphi17734 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_externalDirective_in_synpred419_Delphi17738 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_externalDirective_in_synpred420_Delphi17781 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_synpred421_Delphi17929 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXTERNAL_in_synpred445_Delphi19134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_synpred445_Delphi19136 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_synpred629_Delphi21332 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_synpred629_Delphi21334 = new BitSet(new long[]{0x0000000000000002L});
}
